
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000028c  00800100  000027aa  0000283e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  0080038c  0080038c  00002aca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002aca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000420  00000000  00000000  00002b26  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000048d3  00000000  00000000  00002f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000019fa  00000000  00000000  00007819  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016ee  00000000  00000000  00009213  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b10  00000000  00000000  0000a904  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c34  00000000  00000000  0000b414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000025bc  00000000  00000000  0000c048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000358  00000000  00000000  0000e604  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__ctors_end>
       4:	0c 94 8c 02 	jmp	0x518	; 0x518 <__vector_1>
       8:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
       c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      10:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      14:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      18:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      1c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      20:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      24:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      28:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      2c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      30:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      34:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      38:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      3c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      40:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      44:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      48:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      4c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      50:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      54:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      58:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      5c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      60:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      64:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      68:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      6c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>

00000070 <LETTERS_BIG>:
      70:	30 31 32 33 34 35 36 37 38 39 21 3f 51 57 45 52     0123456789!?QWER
      80:	54 59 55 49 4f 50 29 2b 41 53 44 46 47 48 4a 4b     TYUIOP)+ASDFGHJK
      90:	4c 28 27 2d 5a 58 43 56 42 4e 4d 2c 2e 3b 3a 23     L('-ZXCVBNM,.;:#

000000a0 <LETTERS_SMALL>:
      a0:	30 31 32 33 34 35 36 37 38 39 21 3f 71 77 65 72     0123456789!?qwer
      b0:	74 79 75 69 6f 70 26 2b 61 73 64 66 67 68 6a 6b     tyuiop&+asdfghjk
      c0:	6c 25 24 2d 7a 78 63 76 62 6e 6d 2c 2e 3b 3a 23     l%$-zxcvbnm,.;:#

000000d0 <font8>:
	...
      d8:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
      e8:	14 7f 7f 14 7f 7f 14 00 20 54 54 38 54 54 58 00     ........ TT8TTX.
      f8:	38 64 54 54 4c 38 00 00 20 50 54 55 54 78 40 00     8dTTL8.. PTUTx@.
     108:	60 18 16 11 7f 49 49 00 5c 22 51 49 45 22 1d 00     `....II.\"QIE"..
     118:	60 30 28 25 28 30 60 00 08 2a 3e 1c 1c 3e 2a 08     `0(%(0`..*>..>*.
     128:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     138:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     148:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     158:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     168:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     178:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     188:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     198:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1a8:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1b8:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1c8:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1d8:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     1e8:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     1f8:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     208:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     218:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     228:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     238:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     248:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     258:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     268:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     278:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     288:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     298:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2a8:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2b8:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2c8:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2d8:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     2e8:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     2f8:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     308:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     318:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     328:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     338:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     348:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     358:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     368:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     378:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     388:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     398:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3a8:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3b8:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

000003c8 <__ctors_end>:
     3c8:	11 24       	eor	r1, r1
     3ca:	1f be       	out	0x3f, r1	; 63
     3cc:	cf ef       	ldi	r28, 0xFF	; 255
     3ce:	d4 e0       	ldi	r29, 0x04	; 4
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	cd bf       	out	0x3d, r28	; 61

000003d4 <__do_copy_data>:
     3d4:	13 e0       	ldi	r17, 0x03	; 3
     3d6:	a0 e0       	ldi	r26, 0x00	; 0
     3d8:	b1 e0       	ldi	r27, 0x01	; 1
     3da:	ea ea       	ldi	r30, 0xAA	; 170
     3dc:	f7 e2       	ldi	r31, 0x27	; 39
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <__do_copy_data+0x10>
     3e0:	05 90       	lpm	r0, Z+
     3e2:	0d 92       	st	X+, r0
     3e4:	ac 38       	cpi	r26, 0x8C	; 140
     3e6:	b1 07       	cpc	r27, r17
     3e8:	d9 f7       	brne	.-10     	; 0x3e0 <__do_copy_data+0xc>

000003ea <__do_clear_bss>:
     3ea:	23 e0       	ldi	r18, 0x03	; 3
     3ec:	ac e8       	ldi	r26, 0x8C	; 140
     3ee:	b3 e0       	ldi	r27, 0x03	; 3
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <.do_clear_bss_start>

000003f2 <.do_clear_bss_loop>:
     3f2:	1d 92       	st	X+, r1

000003f4 <.do_clear_bss_start>:
     3f4:	a0 3e       	cpi	r26, 0xE0	; 224
     3f6:	b2 07       	cpc	r27, r18
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <.do_clear_bss_loop>
     3fa:	0e 94 67 0c 	call	0x18ce	; 0x18ce <main>
     3fe:	0c 94 d3 13 	jmp	0x27a6	; 0x27a6 <_exit>

00000402 <__bad_interrupt>:
     402:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000406 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	// Set interrupt pin to input
	clear_bit(DDRE, DDE0);
     406:	30 98       	cbi	0x06, 0	; 6
     408:	08 95       	ret

0000040a <ADC_read>:
char ADC_read(char channel){
	// Start address for the adc
	volatile char *adc = (char *) 0x1400;

	// Invalid input
	if(channel > 3) return 0;
     40a:	84 30       	cpi	r24, 0x04	; 4
     40c:	40 f4       	brcc	.+16     	; 0x41e <ADC_read+0x14>
	
	// Choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
     40e:	8c 5f       	subi	r24, 0xFC	; 252
     410:	80 93 00 14 	sts	0x1400, r24
	
	// Wait until /INTR is low (triggered by ADC receiving data)
	loop_until_bit_is_clear(PINE, PINE0);
     414:	28 99       	sbic	0x05, 0	; 5
     416:	fe cf       	rjmp	.-4      	; 0x414 <ADC_read+0xa>
	
	// Return the read value
	return *adc; 
     418:	80 91 00 14 	lds	r24, 0x1400
     41c:	08 95       	ret
char ADC_read(char channel){
	// Start address for the adc
	volatile char *adc = (char *) 0x1400;

	// Invalid input
	if(channel > 3) return 0;
     41e:	80 e0       	ldi	r24, 0x00	; 0
	// Wait until /INTR is low (triggered by ADC receiving data)
	loop_until_bit_is_clear(PINE, PINE0);
	
	// Return the read value
	return *adc; 
     420:	08 95       	ret

00000422 <brightness_init>:
#include "joy.h"
#include "OLED_driver.h"
#include "defines.h"


void brightness_init(void) {
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
	// Initialize to max brightness
	OLED_set_brightness(255);
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <OLED_set_brightness>

	OLED_reset();
     430:	0e 94 cd 0c 	call	0x199a	; 0x199a <OLED_reset>
	// Print instructions
	fprintf(OLED, "%s ", "l_slider:");
     434:	89 e6       	ldi	r24, 0x69	; 105
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	9f 93       	push	r25
     43a:	8f 93       	push	r24
     43c:	03 e7       	ldi	r16, 0x73	; 115
     43e:	11 e0       	ldi	r17, 0x01	; 1
     440:	1f 93       	push	r17
     442:	0f 93       	push	r16
     444:	c6 e0       	ldi	r28, 0x06	; 6
     446:	d1 e0       	ldi	r29, 0x01	; 1
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
	OLED_goto_pos(1,0);
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	0e 94 a7 0c 	call	0x194e	; 0x194e <OLED_goto_pos>
	fprintf(OLED, "%s ", "sets brightness");
     458:	87 e7       	ldi	r24, 0x77	; 119
     45a:	91 e0       	ldi	r25, 0x01	; 1
     45c:	9f 93       	push	r25
     45e:	8f 93       	push	r24
     460:	1f 93       	push	r17
     462:	0f 93       	push	r16
     464:	df 93       	push	r29
     466:	cf 93       	push	r28
     468:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
	OLED_goto_pos(2,0);
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	82 e0       	ldi	r24, 0x02	; 2
     470:	0e 94 a7 0c 	call	0x194e	; 0x194e <OLED_goto_pos>
	fprintf(OLED, "%s ", "l_button: back");
     474:	87 e8       	ldi	r24, 0x87	; 135
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	9f 93       	push	r25
     47a:	8f 93       	push	r24
     47c:	1f 93       	push	r17
     47e:	0f 93       	push	r16
     480:	df 93       	push	r29
     482:	cf 93       	push	r28
     484:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
	
	// Print field showing brightness 
	for (int line = 4; line < 8; line++) {
		OLED_set_line(line);
     488:	84 e0       	ldi	r24, 0x04	; 4
     48a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <OLED_set_line>
     48e:	85 e0       	ldi	r24, 0x05	; 5
     490:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <OLED_set_line>
     494:	86 e0       	ldi	r24, 0x06	; 6
     496:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <OLED_set_line>
     49a:	87 e0       	ldi	r24, 0x07	; 7
     49c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <OLED_set_line>
     4a0:	8d b7       	in	r24, 0x3d	; 61
     4a2:	9e b7       	in	r25, 0x3e	; 62
     4a4:	42 96       	adiw	r24, 0x12	; 18
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	9e bf       	out	0x3e, r25	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	8d bf       	out	0x3d, r24	; 61
	}
	
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	08 95       	ret

000004ba <brightness_run>:

void brightness_run(void) {
	brightness_init();
     4ba:	0e 94 11 02 	call	0x422	; 0x422 <brightness_init>
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     4be:	05 c0       	rjmp	.+10     	; 0x4ca <brightness_run+0x10>
		slider_position = SLI_getPosition();
     4c0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <SLI_getPosition>
     4c4:	86 2f       	mov	r24, r22
		OLED_set_brightness(slider_position.left); 
     4c6:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <OLED_set_brightness>
}

void brightness_run(void) {
	brightness_init();
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <JOY_button_pressed>
     4d0:	89 2b       	or	r24, r25
     4d2:	b1 f3       	breq	.-20     	; 0x4c0 <brightness_run+0x6>
		slider_position = SLI_getPosition();
		OLED_set_brightness(slider_position.left); 
	}
     4d4:	08 95       	ret

000004d6 <CAN_int_vect>:
// Interrupt service routine
ISR(INT0_vect){
	CAN_int_vect();
}

void CAN_int_vect() {
     4d6:	cf 93       	push	r28
	uint8_t int_flags = MCP2515_read(MCP_CANINTF);
     4d8:	8c e2       	ldi	r24, 0x2C	; 44
     4da:	0e 94 88 0a 	call	0x1510	; 0x1510 <MCP2515_read>
     4de:	c8 2f       	mov	r28, r24
	if(int_flags & MCP_RX0IF){
     4e0:	80 ff       	sbrs	r24, 0
     4e2:	0b c0       	rjmp	.+22     	; 0x4fa <CAN_int_vect+0x24>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     4e4:	40 e0       	ldi	r20, 0x00	; 0
     4e6:	61 e0       	ldi	r22, 0x01	; 1
     4e8:	8c e2       	ldi	r24, 0x2C	; 44
     4ea:	0e 94 ba 0a 	call	0x1574	; 0x1574 <MCP2515_bit_modify>
		flag_RX0 = 1;
     4ee:	21 e0       	ldi	r18, 0x01	; 1
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	30 93 8f 03 	sts	0x038F, r19
     4f6:	20 93 8e 03 	sts	0x038E, r18
	}
			
	if(int_flags & MCP_RX1IF){
     4fa:	c1 ff       	sbrs	r28, 1
     4fc:	0b c0       	rjmp	.+22     	; 0x514 <__stack+0x15>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	62 e0       	ldi	r22, 0x02	; 2
     502:	8c e2       	ldi	r24, 0x2C	; 44
     504:	0e 94 ba 0a 	call	0x1574	; 0x1574 <MCP2515_bit_modify>
		flag_RX1 = 1;
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	90 93 8d 03 	sts	0x038D, r25
     510:	80 93 8c 03 	sts	0x038C, r24
	}
}
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <__vector_1>:

volatile int flag_RX0 = 0;
volatile int flag_RX1 = 0;

// Interrupt service routine
ISR(INT0_vect){
     518:	1f 92       	push	r1
     51a:	0f 92       	push	r0
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	0f 92       	push	r0
     520:	11 24       	eor	r1, r1
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	4f 93       	push	r20
     528:	5f 93       	push	r21
     52a:	6f 93       	push	r22
     52c:	7f 93       	push	r23
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
	CAN_int_vect();
     53a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <CAN_int_vect>
}
     53e:	ff 91       	pop	r31
     540:	ef 91       	pop	r30
     542:	bf 91       	pop	r27
     544:	af 91       	pop	r26
     546:	9f 91       	pop	r25
     548:	8f 91       	pop	r24
     54a:	7f 91       	pop	r23
     54c:	6f 91       	pop	r22
     54e:	5f 91       	pop	r21
     550:	4f 91       	pop	r20
     552:	3f 91       	pop	r19
     554:	2f 91       	pop	r18
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <CAN_init>:
	}
}


void CAN_init() {
	MCP2515_init();
     560:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <MCP2515_init>
	
	// Enable rollover: message will rollover to RX1 if RX0 is full
	// Also sets filter for RXB0 to accept all transmission
	MCP2515_bit_modify(MCP_RXB0CTRL, 0x64, 0xFF);  
     564:	4f ef       	ldi	r20, 0xFF	; 255
     566:	64 e6       	ldi	r22, 0x64	; 100
     568:	80 e6       	ldi	r24, 0x60	; 96
     56a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <MCP2515_bit_modify>

	
	// Set filter for RXB1 to accept all transmission
	MCP2515_bit_modify(MCP_RXB1CTRL, 0x60, 0xFF);
     56e:	4f ef       	ldi	r20, 0xFF	; 255
     570:	60 e6       	ldi	r22, 0x60	; 96
     572:	80 e7       	ldi	r24, 0x70	; 112
     574:	0e 94 ba 0a 	call	0x1574	; 0x1574 <MCP2515_bit_modify>
	
	// Enable Received buffer register interrupts
	MCP2515_bit_modify(MCP_CANINTE,0x03, 0x03);
     578:	43 e0       	ldi	r20, 0x03	; 3
     57a:	63 e0       	ldi	r22, 0x03	; 3
     57c:	8b e2       	ldi	r24, 0x2B	; 43
     57e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <MCP2515_bit_modify>
	
	// Set normal mode: 0x00
	MCP2515_bit_modify(MCP_CANCTRL,0xE0, NORMAL_MODE);
     582:	40 e0       	ldi	r20, 0x00	; 0
     584:	60 ee       	ldi	r22, 0xE0	; 224
     586:	8f e0       	ldi	r24, 0x0F	; 15
     588:	0e 94 ba 0a 	call	0x1574	; 0x1574 <MCP2515_bit_modify>
     58c:	08 95       	ret

0000058e <CAN_print_message>:
	

}


void CAN_print_message(can_message* msg) {
     58e:	cf 92       	push	r12
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	8c 01       	movw	r16, r24
	if(msg->length == 0) return;
     5a0:	fc 01       	movw	r30, r24
     5a2:	82 81       	ldd	r24, Z+2	; 0x02
     5a4:	88 23       	and	r24, r24
     5a6:	f1 f1       	breq	.+124    	; 0x624 <CAN_print_message+0x96>
	printf("\nid: %d\tlength: %d\t DATA:\n", msg->id, msg->length);
     5a8:	1f 92       	push	r1
     5aa:	8f 93       	push	r24
     5ac:	81 81       	ldd	r24, Z+1	; 0x01
     5ae:	8f 93       	push	r24
     5b0:	80 81       	ld	r24, Z
     5b2:	8f 93       	push	r24
     5b4:	86 e9       	ldi	r24, 0x96	; 150
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	9f 93       	push	r25
     5ba:	8f 93       	push	r24
     5bc:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <printf>
	for(int i = 0; i < msg->length; i++) {
     5c0:	f8 01       	movw	r30, r16
     5c2:	82 81       	ldd	r24, Z+2	; 0x02
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	88 23       	and	r24, r24
     5d2:	21 f1       	breq	.+72     	; 0x61c <CAN_print_message+0x8e>
     5d4:	68 01       	movw	r12, r16
     5d6:	f3 e0       	ldi	r31, 0x03	; 3
     5d8:	cf 0e       	add	r12, r31
     5da:	d1 1c       	adc	r13, r1
     5dc:	c0 e0       	ldi	r28, 0x00	; 0
     5de:	d0 e0       	ldi	r29, 0x00	; 0
		printf("%x\t", msg->data[i]);
     5e0:	0f 2e       	mov	r0, r31
     5e2:	f1 eb       	ldi	r31, 0xB1	; 177
     5e4:	ef 2e       	mov	r14, r31
     5e6:	f1 e0       	ldi	r31, 0x01	; 1
     5e8:	ff 2e       	mov	r15, r31
     5ea:	f0 2d       	mov	r31, r0
     5ec:	f6 01       	movw	r30, r12
     5ee:	21 91       	ld	r18, Z+
     5f0:	6f 01       	movw	r12, r30
     5f2:	82 2f       	mov	r24, r18
     5f4:	99 27       	eor	r25, r25
     5f6:	87 fd       	sbrc	r24, 7
     5f8:	90 95       	com	r25
     5fa:	9f 93       	push	r25
     5fc:	2f 93       	push	r18
     5fe:	ff 92       	push	r15
     600:	ef 92       	push	r14
     602:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <printf>


void CAN_print_message(can_message* msg) {
	if(msg->length == 0) return;
	printf("\nid: %d\tlength: %d\t DATA:\n", msg->id, msg->length);
	for(int i = 0; i < msg->length; i++) {
     606:	21 96       	adiw	r28, 0x01	; 1
     608:	f8 01       	movw	r30, r16
     60a:	82 81       	ldd	r24, Z+2	; 0x02
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	0f 90       	pop	r0
     616:	c8 17       	cp	r28, r24
     618:	d9 07       	cpc	r29, r25
     61a:	44 f3       	brlt	.-48     	; 0x5ec <CAN_print_message+0x5e>
		printf("%x\t", msg->data[i]);
	}
	printf("\n");
     61c:	8a e0       	ldi	r24, 0x0A	; 10
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 ff 10 	call	0x21fe	; 0x21fe <putchar>
}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	08 95       	ret

00000636 <CAN_transmit_complete>:
	//}
}


bool CAN_transmit_complete(int transmit_buffer_index) {
	const int address = MCP_TXB0CTRL + BUFFER_LENGTH * transmit_buffer_index;
     636:	03 96       	adiw	r24, 0x03	; 3
	
	// Check if the TXREQ bit is clear, indication the transmit buffer is not pending transmission
	return !(MCP2515_read(address) & MCP_TXREQ);
     638:	82 95       	swap	r24
     63a:	80 7f       	andi	r24, 0xF0	; 240
     63c:	0e 94 88 0a 	call	0x1510	; 0x1510 <MCP2515_read>
     640:	83 fb       	bst	r24, 3
     642:	88 27       	eor	r24, r24
     644:	80 f9       	bld	r24, 0
}
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	89 27       	eor	r24, r25
     64a:	08 95       	ret

0000064c <CAN_message_send>:
		printf("%x\t", msg->data[i]);
	}
	printf("\n");
}

void CAN_message_send(can_message* msg) {
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ec 01       	movw	r28, r24
	// Use only Transmit buffer register 0
	uint8_t buffer_numb = 0; 
		
	if(!CAN_transmit_complete(0)){
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 1b 03 	call	0x636	; 0x636 <CAN_transmit_complete>
     65e:	88 23       	and	r24, r24
     660:	81 f1       	breq	.+96     	; 0x6c2 <CAN_message_send+0x76>
		return; //ERROR
	}


	// Set 11 bit ID
	uint8_t id_high = msg->id / 8;
     662:	08 81       	ld	r16, Y
     664:	19 81       	ldd	r17, Y+1	; 0x01
     666:	b8 01       	movw	r22, r16
     668:	76 95       	lsr	r23
     66a:	67 95       	ror	r22
     66c:	76 95       	lsr	r23
     66e:	67 95       	ror	r22
     670:	76 95       	lsr	r23
     672:	67 95       	ror	r22
	uint8_t id_low = msg->id % 8;
	

	MCP2515_write(MCP_TXB0SIDH + BUFFER_LENGTH * buffer_numb, id_high);
     674:	81 e3       	ldi	r24, 0x31	; 49
     676:	0e 94 9a 0a 	call	0x1534	; 0x1534 <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL + BUFFER_LENGTH * buffer_numb, (id_low << 5));
     67a:	60 2f       	mov	r22, r16
     67c:	62 95       	swap	r22
     67e:	66 0f       	add	r22, r22
     680:	60 7e       	andi	r22, 0xE0	; 224
     682:	82 e3       	ldi	r24, 0x32	; 50
     684:	0e 94 9a 0a 	call	0x1534	; 0x1534 <MCP2515_write>

	// Transmit the number of data bytes
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);
     688:	6a 81       	ldd	r22, Y+2	; 0x02
     68a:	85 e3       	ldi	r24, 0x35	; 53
     68c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <MCP2515_write>

	// Transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     690:	8a 81       	ldd	r24, Y+2	; 0x02
     692:	88 23       	and	r24, r24
     694:	69 f0       	breq	.+26     	; 0x6b0 <CAN_message_send+0x64>
     696:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
     698:	fe 01       	movw	r30, r28
     69a:	e1 0f       	add	r30, r17
     69c:	f1 1d       	adc	r31, r1
     69e:	63 81       	ldd	r22, Z+3	; 0x03
     6a0:	86 e3       	ldi	r24, 0x36	; 54
     6a2:	81 0f       	add	r24, r17
     6a4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <MCP2515_write>

	// Transmit the number of data bytes
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);

	// Transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     6a8:	1f 5f       	subi	r17, 0xFF	; 255
     6aa:	8a 81       	ldd	r24, Y+2	; 0x02
     6ac:	18 17       	cp	r17, r24
     6ae:	a0 f3       	brcs	.-24     	; 0x698 <CAN_message_send+0x4c>
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
	}
	
	uint8_t buffer_states = (uint8_t)(1 << buffer_numb);
	MCP2515_request_to_send(buffer_states);
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	0e 94 ae 0a 	call	0x155c	; 0x155c <MCP2515_request_to_send>
	
	// Wait until transmission is complete
	while(!CAN_transmit_complete(0));
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 1b 03 	call	0x636	; 0x636 <CAN_transmit_complete>
     6be:	88 23       	and	r24, r24
     6c0:	d1 f3       	breq	.-12     	; 0x6b6 <CAN_message_send+0x6a>
	
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	0f 91       	pop	r16
     6ca:	08 95       	ret

000006cc <CAN_message_receive>:
	// Check if the TXREQ bit is clear, indication the transmit buffer is not pending transmission
	return !(MCP2515_read(address) & MCP_TXREQ);
}


void CAN_message_receive(can_message* received_msg){
     6cc:	df 92       	push	r13
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	8c 01       	movw	r16, r24
	cli();
     6dc:	f8 94       	cli
	int receive_buffer_index;
	if(flag_RX0){
     6de:	80 91 8e 03 	lds	r24, 0x038E
     6e2:	90 91 8f 03 	lds	r25, 0x038F
     6e6:	89 2b       	or	r24, r25
     6e8:	39 f0       	breq	.+14     	; 0x6f8 <CAN_message_receive+0x2c>
		receive_buffer_index = 0;
		flag_RX0 = 0;
     6ea:	10 92 8f 03 	sts	0x038F, r1
     6ee:	10 92 8e 03 	sts	0x038E, r1

void CAN_message_receive(can_message* received_msg){
	cli();
	int receive_buffer_index;
	if(flag_RX0){
		receive_buffer_index = 0;
     6f2:	c0 e0       	ldi	r28, 0x00	; 0
     6f4:	d0 e0       	ldi	r29, 0x00	; 0
     6f6:	11 c0       	rjmp	.+34     	; 0x71a <CAN_message_receive+0x4e>
		flag_RX0 = 0;
	}
	else if(flag_RX1){
     6f8:	80 91 8c 03 	lds	r24, 0x038C
     6fc:	90 91 8d 03 	lds	r25, 0x038D
     700:	89 2b       	or	r24, r25
     702:	39 f0       	breq	.+14     	; 0x712 <CAN_message_receive+0x46>
		receive_buffer_index = 1;
		flag_RX1 = 0;
     704:	10 92 8d 03 	sts	0x038D, r1
     708:	10 92 8c 03 	sts	0x038C, r1
	if(flag_RX0){
		receive_buffer_index = 0;
		flag_RX0 = 0;
	}
	else if(flag_RX1){
		receive_buffer_index = 1;
     70c:	c1 e0       	ldi	r28, 0x01	; 1
     70e:	d0 e0       	ldi	r29, 0x00	; 0
     710:	04 c0       	rjmp	.+8      	; 0x71a <CAN_message_receive+0x4e>
		flag_RX1 = 0;
	}
	else{
		// No message was received
		received_msg->length = 0;
     712:	f8 01       	movw	r30, r16
     714:	12 82       	std	Z+2, r1	; 0x02
		sei();
     716:	78 94       	sei
		return;
     718:	42 c0       	rjmp	.+132    	; 0x79e <CAN_message_receive+0xd2>
	}
	
	// Set message ID
	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_index);
     71a:	fc 2e       	mov	r15, r28
     71c:	ff 0c       	add	r15, r15
     71e:	ff 0c       	add	r15, r15
     720:	ff 0c       	add	r15, r15
     722:	ff 0c       	add	r15, r15
     724:	81 e6       	ldi	r24, 0x61	; 97
     726:	8f 0d       	add	r24, r15
     728:	0e 94 88 0a 	call	0x1510	; 0x1510 <MCP2515_read>
     72c:	e8 2e       	mov	r14, r24
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_index);
     72e:	82 e6       	ldi	r24, 0x62	; 98
     730:	8f 0d       	add	r24, r15
     732:	0e 94 88 0a 	call	0x1510	; 0x1510 <MCP2515_read>
	
	// Only want the last 3 bits
	id_low = id_low >> 5;
	
	received_msg->id = (id_high << 3) + id_low; 
     736:	2e 2d       	mov	r18, r14
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	22 0f       	add	r18, r18
     73c:	33 1f       	adc	r19, r19
     73e:	22 0f       	add	r18, r18
     740:	33 1f       	adc	r19, r19
     742:	22 0f       	add	r18, r18
     744:	33 1f       	adc	r19, r19
	// Set message ID
	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_index);
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_index);
	
	// Only want the last 3 bits
	id_low = id_low >> 5;
     746:	82 95       	swap	r24
     748:	86 95       	lsr	r24
     74a:	87 70       	andi	r24, 0x07	; 7
	
	received_msg->id = (id_high << 3) + id_low; 
     74c:	28 0f       	add	r18, r24
     74e:	31 1d       	adc	r19, r1
     750:	f8 01       	movw	r30, r16
     752:	31 83       	std	Z+1, r19	; 0x01
     754:	20 83       	st	Z, r18
	
	// Read the data length, given by last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_index) % (1<<3));
     756:	85 e6       	ldi	r24, 0x65	; 101
     758:	8f 0d       	add	r24, r15
     75a:	0e 94 88 0a 	call	0x1510	; 0x1510 <MCP2515_read>
     75e:	87 70       	andi	r24, 0x07	; 7
     760:	f8 01       	movw	r30, r16
     762:	82 83       	std	Z+2, r24	; 0x02
	
	// Read the received data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     764:	88 23       	and	r24, r24
     766:	d1 f0       	breq	.+52     	; 0x79c <CAN_message_receive+0xd0>
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_index;
     768:	7e 01       	movw	r14, r28
     76a:	ee 0c       	add	r14, r14
     76c:	ff 1c       	adc	r15, r15
     76e:	ee 0c       	add	r14, r14
     770:	ff 1c       	adc	r15, r15
     772:	ee 0c       	add	r14, r14
     774:	ff 1c       	adc	r15, r15
     776:	ee 0c       	add	r14, r14
     778:	ff 1c       	adc	r15, r15
	
	// Read the data length, given by last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_index) % (1<<3));
	
	// Read the received data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     77a:	d1 2c       	mov	r13, r1
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_index;
     77c:	cd 2d       	mov	r28, r13
     77e:	d0 e0       	ldi	r29, 0x00	; 0
     780:	ce 01       	movw	r24, r28
     782:	8a 59       	subi	r24, 0x9A	; 154
     784:	9f 4f       	sbci	r25, 0xFF	; 255
		received_msg->data[byte] = MCP2515_read(address);
     786:	8e 0d       	add	r24, r14
     788:	0e 94 88 0a 	call	0x1510	; 0x1510 <MCP2515_read>
     78c:	c0 0f       	add	r28, r16
     78e:	d1 1f       	adc	r29, r17
     790:	8b 83       	std	Y+3, r24	; 0x03
	
	// Read the data length, given by last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_index) % (1<<3));
	
	// Read the received data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     792:	d3 94       	inc	r13
     794:	f8 01       	movw	r30, r16
     796:	82 81       	ldd	r24, Z+2	; 0x02
     798:	d8 16       	cp	r13, r24
     79a:	80 f3       	brcs	.-32     	; 0x77c <CAN_message_receive+0xb0>
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_index;
		received_msg->data[byte] = MCP2515_read(address);
	}
	sei();
     79c:	78 94       	sei
}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	df 90       	pop	r13
     7ac:	08 95       	ret

000007ae <send_control_input>:

	state.id = 'q';
	CAN_message_send(&state);
}

void send_control_input(void) {
     7ae:	ff 92       	push	r15
     7b0:	0f 93       	push	r16
     7b2:	1f 93       	push	r17
     7b4:	cf 93       	push	r28
     7b6:	df 93       	push	r29
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
     7bc:	2b 97       	sbiw	r28, 0x0b	; 11
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
	can_message control_input;
	control_input.id = 'c';
     7c8:	83 e6       	ldi	r24, 0x63	; 99
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	9a 83       	std	Y+2, r25	; 0x02
     7ce:	89 83       	std	Y+1, r24	; 0x01
	control_input.length = 5;
     7d0:	85 e0       	ldi	r24, 0x05	; 5
     7d2:	8b 83       	std	Y+3, r24	; 0x03
	
	JOY_position_t joy_position = JOY_getPosition();
     7d4:	0e 94 79 06 	call	0xcf2	; 0xcf2 <JOY_getPosition>
	control_input.data[JOYSTICK_X] = joy_position.x;
     7d8:	6c 83       	std	Y+4, r22	; 0x04
	control_input.data[JOYSTICK_Y] = joy_position.y;
     7da:	8d 83       	std	Y+5, r24	; 0x05
	
	SLI_position_t sli_position = SLI_getPosition();
     7dc:	0e 94 db 06 	call	0xdb6	; 0xdb6 <SLI_getPosition>
	control_input.data[SLIDER_LEFT] = sli_position.left;
     7e0:	6e 83       	std	Y+6, r22	; 0x06
	control_input.data[SLIDER_RIGHT] = sli_position.right;
     7e2:	8f 83       	std	Y+7, r24	; 0x07
	
	int joy_button = JOY_button_pressed(JOY_BUTTON) << JOY_BUTTON;
     7e4:	82 e0       	ldi	r24, 0x02	; 2
     7e6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <JOY_button_pressed>
     7ea:	8c 01       	movw	r16, r24
	int left_button = JOY_button_pressed(LEFT_BUTTON) << LEFT_BUTTON;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	0e 94 5f 06 	call	0xcbe	; 0xcbe <JOY_button_pressed>
     7f2:	f8 2e       	mov	r15, r24
	int right_button = JOY_button_pressed(RIGHT_BUTTON) << RIGHT_BUTTON;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <JOY_button_pressed>
	
	SLI_position_t sli_position = SLI_getPosition();
	control_input.data[SLIDER_LEFT] = sli_position.left;
	control_input.data[SLIDER_RIGHT] = sli_position.right;
	
	int joy_button = JOY_button_pressed(JOY_BUTTON) << JOY_BUTTON;
     7fa:	00 0f       	add	r16, r16
     7fc:	11 1f       	adc	r17, r17
     7fe:	00 0f       	add	r16, r16
     800:	11 1f       	adc	r17, r17
	int left_button = JOY_button_pressed(LEFT_BUTTON) << LEFT_BUTTON;
	int right_button = JOY_button_pressed(RIGHT_BUTTON) << RIGHT_BUTTON;
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
	control_input.data[BUTTONS] = joy_button | left_button | right_button;
     806:	08 2b       	or	r16, r24
     808:	f0 2a       	or	r15, r16
     80a:	f8 86       	std	Y+8, r15	; 0x08
	
	CAN_message_send(&control_input);
     80c:	ce 01       	movw	r24, r28
     80e:	01 96       	adiw	r24, 0x01	; 1
     810:	0e 94 26 03 	call	0x64c	; 0x64c <CAN_message_send>
	//while(!CAN_transmit_complete(TB0));
}
     814:	2b 96       	adiw	r28, 0x0b	; 11
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	08 95       	ret

0000082c <receive_score>:

void receive_score(void){
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	2b 97       	sbiw	r28, 0x0b	; 11
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
	can_message score_message;
	score_message.length = 0;
     840:	1b 82       	std	Y+3, r1	; 0x03
	int new_score = 0;
	
	CAN_message_receive(&score_message);
     842:	ce 01       	movw	r24, r28
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	0e 94 66 03 	call	0x6cc	; 0x6cc <CAN_message_receive>
	CAN_print_message(&score_message);
     84a:	ce 01       	movw	r24, r28
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	0e 94 c7 02 	call	0x58e	; 0x58e <CAN_print_message>
	if(score_message.length && score_message.id == 'h'){
     852:	8b 81       	ldd	r24, Y+3	; 0x03
     854:	88 23       	and	r24, r24
     856:	09 f4       	brne	.+2      	; 0x85a <receive_score+0x2e>
     858:	96 c0       	rjmp	.+300    	; 0x986 <receive_score+0x15a>
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	9a 81       	ldd	r25, Y+2	; 0x02
     85e:	88 36       	cpi	r24, 0x68	; 104
     860:	91 05       	cpc	r25, r1
     862:	09 f0       	breq	.+2      	; 0x866 <receive_score+0x3a>
     864:	90 c0       	rjmp	.+288    	; 0x986 <receive_score+0x15a>
		
		new_score = ((uint8_t)(score_message.data[0]) << 8) |(uint8_t) score_message.data[1];
     866:	8c 81       	ldd	r24, Y+4	; 0x04
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	98 2f       	mov	r25, r24
     86c:	88 27       	eor	r24, r24
     86e:	2d 81       	ldd	r18, Y+5	; 0x05
     870:	82 2b       	or	r24, r18
		if (new_score <= score+10 && new_score >= score){
     872:	20 91 94 03 	lds	r18, 0x0394
     876:	30 91 95 03 	lds	r19, 0x0395
     87a:	26 5f       	subi	r18, 0xF6	; 246
     87c:	3f 4f       	sbci	r19, 0xFF	; 255
     87e:	28 17       	cp	r18, r24
     880:	39 07       	cpc	r19, r25
     882:	64 f0       	brlt	.+24     	; 0x89c <receive_score+0x70>
     884:	20 91 94 03 	lds	r18, 0x0394
     888:	30 91 95 03 	lds	r19, 0x0395
     88c:	82 17       	cp	r24, r18
     88e:	93 07       	cpc	r25, r19
     890:	2c f0       	brlt	.+10     	; 0x89c <receive_score+0x70>
			score = new_score;
     892:	90 93 95 03 	sts	0x0395, r25
     896:	80 93 94 03 	sts	0x0394, r24
     89a:	3c c0       	rjmp	.+120    	; 0x914 <receive_score+0xe8>

		}
		else if(new_score == 0 && score != 0){
     89c:	89 2b       	or	r24, r25
     89e:	d1 f5       	brne	.+116    	; 0x914 <receive_score+0xe8>
     8a0:	80 91 94 03 	lds	r24, 0x0394
     8a4:	90 91 95 03 	lds	r25, 0x0395
     8a8:	89 2b       	or	r24, r25
     8aa:	a1 f1       	breq	.+104    	; 0x914 <receive_score+0xe8>
			last_score = score;
     8ac:	80 91 94 03 	lds	r24, 0x0394
     8b0:	90 91 95 03 	lds	r25, 0x0395
     8b4:	90 93 91 03 	sts	0x0391, r25
     8b8:	80 93 90 03 	sts	0x0390, r24
			score = new_score;
     8bc:	10 92 95 03 	sts	0x0395, r1
     8c0:	10 92 94 03 	sts	0x0394, r1
			OLED_goto_pos(7,0);
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	87 e0       	ldi	r24, 0x07	; 7
     8c8:	0e 94 a7 0c 	call	0x194e	; 0x194e <OLED_goto_pos>
			fprintf(OLED, "last score:%d.%d", last_score/10, last_score%10);
     8cc:	80 91 90 03 	lds	r24, 0x0390
     8d0:	90 91 91 03 	lds	r25, 0x0391
     8d4:	e0 91 90 03 	lds	r30, 0x0390
     8d8:	f0 91 91 03 	lds	r31, 0x0391
     8dc:	2a e0       	ldi	r18, 0x0A	; 10
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	b9 01       	movw	r22, r18
     8e2:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodhi4>
     8e6:	9f 93       	push	r25
     8e8:	8f 93       	push	r24
     8ea:	cf 01       	movw	r24, r30
     8ec:	b9 01       	movw	r22, r18
     8ee:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodhi4>
     8f2:	7f 93       	push	r23
     8f4:	6f 93       	push	r22
     8f6:	85 eb       	ldi	r24, 0xB5	; 181
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	9f 93       	push	r25
     8fc:	8f 93       	push	r24
     8fe:	84 e1       	ldi	r24, 0x14	; 20
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	9f 93       	push	r25
     904:	8f 93       	push	r24
     906:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	de bf       	out	0x3e, r29	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	cd bf       	out	0x3d, r28	; 61
		}
		if (score > highscore){
     914:	20 91 94 03 	lds	r18, 0x0394
     918:	30 91 95 03 	lds	r19, 0x0395
     91c:	80 91 92 03 	lds	r24, 0x0392
     920:	90 91 93 03 	lds	r25, 0x0393
     924:	82 17       	cp	r24, r18
     926:	93 07       	cpc	r25, r19
     928:	44 f4       	brge	.+16     	; 0x93a <receive_score+0x10e>
			highscore = score;
     92a:	80 91 94 03 	lds	r24, 0x0394
     92e:	90 91 95 03 	lds	r25, 0x0395
     932:	90 93 93 03 	sts	0x0393, r25
     936:	80 93 92 03 	sts	0x0392, r24
		}
		OLED_reset_cursor();
     93a:	0e 94 b0 0c 	call	0x1960	; 0x1960 <OLED_reset_cursor>
		fprintf(OLED, "score: %d.%d    ", score/10, score%10);
     93e:	80 91 94 03 	lds	r24, 0x0394
     942:	90 91 95 03 	lds	r25, 0x0395
     946:	e0 91 94 03 	lds	r30, 0x0394
     94a:	f0 91 95 03 	lds	r31, 0x0395
     94e:	2a e0       	ldi	r18, 0x0A	; 10
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	b9 01       	movw	r22, r18
     954:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodhi4>
     958:	9f 93       	push	r25
     95a:	8f 93       	push	r24
     95c:	cf 01       	movw	r24, r30
     95e:	b9 01       	movw	r22, r18
     960:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodhi4>
     964:	7f 93       	push	r23
     966:	6f 93       	push	r22
     968:	86 ec       	ldi	r24, 0xC6	; 198
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	9f 93       	push	r25
     96e:	8f 93       	push	r24
     970:	84 e1       	ldi	r24, 0x14	; 20
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	9f 93       	push	r25
     976:	8f 93       	push	r24
     978:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
     980:	de bf       	out	0x3e, r29	; 62
     982:	0f be       	out	0x3f, r0	; 63
     984:	cd bf       	out	0x3d, r28	; 61
	}
	
}
     986:	2b 96       	adiw	r28, 0x0b	; 11
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <GAME_play>:
volatile int last_score = 0;

void send_control_input(void);
void receive_score(void);

void GAME_play() {
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	2b 97       	sbiw	r28, 0x0b	; 11
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
	OLED_reset();
     9b0:	0e 94 cd 0c 	call	0x199a	; 0x199a <OLED_reset>
	fprintf(OLED, "score: %s", "0.0");
     9b4:	87 ed       	ldi	r24, 0xD7	; 215
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	9f 93       	push	r25
     9ba:	8f 93       	push	r24
     9bc:	8b ed       	ldi	r24, 0xDB	; 219
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	9f 93       	push	r25
     9c2:	8f 93       	push	r24
     9c4:	04 e1       	ldi	r16, 0x14	; 20
     9c6:	11 e0       	ldi	r17, 0x01	; 1
     9c8:	1f 93       	push	r17
     9ca:	0f 93       	push	r16
     9cc:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
	fprintf(OLED, "\n%s \n", "lButton: quit");
     9d0:	85 ee       	ldi	r24, 0xE5	; 229
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	9f 93       	push	r25
     9d6:	8f 93       	push	r24
     9d8:	83 ef       	ldi	r24, 0xF3	; 243
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	9f 93       	push	r25
     9de:	8f 93       	push	r24
     9e0:	1f 93       	push	r17
     9e2:	0f 93       	push	r16
     9e4:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
	fprintf(OLED, "%s \n", "jButton: shoot");
     9e8:	89 ef       	ldi	r24, 0xF9	; 249
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	9f 93       	push	r25
     9ee:	8f 93       	push	r24
     9f0:	84 ef       	ldi	r24, 0xF4	; 244
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	9f 93       	push	r25
     9f6:	8f 93       	push	r24
     9f8:	1f 93       	push	r17
     9fa:	0f 93       	push	r16
     9fc:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a00:	2f ef       	ldi	r18, 0xFF	; 255
     a02:	8f e7       	ldi	r24, 0x7F	; 127
     a04:	97 e0       	ldi	r25, 0x07	; 7
     a06:	21 50       	subi	r18, 0x01	; 1
     a08:	80 40       	sbci	r24, 0x00	; 0
     a0a:	90 40       	sbci	r25, 0x00	; 0
     a0c:	e1 f7       	brne	.-8      	; 0xa06 <GAME_play+0x6e>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <GAME_play+0x78>
     a10:	00 00       	nop
	// Make sure first press does not trigger solenoid
	_delay_ms(500);						
	
	//send start message
	can_message state;
	state.length = 1;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	8b 83       	std	Y+3, r24	; 0x03
	state.id = 's';
     a16:	83 e7       	ldi	r24, 0x73	; 115
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	9a 83       	std	Y+2, r25	; 0x02
     a1c:	89 83       	std	Y+1, r24	; 0x01
	state.data[0] = 0xFF;
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	8c 83       	std	Y+4, r24	; 0x04
	CAN_message_send(&state);
     a22:	ce 01       	movw	r24, r28
     a24:	01 96       	adiw	r24, 0x01	; 1
     a26:	0e 94 26 03 	call	0x64c	; 0x64c <CAN_message_send>
	
	while(!JOY_button_pressed(LEFT_BUTTON)){
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <GAME_play+0xa6>
		send_control_input();
     a36:	0e 94 d7 03 	call	0x7ae	; 0x7ae <send_control_input>
		receive_score();
     a3a:	0e 94 16 04 	call	0x82c	; 0x82c <receive_score>
	state.length = 1;
	state.id = 's';
	state.data[0] = 0xFF;
	CAN_message_send(&state);
	
	while(!JOY_button_pressed(LEFT_BUTTON)){
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	0e 94 5f 06 	call	0xcbe	; 0xcbe <JOY_button_pressed>
     a44:	89 2b       	or	r24, r25
     a46:	b9 f3       	breq	.-18     	; 0xa36 <GAME_play+0x9e>
		send_control_input();
		receive_score();
	}
	//send quit message

	state.id = 'q';
     a48:	81 e7       	ldi	r24, 0x71	; 113
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	9a 83       	std	Y+2, r25	; 0x02
     a4e:	89 83       	std	Y+1, r24	; 0x01
	CAN_message_send(&state);
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 26 03 	call	0x64c	; 0x64c <CAN_message_send>
}
     a58:	2b 96       	adiw	r28, 0x0b	; 11
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	08 95       	ret

00000a6e <GAME_print_highscore>:
		fprintf(OLED, "score: %d.%d    ", score/10, score%10);
	}
	
}

void GAME_print_highscore(){
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
	OLED_reset();
     a72:	0e 94 cd 0c 	call	0x199a	; 0x199a <OLED_reset>
	fprintf(OLED, "   HIGHSCORE:\n  %d.%d seconds\n", highscore/10, highscore%10);
     a76:	80 91 92 03 	lds	r24, 0x0392
     a7a:	90 91 93 03 	lds	r25, 0x0393
     a7e:	e0 91 92 03 	lds	r30, 0x0392
     a82:	f0 91 93 03 	lds	r31, 0x0393
     a86:	2a e0       	ldi	r18, 0x0A	; 10
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	b9 01       	movw	r22, r18
     a8c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodhi4>
     a90:	9f 93       	push	r25
     a92:	8f 93       	push	r24
     a94:	cf 01       	movw	r24, r30
     a96:	b9 01       	movw	r22, r18
     a98:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodhi4>
     a9c:	7f 93       	push	r23
     a9e:	6f 93       	push	r22
     aa0:	88 e0       	ldi	r24, 0x08	; 8
     aa2:	92 e0       	ldi	r25, 0x02	; 2
     aa4:	9f 93       	push	r25
     aa6:	8f 93       	push	r24
     aa8:	c4 e1       	ldi	r28, 0x14	; 20
     aaa:	d1 e0       	ldi	r29, 0x01	; 1
     aac:	df 93       	push	r29
     aae:	cf 93       	push	r28
     ab0:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
	fprintf(OLED, "\n\n\n\n %s", "lButton: back");
     ab4:	87 e2       	ldi	r24, 0x27	; 39
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	9f 93       	push	r25
     aba:	8f 93       	push	r24
     abc:	85 e3       	ldi	r24, 0x35	; 53
     abe:	92 e0       	ldi	r25, 0x02	; 2
     ac0:	9f 93       	push	r25
     ac2:	8f 93       	push	r24
     ac4:	df 93       	push	r29
     ac6:	cf 93       	push	r28
     ac8:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
	while(!JOY_button_pressed(LEFT_BUTTON)){}
     acc:	8d b7       	in	r24, 0x3d	; 61
     ace:	9e b7       	in	r25, 0x3e	; 62
     ad0:	0e 96       	adiw	r24, 0x0e	; 14
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	9e bf       	out	0x3e, r25	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	8d bf       	out	0x3d, r24	; 61
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	0e 94 5f 06 	call	0xcbe	; 0xcbe <JOY_button_pressed>
     ae2:	89 2b       	or	r24, r25
     ae4:	d9 f3       	breq	.-10     	; 0xadc <GAME_print_highscore+0x6e>
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <JOY_print_calibration_status>:
	clear_bit(DDRB,PB2);
	
	JOY_calibrate(calibraton_mode);
}

void JOY_print_calibration_status() {
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
	OLED_reset();
     af0:	0e 94 cd 0c 	call	0x199a	; 0x199a <OLED_reset>
	fprintf(OLED, "%s\n", "Calibrate JOY");
     af4:	8d e3       	ldi	r24, 0x3D	; 61
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	9f 93       	push	r25
     afa:	8f 93       	push	r24
     afc:	8c e8       	ldi	r24, 0x8C	; 140
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	9f 93       	push	r25
     b02:	8f 93       	push	r24
     b04:	c2 e2       	ldi	r28, 0x22	; 34
     b06:	d1 e0       	ldi	r29, 0x01	; 1
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
	fprintf(OLED, "x_max: %6d\n", max.x);
     b10:	80 91 a2 03 	lds	r24, 0x03A2
     b14:	1f 92       	push	r1
     b16:	8f 93       	push	r24
     b18:	8b e4       	ldi	r24, 0x4B	; 75
     b1a:	92 e0       	ldi	r25, 0x02	; 2
     b1c:	9f 93       	push	r25
     b1e:	8f 93       	push	r24
     b20:	df 93       	push	r29
     b22:	cf 93       	push	r28
     b24:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
	fprintf(OLED, "x_min: %6d\n", min.x);
     b28:	80 91 a6 03 	lds	r24, 0x03A6
     b2c:	1f 92       	push	r1
     b2e:	8f 93       	push	r24
     b30:	87 e5       	ldi	r24, 0x57	; 87
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	9f 93       	push	r25
     b36:	8f 93       	push	r24
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
	fprintf(OLED, "y_max: %6d\n", max.y);
     b40:	80 91 a3 03 	lds	r24, 0x03A3
     b44:	1f 92       	push	r1
     b46:	8f 93       	push	r24
     b48:	83 e6       	ldi	r24, 0x63	; 99
     b4a:	92 e0       	ldi	r25, 0x02	; 2
     b4c:	9f 93       	push	r25
     b4e:	8f 93       	push	r24
     b50:	df 93       	push	r29
     b52:	cf 93       	push	r28
     b54:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
	fprintf(OLED, "y_min: %6d\n", min.y);
     b58:	80 91 a7 03 	lds	r24, 0x03A7
     b5c:	1f 92       	push	r1
     b5e:	8f 93       	push	r24
     b60:	8f e6       	ldi	r24, 0x6F	; 111
     b62:	92 e0       	ldi	r25, 0x02	; 2
     b64:	9f 93       	push	r25
     b66:	8f 93       	push	r24
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
	fprintf(OLED, "\n%s\n", "Click when done");
     b70:	8b e7       	ldi	r24, 0x7B	; 123
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	9f 93       	push	r25
     b76:	8f 93       	push	r24
     b78:	8b e8       	ldi	r24, 0x8B	; 139
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
     b88:	8d b7       	in	r24, 0x3d	; 61
     b8a:	9e b7       	in	r25, 0x3e	; 62
     b8c:	84 96       	adiw	r24, 0x24	; 36
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	9e bf       	out	0x3e, r25	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	8d bf       	out	0x3d, r24	; 61
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <JOY_calibrate>:

void JOY_calibrate(int calibraton_mode){
     b9e:	bf 92       	push	r11
     ba0:	cf 92       	push	r12
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
	max.x = JOY_DEFAULT_MAX_X;
     bb0:	2f ef       	ldi	r18, 0xFF	; 255
     bb2:	20 93 a2 03 	sts	0x03A2, r18
	max.y = JOY_DEFAULT_MAX_Y;
     bb6:	20 93 a3 03 	sts	0x03A3, r18
	min.x = JOY_DEFAULT_MIN_X;
     bba:	10 92 a6 03 	sts	0x03A6, r1
	min.y = JOY_DEFAULT_MIN_Y;
     bbe:	10 92 a7 03 	sts	0x03A7, r1
	
	if (calibraton_mode == CALIBRATION_MANUAL) {
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	e9 f5       	brne	.+122    	; 0xc40 <JOY_calibrate+0xa2>
		// Loop while joystick button is not pressed.
		while(test_bit(PINB,PINB2)) {
     bc6:	b2 9b       	sbis	0x16, 2	; 22
     bc8:	3b c0       	rjmp	.+118    	; 0xc40 <JOY_calibrate+0xa2>
			// Read sensor values
			uint8_t x = ADC_read(X_COORD);
			uint8_t y = ADC_read(Y_COORD);
			
			// Find max and min values for x and y:
			max.x = MAX(x, max.x);
     bca:	0f 2e       	mov	r0, r31
     bcc:	f2 ea       	ldi	r31, 0xA2	; 162
     bce:	cf 2e       	mov	r12, r31
     bd0:	f3 e0       	ldi	r31, 0x03	; 3
     bd2:	df 2e       	mov	r13, r31
     bd4:	f0 2d       	mov	r31, r0
			max.y = MAX(y, max.y);
     bd6:	0f 2e       	mov	r0, r31
     bd8:	f3 ea       	ldi	r31, 0xA3	; 163
     bda:	ef 2e       	mov	r14, r31
     bdc:	f3 e0       	ldi	r31, 0x03	; 3
     bde:	ff 2e       	mov	r15, r31
     be0:	f0 2d       	mov	r31, r0
			min.x = MIN(x, min.x);
     be2:	06 ea       	ldi	r16, 0xA6	; 166
     be4:	13 e0       	ldi	r17, 0x03	; 3
			min.y = MIN(y, min.y);
     be6:	c7 ea       	ldi	r28, 0xA7	; 167
     be8:	d3 e0       	ldi	r29, 0x03	; 3
	
	if (calibraton_mode == CALIBRATION_MANUAL) {
		// Loop while joystick button is not pressed.
		while(test_bit(PINB,PINB2)) {
			// Read sensor values
			uint8_t x = ADC_read(X_COORD);
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     bf0:	b8 2e       	mov	r11, r24
			uint8_t y = ADC_read(Y_COORD);
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
			
			// Find max and min values for x and y:
			max.x = MAX(x, max.x);
     bf8:	f6 01       	movw	r30, r12
     bfa:	20 81       	ld	r18, Z
     bfc:	9b 2d       	mov	r25, r11
     bfe:	b2 16       	cp	r11, r18
     c00:	08 f4       	brcc	.+2      	; 0xc04 <JOY_calibrate+0x66>
     c02:	92 2f       	mov	r25, r18
     c04:	f6 01       	movw	r30, r12
     c06:	90 83       	st	Z, r25
			max.y = MAX(y, max.y);
     c08:	f7 01       	movw	r30, r14
     c0a:	20 81       	ld	r18, Z
     c0c:	98 2f       	mov	r25, r24
     c0e:	82 17       	cp	r24, r18
     c10:	08 f4       	brcc	.+2      	; 0xc14 <JOY_calibrate+0x76>
     c12:	92 2f       	mov	r25, r18
     c14:	f7 01       	movw	r30, r14
     c16:	90 83       	st	Z, r25
			min.x = MIN(x, min.x);
     c18:	f8 01       	movw	r30, r16
     c1a:	90 81       	ld	r25, Z
     c1c:	9b 15       	cp	r25, r11
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <JOY_calibrate+0x84>
     c20:	b9 2e       	mov	r11, r25
     c22:	f8 01       	movw	r30, r16
     c24:	b0 82       	st	Z, r11
			min.y = MIN(y, min.y);
     c26:	98 81       	ld	r25, Y
     c28:	98 17       	cp	r25, r24
     c2a:	08 f4       	brcc	.+2      	; 0xc2e <JOY_calibrate+0x90>
     c2c:	89 2f       	mov	r24, r25
     c2e:	88 83       	st	Y, r24
			
			JOY_print_calibration_status();
     c30:	0e 94 76 05 	call	0xaec	; 0xaec <JOY_print_calibration_status>
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 ef       	ldi	r25, 0xF0	; 240
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <JOY_calibrate+0x9a>
	min.x = JOY_DEFAULT_MIN_X;
	min.y = JOY_DEFAULT_MIN_Y;
	
	if (calibraton_mode == CALIBRATION_MANUAL) {
		// Loop while joystick button is not pressed.
		while(test_bit(PINB,PINB2)) {
     c3c:	b2 99       	sbic	0x16, 2	; 22
     c3e:	d5 cf       	rjmp	.-86     	; 0xbea <JOY_calibrate+0x4c>
			_delay_ms(50);
		}
	}
	
	// Find distance from middle to edges (radius)
	rad.x = (max.x - min.x) / 2;
     c40:	e0 91 a2 03 	lds	r30, 0x03A2
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	60 91 a6 03 	lds	r22, 0x03A6
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	9f 01       	movw	r18, r30
     c4e:	26 1b       	sub	r18, r22
     c50:	37 0b       	sbc	r19, r23
     c52:	c9 01       	movw	r24, r18
     c54:	99 23       	and	r25, r25
     c56:	0c f4       	brge	.+2      	; 0xc5a <JOY_calibrate+0xbc>
     c58:	01 96       	adiw	r24, 0x01	; 1
     c5a:	95 95       	asr	r25
     c5c:	87 95       	ror	r24
     c5e:	80 93 a4 03 	sts	0x03A4, r24
	rad.y = (max.y - min.y) / 2;
     c62:	40 91 a3 03 	lds	r20, 0x03A3
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	20 91 a7 03 	lds	r18, 0x03A7
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	da 01       	movw	r26, r20
     c70:	a2 1b       	sub	r26, r18
     c72:	b3 0b       	sbc	r27, r19
     c74:	cd 01       	movw	r24, r26
     c76:	0a f4       	brpl	.+2      	; 0xc7a <JOY_calibrate+0xdc>
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	95 95       	asr	r25
     c7c:	87 95       	ror	r24
     c7e:	80 93 a5 03 	sts	0x03A5, r24
		
	// Find mid point using edges.
	mid.x = (max.x + min.x) / 2;
     c82:	6e 0f       	add	r22, r30
     c84:	7f 1f       	adc	r23, r31
     c86:	75 95       	asr	r23
     c88:	67 95       	ror	r22
     c8a:	60 93 a8 03 	sts	0x03A8, r22
	mid.y = (max.y + min.y) / 2;
     c8e:	24 0f       	add	r18, r20
     c90:	35 1f       	adc	r19, r21
     c92:	35 95       	asr	r19
     c94:	27 95       	ror	r18
     c96:	20 93 a9 03 	sts	0x03A9, r18
}
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	ff 90       	pop	r15
     ca4:	ef 90       	pop	r14
     ca6:	df 90       	pop	r13
     ca8:	cf 90       	pop	r12
     caa:	bf 90       	pop	r11
     cac:	08 95       	ret

00000cae <JOY_init>:
	uint8_t y;
} max, min, rad, mid;

void JOY_init(int calibraton_mode){
	// Set pull-up resistors on PORTB for JOY_button
	set_bit(PORTB,PB2);
     cae:	c2 9a       	sbi	0x18, 2	; 24
	clear_bit(SFIOR, PUD);
     cb0:	20 b7       	in	r18, 0x30	; 48
     cb2:	2b 7f       	andi	r18, 0xFB	; 251
     cb4:	20 bf       	out	0x30, r18	; 48
	
	// Set PB2 as input pin
	clear_bit(DDRB,PB2);
     cb6:	ba 98       	cbi	0x17, 2	; 23
	
	JOY_calibrate(calibraton_mode);
     cb8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <JOY_calibrate>
     cbc:	08 95       	ret

00000cbe <JOY_button_pressed>:
	mid.x = (max.x + min.x) / 2;
	mid.y = (max.y + min.y) / 2;
}

int JOY_button_pressed(button b) {
	switch (b) {
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	41 f0       	breq	.+16     	; 0xcd2 <JOY_button_pressed+0x14>
     cc2:	18 f0       	brcs	.+6      	; 0xcca <JOY_button_pressed+0xc>
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	51 f0       	breq	.+20     	; 0xcdc <JOY_button_pressed+0x1e>
     cc8:	11 c0       	rjmp	.+34     	; 0xcec <JOY_button_pressed+0x2e>
	case LEFT_BUTTON:
		if (test_bit(PINB, PINB0)) return 1;
     cca:	86 b3       	in	r24, 0x16	; 22
     ccc:	81 70       	andi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	08 95       	ret
		break;
	case RIGHT_BUTTON:
		if (test_bit(PINB, PINB1)) return 1;
     cd2:	86 b3       	in	r24, 0x16	; 22
}

int JOY_button_pressed(button b) {
	switch (b) {
	case LEFT_BUTTON:
		if (test_bit(PINB, PINB0)) return 1;
     cd4:	86 95       	lsr	r24
     cd6:	81 70       	andi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	08 95       	ret
		break;
	case RIGHT_BUTTON:
		if (test_bit(PINB, PINB1)) return 1;
		break;
	case JOY_BUTTON:
		if (!test_bit(PINB, PINB2)) return 1;
     cdc:	86 b3       	in	r24, 0x16	; 22
     cde:	86 95       	lsr	r24
     ce0:	86 95       	lsr	r24
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	89 27       	eor	r24, r25
}

int JOY_button_pressed(button b) {
	switch (b) {
	case LEFT_BUTTON:
		if (test_bit(PINB, PINB0)) return 1;
     ce6:	81 70       	andi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	08 95       	ret
		break;
	case JOY_BUTTON:
		if (!test_bit(PINB, PINB2)) return 1;
		break;
	}
	return 0;
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
}
     cf0:	08 95       	ret

00000cf2 <JOY_getPosition>:

JOY_position_t JOY_getPosition() {
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
	JOY_position_t JOY_position;
	// Convert read values to percentages between -100 and 100
	JOY_position.x = (100 * (ADC_read(X_COORD) - mid.x)) / rad.x;
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     cfe:	28 2f       	mov	r18, r24
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	80 91 a8 03 	lds	r24, 0x03A8
     d06:	28 1b       	sub	r18, r24
     d08:	31 09       	sbc	r19, r1
     d0a:	14 e6       	ldi	r17, 0x64	; 100
     d0c:	12 9f       	mul	r17, r18
     d0e:	c0 01       	movw	r24, r0
     d10:	13 9f       	mul	r17, r19
     d12:	90 0d       	add	r25, r0
     d14:	11 24       	eor	r1, r1
     d16:	60 91 a4 03 	lds	r22, 0x03A4
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodhi4>
     d20:	eb 01       	movw	r28, r22
	JOY_position.y = (100 * (ADC_read(Y_COORD) - mid.y)) / rad.y;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	80 91 a9 03 	lds	r24, 0x03A9
     d30:	28 1b       	sub	r18, r24
     d32:	31 09       	sbc	r19, r1
     d34:	12 9f       	mul	r17, r18
     d36:	c0 01       	movw	r24, r0
     d38:	13 9f       	mul	r17, r19
     d3a:	90 0d       	add	r25, r0
     d3c:	11 24       	eor	r1, r1
     d3e:	60 91 a5 03 	lds	r22, 0x03A5
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodhi4>
     d48:	9b 01       	movw	r18, r22
	return JOY_position;
     d4a:	be 01       	movw	r22, r28
     d4c:	c9 01       	movw	r24, r18
}
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	08 95       	ret

00000d56 <JOY_getDirection>:

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
     d56:	0e 94 79 06 	call	0xcf2	; 0xcf2 <JOY_getPosition>
     d5a:	fb 01       	movw	r30, r22
     d5c:	ac 01       	movw	r20, r24
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     d5e:	9b 01       	movw	r18, r22
     d60:	2c 5f       	subi	r18, 0xFC	; 252
     d62:	3f 4f       	sbci	r19, 0xFF	; 255
     d64:	29 30       	cpi	r18, 0x09	; 9
     d66:	31 05       	cpc	r19, r1
     d68:	30 f4       	brcc	.+12     	; 0xd76 <JOY_getDirection+0x20>
     d6a:	9c 01       	movw	r18, r24
     d6c:	2c 5f       	subi	r18, 0xFC	; 252
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
     d70:	29 30       	cpi	r18, 0x09	; 9
     d72:	31 05       	cpc	r19, r1
     d74:	e0 f0       	brcs	.+56     	; 0xdae <JOY_getDirection+0x58>

	// The x-coordinate is dominating
	else if (abs(position.x) > abs(position.y)) {
     d76:	db 01       	movw	r26, r22
     d78:	ff 23       	and	r31, r31
     d7a:	24 f4       	brge	.+8      	; 0xd84 <JOY_getDirection+0x2e>
     d7c:	aa 27       	eor	r26, r26
     d7e:	bb 27       	eor	r27, r27
     d80:	a6 1b       	sub	r26, r22
     d82:	b7 0b       	sbc	r27, r23
     d84:	9c 01       	movw	r18, r24
     d86:	55 23       	and	r21, r21
     d88:	24 f4       	brge	.+8      	; 0xd92 <JOY_getDirection+0x3c>
     d8a:	22 27       	eor	r18, r18
     d8c:	33 27       	eor	r19, r19
     d8e:	28 1b       	sub	r18, r24
     d90:	39 0b       	sbc	r19, r25
     d92:	2a 17       	cp	r18, r26
     d94:	3b 07       	cpc	r19, r27
     d96:	34 f4       	brge	.+12     	; 0xda4 <JOY_getDirection+0x4e>
		if (position.x > 0) return RIGHT;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	1e 16       	cp	r1, r30
     d9c:	1f 06       	cpc	r1, r31
     d9e:	54 f0       	brlt	.+20     	; 0xdb4 <JOY_getDirection+0x5e>
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	08 95       	ret
		else return LEFT;

	// The y-coordinate is dominating
	} else {
		if (position.y > 0) return UP;
     da4:	14 16       	cp	r1, r20
     da6:	15 06       	cpc	r1, r21
     da8:	24 f4       	brge	.+8      	; 0xdb2 <JOY_getDirection+0x5c>
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	08 95       	ret

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     dae:	84 e0       	ldi	r24, 0x04	; 4
     db0:	08 95       	ret
		else return LEFT;

	// The y-coordinate is dominating
	} else {
		if (position.y > 0) return UP;
		else return DOWN;
     db2:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     db4:	08 95       	ret

00000db6 <SLI_getPosition>:

SLI_position_t SLI_getPosition() {
     db6:	cf 93       	push	r28
	SLI_position_t pos;
	pos.left = ADC_read(LEFT_CH);
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     dbe:	c8 2f       	mov	r28, r24
	pos.right = ADC_read(RIGHT_CH);
     dc0:	83 e0       	ldi	r24, 0x03	; 3
     dc2:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     dc6:	28 2f       	mov	r18, r24
	return pos;
     dc8:	6c 2f       	mov	r22, r28
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	82 2f       	mov	r24, r18
     dce:	90 e0       	ldi	r25, 0x00	; 0
}
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <append_char>:


/* PRINT STRING FUNCTION   */

void append_char(char c) {
	int len = strlen(written_string);
     dd4:	ea ea       	ldi	r30, 0xAA	; 170
     dd6:	f3 e0       	ldi	r31, 0x03	; 3
     dd8:	01 90       	ld	r0, Z+
     dda:	00 20       	and	r0, r0
     ddc:	e9 f7       	brne	.-6      	; 0xdd8 <append_char+0x4>
     dde:	31 97       	sbiw	r30, 0x01	; 1
     de0:	ea 5a       	subi	r30, 0xAA	; 170
     de2:	f3 40       	sbci	r31, 0x03	; 3
	if (len < MAX_STRING_SIZE){
     de4:	e8 32       	cpi	r30, 0x28	; 40
     de6:	f1 05       	cpc	r31, r1
     de8:	24 f4       	brge	.+8      	; 0xdf2 <append_char+0x1e>
		written_string[len] = c;
     dea:	e6 55       	subi	r30, 0x56	; 86
     dec:	fc 4f       	sbci	r31, 0xFC	; 252
     dee:	80 83       	st	Z, r24
		written_string[len + 1] = '\0';
     df0:	11 82       	std	Z+1, r1	; 0x01
     df2:	08 95       	ret

00000df4 <remove_last_char>:
	// Return pointer to keyboard position
	keyboard_goto(pos.y, pos.x);
}

void remove_last_char() {
	if (strlen(written_string) > 0){
     df4:	80 91 aa 03 	lds	r24, 0x03AA
     df8:	88 23       	and	r24, r24
     dfa:	39 f0       	breq	.+14     	; 0xe0a <remove_last_char+0x16>
		written_string[strlen(written_string) - 1] = '\0';
     dfc:	ea ea       	ldi	r30, 0xAA	; 170
     dfe:	f3 e0       	ldi	r31, 0x03	; 3
     e00:	01 90       	ld	r0, Z+
     e02:	00 20       	and	r0, r0
     e04:	e9 f7       	brne	.-6      	; 0xe00 <remove_last_char+0xc>
     e06:	32 97       	sbiw	r30, 0x02	; 2
     e08:	10 82       	st	Z, r1
     e0a:	08 95       	ret

00000e0c <keyboard_goto>:

}


void keyboard_goto(int line, int column) {
	OLED_goto_pos(line + 3, (column+2) * 8);
     e0c:	6e 5f       	subi	r22, 0xFE	; 254
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	66 0f       	add	r22, r22
     e12:	66 0f       	add	r22, r22
     e14:	66 0f       	add	r22, r22
     e16:	8d 5f       	subi	r24, 0xFD	; 253
     e18:	0e 94 a7 0c 	call	0x194e	; 0x194e <OLED_goto_pos>
     e1c:	08 95       	ret

00000e1e <print_string>:
		written_string[len + 1] = '\0';
	}

}

void print_string() {
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
	OLED_reset_cursor();
     e22:	0e 94 b0 0c 	call	0x1960	; 0x1960 <OLED_reset_cursor>
	fprintf(OLED, "%s", written_string);
     e26:	62 e3       	ldi	r22, 0x32	; 50
     e28:	71 e0       	ldi	r23, 0x01	; 1
     e2a:	8a ea       	ldi	r24, 0xAA	; 170
     e2c:	93 e0       	ldi	r25, 0x03	; 3
     e2e:	0e 94 c2 10 	call	0x2184	; 0x2184 <fputs>

	// Make sure to clear rest of screen
	for (int i = strlen(written_string); i < 16; i++){
     e32:	ca ea       	ldi	r28, 0xAA	; 170
     e34:	d3 e0       	ldi	r29, 0x03	; 3
     e36:	09 90       	ld	r0, Y+
     e38:	00 20       	and	r0, r0
     e3a:	e9 f7       	brne	.-6      	; 0xe36 <print_string+0x18>
     e3c:	21 97       	sbiw	r28, 0x01	; 1
     e3e:	ca 5a       	subi	r28, 0xAA	; 170
     e40:	d3 40       	sbci	r29, 0x03	; 3
     e42:	c0 31       	cpi	r28, 0x10	; 16
     e44:	d1 05       	cpc	r29, r1
     e46:	54 f4       	brge	.+20     	; 0xe5c <print_string+0x3e>
		fprintf(OLED, " ");
     e48:	62 e3       	ldi	r22, 0x32	; 50
     e4a:	71 e0       	ldi	r23, 0x01	; 1
     e4c:	80 e2       	ldi	r24, 0x20	; 32
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
void print_string() {
	OLED_reset_cursor();
	fprintf(OLED, "%s", written_string);

	// Make sure to clear rest of screen
	for (int i = strlen(written_string); i < 16; i++){
     e54:	21 96       	adiw	r28, 0x01	; 1
     e56:	c0 31       	cpi	r28, 0x10	; 16
     e58:	d1 05       	cpc	r29, r1
     e5a:	b1 f7       	brne	.-20     	; 0xe48 <print_string+0x2a>
		fprintf(OLED, " ");
	}
	
	// Set block at current pointer position
	int pointer = MIN(strlen(written_string)%16,15)*8;
     e5c:	ea ea       	ldi	r30, 0xAA	; 170
     e5e:	f3 e0       	ldi	r31, 0x03	; 3
     e60:	01 90       	ld	r0, Z+
     e62:	00 20       	and	r0, r0
     e64:	e9 f7       	brne	.-6      	; 0xe60 <print_string+0x42>
     e66:	31 97       	sbiw	r30, 0x01	; 1
     e68:	ea 5a       	subi	r30, 0xAA	; 170
     e6a:	f3 40       	sbci	r31, 0x03	; 3
     e6c:	ef 70       	andi	r30, 0x0F	; 15
     e6e:	ff 27       	eor	r31, r31
     e70:	bf 01       	movw	r22, r30
     e72:	66 0f       	add	r22, r22
     e74:	77 1f       	adc	r23, r23
     e76:	66 0f       	add	r22, r22
     e78:	77 1f       	adc	r23, r23
     e7a:	66 0f       	add	r22, r22
     e7c:	77 1f       	adc	r23, r23
	OLED_goto_pos(0, pointer);
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	0e 94 a7 0c 	call	0x194e	; 0x194e <OLED_goto_pos>
	print_fill(8);
     e84:	88 e0       	ldi	r24, 0x08	; 8
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <print_fill>
	
	// Return pointer to keyboard position
	keyboard_goto(pos.y, pos.x);
     e8c:	60 91 9a 03 	lds	r22, 0x039A
     e90:	70 91 9b 03 	lds	r23, 0x039B
     e94:	80 91 9c 03 	lds	r24, 0x039C
     e98:	90 91 9d 03 	lds	r25, 0x039D
     e9c:	0e 94 06 07 	call	0xe0c	; 0xe0c <keyboard_goto>
}
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <keyboard_goto_line>:
void keyboard_goto(int line, int column) {
	OLED_goto_pos(line + 3, (column+2) * 8);
}

void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	0e 94 06 07 	call	0xe0c	; 0xe0c <keyboard_goto>
     eae:	08 95       	ret

00000eb0 <keyboard_init>:
}

/* FUNCTION IMPLEMENTATIONS			*/
/************************************/

void keyboard_init() {
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
	OLED_reset();
     ebc:	0e 94 cd 0c 	call	0x199a	; 0x199a <OLED_reset>
	written_string[0]='\0';
     ec0:	ca ea       	ldi	r28, 0xAA	; 170
     ec2:	d3 e0       	ldi	r29, 0x03	; 3
     ec4:	18 82       	st	Y, r1
	print_string();
     ec6:	0e 94 0f 07 	call	0xe1e	; 0xe1e <print_string>
	letters = (char*)LETTERS_SMALL;
     eca:	80 ea       	ldi	r24, 0xA0	; 160
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	90 93 31 01 	sts	0x0131, r25
     ed2:	80 93 30 01 	sts	0x0130, r24
	keyboard_goto_line(0);
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 53 07 	call	0xea6	; 0xea6 <keyboard_goto_line>
	pos.x = 0;
     ede:	10 92 9b 03 	sts	0x039B, r1
     ee2:	10 92 9a 03 	sts	0x039A, r1
	pos.y = 0;
     ee6:	10 92 9d 03 	sts	0x039D, r1
     eea:	10 92 9c 03 	sts	0x039C, r1
	strcpy(written_string, "\0");
     eee:	18 82       	st	Y, r1

	// The first letter is selected by default
	print_char(pgm_read_byte(&letters[0]), INVERSE);
     ef0:	e0 91 30 01 	lds	r30, 0x0130
     ef4:	f0 91 31 01 	lds	r31, 0x0131
     ef8:	84 91       	lpm	r24, Z
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <print_char>

	// Print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     f02:	c1 e0       	ldi	r28, 0x01	; 1
     f04:	d0 e0       	ldi	r29, 0x00	; 0
		if (i % LINE_LENGTH == 0) {
     f06:	0c e0       	ldi	r16, 0x0C	; 12
     f08:	10 e0       	ldi	r17, 0x00	; 0
			keyboard_goto_line(++pos.y);
     f0a:	0f 2e       	mov	r0, r31
     f0c:	fc e9       	ldi	r31, 0x9C	; 156
     f0e:	ef 2e       	mov	r14, r31
     f10:	f3 e0       	ldi	r31, 0x03	; 3
     f12:	ff 2e       	mov	r15, r31
     f14:	f0 2d       	mov	r31, r0
     f16:	0e c0       	rjmp	.+28     	; 0xf34 <keyboard_init+0x84>
	// The first letter is selected by default
	print_char(pgm_read_byte(&letters[0]), INVERSE);

	// Print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0) {
     f18:	ce 01       	movw	r24, r28
     f1a:	b8 01       	movw	r22, r16
     f1c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodhi4>
     f20:	89 2b       	or	r24, r25
     f22:	41 f4       	brne	.+16     	; 0xf34 <keyboard_init+0x84>
			keyboard_goto_line(++pos.y);
     f24:	f7 01       	movw	r30, r14
     f26:	80 81       	ld	r24, Z
     f28:	91 81       	ldd	r25, Z+1	; 0x01
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	91 83       	std	Z+1, r25	; 0x01
     f2e:	80 83       	st	Z, r24
     f30:	0e 94 53 07 	call	0xea6	; 0xea6 <keyboard_goto_line>
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
     f34:	e0 91 30 01 	lds	r30, 0x0130
     f38:	f0 91 31 01 	lds	r31, 0x0131
     f3c:	ec 0f       	add	r30, r28
     f3e:	fd 1f       	adc	r31, r29
     f40:	84 91       	lpm	r24, Z
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <print_char>

	// The first letter is selected by default
	print_char(pgm_read_byte(&letters[0]), INVERSE);

	// Print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     f4a:	21 96       	adiw	r28, 0x01	; 1
     f4c:	c0 33       	cpi	r28, 0x30	; 48
     f4e:	d1 05       	cpc	r29, r1
     f50:	19 f7       	brne	.-58     	; 0xf18 <keyboard_init+0x68>
			keyboard_goto_line(++pos.y);
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
	}
	// Print the tool buttons
	keyboard_goto_line(4);
     f52:	84 e0       	ldi	r24, 0x04	; 4
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 53 07 	call	0xea6	; 0xea6 <keyboard_goto_line>
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <print_options_bar>

	// Reset y-position
	pos.y = 0;
     f6e:	10 92 9d 03 	sts	0x039D, r1
     f72:	10 92 9c 03 	sts	0x039C, r1
     f76:	ff ef       	ldi	r31, 0xFF	; 255
     f78:	2f e7       	ldi	r18, 0x7F	; 127
     f7a:	87 e0       	ldi	r24, 0x07	; 7
     f7c:	f1 50       	subi	r31, 0x01	; 1
     f7e:	20 40       	sbci	r18, 0x00	; 0
     f80:	80 40       	sbci	r24, 0x00	; 0
     f82:	e1 f7       	brne	.-8      	; 0xf7c <keyboard_init+0xcc>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <keyboard_init+0xd6>
     f86:	00 00       	nop

	// Ignore button pressed right away
	_delay_ms(500);

}
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	ff 90       	pop	r15
     f92:	ef 90       	pop	r14
     f94:	08 95       	ret

00000f96 <keyboard_print>:


void keyboard_print() {
     f96:	ef 92       	push	r14
     f98:	ff 92       	push	r15
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
	keyboard_goto_line(0);
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 53 07 	call	0xea6	; 0xea6 <keyboard_goto_line>
	pos.y = 0;
     faa:	10 92 9d 03 	sts	0x039D, r1
     fae:	10 92 9c 03 	sts	0x039C, r1
	// Print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
     fb2:	c0 e0       	ldi	r28, 0x00	; 0
     fb4:	d0 e0       	ldi	r29, 0x00	; 0
		if (i % LINE_LENGTH == 0 && i != 0) {
     fb6:	0c e0       	ldi	r16, 0x0C	; 12
     fb8:	10 e0       	ldi	r17, 0x00	; 0
			keyboard_goto_line(++pos.y);
     fba:	0f 2e       	mov	r0, r31
     fbc:	fc e9       	ldi	r31, 0x9C	; 156
     fbe:	ef 2e       	mov	r14, r31
     fc0:	f3 e0       	ldi	r31, 0x03	; 3
     fc2:	ff 2e       	mov	r15, r31
     fc4:	f0 2d       	mov	r31, r0
     fc6:	10 c0       	rjmp	.+32     	; 0xfe8 <keyboard_print+0x52>
void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	// Print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
     fc8:	ce 01       	movw	r24, r28
     fca:	b8 01       	movw	r22, r16
     fcc:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodhi4>
     fd0:	89 2b       	or	r24, r25
     fd2:	51 f4       	brne	.+20     	; 0xfe8 <keyboard_print+0x52>
     fd4:	20 97       	sbiw	r28, 0x00	; 0
     fd6:	41 f0       	breq	.+16     	; 0xfe8 <keyboard_print+0x52>
			keyboard_goto_line(++pos.y);
     fd8:	f7 01       	movw	r30, r14
     fda:	80 81       	ld	r24, Z
     fdc:	91 81       	ldd	r25, Z+1	; 0x01
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	91 83       	std	Z+1, r25	; 0x01
     fe2:	80 83       	st	Z, r24
     fe4:	0e 94 53 07 	call	0xea6	; 0xea6 <keyboard_goto_line>
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
     fe8:	e0 91 30 01 	lds	r30, 0x0130
     fec:	f0 91 31 01 	lds	r31, 0x0131
     ff0:	ec 0f       	add	r30, r28
     ff2:	fd 1f       	adc	r31, r29
     ff4:	84 91       	lpm	r24, Z
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <print_char>

void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	// Print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
     ffe:	21 96       	adiw	r28, 0x01	; 1
    1000:	c0 33       	cpi	r28, 0x30	; 48
    1002:	d1 05       	cpc	r29, r1
    1004:	09 f7       	brne	.-62     	; 0xfc8 <keyboard_print+0x32>
			keyboard_goto_line(++pos.y);
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
	}
	// Print the tool buttons
	keyboard_goto_line(4);
    1006:	84 e0       	ldi	r24, 0x04	; 4
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 53 07 	call	0xea6	; 0xea6 <keyboard_goto_line>
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <print_options_bar>


}
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	08 95       	ret

00001030 <toggle_shift>:
void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
	}

void toggle_shift() {
	if (letters == LETTERS_SMALL) {
    1030:	80 91 30 01 	lds	r24, 0x0130
    1034:	90 91 31 01 	lds	r25, 0x0131
    1038:	80 5a       	subi	r24, 0xA0	; 160
    103a:	90 40       	sbci	r25, 0x00	; 0
    103c:	39 f4       	brne	.+14     	; 0x104c <toggle_shift+0x1c>
		letters = (char*)LETTERS_BIG;
    103e:	80 e7       	ldi	r24, 0x70	; 112
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	90 93 31 01 	sts	0x0131, r25
    1046:	80 93 30 01 	sts	0x0130, r24
    104a:	06 c0       	rjmp	.+12     	; 0x1058 <toggle_shift+0x28>
	}
	else {
		letters = (char*)LETTERS_SMALL;
    104c:	80 ea       	ldi	r24, 0xA0	; 160
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	90 93 31 01 	sts	0x0131, r25
    1054:	80 93 30 01 	sts	0x0130, r24
	}

	keyboard_print();
    1058:	0e 94 cb 07 	call	0xf96	; 0xf96 <keyboard_print>
	
	// Shift is still selected
	keyboard_goto_line(4);
    105c:	84 e0       	ldi	r24, 0x04	; 4
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 53 07 	call	0xea6	; 0xea6 <keyboard_goto_line>
	print_shift(INVERSE);
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <print_shift>
	
	pos.y = 4;
    106c:	84 e0       	ldi	r24, 0x04	; 4
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	90 93 9d 03 	sts	0x039D, r25
    1074:	80 93 9c 03 	sts	0x039C, r24
	pos.x = 0;
    1078:	10 92 9b 03 	sts	0x039B, r1
    107c:	10 92 9a 03 	sts	0x039A, r1
    1080:	08 95       	ret

00001082 <keyboard_register_position_change>:
}

void keyboard_register_position_change(JOY_direction_t direction) {
	if (direction == NEUTRAL);
    1082:	84 30       	cpi	r24, 0x04	; 4
    1084:	09 f4       	brne	.+2      	; 0x1088 <keyboard_register_position_change+0x6>
    1086:	8a c0       	rjmp	.+276    	; 0x119c <keyboard_register_position_change+0x11a>
	else if (direction == DOWN && pos.y < 4) {
    1088:	83 30       	cpi	r24, 0x03	; 3
    108a:	91 f4       	brne	.+36     	; 0x10b0 <keyboard_register_position_change+0x2e>
    108c:	20 91 9c 03 	lds	r18, 0x039C
    1090:	30 91 9d 03 	lds	r19, 0x039D
    1094:	24 30       	cpi	r18, 0x04	; 4
    1096:	31 05       	cpc	r19, r1
    1098:	bc f5       	brge	.+110    	; 0x1108 <keyboard_register_position_change+0x86>
		prev_pos.y = pos.y++;
    109a:	c9 01       	movw	r24, r18
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	90 93 9d 03 	sts	0x039D, r25
    10a2:	80 93 9c 03 	sts	0x039C, r24
    10a6:	30 93 99 03 	sts	0x0399, r19
    10aa:	20 93 98 03 	sts	0x0398, r18
    10ae:	08 95       	ret
	}
	else if (direction == UP && pos.y > 0) {
    10b0:	82 30       	cpi	r24, 0x02	; 2
    10b2:	a1 f4       	brne	.+40     	; 0x10dc <keyboard_register_position_change+0x5a>
    10b4:	80 91 9c 03 	lds	r24, 0x039C
    10b8:	90 91 9d 03 	lds	r25, 0x039D
    10bc:	18 16       	cp	r1, r24
    10be:	19 06       	cpc	r1, r25
    10c0:	0c f0       	brlt	.+2      	; 0x10c4 <keyboard_register_position_change+0x42>
    10c2:	6c c0       	rjmp	.+216    	; 0x119c <keyboard_register_position_change+0x11a>
		prev_pos.y = pos.y--;
    10c4:	9c 01       	movw	r18, r24
    10c6:	21 50       	subi	r18, 0x01	; 1
    10c8:	31 09       	sbc	r19, r1
    10ca:	30 93 9d 03 	sts	0x039D, r19
    10ce:	20 93 9c 03 	sts	0x039C, r18
    10d2:	90 93 99 03 	sts	0x0399, r25
    10d6:	80 93 98 03 	sts	0x0398, r24
    10da:	08 95       	ret
	}
	else if (direction == LEFT && pos.x > 0) {
    10dc:	81 11       	cpse	r24, r1
    10de:	14 c0       	rjmp	.+40     	; 0x1108 <keyboard_register_position_change+0x86>
    10e0:	80 91 9a 03 	lds	r24, 0x039A
    10e4:	90 91 9b 03 	lds	r25, 0x039B
    10e8:	18 16       	cp	r1, r24
    10ea:	19 06       	cpc	r1, r25
    10ec:	0c f0       	brlt	.+2      	; 0x10f0 <keyboard_register_position_change+0x6e>
    10ee:	56 c0       	rjmp	.+172    	; 0x119c <keyboard_register_position_change+0x11a>
		prev_pos.x = pos.x--;
    10f0:	9c 01       	movw	r18, r24
    10f2:	21 50       	subi	r18, 0x01	; 1
    10f4:	31 09       	sbc	r19, r1
    10f6:	30 93 9b 03 	sts	0x039B, r19
    10fa:	20 93 9a 03 	sts	0x039A, r18
    10fe:	90 93 97 03 	sts	0x0397, r25
    1102:	80 93 96 03 	sts	0x0396, r24
    1106:	08 95       	ret
	}
	else if (direction == RIGHT && pos.x < LINE_LENGTH - 1) {
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	09 f0       	breq	.+2      	; 0x110e <keyboard_register_position_change+0x8c>
    110c:	47 c0       	rjmp	.+142    	; 0x119c <keyboard_register_position_change+0x11a>
    110e:	80 91 9a 03 	lds	r24, 0x039A
    1112:	90 91 9b 03 	lds	r25, 0x039B
    1116:	8b 30       	cpi	r24, 0x0B	; 11
    1118:	91 05       	cpc	r25, r1
    111a:	0c f0       	brlt	.+2      	; 0x111e <keyboard_register_position_change+0x9c>
    111c:	3f c0       	rjmp	.+126    	; 0x119c <keyboard_register_position_change+0x11a>
		// Move extra spaces on big toolbar items
		if (pos.y == 4) {
    111e:	20 91 9c 03 	lds	r18, 0x039C
    1122:	30 91 9d 03 	lds	r19, 0x039D
    1126:	24 30       	cpi	r18, 0x04	; 4
    1128:	31 05       	cpc	r19, r1
    112a:	69 f5       	brne	.+90     	; 0x1186 <keyboard_register_position_change+0x104>
			if (pos.x < 2) {
    112c:	82 30       	cpi	r24, 0x02	; 2
    112e:	91 05       	cpc	r25, r1
    1130:	5c f4       	brge	.+22     	; 0x1148 <keyboard_register_position_change+0xc6>
				prev_pos.x = 0;
    1132:	10 92 97 03 	sts	0x0397, r1
    1136:	10 92 96 03 	sts	0x0396, r1
				pos.x = 2;
    113a:	82 e0       	ldi	r24, 0x02	; 2
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	90 93 9b 03 	sts	0x039B, r25
    1142:	80 93 9a 03 	sts	0x039A, r24
    1146:	08 95       	ret
			}
			else if (pos.x < 8) {
    1148:	88 30       	cpi	r24, 0x08	; 8
    114a:	91 05       	cpc	r25, r1
    114c:	6c f4       	brge	.+26     	; 0x1168 <keyboard_register_position_change+0xe6>
				prev_pos.x = 2;
    114e:	82 e0       	ldi	r24, 0x02	; 2
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	90 93 97 03 	sts	0x0397, r25
    1156:	80 93 96 03 	sts	0x0396, r24
				pos.x = 8;
    115a:	88 e0       	ldi	r24, 0x08	; 8
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	90 93 9b 03 	sts	0x039B, r25
    1162:	80 93 9a 03 	sts	0x039A, r24
    1166:	08 95       	ret
			}
			else if (pos.x < 10) {
    1168:	0a 97       	sbiw	r24, 0x0a	; 10
    116a:	c4 f4       	brge	.+48     	; 0x119c <keyboard_register_position_change+0x11a>
				prev_pos.x = 8;
    116c:	88 e0       	ldi	r24, 0x08	; 8
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	90 93 97 03 	sts	0x0397, r25
    1174:	80 93 96 03 	sts	0x0396, r24
				pos.x = 10;
    1178:	8a e0       	ldi	r24, 0x0A	; 10
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	90 93 9b 03 	sts	0x039B, r25
    1180:	80 93 9a 03 	sts	0x039A, r24
    1184:	08 95       	ret
			}
		}
		else {
			prev_pos.x = pos.x++;
    1186:	9c 01       	movw	r18, r24
    1188:	2f 5f       	subi	r18, 0xFF	; 255
    118a:	3f 4f       	sbci	r19, 0xFF	; 255
    118c:	30 93 9b 03 	sts	0x039B, r19
    1190:	20 93 9a 03 	sts	0x039A, r18
    1194:	90 93 97 03 	sts	0x0397, r25
    1198:	80 93 96 03 	sts	0x0396, r24
    119c:	08 95       	ret

0000119e <keyboard_unselect_prev>:
		}
	}
}


void keyboard_unselect_prev() {
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
	// If previous item is a letter
	if (prev_pos.y < 4) {
    11a2:	80 91 98 03 	lds	r24, 0x0398
    11a6:	90 91 99 03 	lds	r25, 0x0399
    11aa:	84 30       	cpi	r24, 0x04	; 4
    11ac:	91 05       	cpc	r25, r1
    11ae:	24 f5       	brge	.+72     	; 0x11f8 <keyboard_unselect_prev+0x5a>
		keyboard_goto(prev_pos.y, prev_pos.x);
    11b0:	c6 e9       	ldi	r28, 0x96	; 150
    11b2:	d3 e0       	ldi	r29, 0x03	; 3
    11b4:	68 81       	ld	r22, Y
    11b6:	79 81       	ldd	r23, Y+1	; 0x01
    11b8:	0e 94 06 07 	call	0xe0c	; 0xe0c <keyboard_goto>
		print_char(pgm_read_byte(&letters[prev_pos.y * LINE_LENGTH + prev_pos.x]), NORMAL);
    11bc:	80 91 98 03 	lds	r24, 0x0398
    11c0:	90 91 99 03 	lds	r25, 0x0399
    11c4:	fc 01       	movw	r30, r24
    11c6:	ee 0f       	add	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	8e 0f       	add	r24, r30
    11cc:	9f 1f       	adc	r25, r31
    11ce:	fc 01       	movw	r30, r24
    11d0:	ee 0f       	add	r30, r30
    11d2:	ff 1f       	adc	r31, r31
    11d4:	ee 0f       	add	r30, r30
    11d6:	ff 1f       	adc	r31, r31
    11d8:	28 81       	ld	r18, Y
    11da:	39 81       	ldd	r19, Y+1	; 0x01
    11dc:	e2 0f       	add	r30, r18
    11de:	f3 1f       	adc	r31, r19
    11e0:	80 91 30 01 	lds	r24, 0x0130
    11e4:	90 91 31 01 	lds	r25, 0x0131
    11e8:	e8 0f       	add	r30, r24
    11ea:	f9 1f       	adc	r31, r25
    11ec:	84 91       	lpm	r24, Z
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <print_char>
    11f6:	46 c0       	rjmp	.+140    	; 0x1284 <keyboard_unselect_prev+0xe6>
	}

	// If previous item is in toolbar
	else {
		if (prev_pos.x < 2) {
    11f8:	20 91 96 03 	lds	r18, 0x0396
    11fc:	30 91 97 03 	lds	r19, 0x0397
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	31 05       	cpc	r19, r1
    1204:	6c f4       	brge	.+26     	; 0x1220 <keyboard_unselect_prev+0x82>
			prev_pos.x = 0;
    1206:	10 92 97 03 	sts	0x0397, r1
    120a:	10 92 96 03 	sts	0x0396, r1
			keyboard_goto(prev_pos.y, prev_pos.x);
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	0e 94 06 07 	call	0xe0c	; 0xe0c <keyboard_goto>
			print_shift(NORMAL);
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <print_shift>
    121e:	32 c0       	rjmp	.+100    	; 0x1284 <keyboard_unselect_prev+0xe6>
		}
		else if (prev_pos.x < 8) {
    1220:	28 30       	cpi	r18, 0x08	; 8
    1222:	31 05       	cpc	r19, r1
    1224:	7c f4       	brge	.+30     	; 0x1244 <keyboard_unselect_prev+0xa6>
			prev_pos.x = 2; // Start of spacebar
    1226:	22 e0       	ldi	r18, 0x02	; 2
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	30 93 97 03 	sts	0x0397, r19
    122e:	20 93 96 03 	sts	0x0396, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
    1232:	62 e0       	ldi	r22, 0x02	; 2
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	0e 94 06 07 	call	0xe0c	; 0xe0c <keyboard_goto>
			print_spacebar(NORMAL);
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <print_spacebar>
    1242:	20 c0       	rjmp	.+64     	; 0x1284 <keyboard_unselect_prev+0xe6>
		}
		else if (prev_pos.x < 10) {
    1244:	2a 30       	cpi	r18, 0x0A	; 10
    1246:	31 05       	cpc	r19, r1
    1248:	7c f4       	brge	.+30     	; 0x1268 <keyboard_unselect_prev+0xca>
			prev_pos.x = 8; // Start of left arrow
    124a:	28 e0       	ldi	r18, 0x08	; 8
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	30 93 97 03 	sts	0x0397, r19
    1252:	20 93 96 03 	sts	0x0396, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
    1256:	68 e0       	ldi	r22, 0x08	; 8
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	0e 94 06 07 	call	0xe0c	; 0xe0c <keyboard_goto>
			print_left_arrow(NORMAL);
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <print_left_arrow>
    1266:	0e c0       	rjmp	.+28     	; 0x1284 <keyboard_unselect_prev+0xe6>
		}
		else {
			prev_pos.x = 10; // Start of right arrow
    1268:	2a e0       	ldi	r18, 0x0A	; 10
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	30 93 97 03 	sts	0x0397, r19
    1270:	20 93 96 03 	sts	0x0396, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
    1274:	6a e0       	ldi	r22, 0x0A	; 10
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	0e 94 06 07 	call	0xe0c	; 0xe0c <keyboard_goto>
			print_right_arrow(NORMAL);
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <print_right_arrow>
		}
	}
}
    1284:	df 91       	pop	r29
    1286:	cf 91       	pop	r28
    1288:	08 95       	ret

0000128a <keyboard_select_curr>:

void keyboard_select_curr() {
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
	// Selected item is a letter
	if (pos.y < 4) {
    128e:	80 91 9c 03 	lds	r24, 0x039C
    1292:	90 91 9d 03 	lds	r25, 0x039D
    1296:	84 30       	cpi	r24, 0x04	; 4
    1298:	91 05       	cpc	r25, r1
    129a:	24 f5       	brge	.+72     	; 0x12e4 <keyboard_select_curr+0x5a>
		keyboard_goto(pos.y, pos.x);
    129c:	ca e9       	ldi	r28, 0x9A	; 154
    129e:	d3 e0       	ldi	r29, 0x03	; 3
    12a0:	68 81       	ld	r22, Y
    12a2:	79 81       	ldd	r23, Y+1	; 0x01
    12a4:	0e 94 06 07 	call	0xe0c	; 0xe0c <keyboard_goto>
		print_char(pgm_read_byte(&letters[pos.y * LINE_LENGTH + pos.x]), INVERSE);
    12a8:	80 91 9c 03 	lds	r24, 0x039C
    12ac:	90 91 9d 03 	lds	r25, 0x039D
    12b0:	fc 01       	movw	r30, r24
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	8e 0f       	add	r24, r30
    12b8:	9f 1f       	adc	r25, r31
    12ba:	fc 01       	movw	r30, r24
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	ee 0f       	add	r30, r30
    12c2:	ff 1f       	adc	r31, r31
    12c4:	28 81       	ld	r18, Y
    12c6:	39 81       	ldd	r19, Y+1	; 0x01
    12c8:	e2 0f       	add	r30, r18
    12ca:	f3 1f       	adc	r31, r19
    12cc:	80 91 30 01 	lds	r24, 0x0130
    12d0:	90 91 31 01 	lds	r25, 0x0131
    12d4:	e8 0f       	add	r30, r24
    12d6:	f9 1f       	adc	r31, r25
    12d8:	84 91       	lpm	r24, Z
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <print_char>
    12e2:	46 c0       	rjmp	.+140    	; 0x1370 <keyboard_select_curr+0xe6>
	}

	// Selected item is in toolbar
	else {
		if (pos.x < 2) {
    12e4:	20 91 9a 03 	lds	r18, 0x039A
    12e8:	30 91 9b 03 	lds	r19, 0x039B
    12ec:	22 30       	cpi	r18, 0x02	; 2
    12ee:	31 05       	cpc	r19, r1
    12f0:	6c f4       	brge	.+26     	; 0x130c <keyboard_select_curr+0x82>
			pos.x = 0;
    12f2:	10 92 9b 03 	sts	0x039B, r1
    12f6:	10 92 9a 03 	sts	0x039A, r1
			keyboard_goto(pos.y, pos.x);
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	0e 94 06 07 	call	0xe0c	; 0xe0c <keyboard_goto>
			print_shift(INVERSE);
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <print_shift>
    130a:	32 c0       	rjmp	.+100    	; 0x1370 <keyboard_select_curr+0xe6>
		}
		else if (pos.x < 8) {
    130c:	28 30       	cpi	r18, 0x08	; 8
    130e:	31 05       	cpc	r19, r1
    1310:	7c f4       	brge	.+30     	; 0x1330 <keyboard_select_curr+0xa6>
			pos.x = 2; // Start of spacebar
    1312:	22 e0       	ldi	r18, 0x02	; 2
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	30 93 9b 03 	sts	0x039B, r19
    131a:	20 93 9a 03 	sts	0x039A, r18
			keyboard_goto(pos.y, pos.x);
    131e:	62 e0       	ldi	r22, 0x02	; 2
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	0e 94 06 07 	call	0xe0c	; 0xe0c <keyboard_goto>
			print_spacebar(INVERSE);
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <print_spacebar>
    132e:	20 c0       	rjmp	.+64     	; 0x1370 <keyboard_select_curr+0xe6>
		}
		else if (pos.x < 10) {
    1330:	2a 30       	cpi	r18, 0x0A	; 10
    1332:	31 05       	cpc	r19, r1
    1334:	7c f4       	brge	.+30     	; 0x1354 <keyboard_select_curr+0xca>
			pos.x = 8; // Start of left arrow
    1336:	28 e0       	ldi	r18, 0x08	; 8
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	30 93 9b 03 	sts	0x039B, r19
    133e:	20 93 9a 03 	sts	0x039A, r18
			keyboard_goto(pos.y, pos.x);
    1342:	68 e0       	ldi	r22, 0x08	; 8
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	0e 94 06 07 	call	0xe0c	; 0xe0c <keyboard_goto>
			print_left_arrow(INVERSE);
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <print_left_arrow>
    1352:	0e c0       	rjmp	.+28     	; 0x1370 <keyboard_select_curr+0xe6>
		}
		else {
			pos.x = 10; // Start of right arrow
    1354:	2a e0       	ldi	r18, 0x0A	; 10
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	30 93 9b 03 	sts	0x039B, r19
    135c:	20 93 9a 03 	sts	0x039A, r18
			keyboard_goto(pos.y, pos.x);
    1360:	6a e0       	ldi	r22, 0x0A	; 10
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	0e 94 06 07 	call	0xe0c	; 0xe0c <keyboard_goto>
			print_right_arrow(INVERSE);
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <print_right_arrow>
		}
	}
}
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	08 95       	ret

00001376 <keyboard_item_pressed>:


void keyboard_item_pressed() {
	if (pos.y < 4) {
    1376:	80 91 9c 03 	lds	r24, 0x039C
    137a:	90 91 9d 03 	lds	r25, 0x039D
    137e:	84 30       	cpi	r24, 0x04	; 4
    1380:	91 05       	cpc	r25, r1
    1382:	e4 f4       	brge	.+56     	; 0x13bc <keyboard_item_pressed+0x46>
		append_char(pgm_read_byte(&letters[pos.y * LINE_LENGTH + pos.x]));
    1384:	fc 01       	movw	r30, r24
    1386:	ee 0f       	add	r30, r30
    1388:	ff 1f       	adc	r31, r31
    138a:	8e 0f       	add	r24, r30
    138c:	9f 1f       	adc	r25, r31
    138e:	fc 01       	movw	r30, r24
    1390:	ee 0f       	add	r30, r30
    1392:	ff 1f       	adc	r31, r31
    1394:	ee 0f       	add	r30, r30
    1396:	ff 1f       	adc	r31, r31
    1398:	20 91 9a 03 	lds	r18, 0x039A
    139c:	30 91 9b 03 	lds	r19, 0x039B
    13a0:	e2 0f       	add	r30, r18
    13a2:	f3 1f       	adc	r31, r19
    13a4:	80 91 30 01 	lds	r24, 0x0130
    13a8:	90 91 31 01 	lds	r25, 0x0131
    13ac:	e8 0f       	add	r30, r24
    13ae:	f9 1f       	adc	r31, r25
    13b0:	84 91       	lpm	r24, Z
    13b2:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <append_char>
		print_string();
    13b6:	0e 94 0f 07 	call	0xe1e	; 0xe1e <print_string>
    13ba:	08 95       	ret
	}
	else {
		if (pos.x < 2) {
    13bc:	80 91 9a 03 	lds	r24, 0x039A
    13c0:	90 91 9b 03 	lds	r25, 0x039B
    13c4:	82 30       	cpi	r24, 0x02	; 2
    13c6:	91 05       	cpc	r25, r1
    13c8:	1c f4       	brge	.+6      	; 0x13d0 <keyboard_item_pressed+0x5a>
			toggle_shift();
    13ca:	0e 94 18 08 	call	0x1030	; 0x1030 <toggle_shift>
    13ce:	08 95       	ret
		}
		else if (pos.x < 8) {
    13d0:	08 97       	sbiw	r24, 0x08	; 8
    13d2:	2c f4       	brge	.+10     	; 0x13de <keyboard_item_pressed+0x68>
			append_char(32);
    13d4:	80 e2       	ldi	r24, 0x20	; 32
    13d6:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <append_char>
			print_string();
    13da:	0e 94 0f 07 	call	0xe1e	; 0xe1e <print_string>
    13de:	08 95       	ret

000013e0 <keyboard_run>:
	}
}



void keyboard_run() {
    13e0:	6f 92       	push	r6
    13e2:	7f 92       	push	r7
    13e4:	8f 92       	push	r8
    13e6:	9f 92       	push	r9
    13e8:	af 92       	push	r10
    13ea:	bf 92       	push	r11
    13ec:	cf 92       	push	r12
    13ee:	df 92       	push	r13
    13f0:	ef 92       	push	r14
    13f2:	ff 92       	push	r15
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
	keyboard_init();
    13fc:	0e 94 58 07 	call	0xeb0	; 0xeb0 <keyboard_init>
	while (!JOY_button_pressed(LEFT_BUTTON)) {
		// Check if we switch letter
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
    1400:	0f 2e       	mov	r0, r31
    1402:	f8 e9       	ldi	r31, 0x98	; 152
    1404:	ef 2e       	mov	r14, r31
    1406:	f3 e0       	ldi	r31, 0x03	; 3
    1408:	ff 2e       	mov	r15, r31
    140a:	f0 2d       	mov	r31, r0
    140c:	0c e9       	ldi	r16, 0x9C	; 156
    140e:	13 e0       	ldi	r17, 0x03	; 3
			// Unselect the old letter and select the new one
			keyboard_unselect_prev();
			keyboard_select_curr();

			// Reset position
			prev_pos.x = pos.x;
    1410:	0f 2e       	mov	r0, r31
    1412:	f6 e9       	ldi	r31, 0x96	; 150
    1414:	af 2e       	mov	r10, r31
    1416:	f3 e0       	ldi	r31, 0x03	; 3
    1418:	bf 2e       	mov	r11, r31
    141a:	f0 2d       	mov	r31, r0
    141c:	0f 2e       	mov	r0, r31
    141e:	fa e9       	ldi	r31, 0x9A	; 154
    1420:	cf 2e       	mov	r12, r31
    1422:	f3 e0       	ldi	r31, 0x03	; 3
    1424:	df 2e       	mov	r13, r31
    1426:	f0 2d       	mov	r31, r0
		// Check if we switch letter
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
			position_moved = 1; // True
    1428:	88 24       	eor	r8, r8
    142a:	83 94       	inc	r8
    142c:	91 2c       	mov	r9, r1
    142e:	61 2c       	mov	r6, r1
    1430:	71 2c       	mov	r7, r1

	// Detect changes
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
    1432:	59 c0       	rjmp	.+178    	; 0x14e6 <keyboard_run+0x106>
		// Check if we switch letter
		direction = JOY_getDirection();
    1434:	0e 94 ab 06 	call	0xd56	; 0xd56 <JOY_getDirection>
		keyboard_register_position_change(direction);
    1438:	0e 94 41 08 	call	0x1082	; 0x1082 <keyboard_register_position_change>
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
    143c:	f7 01       	movw	r30, r14
    143e:	20 81       	ld	r18, Z
    1440:	31 81       	ldd	r19, Z+1	; 0x01
    1442:	f8 01       	movw	r30, r16
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	28 17       	cp	r18, r24
    144a:	39 07       	cpc	r19, r25
    144c:	49 f4       	brne	.+18     	; 0x1460 <keyboard_run+0x80>
    144e:	f5 01       	movw	r30, r10
    1450:	20 81       	ld	r18, Z
    1452:	31 81       	ldd	r19, Z+1	; 0x01
    1454:	f6 01       	movw	r30, r12
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
    145a:	28 17       	cp	r18, r24
    145c:	39 07       	cpc	r19, r25
    145e:	99 f0       	breq	.+38     	; 0x1486 <keyboard_run+0xa6>
			position_moved = 1; // True
			// Unselect the old letter and select the new one
			keyboard_unselect_prev();
    1460:	0e 94 cf 08 	call	0x119e	; 0x119e <keyboard_unselect_prev>
			keyboard_select_curr();
    1464:	0e 94 45 09 	call	0x128a	; 0x128a <keyboard_select_curr>

			// Reset position
			prev_pos.x = pos.x;
    1468:	f6 01       	movw	r30, r12
    146a:	80 81       	ld	r24, Z
    146c:	91 81       	ldd	r25, Z+1	; 0x01
    146e:	f5 01       	movw	r30, r10
    1470:	91 83       	std	Z+1, r25	; 0x01
    1472:	80 83       	st	Z, r24
			prev_pos.y = pos.y;
    1474:	f8 01       	movw	r30, r16
    1476:	80 81       	ld	r24, Z
    1478:	91 81       	ldd	r25, Z+1	; 0x01
    147a:	f7 01       	movw	r30, r14
    147c:	91 83       	std	Z+1, r25	; 0x01
    147e:	80 83       	st	Z, r24
		// Check if we switch letter
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
			position_moved = 1; // True
    1480:	c8 2d       	mov	r28, r8
    1482:	d9 2d       	mov	r29, r9
    1484:	02 c0       	rjmp	.+4      	; 0x148a <keyboard_run+0xaa>
    1486:	c6 2d       	mov	r28, r6
    1488:	d7 2d       	mov	r29, r7
			prev_pos.y = pos.y;
		}


		// Check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
    148a:	82 e0       	ldi	r24, 0x02	; 2
    148c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <JOY_button_pressed>
    1490:	89 2b       	or	r24, r25
    1492:	29 f0       	breq	.+10     	; 0x149e <keyboard_run+0xbe>
			button_pressed = 1;
			keyboard_item_pressed();
    1494:	0e 94 bb 09 	call	0x1376	; 0x1376 <keyboard_item_pressed>
		}


		// Check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
			button_pressed = 1;
    1498:	88 2d       	mov	r24, r8
    149a:	99 2d       	mov	r25, r9
    149c:	0e c0       	rjmp	.+28     	; 0x14ba <keyboard_run+0xda>
			keyboard_item_pressed();
			
		}
		// Check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <JOY_button_pressed>
    14a4:	89 2b       	or	r24, r25
    14a6:	39 f0       	breq	.+14     	; 0x14b6 <keyboard_run+0xd6>
			button_pressed = 1;
			remove_last_char();
    14a8:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <remove_last_char>
			print_string();
    14ac:	0e 94 0f 07 	call	0xe1e	; 0xe1e <print_string>
			keyboard_item_pressed();
			
		}
		// Check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
			button_pressed = 1;
    14b0:	88 2d       	mov	r24, r8
    14b2:	99 2d       	mov	r25, r9
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <keyboard_run+0xda>
    14b6:	86 2d       	mov	r24, r6
    14b8:	97 2d       	mov	r25, r7
			remove_last_char();
			print_string();
		}
		
		// Delay so it doesn't move several times when using Joystick
		if(position_moved){
    14ba:	cd 2b       	or	r28, r29
    14bc:	49 f0       	breq	.+18     	; 0x14d0 <keyboard_run+0xf0>
    14be:	ef ef       	ldi	r30, 0xFF	; 255
    14c0:	ff eb       	ldi	r31, 0xBF	; 191
    14c2:	23 e0       	ldi	r18, 0x03	; 3
    14c4:	e1 50       	subi	r30, 0x01	; 1
    14c6:	f0 40       	sbci	r31, 0x00	; 0
    14c8:	20 40       	sbci	r18, 0x00	; 0
    14ca:	e1 f7       	brne	.-8      	; 0x14c4 <keyboard_run+0xe4>
    14cc:	00 c0       	rjmp	.+0      	; 0x14ce <keyboard_run+0xee>
    14ce:	00 00       	nop
			position_moved = 0;
			_delay_ms(250);
		}
		if(button_pressed){
    14d0:	89 2b       	or	r24, r25
    14d2:	49 f0       	breq	.+18     	; 0x14e6 <keyboard_run+0x106>
    14d4:	3f ef       	ldi	r19, 0xFF	; 255
    14d6:	4f e3       	ldi	r20, 0x3F	; 63
    14d8:	85 e0       	ldi	r24, 0x05	; 5
    14da:	31 50       	subi	r19, 0x01	; 1
    14dc:	40 40       	sbci	r20, 0x00	; 0
    14de:	80 40       	sbci	r24, 0x00	; 0
    14e0:	e1 f7       	brne	.-8      	; 0x14da <keyboard_run+0xfa>
    14e2:	00 c0       	rjmp	.+0      	; 0x14e4 <keyboard_run+0x104>
    14e4:	00 c0       	rjmp	.+0      	; 0x14e6 <keyboard_run+0x106>

	// Detect changes
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <JOY_button_pressed>
    14ec:	89 2b       	or	r24, r25
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <keyboard_run+0x112>
    14f0:	a1 cf       	rjmp	.-190    	; 0x1434 <keyboard_run+0x54>
		if(button_pressed){
			button_pressed = 0;
			_delay_ms(350);
		}
	}
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	df 90       	pop	r13
    1500:	cf 90       	pop	r12
    1502:	bf 90       	pop	r11
    1504:	af 90       	pop	r10
    1506:	9f 90       	pop	r9
    1508:	8f 90       	pop	r8
    150a:	7f 90       	pop	r7
    150c:	6f 90       	pop	r6
    150e:	08 95       	ret

00001510 <MCP2515_read>:
		return 1;
	}	
	return 0;
}

char MCP2515_read(char address) {
    1510:	cf 93       	push	r28
    1512:	c8 2f       	mov	r28, r24
	SPI_select();
    1514:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <SPI_select>
	SPI_send(READ);
    1518:	83 e0       	ldi	r24, 0x03	; 3
    151a:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SPI_send>
	SPI_send(address);
    151e:	8c 2f       	mov	r24, r28
    1520:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SPI_send>
	char data = SPI_read();
    1524:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <SPI_read>
    1528:	c8 2f       	mov	r28, r24
	SPI_deselect();
    152a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <SPI_deselect>
	return data;
}
    152e:	8c 2f       	mov	r24, r28
    1530:	cf 91       	pop	r28
    1532:	08 95       	ret

00001534 <MCP2515_write>:

void MCP2515_write(char address, char data) {
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	d8 2f       	mov	r29, r24
    153a:	c6 2f       	mov	r28, r22
	SPI_select();
    153c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <SPI_select>
	SPI_send(WRITE);
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SPI_send>
	SPI_send(address);
    1546:	8d 2f       	mov	r24, r29
    1548:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SPI_send>
	SPI_send(data);
    154c:	8c 2f       	mov	r24, r28
    154e:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SPI_send>
	SPI_deselect();
    1552:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <SPI_deselect>
}
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <MCP2515_request_to_send>:


void MCP2515_request_to_send(uint8_t buffer_states) {
    155c:	cf 93       	push	r28
    155e:	c8 2f       	mov	r28, r24
	SPI_select();
    1560:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <SPI_select>
	SPI_send(RTS_BASE+buffer_states);
    1564:	80 e8       	ldi	r24, 0x80	; 128
    1566:	8c 0f       	add	r24, r28
    1568:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SPI_send>
	SPI_deselect();
    156c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <SPI_deselect>
}
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <MCP2515_bit_modify>:


void MCP2515_bit_modify(char reg_address, char masked_bits, char new_data) {
    1574:	1f 93       	push	r17
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	18 2f       	mov	r17, r24
    157c:	d6 2f       	mov	r29, r22
    157e:	c4 2f       	mov	r28, r20
	SPI_select();
    1580:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <SPI_select>
	SPI_send(BIT_MODIFY);
    1584:	85 e0       	ldi	r24, 0x05	; 5
    1586:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SPI_send>
	SPI_send(reg_address);
    158a:	81 2f       	mov	r24, r17
    158c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SPI_send>
	SPI_send(masked_bits);
    1590:	8d 2f       	mov	r24, r29
    1592:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SPI_send>
	SPI_send(new_data);
    1596:	8c 2f       	mov	r24, r28
    1598:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SPI_send>
	SPI_deselect();
    159c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <SPI_deselect>
}
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	08 95       	ret

000015a8 <MCP2515_reset>:

void MCP2515_reset() {
	SPI_select();
    15a8:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <SPI_select>
	SPI_send(RESET);
    15ac:	80 ec       	ldi	r24, 0xC0	; 192
    15ae:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SPI_send>
	SPI_deselect();
    15b2:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <SPI_deselect>
    15b6:	08 95       	ret

000015b8 <MCP2515_init>:
#define BIT_MODIFY 0x05
#define RTS_BASE 0x80


uint8_t MCP2515_init() {
	SPI_init();
    15b8:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <SPI_init>
	MCP2515_reset();
    15bc:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <MCP2515_reset>
	// Check bit 7-5 of MCP_CANSTAT which signify the operation mode
	const uint8_t device_mode = MCP2515_read(MCP_CANSTAT) & MODE_MASK;
    15c0:	8e e0       	ldi	r24, 0x0E	; 14
    15c2:	0e 94 88 0a 	call	0x1510	; 0x1510 <MCP2515_read>
    15c6:	80 7e       	andi	r24, 0xE0	; 224
	if (device_mode != MODE_CONFIG) {
    15c8:	80 38       	cpi	r24, 0x80	; 128
    15ca:	31 f0       	breq	.+12     	; 0x15d8 <MCP2515_init+0x20>
		printf("ERROR: MCP2515 is NOT in configuration mode after reset!\n");
    15cc:	80 e9       	ldi	r24, 0x90	; 144
    15ce:	92 e0       	ldi	r25, 0x02	; 2
    15d0:	0e 94 06 11 	call	0x220c	; 0x220c <puts>
		return 1;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	08 95       	ret
	}	
	return 0;
    15d8:	80 e0       	ldi	r24, 0x00	; 0
}
    15da:	08 95       	ret

000015dc <MENU_draw_current_menu>:
	current_entry = current_entry->parent_node;
	selected_entry = current_entry->child_node;
	MENU_draw_current_menu();
}

void MENU_draw_current_menu() {
    15dc:	df 92       	push	r13
    15de:	ef 92       	push	r14
    15e0:	ff 92       	push	r15
    15e2:	0f 93       	push	r16
    15e4:	1f 93       	push	r17
    15e6:	cf 93       	push	r28
    15e8:	df 93       	push	r29
	OLED_reset();
    15ea:	0e 94 cd 0c 	call	0x199a	; 0x199a <OLED_reset>
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
    15ee:	e0 91 d4 03 	lds	r30, 0x03D4
    15f2:	f0 91 d5 03 	lds	r31, 0x03D5
    15f6:	c4 81       	ldd	r28, Z+4	; 0x04
    15f8:	d5 81       	ldd	r29, Z+5	; 0x05
	
	while( temp_node != NULL){
    15fa:	20 97       	sbiw	r28, 0x00	; 0
    15fc:	61 f1       	breq	.+88     	; 0x1656 <MENU_draw_current_menu+0x7a>
    15fe:	d1 2c       	mov	r13, r1
		OLED_goto_pos(output_row++, 0);
		if (temp_node == selected_entry) {
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
    1600:	0f 2e       	mov	r0, r31
    1602:	f9 e3       	ldi	r31, 0x39	; 57
    1604:	ef 2e       	mov	r14, r31
    1606:	f2 e0       	ldi	r31, 0x02	; 2
    1608:	ff 2e       	mov	r15, r31
    160a:	f0 2d       	mov	r31, r0
    160c:	00 e4       	ldi	r16, 0x40	; 64
    160e:	11 e0       	ldi	r17, 0x01	; 1
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
		OLED_goto_pos(output_row++, 0);
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	8d 2d       	mov	r24, r13
    1614:	0e 94 a7 0c 	call	0x194e	; 0x194e <OLED_goto_pos>
		if (temp_node == selected_entry) {
    1618:	20 91 d2 03 	lds	r18, 0x03D2
    161c:	30 91 d3 03 	lds	r19, 0x03D3
    1620:	c2 17       	cp	r28, r18
    1622:	d3 07       	cpc	r29, r19
    1624:	11 f4       	brne	.+4      	; 0x162a <MENU_draw_current_menu+0x4e>
			OLED_print_arrow();
    1626:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <OLED_print_arrow>
		}
		fprintf(OLED, " %s", temp_node->name);
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	8f 93       	push	r24
    162e:	88 81       	ld	r24, Y
    1630:	8f 93       	push	r24
    1632:	ff 92       	push	r15
    1634:	ef 92       	push	r14
    1636:	1f 93       	push	r17
    1638:	0f 93       	push	r16
    163a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <fprintf>
		temp_node = temp_node -> next_sibling_node;
    163e:	0e 80       	ldd	r0, Y+6	; 0x06
    1640:	df 81       	ldd	r29, Y+7	; 0x07
    1642:	c0 2d       	mov	r28, r0
    1644:	d3 94       	inc	r13
	OLED_reset();
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	20 97       	sbiw	r28, 0x00	; 0
    1654:	e9 f6       	brne	.-70     	; 0x1610 <MENU_draw_current_menu+0x34>
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	ff 90       	pop	r15
    1660:	ef 90       	pop	r14
    1662:	df 90       	pop	r13
    1664:	08 95       	ret

00001666 <MENU_select_next>:
	MENU_draw_current_menu();
}


void MENU_select_next() {
	if (selected_entry -> next_sibling_node != NULL) {
    1666:	e0 91 d2 03 	lds	r30, 0x03D2
    166a:	f0 91 d3 03 	lds	r31, 0x03D3
    166e:	86 81       	ldd	r24, Z+6	; 0x06
    1670:	97 81       	ldd	r25, Z+7	; 0x07
    1672:	89 2b       	or	r24, r25
    1674:	41 f0       	breq	.+16     	; 0x1686 <MENU_select_next+0x20>
		selected_entry = selected_entry -> next_sibling_node;
    1676:	86 81       	ldd	r24, Z+6	; 0x06
    1678:	97 81       	ldd	r25, Z+7	; 0x07
    167a:	90 93 d3 03 	sts	0x03D3, r25
    167e:	80 93 d2 03 	sts	0x03D2, r24
		MENU_draw_current_menu();
    1682:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <MENU_draw_current_menu>
    1686:	08 95       	ret

00001688 <MENU_select_prev>:
	}
}

void MENU_select_prev() {
	if (selected_entry -> prev_sibling_node != NULL) {
    1688:	e0 91 d2 03 	lds	r30, 0x03D2
    168c:	f0 91 d3 03 	lds	r31, 0x03D3
    1690:	80 85       	ldd	r24, Z+8	; 0x08
    1692:	91 85       	ldd	r25, Z+9	; 0x09
    1694:	89 2b       	or	r24, r25
    1696:	41 f0       	breq	.+16     	; 0x16a8 <MENU_select_prev+0x20>
		selected_entry = selected_entry -> prev_sibling_node;
    1698:	80 85       	ldd	r24, Z+8	; 0x08
    169a:	91 85       	ldd	r25, Z+9	; 0x09
    169c:	90 93 d3 03 	sts	0x03D3, r25
    16a0:	80 93 d2 03 	sts	0x03D2, r24
		MENU_draw_current_menu();
    16a4:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <MENU_draw_current_menu>
    16a8:	08 95       	ret

000016aa <MENU_enter_selection>:
	}
}

void MENU_enter_selection() {
	if (selected_entry->function_ptr != NULL) {
    16aa:	e0 91 d2 03 	lds	r30, 0x03D2
    16ae:	f0 91 d3 03 	lds	r31, 0x03D3
    16b2:	82 85       	ldd	r24, Z+10	; 0x0a
    16b4:	93 85       	ldd	r25, Z+11	; 0x0b
    16b6:	89 2b       	or	r24, r25
    16b8:	31 f0       	breq	.+12     	; 0x16c6 <MENU_enter_selection+0x1c>
		selected_entry->function_ptr();
    16ba:	02 84       	ldd	r0, Z+10	; 0x0a
    16bc:	f3 85       	ldd	r31, Z+11	; 0x0b
    16be:	e0 2d       	mov	r30, r0
    16c0:	09 95       	icall
		MENU_draw_current_menu();
    16c2:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <MENU_draw_current_menu>
	}
	
	if (selected_entry->child_node == NULL) return;
    16c6:	e0 91 d2 03 	lds	r30, 0x03D2
    16ca:	f0 91 d3 03 	lds	r31, 0x03D3
    16ce:	84 81       	ldd	r24, Z+4	; 0x04
    16d0:	95 81       	ldd	r25, Z+5	; 0x05
    16d2:	89 2b       	or	r24, r25
    16d4:	61 f0       	breq	.+24     	; 0x16ee <MENU_enter_selection+0x44>
	
	current_entry = selected_entry;
    16d6:	f0 93 d5 03 	sts	0x03D5, r31
    16da:	e0 93 d4 03 	sts	0x03D4, r30
	selected_entry = current_entry->child_node;
    16de:	84 81       	ldd	r24, Z+4	; 0x04
    16e0:	95 81       	ldd	r25, Z+5	; 0x05
    16e2:	90 93 d3 03 	sts	0x03D3, r25
    16e6:	80 93 d2 03 	sts	0x03D2, r24
	MENU_draw_current_menu();
    16ea:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <MENU_draw_current_menu>
    16ee:	08 95       	ret

000016f0 <MENU_go_back>:
}

void MENU_go_back() {
	if (current_entry->parent_node == NULL) return;
    16f0:	e0 91 d4 03 	lds	r30, 0x03D4
    16f4:	f0 91 d5 03 	lds	r31, 0x03D5
    16f8:	82 81       	ldd	r24, Z+2	; 0x02
    16fa:	93 81       	ldd	r25, Z+3	; 0x03
    16fc:	89 2b       	or	r24, r25
    16fe:	79 f0       	breq	.+30     	; 0x171e <MENU_go_back+0x2e>
	
	current_entry = current_entry->parent_node;
    1700:	02 80       	ldd	r0, Z+2	; 0x02
    1702:	f3 81       	ldd	r31, Z+3	; 0x03
    1704:	e0 2d       	mov	r30, r0
    1706:	f0 93 d5 03 	sts	0x03D5, r31
    170a:	e0 93 d4 03 	sts	0x03D4, r30
	selected_entry = current_entry->child_node;
    170e:	84 81       	ldd	r24, Z+4	; 0x04
    1710:	95 81       	ldd	r25, Z+5	; 0x05
    1712:	90 93 d3 03 	sts	0x03D3, r25
    1716:	80 93 d2 03 	sts	0x03D2, r24
	MENU_draw_current_menu();
    171a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <MENU_draw_current_menu>
    171e:	08 95       	ret

00001720 <MENU_run>:
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}

void MENU_run() {
    1720:	cf 93       	push	r28
	bool change = false;
	if (JOY_getDirection() == DOWN) {
    1722:	0e 94 ab 06 	call	0xd56	; 0xd56 <JOY_getDirection>
    1726:	83 30       	cpi	r24, 0x03	; 3
    1728:	21 f4       	brne	.+8      	; 0x1732 <MENU_run+0x12>
		MENU_select_next();
    172a:	0e 94 33 0b 	call	0x1666	; 0x1666 <MENU_select_next>
		change = true;
    172e:	c1 e0       	ldi	r28, 0x01	; 1
    1730:	09 c0       	rjmp	.+18     	; 0x1744 <MENU_run+0x24>
	} 
	else if (JOY_getDirection() == UP) {
    1732:	0e 94 ab 06 	call	0xd56	; 0xd56 <JOY_getDirection>
    1736:	82 30       	cpi	r24, 0x02	; 2
    1738:	21 f4       	brne	.+8      	; 0x1742 <MENU_run+0x22>
		MENU_select_prev();
    173a:	0e 94 44 0b 	call	0x1688	; 0x1688 <MENU_select_prev>
		change = true;
    173e:	c1 e0       	ldi	r28, 0x01	; 1
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <MENU_run+0x24>
		temp_node = temp_node -> next_sibling_node;
	}
}

void MENU_run() {
	bool change = false;
    1742:	c0 e0       	ldi	r28, 0x00	; 0
	else if (JOY_getDirection() == UP) {
		MENU_select_prev();
		change = true;
	}
	
	if (JOY_button_pressed(JOY_BUTTON)) {
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	0e 94 5f 06 	call	0xcbe	; 0xcbe <JOY_button_pressed>
    174a:	89 2b       	or	r24, r25
    174c:	19 f0       	breq	.+6      	; 0x1754 <MENU_run+0x34>
		MENU_enter_selection();
    174e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <MENU_enter_selection>
    1752:	0a c0       	rjmp	.+20     	; 0x1768 <MENU_run+0x48>
		change = true;
	}
	else if (JOY_button_pressed(LEFT_BUTTON)) {
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	0e 94 5f 06 	call	0xcbe	; 0xcbe <JOY_button_pressed>
    175a:	89 2b       	or	r24, r25
    175c:	19 f0       	breq	.+6      	; 0x1764 <MENU_run+0x44>
		MENU_go_back();
    175e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <MENU_go_back>
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <MENU_run+0x48>
		change = true;
	}
	
	// Make sure the selection doesn't move multiple places at once.
	if (change){
    1764:	cc 23       	and	r28, r28
    1766:	49 f0       	breq	.+18     	; 0x177a <MENU_run+0x5a>
    1768:	22 e3       	ldi	r18, 0x32	; 50
    176a:	83 ed       	ldi	r24, 0xD3	; 211
    176c:	93 e0       	ldi	r25, 0x03	; 3
    176e:	21 50       	subi	r18, 0x01	; 1
    1770:	80 40       	sbci	r24, 0x00	; 0
    1772:	90 40       	sbci	r25, 0x00	; 0
    1774:	e1 f7       	brne	.-8      	; 0x176e <MENU_run+0x4e>
    1776:	00 c0       	rjmp	.+0      	; 0x1778 <MENU_run+0x58>
    1778:	00 c0       	rjmp	.+0      	; 0x177a <MENU_run+0x5a>
		_delay_ms(255);
		change = false;
	}
}
    177a:	cf 91       	pop	r28
    177c:	08 95       	ret

0000177e <add_entry>:


menu_entry* add_entry(menu_entry* parent_node, char* name, void* function_ptr){
    177e:	ef 92       	push	r14
    1780:	ff 92       	push	r15
    1782:	0f 93       	push	r16
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	ec 01       	movw	r28, r24
    178c:	7b 01       	movw	r14, r22
    178e:	8a 01       	movw	r16, r20
	
	// Create the new node
	menu_entry* new_entry = (menu_entry*) malloc(sizeof(menu_entry));
    1790:	8c e0       	ldi	r24, 0x0C	; 12
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <malloc>
    1798:	dc 01       	movw	r26, r24
	new_entry->name = name;
    179a:	11 96       	adiw	r26, 0x01	; 1
    179c:	fc 92       	st	X, r15
    179e:	ee 92       	st	-X, r14
	new_entry->parent_node = parent_node;
    17a0:	13 96       	adiw	r26, 0x03	; 3
    17a2:	dc 93       	st	X, r29
    17a4:	ce 93       	st	-X, r28
    17a6:	12 97       	sbiw	r26, 0x02	; 2
	new_entry->child_node = NULL;  // A new node has no children
    17a8:	15 96       	adiw	r26, 0x05	; 5
    17aa:	1c 92       	st	X, r1
    17ac:	1e 92       	st	-X, r1
    17ae:	14 97       	sbiw	r26, 0x04	; 4
	new_entry->next_sibling_node = NULL;  // The new child is the last child
    17b0:	17 96       	adiw	r26, 0x07	; 7
    17b2:	1c 92       	st	X, r1
    17b4:	1e 92       	st	-X, r1
    17b6:	16 97       	sbiw	r26, 0x06	; 6
	new_entry->prev_sibling_node = NULL;
    17b8:	19 96       	adiw	r26, 0x09	; 9
    17ba:	1c 92       	st	X, r1
    17bc:	1e 92       	st	-X, r1
    17be:	18 97       	sbiw	r26, 0x08	; 8
	new_entry->function_ptr = function_ptr;
    17c0:	1b 96       	adiw	r26, 0x0b	; 11
    17c2:	1c 93       	st	X, r17
    17c4:	0e 93       	st	-X, r16
    17c6:	1a 97       	sbiw	r26, 0x0a	; 10
	
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_entry;
    17c8:	20 97       	sbiw	r28, 0x00	; 0
    17ca:	a1 f0       	breq	.+40     	; 0x17f4 <add_entry+0x76>
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
    17cc:	ec 81       	ldd	r30, Y+4	; 0x04
    17ce:	fd 81       	ldd	r31, Y+5	; 0x05
    17d0:	30 97       	sbiw	r30, 0x00	; 0
    17d2:	19 f4       	brne	.+6      	; 0x17da <add_entry+0x5c>
		parent_node->child_node = new_entry;
    17d4:	9d 83       	std	Y+5, r25	; 0x05
    17d6:	8c 83       	std	Y+4, r24	; 0x04
    17d8:	0d c0       	rjmp	.+26     	; 0x17f4 <add_entry+0x76>
	else {
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
    17da:	26 81       	ldd	r18, Z+6	; 0x06
    17dc:	37 81       	ldd	r19, Z+7	; 0x07
    17de:	21 15       	cp	r18, r1
    17e0:	31 05       	cpc	r19, r1
    17e2:	11 f0       	breq	.+4      	; 0x17e8 <add_entry+0x6a>
			//printf("temp_node->next_sibling_node->name: %s\n", temp_node->next_sibling_node->name);
			temp_node = temp_node->next_sibling_node;
    17e4:	f9 01       	movw	r30, r18
    17e6:	f9 cf       	rjmp	.-14     	; 0x17da <add_entry+0x5c>
		}
		
		// Bind the new node to the current last child to become the new last child.
		temp_node->next_sibling_node = new_entry;
    17e8:	b7 83       	std	Z+7, r27	; 0x07
    17ea:	a6 83       	std	Z+6, r26	; 0x06
		new_entry->prev_sibling_node = temp_node;
    17ec:	19 96       	adiw	r26, 0x09	; 9
    17ee:	fc 93       	st	X, r31
    17f0:	ee 93       	st	-X, r30
    17f2:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	// Parent/child/sibling bindings complete. Return the new node.
	return new_entry;
}
    17f4:	cd 01       	movw	r24, r26
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	ff 90       	pop	r15
    1800:	ef 90       	pop	r14
    1802:	08 95       	ret

00001804 <MENU_init>:
volatile menu_entry* selected_entry;




void MENU_init() {
    1804:	cf 92       	push	r12
    1806:	df 92       	push	r13
    1808:	ef 92       	push	r14
    180a:	ff 92       	push	r15
    180c:	0f 93       	push	r16
    180e:	1f 93       	push	r17
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
	menu_entry* main_menu = add_entry(NULL, "Main menu", NULL);
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	69 ec       	ldi	r22, 0xC9	; 201
    181a:	72 e0       	ldi	r23, 0x02	; 2
    181c:	80 e0       	ldi	r24, 0x00	; 0
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	0e 94 bf 0b 	call	0x177e	; 0x177e <add_entry>
    1824:	ec 01       	movw	r28, r24
	
	// Main menu
	menu_entry* play = add_entry(main_menu, "Play game", GAME_play);
    1826:	4c ec       	ldi	r20, 0xCC	; 204
    1828:	54 e0       	ldi	r21, 0x04	; 4
    182a:	63 ed       	ldi	r22, 0xD3	; 211
    182c:	72 e0       	ldi	r23, 0x02	; 2
    182e:	0e 94 bf 0b 	call	0x177e	; 0x177e <add_entry>
    1832:	8c 01       	movw	r16, r24
	add_entry(main_menu, "Highscore", GAME_print_highscore);
    1834:	47 e3       	ldi	r20, 0x37	; 55
    1836:	55 e0       	ldi	r21, 0x05	; 5
    1838:	6d ed       	ldi	r22, 0xDD	; 221
    183a:	72 e0       	ldi	r23, 0x02	; 2
    183c:	ce 01       	movw	r24, r28
    183e:	0e 94 bf 0b 	call	0x177e	; 0x177e <add_entry>
	menu_entry* settings = add_entry(main_menu, "Settings", NULL);
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	50 e0       	ldi	r21, 0x00	; 0
    1846:	67 ee       	ldi	r22, 0xE7	; 231
    1848:	72 e0       	ldi	r23, 0x02	; 2
    184a:	ce 01       	movw	r24, r28
    184c:	0e 94 bf 0b 	call	0x177e	; 0x177e <add_entry>
    1850:	6c 01       	movw	r12, r24
	menu_entry* extras = add_entry(main_menu, "Extra features", NULL);
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	6d e7       	ldi	r22, 0x7D	; 125
    1858:	73 e0       	ldi	r23, 0x03	; 3
    185a:	ce 01       	movw	r24, r28
    185c:	0e 94 bf 0b 	call	0x177e	; 0x177e <add_entry>
    1860:	7c 01       	movw	r14, r24
	
	
	// Sub-menu: settings
	add_entry(settings, "Brightness", brightness_run);
    1862:	4d e5       	ldi	r20, 0x5D	; 93
    1864:	52 e0       	ldi	r21, 0x02	; 2
    1866:	60 ef       	ldi	r22, 0xF0	; 240
    1868:	72 e0       	ldi	r23, 0x02	; 2
    186a:	c6 01       	movw	r24, r12
    186c:	0e 94 bf 0b 	call	0x177e	; 0x177e <add_entry>

	
	// Sub-menu: extras
	add_entry(extras, "Keyboard", keyboard_run);
    1870:	40 ef       	ldi	r20, 0xF0	; 240
    1872:	59 e0       	ldi	r21, 0x09	; 9
    1874:	6b ef       	ldi	r22, 0xFB	; 251
    1876:	72 e0       	ldi	r23, 0x02	; 2
    1878:	c7 01       	movw	r24, r14
    187a:	0e 94 bf 0b 	call	0x177e	; 0x177e <add_entry>

	// Initialize to main menu
	current_entry = main_menu;
    187e:	d0 93 d5 03 	sts	0x03D5, r29
    1882:	c0 93 d4 03 	sts	0x03D4, r28
	selected_entry = play;
    1886:	10 93 d3 03 	sts	0x03D3, r17
    188a:	00 93 d2 03 	sts	0x03D2, r16
	MENU_draw_current_menu();
    188e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <MENU_draw_current_menu>
}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	cf 90       	pop	r12
    18a2:	08 95       	ret

000018a4 <initialize>:
#include <stdbool.h>

void send_control_input(void);

void initialize(void){
	cli();
    18a4:	f8 94       	cli
	usart_init(MYUBRR); 
    18a6:	8f e1       	ldi	r24, 0x1F	; 31
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <usart_init>
	SRAM_init();
    18ae:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <SRAM_init>
	ADC_init();
    18b2:	0e 94 03 02 	call	0x406	; 0x406 <ADC_init>
	JOY_init(CALIBRATION_DEFAULT);
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	0e 94 57 06 	call	0xcae	; 0xcae <JOY_init>
	OLED_init();
    18be:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <OLED_init>
	MENU_init();
    18c2:	0e 94 02 0c 	call	0x1804	; 0x1804 <MENU_init>
	CAN_init();
    18c6:	0e 94 b0 02 	call	0x560	; 0x560 <CAN_init>
	sei();
    18ca:	78 94       	sei
    18cc:	08 95       	ret

000018ce <main>:
}



int main(void) {
	initialize();
    18ce:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <initialize>
	printf("Initialization of Node 1 complete!\n\n");
    18d2:	84 e0       	ldi	r24, 0x04	; 4
    18d4:	93 e0       	ldi	r25, 0x03	; 3
    18d6:	0e 94 06 11 	call	0x220c	; 0x220c <puts>
	while(1) {
		MENU_run();
    18da:	0e 94 90 0b 	call	0x1720	; 0x1720 <MENU_run>
    18de:	fd cf       	rjmp	.-6      	; 0x18da <main+0xc>

000018e0 <write_data>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    18e0:	e0 91 50 01 	lds	r30, 0x0150
    18e4:	f0 91 51 01 	lds	r31, 0x0151
    18e8:	80 83       	st	Z, r24
    18ea:	08 95       	ret

000018ec <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7){ 
    18ec:	88 30       	cpi	r24, 0x08	; 8
    18ee:	28 f0       	brcs	.+10     	; 0x18fa <OLED_goto_line+0xe>
		printf("ERROR: Out of range in OLED__goto_line()\n");
    18f0:	88 e2       	ldi	r24, 0x28	; 40
    18f2:	93 e0       	ldi	r25, 0x03	; 3
    18f4:	0e 94 06 11 	call	0x220c	; 0x220c <puts>
		return;
    18f8:	08 95       	ret
	}
	
	write_cmd(0xB0 + line); // Send line command
    18fa:	90 eb       	ldi	r25, 0xB0	; 176
    18fc:	98 0f       	add	r25, r24
	}
	OLED_reset();
}

void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    18fe:	e0 91 4e 01 	lds	r30, 0x014E
    1902:	f0 91 4f 01 	lds	r31, 0x014F
    1906:	90 83       	st	Z, r25
		printf("ERROR: Out of range in OLED__goto_line()\n");
		return;
	}
	
	write_cmd(0xB0 + line); // Send line command
	current_line = line;
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	90 93 a1 03 	sts	0x03A1, r25
    190e:	80 93 a0 03 	sts	0x03A0, r24
    1912:	08 95       	ret

00001914 <OLED_goto_column>:
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
    1914:	88 23       	and	r24, r24
    1916:	2c f4       	brge	.+10     	; 0x1922 <OLED_goto_column+0xe>
		printf("ERROR: Out of range in OLED__goto_column()\n");
    1918:	81 e5       	ldi	r24, 0x51	; 81
    191a:	93 e0       	ldi	r25, 0x03	; 3
    191c:	0e 94 06 11 	call	0x220c	; 0x220c <puts>
		return;
    1920:	08 95       	ret
	}
	
	write_cmd(0x00 + column%16); // Lower column register
    1922:	98 2f       	mov	r25, r24
    1924:	9f 70       	andi	r25, 0x0F	; 15
	}
	OLED_reset();
}

void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    1926:	e0 91 4e 01 	lds	r30, 0x014E
    192a:	f0 91 4f 01 	lds	r31, 0x014F
    192e:	90 83       	st	Z, r25
		printf("ERROR: Out of range in OLED__goto_column()\n");
		return;
	}
	
	write_cmd(0x00 + column%16); // Lower column register
	write_cmd(0x10 + column/16); // Higher column register
    1930:	98 2f       	mov	r25, r24
    1932:	92 95       	swap	r25
    1934:	9f 70       	andi	r25, 0x0F	; 15
    1936:	90 5f       	subi	r25, 0xF0	; 240
	}
	OLED_reset();
}

void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    1938:	e0 91 4e 01 	lds	r30, 0x014E
    193c:	f0 91 4f 01 	lds	r31, 0x014F
    1940:	90 83       	st	Z, r25
		return;
	}
	
	write_cmd(0x00 + column%16); // Lower column register
	write_cmd(0x10 + column/16); // Higher column register
	current_column = column;
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	90 93 9f 03 	sts	0x039F, r25
    1948:	80 93 9e 03 	sts	0x039E, r24
    194c:	08 95       	ret

0000194e <OLED_goto_pos>:
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
		write_data(0x00);
	}
}

void OLED_goto_pos(uint8_t line, uint8_t column) {	
    194e:	cf 93       	push	r28
    1950:	c6 2f       	mov	r28, r22
	OLED_goto_line(line);
    1952:	0e 94 76 0c 	call	0x18ec	; 0x18ec <OLED_goto_line>
	OLED_goto_column(column);
    1956:	8c 2f       	mov	r24, r28
    1958:	0e 94 8a 0c 	call	0x1914	; 0x1914 <OLED_goto_column>
}
    195c:	cf 91       	pop	r28
    195e:	08 95       	ret

00001960 <OLED_reset_cursor>:
	OLED_clear_screen();
	OLED_reset_cursor();
}

void OLED_reset_cursor(){
	OLED_goto_pos(0,0);
    1960:	60 e0       	ldi	r22, 0x00	; 0
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	0e 94 a7 0c 	call	0x194e	; 0x194e <OLED_goto_pos>
    1968:	08 95       	ret

0000196a <OLED_clear_line>:
		OLED_clear_line(page);
	}
}

void OLED_clear_line(uint8_t line) {
	OLED_goto_pos(line, 0);
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	0e 94 a7 0c 	call	0x194e	; 0x194e <OLED_goto_pos>
    1970:	80 e8       	ldi	r24, 0x80	; 128
    1972:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1974:	e0 91 50 01 	lds	r30, 0x0150
    1978:	f0 91 51 01 	lds	r31, 0x0151
    197c:	10 82       	st	Z, r1
    197e:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void OLED_clear_line(uint8_t line) {
	OLED_goto_pos(line, 0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    1980:	00 97       	sbiw	r24, 0x00	; 0
    1982:	c1 f7       	brne	.-16     	; 0x1974 <OLED_clear_line+0xa>
		write_data(0x00);
	}
}
    1984:	08 95       	ret

00001986 <OLED_clear_screen>:

void OLED_reset_cursor(){
	OLED_goto_pos(0,0);
}

void OLED_clear_screen() {
    1986:	cf 93       	push	r28
    1988:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
    198a:	8c 2f       	mov	r24, r28
    198c:	0e 94 b5 0c 	call	0x196a	; 0x196a <OLED_clear_line>
    1990:	cf 5f       	subi	r28, 0xFF	; 255
void OLED_reset_cursor(){
	OLED_goto_pos(0,0);
}

void OLED_clear_screen() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
    1992:	c8 30       	cpi	r28, 0x08	; 8
    1994:	d1 f7       	brne	.-12     	; 0x198a <OLED_clear_screen+0x4>
		OLED_clear_line(page);
	}
}
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <OLED_reset>:
void write_data(uint8_t data){
	*data_address = data;
}

void OLED_reset() {
	OLED_clear_screen();
    199a:	0e 94 c3 0c 	call	0x1986	; 0x1986 <OLED_clear_screen>
	OLED_reset_cursor();
    199e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <OLED_reset_cursor>
    19a2:	08 95       	ret

000019a4 <OLED_init>:

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/

void OLED_init(){
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	67 97       	sbiw	r28, 0x17	; 23
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
	const char commands[] = {
    19b8:	87 e1       	ldi	r24, 0x17	; 23
    19ba:	e2 e5       	ldi	r30, 0x52	; 82
    19bc:	f1 e0       	ldi	r31, 0x01	; 1
    19be:	de 01       	movw	r26, r28
    19c0:	11 96       	adiw	r26, 0x01	; 1
    19c2:	01 90       	ld	r0, Z+
    19c4:	0d 92       	st	X+, r0
    19c6:	8a 95       	dec	r24
    19c8:	e1 f7       	brne	.-8      	; 0x19c2 <OLED_init+0x1e>
    19ca:	fe 01       	movw	r30, r28
    19cc:	31 96       	adiw	r30, 0x01	; 1
    19ce:	ce 01       	movw	r24, r28
    19d0:	48 96       	adiw	r24, 0x18	; 24
		0xAF  // Display on
	};
	
	const int command_count = sizeof(commands)/sizeof(commands[0]);
	for (int i = 0; i < command_count; i++) {
		write_cmd(commands[i]);
    19d2:	21 91       	ld	r18, Z+
	}
	OLED_reset();
}

void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    19d4:	a0 91 4e 01 	lds	r26, 0x014E
    19d8:	b0 91 4f 01 	lds	r27, 0x014F
    19dc:	2c 93       	st	X, r18
		0xA6, // Set normal display
		0xAF  // Display on
	};
	
	const int command_count = sizeof(commands)/sizeof(commands[0]);
	for (int i = 0; i < command_count; i++) {
    19de:	e8 17       	cp	r30, r24
    19e0:	f9 07       	cpc	r31, r25
    19e2:	b9 f7       	brne	.-18     	; 0x19d2 <OLED_init+0x2e>
		write_cmd(commands[i]);
	}
	OLED_reset();
    19e4:	0e 94 cd 0c 	call	0x199a	; 0x199a <OLED_reset>
}
    19e8:	67 96       	adiw	r28, 0x17	; 23
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	08 95       	ret

000019fa <OLED_print_char>:

void OLED_print_char(char character){
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = character - ascii_starting_point;
	
	switch (character) {
    19fa:	8a 30       	cpi	r24, 0x0A	; 10
    19fc:	29 f0       	breq	.+10     	; 0x1a08 <OLED_print_char+0xe>
    19fe:	8d 30       	cpi	r24, 0x0D	; 13
    1a00:	61 f0       	breq	.+24     	; 0x1a1a <OLED_print_char+0x20>
    1a02:	81 11       	cpse	r24, r1
    1a04:	12 c0       	rjmp	.+36     	; 0x1a2a <OLED_print_char+0x30>
    1a06:	08 95       	ret
		case '\0'  :
		break;
		
		case '\n'  :  
		// Reset cursor and move it to the next line
		OLED_goto_pos(current_line + 1, 0);  
    1a08:	80 91 a0 03 	lds	r24, 0x03A0
    1a0c:	90 91 a1 03 	lds	r25, 0x03A1
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	8f 5f       	subi	r24, 0xFF	; 255
    1a14:	0e 94 a7 0c 	call	0x194e	; 0x194e <OLED_goto_pos>
		break;
    1a18:	08 95       	ret
		
		case '\r'  :  
		// Reset cursor to start of current line
		OLED_goto_pos(current_line, 0);  
    1a1a:	80 91 a0 03 	lds	r24, 0x03A0
    1a1e:	90 91 a1 03 	lds	r25, 0x03A1
    1a22:	60 e0       	ldi	r22, 0x00	; 0
    1a24:	0e 94 a7 0c 	call	0x194e	; 0x194e <OLED_goto_pos>
		break;
    1a28:	08 95       	ret
    1a2a:	e8 2f       	mov	r30, r24
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	ee 0f       	add	r30, r30
    1a30:	ff 1f       	adc	r31, r31
    1a32:	ee 0f       	add	r30, r30
    1a34:	ff 1f       	adc	r31, r31
    1a36:	ee 0f       	add	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	e0 53       	subi	r30, 0x30	; 48
    1a3c:	f0 40       	sbci	r31, 0x00	; 0

void OLED_print_char(char character){
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = character - ascii_starting_point;
	
	switch (character) {
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
		break;
		
		default :
		// Print character using the included fonts
		for (int col = 0; col < FONT_SIZE; col++){
			write_data(pgm_read_byte(&font8[letter_index][col]));
    1a42:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1a44:	a0 91 50 01 	lds	r26, 0x0150
    1a48:	b0 91 51 01 	lds	r27, 0x0151
    1a4c:	2c 93       	st	X, r18
		OLED_goto_pos(current_line, 0);  
		break;
		
		default :
		// Print character using the included fonts
		for (int col = 0; col < FONT_SIZE; col++){
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	31 96       	adiw	r30, 0x01	; 1
    1a52:	88 30       	cpi	r24, 0x08	; 8
    1a54:	91 05       	cpc	r25, r1
    1a56:	a9 f7       	brne	.-22     	; 0x1a42 <OLED_print_char+0x48>
    1a58:	08 95       	ret

00001a5a <OLED_set_brightness>:
	}
	OLED_reset();
}

void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    1a5a:	e0 91 4e 01 	lds	r30, 0x014E
    1a5e:	f0 91 4f 01 	lds	r31, 0x014F
    1a62:	91 e8       	ldi	r25, 0x81	; 129
    1a64:	90 83       	st	Z, r25
    1a66:	e0 91 4e 01 	lds	r30, 0x014E
    1a6a:	f0 91 4f 01 	lds	r31, 0x014F
    1a6e:	80 83       	st	Z, r24
    1a70:	08 95       	ret

00001a72 <OLED_print_char_inverse>:
		}
	}
}

void OLED_print_char_inverse(char character) {
	if (character == '\0') return;
    1a72:	88 23       	and	r24, r24
    1a74:	c1 f0       	breq	.+48     	; 0x1aa6 <OLED_print_char_inverse+0x34>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = character - ascii_starting_point;
    1a76:	e8 2f       	mov	r30, r24
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	ee 0f       	add	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	ee 0f       	add	r30, r30
    1a84:	ff 1f       	adc	r31, r31
    1a86:	e0 53       	subi	r30, 0x30	; 48
    1a88:	f0 40       	sbci	r31, 0x00	; 0
	for (int col = 0; col < FONT_SIZE; col++) {
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
		write_data(~pgm_read_byte(&font8[letter_index][col]));
    1a8e:	24 91       	lpm	r18, Z
    1a90:	20 95       	com	r18
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1a92:	a0 91 50 01 	lds	r26, 0x0150
    1a96:	b0 91 51 01 	lds	r27, 0x0151
    1a9a:	2c 93       	st	X, r18

void OLED_print_char_inverse(char character) {
	if (character == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = character - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++) {
    1a9c:	01 96       	adiw	r24, 0x01	; 1
    1a9e:	31 96       	adiw	r30, 0x01	; 1
    1aa0:	88 30       	cpi	r24, 0x08	; 8
    1aa2:	91 05       	cpc	r25, r1
    1aa4:	a1 f7       	brne	.-24     	; 0x1a8e <OLED_print_char_inverse+0x1c>
    1aa6:	08 95       	ret

00001aa8 <OLED_set_line>:
	}
	OLED_reset_cursor();
}

void OLED_set_line(uint8_t line) {
	OLED_goto_pos(line,0);
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	0e 94 a7 0c 	call	0x194e	; 0x194e <OLED_goto_pos>
    1aae:	80 e8       	ldi	r24, 0x80	; 128
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1ab2:	2f ef       	ldi	r18, 0xFF	; 255
    1ab4:	e0 91 50 01 	lds	r30, 0x0150
    1ab8:	f0 91 51 01 	lds	r31, 0x0151
    1abc:	20 83       	st	Z, r18
    1abe:	01 97       	sbiw	r24, 0x01	; 1
	OLED_reset_cursor();
}

void OLED_set_line(uint8_t line) {
	OLED_goto_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    1ac0:	00 97       	sbiw	r24, 0x00	; 0
    1ac2:	c1 f7       	brne	.-16     	; 0x1ab4 <OLED_set_line+0xc>
		write_data(0xFF);
	}
}
    1ac4:	08 95       	ret

00001ac6 <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1ac6:	e0 91 50 01 	lds	r30, 0x0150
    1aca:	f0 91 51 01 	lds	r31, 0x0151
    1ace:	88 e1       	ldi	r24, 0x18	; 24
    1ad0:	80 83       	st	Z, r24
    1ad2:	e0 91 50 01 	lds	r30, 0x0150
    1ad6:	f0 91 51 01 	lds	r31, 0x0151
    1ada:	80 83       	st	Z, r24
    1adc:	e0 91 50 01 	lds	r30, 0x0150
    1ae0:	f0 91 51 01 	lds	r31, 0x0151
    1ae4:	9e e7       	ldi	r25, 0x7E	; 126
    1ae6:	90 83       	st	Z, r25
    1ae8:	e0 91 50 01 	lds	r30, 0x0150
    1aec:	f0 91 51 01 	lds	r31, 0x0151
    1af0:	9c e3       	ldi	r25, 0x3C	; 60
    1af2:	90 83       	st	Z, r25
    1af4:	e0 91 50 01 	lds	r30, 0x0150
    1af8:	f0 91 51 01 	lds	r31, 0x0151
    1afc:	80 83       	st	Z, r24
    1afe:	08 95       	ret

00001b00 <print_blank>:
#include "OLED_driver.h"

#include <stdio.h>
#include <string.h>

void print_blank(int number) {
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
    1b0a:	18 16       	cp	r1, r24
    1b0c:	19 06       	cpc	r1, r25
    1b0e:	54 f4       	brge	.+20     	; 0x1b24 <print_blank+0x24>
    1b10:	c0 e0       	ldi	r28, 0x00	; 0
    1b12:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0x00);
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>

#include <stdio.h>
#include <string.h>

void print_blank(int number) {
	for (int i = 0; i < number; i++) {
    1b1c:	21 96       	adiw	r28, 0x01	; 1
    1b1e:	c0 17       	cp	r28, r16
    1b20:	d1 07       	cpc	r29, r17
    1b22:	c1 f7       	brne	.-16     	; 0x1b14 <print_blank+0x14>
		write_data(0x00);
	}
}
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	08 95       	ret

00001b2e <print_fill>:

void print_fill(int number) {
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
    1b38:	18 16       	cp	r1, r24
    1b3a:	19 06       	cpc	r1, r25
    1b3c:	54 f4       	brge	.+20     	; 0x1b52 <print_fill+0x24>
    1b3e:	c0 e0       	ldi	r28, 0x00	; 0
    1b40:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0xFF);
    1b42:	8f ef       	ldi	r24, 0xFF	; 255
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(0x00);
	}
}

void print_fill(int number) {
	for (int i = 0; i < number; i++) {
    1b4a:	21 96       	adiw	r28, 0x01	; 1
    1b4c:	c0 17       	cp	r28, r16
    1b4e:	d1 07       	cpc	r29, r17
    1b50:	c1 f7       	brne	.-16     	; 0x1b42 <print_fill+0x14>
		write_data(0xFF);
	}
}
    1b52:	df 91       	pop	r29
    1b54:	cf 91       	pop	r28
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	08 95       	ret

00001b5c <print_shift>:

void print_shift(int inverse) {
	if (!inverse) {
    1b5c:	89 2b       	or	r24, r25
    1b5e:	29 f5       	brne	.+74     	; 0x1baa <print_shift+0x4e>
		print_blank(4);
    1b60:	84 e0       	ldi	r24, 0x04	; 4
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <print_blank>
		//up-arrow
		write_data(0b00010000);
    1b68:	80 e1       	ldi	r24, 0x10	; 16
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(0b00011000);
    1b70:	88 e1       	ldi	r24, 0x18	; 24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(0b00111100);
    1b78:	8c e3       	ldi	r24, 0x3C	; 60
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(0b00111110);
    1b80:	8e e3       	ldi	r24, 0x3E	; 62
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(0b00111100);
    1b88:	8c e3       	ldi	r24, 0x3C	; 60
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(0b00011000);
    1b90:	88 e1       	ldi	r24, 0x18	; 24
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(0b00010000);
    1b98:	80 e1       	ldi	r24, 0x10	; 16
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>

		print_blank(5);
    1ba0:	85 e0       	ldi	r24, 0x05	; 5
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <print_blank>
    1ba8:	08 95       	ret
	}
	else {
		print_fill(4);
    1baa:	84 e0       	ldi	r24, 0x04	; 4
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <print_fill>
		//up-arrow
		write_data(~0b00010000);
    1bb2:	8f ee       	ldi	r24, 0xEF	; 239
    1bb4:	9f ef       	ldi	r25, 0xFF	; 255
    1bb6:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(~0b00011000);
    1bba:	87 ee       	ldi	r24, 0xE7	; 231
    1bbc:	9f ef       	ldi	r25, 0xFF	; 255
    1bbe:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(~0b00111100);
    1bc2:	83 ec       	ldi	r24, 0xC3	; 195
    1bc4:	9f ef       	ldi	r25, 0xFF	; 255
    1bc6:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(~0b00111110);
    1bca:	81 ec       	ldi	r24, 0xC1	; 193
    1bcc:	9f ef       	ldi	r25, 0xFF	; 255
    1bce:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(~0b00111100);
    1bd2:	83 ec       	ldi	r24, 0xC3	; 195
    1bd4:	9f ef       	ldi	r25, 0xFF	; 255
    1bd6:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(~0b00011000);
    1bda:	87 ee       	ldi	r24, 0xE7	; 231
    1bdc:	9f ef       	ldi	r25, 0xFF	; 255
    1bde:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(~0b00010000);
    1be2:	8f ee       	ldi	r24, 0xEF	; 239
    1be4:	9f ef       	ldi	r25, 0xFF	; 255
    1be6:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		print_fill(5);
    1bea:	85 e0       	ldi	r24, 0x05	; 5
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <print_fill>
    1bf2:	08 95       	ret

00001bf4 <print_left_arrow>:
	}
}

void print_left_arrow(int inverse) {
	if (!inverse) {
    1bf4:	89 2b       	or	r24, r25
    1bf6:	a9 f4       	brne	.+42     	; 0x1c22 <print_left_arrow+0x2e>
		print_blank(6);
    1bf8:	86 e0       	ldi	r24, 0x06	; 6
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <print_blank>
		//left-arrow

		write_data(0b00010000);
    1c00:	80 e1       	ldi	r24, 0x10	; 16
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(0b00111000);
    1c08:	88 e3       	ldi	r24, 0x38	; 56
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(0b01111100);
    1c10:	8c e7       	ldi	r24, 0x7C	; 124
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>

		print_blank(7);
    1c18:	87 e0       	ldi	r24, 0x07	; 7
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <print_blank>
    1c20:	08 95       	ret
	}
	else {
		print_fill(6);
    1c22:	86 e0       	ldi	r24, 0x06	; 6
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <print_fill>
		//left-arrow
		write_data(~0b00010000);
    1c2a:	8f ee       	ldi	r24, 0xEF	; 239
    1c2c:	9f ef       	ldi	r25, 0xFF	; 255
    1c2e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(~0b00111000);
    1c32:	87 ec       	ldi	r24, 0xC7	; 199
    1c34:	9f ef       	ldi	r25, 0xFF	; 255
    1c36:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(~0b01111100);
    1c3a:	83 e8       	ldi	r24, 0x83	; 131
    1c3c:	9f ef       	ldi	r25, 0xFF	; 255
    1c3e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>

		print_fill(7);
    1c42:	87 e0       	ldi	r24, 0x07	; 7
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <print_fill>
    1c4a:	08 95       	ret

00001c4c <print_right_arrow>:
	}
}


void print_right_arrow(int inverse) {
	if (!inverse) {
    1c4c:	89 2b       	or	r24, r25
    1c4e:	a9 f4       	brne	.+42     	; 0x1c7a <print_right_arrow+0x2e>
		print_blank(6);
    1c50:	86 e0       	ldi	r24, 0x06	; 6
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <print_blank>

		//right-arrow
		write_data(0b01111100);
    1c58:	8c e7       	ldi	r24, 0x7C	; 124
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(0b00111000);
    1c60:	88 e3       	ldi	r24, 0x38	; 56
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(0b00010000);
    1c68:	80 e1       	ldi	r24, 0x10	; 16
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>

		print_blank(7);
    1c70:	87 e0       	ldi	r24, 0x07	; 7
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <print_blank>
    1c78:	08 95       	ret
	}
	else {
		print_fill(6);
    1c7a:	86 e0       	ldi	r24, 0x06	; 6
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <print_fill>

		//right-arrow
		write_data(~0b01111100);
    1c82:	83 e8       	ldi	r24, 0x83	; 131
    1c84:	9f ef       	ldi	r25, 0xFF	; 255
    1c86:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(~0b00111000);
    1c8a:	87 ec       	ldi	r24, 0xC7	; 199
    1c8c:	9f ef       	ldi	r25, 0xFF	; 255
    1c8e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
		write_data(~0b00010000);
    1c92:	8f ee       	ldi	r24, 0xEF	; 239
    1c94:	9f ef       	ldi	r25, 0xFF	; 255
    1c96:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>

		print_fill(7);
    1c9a:	87 e0       	ldi	r24, 0x07	; 7
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <print_fill>
    1ca2:	08 95       	ret

00001ca4 <print_spacebar>:
	}
}


void print_spacebar(int inverse) {
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
	if (!inverse) {
    1ca8:	89 2b       	or	r24, r25
    1caa:	d1 f4       	brne	.+52     	; 0x1ce0 <print_spacebar+0x3c>
		print_blank(4);
    1cac:	84 e0       	ldi	r24, 0x04	; 4
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <print_blank>

		//spacebar
		write_data(0b00111000);
    1cb4:	88 e3       	ldi	r24, 0x38	; 56
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
    1cbc:	c7 e2       	ldi	r28, 0x27	; 39
    1cbe:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 39;i++) write_data(0b00100000);
    1cc0:	80 e2       	ldi	r24, 0x20	; 32
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
    1cc8:	21 97       	sbiw	r28, 0x01	; 1
    1cca:	20 97       	sbiw	r28, 0x00	; 0
    1ccc:	c9 f7       	brne	.-14     	; 0x1cc0 <print_spacebar+0x1c>
		write_data(0b00111000);
    1cce:	88 e3       	ldi	r24, 0x38	; 56
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>

		print_blank(5);
    1cd6:	85 e0       	ldi	r24, 0x05	; 5
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <print_blank>
    1cde:	19 c0       	rjmp	.+50     	; 0x1d12 <print_spacebar+0x6e>
	}
	else {
		print_blank(4);
    1ce0:	84 e0       	ldi	r24, 0x04	; 4
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <print_blank>

		//spacebar
		write_data(~0b00111000);
    1ce8:	87 ec       	ldi	r24, 0xC7	; 199
    1cea:	9f ef       	ldi	r25, 0xFF	; 255
    1cec:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
    1cf0:	c7 e2       	ldi	r28, 0x27	; 39
    1cf2:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 39;i++) write_data(~0b00100000);
    1cf4:	8f ed       	ldi	r24, 0xDF	; 223
    1cf6:	9f ef       	ldi	r25, 0xFF	; 255
    1cf8:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>
    1cfc:	21 97       	sbiw	r28, 0x01	; 1
    1cfe:	20 97       	sbiw	r28, 0x00	; 0
    1d00:	c9 f7       	brne	.-14     	; 0x1cf4 <print_spacebar+0x50>
		write_data(~0b00111000);
    1d02:	87 ec       	ldi	r24, 0xC7	; 199
    1d04:	9f ef       	ldi	r25, 0xFF	; 255
    1d06:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <write_data>

		print_blank(5);
    1d0a:	85 e0       	ldi	r24, 0x05	; 5
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <print_blank>
	}
}
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	08 95       	ret

00001d18 <print_options_bar>:


void print_options_bar(int shift_inverse, int space_inverse, int left_inverse,  int right_inverse) {
    1d18:	ef 92       	push	r14
    1d1a:	ff 92       	push	r15
    1d1c:	0f 93       	push	r16
    1d1e:	1f 93       	push	r17
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	7b 01       	movw	r14, r22
    1d26:	8a 01       	movw	r16, r20
    1d28:	e9 01       	movw	r28, r18
	print_shift(shift_inverse);
    1d2a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <print_shift>
	print_spacebar(space_inverse);
    1d2e:	c7 01       	movw	r24, r14
    1d30:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <print_spacebar>
	print_left_arrow(left_inverse);
    1d34:	c8 01       	movw	r24, r16
    1d36:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <print_left_arrow>
	print_right_arrow(right_inverse);
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <print_right_arrow>
}
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	1f 91       	pop	r17
    1d46:	0f 91       	pop	r16
    1d48:	ff 90       	pop	r15
    1d4a:	ef 90       	pop	r14
    1d4c:	08 95       	ret

00001d4e <print_char>:

void print_char(char c, int inverse) {
	if (!inverse) {
    1d4e:	67 2b       	or	r22, r23
    1d50:	19 f4       	brne	.+6      	; 0x1d58 <print_char+0xa>
		OLED_print_char(c);
    1d52:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <OLED_print_char>
    1d56:	08 95       	ret
	}
	else {
		OLED_print_char_inverse(c);
    1d58:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <OLED_print_char_inverse>
    1d5c:	08 95       	ret

00001d5e <SPI_init>:
#define MISO PB6
#define SCK PB7

void SPI_init(){
	// Configure interrupt0 when low on the ATmega162 for receiving interrupts from SPI (P. 160 ATmega162)
	set_bit(GICR, INT0);
    1d5e:	8b b7       	in	r24, 0x3b	; 59
    1d60:	80 64       	ori	r24, 0x40	; 64
    1d62:	8b bf       	out	0x3b, r24	; 59
	
	// Set mosi, sck, ss as output, others as input
	set_bit(DDRB, MOSI);
    1d64:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
    1d66:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
    1d68:	bc 9a       	sbi	0x17, 4	; 23
	
	
	// Set ATmega162 as master
	set_bit(SPCR, MSTR);
    1d6a:	6c 9a       	sbi	0x0d, 4	; 13
	
	// Enable SPI
	set_bit(SPCR, SPE);
    1d6c:	6e 9a       	sbi	0x0d, 6	; 13
	
	// Set clock to f_osc/16
	set_bit(SPCR, SPR0);
    1d6e:	68 9a       	sbi	0x0d, 0	; 13
    1d70:	08 95       	ret

00001d72 <SPI_send>:
}


void SPI_send(uint8_t data){
	// Start transmission
	SPDR = data;
    1d72:	8f b9       	out	0x0f, r24	; 15
			
	// Wait for flag to signal that transmission is complete
	loop_until_bit_is_set(SPSR, SPIF);
    1d74:	77 9b       	sbis	0x0e, 7	; 14
    1d76:	fe cf       	rjmp	.-4      	; 0x1d74 <SPI_send+0x2>
}
    1d78:	08 95       	ret

00001d7a <SPI_read>:


char SPI_read(){
	// Must send a dummy bit to receive data
	SPI_send(0);
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <SPI_send>
	
	// Wait for flag to signal that transmission is complete
	loop_until_bit_is_set(SPSR, SPIF);
    1d80:	77 9b       	sbis	0x0e, 7	; 14
    1d82:	fe cf       	rjmp	.-4      	; 0x1d80 <SPI_read+0x6>
	
	// Return received data
	return SPDR;
    1d84:	8f b1       	in	r24, 0x0f	; 15
	
}
    1d86:	08 95       	ret

00001d88 <SPI_select>:
	// Send value to read with oscilloscope
	SPI_send(0b10010101); 
}

void SPI_select(){
	clear_bit(PORTB, SS);
    1d88:	c4 98       	cbi	0x18, 4	; 24
    1d8a:	08 95       	ret

00001d8c <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
    1d8c:	c4 9a       	sbi	0x18, 4	; 24
    1d8e:	08 95       	ret

00001d90 <SRAM_init>:
#include <stdio.h>


void SRAM_init(void){
	// Enable external memory interface
	set_bit(MCUCR, SRE);
    1d90:	85 b7       	in	r24, 0x35	; 53
    1d92:	80 68       	ori	r24, 0x80	; 128
    1d94:	85 bf       	out	0x35, r24	; 53
	
	// Use 4 pins of PORT C for external memory interface, PC7-PC4 used for JTAG instead
	set_bit(SFIOR, XMM2);
    1d96:	80 b7       	in	r24, 0x30	; 48
    1d98:	80 62       	ori	r24, 0x20	; 32
    1d9a:	80 bf       	out	0x30, r24	; 48
    1d9c:	08 95       	ret

00001d9e <usart_transmit_to_computer>:
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
}


void usart_transmit_to_computer(unsigned int data) {
	while (!(UCSR0A & (1<<UDRE0)));	// Wait for empty transmit buffer
    1d9e:	5d 9b       	sbis	0x0b, 5	; 11
    1da0:	fe cf       	rjmp	.-4      	; 0x1d9e <usart_transmit_to_computer>
	UDR0 = data;					// Put data into buffer (sends the data) 
    1da2:	8c b9       	out	0x0c, r24	; 12
    1da4:	08 95       	ret

00001da6 <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	// Wait for data to be received 
	while (!(UCSR0A & (1<<RXC0)));
    1da6:	5f 9b       	sbis	0x0b, 7	; 11
    1da8:	fe cf       	rjmp	.-4      	; 0x1da6 <usart_receive_from_computer>
	
	// Get and return data from buffer 
	return UDR0;
    1daa:	8c b1       	in	r24, 0x0c	; 12
}
    1dac:	08 95       	ret

00001dae <usart_init>:
#include <stdio.h>


void usart_init(unsigned int ubbr) {
	// Set baud rate 
	UBRR0H = (unsigned char)(ubbr>>8);
    1dae:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
    1db0:	89 b9       	out	0x09, r24	; 9
	
	// Enable receiver and transmitter 
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    1db2:	88 e1       	ldi	r24, 0x18	; 24
    1db4:	8a b9       	out	0x0a, r24	; 10
	
	// Set frame format: 8data, 2stop bit 
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1db6:	8e e8       	ldi	r24, 0x8E	; 142
    1db8:	80 bd       	out	0x20, r24	; 32
	
	
	// Link printf to usart functions, so that it sends to/receives from PC
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
    1dba:	63 ed       	ldi	r22, 0xD3	; 211
    1dbc:	7e e0       	ldi	r23, 0x0E	; 14
    1dbe:	8f ec       	ldi	r24, 0xCF	; 207
    1dc0:	9e e0       	ldi	r25, 0x0E	; 14
    1dc2:	0e 94 33 10 	call	0x2066	; 0x2066 <fdevopen>
    1dc6:	08 95       	ret

00001dc8 <__divmodhi4>:
    1dc8:	97 fb       	bst	r25, 7
    1dca:	07 2e       	mov	r0, r23
    1dcc:	16 f4       	brtc	.+4      	; 0x1dd2 <__divmodhi4+0xa>
    1dce:	00 94       	com	r0
    1dd0:	07 d0       	rcall	.+14     	; 0x1de0 <__divmodhi4_neg1>
    1dd2:	77 fd       	sbrc	r23, 7
    1dd4:	09 d0       	rcall	.+18     	; 0x1de8 <__divmodhi4_neg2>
    1dd6:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__udivmodhi4>
    1dda:	07 fc       	sbrc	r0, 7
    1ddc:	05 d0       	rcall	.+10     	; 0x1de8 <__divmodhi4_neg2>
    1dde:	3e f4       	brtc	.+14     	; 0x1dee <__divmodhi4_exit>

00001de0 <__divmodhi4_neg1>:
    1de0:	90 95       	com	r25
    1de2:	81 95       	neg	r24
    1de4:	9f 4f       	sbci	r25, 0xFF	; 255
    1de6:	08 95       	ret

00001de8 <__divmodhi4_neg2>:
    1de8:	70 95       	com	r23
    1dea:	61 95       	neg	r22
    1dec:	7f 4f       	sbci	r23, 0xFF	; 255

00001dee <__divmodhi4_exit>:
    1dee:	08 95       	ret

00001df0 <__udivmodhi4>:
    1df0:	aa 1b       	sub	r26, r26
    1df2:	bb 1b       	sub	r27, r27
    1df4:	51 e1       	ldi	r21, 0x11	; 17
    1df6:	07 c0       	rjmp	.+14     	; 0x1e06 <__udivmodhi4_ep>

00001df8 <__udivmodhi4_loop>:
    1df8:	aa 1f       	adc	r26, r26
    1dfa:	bb 1f       	adc	r27, r27
    1dfc:	a6 17       	cp	r26, r22
    1dfe:	b7 07       	cpc	r27, r23
    1e00:	10 f0       	brcs	.+4      	; 0x1e06 <__udivmodhi4_ep>
    1e02:	a6 1b       	sub	r26, r22
    1e04:	b7 0b       	sbc	r27, r23

00001e06 <__udivmodhi4_ep>:
    1e06:	88 1f       	adc	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	5a 95       	dec	r21
    1e0c:	a9 f7       	brne	.-22     	; 0x1df8 <__udivmodhi4_loop>
    1e0e:	80 95       	com	r24
    1e10:	90 95       	com	r25
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	08 95       	ret

00001e18 <malloc>:
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	82 30       	cpi	r24, 0x02	; 2
    1e1e:	91 05       	cpc	r25, r1
    1e20:	10 f4       	brcc	.+4      	; 0x1e26 <malloc+0xe>
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	e0 91 d8 03 	lds	r30, 0x03D8
    1e2a:	f0 91 d9 03 	lds	r31, 0x03D9
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	a0 e0       	ldi	r26, 0x00	; 0
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	30 97       	sbiw	r30, 0x00	; 0
    1e38:	39 f1       	breq	.+78     	; 0x1e88 <malloc+0x70>
    1e3a:	40 81       	ld	r20, Z
    1e3c:	51 81       	ldd	r21, Z+1	; 0x01
    1e3e:	48 17       	cp	r20, r24
    1e40:	59 07       	cpc	r21, r25
    1e42:	b8 f0       	brcs	.+46     	; 0x1e72 <malloc+0x5a>
    1e44:	48 17       	cp	r20, r24
    1e46:	59 07       	cpc	r21, r25
    1e48:	71 f4       	brne	.+28     	; 0x1e66 <malloc+0x4e>
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	10 97       	sbiw	r26, 0x00	; 0
    1e50:	29 f0       	breq	.+10     	; 0x1e5c <malloc+0x44>
    1e52:	13 96       	adiw	r26, 0x03	; 3
    1e54:	9c 93       	st	X, r25
    1e56:	8e 93       	st	-X, r24
    1e58:	12 97       	sbiw	r26, 0x02	; 2
    1e5a:	2c c0       	rjmp	.+88     	; 0x1eb4 <malloc+0x9c>
    1e5c:	90 93 d9 03 	sts	0x03D9, r25
    1e60:	80 93 d8 03 	sts	0x03D8, r24
    1e64:	27 c0       	rjmp	.+78     	; 0x1eb4 <malloc+0x9c>
    1e66:	21 15       	cp	r18, r1
    1e68:	31 05       	cpc	r19, r1
    1e6a:	31 f0       	breq	.+12     	; 0x1e78 <malloc+0x60>
    1e6c:	42 17       	cp	r20, r18
    1e6e:	53 07       	cpc	r21, r19
    1e70:	18 f0       	brcs	.+6      	; 0x1e78 <malloc+0x60>
    1e72:	a9 01       	movw	r20, r18
    1e74:	db 01       	movw	r26, r22
    1e76:	01 c0       	rjmp	.+2      	; 0x1e7a <malloc+0x62>
    1e78:	ef 01       	movw	r28, r30
    1e7a:	9a 01       	movw	r18, r20
    1e7c:	bd 01       	movw	r22, r26
    1e7e:	df 01       	movw	r26, r30
    1e80:	02 80       	ldd	r0, Z+2	; 0x02
    1e82:	f3 81       	ldd	r31, Z+3	; 0x03
    1e84:	e0 2d       	mov	r30, r0
    1e86:	d7 cf       	rjmp	.-82     	; 0x1e36 <malloc+0x1e>
    1e88:	21 15       	cp	r18, r1
    1e8a:	31 05       	cpc	r19, r1
    1e8c:	f9 f0       	breq	.+62     	; 0x1ecc <malloc+0xb4>
    1e8e:	28 1b       	sub	r18, r24
    1e90:	39 0b       	sbc	r19, r25
    1e92:	24 30       	cpi	r18, 0x04	; 4
    1e94:	31 05       	cpc	r19, r1
    1e96:	80 f4       	brcc	.+32     	; 0x1eb8 <malloc+0xa0>
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9c:	61 15       	cp	r22, r1
    1e9e:	71 05       	cpc	r23, r1
    1ea0:	21 f0       	breq	.+8      	; 0x1eaa <malloc+0x92>
    1ea2:	fb 01       	movw	r30, r22
    1ea4:	93 83       	std	Z+3, r25	; 0x03
    1ea6:	82 83       	std	Z+2, r24	; 0x02
    1ea8:	04 c0       	rjmp	.+8      	; 0x1eb2 <malloc+0x9a>
    1eaa:	90 93 d9 03 	sts	0x03D9, r25
    1eae:	80 93 d8 03 	sts	0x03D8, r24
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	32 96       	adiw	r30, 0x02	; 2
    1eb6:	44 c0       	rjmp	.+136    	; 0x1f40 <malloc+0x128>
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e2 0f       	add	r30, r18
    1ebc:	f3 1f       	adc	r31, r19
    1ebe:	81 93       	st	Z+, r24
    1ec0:	91 93       	st	Z+, r25
    1ec2:	22 50       	subi	r18, 0x02	; 2
    1ec4:	31 09       	sbc	r19, r1
    1ec6:	39 83       	std	Y+1, r19	; 0x01
    1ec8:	28 83       	st	Y, r18
    1eca:	3a c0       	rjmp	.+116    	; 0x1f40 <malloc+0x128>
    1ecc:	20 91 d6 03 	lds	r18, 0x03D6
    1ed0:	30 91 d7 03 	lds	r19, 0x03D7
    1ed4:	23 2b       	or	r18, r19
    1ed6:	41 f4       	brne	.+16     	; 0x1ee8 <malloc+0xd0>
    1ed8:	20 91 02 01 	lds	r18, 0x0102
    1edc:	30 91 03 01 	lds	r19, 0x0103
    1ee0:	30 93 d7 03 	sts	0x03D7, r19
    1ee4:	20 93 d6 03 	sts	0x03D6, r18
    1ee8:	20 91 00 01 	lds	r18, 0x0100
    1eec:	30 91 01 01 	lds	r19, 0x0101
    1ef0:	21 15       	cp	r18, r1
    1ef2:	31 05       	cpc	r19, r1
    1ef4:	41 f4       	brne	.+16     	; 0x1f06 <malloc+0xee>
    1ef6:	2d b7       	in	r18, 0x3d	; 61
    1ef8:	3e b7       	in	r19, 0x3e	; 62
    1efa:	40 91 04 01 	lds	r20, 0x0104
    1efe:	50 91 05 01 	lds	r21, 0x0105
    1f02:	24 1b       	sub	r18, r20
    1f04:	35 0b       	sbc	r19, r21
    1f06:	e0 91 d6 03 	lds	r30, 0x03D6
    1f0a:	f0 91 d7 03 	lds	r31, 0x03D7
    1f0e:	e2 17       	cp	r30, r18
    1f10:	f3 07       	cpc	r31, r19
    1f12:	a0 f4       	brcc	.+40     	; 0x1f3c <malloc+0x124>
    1f14:	2e 1b       	sub	r18, r30
    1f16:	3f 0b       	sbc	r19, r31
    1f18:	28 17       	cp	r18, r24
    1f1a:	39 07       	cpc	r19, r25
    1f1c:	78 f0       	brcs	.+30     	; 0x1f3c <malloc+0x124>
    1f1e:	ac 01       	movw	r20, r24
    1f20:	4e 5f       	subi	r20, 0xFE	; 254
    1f22:	5f 4f       	sbci	r21, 0xFF	; 255
    1f24:	24 17       	cp	r18, r20
    1f26:	35 07       	cpc	r19, r21
    1f28:	48 f0       	brcs	.+18     	; 0x1f3c <malloc+0x124>
    1f2a:	4e 0f       	add	r20, r30
    1f2c:	5f 1f       	adc	r21, r31
    1f2e:	50 93 d7 03 	sts	0x03D7, r21
    1f32:	40 93 d6 03 	sts	0x03D6, r20
    1f36:	81 93       	st	Z+, r24
    1f38:	91 93       	st	Z+, r25
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <malloc+0x128>
    1f3c:	e0 e0       	ldi	r30, 0x00	; 0
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	cf 01       	movw	r24, r30
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	08 95       	ret

00001f48 <free>:
    1f48:	cf 93       	push	r28
    1f4a:	df 93       	push	r29
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <free+0xa>
    1f50:	87 c0       	rjmp	.+270    	; 0x2060 <free+0x118>
    1f52:	fc 01       	movw	r30, r24
    1f54:	32 97       	sbiw	r30, 0x02	; 2
    1f56:	13 82       	std	Z+3, r1	; 0x03
    1f58:	12 82       	std	Z+2, r1	; 0x02
    1f5a:	c0 91 d8 03 	lds	r28, 0x03D8
    1f5e:	d0 91 d9 03 	lds	r29, 0x03D9
    1f62:	20 97       	sbiw	r28, 0x00	; 0
    1f64:	81 f4       	brne	.+32     	; 0x1f86 <free+0x3e>
    1f66:	20 81       	ld	r18, Z
    1f68:	31 81       	ldd	r19, Z+1	; 0x01
    1f6a:	28 0f       	add	r18, r24
    1f6c:	39 1f       	adc	r19, r25
    1f6e:	80 91 d6 03 	lds	r24, 0x03D6
    1f72:	90 91 d7 03 	lds	r25, 0x03D7
    1f76:	82 17       	cp	r24, r18
    1f78:	93 07       	cpc	r25, r19
    1f7a:	79 f5       	brne	.+94     	; 0x1fda <free+0x92>
    1f7c:	f0 93 d7 03 	sts	0x03D7, r31
    1f80:	e0 93 d6 03 	sts	0x03D6, r30
    1f84:	6d c0       	rjmp	.+218    	; 0x2060 <free+0x118>
    1f86:	de 01       	movw	r26, r28
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	ae 17       	cp	r26, r30
    1f8e:	bf 07       	cpc	r27, r31
    1f90:	50 f4       	brcc	.+20     	; 0x1fa6 <free+0x5e>
    1f92:	12 96       	adiw	r26, 0x02	; 2
    1f94:	4d 91       	ld	r20, X+
    1f96:	5c 91       	ld	r21, X
    1f98:	13 97       	sbiw	r26, 0x03	; 3
    1f9a:	9d 01       	movw	r18, r26
    1f9c:	41 15       	cp	r20, r1
    1f9e:	51 05       	cpc	r21, r1
    1fa0:	09 f1       	breq	.+66     	; 0x1fe4 <free+0x9c>
    1fa2:	da 01       	movw	r26, r20
    1fa4:	f3 cf       	rjmp	.-26     	; 0x1f8c <free+0x44>
    1fa6:	b3 83       	std	Z+3, r27	; 0x03
    1fa8:	a2 83       	std	Z+2, r26	; 0x02
    1faa:	40 81       	ld	r20, Z
    1fac:	51 81       	ldd	r21, Z+1	; 0x01
    1fae:	84 0f       	add	r24, r20
    1fb0:	95 1f       	adc	r25, r21
    1fb2:	8a 17       	cp	r24, r26
    1fb4:	9b 07       	cpc	r25, r27
    1fb6:	71 f4       	brne	.+28     	; 0x1fd4 <free+0x8c>
    1fb8:	8d 91       	ld	r24, X+
    1fba:	9c 91       	ld	r25, X
    1fbc:	11 97       	sbiw	r26, 0x01	; 1
    1fbe:	84 0f       	add	r24, r20
    1fc0:	95 1f       	adc	r25, r21
    1fc2:	02 96       	adiw	r24, 0x02	; 2
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24
    1fc8:	12 96       	adiw	r26, 0x02	; 2
    1fca:	8d 91       	ld	r24, X+
    1fcc:	9c 91       	ld	r25, X
    1fce:	13 97       	sbiw	r26, 0x03	; 3
    1fd0:	93 83       	std	Z+3, r25	; 0x03
    1fd2:	82 83       	std	Z+2, r24	; 0x02
    1fd4:	21 15       	cp	r18, r1
    1fd6:	31 05       	cpc	r19, r1
    1fd8:	29 f4       	brne	.+10     	; 0x1fe4 <free+0x9c>
    1fda:	f0 93 d9 03 	sts	0x03D9, r31
    1fde:	e0 93 d8 03 	sts	0x03D8, r30
    1fe2:	3e c0       	rjmp	.+124    	; 0x2060 <free+0x118>
    1fe4:	d9 01       	movw	r26, r18
    1fe6:	13 96       	adiw	r26, 0x03	; 3
    1fe8:	fc 93       	st	X, r31
    1fea:	ee 93       	st	-X, r30
    1fec:	12 97       	sbiw	r26, 0x02	; 2
    1fee:	4d 91       	ld	r20, X+
    1ff0:	5d 91       	ld	r21, X+
    1ff2:	a4 0f       	add	r26, r20
    1ff4:	b5 1f       	adc	r27, r21
    1ff6:	ea 17       	cp	r30, r26
    1ff8:	fb 07       	cpc	r31, r27
    1ffa:	79 f4       	brne	.+30     	; 0x201a <free+0xd2>
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	84 0f       	add	r24, r20
    2002:	95 1f       	adc	r25, r21
    2004:	02 96       	adiw	r24, 0x02	; 2
    2006:	d9 01       	movw	r26, r18
    2008:	11 96       	adiw	r26, 0x01	; 1
    200a:	9c 93       	st	X, r25
    200c:	8e 93       	st	-X, r24
    200e:	82 81       	ldd	r24, Z+2	; 0x02
    2010:	93 81       	ldd	r25, Z+3	; 0x03
    2012:	13 96       	adiw	r26, 0x03	; 3
    2014:	9c 93       	st	X, r25
    2016:	8e 93       	st	-X, r24
    2018:	12 97       	sbiw	r26, 0x02	; 2
    201a:	e0 e0       	ldi	r30, 0x00	; 0
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	9b 81       	ldd	r25, Y+3	; 0x03
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	19 f0       	breq	.+6      	; 0x202c <free+0xe4>
    2026:	fe 01       	movw	r30, r28
    2028:	ec 01       	movw	r28, r24
    202a:	f9 cf       	rjmp	.-14     	; 0x201e <free+0xd6>
    202c:	ce 01       	movw	r24, r28
    202e:	02 96       	adiw	r24, 0x02	; 2
    2030:	28 81       	ld	r18, Y
    2032:	39 81       	ldd	r19, Y+1	; 0x01
    2034:	82 0f       	add	r24, r18
    2036:	93 1f       	adc	r25, r19
    2038:	20 91 d6 03 	lds	r18, 0x03D6
    203c:	30 91 d7 03 	lds	r19, 0x03D7
    2040:	28 17       	cp	r18, r24
    2042:	39 07       	cpc	r19, r25
    2044:	69 f4       	brne	.+26     	; 0x2060 <free+0x118>
    2046:	30 97       	sbiw	r30, 0x00	; 0
    2048:	29 f4       	brne	.+10     	; 0x2054 <free+0x10c>
    204a:	10 92 d9 03 	sts	0x03D9, r1
    204e:	10 92 d8 03 	sts	0x03D8, r1
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <free+0x110>
    2054:	13 82       	std	Z+3, r1	; 0x03
    2056:	12 82       	std	Z+2, r1	; 0x02
    2058:	d0 93 d7 03 	sts	0x03D7, r29
    205c:	c0 93 d6 03 	sts	0x03D6, r28
    2060:	df 91       	pop	r29
    2062:	cf 91       	pop	r28
    2064:	08 95       	ret

00002066 <fdevopen>:
    2066:	0f 93       	push	r16
    2068:	1f 93       	push	r17
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	ec 01       	movw	r28, r24
    2070:	8b 01       	movw	r16, r22
    2072:	00 97       	sbiw	r24, 0x00	; 0
    2074:	31 f4       	brne	.+12     	; 0x2082 <fdevopen+0x1c>
    2076:	61 15       	cp	r22, r1
    2078:	71 05       	cpc	r23, r1
    207a:	19 f4       	brne	.+6      	; 0x2082 <fdevopen+0x1c>
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	38 c0       	rjmp	.+112    	; 0x20f2 <fdevopen+0x8c>
    2082:	6e e0       	ldi	r22, 0x0E	; 14
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0e 94 05 13 	call	0x260a	; 0x260a <calloc>
    208e:	fc 01       	movw	r30, r24
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	a1 f3       	breq	.-24     	; 0x207c <fdevopen+0x16>
    2094:	80 e8       	ldi	r24, 0x80	; 128
    2096:	83 83       	std	Z+3, r24	; 0x03
    2098:	01 15       	cp	r16, r1
    209a:	11 05       	cpc	r17, r1
    209c:	71 f0       	breq	.+28     	; 0x20ba <fdevopen+0x54>
    209e:	13 87       	std	Z+11, r17	; 0x0b
    20a0:	02 87       	std	Z+10, r16	; 0x0a
    20a2:	81 e8       	ldi	r24, 0x81	; 129
    20a4:	83 83       	std	Z+3, r24	; 0x03
    20a6:	80 91 da 03 	lds	r24, 0x03DA
    20aa:	90 91 db 03 	lds	r25, 0x03DB
    20ae:	89 2b       	or	r24, r25
    20b0:	21 f4       	brne	.+8      	; 0x20ba <fdevopen+0x54>
    20b2:	f0 93 db 03 	sts	0x03DB, r31
    20b6:	e0 93 da 03 	sts	0x03DA, r30
    20ba:	20 97       	sbiw	r28, 0x00	; 0
    20bc:	c9 f0       	breq	.+50     	; 0x20f0 <fdevopen+0x8a>
    20be:	d1 87       	std	Z+9, r29	; 0x09
    20c0:	c0 87       	std	Z+8, r28	; 0x08
    20c2:	83 81       	ldd	r24, Z+3	; 0x03
    20c4:	82 60       	ori	r24, 0x02	; 2
    20c6:	83 83       	std	Z+3, r24	; 0x03
    20c8:	80 91 dc 03 	lds	r24, 0x03DC
    20cc:	90 91 dd 03 	lds	r25, 0x03DD
    20d0:	89 2b       	or	r24, r25
    20d2:	71 f4       	brne	.+28     	; 0x20f0 <fdevopen+0x8a>
    20d4:	f0 93 dd 03 	sts	0x03DD, r31
    20d8:	e0 93 dc 03 	sts	0x03DC, r30
    20dc:	80 91 de 03 	lds	r24, 0x03DE
    20e0:	90 91 df 03 	lds	r25, 0x03DF
    20e4:	89 2b       	or	r24, r25
    20e6:	21 f4       	brne	.+8      	; 0x20f0 <fdevopen+0x8a>
    20e8:	f0 93 df 03 	sts	0x03DF, r31
    20ec:	e0 93 de 03 	sts	0x03DE, r30
    20f0:	cf 01       	movw	r24, r30
    20f2:	df 91       	pop	r29
    20f4:	cf 91       	pop	r28
    20f6:	1f 91       	pop	r17
    20f8:	0f 91       	pop	r16
    20fa:	08 95       	ret

000020fc <fprintf>:
    20fc:	a0 e0       	ldi	r26, 0x00	; 0
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e4 e8       	ldi	r30, 0x84	; 132
    2102:	f0 e1       	ldi	r31, 0x10	; 16
    2104:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__prologue_saves__+0x20>
    2108:	ae 01       	movw	r20, r28
    210a:	47 5f       	subi	r20, 0xF7	; 247
    210c:	5f 4f       	sbci	r21, 0xFF	; 255
    210e:	6f 81       	ldd	r22, Y+7	; 0x07
    2110:	78 85       	ldd	r23, Y+8	; 0x08
    2112:	8d 81       	ldd	r24, Y+5	; 0x05
    2114:	9e 81       	ldd	r25, Y+6	; 0x06
    2116:	0e 94 33 11 	call	0x2266	; 0x2266 <vfprintf>
    211a:	e2 e0       	ldi	r30, 0x02	; 2
    211c:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__epilogue_restores__+0x20>

00002120 <fputc>:
    2120:	0f 93       	push	r16
    2122:	1f 93       	push	r17
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	18 2f       	mov	r17, r24
    212a:	09 2f       	mov	r16, r25
    212c:	eb 01       	movw	r28, r22
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	81 fd       	sbrc	r24, 1
    2132:	03 c0       	rjmp	.+6      	; 0x213a <fputc+0x1a>
    2134:	8f ef       	ldi	r24, 0xFF	; 255
    2136:	9f ef       	ldi	r25, 0xFF	; 255
    2138:	20 c0       	rjmp	.+64     	; 0x217a <fputc+0x5a>
    213a:	82 ff       	sbrs	r24, 2
    213c:	10 c0       	rjmp	.+32     	; 0x215e <fputc+0x3e>
    213e:	4e 81       	ldd	r20, Y+6	; 0x06
    2140:	5f 81       	ldd	r21, Y+7	; 0x07
    2142:	2c 81       	ldd	r18, Y+4	; 0x04
    2144:	3d 81       	ldd	r19, Y+5	; 0x05
    2146:	42 17       	cp	r20, r18
    2148:	53 07       	cpc	r21, r19
    214a:	7c f4       	brge	.+30     	; 0x216a <fputc+0x4a>
    214c:	e8 81       	ld	r30, Y
    214e:	f9 81       	ldd	r31, Y+1	; 0x01
    2150:	9f 01       	movw	r18, r30
    2152:	2f 5f       	subi	r18, 0xFF	; 255
    2154:	3f 4f       	sbci	r19, 0xFF	; 255
    2156:	39 83       	std	Y+1, r19	; 0x01
    2158:	28 83       	st	Y, r18
    215a:	10 83       	st	Z, r17
    215c:	06 c0       	rjmp	.+12     	; 0x216a <fputc+0x4a>
    215e:	e8 85       	ldd	r30, Y+8	; 0x08
    2160:	f9 85       	ldd	r31, Y+9	; 0x09
    2162:	81 2f       	mov	r24, r17
    2164:	09 95       	icall
    2166:	89 2b       	or	r24, r25
    2168:	29 f7       	brne	.-54     	; 0x2134 <fputc+0x14>
    216a:	2e 81       	ldd	r18, Y+6	; 0x06
    216c:	3f 81       	ldd	r19, Y+7	; 0x07
    216e:	2f 5f       	subi	r18, 0xFF	; 255
    2170:	3f 4f       	sbci	r19, 0xFF	; 255
    2172:	3f 83       	std	Y+7, r19	; 0x07
    2174:	2e 83       	std	Y+6, r18	; 0x06
    2176:	81 2f       	mov	r24, r17
    2178:	90 2f       	mov	r25, r16
    217a:	df 91       	pop	r29
    217c:	cf 91       	pop	r28
    217e:	1f 91       	pop	r17
    2180:	0f 91       	pop	r16
    2182:	08 95       	ret

00002184 <fputs>:
    2184:	ef 92       	push	r14
    2186:	ff 92       	push	r15
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	8b 01       	movw	r16, r22
    2192:	db 01       	movw	r26, r22
    2194:	13 96       	adiw	r26, 0x03	; 3
    2196:	2c 91       	ld	r18, X
    2198:	21 ff       	sbrs	r18, 1
    219a:	16 c0       	rjmp	.+44     	; 0x21c8 <fputs+0x44>
    219c:	ec 01       	movw	r28, r24
    219e:	e1 2c       	mov	r14, r1
    21a0:	f1 2c       	mov	r15, r1
    21a2:	89 91       	ld	r24, Y+
    21a4:	88 23       	and	r24, r24
    21a6:	71 f0       	breq	.+28     	; 0x21c4 <fputs+0x40>
    21a8:	d8 01       	movw	r26, r16
    21aa:	18 96       	adiw	r26, 0x08	; 8
    21ac:	ed 91       	ld	r30, X+
    21ae:	fc 91       	ld	r31, X
    21b0:	19 97       	sbiw	r26, 0x09	; 9
    21b2:	b8 01       	movw	r22, r16
    21b4:	09 95       	icall
    21b6:	89 2b       	or	r24, r25
    21b8:	a1 f3       	breq	.-24     	; 0x21a2 <fputs+0x1e>
    21ba:	ee 24       	eor	r14, r14
    21bc:	ea 94       	dec	r14
    21be:	ff 24       	eor	r15, r15
    21c0:	fa 94       	dec	r15
    21c2:	ef cf       	rjmp	.-34     	; 0x21a2 <fputs+0x1e>
    21c4:	c7 01       	movw	r24, r14
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <fputs+0x48>
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	9f ef       	ldi	r25, 0xFF	; 255
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	e6 e0       	ldi	r30, 0x06	; 6
    21d2:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__epilogue_restores__+0x18>

000021d6 <printf>:
    21d6:	a0 e0       	ldi	r26, 0x00	; 0
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e1 ef       	ldi	r30, 0xF1	; 241
    21dc:	f0 e1       	ldi	r31, 0x10	; 16
    21de:	0c 94 ac 13 	jmp	0x2758	; 0x2758 <__prologue_saves__+0x20>
    21e2:	fe 01       	movw	r30, r28
    21e4:	35 96       	adiw	r30, 0x05	; 5
    21e6:	61 91       	ld	r22, Z+
    21e8:	71 91       	ld	r23, Z+
    21ea:	af 01       	movw	r20, r30
    21ec:	80 91 dc 03 	lds	r24, 0x03DC
    21f0:	90 91 dd 03 	lds	r25, 0x03DD
    21f4:	0e 94 33 11 	call	0x2266	; 0x2266 <vfprintf>
    21f8:	e2 e0       	ldi	r30, 0x02	; 2
    21fa:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__epilogue_restores__+0x20>

000021fe <putchar>:
    21fe:	60 91 dc 03 	lds	r22, 0x03DC
    2202:	70 91 dd 03 	lds	r23, 0x03DD
    2206:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    220a:	08 95       	ret

0000220c <puts>:
    220c:	0f 93       	push	r16
    220e:	1f 93       	push	r17
    2210:	cf 93       	push	r28
    2212:	df 93       	push	r29
    2214:	e0 91 dc 03 	lds	r30, 0x03DC
    2218:	f0 91 dd 03 	lds	r31, 0x03DD
    221c:	23 81       	ldd	r18, Z+3	; 0x03
    221e:	21 ff       	sbrs	r18, 1
    2220:	1b c0       	rjmp	.+54     	; 0x2258 <puts+0x4c>
    2222:	ec 01       	movw	r28, r24
    2224:	00 e0       	ldi	r16, 0x00	; 0
    2226:	10 e0       	ldi	r17, 0x00	; 0
    2228:	89 91       	ld	r24, Y+
    222a:	60 91 dc 03 	lds	r22, 0x03DC
    222e:	70 91 dd 03 	lds	r23, 0x03DD
    2232:	db 01       	movw	r26, r22
    2234:	18 96       	adiw	r26, 0x08	; 8
    2236:	ed 91       	ld	r30, X+
    2238:	fc 91       	ld	r31, X
    223a:	19 97       	sbiw	r26, 0x09	; 9
    223c:	88 23       	and	r24, r24
    223e:	31 f0       	breq	.+12     	; 0x224c <puts+0x40>
    2240:	09 95       	icall
    2242:	89 2b       	or	r24, r25
    2244:	89 f3       	breq	.-30     	; 0x2228 <puts+0x1c>
    2246:	0f ef       	ldi	r16, 0xFF	; 255
    2248:	1f ef       	ldi	r17, 0xFF	; 255
    224a:	ee cf       	rjmp	.-36     	; 0x2228 <puts+0x1c>
    224c:	8a e0       	ldi	r24, 0x0A	; 10
    224e:	09 95       	icall
    2250:	89 2b       	or	r24, r25
    2252:	11 f4       	brne	.+4      	; 0x2258 <puts+0x4c>
    2254:	c8 01       	movw	r24, r16
    2256:	02 c0       	rjmp	.+4      	; 0x225c <puts+0x50>
    2258:	8f ef       	ldi	r24, 0xFF	; 255
    225a:	9f ef       	ldi	r25, 0xFF	; 255
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	08 95       	ret

00002266 <vfprintf>:
    2266:	ac e0       	ldi	r26, 0x0C	; 12
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e9 e3       	ldi	r30, 0x39	; 57
    226c:	f1 e1       	ldi	r31, 0x11	; 17
    226e:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <__prologue_saves__>
    2272:	7c 01       	movw	r14, r24
    2274:	6b 01       	movw	r12, r22
    2276:	8a 01       	movw	r16, r20
    2278:	fc 01       	movw	r30, r24
    227a:	17 82       	std	Z+7, r1	; 0x07
    227c:	16 82       	std	Z+6, r1	; 0x06
    227e:	83 81       	ldd	r24, Z+3	; 0x03
    2280:	81 ff       	sbrs	r24, 1
    2282:	bd c1       	rjmp	.+890    	; 0x25fe <vfprintf+0x398>
    2284:	ce 01       	movw	r24, r28
    2286:	01 96       	adiw	r24, 0x01	; 1
    2288:	4c 01       	movw	r8, r24
    228a:	f7 01       	movw	r30, r14
    228c:	93 81       	ldd	r25, Z+3	; 0x03
    228e:	f6 01       	movw	r30, r12
    2290:	93 fd       	sbrc	r25, 3
    2292:	85 91       	lpm	r24, Z+
    2294:	93 ff       	sbrs	r25, 3
    2296:	81 91       	ld	r24, Z+
    2298:	6f 01       	movw	r12, r30
    229a:	88 23       	and	r24, r24
    229c:	09 f4       	brne	.+2      	; 0x22a0 <vfprintf+0x3a>
    229e:	ab c1       	rjmp	.+854    	; 0x25f6 <vfprintf+0x390>
    22a0:	85 32       	cpi	r24, 0x25	; 37
    22a2:	39 f4       	brne	.+14     	; 0x22b2 <vfprintf+0x4c>
    22a4:	93 fd       	sbrc	r25, 3
    22a6:	85 91       	lpm	r24, Z+
    22a8:	93 ff       	sbrs	r25, 3
    22aa:	81 91       	ld	r24, Z+
    22ac:	6f 01       	movw	r12, r30
    22ae:	85 32       	cpi	r24, 0x25	; 37
    22b0:	29 f4       	brne	.+10     	; 0x22bc <vfprintf+0x56>
    22b2:	b7 01       	movw	r22, r14
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    22ba:	e7 cf       	rjmp	.-50     	; 0x228a <vfprintf+0x24>
    22bc:	51 2c       	mov	r5, r1
    22be:	31 2c       	mov	r3, r1
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	20 32       	cpi	r18, 0x20	; 32
    22c4:	a0 f4       	brcc	.+40     	; 0x22ee <vfprintf+0x88>
    22c6:	8b 32       	cpi	r24, 0x2B	; 43
    22c8:	69 f0       	breq	.+26     	; 0x22e4 <vfprintf+0x7e>
    22ca:	30 f4       	brcc	.+12     	; 0x22d8 <vfprintf+0x72>
    22cc:	80 32       	cpi	r24, 0x20	; 32
    22ce:	59 f0       	breq	.+22     	; 0x22e6 <vfprintf+0x80>
    22d0:	83 32       	cpi	r24, 0x23	; 35
    22d2:	69 f4       	brne	.+26     	; 0x22ee <vfprintf+0x88>
    22d4:	20 61       	ori	r18, 0x10	; 16
    22d6:	2c c0       	rjmp	.+88     	; 0x2330 <vfprintf+0xca>
    22d8:	8d 32       	cpi	r24, 0x2D	; 45
    22da:	39 f0       	breq	.+14     	; 0x22ea <vfprintf+0x84>
    22dc:	80 33       	cpi	r24, 0x30	; 48
    22de:	39 f4       	brne	.+14     	; 0x22ee <vfprintf+0x88>
    22e0:	21 60       	ori	r18, 0x01	; 1
    22e2:	26 c0       	rjmp	.+76     	; 0x2330 <vfprintf+0xca>
    22e4:	22 60       	ori	r18, 0x02	; 2
    22e6:	24 60       	ori	r18, 0x04	; 4
    22e8:	23 c0       	rjmp	.+70     	; 0x2330 <vfprintf+0xca>
    22ea:	28 60       	ori	r18, 0x08	; 8
    22ec:	21 c0       	rjmp	.+66     	; 0x2330 <vfprintf+0xca>
    22ee:	27 fd       	sbrc	r18, 7
    22f0:	27 c0       	rjmp	.+78     	; 0x2340 <vfprintf+0xda>
    22f2:	30 ed       	ldi	r19, 0xD0	; 208
    22f4:	38 0f       	add	r19, r24
    22f6:	3a 30       	cpi	r19, 0x0A	; 10
    22f8:	78 f4       	brcc	.+30     	; 0x2318 <vfprintf+0xb2>
    22fa:	26 ff       	sbrs	r18, 6
    22fc:	06 c0       	rjmp	.+12     	; 0x230a <vfprintf+0xa4>
    22fe:	fa e0       	ldi	r31, 0x0A	; 10
    2300:	5f 9e       	mul	r5, r31
    2302:	30 0d       	add	r19, r0
    2304:	11 24       	eor	r1, r1
    2306:	53 2e       	mov	r5, r19
    2308:	13 c0       	rjmp	.+38     	; 0x2330 <vfprintf+0xca>
    230a:	8a e0       	ldi	r24, 0x0A	; 10
    230c:	38 9e       	mul	r3, r24
    230e:	30 0d       	add	r19, r0
    2310:	11 24       	eor	r1, r1
    2312:	33 2e       	mov	r3, r19
    2314:	20 62       	ori	r18, 0x20	; 32
    2316:	0c c0       	rjmp	.+24     	; 0x2330 <vfprintf+0xca>
    2318:	8e 32       	cpi	r24, 0x2E	; 46
    231a:	21 f4       	brne	.+8      	; 0x2324 <vfprintf+0xbe>
    231c:	26 fd       	sbrc	r18, 6
    231e:	6b c1       	rjmp	.+726    	; 0x25f6 <vfprintf+0x390>
    2320:	20 64       	ori	r18, 0x40	; 64
    2322:	06 c0       	rjmp	.+12     	; 0x2330 <vfprintf+0xca>
    2324:	8c 36       	cpi	r24, 0x6C	; 108
    2326:	11 f4       	brne	.+4      	; 0x232c <vfprintf+0xc6>
    2328:	20 68       	ori	r18, 0x80	; 128
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <vfprintf+0xca>
    232c:	88 36       	cpi	r24, 0x68	; 104
    232e:	41 f4       	brne	.+16     	; 0x2340 <vfprintf+0xda>
    2330:	f6 01       	movw	r30, r12
    2332:	93 fd       	sbrc	r25, 3
    2334:	85 91       	lpm	r24, Z+
    2336:	93 ff       	sbrs	r25, 3
    2338:	81 91       	ld	r24, Z+
    233a:	6f 01       	movw	r12, r30
    233c:	81 11       	cpse	r24, r1
    233e:	c1 cf       	rjmp	.-126    	; 0x22c2 <vfprintf+0x5c>
    2340:	98 2f       	mov	r25, r24
    2342:	9f 7d       	andi	r25, 0xDF	; 223
    2344:	95 54       	subi	r25, 0x45	; 69
    2346:	93 30       	cpi	r25, 0x03	; 3
    2348:	28 f4       	brcc	.+10     	; 0x2354 <vfprintf+0xee>
    234a:	0c 5f       	subi	r16, 0xFC	; 252
    234c:	1f 4f       	sbci	r17, 0xFF	; 255
    234e:	ff e3       	ldi	r31, 0x3F	; 63
    2350:	f9 83       	std	Y+1, r31	; 0x01
    2352:	0d c0       	rjmp	.+26     	; 0x236e <vfprintf+0x108>
    2354:	83 36       	cpi	r24, 0x63	; 99
    2356:	31 f0       	breq	.+12     	; 0x2364 <vfprintf+0xfe>
    2358:	83 37       	cpi	r24, 0x73	; 115
    235a:	71 f0       	breq	.+28     	; 0x2378 <vfprintf+0x112>
    235c:	83 35       	cpi	r24, 0x53	; 83
    235e:	09 f0       	breq	.+2      	; 0x2362 <vfprintf+0xfc>
    2360:	5b c0       	rjmp	.+182    	; 0x2418 <vfprintf+0x1b2>
    2362:	22 c0       	rjmp	.+68     	; 0x23a8 <vfprintf+0x142>
    2364:	f8 01       	movw	r30, r16
    2366:	80 81       	ld	r24, Z
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	0e 5f       	subi	r16, 0xFE	; 254
    236c:	1f 4f       	sbci	r17, 0xFF	; 255
    236e:	44 24       	eor	r4, r4
    2370:	43 94       	inc	r4
    2372:	51 2c       	mov	r5, r1
    2374:	54 01       	movw	r10, r8
    2376:	15 c0       	rjmp	.+42     	; 0x23a2 <vfprintf+0x13c>
    2378:	38 01       	movw	r6, r16
    237a:	f2 e0       	ldi	r31, 0x02	; 2
    237c:	6f 0e       	add	r6, r31
    237e:	71 1c       	adc	r7, r1
    2380:	f8 01       	movw	r30, r16
    2382:	a0 80       	ld	r10, Z
    2384:	b1 80       	ldd	r11, Z+1	; 0x01
    2386:	26 ff       	sbrs	r18, 6
    2388:	03 c0       	rjmp	.+6      	; 0x2390 <vfprintf+0x12a>
    238a:	65 2d       	mov	r22, r5
    238c:	70 e0       	ldi	r23, 0x00	; 0
    238e:	02 c0       	rjmp	.+4      	; 0x2394 <vfprintf+0x12e>
    2390:	6f ef       	ldi	r22, 0xFF	; 255
    2392:	7f ef       	ldi	r23, 0xFF	; 255
    2394:	c5 01       	movw	r24, r10
    2396:	2c 87       	std	Y+12, r18	; 0x0c
    2398:	0e 94 33 13 	call	0x2666	; 0x2666 <strnlen>
    239c:	2c 01       	movw	r4, r24
    239e:	83 01       	movw	r16, r6
    23a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    23a2:	2f 77       	andi	r18, 0x7F	; 127
    23a4:	22 2e       	mov	r2, r18
    23a6:	17 c0       	rjmp	.+46     	; 0x23d6 <vfprintf+0x170>
    23a8:	38 01       	movw	r6, r16
    23aa:	f2 e0       	ldi	r31, 0x02	; 2
    23ac:	6f 0e       	add	r6, r31
    23ae:	71 1c       	adc	r7, r1
    23b0:	f8 01       	movw	r30, r16
    23b2:	a0 80       	ld	r10, Z
    23b4:	b1 80       	ldd	r11, Z+1	; 0x01
    23b6:	26 ff       	sbrs	r18, 6
    23b8:	03 c0       	rjmp	.+6      	; 0x23c0 <vfprintf+0x15a>
    23ba:	65 2d       	mov	r22, r5
    23bc:	70 e0       	ldi	r23, 0x00	; 0
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <vfprintf+0x15e>
    23c0:	6f ef       	ldi	r22, 0xFF	; 255
    23c2:	7f ef       	ldi	r23, 0xFF	; 255
    23c4:	c5 01       	movw	r24, r10
    23c6:	2c 87       	std	Y+12, r18	; 0x0c
    23c8:	0e 94 21 13 	call	0x2642	; 0x2642 <strnlen_P>
    23cc:	2c 01       	movw	r4, r24
    23ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    23d0:	20 68       	ori	r18, 0x80	; 128
    23d2:	22 2e       	mov	r2, r18
    23d4:	83 01       	movw	r16, r6
    23d6:	23 fc       	sbrc	r2, 3
    23d8:	1b c0       	rjmp	.+54     	; 0x2410 <vfprintf+0x1aa>
    23da:	83 2d       	mov	r24, r3
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	48 16       	cp	r4, r24
    23e0:	59 06       	cpc	r5, r25
    23e2:	b0 f4       	brcc	.+44     	; 0x2410 <vfprintf+0x1aa>
    23e4:	b7 01       	movw	r22, r14
    23e6:	80 e2       	ldi	r24, 0x20	; 32
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    23ee:	3a 94       	dec	r3
    23f0:	f4 cf       	rjmp	.-24     	; 0x23da <vfprintf+0x174>
    23f2:	f5 01       	movw	r30, r10
    23f4:	27 fc       	sbrc	r2, 7
    23f6:	85 91       	lpm	r24, Z+
    23f8:	27 fe       	sbrs	r2, 7
    23fa:	81 91       	ld	r24, Z+
    23fc:	5f 01       	movw	r10, r30
    23fe:	b7 01       	movw	r22, r14
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    2406:	31 10       	cpse	r3, r1
    2408:	3a 94       	dec	r3
    240a:	f1 e0       	ldi	r31, 0x01	; 1
    240c:	4f 1a       	sub	r4, r31
    240e:	51 08       	sbc	r5, r1
    2410:	41 14       	cp	r4, r1
    2412:	51 04       	cpc	r5, r1
    2414:	71 f7       	brne	.-36     	; 0x23f2 <vfprintf+0x18c>
    2416:	e5 c0       	rjmp	.+458    	; 0x25e2 <vfprintf+0x37c>
    2418:	84 36       	cpi	r24, 0x64	; 100
    241a:	11 f0       	breq	.+4      	; 0x2420 <vfprintf+0x1ba>
    241c:	89 36       	cpi	r24, 0x69	; 105
    241e:	39 f5       	brne	.+78     	; 0x246e <vfprintf+0x208>
    2420:	f8 01       	movw	r30, r16
    2422:	27 ff       	sbrs	r18, 7
    2424:	07 c0       	rjmp	.+14     	; 0x2434 <vfprintf+0x1ce>
    2426:	60 81       	ld	r22, Z
    2428:	71 81       	ldd	r23, Z+1	; 0x01
    242a:	82 81       	ldd	r24, Z+2	; 0x02
    242c:	93 81       	ldd	r25, Z+3	; 0x03
    242e:	0c 5f       	subi	r16, 0xFC	; 252
    2430:	1f 4f       	sbci	r17, 0xFF	; 255
    2432:	08 c0       	rjmp	.+16     	; 0x2444 <vfprintf+0x1de>
    2434:	60 81       	ld	r22, Z
    2436:	71 81       	ldd	r23, Z+1	; 0x01
    2438:	88 27       	eor	r24, r24
    243a:	77 fd       	sbrc	r23, 7
    243c:	80 95       	com	r24
    243e:	98 2f       	mov	r25, r24
    2440:	0e 5f       	subi	r16, 0xFE	; 254
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	2f 76       	andi	r18, 0x6F	; 111
    2446:	b2 2e       	mov	r11, r18
    2448:	97 ff       	sbrs	r25, 7
    244a:	09 c0       	rjmp	.+18     	; 0x245e <vfprintf+0x1f8>
    244c:	90 95       	com	r25
    244e:	80 95       	com	r24
    2450:	70 95       	com	r23
    2452:	61 95       	neg	r22
    2454:	7f 4f       	sbci	r23, 0xFF	; 255
    2456:	8f 4f       	sbci	r24, 0xFF	; 255
    2458:	9f 4f       	sbci	r25, 0xFF	; 255
    245a:	20 68       	ori	r18, 0x80	; 128
    245c:	b2 2e       	mov	r11, r18
    245e:	2a e0       	ldi	r18, 0x0A	; 10
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	a4 01       	movw	r20, r8
    2464:	0e 94 3e 13 	call	0x267c	; 0x267c <__ultoa_invert>
    2468:	a8 2e       	mov	r10, r24
    246a:	a8 18       	sub	r10, r8
    246c:	44 c0       	rjmp	.+136    	; 0x24f6 <vfprintf+0x290>
    246e:	85 37       	cpi	r24, 0x75	; 117
    2470:	29 f4       	brne	.+10     	; 0x247c <vfprintf+0x216>
    2472:	2f 7e       	andi	r18, 0xEF	; 239
    2474:	b2 2e       	mov	r11, r18
    2476:	2a e0       	ldi	r18, 0x0A	; 10
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	25 c0       	rjmp	.+74     	; 0x24c6 <vfprintf+0x260>
    247c:	f2 2f       	mov	r31, r18
    247e:	f9 7f       	andi	r31, 0xF9	; 249
    2480:	bf 2e       	mov	r11, r31
    2482:	8f 36       	cpi	r24, 0x6F	; 111
    2484:	c1 f0       	breq	.+48     	; 0x24b6 <vfprintf+0x250>
    2486:	18 f4       	brcc	.+6      	; 0x248e <vfprintf+0x228>
    2488:	88 35       	cpi	r24, 0x58	; 88
    248a:	79 f0       	breq	.+30     	; 0x24aa <vfprintf+0x244>
    248c:	b4 c0       	rjmp	.+360    	; 0x25f6 <vfprintf+0x390>
    248e:	80 37       	cpi	r24, 0x70	; 112
    2490:	19 f0       	breq	.+6      	; 0x2498 <vfprintf+0x232>
    2492:	88 37       	cpi	r24, 0x78	; 120
    2494:	21 f0       	breq	.+8      	; 0x249e <vfprintf+0x238>
    2496:	af c0       	rjmp	.+350    	; 0x25f6 <vfprintf+0x390>
    2498:	2f 2f       	mov	r18, r31
    249a:	20 61       	ori	r18, 0x10	; 16
    249c:	b2 2e       	mov	r11, r18
    249e:	b4 fe       	sbrs	r11, 4
    24a0:	0d c0       	rjmp	.+26     	; 0x24bc <vfprintf+0x256>
    24a2:	8b 2d       	mov	r24, r11
    24a4:	84 60       	ori	r24, 0x04	; 4
    24a6:	b8 2e       	mov	r11, r24
    24a8:	09 c0       	rjmp	.+18     	; 0x24bc <vfprintf+0x256>
    24aa:	24 ff       	sbrs	r18, 4
    24ac:	0a c0       	rjmp	.+20     	; 0x24c2 <vfprintf+0x25c>
    24ae:	9f 2f       	mov	r25, r31
    24b0:	96 60       	ori	r25, 0x06	; 6
    24b2:	b9 2e       	mov	r11, r25
    24b4:	06 c0       	rjmp	.+12     	; 0x24c2 <vfprintf+0x25c>
    24b6:	28 e0       	ldi	r18, 0x08	; 8
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	05 c0       	rjmp	.+10     	; 0x24c6 <vfprintf+0x260>
    24bc:	20 e1       	ldi	r18, 0x10	; 16
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <vfprintf+0x260>
    24c2:	20 e1       	ldi	r18, 0x10	; 16
    24c4:	32 e0       	ldi	r19, 0x02	; 2
    24c6:	f8 01       	movw	r30, r16
    24c8:	b7 fe       	sbrs	r11, 7
    24ca:	07 c0       	rjmp	.+14     	; 0x24da <vfprintf+0x274>
    24cc:	60 81       	ld	r22, Z
    24ce:	71 81       	ldd	r23, Z+1	; 0x01
    24d0:	82 81       	ldd	r24, Z+2	; 0x02
    24d2:	93 81       	ldd	r25, Z+3	; 0x03
    24d4:	0c 5f       	subi	r16, 0xFC	; 252
    24d6:	1f 4f       	sbci	r17, 0xFF	; 255
    24d8:	06 c0       	rjmp	.+12     	; 0x24e6 <vfprintf+0x280>
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	0e 5f       	subi	r16, 0xFE	; 254
    24e4:	1f 4f       	sbci	r17, 0xFF	; 255
    24e6:	a4 01       	movw	r20, r8
    24e8:	0e 94 3e 13 	call	0x267c	; 0x267c <__ultoa_invert>
    24ec:	a8 2e       	mov	r10, r24
    24ee:	a8 18       	sub	r10, r8
    24f0:	fb 2d       	mov	r31, r11
    24f2:	ff 77       	andi	r31, 0x7F	; 127
    24f4:	bf 2e       	mov	r11, r31
    24f6:	b6 fe       	sbrs	r11, 6
    24f8:	0b c0       	rjmp	.+22     	; 0x2510 <vfprintf+0x2aa>
    24fa:	2b 2d       	mov	r18, r11
    24fc:	2e 7f       	andi	r18, 0xFE	; 254
    24fe:	a5 14       	cp	r10, r5
    2500:	50 f4       	brcc	.+20     	; 0x2516 <vfprintf+0x2b0>
    2502:	b4 fe       	sbrs	r11, 4
    2504:	0a c0       	rjmp	.+20     	; 0x251a <vfprintf+0x2b4>
    2506:	b2 fc       	sbrc	r11, 2
    2508:	08 c0       	rjmp	.+16     	; 0x251a <vfprintf+0x2b4>
    250a:	2b 2d       	mov	r18, r11
    250c:	2e 7e       	andi	r18, 0xEE	; 238
    250e:	05 c0       	rjmp	.+10     	; 0x251a <vfprintf+0x2b4>
    2510:	7a 2c       	mov	r7, r10
    2512:	2b 2d       	mov	r18, r11
    2514:	03 c0       	rjmp	.+6      	; 0x251c <vfprintf+0x2b6>
    2516:	7a 2c       	mov	r7, r10
    2518:	01 c0       	rjmp	.+2      	; 0x251c <vfprintf+0x2b6>
    251a:	75 2c       	mov	r7, r5
    251c:	24 ff       	sbrs	r18, 4
    251e:	0d c0       	rjmp	.+26     	; 0x253a <vfprintf+0x2d4>
    2520:	fe 01       	movw	r30, r28
    2522:	ea 0d       	add	r30, r10
    2524:	f1 1d       	adc	r31, r1
    2526:	80 81       	ld	r24, Z
    2528:	80 33       	cpi	r24, 0x30	; 48
    252a:	11 f4       	brne	.+4      	; 0x2530 <vfprintf+0x2ca>
    252c:	29 7e       	andi	r18, 0xE9	; 233
    252e:	09 c0       	rjmp	.+18     	; 0x2542 <vfprintf+0x2dc>
    2530:	22 ff       	sbrs	r18, 2
    2532:	06 c0       	rjmp	.+12     	; 0x2540 <vfprintf+0x2da>
    2534:	73 94       	inc	r7
    2536:	73 94       	inc	r7
    2538:	04 c0       	rjmp	.+8      	; 0x2542 <vfprintf+0x2dc>
    253a:	82 2f       	mov	r24, r18
    253c:	86 78       	andi	r24, 0x86	; 134
    253e:	09 f0       	breq	.+2      	; 0x2542 <vfprintf+0x2dc>
    2540:	73 94       	inc	r7
    2542:	23 fd       	sbrc	r18, 3
    2544:	13 c0       	rjmp	.+38     	; 0x256c <vfprintf+0x306>
    2546:	20 ff       	sbrs	r18, 0
    2548:	06 c0       	rjmp	.+12     	; 0x2556 <vfprintf+0x2f0>
    254a:	5a 2c       	mov	r5, r10
    254c:	73 14       	cp	r7, r3
    254e:	18 f4       	brcc	.+6      	; 0x2556 <vfprintf+0x2f0>
    2550:	53 0c       	add	r5, r3
    2552:	57 18       	sub	r5, r7
    2554:	73 2c       	mov	r7, r3
    2556:	73 14       	cp	r7, r3
    2558:	68 f4       	brcc	.+26     	; 0x2574 <vfprintf+0x30e>
    255a:	b7 01       	movw	r22, r14
    255c:	80 e2       	ldi	r24, 0x20	; 32
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	2c 87       	std	Y+12, r18	; 0x0c
    2562:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    2566:	73 94       	inc	r7
    2568:	2c 85       	ldd	r18, Y+12	; 0x0c
    256a:	f5 cf       	rjmp	.-22     	; 0x2556 <vfprintf+0x2f0>
    256c:	73 14       	cp	r7, r3
    256e:	10 f4       	brcc	.+4      	; 0x2574 <vfprintf+0x30e>
    2570:	37 18       	sub	r3, r7
    2572:	01 c0       	rjmp	.+2      	; 0x2576 <vfprintf+0x310>
    2574:	31 2c       	mov	r3, r1
    2576:	24 ff       	sbrs	r18, 4
    2578:	12 c0       	rjmp	.+36     	; 0x259e <vfprintf+0x338>
    257a:	b7 01       	movw	r22, r14
    257c:	80 e3       	ldi	r24, 0x30	; 48
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	2c 87       	std	Y+12, r18	; 0x0c
    2582:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    2586:	2c 85       	ldd	r18, Y+12	; 0x0c
    2588:	22 ff       	sbrs	r18, 2
    258a:	17 c0       	rjmp	.+46     	; 0x25ba <vfprintf+0x354>
    258c:	21 ff       	sbrs	r18, 1
    258e:	03 c0       	rjmp	.+6      	; 0x2596 <vfprintf+0x330>
    2590:	88 e5       	ldi	r24, 0x58	; 88
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	02 c0       	rjmp	.+4      	; 0x259a <vfprintf+0x334>
    2596:	88 e7       	ldi	r24, 0x78	; 120
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	b7 01       	movw	r22, r14
    259c:	0c c0       	rjmp	.+24     	; 0x25b6 <vfprintf+0x350>
    259e:	82 2f       	mov	r24, r18
    25a0:	86 78       	andi	r24, 0x86	; 134
    25a2:	59 f0       	breq	.+22     	; 0x25ba <vfprintf+0x354>
    25a4:	21 fd       	sbrc	r18, 1
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <vfprintf+0x346>
    25a8:	80 e2       	ldi	r24, 0x20	; 32
    25aa:	01 c0       	rjmp	.+2      	; 0x25ae <vfprintf+0x348>
    25ac:	8b e2       	ldi	r24, 0x2B	; 43
    25ae:	27 fd       	sbrc	r18, 7
    25b0:	8d e2       	ldi	r24, 0x2D	; 45
    25b2:	b7 01       	movw	r22, r14
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    25ba:	a5 14       	cp	r10, r5
    25bc:	38 f4       	brcc	.+14     	; 0x25cc <vfprintf+0x366>
    25be:	b7 01       	movw	r22, r14
    25c0:	80 e3       	ldi	r24, 0x30	; 48
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    25c8:	5a 94       	dec	r5
    25ca:	f7 cf       	rjmp	.-18     	; 0x25ba <vfprintf+0x354>
    25cc:	aa 94       	dec	r10
    25ce:	f4 01       	movw	r30, r8
    25d0:	ea 0d       	add	r30, r10
    25d2:	f1 1d       	adc	r31, r1
    25d4:	80 81       	ld	r24, Z
    25d6:	b7 01       	movw	r22, r14
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    25de:	a1 10       	cpse	r10, r1
    25e0:	f5 cf       	rjmp	.-22     	; 0x25cc <vfprintf+0x366>
    25e2:	33 20       	and	r3, r3
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <vfprintf+0x382>
    25e6:	51 ce       	rjmp	.-862    	; 0x228a <vfprintf+0x24>
    25e8:	b7 01       	movw	r22, r14
    25ea:	80 e2       	ldi	r24, 0x20	; 32
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	0e 94 90 10 	call	0x2120	; 0x2120 <fputc>
    25f2:	3a 94       	dec	r3
    25f4:	f6 cf       	rjmp	.-20     	; 0x25e2 <vfprintf+0x37c>
    25f6:	f7 01       	movw	r30, r14
    25f8:	86 81       	ldd	r24, Z+6	; 0x06
    25fa:	97 81       	ldd	r25, Z+7	; 0x07
    25fc:	02 c0       	rjmp	.+4      	; 0x2602 <vfprintf+0x39c>
    25fe:	8f ef       	ldi	r24, 0xFF	; 255
    2600:	9f ef       	ldi	r25, 0xFF	; 255
    2602:	2c 96       	adiw	r28, 0x0c	; 12
    2604:	e2 e1       	ldi	r30, 0x12	; 18
    2606:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__epilogue_restores__>

0000260a <calloc>:
    260a:	0f 93       	push	r16
    260c:	1f 93       	push	r17
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	86 9f       	mul	r24, r22
    2614:	80 01       	movw	r16, r0
    2616:	87 9f       	mul	r24, r23
    2618:	10 0d       	add	r17, r0
    261a:	96 9f       	mul	r25, r22
    261c:	10 0d       	add	r17, r0
    261e:	11 24       	eor	r1, r1
    2620:	c8 01       	movw	r24, r16
    2622:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <malloc>
    2626:	ec 01       	movw	r28, r24
    2628:	00 97       	sbiw	r24, 0x00	; 0
    262a:	29 f0       	breq	.+10     	; 0x2636 <calloc+0x2c>
    262c:	a8 01       	movw	r20, r16
    262e:	60 e0       	ldi	r22, 0x00	; 0
    2630:	70 e0       	ldi	r23, 0x00	; 0
    2632:	0e 94 2c 13 	call	0x2658	; 0x2658 <memset>
    2636:	ce 01       	movw	r24, r28
    2638:	df 91       	pop	r29
    263a:	cf 91       	pop	r28
    263c:	1f 91       	pop	r17
    263e:	0f 91       	pop	r16
    2640:	08 95       	ret

00002642 <strnlen_P>:
    2642:	fc 01       	movw	r30, r24
    2644:	05 90       	lpm	r0, Z+
    2646:	61 50       	subi	r22, 0x01	; 1
    2648:	70 40       	sbci	r23, 0x00	; 0
    264a:	01 10       	cpse	r0, r1
    264c:	d8 f7       	brcc	.-10     	; 0x2644 <strnlen_P+0x2>
    264e:	80 95       	com	r24
    2650:	90 95       	com	r25
    2652:	8e 0f       	add	r24, r30
    2654:	9f 1f       	adc	r25, r31
    2656:	08 95       	ret

00002658 <memset>:
    2658:	dc 01       	movw	r26, r24
    265a:	01 c0       	rjmp	.+2      	; 0x265e <memset+0x6>
    265c:	6d 93       	st	X+, r22
    265e:	41 50       	subi	r20, 0x01	; 1
    2660:	50 40       	sbci	r21, 0x00	; 0
    2662:	e0 f7       	brcc	.-8      	; 0x265c <memset+0x4>
    2664:	08 95       	ret

00002666 <strnlen>:
    2666:	fc 01       	movw	r30, r24
    2668:	61 50       	subi	r22, 0x01	; 1
    266a:	70 40       	sbci	r23, 0x00	; 0
    266c:	01 90       	ld	r0, Z+
    266e:	01 10       	cpse	r0, r1
    2670:	d8 f7       	brcc	.-10     	; 0x2668 <strnlen+0x2>
    2672:	80 95       	com	r24
    2674:	90 95       	com	r25
    2676:	8e 0f       	add	r24, r30
    2678:	9f 1f       	adc	r25, r31
    267a:	08 95       	ret

0000267c <__ultoa_invert>:
    267c:	fa 01       	movw	r30, r20
    267e:	aa 27       	eor	r26, r26
    2680:	28 30       	cpi	r18, 0x08	; 8
    2682:	51 f1       	breq	.+84     	; 0x26d8 <__ultoa_invert+0x5c>
    2684:	20 31       	cpi	r18, 0x10	; 16
    2686:	81 f1       	breq	.+96     	; 0x26e8 <__ultoa_invert+0x6c>
    2688:	e8 94       	clt
    268a:	6f 93       	push	r22
    268c:	6e 7f       	andi	r22, 0xFE	; 254
    268e:	6e 5f       	subi	r22, 0xFE	; 254
    2690:	7f 4f       	sbci	r23, 0xFF	; 255
    2692:	8f 4f       	sbci	r24, 0xFF	; 255
    2694:	9f 4f       	sbci	r25, 0xFF	; 255
    2696:	af 4f       	sbci	r26, 0xFF	; 255
    2698:	b1 e0       	ldi	r27, 0x01	; 1
    269a:	3e d0       	rcall	.+124    	; 0x2718 <__ultoa_invert+0x9c>
    269c:	b4 e0       	ldi	r27, 0x04	; 4
    269e:	3c d0       	rcall	.+120    	; 0x2718 <__ultoa_invert+0x9c>
    26a0:	67 0f       	add	r22, r23
    26a2:	78 1f       	adc	r23, r24
    26a4:	89 1f       	adc	r24, r25
    26a6:	9a 1f       	adc	r25, r26
    26a8:	a1 1d       	adc	r26, r1
    26aa:	68 0f       	add	r22, r24
    26ac:	79 1f       	adc	r23, r25
    26ae:	8a 1f       	adc	r24, r26
    26b0:	91 1d       	adc	r25, r1
    26b2:	a1 1d       	adc	r26, r1
    26b4:	6a 0f       	add	r22, r26
    26b6:	71 1d       	adc	r23, r1
    26b8:	81 1d       	adc	r24, r1
    26ba:	91 1d       	adc	r25, r1
    26bc:	a1 1d       	adc	r26, r1
    26be:	20 d0       	rcall	.+64     	; 0x2700 <__ultoa_invert+0x84>
    26c0:	09 f4       	brne	.+2      	; 0x26c4 <__ultoa_invert+0x48>
    26c2:	68 94       	set
    26c4:	3f 91       	pop	r19
    26c6:	2a e0       	ldi	r18, 0x0A	; 10
    26c8:	26 9f       	mul	r18, r22
    26ca:	11 24       	eor	r1, r1
    26cc:	30 19       	sub	r19, r0
    26ce:	30 5d       	subi	r19, 0xD0	; 208
    26d0:	31 93       	st	Z+, r19
    26d2:	de f6       	brtc	.-74     	; 0x268a <__ultoa_invert+0xe>
    26d4:	cf 01       	movw	r24, r30
    26d6:	08 95       	ret
    26d8:	46 2f       	mov	r20, r22
    26da:	47 70       	andi	r20, 0x07	; 7
    26dc:	40 5d       	subi	r20, 0xD0	; 208
    26de:	41 93       	st	Z+, r20
    26e0:	b3 e0       	ldi	r27, 0x03	; 3
    26e2:	0f d0       	rcall	.+30     	; 0x2702 <__ultoa_invert+0x86>
    26e4:	c9 f7       	brne	.-14     	; 0x26d8 <__ultoa_invert+0x5c>
    26e6:	f6 cf       	rjmp	.-20     	; 0x26d4 <__ultoa_invert+0x58>
    26e8:	46 2f       	mov	r20, r22
    26ea:	4f 70       	andi	r20, 0x0F	; 15
    26ec:	40 5d       	subi	r20, 0xD0	; 208
    26ee:	4a 33       	cpi	r20, 0x3A	; 58
    26f0:	18 f0       	brcs	.+6      	; 0x26f8 <__ultoa_invert+0x7c>
    26f2:	49 5d       	subi	r20, 0xD9	; 217
    26f4:	31 fd       	sbrc	r19, 1
    26f6:	40 52       	subi	r20, 0x20	; 32
    26f8:	41 93       	st	Z+, r20
    26fa:	02 d0       	rcall	.+4      	; 0x2700 <__ultoa_invert+0x84>
    26fc:	a9 f7       	brne	.-22     	; 0x26e8 <__ultoa_invert+0x6c>
    26fe:	ea cf       	rjmp	.-44     	; 0x26d4 <__ultoa_invert+0x58>
    2700:	b4 e0       	ldi	r27, 0x04	; 4
    2702:	a6 95       	lsr	r26
    2704:	97 95       	ror	r25
    2706:	87 95       	ror	r24
    2708:	77 95       	ror	r23
    270a:	67 95       	ror	r22
    270c:	ba 95       	dec	r27
    270e:	c9 f7       	brne	.-14     	; 0x2702 <__ultoa_invert+0x86>
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	61 05       	cpc	r22, r1
    2714:	71 05       	cpc	r23, r1
    2716:	08 95       	ret
    2718:	9b 01       	movw	r18, r22
    271a:	ac 01       	movw	r20, r24
    271c:	0a 2e       	mov	r0, r26
    271e:	06 94       	lsr	r0
    2720:	57 95       	ror	r21
    2722:	47 95       	ror	r20
    2724:	37 95       	ror	r19
    2726:	27 95       	ror	r18
    2728:	ba 95       	dec	r27
    272a:	c9 f7       	brne	.-14     	; 0x271e <__ultoa_invert+0xa2>
    272c:	62 0f       	add	r22, r18
    272e:	73 1f       	adc	r23, r19
    2730:	84 1f       	adc	r24, r20
    2732:	95 1f       	adc	r25, r21
    2734:	a0 1d       	adc	r26, r0
    2736:	08 95       	ret

00002738 <__prologue_saves__>:
    2738:	2f 92       	push	r2
    273a:	3f 92       	push	r3
    273c:	4f 92       	push	r4
    273e:	5f 92       	push	r5
    2740:	6f 92       	push	r6
    2742:	7f 92       	push	r7
    2744:	8f 92       	push	r8
    2746:	9f 92       	push	r9
    2748:	af 92       	push	r10
    274a:	bf 92       	push	r11
    274c:	cf 92       	push	r12
    274e:	df 92       	push	r13
    2750:	ef 92       	push	r14
    2752:	ff 92       	push	r15
    2754:	0f 93       	push	r16
    2756:	1f 93       	push	r17
    2758:	cf 93       	push	r28
    275a:	df 93       	push	r29
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	ca 1b       	sub	r28, r26
    2762:	db 0b       	sbc	r29, r27
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	f8 94       	cli
    2768:	de bf       	out	0x3e, r29	; 62
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	cd bf       	out	0x3d, r28	; 61
    276e:	09 94       	ijmp

00002770 <__epilogue_restores__>:
    2770:	2a 88       	ldd	r2, Y+18	; 0x12
    2772:	39 88       	ldd	r3, Y+17	; 0x11
    2774:	48 88       	ldd	r4, Y+16	; 0x10
    2776:	5f 84       	ldd	r5, Y+15	; 0x0f
    2778:	6e 84       	ldd	r6, Y+14	; 0x0e
    277a:	7d 84       	ldd	r7, Y+13	; 0x0d
    277c:	8c 84       	ldd	r8, Y+12	; 0x0c
    277e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2780:	aa 84       	ldd	r10, Y+10	; 0x0a
    2782:	b9 84       	ldd	r11, Y+9	; 0x09
    2784:	c8 84       	ldd	r12, Y+8	; 0x08
    2786:	df 80       	ldd	r13, Y+7	; 0x07
    2788:	ee 80       	ldd	r14, Y+6	; 0x06
    278a:	fd 80       	ldd	r15, Y+5	; 0x05
    278c:	0c 81       	ldd	r16, Y+4	; 0x04
    278e:	1b 81       	ldd	r17, Y+3	; 0x03
    2790:	aa 81       	ldd	r26, Y+2	; 0x02
    2792:	b9 81       	ldd	r27, Y+1	; 0x01
    2794:	ce 0f       	add	r28, r30
    2796:	d1 1d       	adc	r29, r1
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	ed 01       	movw	r28, r26
    27a4:	08 95       	ret

000027a6 <_exit>:
    27a6:	f8 94       	cli

000027a8 <__stop_program>:
    27a8:	ff cf       	rjmp	.-2      	; 0x27a8 <__stop_program>
