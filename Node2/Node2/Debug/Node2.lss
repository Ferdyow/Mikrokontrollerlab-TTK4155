
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e8  00800200  00001bfe  00001c92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  008004e8  008004e8  00001f7a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f7a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003b0  00000000  00000000  00001fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d45  00000000  00000000  00002386  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001501  00000000  00000000  000050cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003cb1  00000000  00000000  000065cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000924  00000000  00000000  0000a280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001312d  00000000  00000000  0000aba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001800  00000000  00000000  0001dcd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e0  00000000  00000000  0001f4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000504c  00000000  00000000  0001f7b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	0b c1       	rjmp	.+534    	; 0x230 <__vector_6>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d0 c5       	rjmp	.+2976   	; 0xc3e <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	74 c1       	rjmp	.+744    	; 0x392 <__vector_42>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b3 c4       	rjmp	.+2406   	; 0xa24 <__vector_47>
      be:	00 00       	nop
      c0:	d5 c4       	rjmp	.+2474   	; 0xa6c <__vector_48>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3a 06       	cpc	r3, r26
      e6:	8c 06       	cpc	r8, r28
      e8:	8c 06       	cpc	r8, r28
      ea:	8c 06       	cpc	r8, r28
      ec:	8c 06       	cpc	r8, r28
      ee:	8c 06       	cpc	r8, r28
      f0:	8c 06       	cpc	r8, r28
      f2:	8c 06       	cpc	r8, r28
      f4:	3a 06       	cpc	r3, r26
      f6:	8c 06       	cpc	r8, r28
      f8:	8c 06       	cpc	r8, r28
      fa:	8c 06       	cpc	r8, r28
      fc:	8c 06       	cpc	r8, r28
      fe:	8c 06       	cpc	r8, r28
     100:	8c 06       	cpc	r8, r28
     102:	8c 06       	cpc	r8, r28
     104:	3c 06       	cpc	r3, r28
     106:	8c 06       	cpc	r8, r28
     108:	8c 06       	cpc	r8, r28
     10a:	8c 06       	cpc	r8, r28
     10c:	8c 06       	cpc	r8, r28
     10e:	8c 06       	cpc	r8, r28
     110:	8c 06       	cpc	r8, r28
     112:	8c 06       	cpc	r8, r28
     114:	8c 06       	cpc	r8, r28
     116:	8c 06       	cpc	r8, r28
     118:	8c 06       	cpc	r8, r28
     11a:	8c 06       	cpc	r8, r28
     11c:	8c 06       	cpc	r8, r28
     11e:	8c 06       	cpc	r8, r28
     120:	8c 06       	cpc	r8, r28
     122:	8c 06       	cpc	r8, r28
     124:	3c 06       	cpc	r3, r28
     126:	8c 06       	cpc	r8, r28
     128:	8c 06       	cpc	r8, r28
     12a:	8c 06       	cpc	r8, r28
     12c:	8c 06       	cpc	r8, r28
     12e:	8c 06       	cpc	r8, r28
     130:	8c 06       	cpc	r8, r28
     132:	8c 06       	cpc	r8, r28
     134:	8c 06       	cpc	r8, r28
     136:	8c 06       	cpc	r8, r28
     138:	8c 06       	cpc	r8, r28
     13a:	8c 06       	cpc	r8, r28
     13c:	8c 06       	cpc	r8, r28
     13e:	8c 06       	cpc	r8, r28
     140:	8c 06       	cpc	r8, r28
     142:	8c 06       	cpc	r8, r28
     144:	88 06       	cpc	r8, r24
     146:	8c 06       	cpc	r8, r28
     148:	8c 06       	cpc	r8, r28
     14a:	8c 06       	cpc	r8, r28
     14c:	8c 06       	cpc	r8, r28
     14e:	8c 06       	cpc	r8, r28
     150:	8c 06       	cpc	r8, r28
     152:	8c 06       	cpc	r8, r28
     154:	65 06       	cpc	r6, r21
     156:	8c 06       	cpc	r8, r28
     158:	8c 06       	cpc	r8, r28
     15a:	8c 06       	cpc	r8, r28
     15c:	8c 06       	cpc	r8, r28
     15e:	8c 06       	cpc	r8, r28
     160:	8c 06       	cpc	r8, r28
     162:	8c 06       	cpc	r8, r28
     164:	8c 06       	cpc	r8, r28
     166:	8c 06       	cpc	r8, r28
     168:	8c 06       	cpc	r8, r28
     16a:	8c 06       	cpc	r8, r28
     16c:	8c 06       	cpc	r8, r28
     16e:	8c 06       	cpc	r8, r28
     170:	8c 06       	cpc	r8, r28
     172:	8c 06       	cpc	r8, r28
     174:	59 06       	cpc	r5, r25
     176:	8c 06       	cpc	r8, r28
     178:	8c 06       	cpc	r8, r28
     17a:	8c 06       	cpc	r8, r28
     17c:	8c 06       	cpc	r8, r28
     17e:	8c 06       	cpc	r8, r28
     180:	8c 06       	cpc	r8, r28
     182:	8c 06       	cpc	r8, r28
     184:	77 06       	cpc	r7, r23

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	14 e0       	ldi	r17, 0x04	; 4
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ee ef       	ldi	r30, 0xFE	; 254
     19e:	fb e1       	ldi	r31, 0x1B	; 27
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a8 3e       	cpi	r26, 0xE8	; 232
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	25 e0       	ldi	r18, 0x05	; 5
     1b2:	a8 ee       	ldi	r26, 0xE8	; 232
     1b4:	b4 e0       	ldi	r27, 0x04	; 4
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	ad 31       	cpi	r26, 0x1D	; 29
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	59 d6       	rcall	.+3250   	; 0xe74 <main>
     1c2:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <ADC_init>:
     1c8:	ea e7       	ldi	r30, 0x7A	; 122
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	80 83       	st	Z, r24
     1d2:	80 81       	ld	r24, Z
     1d4:	84 60       	ori	r24, 0x04	; 4
     1d6:	80 83       	st	Z, r24
     1d8:	80 81       	ld	r24, Z
     1da:	82 60       	ori	r24, 0x02	; 2
     1dc:	80 83       	st	Z, r24
     1de:	80 81       	ld	r24, Z
     1e0:	81 60       	ori	r24, 0x01	; 1
     1e2:	80 83       	st	Z, r24
     1e4:	ec e7       	ldi	r30, 0x7C	; 124
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	80 64       	ori	r24, 0x40	; 64
     1ec:	80 83       	st	Z, r24
     1ee:	08 95       	ret

000001f0 <CAN_int_vect>:
	}
	
	uint8_t buffer_states = (uint8_t)(1 << buffer_numb);
	MCP2515_request_to_send(buffer_states);
	
}
     1f0:	cf 93       	push	r28
     1f2:	f8 94       	cli
     1f4:	8c e2       	ldi	r24, 0x2C	; 44
     1f6:	53 d1       	rcall	.+678    	; 0x49e <MCP2515_read>
     1f8:	c8 2f       	mov	r28, r24
     1fa:	80 ff       	sbrs	r24, 0
     1fc:	0a c0       	rjmp	.+20     	; 0x212 <CAN_int_vect+0x22>
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	61 e0       	ldi	r22, 0x01	; 1
     202:	8c e2       	ldi	r24, 0x2C	; 44
     204:	68 d1       	rcall	.+720    	; 0x4d6 <MCP2515_bit_modify>
     206:	21 e0       	ldi	r18, 0x01	; 1
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	30 93 eb 04 	sts	0x04EB, r19
     20e:	20 93 ea 04 	sts	0x04EA, r18
     212:	c1 ff       	sbrs	r28, 1
     214:	0a c0       	rjmp	.+20     	; 0x22a <CAN_int_vect+0x3a>
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	62 e0       	ldi	r22, 0x02	; 2
     21a:	8c e2       	ldi	r24, 0x2C	; 44
     21c:	5c d1       	rcall	.+696    	; 0x4d6 <MCP2515_bit_modify>
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	90 93 e9 04 	sts	0x04E9, r25
     226:	80 93 e8 04 	sts	0x04E8, r24
     22a:	78 94       	sei
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <__vector_6>:
     230:	1f 92       	push	r1
     232:	0f 92       	push	r0
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	0f 92       	push	r0
     238:	11 24       	eor	r1, r1
     23a:	0b b6       	in	r0, 0x3b	; 59
     23c:	0f 92       	push	r0
     23e:	2f 93       	push	r18
     240:	3f 93       	push	r19
     242:	4f 93       	push	r20
     244:	5f 93       	push	r21
     246:	6f 93       	push	r22
     248:	7f 93       	push	r23
     24a:	8f 93       	push	r24
     24c:	9f 93       	push	r25
     24e:	af 93       	push	r26
     250:	bf 93       	push	r27
     252:	ef 93       	push	r30
     254:	ff 93       	push	r31
     256:	cc df       	rcall	.-104    	; 0x1f0 <CAN_int_vect>
     258:	ff 91       	pop	r31
     25a:	ef 91       	pop	r30
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	0f 90       	pop	r0
     272:	0b be       	out	0x3b, r0	; 59
     274:	0f 90       	pop	r0
     276:	0f be       	out	0x3f, r0	; 63
     278:	0f 90       	pop	r0
     27a:	1f 90       	pop	r1
     27c:	18 95       	reti

0000027e <CAN_init>:
     27e:	ed 98       	cbi	0x1d, 5	; 29
     280:	ea e6       	ldi	r30, 0x6A	; 106
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	80 81       	ld	r24, Z
     286:	87 7f       	andi	r24, 0xF7	; 247
     288:	80 83       	st	Z, r24
     28a:	80 81       	ld	r24, Z
     28c:	8b 7f       	andi	r24, 0xFB	; 251
     28e:	80 83       	st	Z, r24
     290:	ed 9a       	sbi	0x1d, 5	; 29
     292:	3a d1       	rcall	.+628    	; 0x508 <MCP2515_init>
     294:	4f ef       	ldi	r20, 0xFF	; 255
     296:	64 e6       	ldi	r22, 0x64	; 100
     298:	80 e6       	ldi	r24, 0x60	; 96
     29a:	1d d1       	rcall	.+570    	; 0x4d6 <MCP2515_bit_modify>
     29c:	4f ef       	ldi	r20, 0xFF	; 255
     29e:	60 e6       	ldi	r22, 0x60	; 96
     2a0:	80 e7       	ldi	r24, 0x70	; 112
     2a2:	19 d1       	rcall	.+562    	; 0x4d6 <MCP2515_bit_modify>
     2a4:	63 e0       	ldi	r22, 0x03	; 3
     2a6:	8b e2       	ldi	r24, 0x2B	; 43
     2a8:	07 d1       	rcall	.+526    	; 0x4b8 <MCP2515_write>
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	60 ee       	ldi	r22, 0xE0	; 224
     2ae:	8f e0       	ldi	r24, 0x0F	; 15
     2b0:	12 c1       	rjmp	.+548    	; 0x4d6 <MCP2515_bit_modify>
     2b2:	08 95       	ret

000002b4 <CAN_message_receive>:
	const int address = MCP_TXB0CTRL + BUFFER_LENGTH * tb;
	return !(MCP2515_read(address) & MCP_TXREQ);
}


void CAN_message_receive(can_message* received_msg){
     2b4:	df 92       	push	r13
     2b6:	ef 92       	push	r14
     2b8:	ff 92       	push	r15
     2ba:	0f 93       	push	r16
     2bc:	1f 93       	push	r17
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	8c 01       	movw	r16, r24
	cli();
     2c4:	f8 94       	cli
	int receive_buffer_index = 0;
	if(flag_RX0){
     2c6:	80 91 ea 04 	lds	r24, 0x04EA
     2ca:	90 91 eb 04 	lds	r25, 0x04EB
     2ce:	89 2b       	or	r24, r25
     2d0:	39 f0       	breq	.+14     	; 0x2e0 <CAN_message_receive+0x2c>
		receive_buffer_index = 0;
		flag_RX0 = 0;
     2d2:	10 92 eb 04 	sts	0x04EB, r1
     2d6:	10 92 ea 04 	sts	0x04EA, r1

void CAN_message_receive(can_message* received_msg){
	cli();
	int receive_buffer_index = 0;
	if(flag_RX0){
		receive_buffer_index = 0;
     2da:	c0 e0       	ldi	r28, 0x00	; 0
     2dc:	d0 e0       	ldi	r29, 0x00	; 0
     2de:	13 c0       	rjmp	.+38     	; 0x306 <CAN_message_receive+0x52>
		flag_RX0 = 0;
	}
	else if(flag_RX1){
     2e0:	80 91 e8 04 	lds	r24, 0x04E8
     2e4:	90 91 e9 04 	lds	r25, 0x04E9
     2e8:	89 2b       	or	r24, r25
     2ea:	39 f0       	breq	.+14     	; 0x2fa <CAN_message_receive+0x46>
		receive_buffer_index = 1;
		flag_RX1 = 0;
     2ec:	10 92 e9 04 	sts	0x04E9, r1
     2f0:	10 92 e8 04 	sts	0x04E8, r1
	if(flag_RX0){
		receive_buffer_index = 0;
		flag_RX0 = 0;
	}
	else if(flag_RX1){
		receive_buffer_index = 1;
     2f4:	c1 e0       	ldi	r28, 0x01	; 1
     2f6:	d0 e0       	ldi	r29, 0x00	; 0
     2f8:	06 c0       	rjmp	.+12     	; 0x306 <CAN_message_receive+0x52>
		flag_RX1 = 0;
	}
	else{
		//printf("ELSE: received_msg->id:  %d\n", received_msg->id);
		received_msg->length = 0;
     2fa:	f8 01       	movw	r30, r16
     2fc:	12 82       	std	Z+2, r1	; 0x02
		received_msg->id = 0;
     2fe:	11 82       	std	Z+1, r1	; 0x01
     300:	10 82       	st	Z, r1
		sei();
     302:	78 94       	sei
		return;
     304:	3e c0       	rjmp	.+124    	; 0x382 <CAN_message_receive+0xce>
	}
	//prevents crashing
	//_delay_ms(10);

	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_index);
     306:	fc 2e       	mov	r15, r28
     308:	ff 0c       	add	r15, r15
     30a:	ff 0c       	add	r15, r15
     30c:	ff 0c       	add	r15, r15
     30e:	ff 0c       	add	r15, r15
     310:	81 e6       	ldi	r24, 0x61	; 97
     312:	8f 0d       	add	r24, r15
     314:	c4 d0       	rcall	.+392    	; 0x49e <MCP2515_read>
     316:	e8 2e       	mov	r14, r24
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_index);
     318:	82 e6       	ldi	r24, 0x62	; 98
     31a:	8f 0d       	add	r24, r15
     31c:	c0 d0       	rcall	.+384    	; 0x49e <MCP2515_read>
	/*
		id_low:	    X XXXX LLL
		id_high: HHHH HHHH
		id:		 HHHH HHHH LLL
	*/
	received_msg->id = (id_high << 3) + id_low; 
     31e:	2e 2d       	mov	r18, r14
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	22 0f       	add	r18, r18
     324:	33 1f       	adc	r19, r19
     326:	22 0f       	add	r18, r18
     328:	33 1f       	adc	r19, r19
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19

	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_index);
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_index);
	
	//only want the last 3 bits
	id_low = id_low >> 5;
     32e:	82 95       	swap	r24
     330:	86 95       	lsr	r24
     332:	87 70       	andi	r24, 0x07	; 7
	/*
		id_low:	    X XXXX LLL
		id_high: HHHH HHHH
		id:		 HHHH HHHH LLL
	*/
	received_msg->id = (id_high << 3) + id_low; 
     334:	28 0f       	add	r18, r24
     336:	31 1d       	adc	r19, r1
     338:	f8 01       	movw	r30, r16
     33a:	31 83       	std	Z+1, r19	; 0x01
     33c:	20 83       	st	Z, r18
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_index) % (1<<3));
     33e:	85 e6       	ldi	r24, 0x65	; 101
     340:	8f 0d       	add	r24, r15
     342:	ad d0       	rcall	.+346    	; 0x49e <MCP2515_read>
     344:	87 70       	andi	r24, 0x07	; 7
     346:	f8 01       	movw	r30, r16
     348:	82 83       	std	Z+2, r24	; 0x02
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     34a:	88 23       	and	r24, r24
     34c:	c9 f0       	breq	.+50     	; 0x380 <CAN_message_receive+0xcc>
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_index;
     34e:	7e 01       	movw	r14, r28
     350:	ee 0c       	add	r14, r14
     352:	ff 1c       	adc	r15, r15
     354:	ee 0c       	add	r14, r14
     356:	ff 1c       	adc	r15, r15
     358:	ee 0c       	add	r14, r14
     35a:	ff 1c       	adc	r15, r15
     35c:	ee 0c       	add	r14, r14
     35e:	ff 1c       	adc	r15, r15
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_index) % (1<<3));
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     360:	d1 2c       	mov	r13, r1
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_index;
     362:	cd 2d       	mov	r28, r13
     364:	d0 e0       	ldi	r29, 0x00	; 0
     366:	ce 01       	movw	r24, r28
     368:	8a 59       	subi	r24, 0x9A	; 154
     36a:	9f 4f       	sbci	r25, 0xFF	; 255
		received_msg->data[byte] = MCP2515_read(address);
     36c:	8e 0d       	add	r24, r14
     36e:	97 d0       	rcall	.+302    	; 0x49e <MCP2515_read>
     370:	c0 0f       	add	r28, r16
     372:	d1 1f       	adc	r29, r17
     374:	8b 83       	std	Y+3, r24	; 0x03
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_index) % (1<<3));
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     376:	d3 94       	inc	r13
     378:	f8 01       	movw	r30, r16
     37a:	82 81       	ldd	r24, Z+2	; 0x02
     37c:	d8 16       	cp	r13, r24
     37e:	88 f3       	brcs	.-30     	; 0x362 <CAN_message_receive+0xae>
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_index;
		received_msg->data[byte] = MCP2515_read(address);
	}
	sei();
     380:	78 94       	sei
}
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	ff 90       	pop	r15
     38c:	ef 90       	pop	r14
     38e:	df 90       	pop	r13
     390:	08 95       	ret

00000392 <__vector_42>:
	highscore.id = 'h';
	highscore.length = 3;
	highscore.data[0] = score_ms >> 8;
	highscore.data[1] = score_ms & 0xFF;
	CAN_message_send(&highscore);
}
     392:	1f 92       	push	r1
     394:	0f 92       	push	r0
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	0f 92       	push	r0
     39a:	11 24       	eor	r1, r1
     39c:	8f 93       	push	r24
     39e:	9f 93       	push	r25
     3a0:	80 91 fa 04 	lds	r24, 0x04FA
     3a4:	90 91 fb 04 	lds	r25, 0x04FB
     3a8:	01 96       	adiw	r24, 0x01	; 1
     3aa:	90 93 fb 04 	sts	0x04FB, r25
     3ae:	80 93 fa 04 	sts	0x04FA, r24
     3b2:	80 91 fa 04 	lds	r24, 0x04FA
     3b6:	90 91 fb 04 	lds	r25, 0x04FB
     3ba:	0a 97       	sbiw	r24, 0x0a	; 10
     3bc:	9c f0       	brlt	.+38     	; 0x3e4 <__vector_42+0x52>
     3be:	10 92 fb 04 	sts	0x04FB, r1
     3c2:	10 92 fa 04 	sts	0x04FA, r1
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	90 93 00 05 	sts	0x0500, r25
     3ce:	80 93 ff 04 	sts	0x04FF, r24
     3d2:	80 91 fd 04 	lds	r24, 0x04FD
     3d6:	90 91 fe 04 	lds	r25, 0x04FE
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	90 93 fe 04 	sts	0x04FE, r25
     3e0:	80 93 fd 04 	sts	0x04FD, r24
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	90 93 02 05 	sts	0x0502, r25
     3ec:	80 93 01 05 	sts	0x0501, r24
     3f0:	9f 91       	pop	r25
     3f2:	8f 91       	pop	r24
     3f4:	0f 90       	pop	r0
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	0f 90       	pop	r0
     3fa:	1f 90       	pop	r1
     3fc:	18 95       	reti

000003fe <GAME_timer_init>:


void GAME_timer_init(void) {
	// 16-bit interrupt
	set_bit(TCCR4A,COM4A1);
     3fe:	e0 ea       	ldi	r30, 0xA0	; 160
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	80 68       	ori	r24, 0x80	; 128
     406:	80 83       	st	Z, r24
		
	// Use timer4
	// clear timer on compare (CTC) mode (16 bit, TOP in OCR4A) page 145 (mode 4 table 17-2)
	// clear_bit(TCCR4B, WGM43);
	set_bit(TCCR4B, WGM42);
     408:	e1 ea       	ldi	r30, 0xA1	; 161
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	88 60       	ori	r24, 0x08	; 8
     410:	80 83       	st	Z, r24
	// clear_bit(TCCR4A, WGM41);
	// clear_bit(TCCR4A, WGM40);
		
	// resets at this value (output compare register) ~100 Hz when prescaler = 8
	OCR4A = 20000;
     412:	80 e2       	ldi	r24, 0x20	; 32
     414:	9e e4       	ldi	r25, 0x4E	; 78
     416:	90 93 a9 00 	sts	0x00A9, r25
     41a:	80 93 a8 00 	sts	0x00A8, r24
		
	// set prescaler 8
	clear_bit(TCCR4B, CS42);
     41e:	80 81       	ld	r24, Z
     420:	8b 7f       	andi	r24, 0xFB	; 251
     422:	80 83       	st	Z, r24
	set_bit(TCCR4B, CS41);
     424:	80 81       	ld	r24, Z
     426:	82 60       	ori	r24, 0x02	; 2
     428:	80 83       	st	Z, r24
	clear_bit(TCCR4B, CS40);
     42a:	80 81       	ld	r24, Z
     42c:	8e 7f       	andi	r24, 0xFE	; 254
     42e:	80 83       	st	Z, r24
		
	// output compare A match interrupt enable (17.11.35)
	set_bit(TIMSK4, OCIE4A);
     430:	e2 e7       	ldi	r30, 0x72	; 114
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	82 60       	ori	r24, 0x02	; 2
     438:	80 83       	st	Z, r24
		
	score_flag = 0;
     43a:	10 92 00 05 	sts	0x0500, r1
     43e:	10 92 ff 04 	sts	0x04FF, r1
	score_ms = 0;
     442:	10 92 fe 04 	sts	0x04FE, r1
     446:	10 92 fd 04 	sts	0x04FD, r1
	score_charge = 0;
     44a:	10 92 fb 04 	sts	0x04FB, r1
     44e:	10 92 fa 04 	sts	0x04FA, r1
     452:	08 95       	ret

00000454 <GAME_init>:
	timer_flag = 1;
}


void GAME_init(control c) {
	control_type = c;
     454:	80 93 fc 04 	sts	0x04FC, r24
	GAME_timer_init();
     458:	d2 cf       	rjmp	.-92     	; 0x3fe <GAME_timer_init>
     45a:	08 95       	ret

0000045c <IR_init>:
     45c:	b5 ce       	rjmp	.-662    	; 0x1c8 <ADC_init>
     45e:	08 95       	ret

00000460 <MAX520_init>:
     460:	cf 93       	push	r28
     462:	c8 2f       	mov	r28, r24
     464:	c0 d3       	rcall	.+1920   	; 0xbe6 <TWI_Master_Initialise>
     466:	78 94       	sei
     468:	cc 0f       	add	r28, r28
     46a:	c0 5b       	subi	r28, 0xB0	; 176
     46c:	c0 93 ec 04 	sts	0x04EC, r28
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <MAX520_send>:
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	00 d0       	rcall	.+0      	; 0x47a <MAX520_send+0x6>
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	90 91 ec 04 	lds	r25, 0x04EC
     482:	99 83       	std	Y+1, r25	; 0x01
     484:	88 0f       	add	r24, r24
     486:	8a 83       	std	Y+2, r24	; 0x02
     488:	6b 83       	std	Y+3, r22	; 0x03
     48a:	63 e0       	ldi	r22, 0x03	; 3
     48c:	ce 01       	movw	r24, r28
     48e:	01 96       	adiw	r24, 0x01	; 1
     490:	b4 d3       	rcall	.+1896   	; 0xbfa <TWI_Start_Transceiver_With_Data>
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <MCP2515_read>:
     49e:	cf 93       	push	r28
     4a0:	c8 2f       	mov	r28, r24
     4a2:	46 d3       	rcall	.+1676   	; 0xb30 <SPI_select>
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	38 d3       	rcall	.+1648   	; 0xb18 <SPI_send>
     4a8:	8c 2f       	mov	r24, r28
     4aa:	36 d3       	rcall	.+1644   	; 0xb18 <SPI_send>
     4ac:	3a d3       	rcall	.+1652   	; 0xb22 <SPI_read>
     4ae:	c8 2f       	mov	r28, r24
     4b0:	41 d3       	rcall	.+1666   	; 0xb34 <SPI_deselect>
     4b2:	8c 2f       	mov	r24, r28
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <MCP2515_write>:
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	d8 2f       	mov	r29, r24
     4be:	c6 2f       	mov	r28, r22
     4c0:	37 d3       	rcall	.+1646   	; 0xb30 <SPI_select>
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	29 d3       	rcall	.+1618   	; 0xb18 <SPI_send>
     4c6:	8d 2f       	mov	r24, r29
     4c8:	27 d3       	rcall	.+1614   	; 0xb18 <SPI_send>
     4ca:	8c 2f       	mov	r24, r28
     4cc:	25 d3       	rcall	.+1610   	; 0xb18 <SPI_send>
     4ce:	32 d3       	rcall	.+1636   	; 0xb34 <SPI_deselect>
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <MCP2515_bit_modify>:
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	18 2f       	mov	r17, r24
     4de:	d6 2f       	mov	r29, r22
     4e0:	c4 2f       	mov	r28, r20
     4e2:	26 d3       	rcall	.+1612   	; 0xb30 <SPI_select>
     4e4:	85 e0       	ldi	r24, 0x05	; 5
     4e6:	18 d3       	rcall	.+1584   	; 0xb18 <SPI_send>
     4e8:	81 2f       	mov	r24, r17
     4ea:	16 d3       	rcall	.+1580   	; 0xb18 <SPI_send>
     4ec:	8d 2f       	mov	r24, r29
     4ee:	14 d3       	rcall	.+1576   	; 0xb18 <SPI_send>
     4f0:	8c 2f       	mov	r24, r28
     4f2:	12 d3       	rcall	.+1572   	; 0xb18 <SPI_send>
     4f4:	1f d3       	rcall	.+1598   	; 0xb34 <SPI_deselect>
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	1f 91       	pop	r17
     4fc:	08 95       	ret

000004fe <MCP2515_reset>:
     4fe:	18 d3       	rcall	.+1584   	; 0xb30 <SPI_select>
     500:	80 ec       	ldi	r24, 0xC0	; 192
     502:	0a d3       	rcall	.+1556   	; 0xb18 <SPI_send>
     504:	17 c3       	rjmp	.+1582   	; 0xb34 <SPI_deselect>
     506:	08 95       	ret

00000508 <MCP2515_init>:
     508:	f9 d2       	rcall	.+1522   	; 0xafc <SPI_init>
     50a:	f9 df       	rcall	.-14     	; 0x4fe <MCP2515_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     50c:	8f e8       	ldi	r24, 0x8F	; 143
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	f1 f7       	brne	.-4      	; 0x510 <MCP2515_init+0x8>
     514:	00 c0       	rjmp	.+0      	; 0x516 <MCP2515_init+0xe>
     516:	00 00       	nop
     518:	8e e0       	ldi	r24, 0x0E	; 14
     51a:	c1 df       	rcall	.-126    	; 0x49e <MCP2515_read>
     51c:	80 7e       	andi	r24, 0xE0	; 224
     51e:	80 38       	cpi	r24, 0x80	; 128
     520:	29 f0       	breq	.+10     	; 0x52c <MCP2515_init+0x24>
     522:	8b e1       	ldi	r24, 0x1B	; 27
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	60 d7       	rcall	.+3776   	; 0x13e8 <puts>
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	08 95       	ret
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	08 95       	ret

00000530 <motor_enable>:
void motor_enable(void) {
	set_bit(MJ1, EN);
}

void motor_disable(void) {
	clear_bit(MJ1, EN);
     530:	e2 e0       	ldi	r30, 0x02	; 2
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	80 81       	ld	r24, Z
     536:	80 61       	ori	r24, 0x10	; 16
     538:	80 83       	st	Z, r24
     53a:	08 95       	ret

0000053c <motor_set_direction>:
	motor_set_direction(motor_direction);
	motor_set_speed(motor_speed);
}

void motor_set_direction(direction motor_direction) {
	(motor_direction == LEFT) ? clear_bit(MJ1, DIR) : set_bit(MJ1, DIR);
     53c:	81 11       	cpse	r24, r1
     53e:	06 c0       	rjmp	.+12     	; 0x54c <motor_set_direction+0x10>
     540:	e2 e0       	ldi	r30, 0x02	; 2
     542:	f1 e0       	ldi	r31, 0x01	; 1
     544:	80 81       	ld	r24, Z
     546:	8d 7f       	andi	r24, 0xFD	; 253
     548:	80 83       	st	Z, r24
     54a:	08 95       	ret
     54c:	e2 e0       	ldi	r30, 0x02	; 2
     54e:	f1 e0       	ldi	r31, 0x01	; 1
     550:	80 81       	ld	r24, Z
     552:	82 60       	ori	r24, 0x02	; 2
     554:	80 83       	st	Z, r24
     556:	08 95       	ret

00000558 <motor_set_speed>:
}

void motor_set_speed(uint8_t motor_speed) {
	MAX520_send(MOTOR_SPEED_CHANNEL, MOTOR_GAIN * motor_speed);
     558:	68 2f       	mov	r22, r24
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	a4 d5       	rcall	.+2888   	; 0x10aa <__floatsisf>
     562:	21 ee       	ldi	r18, 0xE1	; 225
     564:	3a e7       	ldi	r19, 0x7A	; 122
     566:	44 ee       	ldi	r20, 0xE4	; 228
     568:	5f e3       	ldi	r21, 0x3F	; 63
     56a:	53 d6       	rcall	.+3238   	; 0x1212 <__mulsf3>
     56c:	70 d5       	rcall	.+2784   	; 0x104e <__fixunssfsi>
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	81 cf       	rjmp	.-254    	; 0x474 <MAX520_send>
     572:	08 95       	ret

00000574 <motor_set_velocity>:

void motor_disable(void) {
	clear_bit(MJ1, EN);
}

void motor_set_velocity(int16_t motor_velocity) { // u
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
	
	// Find the motor direction. Negative velocity corresponds to left.
	direction motor_direction = (motor_velocity < 0) ? LEFT : RIGHT;
	
	// Speed is in absolute value. Make sure it is not greater than 100.
	motor_velocity = SATURATE(motor_velocity, -100, 100);
     578:	c8 2f       	mov	r28, r24
     57a:	d9 2f       	mov	r29, r25
     57c:	cc 39       	cpi	r28, 0x9C	; 156
     57e:	8f ef       	ldi	r24, 0xFF	; 255
     580:	d8 07       	cpc	r29, r24
     582:	14 f4       	brge	.+4      	; 0x588 <motor_set_velocity+0x14>
     584:	cc e9       	ldi	r28, 0x9C	; 156
     586:	df ef       	ldi	r29, 0xFF	; 255
}

void motor_set_velocity(int16_t motor_velocity) { // u
	
	// Find the motor direction. Negative velocity corresponds to left.
	direction motor_direction = (motor_velocity < 0) ? LEFT : RIGHT;
     588:	89 2f       	mov	r24, r25
     58a:	80 95       	com	r24
	// Speed is in absolute value. Make sure it is not greater than 100.
	motor_velocity = SATURATE(motor_velocity, -100, 100);
	uint8_t motor_speed = abs(motor_velocity);
	
	// Set direction and speed of motor.
	motor_set_direction(motor_direction);
     58c:	88 1f       	adc	r24, r24
     58e:	88 27       	eor	r24, r24
     590:	88 1f       	adc	r24, r24
     592:	d4 df       	rcall	.-88     	; 0x53c <motor_set_direction>
     594:	c5 36       	cpi	r28, 0x65	; 101
     596:	d1 05       	cpc	r29, r1
     598:	14 f0       	brlt	.+4      	; 0x59e <motor_set_velocity+0x2a>
     59a:	c4 e6       	ldi	r28, 0x64	; 100
     59c:	d0 e0       	ldi	r29, 0x00	; 0
	// Find the motor direction. Negative velocity corresponds to left.
	direction motor_direction = (motor_velocity < 0) ? LEFT : RIGHT;
	
	// Speed is in absolute value. Make sure it is not greater than 100.
	motor_velocity = SATURATE(motor_velocity, -100, 100);
	uint8_t motor_speed = abs(motor_velocity);
     59e:	ce 01       	movw	r24, r28
     5a0:	dd 23       	and	r29, r29
     5a2:	24 f4       	brge	.+8      	; 0x5ac <motor_set_velocity+0x38>
     5a4:	88 27       	eor	r24, r24
     5a6:	99 27       	eor	r25, r25
     5a8:	8c 1b       	sub	r24, r28
     5aa:	9d 0b       	sbc	r25, r29
	
	// Set direction and speed of motor.
	motor_set_direction(motor_direction);
	motor_set_speed(motor_speed);
     5ac:	d5 df       	rcall	.-86     	; 0x558 <motor_set_speed>
}
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <motor_read_position_change>:
/*				READ FROM ENCODER			*/
/*------------------------------------------*/

int16_t motor_read_position_change(void) { 
	// Read from the encoder as described in "Motorbox User Guide" page 5
	clear_bit(MJ1, OE);
     5b4:	e2 e0       	ldi	r30, 0x02	; 2
     5b6:	f1 e0       	ldi	r31, 0x01	; 1
     5b8:	80 81       	ld	r24, Z
     5ba:	8f 7d       	andi	r24, 0xDF	; 223
     5bc:	80 83       	st	Z, r24
	clear_bit(MJ1, SEL);
     5be:	80 81       	ld	r24, Z
     5c0:	87 7f       	andi	r24, 0xF7	; 247
     5c2:	80 83       	st	Z, r24
     5c4:	2a e6       	ldi	r18, 0x6A	; 106
     5c6:	2a 95       	dec	r18
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <motor_read_position_change+0x12>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <motor_read_position_change+0x18>
	_delay_us(20);
	uint16_t position_change = (MJ2 << 8);
     5cc:	80 91 06 01 	lds	r24, 0x0106
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	98 2f       	mov	r25, r24
     5d4:	88 27       	eor	r24, r24
	
	set_bit(MJ1, SEL);
     5d6:	20 81       	ld	r18, Z
     5d8:	28 60       	ori	r18, 0x08	; 8
     5da:	20 83       	st	Z, r18
     5dc:	3a e6       	ldi	r19, 0x6A	; 106
     5de:	3a 95       	dec	r19
     5e0:	f1 f7       	brne	.-4      	; 0x5de <motor_read_position_change+0x2a>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <motor_read_position_change+0x30>
	_delay_us(20);
	position_change += MJ2;
     5e4:	20 91 06 01 	lds	r18, 0x0106
	
	clear_bit(MJ1, RST);
     5e8:	30 81       	ld	r19, Z
     5ea:	3f 7b       	andi	r19, 0xBF	; 191
     5ec:	30 83       	st	Z, r19
     5ee:	35 e8       	ldi	r19, 0x85	; 133
     5f0:	3a 95       	dec	r19
     5f2:	f1 f7       	brne	.-4      	; 0x5f0 <motor_read_position_change+0x3c>
     5f4:	00 00       	nop
	_delay_us(25);
	set_bit(MJ1, RST);
     5f6:	30 81       	ld	r19, Z
     5f8:	30 64       	ori	r19, 0x40	; 64
     5fa:	30 83       	st	Z, r19
	set_bit(MJ1, OE);
     5fc:	30 81       	ld	r19, Z
     5fe:	30 62       	ori	r19, 0x20	; 32
     600:	30 83       	st	Z, r19
	
	return position_change;
}
     602:	82 0f       	add	r24, r18
     604:	91 1d       	adc	r25, r1
     606:	08 95       	ret

00000608 <motor_find_max_speed_manual>:
		case AUTOMATIC:
		motor_find_max_speed_auto();
	}
}

void motor_find_max_speed_manual(void){
     608:	8f 92       	push	r8
     60a:	9f 92       	push	r9
     60c:	bf 92       	push	r11
     60e:	cf 92       	push	r12
     610:	df 92       	push	r13
     612:	ef 92       	push	r14
     614:	ff 92       	push	r15
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	2b 97       	sbiw	r28, 0x0b	; 11
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	f8 94       	cli
     628:	de bf       	out	0x3e, r29	; 62
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	cd bf       	out	0x3d, r28	; 61
	
	can_message message;
	int8_t joystick_x = 0;
	int button_is_pressed = 0;
	
	printf("---------------------------------------------------------\n");
     62e:	8d e4       	ldi	r24, 0x4D	; 77
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	da d6       	rcall	.+3508   	; 0x13e8 <puts>
	printf("CALIBRATE THE ENCODER BY MEASURING THE MAXIMUM VELOCITY\n");
     634:	87 e8       	ldi	r24, 0x87	; 135
     636:	92 e0       	ldi	r25, 0x02	; 2
     638:	d7 d6       	rcall	.+3502   	; 0x13e8 <puts>
	printf("PRESS ANY BUTTON TO CONTINUE\n");
     63a:	8f eb       	ldi	r24, 0xBF	; 191
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	d4 d6       	rcall	.+3496   	; 0x13e8 <puts>
	printf("---------------------------------------------------------\n");
     640:	8d e4       	ldi	r24, 0x4D	; 77
     642:	92 e0       	ldi	r25, 0x02	; 2
     644:	d1 d6       	rcall	.+3490   	; 0x13e8 <puts>
			motor_set_velocity(joystick_x);

			double speed = abs(motor_read_position_change())/(double)(time_passed());
			if (speed > max_speed) {
				max_speed = speed;
				printf("[MANUAL] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
     646:	0c ed       	ldi	r16, 0xDC	; 220
     648:	12 e0       	ldi	r17, 0x02	; 2
	printf("CALIBRATE THE ENCODER BY MEASURING THE MAXIMUM VELOCITY\n");
	printf("PRESS ANY BUTTON TO CONTINUE\n");
	printf("---------------------------------------------------------\n");
	
	while(!button_is_pressed) {
		CAN_message_receive(&message);
     64a:	ce 01       	movw	r24, r28
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	32 de       	rcall	.-924    	; 0x2b4 <CAN_message_receive>
		if(message.length) {
     650:	8b 81       	ldd	r24, Y+3	; 0x03
     652:	88 23       	and	r24, r24
     654:	d1 f3       	breq	.-12     	; 0x64a <motor_find_max_speed_manual+0x42>
			joystick_x = message.data[JOYSTICK_X];
			const int RL_BUTTONS = 0b011;
			button_is_pressed = message.data[BUTTONS] & RL_BUTTONS;
     656:	88 85       	ldd	r24, Y+8	; 0x08
     658:	83 70       	andi	r24, 0x03	; 3
     65a:	b8 2e       	mov	r11, r24
			
			motor_set_velocity(joystick_x);
     65c:	8c 81       	ldd	r24, Y+4	; 0x04
     65e:	99 27       	eor	r25, r25
     660:	87 fd       	sbrc	r24, 7
     662:	90 95       	com	r25
     664:	87 df       	rcall	.-242    	; 0x574 <motor_set_velocity>

			double speed = abs(motor_read_position_change())/(double)(time_passed());
     666:	a6 df       	rcall	.-180    	; 0x5b4 <motor_read_position_change>
     668:	7c 01       	movw	r14, r24
     66a:	ac d2       	rcall	.+1368   	; 0xbc4 <time_passed>
     66c:	4c 01       	movw	r8, r24
     66e:	b7 01       	movw	r22, r14
     670:	ff 20       	and	r15, r15
     672:	24 f4       	brge	.+8      	; 0x67c <motor_find_max_speed_manual+0x74>
     674:	66 27       	eor	r22, r22
     676:	77 27       	eor	r23, r23
     678:	6e 19       	sub	r22, r14
     67a:	7f 09       	sbc	r23, r15
     67c:	88 27       	eor	r24, r24
     67e:	77 fd       	sbrc	r23, 7
     680:	80 95       	com	r24
     682:	98 2f       	mov	r25, r24
     684:	12 d5       	rcall	.+2596   	; 0x10aa <__floatsisf>
     686:	6b 01       	movw	r12, r22
     688:	7c 01       	movw	r14, r24
     68a:	b4 01       	movw	r22, r8
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	0a d5       	rcall	.+2580   	; 0x10a6 <__floatunsisf>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	c7 01       	movw	r24, r14
     698:	b6 01       	movw	r22, r12
     69a:	6c d4       	rcall	.+2264   	; 0xf74 <__divsf3>
     69c:	6b 01       	movw	r12, r22
     69e:	7c 01       	movw	r14, r24
			if (speed > max_speed) {
     6a0:	20 91 ed 04 	lds	r18, 0x04ED
     6a4:	30 91 ee 04 	lds	r19, 0x04EE
     6a8:	40 91 ef 04 	lds	r20, 0x04EF
     6ac:	50 91 f0 04 	lds	r21, 0x04F0
     6b0:	ac d5       	rcall	.+2904   	; 0x120a <__gesf2>
     6b2:	18 16       	cp	r1, r24
     6b4:	cc f4       	brge	.+50     	; 0x6e8 <motor_find_max_speed_manual+0xe0>
				max_speed = speed;
     6b6:	c0 92 ed 04 	sts	0x04ED, r12
     6ba:	d0 92 ee 04 	sts	0x04EE, r13
     6be:	e0 92 ef 04 	sts	0x04EF, r14
     6c2:	f0 92 f0 04 	sts	0x04F0, r15
				printf("[MANUAL] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	4a e7       	ldi	r20, 0x7A	; 122
     6cc:	54 e4       	ldi	r21, 0x44	; 68
     6ce:	c7 01       	movw	r24, r14
     6d0:	b6 01       	movw	r22, r12
     6d2:	9f d5       	rcall	.+2878   	; 0x1212 <__mulsf3>
     6d4:	b7 d4       	rcall	.+2414   	; 0x1044 <__fixsfsi>
     6d6:	7f 93       	push	r23
     6d8:	6f 93       	push	r22
     6da:	1f 93       	push	r17
     6dc:	0f 93       	push	r16
     6de:	73 d6       	rcall	.+3302   	; 0x13c6 <printf>
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6e8:	8f e3       	ldi	r24, 0x3F	; 63
     6ea:	9c e9       	ldi	r25, 0x9C	; 156
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <motor_find_max_speed_manual+0xe4>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <motor_find_max_speed_manual+0xea>
     6f2:	00 00       	nop
	printf("---------------------------------------------------------\n");
	printf("CALIBRATE THE ENCODER BY MEASURING THE MAXIMUM VELOCITY\n");
	printf("PRESS ANY BUTTON TO CONTINUE\n");
	printf("---------------------------------------------------------\n");
	
	while(!button_is_pressed) {
     6f4:	bb 20       	and	r11, r11
     6f6:	09 f4       	brne	.+2      	; 0x6fa <motor_find_max_speed_manual+0xf2>
     6f8:	a8 cf       	rjmp	.-176    	; 0x64a <motor_find_max_speed_manual+0x42>
			}
			_delay_ms(10);
		}
	}
	
	printf("---------------------------------------------------------\n");
     6fa:	8d e4       	ldi	r24, 0x4D	; 77
     6fc:	92 e0       	ldi	r25, 0x02	; 2
     6fe:	74 d6       	rcall	.+3304   	; 0x13e8 <puts>
	printf("CALIBRATION COMPLETE\n");
     700:	8b ef       	ldi	r24, 0xFB	; 251
     702:	92 e0       	ldi	r25, 0x02	; 2
     704:	71 d6       	rcall	.+3298   	; 0x13e8 <puts>
	printf("---------------------------------------------------------\n");
     706:	8d e4       	ldi	r24, 0x4D	; 77
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	6e d6       	rcall	.+3292   	; 0x13e8 <puts>
	motor_set_velocity(0);
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	31 df       	rcall	.-414    	; 0x574 <motor_set_velocity>
}
     712:	2b 96       	adiw	r28, 0x0b	; 11
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	bf 90       	pop	r11
     730:	9f 90       	pop	r9
     732:	8f 90       	pop	r8
     734:	08 95       	ret

00000736 <motor_find_max_speed_auto>:

void motor_find_max_speed_auto(void){
     736:	2f 92       	push	r2
     738:	3f 92       	push	r3
     73a:	4f 92       	push	r4
     73c:	5f 92       	push	r5
     73e:	6f 92       	push	r6
     740:	7f 92       	push	r7
     742:	8f 92       	push	r8
     744:	9f 92       	push	r9
     746:	af 92       	push	r10
     748:	bf 92       	push	r11
     74a:	cf 92       	push	r12
     74c:	df 92       	push	r13
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	a8 97       	sbiw	r28, 0x28	; 40
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
	cli();
     76a:	f8 94       	cli
	const int16_t velocities[] = {100, -100, 100, -100, 100, -100, 100, -100, 100, -100};
     76c:	84 e1       	ldi	r24, 0x14	; 20
     76e:	e7 e0       	ldi	r30, 0x07	; 7
     770:	f2 e0       	ldi	r31, 0x02	; 2
     772:	de 01       	movw	r26, r28
     774:	11 96       	adiw	r26, 0x01	; 1
     776:	01 90       	ld	r0, Z+
     778:	0d 92       	st	X+, r0
     77a:	8a 95       	dec	r24
     77c:	e1 f7       	brne	.-8      	; 0x776 <motor_find_max_speed_auto+0x40>
     77e:	9e 01       	movw	r18, r28
     780:	2f 5f       	subi	r18, 0xFF	; 255
     782:	3f 4f       	sbci	r19, 0xFF	; 255
     784:	38 a7       	std	Y+40, r19	; 0x28
     786:	2f a3       	std	Y+39, r18	; 0x27
     788:	ae 01       	movw	r20, r28
     78a:	4b 5e       	subi	r20, 0xEB	; 235
     78c:	5f 4f       	sbci	r21, 0xFF	; 255
     78e:	5e 8b       	std	Y+22, r21	; 0x16
     790:	4d 8b       	std	Y+21, r20	; 0x15
	const uint8_t time_interval = 85;  // Unit unknown
	
	const int velocity_count = sizeof(velocities)/sizeof(velocities[0]); // Size of array
	for (int i = 0; i < velocity_count; i++) {
		// Used to keep track of how long the motor has been going in one direction.
		uint64_t time_sum = 0;
     792:	31 2c       	mov	r3, r1
     794:	0f a1       	ldd	r16, Y+39	; 0x27
     796:	18 a5       	ldd	r17, Y+40	; 0x28
		printf("Set velocity to: %d\n", velocities[i]);
     798:	d8 01       	movw	r26, r16
     79a:	11 96       	adiw	r26, 0x01	; 1
     79c:	8c 91       	ld	r24, X
     79e:	11 97       	sbiw	r26, 0x01	; 1
     7a0:	8f 93       	push	r24
     7a2:	8c 91       	ld	r24, X
     7a4:	8f 93       	push	r24
     7a6:	a0 e1       	ldi	r26, 0x10	; 16
     7a8:	b3 e0       	ldi	r27, 0x03	; 3
     7aa:	bf 93       	push	r27
     7ac:	af 93       	push	r26
     7ae:	0b d6       	rcall	.+3094   	; 0x13c6 <printf>
		
		sei(); // Interrupts need to be enabled in order to set velocity
     7b0:	78 94       	sei
		motor_set_velocity(velocities[i]); 
     7b2:	f8 01       	movw	r30, r16
     7b4:	80 81       	ld	r24, Z
     7b6:	91 81       	ldd	r25, Z+1	; 0x01
     7b8:	2f a1       	ldd	r18, Y+39	; 0x27
     7ba:	38 a5       	ldd	r19, Y+40	; 0x28
     7bc:	2e 5f       	subi	r18, 0xFE	; 254
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	38 a7       	std	Y+40, r19	; 0x28
     7c2:	2f a3       	std	Y+39, r18	; 0x27
     7c4:	d7 de       	rcall	.-594    	; 0x574 <motor_set_velocity>
		cli();
     7c6:	f8 94       	cli
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
	const uint8_t time_interval = 85;  // Unit unknown
	
	const int velocity_count = sizeof(velocities)/sizeof(velocities[0]); // Size of array
	for (int i = 0; i < velocity_count; i++) {
		// Used to keep track of how long the motor has been going in one direction.
		uint64_t time_sum = 0;
     7d0:	3f 8e       	std	Y+31, r3	; 0x1f
     7d2:	38 a2       	std	Y+32, r3	; 0x20
     7d4:	39 a2       	std	Y+33, r3	; 0x21
     7d6:	3a a2       	std	Y+34, r3	; 0x22
     7d8:	3b a2       	std	Y+35, r3	; 0x23
     7da:	3c a2       	std	Y+36, r3	; 0x24
     7dc:	3d a2       	std	Y+37, r3	; 0x25
     7de:	3e a2       	std	Y+38, r3	; 0x26
		motor_set_velocity(velocities[i]); 
		cli();
		
		// A somewhat hacky way of doing it. Consider switching to a separate timer in the future.
		while((uint8_t)((time_sum)>>8) < time_interval) {
			double time = time_passed();
     7e0:	f1 d1       	rcall	.+994    	; 0xbc4 <time_passed>
     7e2:	4c 01       	movw	r8, r24
			time_sum += (uint64_t)time;
     7e4:	ac 01       	movw	r20, r24
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	dc 01       	movw	r26, r24
     7f0:	8f 8a       	std	Y+23, r8	; 0x17
     7f2:	58 8f       	std	Y+24, r21	; 0x18
     7f4:	69 8f       	std	Y+25, r22	; 0x19
     7f6:	7a 8f       	std	Y+26, r23	; 0x1a
     7f8:	8b 8f       	std	Y+27, r24	; 0x1b
     7fa:	9c 8f       	std	Y+28, r25	; 0x1c
     7fc:	ad 8f       	std	Y+29, r26	; 0x1d
     7fe:	be 8f       	std	Y+30, r27	; 0x1e
     800:	2f 8d       	ldd	r18, Y+31	; 0x1f
     802:	38 a1       	ldd	r19, Y+32	; 0x20
     804:	49 a1       	ldd	r20, Y+33	; 0x21
     806:	5a a1       	ldd	r21, Y+34	; 0x22
     808:	6b a1       	ldd	r22, Y+35	; 0x23
     80a:	7c a1       	ldd	r23, Y+36	; 0x24
     80c:	8d a1       	ldd	r24, Y+37	; 0x25
     80e:	9e a1       	ldd	r25, Y+38	; 0x26
     810:	af 88       	ldd	r10, Y+23	; 0x17
     812:	b8 8c       	ldd	r11, Y+24	; 0x18
     814:	c3 2c       	mov	r12, r3
     816:	d3 2c       	mov	r13, r3
     818:	e3 2c       	mov	r14, r3
     81a:	f3 2c       	mov	r15, r3
     81c:	03 2d       	mov	r16, r3
     81e:	13 2d       	mov	r17, r3
     820:	7f d5       	rcall	.+2814   	; 0x1320 <__adddi3>
     822:	22 2e       	mov	r2, r18
     824:	53 2e       	mov	r5, r19
     826:	64 2e       	mov	r6, r20
     828:	75 2e       	mov	r7, r21
     82a:	a6 2e       	mov	r10, r22
     82c:	b7 2e       	mov	r11, r23
     82e:	08 2f       	mov	r16, r24
     830:	19 2f       	mov	r17, r25
     832:	2f 8f       	std	Y+31, r18	; 0x1f
     834:	38 a3       	std	Y+32, r19	; 0x20
     836:	49 a3       	std	Y+33, r20	; 0x21
     838:	5a a3       	std	Y+34, r21	; 0x22
     83a:	6b a3       	std	Y+35, r22	; 0x23
     83c:	7c a3       	std	Y+36, r23	; 0x24
     83e:	8d a3       	std	Y+37, r24	; 0x25
     840:	9e a3       	std	Y+38, r25	; 0x26
			
			double speed = abs(motor_read_position_change())/time;
     842:	b8 de       	rcall	.-656    	; 0x5b4 <motor_read_position_change>
     844:	99 23       	and	r25, r25
     846:	1c f4       	brge	.+6      	; 0x84e <motor_find_max_speed_auto+0x118>
     848:	91 95       	neg	r25
     84a:	81 95       	neg	r24
     84c:	91 09       	sbc	r25, r1
     84e:	bc 01       	movw	r22, r24
     850:	88 27       	eor	r24, r24
     852:	77 fd       	sbrc	r23, 7
     854:	80 95       	com	r24
     856:	98 2f       	mov	r25, r24
     858:	28 d4       	rcall	.+2128   	; 0x10aa <__floatsisf>
     85a:	6b 01       	movw	r12, r22
     85c:	7c 01       	movw	r14, r24
		motor_set_velocity(velocities[i]); 
		cli();
		
		// A somewhat hacky way of doing it. Consider switching to a separate timer in the future.
		while((uint8_t)((time_sum)>>8) < time_interval) {
			double time = time_passed();
     85e:	b4 01       	movw	r22, r8
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	20 d4       	rcall	.+2112   	; 0x10a6 <__floatunsisf>
     866:	9b 01       	movw	r18, r22
     868:	ac 01       	movw	r20, r24
			time_sum += (uint64_t)time;
			
			double speed = abs(motor_read_position_change())/time;
     86a:	c7 01       	movw	r24, r14
     86c:	b6 01       	movw	r22, r12
     86e:	82 d3       	rcall	.+1796   	; 0xf74 <__divsf3>
     870:	c6 2e       	mov	r12, r22
     872:	d7 2e       	mov	r13, r23
     874:	e8 2e       	mov	r14, r24
     876:	f9 2e       	mov	r15, r25
			max_speed = MAX(speed, max_speed);
     878:	90 90 ed 04 	lds	r9, 0x04ED
     87c:	80 90 ee 04 	lds	r8, 0x04EE
     880:	50 91 ef 04 	lds	r21, 0x04EF
     884:	5f 8b       	std	Y+23, r21	; 0x17
     886:	40 90 f0 04 	lds	r4, 0x04F0
     88a:	29 2d       	mov	r18, r9
     88c:	38 2d       	mov	r19, r8
     88e:	45 2f       	mov	r20, r21
     890:	54 2d       	mov	r21, r4
     892:	6c d3       	rcall	.+1752   	; 0xf6c <__cmpsf2>
     894:	88 23       	and	r24, r24
     896:	24 f4       	brge	.+8      	; 0x8a0 <motor_find_max_speed_auto+0x16a>
     898:	c9 2c       	mov	r12, r9
     89a:	d8 2c       	mov	r13, r8
     89c:	ef 88       	ldd	r14, Y+23	; 0x17
     89e:	f4 2c       	mov	r15, r4
     8a0:	8c 2d       	mov	r24, r12
     8a2:	9d 2d       	mov	r25, r13
     8a4:	ae 2d       	mov	r26, r14
     8a6:	bf 2d       	mov	r27, r15
     8a8:	80 93 ed 04 	sts	0x04ED, r24
     8ac:	90 93 ee 04 	sts	0x04EE, r25
     8b0:	a0 93 ef 04 	sts	0x04EF, r26
     8b4:	b0 93 f0 04 	sts	0x04F0, r27
     8b8:	6f ef       	ldi	r22, 0xFF	; 255
     8ba:	70 e7       	ldi	r23, 0x70	; 112
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	61 50       	subi	r22, 0x01	; 1
     8c0:	70 40       	sbci	r23, 0x00	; 0
     8c2:	80 40       	sbci	r24, 0x00	; 0
     8c4:	e1 f7       	brne	.-8      	; 0x8be <motor_find_max_speed_auto+0x188>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <motor_find_max_speed_auto+0x192>
     8c8:	00 00       	nop
		sei(); // Interrupts need to be enabled in order to set velocity
		motor_set_velocity(velocities[i]); 
		cli();
		
		// A somewhat hacky way of doing it. Consider switching to a separate timer in the future.
		while((uint8_t)((time_sum)>>8) < time_interval) {
     8ca:	22 2d       	mov	r18, r2
     8cc:	35 2d       	mov	r19, r5
     8ce:	46 2d       	mov	r20, r6
     8d0:	57 2d       	mov	r21, r7
     8d2:	6a 2d       	mov	r22, r10
     8d4:	7b 2d       	mov	r23, r11
     8d6:	80 2f       	mov	r24, r16
     8d8:	91 2f       	mov	r25, r17
     8da:	08 e0       	ldi	r16, 0x08	; 8
     8dc:	05 d5       	rcall	.+2570   	; 0x12e8 <__lshrdi3>
     8de:	25 35       	cpi	r18, 0x55	; 85
     8e0:	08 f4       	brcc	.+2      	; 0x8e4 <motor_find_max_speed_auto+0x1ae>
     8e2:	7e cf       	rjmp	.-260    	; 0x7e0 <motor_find_max_speed_auto+0xaa>
	cli();
	const int16_t velocities[] = {100, -100, 100, -100, 100, -100, 100, -100, 100, -100};
	const uint8_t time_interval = 85;  // Unit unknown
	
	const int velocity_count = sizeof(velocities)/sizeof(velocities[0]); // Size of array
	for (int i = 0; i < velocity_count; i++) {
     8e4:	af a1       	ldd	r26, Y+39	; 0x27
     8e6:	b8 a5       	ldd	r27, Y+40	; 0x28
     8e8:	ed 89       	ldd	r30, Y+21	; 0x15
     8ea:	fe 89       	ldd	r31, Y+22	; 0x16
     8ec:	ae 17       	cp	r26, r30
     8ee:	bf 07       	cpc	r27, r31
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <motor_find_max_speed_auto+0x1be>
     8f2:	50 cf       	rjmp	.-352    	; 0x794 <motor_find_max_speed_auto+0x5e>
			
			_delay_ms(50);
		}
	}
	
	printf("[AUTOMATIC] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	4a e7       	ldi	r20, 0x7A	; 122
     8fa:	54 e4       	ldi	r21, 0x44	; 68
     8fc:	60 91 ed 04 	lds	r22, 0x04ED
     900:	70 91 ee 04 	lds	r23, 0x04EE
     904:	80 91 ef 04 	lds	r24, 0x04EF
     908:	90 91 f0 04 	lds	r25, 0x04F0
     90c:	82 d4       	rcall	.+2308   	; 0x1212 <__mulsf3>
     90e:	9a d3       	rcall	.+1844   	; 0x1044 <__fixsfsi>
     910:	7f 93       	push	r23
     912:	6f 93       	push	r22
     914:	85 e2       	ldi	r24, 0x25	; 37
     916:	93 e0       	ldi	r25, 0x03	; 3
     918:	9f 93       	push	r25
     91a:	8f 93       	push	r24
     91c:	54 d5       	rcall	.+2728   	; 0x13c6 <printf>
	
	sei(); // Interrupts need to be enabled in order to set velocity
     91e:	78 94       	sei
	motor_set_velocity(0); 
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	27 de       	rcall	.-946    	; 0x574 <motor_set_velocity>
	cli();
     926:	f8 94       	cli
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
}
     930:	a8 96       	adiw	r28, 0x28	; 40
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ff 90       	pop	r15
     946:	ef 90       	pop	r14
     948:	df 90       	pop	r13
     94a:	cf 90       	pop	r12
     94c:	bf 90       	pop	r11
     94e:	af 90       	pop	r10
     950:	9f 90       	pop	r9
     952:	8f 90       	pop	r8
     954:	7f 90       	pop	r7
     956:	6f 90       	pop	r6
     958:	5f 90       	pop	r5
     95a:	4f 90       	pop	r4
     95c:	3f 90       	pop	r3
     95e:	2f 90       	pop	r2
     960:	08 95       	ret

00000962 <motor_init>:

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/

void motor_init(max_speed_mode mode){
     962:	cf 93       	push	r28
     964:	c8 2f       	mov	r28, r24
	MAX520_init(0b000);
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	7b dd       	rcall	.-1290   	; 0x460 <MAX520_init>
	motor_enable();
     96a:	e2 dd       	rcall	.-1084   	; 0x530 <motor_enable>
	clear_bit(MJ1, OE);  // Enable encoder
     96c:	e2 e0       	ldi	r30, 0x02	; 2
     96e:	f1 e0       	ldi	r31, 0x01	; 1
     970:	80 81       	ld	r24, Z
     972:	8f 7d       	andi	r24, 0xDF	; 223
     974:	80 83       	st	Z, r24
	set_bit(MJ1, RST);
     976:	80 81       	ld	r24, Z
     978:	80 64       	ori	r24, 0x40	; 64
     97a:	80 83       	st	Z, r24
	
	motor_set_velocity(0);
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	f9 dd       	rcall	.-1038   	; 0x574 <motor_set_velocity>
	
	// Set PORTH as output
	DDRH = 0xFF;
     982:	8f ef       	ldi	r24, 0xFF	; 255
     984:	80 93 01 01 	sts	0x0101, r24
	time_init();  // Used for measurement of speed/velocity.
     988:	16 d1       	rcall	.+556    	; 0xbb6 <time_init>
	
	// Read the change in position to clear the encoder before measurements are made
	motor_read_position_change();
     98a:	14 de       	rcall	.-984    	; 0x5b4 <motor_read_position_change>
	
	switch (mode) {
     98c:	c1 30       	cpi	r28, 0x01	; 1
     98e:	89 f0       	breq	.+34     	; 0x9b2 <motor_init+0x50>
     990:	18 f0       	brcs	.+6      	; 0x998 <motor_init+0x36>
     992:	c2 30       	cpi	r28, 0x02	; 2
     994:	81 f0       	breq	.+32     	; 0x9b6 <motor_init+0x54>
     996:	10 c0       	rjmp	.+32     	; 0x9b8 <motor_init+0x56>
		case DEFAULT:
		max_speed = MOTOR_DEFAULT_MAX_SPEED;
     998:	89 ed       	ldi	r24, 0xD9	; 217
     99a:	9e ec       	ldi	r25, 0xCE	; 206
     99c:	a7 ef       	ldi	r26, 0xF7	; 247
     99e:	be e3       	ldi	r27, 0x3E	; 62
     9a0:	80 93 ed 04 	sts	0x04ED, r24
     9a4:	90 93 ee 04 	sts	0x04EE, r25
     9a8:	a0 93 ef 04 	sts	0x04EF, r26
     9ac:	b0 93 f0 04 	sts	0x04F0, r27
		break;
     9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <motor_init+0x56>
		
		case MANUAL:
		motor_find_max_speed_manual();
     9b2:	2a de       	rcall	.-940    	; 0x608 <motor_find_max_speed_manual>
		break;
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <motor_init+0x56>
		
		case AUTOMATIC:
		motor_find_max_speed_auto();
     9b6:	bf de       	rcall	.-642    	; 0x736 <motor_find_max_speed_auto>
	}
}
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <PI_init>:

volatile PI_controller_t controller;


void PI_init() {
	controller.max_error_sum = 20;
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 ea       	ldi	r26, 0xA0	; 160
     9c2:	b1 e4       	ldi	r27, 0x41	; 65
     9c4:	80 93 0f 05 	sts	0x050F, r24
     9c8:	90 93 10 05 	sts	0x0510, r25
     9cc:	a0 93 11 05 	sts	0x0511, r26
     9d0:	b0 93 12 05 	sts	0x0512, r27
	controller.error_sum = 0;
     9d4:	10 92 0b 05 	sts	0x050B, r1
     9d8:	10 92 0c 05 	sts	0x050C, r1
     9dc:	10 92 0d 05 	sts	0x050D, r1
     9e0:	10 92 0e 05 	sts	0x050E, r1
	controller.k_p = 0.5;
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	a0 e0       	ldi	r26, 0x00	; 0
     9ea:	bf e3       	ldi	r27, 0x3F	; 63
     9ec:	80 93 03 05 	sts	0x0503, r24
     9f0:	90 93 04 05 	sts	0x0504, r25
     9f4:	a0 93 05 05 	sts	0x0505, r26
     9f8:	b0 93 06 05 	sts	0x0506, r27
	controller.k_i = 0.2;
     9fc:	8d ec       	ldi	r24, 0xCD	; 205
     9fe:	9c ec       	ldi	r25, 0xCC	; 204
     a00:	ac e4       	ldi	r26, 0x4C	; 76
     a02:	be e3       	ldi	r27, 0x3E	; 62
     a04:	80 93 07 05 	sts	0x0507, r24
     a08:	90 93 08 05 	sts	0x0508, r25
     a0c:	a0 93 09 05 	sts	0x0509, r26
     a10:	b0 93 0a 05 	sts	0x050A, r27
     a14:	08 95       	ret

00000a16 <servo_init>:
     a16:	90 d0       	rcall	.+288    	; 0xb38 <PWM_init>
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	80 ec       	ldi	r24, 0xC0	; 192
     a1e:	9f e3       	ldi	r25, 0x3F	; 63
     a20:	af c0       	rjmp	.+350    	; 0xb80 <PWM_set_width>
     a22:	08 95       	ret

00000a24 <__vector_47>:

void solenoid_timer_init(void);


volatile int solenoid_charged_flag = 0;
ISR(TIMER5_COMPA_vect) {
     a24:	1f 92       	push	r1
     a26:	0f 92       	push	r0
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	0f 92       	push	r0
     a2c:	11 24       	eor	r1, r1
     a2e:	0b b6       	in	r0, 0x3b	; 59
     a30:	0f 92       	push	r0
     a32:	8f 93       	push	r24
     a34:	9f 93       	push	r25
     a36:	ef 93       	push	r30
     a38:	ff 93       	push	r31
	solenoid_charged_flag++;
     a3a:	80 91 f1 04 	lds	r24, 0x04F1
     a3e:	90 91 f2 04 	lds	r25, 0x04F2
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	90 93 f2 04 	sts	0x04F2, r25
     a48:	80 93 f1 04 	sts	0x04F1, r24
	interrupt_A_disable();
     a4c:	e3 e7       	ldi	r30, 0x73	; 115
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	80 81       	ld	r24, Z
     a52:	8d 7f       	andi	r24, 0xFD	; 253
     a54:	80 83       	st	Z, r24
}
     a56:	ff 91       	pop	r31
     a58:	ef 91       	pop	r30
     a5a:	9f 91       	pop	r25
     a5c:	8f 91       	pop	r24
     a5e:	0f 90       	pop	r0
     a60:	0b be       	out	0x3b, r0	; 59
     a62:	0f 90       	pop	r0
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	0f 90       	pop	r0
     a68:	1f 90       	pop	r1
     a6a:	18 95       	reti

00000a6c <__vector_48>:

// Retract the solenoid ~30 ms after shooting it out, and start recharging.
ISR(TIMER5_COMPB_vect) {
     a6c:	1f 92       	push	r1
     a6e:	0f 92       	push	r0
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	0f 92       	push	r0
     a74:	11 24       	eor	r1, r1
     a76:	0b b6       	in	r0, 0x3b	; 59
     a78:	0f 92       	push	r0
     a7a:	8f 93       	push	r24
     a7c:	ef 93       	push	r30
     a7e:	ff 93       	push	r31
	solenoid_retract();
     a80:	2c 9a       	sbi	0x05, 4	; 5
	interrupt_B_disable();
     a82:	e3 e7       	ldi	r30, 0x73	; 115
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	80 81       	ld	r24, Z
     a88:	8b 7f       	andi	r24, 0xFB	; 251
     a8a:	80 83       	st	Z, r24
	interrupt_A_enable();
     a8c:	d1 9a       	sbi	0x1a, 1	; 26
     a8e:	80 81       	ld	r24, Z
     a90:	82 60       	ori	r24, 0x02	; 2
     a92:	80 83       	st	Z, r24
}
     a94:	ff 91       	pop	r31
     a96:	ef 91       	pop	r30
     a98:	8f 91       	pop	r24
     a9a:	0f 90       	pop	r0
     a9c:	0b be       	out	0x3b, r0	; 59
     a9e:	0f 90       	pop	r0
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	0f 90       	pop	r0
     aa4:	1f 90       	pop	r1
     aa6:	18 95       	reti

00000aa8 <solenoid_timer_init>:
	solenoid_timer_init();
}

void solenoid_timer_init(void) {
	// Timer mode 4, (CTC) [Table 17-2]
	set_bit(TCCR5B, WGM52);
     aa8:	e1 e2       	ldi	r30, 0x21	; 33
     aaa:	f1 e0       	ldi	r31, 0x01	; 1
     aac:	80 81       	ld	r24, Z
     aae:	88 60       	ori	r24, 0x08	; 8
     ab0:	80 83       	st	Z, r24
		
	// Compare output mode. Clear counter on compare match [Table 17-3]
	set_bit(TCCR5A, COM5A1);
     ab2:	a0 e2       	ldi	r26, 0x20	; 32
     ab4:	b1 e0       	ldi	r27, 0x01	; 1
     ab6:	8c 91       	ld	r24, X
     ab8:	80 68       	ori	r24, 0x80	; 128
     aba:	8c 93       	st	X, r24
		
	// Use a prescaler of 1024 [Table 17-6]
	set_bit(TCCR5B, CS50);
     abc:	80 81       	ld	r24, Z
     abe:	81 60       	ori	r24, 0x01	; 1
     ac0:	80 83       	st	Z, r24
	clear_bit(TCCR5B, CS51);
     ac2:	80 81       	ld	r24, Z
     ac4:	8d 7f       	andi	r24, 0xFD	; 253
     ac6:	80 83       	st	Z, r24
	set_bit(TCCR5B, CS52);
     ac8:	80 81       	ld	r24, Z
     aca:	84 60       	ori	r24, 0x04	; 4
     acc:	80 83       	st	Z, r24
		
	// Set interrupt counter compare match values
	OCR5A = (int) (F_CPU * TIMER_A_DELAY / TIMER_PRESCALER);
     ace:	8f e4       	ldi	r24, 0x4F	; 79
     ad0:	92 e1       	ldi	r25, 0x12	; 18
     ad2:	90 93 29 01 	sts	0x0129, r25
     ad6:	80 93 28 01 	sts	0x0128, r24
	OCR5B = (int) (F_CPU * TIMER_B_DELAY / TIMER_PRESCALER);
     ada:	84 ed       	ldi	r24, 0xD4	; 212
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	90 93 2b 01 	sts	0x012B, r25
     ae2:	80 93 2a 01 	sts	0x012A, r24
	
	// Enable interrupt
	interrupt_B_enable();
     ae6:	d2 9a       	sbi	0x1a, 2	; 26
     ae8:	e3 e7       	ldi	r30, 0x73	; 115
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	80 81       	ld	r24, Z
     aee:	84 60       	ori	r24, 0x04	; 4
     af0:	80 83       	st	Z, r24
     af2:	08 95       	ret

00000af4 <solenoid_init>:
}


void solenoid_init(){
	//set output pin PB4
	set_bit(DDRB, DDB4);
     af4:	24 9a       	sbi	0x04, 4	; 4
	
	//set high to disconnect
	set_bit(PORTB, PB4);
     af6:	2c 9a       	sbi	0x05, 4	; 5
	
	solenoid_timer_init();
     af8:	d7 cf       	rjmp	.-82     	; 0xaa8 <solenoid_timer_init>
     afa:	08 95       	ret

00000afc <SPI_init>:
     afc:	22 9a       	sbi	0x04, 2	; 4
     afe:	21 9a       	sbi	0x04, 1	; 4
     b00:	27 9a       	sbi	0x04, 7	; 4
     b02:	20 9a       	sbi	0x04, 0	; 4
     b04:	8c b5       	in	r24, 0x2c	; 44
     b06:	80 61       	ori	r24, 0x10	; 16
     b08:	8c bd       	out	0x2c, r24	; 44
     b0a:	8c b5       	in	r24, 0x2c	; 44
     b0c:	81 60       	ori	r24, 0x01	; 1
     b0e:	8c bd       	out	0x2c, r24	; 44
     b10:	8c b5       	in	r24, 0x2c	; 44
     b12:	80 64       	ori	r24, 0x40	; 64
     b14:	8c bd       	out	0x2c, r24	; 44
     b16:	08 95       	ret

00000b18 <SPI_send>:
     b18:	8e bd       	out	0x2e, r24	; 46
     b1a:	0d b4       	in	r0, 0x2d	; 45
     b1c:	07 fe       	sbrs	r0, 7
     b1e:	fd cf       	rjmp	.-6      	; 0xb1a <SPI_send+0x2>
     b20:	08 95       	ret

00000b22 <SPI_read>:
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	f9 df       	rcall	.-14     	; 0xb18 <SPI_send>
     b26:	0d b4       	in	r0, 0x2d	; 45
     b28:	07 fe       	sbrs	r0, 7
     b2a:	fd cf       	rjmp	.-6      	; 0xb26 <SPI_read+0x4>
     b2c:	8e b5       	in	r24, 0x2e	; 46
     b2e:	08 95       	ret

00000b30 <SPI_select>:
     b30:	2f 98       	cbi	0x05, 7	; 5
     b32:	08 95       	ret

00000b34 <SPI_deselect>:
     b34:	2f 9a       	sbi	0x05, 7	; 5
     b36:	08 95       	ret

00000b38 <PWM_init>:
     b38:	e1 e8       	ldi	r30, 0x81	; 129
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	80 81       	ld	r24, Z
     b3e:	8b 7f       	andi	r24, 0xFB	; 251
     b40:	80 83       	st	Z, r24
     b42:	80 81       	ld	r24, Z
     b44:	82 60       	ori	r24, 0x02	; 2
     b46:	80 83       	st	Z, r24
     b48:	80 81       	ld	r24, Z
     b4a:	8e 7f       	andi	r24, 0xFE	; 254
     b4c:	80 83       	st	Z, r24
     b4e:	80 81       	ld	r24, Z
     b50:	80 61       	ori	r24, 0x10	; 16
     b52:	80 83       	st	Z, r24
     b54:	80 81       	ld	r24, Z
     b56:	88 60       	ori	r24, 0x08	; 8
     b58:	80 83       	st	Z, r24
     b5a:	e0 e8       	ldi	r30, 0x80	; 128
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	82 60       	ori	r24, 0x02	; 2
     b62:	80 83       	st	Z, r24
     b64:	80 81       	ld	r24, Z
     b66:	8e 7f       	andi	r24, 0xFE	; 254
     b68:	80 83       	st	Z, r24
     b6a:	8f e3       	ldi	r24, 0x3F	; 63
     b6c:	9c e9       	ldi	r25, 0x9C	; 156
     b6e:	90 93 87 00 	sts	0x0087, r25
     b72:	80 93 86 00 	sts	0x0086, r24
     b76:	80 81       	ld	r24, Z
     b78:	80 68       	ori	r24, 0x80	; 128
     b7a:	80 83       	st	Z, r24
     b7c:	25 9a       	sbi	0x04, 5	; 4
     b7e:	08 95       	ret

00000b80 <PWM_set_width>:
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	34 e2       	ldi	r19, 0x24	; 36
     b84:	44 ef       	ldi	r20, 0xF4	; 244
     b86:	59 e4       	ldi	r21, 0x49	; 73
     b88:	44 d3       	rcall	.+1672   	; 0x1212 <__mulsf3>
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a e7       	ldi	r20, 0x7A	; 122
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	f0 d1       	rcall	.+992    	; 0xf74 <__divsf3>
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	40 e8       	ldi	r20, 0x80	; 128
     b9a:	5f e3       	ldi	r21, 0x3F	; 63
     b9c:	82 d1       	rcall	.+772    	; 0xea2 <__subsf3>
     b9e:	57 d2       	rcall	.+1198   	; 0x104e <__fixunssfsi>
     ba0:	70 93 89 00 	sts	0x0089, r23
     ba4:	60 93 88 00 	sts	0x0088, r22
     ba8:	08 95       	ret

00000baa <time_reset>:
	
}

//setter time started til current time
void time_reset(void) {
	TCNT3 = 0;
     baa:	10 92 95 00 	sts	0x0095, r1
     bae:	10 92 94 00 	sts	0x0094, r1
	//printf("OVERFLOW FLAG: %d\n", test_bit(TIFR3, TOV3));
	set_bit(TIFR3, TOV3);
     bb2:	c0 9a       	sbi	0x18, 0	; 24
     bb4:	08 95       	ret

00000bb6 <time_init>:

void time_init(){
	//Normal port operation, non PWM
	
	//prescaler 256 (see table 20-9)
	set_bit(TCCR3B, CS32);
     bb6:	e1 e9       	ldi	r30, 0x91	; 145
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	84 60       	ori	r24, 0x04	; 4
     bbe:	80 83       	st	Z, r24
	time_reset();
     bc0:	f4 cf       	rjmp	.-24     	; 0xbaa <time_reset>
     bc2:	08 95       	ret

00000bc4 <time_passed>:
	TCNT3 = 0;
	//printf("OVERFLOW FLAG: %d\n", test_bit(TIFR3, TOV3));
	set_bit(TIFR3, TOV3);
}

uint16_t time_passed(void){
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
	uint16_t time_passed = TCNT3;
     bc8:	c0 91 94 00 	lds	r28, 0x0094
     bcc:	d0 91 95 00 	lds	r29, 0x0095
	time_reset();
     bd0:	ec df       	rcall	.-40     	; 0xbaa <time_reset>
	if (time_passed == 0){
     bd2:	20 97       	sbiw	r28, 0x00	; 0
     bd4:	19 f4       	brne	.+6      	; 0xbdc <time_passed+0x18>
		return 1;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <time_passed+0x1c>
	}
	return time_passed;
     bdc:	8c 2f       	mov	r24, r28
     bde:	9d 2f       	mov	r25, r29
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret

00000be6 <TWI_Master_Initialise>:
     be6:	8c e0       	ldi	r24, 0x0C	; 12
     be8:	80 93 b8 00 	sts	0x00B8, r24
     bec:	8f ef       	ldi	r24, 0xFF	; 255
     bee:	80 93 bb 00 	sts	0x00BB, r24
     bf2:	84 e0       	ldi	r24, 0x04	; 4
     bf4:	80 93 bc 00 	sts	0x00BC, r24
     bf8:	08 95       	ret

00000bfa <TWI_Start_Transceiver_With_Data>:
     bfa:	ec eb       	ldi	r30, 0xBC	; 188
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	20 81       	ld	r18, Z
     c00:	20 fd       	sbrc	r18, 0
     c02:	fd cf       	rjmp	.-6      	; 0xbfe <TWI_Start_Transceiver_With_Data+0x4>
     c04:	60 93 f5 04 	sts	0x04F5, r22
     c08:	fc 01       	movw	r30, r24
     c0a:	20 81       	ld	r18, Z
     c0c:	20 93 f6 04 	sts	0x04F6, r18
     c10:	20 fd       	sbrc	r18, 0
     c12:	0c c0       	rjmp	.+24     	; 0xc2c <TWI_Start_Transceiver_With_Data+0x32>
     c14:	62 30       	cpi	r22, 0x02	; 2
     c16:	50 f0       	brcs	.+20     	; 0xc2c <TWI_Start_Transceiver_With_Data+0x32>
     c18:	dc 01       	movw	r26, r24
     c1a:	11 96       	adiw	r26, 0x01	; 1
     c1c:	e7 ef       	ldi	r30, 0xF7	; 247
     c1e:	f4 e0       	ldi	r31, 0x04	; 4
     c20:	81 e0       	ldi	r24, 0x01	; 1
     c22:	9d 91       	ld	r25, X+
     c24:	91 93       	st	Z+, r25
     c26:	8f 5f       	subi	r24, 0xFF	; 255
     c28:	86 13       	cpse	r24, r22
     c2a:	fb cf       	rjmp	.-10     	; 0xc22 <TWI_Start_Transceiver_With_Data+0x28>
     c2c:	10 92 f4 04 	sts	0x04F4, r1
     c30:	88 ef       	ldi	r24, 0xF8	; 248
     c32:	80 93 06 02 	sts	0x0206, r24
     c36:	85 ea       	ldi	r24, 0xA5	; 165
     c38:	80 93 bc 00 	sts	0x00BC, r24
     c3c:	08 95       	ret

00000c3e <__vector_39>:
     c3e:	1f 92       	push	r1
     c40:	0f 92       	push	r0
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	0f 92       	push	r0
     c46:	11 24       	eor	r1, r1
     c48:	0b b6       	in	r0, 0x3b	; 59
     c4a:	0f 92       	push	r0
     c4c:	2f 93       	push	r18
     c4e:	3f 93       	push	r19
     c50:	8f 93       	push	r24
     c52:	9f 93       	push	r25
     c54:	af 93       	push	r26
     c56:	bf 93       	push	r27
     c58:	ef 93       	push	r30
     c5a:	ff 93       	push	r31
     c5c:	80 91 b9 00 	lds	r24, 0x00B9
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	fc 01       	movw	r30, r24
     c64:	38 97       	sbiw	r30, 0x08	; 8
     c66:	e1 35       	cpi	r30, 0x51	; 81
     c68:	f1 05       	cpc	r31, r1
     c6a:	08 f0       	brcs	.+2      	; 0xc6e <__vector_39+0x30>
     c6c:	55 c0       	rjmp	.+170    	; 0xd18 <__vector_39+0xda>
     c6e:	ee 58       	subi	r30, 0x8E	; 142
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	32 c3       	rjmp	.+1636   	; 0x12d8 <__tablejump2__>
     c74:	10 92 f3 04 	sts	0x04F3, r1
     c78:	e0 91 f3 04 	lds	r30, 0x04F3
     c7c:	80 91 f5 04 	lds	r24, 0x04F5
     c80:	e8 17       	cp	r30, r24
     c82:	70 f4       	brcc	.+28     	; 0xca0 <__vector_39+0x62>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8e 0f       	add	r24, r30
     c88:	80 93 f3 04 	sts	0x04F3, r24
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	ea 50       	subi	r30, 0x0A	; 10
     c90:	fb 4f       	sbci	r31, 0xFB	; 251
     c92:	80 81       	ld	r24, Z
     c94:	80 93 bb 00 	sts	0x00BB, r24
     c98:	85 e8       	ldi	r24, 0x85	; 133
     c9a:	80 93 bc 00 	sts	0x00BC, r24
     c9e:	43 c0       	rjmp	.+134    	; 0xd26 <__vector_39+0xe8>
     ca0:	80 91 f4 04 	lds	r24, 0x04F4
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	80 93 f4 04 	sts	0x04F4, r24
     caa:	84 e9       	ldi	r24, 0x94	; 148
     cac:	80 93 bc 00 	sts	0x00BC, r24
     cb0:	3a c0       	rjmp	.+116    	; 0xd26 <__vector_39+0xe8>
     cb2:	e0 91 f3 04 	lds	r30, 0x04F3
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	8e 0f       	add	r24, r30
     cba:	80 93 f3 04 	sts	0x04F3, r24
     cbe:	80 91 bb 00 	lds	r24, 0x00BB
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	ea 50       	subi	r30, 0x0A	; 10
     cc6:	fb 4f       	sbci	r31, 0xFB	; 251
     cc8:	80 83       	st	Z, r24
     cca:	20 91 f3 04 	lds	r18, 0x04F3
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	80 91 f5 04 	lds	r24, 0x04F5
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	28 17       	cp	r18, r24
     cda:	39 07       	cpc	r19, r25
     cdc:	24 f4       	brge	.+8      	; 0xce6 <__vector_39+0xa8>
     cde:	85 ec       	ldi	r24, 0xC5	; 197
     ce0:	80 93 bc 00 	sts	0x00BC, r24
     ce4:	20 c0       	rjmp	.+64     	; 0xd26 <__vector_39+0xe8>
     ce6:	85 e8       	ldi	r24, 0x85	; 133
     ce8:	80 93 bc 00 	sts	0x00BC, r24
     cec:	1c c0       	rjmp	.+56     	; 0xd26 <__vector_39+0xe8>
     cee:	80 91 bb 00 	lds	r24, 0x00BB
     cf2:	e0 91 f3 04 	lds	r30, 0x04F3
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	ea 50       	subi	r30, 0x0A	; 10
     cfa:	fb 4f       	sbci	r31, 0xFB	; 251
     cfc:	80 83       	st	Z, r24
     cfe:	80 91 f4 04 	lds	r24, 0x04F4
     d02:	81 60       	ori	r24, 0x01	; 1
     d04:	80 93 f4 04 	sts	0x04F4, r24
     d08:	84 e9       	ldi	r24, 0x94	; 148
     d0a:	80 93 bc 00 	sts	0x00BC, r24
     d0e:	0b c0       	rjmp	.+22     	; 0xd26 <__vector_39+0xe8>
     d10:	85 ea       	ldi	r24, 0xA5	; 165
     d12:	80 93 bc 00 	sts	0x00BC, r24
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <__vector_39+0xe8>
     d18:	80 91 b9 00 	lds	r24, 0x00B9
     d1c:	80 93 06 02 	sts	0x0206, r24
     d20:	84 e0       	ldi	r24, 0x04	; 4
     d22:	80 93 bc 00 	sts	0x00BC, r24
     d26:	ff 91       	pop	r31
     d28:	ef 91       	pop	r30
     d2a:	bf 91       	pop	r27
     d2c:	af 91       	pop	r26
     d2e:	9f 91       	pop	r25
     d30:	8f 91       	pop	r24
     d32:	3f 91       	pop	r19
     d34:	2f 91       	pop	r18
     d36:	0f 90       	pop	r0
     d38:	0b be       	out	0x3b, r0	; 59
     d3a:	0f 90       	pop	r0
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	0f 90       	pop	r0
     d40:	1f 90       	pop	r1
     d42:	18 95       	reti

00000d44 <usart_transmit_to_computer>:
     d44:	e0 ec       	ldi	r30, 0xC0	; 192
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	90 81       	ld	r25, Z
     d4a:	95 ff       	sbrs	r25, 5
     d4c:	fd cf       	rjmp	.-6      	; 0xd48 <usart_transmit_to_computer+0x4>
     d4e:	80 93 c6 00 	sts	0x00C6, r24
     d52:	08 95       	ret

00000d54 <usart_receive_from_computer>:
     d54:	e0 ec       	ldi	r30, 0xC0	; 192
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	88 23       	and	r24, r24
     d5c:	ec f7       	brge	.-6      	; 0xd58 <usart_receive_from_computer+0x4>
     d5e:	80 91 c6 00 	lds	r24, 0x00C6
     d62:	08 95       	ret

00000d64 <usart_init>:
     d64:	90 93 c5 00 	sts	0x00C5, r25
     d68:	80 93 c4 00 	sts	0x00C4, r24
     d6c:	88 e1       	ldi	r24, 0x18	; 24
     d6e:	80 93 c1 00 	sts	0x00C1, r24
     d72:	8e e0       	ldi	r24, 0x0E	; 14
     d74:	80 93 c2 00 	sts	0x00C2, r24
     d78:	6a ea       	ldi	r22, 0xAA	; 170
     d7a:	76 e0       	ldi	r23, 0x06	; 6
     d7c:	82 ea       	ldi	r24, 0xA2	; 162
     d7e:	96 e0       	ldi	r25, 0x06	; 6
     d80:	d8 c2       	rjmp	.+1456   	; 0x1332 <fdevopen>
     d82:	08 95       	ret

00000d84 <initialize>:
void test(void);
void test_servo_and_ir(void);


void initialize(void){
	cli();
     d84:	f8 94       	cli
	usart_init(MYUBRR);			printf("\n[NODE 2][main.c]: USART initialized.\n");
     d86:	87 e6       	ldi	r24, 0x67	; 103
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	ec df       	rcall	.-40     	; 0xd64 <usart_init>
     d8c:	87 e4       	ldi	r24, 0x47	; 71
     d8e:	93 e0       	ldi	r25, 0x03	; 3
     d90:	2b d3       	rcall	.+1622   	; 0x13e8 <puts>
	CAN_init();					printf("[NODE 2][main.c]: CAN initialized.\n");
     d92:	75 da       	rcall	.-2838   	; 0x27e <CAN_init>
     d94:	8d e6       	ldi	r24, 0x6D	; 109
     d96:	93 e0       	ldi	r25, 0x03	; 3
     d98:	27 d3       	rcall	.+1614   	; 0x13e8 <puts>
	servo_init();				printf("[NODE 2][main.c]: SERVO initialized.\n");
     d9a:	3d de       	rcall	.-902    	; 0xa16 <servo_init>
     d9c:	80 e9       	ldi	r24, 0x90	; 144
     d9e:	93 e0       	ldi	r25, 0x03	; 3
     da0:	23 d3       	rcall	.+1606   	; 0x13e8 <puts>
	IR_init();					printf("[NODE 2][main.c]: IR initialized.\n");
     da2:	5c db       	rcall	.-2376   	; 0x45c <IR_init>
     da4:	85 eb       	ldi	r24, 0xB5	; 181
     da6:	93 e0       	ldi	r25, 0x03	; 3
     da8:	1f d3       	rcall	.+1598   	; 0x13e8 <puts>
	motor_init(DEFAULT);		printf("[NODE 2][main.c]: MOTOR initialized!\n");
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	da dd       	rcall	.-1100   	; 0x962 <motor_init>
     dae:	87 ed       	ldi	r24, 0xD7	; 215
     db0:	93 e0       	ldi	r25, 0x03	; 3
     db2:	1a d3       	rcall	.+1588   	; 0x13e8 <puts>
	PI_init();					printf("[NODE 2][main.c]: PI initialized!\n");
     db4:	03 de       	rcall	.-1018   	; 0x9bc <PI_init>
     db6:	8c ef       	ldi	r24, 0xFC	; 252
     db8:	93 e0       	ldi	r25, 0x03	; 3
     dba:	16 d3       	rcall	.+1580   	; 0x13e8 <puts>
	GAME_init(CLOSED_LOOP);		printf("[NODE 2][main.c]: CONTROL initialized!\n");
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	4a db       	rcall	.-2412   	; 0x454 <GAME_init>
     dc0:	8e e1       	ldi	r24, 0x1E	; 30
     dc2:	94 e0       	ldi	r25, 0x04	; 4
     dc4:	11 d3       	rcall	.+1570   	; 0x13e8 <puts>
	solenoid_init();			printf("[NODE 2][main.c]: SOLENOID initialized!\n");
     dc6:	96 de       	rcall	.-724    	; 0xaf4 <solenoid_init>
     dc8:	85 e4       	ldi	r24, 0x45	; 69
     dca:	94 e0       	ldi	r25, 0x04	; 4
     dcc:	0d d3       	rcall	.+1562   	; 0x13e8 <puts>
								printf("\n====== INITIALIZATION COMPLETE ======\n\n");
     dce:	8d e6       	ldi	r24, 0x6D	; 109
     dd0:	94 e0       	ldi	r25, 0x04	; 4
     dd2:	0a d3       	rcall	.+1556   	; 0x13e8 <puts>
	sei();
     dd4:	78 94       	sei
     dd6:	08 95       	ret

00000dd8 <print_can_message>:
}


void print_can_message(can_message* msg) {
     dd8:	cf 92       	push	r12
     dda:	df 92       	push	r13
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	6c 01       	movw	r12, r24
	printf("\n=== CAN MESSAGE BEGIN ===\n");
     dea:	85 e9       	ldi	r24, 0x95	; 149
     dec:	94 e0       	ldi	r25, 0x04	; 4
     dee:	fc d2       	rcall	.+1528   	; 0x13e8 <puts>
	printf("id: %s\tlength: %d\t DATA:\n", msg->id, msg->length);
     df0:	f6 01       	movw	r30, r12
     df2:	82 81       	ldd	r24, Z+2	; 0x02
     df4:	1f 92       	push	r1
     df6:	8f 93       	push	r24
     df8:	81 81       	ldd	r24, Z+1	; 0x01
     dfa:	8f 93       	push	r24
     dfc:	80 81       	ld	r24, Z
     dfe:	8f 93       	push	r24
     e00:	80 eb       	ldi	r24, 0xB0	; 176
     e02:	94 e0       	ldi	r25, 0x04	; 4
     e04:	9f 93       	push	r25
     e06:	8f 93       	push	r24
     e08:	de d2       	rcall	.+1468   	; 0x13c6 <printf>
	for(int i = 0; i < msg->length; i++) {
     e0a:	f6 01       	movw	r30, r12
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	88 23       	and	r24, r24
     e1c:	f9 f0       	breq	.+62     	; 0xe5c <print_can_message+0x84>
     e1e:	76 01       	movw	r14, r12
     e20:	f3 e0       	ldi	r31, 0x03	; 3
     e22:	ef 0e       	add	r14, r31
     e24:	f1 1c       	adc	r15, r1
     e26:	c0 e0       	ldi	r28, 0x00	; 0
     e28:	d0 e0       	ldi	r29, 0x00	; 0
		printf("%x\t", msg->data[i]);
     e2a:	0a ec       	ldi	r16, 0xCA	; 202
     e2c:	14 e0       	ldi	r17, 0x04	; 4
     e2e:	f7 01       	movw	r30, r14
     e30:	21 91       	ld	r18, Z+
     e32:	7f 01       	movw	r14, r30
     e34:	82 2f       	mov	r24, r18
     e36:	99 27       	eor	r25, r25
     e38:	87 fd       	sbrc	r24, 7
     e3a:	90 95       	com	r25
     e3c:	9f 93       	push	r25
     e3e:	2f 93       	push	r18
     e40:	1f 93       	push	r17
     e42:	0f 93       	push	r16
     e44:	c0 d2       	rcall	.+1408   	; 0x13c6 <printf>


void print_can_message(can_message* msg) {
	printf("\n=== CAN MESSAGE BEGIN ===\n");
	printf("id: %s\tlength: %d\t DATA:\n", msg->id, msg->length);
	for(int i = 0; i < msg->length; i++) {
     e46:	21 96       	adiw	r28, 0x01	; 1
     e48:	f6 01       	movw	r30, r12
     e4a:	22 81       	ldd	r18, Z+2	; 0x02
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	c2 17       	cp	r28, r18
     e58:	d3 07       	cpc	r29, r19
     e5a:	4c f3       	brlt	.-46     	; 0xe2e <print_can_message+0x56>
		printf("%x\t", msg->data[i]);
	}
	printf("\n=== CAN MESSAGE END ===\n");
     e5c:	8e ec       	ldi	r24, 0xCE	; 206
     e5e:	94 e0       	ldi	r25, 0x04	; 4
     e60:	c3 d2       	rcall	.+1414   	; 0x13e8 <puts>
}
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	ff 90       	pop	r15
     e6c:	ef 90       	pop	r14
     e6e:	df 90       	pop	r13
     e70:	cf 90       	pop	r12
     e72:	08 95       	ret

00000e74 <main>:


int main(void){
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	2b 97       	sbiw	r28, 0x0b	; 11
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
	initialize();
     e88:	7d df       	rcall	.-262    	; 0xd84 <initialize>
	//GAME_loop();
	while(1) {
		can_message msg;
		CAN_message_receive(&msg);
     e8a:	ce 01       	movw	r24, r28
     e8c:	01 96       	adiw	r24, 0x01	; 1
     e8e:	12 da       	rcall	.-3036   	; 0x2b4 <CAN_message_receive>
		
		if (msg.id == 's') {
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	83 37       	cpi	r24, 0x73	; 115
     e96:	91 05       	cpc	r25, r1
     e98:	c1 f7       	brne	.-16     	; 0xe8a <main+0x16>
			print_can_message(&msg);
     e9a:	ce 01       	movw	r24, r28
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	9c df       	rcall	.-200    	; 0xdd8 <print_can_message>
		}
	}
     ea0:	f4 cf       	rjmp	.-24     	; 0xe8a <main+0x16>

00000ea2 <__subsf3>:
     ea2:	50 58       	subi	r21, 0x80	; 128

00000ea4 <__addsf3>:
     ea4:	bb 27       	eor	r27, r27
     ea6:	aa 27       	eor	r26, r26
     ea8:	0e d0       	rcall	.+28     	; 0xec6 <__addsf3x>
     eaa:	75 c1       	rjmp	.+746    	; 0x1196 <__fp_round>
     eac:	66 d1       	rcall	.+716    	; 0x117a <__fp_pscA>
     eae:	30 f0       	brcs	.+12     	; 0xebc <__addsf3+0x18>
     eb0:	6b d1       	rcall	.+726    	; 0x1188 <__fp_pscB>
     eb2:	20 f0       	brcs	.+8      	; 0xebc <__addsf3+0x18>
     eb4:	31 f4       	brne	.+12     	; 0xec2 <__addsf3+0x1e>
     eb6:	9f 3f       	cpi	r25, 0xFF	; 255
     eb8:	11 f4       	brne	.+4      	; 0xebe <__addsf3+0x1a>
     eba:	1e f4       	brtc	.+6      	; 0xec2 <__addsf3+0x1e>
     ebc:	5b c1       	rjmp	.+694    	; 0x1174 <__fp_nan>
     ebe:	0e f4       	brtc	.+2      	; 0xec2 <__addsf3+0x1e>
     ec0:	e0 95       	com	r30
     ec2:	e7 fb       	bst	r30, 7
     ec4:	51 c1       	rjmp	.+674    	; 0x1168 <__fp_inf>

00000ec6 <__addsf3x>:
     ec6:	e9 2f       	mov	r30, r25
     ec8:	77 d1       	rcall	.+750    	; 0x11b8 <__fp_split3>
     eca:	80 f3       	brcs	.-32     	; 0xeac <__addsf3+0x8>
     ecc:	ba 17       	cp	r27, r26
     ece:	62 07       	cpc	r22, r18
     ed0:	73 07       	cpc	r23, r19
     ed2:	84 07       	cpc	r24, r20
     ed4:	95 07       	cpc	r25, r21
     ed6:	18 f0       	brcs	.+6      	; 0xede <__addsf3x+0x18>
     ed8:	71 f4       	brne	.+28     	; 0xef6 <__addsf3x+0x30>
     eda:	9e f5       	brtc	.+102    	; 0xf42 <__addsf3x+0x7c>
     edc:	8f c1       	rjmp	.+798    	; 0x11fc <__fp_zero>
     ede:	0e f4       	brtc	.+2      	; 0xee2 <__addsf3x+0x1c>
     ee0:	e0 95       	com	r30
     ee2:	0b 2e       	mov	r0, r27
     ee4:	ba 2f       	mov	r27, r26
     ee6:	a0 2d       	mov	r26, r0
     ee8:	0b 01       	movw	r0, r22
     eea:	b9 01       	movw	r22, r18
     eec:	90 01       	movw	r18, r0
     eee:	0c 01       	movw	r0, r24
     ef0:	ca 01       	movw	r24, r20
     ef2:	a0 01       	movw	r20, r0
     ef4:	11 24       	eor	r1, r1
     ef6:	ff 27       	eor	r31, r31
     ef8:	59 1b       	sub	r21, r25
     efa:	99 f0       	breq	.+38     	; 0xf22 <__addsf3x+0x5c>
     efc:	59 3f       	cpi	r21, 0xF9	; 249
     efe:	50 f4       	brcc	.+20     	; 0xf14 <__addsf3x+0x4e>
     f00:	50 3e       	cpi	r21, 0xE0	; 224
     f02:	68 f1       	brcs	.+90     	; 0xf5e <__addsf3x+0x98>
     f04:	1a 16       	cp	r1, r26
     f06:	f0 40       	sbci	r31, 0x00	; 0
     f08:	a2 2f       	mov	r26, r18
     f0a:	23 2f       	mov	r18, r19
     f0c:	34 2f       	mov	r19, r20
     f0e:	44 27       	eor	r20, r20
     f10:	58 5f       	subi	r21, 0xF8	; 248
     f12:	f3 cf       	rjmp	.-26     	; 0xefa <__addsf3x+0x34>
     f14:	46 95       	lsr	r20
     f16:	37 95       	ror	r19
     f18:	27 95       	ror	r18
     f1a:	a7 95       	ror	r26
     f1c:	f0 40       	sbci	r31, 0x00	; 0
     f1e:	53 95       	inc	r21
     f20:	c9 f7       	brne	.-14     	; 0xf14 <__addsf3x+0x4e>
     f22:	7e f4       	brtc	.+30     	; 0xf42 <__addsf3x+0x7c>
     f24:	1f 16       	cp	r1, r31
     f26:	ba 0b       	sbc	r27, r26
     f28:	62 0b       	sbc	r22, r18
     f2a:	73 0b       	sbc	r23, r19
     f2c:	84 0b       	sbc	r24, r20
     f2e:	ba f0       	brmi	.+46     	; 0xf5e <__addsf3x+0x98>
     f30:	91 50       	subi	r25, 0x01	; 1
     f32:	a1 f0       	breq	.+40     	; 0xf5c <__addsf3x+0x96>
     f34:	ff 0f       	add	r31, r31
     f36:	bb 1f       	adc	r27, r27
     f38:	66 1f       	adc	r22, r22
     f3a:	77 1f       	adc	r23, r23
     f3c:	88 1f       	adc	r24, r24
     f3e:	c2 f7       	brpl	.-16     	; 0xf30 <__addsf3x+0x6a>
     f40:	0e c0       	rjmp	.+28     	; 0xf5e <__addsf3x+0x98>
     f42:	ba 0f       	add	r27, r26
     f44:	62 1f       	adc	r22, r18
     f46:	73 1f       	adc	r23, r19
     f48:	84 1f       	adc	r24, r20
     f4a:	48 f4       	brcc	.+18     	; 0xf5e <__addsf3x+0x98>
     f4c:	87 95       	ror	r24
     f4e:	77 95       	ror	r23
     f50:	67 95       	ror	r22
     f52:	b7 95       	ror	r27
     f54:	f7 95       	ror	r31
     f56:	9e 3f       	cpi	r25, 0xFE	; 254
     f58:	08 f0       	brcs	.+2      	; 0xf5c <__addsf3x+0x96>
     f5a:	b3 cf       	rjmp	.-154    	; 0xec2 <__addsf3+0x1e>
     f5c:	93 95       	inc	r25
     f5e:	88 0f       	add	r24, r24
     f60:	08 f0       	brcs	.+2      	; 0xf64 <__addsf3x+0x9e>
     f62:	99 27       	eor	r25, r25
     f64:	ee 0f       	add	r30, r30
     f66:	97 95       	ror	r25
     f68:	87 95       	ror	r24
     f6a:	08 95       	ret

00000f6c <__cmpsf2>:
     f6c:	d9 d0       	rcall	.+434    	; 0x1120 <__fp_cmp>
     f6e:	08 f4       	brcc	.+2      	; 0xf72 <__cmpsf2+0x6>
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	08 95       	ret

00000f74 <__divsf3>:
     f74:	0c d0       	rcall	.+24     	; 0xf8e <__divsf3x>
     f76:	0f c1       	rjmp	.+542    	; 0x1196 <__fp_round>
     f78:	07 d1       	rcall	.+526    	; 0x1188 <__fp_pscB>
     f7a:	40 f0       	brcs	.+16     	; 0xf8c <__divsf3+0x18>
     f7c:	fe d0       	rcall	.+508    	; 0x117a <__fp_pscA>
     f7e:	30 f0       	brcs	.+12     	; 0xf8c <__divsf3+0x18>
     f80:	21 f4       	brne	.+8      	; 0xf8a <__divsf3+0x16>
     f82:	5f 3f       	cpi	r21, 0xFF	; 255
     f84:	19 f0       	breq	.+6      	; 0xf8c <__divsf3+0x18>
     f86:	f0 c0       	rjmp	.+480    	; 0x1168 <__fp_inf>
     f88:	51 11       	cpse	r21, r1
     f8a:	39 c1       	rjmp	.+626    	; 0x11fe <__fp_szero>
     f8c:	f3 c0       	rjmp	.+486    	; 0x1174 <__fp_nan>

00000f8e <__divsf3x>:
     f8e:	14 d1       	rcall	.+552    	; 0x11b8 <__fp_split3>
     f90:	98 f3       	brcs	.-26     	; 0xf78 <__divsf3+0x4>

00000f92 <__divsf3_pse>:
     f92:	99 23       	and	r25, r25
     f94:	c9 f3       	breq	.-14     	; 0xf88 <__divsf3+0x14>
     f96:	55 23       	and	r21, r21
     f98:	b1 f3       	breq	.-20     	; 0xf86 <__divsf3+0x12>
     f9a:	95 1b       	sub	r25, r21
     f9c:	55 0b       	sbc	r21, r21
     f9e:	bb 27       	eor	r27, r27
     fa0:	aa 27       	eor	r26, r26
     fa2:	62 17       	cp	r22, r18
     fa4:	73 07       	cpc	r23, r19
     fa6:	84 07       	cpc	r24, r20
     fa8:	38 f0       	brcs	.+14     	; 0xfb8 <__divsf3_pse+0x26>
     faa:	9f 5f       	subi	r25, 0xFF	; 255
     fac:	5f 4f       	sbci	r21, 0xFF	; 255
     fae:	22 0f       	add	r18, r18
     fb0:	33 1f       	adc	r19, r19
     fb2:	44 1f       	adc	r20, r20
     fb4:	aa 1f       	adc	r26, r26
     fb6:	a9 f3       	breq	.-22     	; 0xfa2 <__divsf3_pse+0x10>
     fb8:	33 d0       	rcall	.+102    	; 0x1020 <__divsf3_pse+0x8e>
     fba:	0e 2e       	mov	r0, r30
     fbc:	3a f0       	brmi	.+14     	; 0xfcc <__divsf3_pse+0x3a>
     fbe:	e0 e8       	ldi	r30, 0x80	; 128
     fc0:	30 d0       	rcall	.+96     	; 0x1022 <__divsf3_pse+0x90>
     fc2:	91 50       	subi	r25, 0x01	; 1
     fc4:	50 40       	sbci	r21, 0x00	; 0
     fc6:	e6 95       	lsr	r30
     fc8:	00 1c       	adc	r0, r0
     fca:	ca f7       	brpl	.-14     	; 0xfbe <__divsf3_pse+0x2c>
     fcc:	29 d0       	rcall	.+82     	; 0x1020 <__divsf3_pse+0x8e>
     fce:	fe 2f       	mov	r31, r30
     fd0:	27 d0       	rcall	.+78     	; 0x1020 <__divsf3_pse+0x8e>
     fd2:	66 0f       	add	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	88 1f       	adc	r24, r24
     fd8:	bb 1f       	adc	r27, r27
     fda:	26 17       	cp	r18, r22
     fdc:	37 07       	cpc	r19, r23
     fde:	48 07       	cpc	r20, r24
     fe0:	ab 07       	cpc	r26, r27
     fe2:	b0 e8       	ldi	r27, 0x80	; 128
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <__divsf3_pse+0x56>
     fe6:	bb 0b       	sbc	r27, r27
     fe8:	80 2d       	mov	r24, r0
     fea:	bf 01       	movw	r22, r30
     fec:	ff 27       	eor	r31, r31
     fee:	93 58       	subi	r25, 0x83	; 131
     ff0:	5f 4f       	sbci	r21, 0xFF	; 255
     ff2:	2a f0       	brmi	.+10     	; 0xffe <__divsf3_pse+0x6c>
     ff4:	9e 3f       	cpi	r25, 0xFE	; 254
     ff6:	51 05       	cpc	r21, r1
     ff8:	68 f0       	brcs	.+26     	; 0x1014 <__divsf3_pse+0x82>
     ffa:	b6 c0       	rjmp	.+364    	; 0x1168 <__fp_inf>
     ffc:	00 c1       	rjmp	.+512    	; 0x11fe <__fp_szero>
     ffe:	5f 3f       	cpi	r21, 0xFF	; 255
    1000:	ec f3       	brlt	.-6      	; 0xffc <__divsf3_pse+0x6a>
    1002:	98 3e       	cpi	r25, 0xE8	; 232
    1004:	dc f3       	brlt	.-10     	; 0xffc <__divsf3_pse+0x6a>
    1006:	86 95       	lsr	r24
    1008:	77 95       	ror	r23
    100a:	67 95       	ror	r22
    100c:	b7 95       	ror	r27
    100e:	f7 95       	ror	r31
    1010:	9f 5f       	subi	r25, 0xFF	; 255
    1012:	c9 f7       	brne	.-14     	; 0x1006 <__divsf3_pse+0x74>
    1014:	88 0f       	add	r24, r24
    1016:	91 1d       	adc	r25, r1
    1018:	96 95       	lsr	r25
    101a:	87 95       	ror	r24
    101c:	97 f9       	bld	r25, 7
    101e:	08 95       	ret
    1020:	e1 e0       	ldi	r30, 0x01	; 1
    1022:	66 0f       	add	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	88 1f       	adc	r24, r24
    1028:	bb 1f       	adc	r27, r27
    102a:	62 17       	cp	r22, r18
    102c:	73 07       	cpc	r23, r19
    102e:	84 07       	cpc	r24, r20
    1030:	ba 07       	cpc	r27, r26
    1032:	20 f0       	brcs	.+8      	; 0x103c <__divsf3_pse+0xaa>
    1034:	62 1b       	sub	r22, r18
    1036:	73 0b       	sbc	r23, r19
    1038:	84 0b       	sbc	r24, r20
    103a:	ba 0b       	sbc	r27, r26
    103c:	ee 1f       	adc	r30, r30
    103e:	88 f7       	brcc	.-30     	; 0x1022 <__divsf3_pse+0x90>
    1040:	e0 95       	com	r30
    1042:	08 95       	ret

00001044 <__fixsfsi>:
    1044:	04 d0       	rcall	.+8      	; 0x104e <__fixunssfsi>
    1046:	68 94       	set
    1048:	b1 11       	cpse	r27, r1
    104a:	d9 c0       	rjmp	.+434    	; 0x11fe <__fp_szero>
    104c:	08 95       	ret

0000104e <__fixunssfsi>:
    104e:	bc d0       	rcall	.+376    	; 0x11c8 <__fp_splitA>
    1050:	88 f0       	brcs	.+34     	; 0x1074 <__fixunssfsi+0x26>
    1052:	9f 57       	subi	r25, 0x7F	; 127
    1054:	90 f0       	brcs	.+36     	; 0x107a <__fixunssfsi+0x2c>
    1056:	b9 2f       	mov	r27, r25
    1058:	99 27       	eor	r25, r25
    105a:	b7 51       	subi	r27, 0x17	; 23
    105c:	a0 f0       	brcs	.+40     	; 0x1086 <__fixunssfsi+0x38>
    105e:	d1 f0       	breq	.+52     	; 0x1094 <__fixunssfsi+0x46>
    1060:	66 0f       	add	r22, r22
    1062:	77 1f       	adc	r23, r23
    1064:	88 1f       	adc	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	1a f0       	brmi	.+6      	; 0x1070 <__fixunssfsi+0x22>
    106a:	ba 95       	dec	r27
    106c:	c9 f7       	brne	.-14     	; 0x1060 <__fixunssfsi+0x12>
    106e:	12 c0       	rjmp	.+36     	; 0x1094 <__fixunssfsi+0x46>
    1070:	b1 30       	cpi	r27, 0x01	; 1
    1072:	81 f0       	breq	.+32     	; 0x1094 <__fixunssfsi+0x46>
    1074:	c3 d0       	rcall	.+390    	; 0x11fc <__fp_zero>
    1076:	b1 e0       	ldi	r27, 0x01	; 1
    1078:	08 95       	ret
    107a:	c0 c0       	rjmp	.+384    	; 0x11fc <__fp_zero>
    107c:	67 2f       	mov	r22, r23
    107e:	78 2f       	mov	r23, r24
    1080:	88 27       	eor	r24, r24
    1082:	b8 5f       	subi	r27, 0xF8	; 248
    1084:	39 f0       	breq	.+14     	; 0x1094 <__fixunssfsi+0x46>
    1086:	b9 3f       	cpi	r27, 0xF9	; 249
    1088:	cc f3       	brlt	.-14     	; 0x107c <__fixunssfsi+0x2e>
    108a:	86 95       	lsr	r24
    108c:	77 95       	ror	r23
    108e:	67 95       	ror	r22
    1090:	b3 95       	inc	r27
    1092:	d9 f7       	brne	.-10     	; 0x108a <__fixunssfsi+0x3c>
    1094:	3e f4       	brtc	.+14     	; 0x10a4 <__fixunssfsi+0x56>
    1096:	90 95       	com	r25
    1098:	80 95       	com	r24
    109a:	70 95       	com	r23
    109c:	61 95       	neg	r22
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	8f 4f       	sbci	r24, 0xFF	; 255
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	08 95       	ret

000010a6 <__floatunsisf>:
    10a6:	e8 94       	clt
    10a8:	09 c0       	rjmp	.+18     	; 0x10bc <__floatsisf+0x12>

000010aa <__floatsisf>:
    10aa:	97 fb       	bst	r25, 7
    10ac:	3e f4       	brtc	.+14     	; 0x10bc <__floatsisf+0x12>
    10ae:	90 95       	com	r25
    10b0:	80 95       	com	r24
    10b2:	70 95       	com	r23
    10b4:	61 95       	neg	r22
    10b6:	7f 4f       	sbci	r23, 0xFF	; 255
    10b8:	8f 4f       	sbci	r24, 0xFF	; 255
    10ba:	9f 4f       	sbci	r25, 0xFF	; 255
    10bc:	99 23       	and	r25, r25
    10be:	a9 f0       	breq	.+42     	; 0x10ea <__floatsisf+0x40>
    10c0:	f9 2f       	mov	r31, r25
    10c2:	96 e9       	ldi	r25, 0x96	; 150
    10c4:	bb 27       	eor	r27, r27
    10c6:	93 95       	inc	r25
    10c8:	f6 95       	lsr	r31
    10ca:	87 95       	ror	r24
    10cc:	77 95       	ror	r23
    10ce:	67 95       	ror	r22
    10d0:	b7 95       	ror	r27
    10d2:	f1 11       	cpse	r31, r1
    10d4:	f8 cf       	rjmp	.-16     	; 0x10c6 <__floatsisf+0x1c>
    10d6:	fa f4       	brpl	.+62     	; 0x1116 <__floatsisf+0x6c>
    10d8:	bb 0f       	add	r27, r27
    10da:	11 f4       	brne	.+4      	; 0x10e0 <__floatsisf+0x36>
    10dc:	60 ff       	sbrs	r22, 0
    10de:	1b c0       	rjmp	.+54     	; 0x1116 <__floatsisf+0x6c>
    10e0:	6f 5f       	subi	r22, 0xFF	; 255
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	8f 4f       	sbci	r24, 0xFF	; 255
    10e6:	9f 4f       	sbci	r25, 0xFF	; 255
    10e8:	16 c0       	rjmp	.+44     	; 0x1116 <__floatsisf+0x6c>
    10ea:	88 23       	and	r24, r24
    10ec:	11 f0       	breq	.+4      	; 0x10f2 <__floatsisf+0x48>
    10ee:	96 e9       	ldi	r25, 0x96	; 150
    10f0:	11 c0       	rjmp	.+34     	; 0x1114 <__floatsisf+0x6a>
    10f2:	77 23       	and	r23, r23
    10f4:	21 f0       	breq	.+8      	; 0x10fe <__floatsisf+0x54>
    10f6:	9e e8       	ldi	r25, 0x8E	; 142
    10f8:	87 2f       	mov	r24, r23
    10fa:	76 2f       	mov	r23, r22
    10fc:	05 c0       	rjmp	.+10     	; 0x1108 <__floatsisf+0x5e>
    10fe:	66 23       	and	r22, r22
    1100:	71 f0       	breq	.+28     	; 0x111e <__floatsisf+0x74>
    1102:	96 e8       	ldi	r25, 0x86	; 134
    1104:	86 2f       	mov	r24, r22
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	2a f0       	brmi	.+10     	; 0x1116 <__floatsisf+0x6c>
    110c:	9a 95       	dec	r25
    110e:	66 0f       	add	r22, r22
    1110:	77 1f       	adc	r23, r23
    1112:	88 1f       	adc	r24, r24
    1114:	da f7       	brpl	.-10     	; 0x110c <__floatsisf+0x62>
    1116:	88 0f       	add	r24, r24
    1118:	96 95       	lsr	r25
    111a:	87 95       	ror	r24
    111c:	97 f9       	bld	r25, 7
    111e:	08 95       	ret

00001120 <__fp_cmp>:
    1120:	99 0f       	add	r25, r25
    1122:	00 08       	sbc	r0, r0
    1124:	55 0f       	add	r21, r21
    1126:	aa 0b       	sbc	r26, r26
    1128:	e0 e8       	ldi	r30, 0x80	; 128
    112a:	fe ef       	ldi	r31, 0xFE	; 254
    112c:	16 16       	cp	r1, r22
    112e:	17 06       	cpc	r1, r23
    1130:	e8 07       	cpc	r30, r24
    1132:	f9 07       	cpc	r31, r25
    1134:	c0 f0       	brcs	.+48     	; 0x1166 <__fp_cmp+0x46>
    1136:	12 16       	cp	r1, r18
    1138:	13 06       	cpc	r1, r19
    113a:	e4 07       	cpc	r30, r20
    113c:	f5 07       	cpc	r31, r21
    113e:	98 f0       	brcs	.+38     	; 0x1166 <__fp_cmp+0x46>
    1140:	62 1b       	sub	r22, r18
    1142:	73 0b       	sbc	r23, r19
    1144:	84 0b       	sbc	r24, r20
    1146:	95 0b       	sbc	r25, r21
    1148:	39 f4       	brne	.+14     	; 0x1158 <__fp_cmp+0x38>
    114a:	0a 26       	eor	r0, r26
    114c:	61 f0       	breq	.+24     	; 0x1166 <__fp_cmp+0x46>
    114e:	23 2b       	or	r18, r19
    1150:	24 2b       	or	r18, r20
    1152:	25 2b       	or	r18, r21
    1154:	21 f4       	brne	.+8      	; 0x115e <__fp_cmp+0x3e>
    1156:	08 95       	ret
    1158:	0a 26       	eor	r0, r26
    115a:	09 f4       	brne	.+2      	; 0x115e <__fp_cmp+0x3e>
    115c:	a1 40       	sbci	r26, 0x01	; 1
    115e:	a6 95       	lsr	r26
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	81 1d       	adc	r24, r1
    1164:	81 1d       	adc	r24, r1
    1166:	08 95       	ret

00001168 <__fp_inf>:
    1168:	97 f9       	bld	r25, 7
    116a:	9f 67       	ori	r25, 0x7F	; 127
    116c:	80 e8       	ldi	r24, 0x80	; 128
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	08 95       	ret

00001174 <__fp_nan>:
    1174:	9f ef       	ldi	r25, 0xFF	; 255
    1176:	80 ec       	ldi	r24, 0xC0	; 192
    1178:	08 95       	ret

0000117a <__fp_pscA>:
    117a:	00 24       	eor	r0, r0
    117c:	0a 94       	dec	r0
    117e:	16 16       	cp	r1, r22
    1180:	17 06       	cpc	r1, r23
    1182:	18 06       	cpc	r1, r24
    1184:	09 06       	cpc	r0, r25
    1186:	08 95       	ret

00001188 <__fp_pscB>:
    1188:	00 24       	eor	r0, r0
    118a:	0a 94       	dec	r0
    118c:	12 16       	cp	r1, r18
    118e:	13 06       	cpc	r1, r19
    1190:	14 06       	cpc	r1, r20
    1192:	05 06       	cpc	r0, r21
    1194:	08 95       	ret

00001196 <__fp_round>:
    1196:	09 2e       	mov	r0, r25
    1198:	03 94       	inc	r0
    119a:	00 0c       	add	r0, r0
    119c:	11 f4       	brne	.+4      	; 0x11a2 <__fp_round+0xc>
    119e:	88 23       	and	r24, r24
    11a0:	52 f0       	brmi	.+20     	; 0x11b6 <__fp_round+0x20>
    11a2:	bb 0f       	add	r27, r27
    11a4:	40 f4       	brcc	.+16     	; 0x11b6 <__fp_round+0x20>
    11a6:	bf 2b       	or	r27, r31
    11a8:	11 f4       	brne	.+4      	; 0x11ae <__fp_round+0x18>
    11aa:	60 ff       	sbrs	r22, 0
    11ac:	04 c0       	rjmp	.+8      	; 0x11b6 <__fp_round+0x20>
    11ae:	6f 5f       	subi	r22, 0xFF	; 255
    11b0:	7f 4f       	sbci	r23, 0xFF	; 255
    11b2:	8f 4f       	sbci	r24, 0xFF	; 255
    11b4:	9f 4f       	sbci	r25, 0xFF	; 255
    11b6:	08 95       	ret

000011b8 <__fp_split3>:
    11b8:	57 fd       	sbrc	r21, 7
    11ba:	90 58       	subi	r25, 0x80	; 128
    11bc:	44 0f       	add	r20, r20
    11be:	55 1f       	adc	r21, r21
    11c0:	59 f0       	breq	.+22     	; 0x11d8 <__fp_splitA+0x10>
    11c2:	5f 3f       	cpi	r21, 0xFF	; 255
    11c4:	71 f0       	breq	.+28     	; 0x11e2 <__fp_splitA+0x1a>
    11c6:	47 95       	ror	r20

000011c8 <__fp_splitA>:
    11c8:	88 0f       	add	r24, r24
    11ca:	97 fb       	bst	r25, 7
    11cc:	99 1f       	adc	r25, r25
    11ce:	61 f0       	breq	.+24     	; 0x11e8 <__fp_splitA+0x20>
    11d0:	9f 3f       	cpi	r25, 0xFF	; 255
    11d2:	79 f0       	breq	.+30     	; 0x11f2 <__fp_splitA+0x2a>
    11d4:	87 95       	ror	r24
    11d6:	08 95       	ret
    11d8:	12 16       	cp	r1, r18
    11da:	13 06       	cpc	r1, r19
    11dc:	14 06       	cpc	r1, r20
    11de:	55 1f       	adc	r21, r21
    11e0:	f2 cf       	rjmp	.-28     	; 0x11c6 <__fp_split3+0xe>
    11e2:	46 95       	lsr	r20
    11e4:	f1 df       	rcall	.-30     	; 0x11c8 <__fp_splitA>
    11e6:	08 c0       	rjmp	.+16     	; 0x11f8 <__fp_splitA+0x30>
    11e8:	16 16       	cp	r1, r22
    11ea:	17 06       	cpc	r1, r23
    11ec:	18 06       	cpc	r1, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	f1 cf       	rjmp	.-30     	; 0x11d4 <__fp_splitA+0xc>
    11f2:	86 95       	lsr	r24
    11f4:	71 05       	cpc	r23, r1
    11f6:	61 05       	cpc	r22, r1
    11f8:	08 94       	sec
    11fa:	08 95       	ret

000011fc <__fp_zero>:
    11fc:	e8 94       	clt

000011fe <__fp_szero>:
    11fe:	bb 27       	eor	r27, r27
    1200:	66 27       	eor	r22, r22
    1202:	77 27       	eor	r23, r23
    1204:	cb 01       	movw	r24, r22
    1206:	97 f9       	bld	r25, 7
    1208:	08 95       	ret

0000120a <__gesf2>:
    120a:	8a df       	rcall	.-236    	; 0x1120 <__fp_cmp>
    120c:	08 f4       	brcc	.+2      	; 0x1210 <__gesf2+0x6>
    120e:	8f ef       	ldi	r24, 0xFF	; 255
    1210:	08 95       	ret

00001212 <__mulsf3>:
    1212:	0b d0       	rcall	.+22     	; 0x122a <__mulsf3x>
    1214:	c0 cf       	rjmp	.-128    	; 0x1196 <__fp_round>
    1216:	b1 df       	rcall	.-158    	; 0x117a <__fp_pscA>
    1218:	28 f0       	brcs	.+10     	; 0x1224 <__mulsf3+0x12>
    121a:	b6 df       	rcall	.-148    	; 0x1188 <__fp_pscB>
    121c:	18 f0       	brcs	.+6      	; 0x1224 <__mulsf3+0x12>
    121e:	95 23       	and	r25, r21
    1220:	09 f0       	breq	.+2      	; 0x1224 <__mulsf3+0x12>
    1222:	a2 cf       	rjmp	.-188    	; 0x1168 <__fp_inf>
    1224:	a7 cf       	rjmp	.-178    	; 0x1174 <__fp_nan>
    1226:	11 24       	eor	r1, r1
    1228:	ea cf       	rjmp	.-44     	; 0x11fe <__fp_szero>

0000122a <__mulsf3x>:
    122a:	c6 df       	rcall	.-116    	; 0x11b8 <__fp_split3>
    122c:	a0 f3       	brcs	.-24     	; 0x1216 <__mulsf3+0x4>

0000122e <__mulsf3_pse>:
    122e:	95 9f       	mul	r25, r21
    1230:	d1 f3       	breq	.-12     	; 0x1226 <__mulsf3+0x14>
    1232:	95 0f       	add	r25, r21
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	55 1f       	adc	r21, r21
    1238:	62 9f       	mul	r22, r18
    123a:	f0 01       	movw	r30, r0
    123c:	72 9f       	mul	r23, r18
    123e:	bb 27       	eor	r27, r27
    1240:	f0 0d       	add	r31, r0
    1242:	b1 1d       	adc	r27, r1
    1244:	63 9f       	mul	r22, r19
    1246:	aa 27       	eor	r26, r26
    1248:	f0 0d       	add	r31, r0
    124a:	b1 1d       	adc	r27, r1
    124c:	aa 1f       	adc	r26, r26
    124e:	64 9f       	mul	r22, r20
    1250:	66 27       	eor	r22, r22
    1252:	b0 0d       	add	r27, r0
    1254:	a1 1d       	adc	r26, r1
    1256:	66 1f       	adc	r22, r22
    1258:	82 9f       	mul	r24, r18
    125a:	22 27       	eor	r18, r18
    125c:	b0 0d       	add	r27, r0
    125e:	a1 1d       	adc	r26, r1
    1260:	62 1f       	adc	r22, r18
    1262:	73 9f       	mul	r23, r19
    1264:	b0 0d       	add	r27, r0
    1266:	a1 1d       	adc	r26, r1
    1268:	62 1f       	adc	r22, r18
    126a:	83 9f       	mul	r24, r19
    126c:	a0 0d       	add	r26, r0
    126e:	61 1d       	adc	r22, r1
    1270:	22 1f       	adc	r18, r18
    1272:	74 9f       	mul	r23, r20
    1274:	33 27       	eor	r19, r19
    1276:	a0 0d       	add	r26, r0
    1278:	61 1d       	adc	r22, r1
    127a:	23 1f       	adc	r18, r19
    127c:	84 9f       	mul	r24, r20
    127e:	60 0d       	add	r22, r0
    1280:	21 1d       	adc	r18, r1
    1282:	82 2f       	mov	r24, r18
    1284:	76 2f       	mov	r23, r22
    1286:	6a 2f       	mov	r22, r26
    1288:	11 24       	eor	r1, r1
    128a:	9f 57       	subi	r25, 0x7F	; 127
    128c:	50 40       	sbci	r21, 0x00	; 0
    128e:	8a f0       	brmi	.+34     	; 0x12b2 <__mulsf3_pse+0x84>
    1290:	e1 f0       	breq	.+56     	; 0x12ca <__mulsf3_pse+0x9c>
    1292:	88 23       	and	r24, r24
    1294:	4a f0       	brmi	.+18     	; 0x12a8 <__mulsf3_pse+0x7a>
    1296:	ee 0f       	add	r30, r30
    1298:	ff 1f       	adc	r31, r31
    129a:	bb 1f       	adc	r27, r27
    129c:	66 1f       	adc	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	88 1f       	adc	r24, r24
    12a2:	91 50       	subi	r25, 0x01	; 1
    12a4:	50 40       	sbci	r21, 0x00	; 0
    12a6:	a9 f7       	brne	.-22     	; 0x1292 <__mulsf3_pse+0x64>
    12a8:	9e 3f       	cpi	r25, 0xFE	; 254
    12aa:	51 05       	cpc	r21, r1
    12ac:	70 f0       	brcs	.+28     	; 0x12ca <__mulsf3_pse+0x9c>
    12ae:	5c cf       	rjmp	.-328    	; 0x1168 <__fp_inf>
    12b0:	a6 cf       	rjmp	.-180    	; 0x11fe <__fp_szero>
    12b2:	5f 3f       	cpi	r21, 0xFF	; 255
    12b4:	ec f3       	brlt	.-6      	; 0x12b0 <__mulsf3_pse+0x82>
    12b6:	98 3e       	cpi	r25, 0xE8	; 232
    12b8:	dc f3       	brlt	.-10     	; 0x12b0 <__mulsf3_pse+0x82>
    12ba:	86 95       	lsr	r24
    12bc:	77 95       	ror	r23
    12be:	67 95       	ror	r22
    12c0:	b7 95       	ror	r27
    12c2:	f7 95       	ror	r31
    12c4:	e7 95       	ror	r30
    12c6:	9f 5f       	subi	r25, 0xFF	; 255
    12c8:	c1 f7       	brne	.-16     	; 0x12ba <__mulsf3_pse+0x8c>
    12ca:	fe 2b       	or	r31, r30
    12cc:	88 0f       	add	r24, r24
    12ce:	91 1d       	adc	r25, r1
    12d0:	96 95       	lsr	r25
    12d2:	87 95       	ror	r24
    12d4:	97 f9       	bld	r25, 7
    12d6:	08 95       	ret

000012d8 <__tablejump2__>:
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31

000012dc <__tablejump__>:
    12dc:	05 90       	lpm	r0, Z+
    12de:	f4 91       	lpm	r31, Z
    12e0:	e0 2d       	mov	r30, r0
    12e2:	19 94       	eijmp

000012e4 <__ashrdi3>:
    12e4:	97 fb       	bst	r25, 7
    12e6:	10 f8       	bld	r1, 0

000012e8 <__lshrdi3>:
    12e8:	16 94       	lsr	r1
    12ea:	00 08       	sbc	r0, r0
    12ec:	0f 93       	push	r16
    12ee:	08 30       	cpi	r16, 0x08	; 8
    12f0:	98 f0       	brcs	.+38     	; 0x1318 <__lshrdi3+0x30>
    12f2:	08 50       	subi	r16, 0x08	; 8
    12f4:	23 2f       	mov	r18, r19
    12f6:	34 2f       	mov	r19, r20
    12f8:	45 2f       	mov	r20, r21
    12fa:	56 2f       	mov	r21, r22
    12fc:	67 2f       	mov	r22, r23
    12fe:	78 2f       	mov	r23, r24
    1300:	89 2f       	mov	r24, r25
    1302:	90 2d       	mov	r25, r0
    1304:	f4 cf       	rjmp	.-24     	; 0x12ee <__lshrdi3+0x6>
    1306:	05 94       	asr	r0
    1308:	97 95       	ror	r25
    130a:	87 95       	ror	r24
    130c:	77 95       	ror	r23
    130e:	67 95       	ror	r22
    1310:	57 95       	ror	r21
    1312:	47 95       	ror	r20
    1314:	37 95       	ror	r19
    1316:	27 95       	ror	r18
    1318:	0a 95       	dec	r16
    131a:	aa f7       	brpl	.-22     	; 0x1306 <__lshrdi3+0x1e>
    131c:	0f 91       	pop	r16
    131e:	08 95       	ret

00001320 <__adddi3>:
    1320:	2a 0d       	add	r18, r10
    1322:	3b 1d       	adc	r19, r11
    1324:	4c 1d       	adc	r20, r12
    1326:	5d 1d       	adc	r21, r13
    1328:	6e 1d       	adc	r22, r14
    132a:	7f 1d       	adc	r23, r15
    132c:	80 1f       	adc	r24, r16
    132e:	91 1f       	adc	r25, r17
    1330:	08 95       	ret

00001332 <fdevopen>:
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	ec 01       	movw	r28, r24
    133c:	8b 01       	movw	r16, r22
    133e:	00 97       	sbiw	r24, 0x00	; 0
    1340:	31 f4       	brne	.+12     	; 0x134e <fdevopen+0x1c>
    1342:	61 15       	cp	r22, r1
    1344:	71 05       	cpc	r23, r1
    1346:	19 f4       	brne	.+6      	; 0x134e <fdevopen+0x1c>
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	37 c0       	rjmp	.+110    	; 0x13bc <fdevopen+0x8a>
    134e:	6e e0       	ldi	r22, 0x0E	; 14
    1350:	70 e0       	ldi	r23, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	63 d2       	rcall	.+1222   	; 0x181e <calloc>
    1358:	fc 01       	movw	r30, r24
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	a9 f3       	breq	.-22     	; 0x1348 <fdevopen+0x16>
    135e:	80 e8       	ldi	r24, 0x80	; 128
    1360:	83 83       	std	Z+3, r24	; 0x03
    1362:	01 15       	cp	r16, r1
    1364:	11 05       	cpc	r17, r1
    1366:	71 f0       	breq	.+28     	; 0x1384 <fdevopen+0x52>
    1368:	13 87       	std	Z+11, r17	; 0x0b
    136a:	02 87       	std	Z+10, r16	; 0x0a
    136c:	81 e8       	ldi	r24, 0x81	; 129
    136e:	83 83       	std	Z+3, r24	; 0x03
    1370:	80 91 13 05 	lds	r24, 0x0513
    1374:	90 91 14 05 	lds	r25, 0x0514
    1378:	89 2b       	or	r24, r25
    137a:	21 f4       	brne	.+8      	; 0x1384 <fdevopen+0x52>
    137c:	f0 93 14 05 	sts	0x0514, r31
    1380:	e0 93 13 05 	sts	0x0513, r30
    1384:	20 97       	sbiw	r28, 0x00	; 0
    1386:	c9 f0       	breq	.+50     	; 0x13ba <fdevopen+0x88>
    1388:	d1 87       	std	Z+9, r29	; 0x09
    138a:	c0 87       	std	Z+8, r28	; 0x08
    138c:	83 81       	ldd	r24, Z+3	; 0x03
    138e:	82 60       	ori	r24, 0x02	; 2
    1390:	83 83       	std	Z+3, r24	; 0x03
    1392:	80 91 15 05 	lds	r24, 0x0515
    1396:	90 91 16 05 	lds	r25, 0x0516
    139a:	89 2b       	or	r24, r25
    139c:	71 f4       	brne	.+28     	; 0x13ba <fdevopen+0x88>
    139e:	f0 93 16 05 	sts	0x0516, r31
    13a2:	e0 93 15 05 	sts	0x0515, r30
    13a6:	80 91 17 05 	lds	r24, 0x0517
    13aa:	90 91 18 05 	lds	r25, 0x0518
    13ae:	89 2b       	or	r24, r25
    13b0:	21 f4       	brne	.+8      	; 0x13ba <fdevopen+0x88>
    13b2:	f0 93 18 05 	sts	0x0518, r31
    13b6:	e0 93 17 05 	sts	0x0517, r30
    13ba:	cf 01       	movw	r24, r30
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	08 95       	ret

000013c6 <printf>:
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	fe 01       	movw	r30, r28
    13d0:	36 96       	adiw	r30, 0x06	; 6
    13d2:	61 91       	ld	r22, Z+
    13d4:	71 91       	ld	r23, Z+
    13d6:	af 01       	movw	r20, r30
    13d8:	80 91 15 05 	lds	r24, 0x0515
    13dc:	90 91 16 05 	lds	r25, 0x0516
    13e0:	30 d0       	rcall	.+96     	; 0x1442 <vfprintf>
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	08 95       	ret

000013e8 <puts>:
    13e8:	0f 93       	push	r16
    13ea:	1f 93       	push	r17
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	e0 91 15 05 	lds	r30, 0x0515
    13f4:	f0 91 16 05 	lds	r31, 0x0516
    13f8:	23 81       	ldd	r18, Z+3	; 0x03
    13fa:	21 ff       	sbrs	r18, 1
    13fc:	1b c0       	rjmp	.+54     	; 0x1434 <puts+0x4c>
    13fe:	ec 01       	movw	r28, r24
    1400:	00 e0       	ldi	r16, 0x00	; 0
    1402:	10 e0       	ldi	r17, 0x00	; 0
    1404:	89 91       	ld	r24, Y+
    1406:	60 91 15 05 	lds	r22, 0x0515
    140a:	70 91 16 05 	lds	r23, 0x0516
    140e:	db 01       	movw	r26, r22
    1410:	18 96       	adiw	r26, 0x08	; 8
    1412:	ed 91       	ld	r30, X+
    1414:	fc 91       	ld	r31, X
    1416:	19 97       	sbiw	r26, 0x09	; 9
    1418:	88 23       	and	r24, r24
    141a:	31 f0       	breq	.+12     	; 0x1428 <puts+0x40>
    141c:	19 95       	eicall
    141e:	89 2b       	or	r24, r25
    1420:	89 f3       	breq	.-30     	; 0x1404 <puts+0x1c>
    1422:	0f ef       	ldi	r16, 0xFF	; 255
    1424:	1f ef       	ldi	r17, 0xFF	; 255
    1426:	ee cf       	rjmp	.-36     	; 0x1404 <puts+0x1c>
    1428:	8a e0       	ldi	r24, 0x0A	; 10
    142a:	19 95       	eicall
    142c:	89 2b       	or	r24, r25
    142e:	11 f4       	brne	.+4      	; 0x1434 <puts+0x4c>
    1430:	c8 01       	movw	r24, r16
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <puts+0x50>
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	9f ef       	ldi	r25, 0xFF	; 255
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	08 95       	ret

00001442 <vfprintf>:
    1442:	2f 92       	push	r2
    1444:	3f 92       	push	r3
    1446:	4f 92       	push	r4
    1448:	5f 92       	push	r5
    144a:	6f 92       	push	r6
    144c:	7f 92       	push	r7
    144e:	8f 92       	push	r8
    1450:	9f 92       	push	r9
    1452:	af 92       	push	r10
    1454:	bf 92       	push	r11
    1456:	cf 92       	push	r12
    1458:	df 92       	push	r13
    145a:	ef 92       	push	r14
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	2c 97       	sbiw	r28, 0x0c	; 12
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	7c 01       	movw	r14, r24
    1478:	6b 01       	movw	r12, r22
    147a:	8a 01       	movw	r16, r20
    147c:	fc 01       	movw	r30, r24
    147e:	17 82       	std	Z+7, r1	; 0x07
    1480:	16 82       	std	Z+6, r1	; 0x06
    1482:	83 81       	ldd	r24, Z+3	; 0x03
    1484:	81 ff       	sbrs	r24, 1
    1486:	b0 c1       	rjmp	.+864    	; 0x17e8 <vfprintf+0x3a6>
    1488:	ce 01       	movw	r24, r28
    148a:	01 96       	adiw	r24, 0x01	; 1
    148c:	4c 01       	movw	r8, r24
    148e:	f7 01       	movw	r30, r14
    1490:	93 81       	ldd	r25, Z+3	; 0x03
    1492:	f6 01       	movw	r30, r12
    1494:	93 fd       	sbrc	r25, 3
    1496:	85 91       	lpm	r24, Z+
    1498:	93 ff       	sbrs	r25, 3
    149a:	81 91       	ld	r24, Z+
    149c:	6f 01       	movw	r12, r30
    149e:	88 23       	and	r24, r24
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <vfprintf+0x62>
    14a2:	9e c1       	rjmp	.+828    	; 0x17e0 <vfprintf+0x39e>
    14a4:	85 32       	cpi	r24, 0x25	; 37
    14a6:	39 f4       	brne	.+14     	; 0x14b6 <vfprintf+0x74>
    14a8:	93 fd       	sbrc	r25, 3
    14aa:	85 91       	lpm	r24, Z+
    14ac:	93 ff       	sbrs	r25, 3
    14ae:	81 91       	ld	r24, Z+
    14b0:	6f 01       	movw	r12, r30
    14b2:	85 32       	cpi	r24, 0x25	; 37
    14b4:	21 f4       	brne	.+8      	; 0x14be <vfprintf+0x7c>
    14b6:	b7 01       	movw	r22, r14
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0f d3       	rcall	.+1566   	; 0x1ada <fputc>
    14bc:	e8 cf       	rjmp	.-48     	; 0x148e <vfprintf+0x4c>
    14be:	51 2c       	mov	r5, r1
    14c0:	31 2c       	mov	r3, r1
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	20 32       	cpi	r18, 0x20	; 32
    14c6:	a0 f4       	brcc	.+40     	; 0x14f0 <vfprintf+0xae>
    14c8:	8b 32       	cpi	r24, 0x2B	; 43
    14ca:	69 f0       	breq	.+26     	; 0x14e6 <vfprintf+0xa4>
    14cc:	30 f4       	brcc	.+12     	; 0x14da <vfprintf+0x98>
    14ce:	80 32       	cpi	r24, 0x20	; 32
    14d0:	59 f0       	breq	.+22     	; 0x14e8 <vfprintf+0xa6>
    14d2:	83 32       	cpi	r24, 0x23	; 35
    14d4:	69 f4       	brne	.+26     	; 0x14f0 <vfprintf+0xae>
    14d6:	20 61       	ori	r18, 0x10	; 16
    14d8:	2c c0       	rjmp	.+88     	; 0x1532 <vfprintf+0xf0>
    14da:	8d 32       	cpi	r24, 0x2D	; 45
    14dc:	39 f0       	breq	.+14     	; 0x14ec <vfprintf+0xaa>
    14de:	80 33       	cpi	r24, 0x30	; 48
    14e0:	39 f4       	brne	.+14     	; 0x14f0 <vfprintf+0xae>
    14e2:	21 60       	ori	r18, 0x01	; 1
    14e4:	26 c0       	rjmp	.+76     	; 0x1532 <vfprintf+0xf0>
    14e6:	22 60       	ori	r18, 0x02	; 2
    14e8:	24 60       	ori	r18, 0x04	; 4
    14ea:	23 c0       	rjmp	.+70     	; 0x1532 <vfprintf+0xf0>
    14ec:	28 60       	ori	r18, 0x08	; 8
    14ee:	21 c0       	rjmp	.+66     	; 0x1532 <vfprintf+0xf0>
    14f0:	27 fd       	sbrc	r18, 7
    14f2:	27 c0       	rjmp	.+78     	; 0x1542 <vfprintf+0x100>
    14f4:	30 ed       	ldi	r19, 0xD0	; 208
    14f6:	38 0f       	add	r19, r24
    14f8:	3a 30       	cpi	r19, 0x0A	; 10
    14fa:	78 f4       	brcc	.+30     	; 0x151a <vfprintf+0xd8>
    14fc:	26 ff       	sbrs	r18, 6
    14fe:	06 c0       	rjmp	.+12     	; 0x150c <vfprintf+0xca>
    1500:	fa e0       	ldi	r31, 0x0A	; 10
    1502:	5f 9e       	mul	r5, r31
    1504:	30 0d       	add	r19, r0
    1506:	11 24       	eor	r1, r1
    1508:	53 2e       	mov	r5, r19
    150a:	13 c0       	rjmp	.+38     	; 0x1532 <vfprintf+0xf0>
    150c:	8a e0       	ldi	r24, 0x0A	; 10
    150e:	38 9e       	mul	r3, r24
    1510:	30 0d       	add	r19, r0
    1512:	11 24       	eor	r1, r1
    1514:	33 2e       	mov	r3, r19
    1516:	20 62       	ori	r18, 0x20	; 32
    1518:	0c c0       	rjmp	.+24     	; 0x1532 <vfprintf+0xf0>
    151a:	8e 32       	cpi	r24, 0x2E	; 46
    151c:	21 f4       	brne	.+8      	; 0x1526 <vfprintf+0xe4>
    151e:	26 fd       	sbrc	r18, 6
    1520:	5f c1       	rjmp	.+702    	; 0x17e0 <vfprintf+0x39e>
    1522:	20 64       	ori	r18, 0x40	; 64
    1524:	06 c0       	rjmp	.+12     	; 0x1532 <vfprintf+0xf0>
    1526:	8c 36       	cpi	r24, 0x6C	; 108
    1528:	11 f4       	brne	.+4      	; 0x152e <vfprintf+0xec>
    152a:	20 68       	ori	r18, 0x80	; 128
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <vfprintf+0xf0>
    152e:	88 36       	cpi	r24, 0x68	; 104
    1530:	41 f4       	brne	.+16     	; 0x1542 <vfprintf+0x100>
    1532:	f6 01       	movw	r30, r12
    1534:	93 fd       	sbrc	r25, 3
    1536:	85 91       	lpm	r24, Z+
    1538:	93 ff       	sbrs	r25, 3
    153a:	81 91       	ld	r24, Z+
    153c:	6f 01       	movw	r12, r30
    153e:	81 11       	cpse	r24, r1
    1540:	c1 cf       	rjmp	.-126    	; 0x14c4 <vfprintf+0x82>
    1542:	98 2f       	mov	r25, r24
    1544:	9f 7d       	andi	r25, 0xDF	; 223
    1546:	95 54       	subi	r25, 0x45	; 69
    1548:	93 30       	cpi	r25, 0x03	; 3
    154a:	28 f4       	brcc	.+10     	; 0x1556 <vfprintf+0x114>
    154c:	0c 5f       	subi	r16, 0xFC	; 252
    154e:	1f 4f       	sbci	r17, 0xFF	; 255
    1550:	ff e3       	ldi	r31, 0x3F	; 63
    1552:	f9 83       	std	Y+1, r31	; 0x01
    1554:	0d c0       	rjmp	.+26     	; 0x1570 <vfprintf+0x12e>
    1556:	83 36       	cpi	r24, 0x63	; 99
    1558:	31 f0       	breq	.+12     	; 0x1566 <vfprintf+0x124>
    155a:	83 37       	cpi	r24, 0x73	; 115
    155c:	71 f0       	breq	.+28     	; 0x157a <vfprintf+0x138>
    155e:	83 35       	cpi	r24, 0x53	; 83
    1560:	09 f0       	breq	.+2      	; 0x1564 <vfprintf+0x122>
    1562:	57 c0       	rjmp	.+174    	; 0x1612 <vfprintf+0x1d0>
    1564:	21 c0       	rjmp	.+66     	; 0x15a8 <vfprintf+0x166>
    1566:	f8 01       	movw	r30, r16
    1568:	80 81       	ld	r24, Z
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	0e 5f       	subi	r16, 0xFE	; 254
    156e:	1f 4f       	sbci	r17, 0xFF	; 255
    1570:	44 24       	eor	r4, r4
    1572:	43 94       	inc	r4
    1574:	51 2c       	mov	r5, r1
    1576:	54 01       	movw	r10, r8
    1578:	14 c0       	rjmp	.+40     	; 0x15a2 <vfprintf+0x160>
    157a:	38 01       	movw	r6, r16
    157c:	f2 e0       	ldi	r31, 0x02	; 2
    157e:	6f 0e       	add	r6, r31
    1580:	71 1c       	adc	r7, r1
    1582:	f8 01       	movw	r30, r16
    1584:	a0 80       	ld	r10, Z
    1586:	b1 80       	ldd	r11, Z+1	; 0x01
    1588:	26 ff       	sbrs	r18, 6
    158a:	03 c0       	rjmp	.+6      	; 0x1592 <vfprintf+0x150>
    158c:	65 2d       	mov	r22, r5
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <vfprintf+0x154>
    1592:	6f ef       	ldi	r22, 0xFF	; 255
    1594:	7f ef       	ldi	r23, 0xFF	; 255
    1596:	c5 01       	movw	r24, r10
    1598:	2c 87       	std	Y+12, r18	; 0x0c
    159a:	94 d2       	rcall	.+1320   	; 0x1ac4 <strnlen>
    159c:	2c 01       	movw	r4, r24
    159e:	83 01       	movw	r16, r6
    15a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    15a2:	2f 77       	andi	r18, 0x7F	; 127
    15a4:	22 2e       	mov	r2, r18
    15a6:	16 c0       	rjmp	.+44     	; 0x15d4 <vfprintf+0x192>
    15a8:	38 01       	movw	r6, r16
    15aa:	f2 e0       	ldi	r31, 0x02	; 2
    15ac:	6f 0e       	add	r6, r31
    15ae:	71 1c       	adc	r7, r1
    15b0:	f8 01       	movw	r30, r16
    15b2:	a0 80       	ld	r10, Z
    15b4:	b1 80       	ldd	r11, Z+1	; 0x01
    15b6:	26 ff       	sbrs	r18, 6
    15b8:	03 c0       	rjmp	.+6      	; 0x15c0 <vfprintf+0x17e>
    15ba:	65 2d       	mov	r22, r5
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <vfprintf+0x182>
    15c0:	6f ef       	ldi	r22, 0xFF	; 255
    15c2:	7f ef       	ldi	r23, 0xFF	; 255
    15c4:	c5 01       	movw	r24, r10
    15c6:	2c 87       	std	Y+12, r18	; 0x0c
    15c8:	6b d2       	rcall	.+1238   	; 0x1aa0 <strnlen_P>
    15ca:	2c 01       	movw	r4, r24
    15cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    15ce:	20 68       	ori	r18, 0x80	; 128
    15d0:	22 2e       	mov	r2, r18
    15d2:	83 01       	movw	r16, r6
    15d4:	23 fc       	sbrc	r2, 3
    15d6:	19 c0       	rjmp	.+50     	; 0x160a <vfprintf+0x1c8>
    15d8:	83 2d       	mov	r24, r3
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	48 16       	cp	r4, r24
    15de:	59 06       	cpc	r5, r25
    15e0:	a0 f4       	brcc	.+40     	; 0x160a <vfprintf+0x1c8>
    15e2:	b7 01       	movw	r22, r14
    15e4:	80 e2       	ldi	r24, 0x20	; 32
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	78 d2       	rcall	.+1264   	; 0x1ada <fputc>
    15ea:	3a 94       	dec	r3
    15ec:	f5 cf       	rjmp	.-22     	; 0x15d8 <vfprintf+0x196>
    15ee:	f5 01       	movw	r30, r10
    15f0:	27 fc       	sbrc	r2, 7
    15f2:	85 91       	lpm	r24, Z+
    15f4:	27 fe       	sbrs	r2, 7
    15f6:	81 91       	ld	r24, Z+
    15f8:	5f 01       	movw	r10, r30
    15fa:	b7 01       	movw	r22, r14
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	6d d2       	rcall	.+1242   	; 0x1ada <fputc>
    1600:	31 10       	cpse	r3, r1
    1602:	3a 94       	dec	r3
    1604:	f1 e0       	ldi	r31, 0x01	; 1
    1606:	4f 1a       	sub	r4, r31
    1608:	51 08       	sbc	r5, r1
    160a:	41 14       	cp	r4, r1
    160c:	51 04       	cpc	r5, r1
    160e:	79 f7       	brne	.-34     	; 0x15ee <vfprintf+0x1ac>
    1610:	de c0       	rjmp	.+444    	; 0x17ce <vfprintf+0x38c>
    1612:	84 36       	cpi	r24, 0x64	; 100
    1614:	11 f0       	breq	.+4      	; 0x161a <vfprintf+0x1d8>
    1616:	89 36       	cpi	r24, 0x69	; 105
    1618:	31 f5       	brne	.+76     	; 0x1666 <vfprintf+0x224>
    161a:	f8 01       	movw	r30, r16
    161c:	27 ff       	sbrs	r18, 7
    161e:	07 c0       	rjmp	.+14     	; 0x162e <vfprintf+0x1ec>
    1620:	60 81       	ld	r22, Z
    1622:	71 81       	ldd	r23, Z+1	; 0x01
    1624:	82 81       	ldd	r24, Z+2	; 0x02
    1626:	93 81       	ldd	r25, Z+3	; 0x03
    1628:	0c 5f       	subi	r16, 0xFC	; 252
    162a:	1f 4f       	sbci	r17, 0xFF	; 255
    162c:	08 c0       	rjmp	.+16     	; 0x163e <vfprintf+0x1fc>
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	88 27       	eor	r24, r24
    1634:	77 fd       	sbrc	r23, 7
    1636:	80 95       	com	r24
    1638:	98 2f       	mov	r25, r24
    163a:	0e 5f       	subi	r16, 0xFE	; 254
    163c:	1f 4f       	sbci	r17, 0xFF	; 255
    163e:	2f 76       	andi	r18, 0x6F	; 111
    1640:	b2 2e       	mov	r11, r18
    1642:	97 ff       	sbrs	r25, 7
    1644:	09 c0       	rjmp	.+18     	; 0x1658 <vfprintf+0x216>
    1646:	90 95       	com	r25
    1648:	80 95       	com	r24
    164a:	70 95       	com	r23
    164c:	61 95       	neg	r22
    164e:	7f 4f       	sbci	r23, 0xFF	; 255
    1650:	8f 4f       	sbci	r24, 0xFF	; 255
    1652:	9f 4f       	sbci	r25, 0xFF	; 255
    1654:	20 68       	ori	r18, 0x80	; 128
    1656:	b2 2e       	mov	r11, r18
    1658:	2a e0       	ldi	r18, 0x0A	; 10
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	a4 01       	movw	r20, r8
    165e:	6f d2       	rcall	.+1246   	; 0x1b3e <__ultoa_invert>
    1660:	a8 2e       	mov	r10, r24
    1662:	a8 18       	sub	r10, r8
    1664:	43 c0       	rjmp	.+134    	; 0x16ec <vfprintf+0x2aa>
    1666:	85 37       	cpi	r24, 0x75	; 117
    1668:	29 f4       	brne	.+10     	; 0x1674 <vfprintf+0x232>
    166a:	2f 7e       	andi	r18, 0xEF	; 239
    166c:	b2 2e       	mov	r11, r18
    166e:	2a e0       	ldi	r18, 0x0A	; 10
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	25 c0       	rjmp	.+74     	; 0x16be <vfprintf+0x27c>
    1674:	f2 2f       	mov	r31, r18
    1676:	f9 7f       	andi	r31, 0xF9	; 249
    1678:	bf 2e       	mov	r11, r31
    167a:	8f 36       	cpi	r24, 0x6F	; 111
    167c:	c1 f0       	breq	.+48     	; 0x16ae <vfprintf+0x26c>
    167e:	18 f4       	brcc	.+6      	; 0x1686 <vfprintf+0x244>
    1680:	88 35       	cpi	r24, 0x58	; 88
    1682:	79 f0       	breq	.+30     	; 0x16a2 <vfprintf+0x260>
    1684:	ad c0       	rjmp	.+346    	; 0x17e0 <vfprintf+0x39e>
    1686:	80 37       	cpi	r24, 0x70	; 112
    1688:	19 f0       	breq	.+6      	; 0x1690 <vfprintf+0x24e>
    168a:	88 37       	cpi	r24, 0x78	; 120
    168c:	21 f0       	breq	.+8      	; 0x1696 <vfprintf+0x254>
    168e:	a8 c0       	rjmp	.+336    	; 0x17e0 <vfprintf+0x39e>
    1690:	2f 2f       	mov	r18, r31
    1692:	20 61       	ori	r18, 0x10	; 16
    1694:	b2 2e       	mov	r11, r18
    1696:	b4 fe       	sbrs	r11, 4
    1698:	0d c0       	rjmp	.+26     	; 0x16b4 <vfprintf+0x272>
    169a:	8b 2d       	mov	r24, r11
    169c:	84 60       	ori	r24, 0x04	; 4
    169e:	b8 2e       	mov	r11, r24
    16a0:	09 c0       	rjmp	.+18     	; 0x16b4 <vfprintf+0x272>
    16a2:	24 ff       	sbrs	r18, 4
    16a4:	0a c0       	rjmp	.+20     	; 0x16ba <vfprintf+0x278>
    16a6:	9f 2f       	mov	r25, r31
    16a8:	96 60       	ori	r25, 0x06	; 6
    16aa:	b9 2e       	mov	r11, r25
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <vfprintf+0x278>
    16ae:	28 e0       	ldi	r18, 0x08	; 8
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	05 c0       	rjmp	.+10     	; 0x16be <vfprintf+0x27c>
    16b4:	20 e1       	ldi	r18, 0x10	; 16
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <vfprintf+0x27c>
    16ba:	20 e1       	ldi	r18, 0x10	; 16
    16bc:	32 e0       	ldi	r19, 0x02	; 2
    16be:	f8 01       	movw	r30, r16
    16c0:	b7 fe       	sbrs	r11, 7
    16c2:	07 c0       	rjmp	.+14     	; 0x16d2 <vfprintf+0x290>
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	0c 5f       	subi	r16, 0xFC	; 252
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	06 c0       	rjmp	.+12     	; 0x16de <vfprintf+0x29c>
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	0e 5f       	subi	r16, 0xFE	; 254
    16dc:	1f 4f       	sbci	r17, 0xFF	; 255
    16de:	a4 01       	movw	r20, r8
    16e0:	2e d2       	rcall	.+1116   	; 0x1b3e <__ultoa_invert>
    16e2:	a8 2e       	mov	r10, r24
    16e4:	a8 18       	sub	r10, r8
    16e6:	fb 2d       	mov	r31, r11
    16e8:	ff 77       	andi	r31, 0x7F	; 127
    16ea:	bf 2e       	mov	r11, r31
    16ec:	b6 fe       	sbrs	r11, 6
    16ee:	0b c0       	rjmp	.+22     	; 0x1706 <vfprintf+0x2c4>
    16f0:	2b 2d       	mov	r18, r11
    16f2:	2e 7f       	andi	r18, 0xFE	; 254
    16f4:	a5 14       	cp	r10, r5
    16f6:	50 f4       	brcc	.+20     	; 0x170c <vfprintf+0x2ca>
    16f8:	b4 fe       	sbrs	r11, 4
    16fa:	0a c0       	rjmp	.+20     	; 0x1710 <vfprintf+0x2ce>
    16fc:	b2 fc       	sbrc	r11, 2
    16fe:	08 c0       	rjmp	.+16     	; 0x1710 <vfprintf+0x2ce>
    1700:	2b 2d       	mov	r18, r11
    1702:	2e 7e       	andi	r18, 0xEE	; 238
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <vfprintf+0x2ce>
    1706:	7a 2c       	mov	r7, r10
    1708:	2b 2d       	mov	r18, r11
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <vfprintf+0x2d0>
    170c:	7a 2c       	mov	r7, r10
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <vfprintf+0x2d0>
    1710:	75 2c       	mov	r7, r5
    1712:	24 ff       	sbrs	r18, 4
    1714:	0d c0       	rjmp	.+26     	; 0x1730 <vfprintf+0x2ee>
    1716:	fe 01       	movw	r30, r28
    1718:	ea 0d       	add	r30, r10
    171a:	f1 1d       	adc	r31, r1
    171c:	80 81       	ld	r24, Z
    171e:	80 33       	cpi	r24, 0x30	; 48
    1720:	11 f4       	brne	.+4      	; 0x1726 <vfprintf+0x2e4>
    1722:	29 7e       	andi	r18, 0xE9	; 233
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <vfprintf+0x2f6>
    1726:	22 ff       	sbrs	r18, 2
    1728:	06 c0       	rjmp	.+12     	; 0x1736 <vfprintf+0x2f4>
    172a:	73 94       	inc	r7
    172c:	73 94       	inc	r7
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <vfprintf+0x2f6>
    1730:	82 2f       	mov	r24, r18
    1732:	86 78       	andi	r24, 0x86	; 134
    1734:	09 f0       	breq	.+2      	; 0x1738 <vfprintf+0x2f6>
    1736:	73 94       	inc	r7
    1738:	23 fd       	sbrc	r18, 3
    173a:	12 c0       	rjmp	.+36     	; 0x1760 <vfprintf+0x31e>
    173c:	20 ff       	sbrs	r18, 0
    173e:	06 c0       	rjmp	.+12     	; 0x174c <vfprintf+0x30a>
    1740:	5a 2c       	mov	r5, r10
    1742:	73 14       	cp	r7, r3
    1744:	18 f4       	brcc	.+6      	; 0x174c <vfprintf+0x30a>
    1746:	53 0c       	add	r5, r3
    1748:	57 18       	sub	r5, r7
    174a:	73 2c       	mov	r7, r3
    174c:	73 14       	cp	r7, r3
    174e:	60 f4       	brcc	.+24     	; 0x1768 <vfprintf+0x326>
    1750:	b7 01       	movw	r22, r14
    1752:	80 e2       	ldi	r24, 0x20	; 32
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	2c 87       	std	Y+12, r18	; 0x0c
    1758:	c0 d1       	rcall	.+896    	; 0x1ada <fputc>
    175a:	73 94       	inc	r7
    175c:	2c 85       	ldd	r18, Y+12	; 0x0c
    175e:	f6 cf       	rjmp	.-20     	; 0x174c <vfprintf+0x30a>
    1760:	73 14       	cp	r7, r3
    1762:	10 f4       	brcc	.+4      	; 0x1768 <vfprintf+0x326>
    1764:	37 18       	sub	r3, r7
    1766:	01 c0       	rjmp	.+2      	; 0x176a <vfprintf+0x328>
    1768:	31 2c       	mov	r3, r1
    176a:	24 ff       	sbrs	r18, 4
    176c:	11 c0       	rjmp	.+34     	; 0x1790 <vfprintf+0x34e>
    176e:	b7 01       	movw	r22, r14
    1770:	80 e3       	ldi	r24, 0x30	; 48
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	2c 87       	std	Y+12, r18	; 0x0c
    1776:	b1 d1       	rcall	.+866    	; 0x1ada <fputc>
    1778:	2c 85       	ldd	r18, Y+12	; 0x0c
    177a:	22 ff       	sbrs	r18, 2
    177c:	16 c0       	rjmp	.+44     	; 0x17aa <vfprintf+0x368>
    177e:	21 ff       	sbrs	r18, 1
    1780:	03 c0       	rjmp	.+6      	; 0x1788 <vfprintf+0x346>
    1782:	88 e5       	ldi	r24, 0x58	; 88
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	02 c0       	rjmp	.+4      	; 0x178c <vfprintf+0x34a>
    1788:	88 e7       	ldi	r24, 0x78	; 120
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	b7 01       	movw	r22, r14
    178e:	0c c0       	rjmp	.+24     	; 0x17a8 <vfprintf+0x366>
    1790:	82 2f       	mov	r24, r18
    1792:	86 78       	andi	r24, 0x86	; 134
    1794:	51 f0       	breq	.+20     	; 0x17aa <vfprintf+0x368>
    1796:	21 fd       	sbrc	r18, 1
    1798:	02 c0       	rjmp	.+4      	; 0x179e <vfprintf+0x35c>
    179a:	80 e2       	ldi	r24, 0x20	; 32
    179c:	01 c0       	rjmp	.+2      	; 0x17a0 <vfprintf+0x35e>
    179e:	8b e2       	ldi	r24, 0x2B	; 43
    17a0:	27 fd       	sbrc	r18, 7
    17a2:	8d e2       	ldi	r24, 0x2D	; 45
    17a4:	b7 01       	movw	r22, r14
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	98 d1       	rcall	.+816    	; 0x1ada <fputc>
    17aa:	a5 14       	cp	r10, r5
    17ac:	30 f4       	brcc	.+12     	; 0x17ba <vfprintf+0x378>
    17ae:	b7 01       	movw	r22, r14
    17b0:	80 e3       	ldi	r24, 0x30	; 48
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	92 d1       	rcall	.+804    	; 0x1ada <fputc>
    17b6:	5a 94       	dec	r5
    17b8:	f8 cf       	rjmp	.-16     	; 0x17aa <vfprintf+0x368>
    17ba:	aa 94       	dec	r10
    17bc:	f4 01       	movw	r30, r8
    17be:	ea 0d       	add	r30, r10
    17c0:	f1 1d       	adc	r31, r1
    17c2:	80 81       	ld	r24, Z
    17c4:	b7 01       	movw	r22, r14
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	88 d1       	rcall	.+784    	; 0x1ada <fputc>
    17ca:	a1 10       	cpse	r10, r1
    17cc:	f6 cf       	rjmp	.-20     	; 0x17ba <vfprintf+0x378>
    17ce:	33 20       	and	r3, r3
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <vfprintf+0x392>
    17d2:	5d ce       	rjmp	.-838    	; 0x148e <vfprintf+0x4c>
    17d4:	b7 01       	movw	r22, r14
    17d6:	80 e2       	ldi	r24, 0x20	; 32
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	7f d1       	rcall	.+766    	; 0x1ada <fputc>
    17dc:	3a 94       	dec	r3
    17de:	f7 cf       	rjmp	.-18     	; 0x17ce <vfprintf+0x38c>
    17e0:	f7 01       	movw	r30, r14
    17e2:	86 81       	ldd	r24, Z+6	; 0x06
    17e4:	97 81       	ldd	r25, Z+7	; 0x07
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <vfprintf+0x3aa>
    17e8:	8f ef       	ldi	r24, 0xFF	; 255
    17ea:	9f ef       	ldi	r25, 0xFF	; 255
    17ec:	2c 96       	adiw	r28, 0x0c	; 12
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	df 90       	pop	r13
    1806:	cf 90       	pop	r12
    1808:	bf 90       	pop	r11
    180a:	af 90       	pop	r10
    180c:	9f 90       	pop	r9
    180e:	8f 90       	pop	r8
    1810:	7f 90       	pop	r7
    1812:	6f 90       	pop	r6
    1814:	5f 90       	pop	r5
    1816:	4f 90       	pop	r4
    1818:	3f 90       	pop	r3
    181a:	2f 90       	pop	r2
    181c:	08 95       	ret

0000181e <calloc>:
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	86 9f       	mul	r24, r22
    1828:	80 01       	movw	r16, r0
    182a:	87 9f       	mul	r24, r23
    182c:	10 0d       	add	r17, r0
    182e:	96 9f       	mul	r25, r22
    1830:	10 0d       	add	r17, r0
    1832:	11 24       	eor	r1, r1
    1834:	c8 01       	movw	r24, r16
    1836:	0d d0       	rcall	.+26     	; 0x1852 <malloc>
    1838:	ec 01       	movw	r28, r24
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	21 f0       	breq	.+8      	; 0x1846 <calloc+0x28>
    183e:	a8 01       	movw	r20, r16
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	38 d1       	rcall	.+624    	; 0x1ab6 <memset>
    1846:	ce 01       	movw	r24, r28
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	08 95       	ret

00001852 <malloc>:
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	82 30       	cpi	r24, 0x02	; 2
    1858:	91 05       	cpc	r25, r1
    185a:	10 f4       	brcc	.+4      	; 0x1860 <malloc+0xe>
    185c:	82 e0       	ldi	r24, 0x02	; 2
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	e0 91 1b 05 	lds	r30, 0x051B
    1864:	f0 91 1c 05 	lds	r31, 0x051C
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	a0 e0       	ldi	r26, 0x00	; 0
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	30 97       	sbiw	r30, 0x00	; 0
    1872:	39 f1       	breq	.+78     	; 0x18c2 <malloc+0x70>
    1874:	40 81       	ld	r20, Z
    1876:	51 81       	ldd	r21, Z+1	; 0x01
    1878:	48 17       	cp	r20, r24
    187a:	59 07       	cpc	r21, r25
    187c:	b8 f0       	brcs	.+46     	; 0x18ac <malloc+0x5a>
    187e:	48 17       	cp	r20, r24
    1880:	59 07       	cpc	r21, r25
    1882:	71 f4       	brne	.+28     	; 0x18a0 <malloc+0x4e>
    1884:	82 81       	ldd	r24, Z+2	; 0x02
    1886:	93 81       	ldd	r25, Z+3	; 0x03
    1888:	10 97       	sbiw	r26, 0x00	; 0
    188a:	29 f0       	breq	.+10     	; 0x1896 <malloc+0x44>
    188c:	13 96       	adiw	r26, 0x03	; 3
    188e:	9c 93       	st	X, r25
    1890:	8e 93       	st	-X, r24
    1892:	12 97       	sbiw	r26, 0x02	; 2
    1894:	2c c0       	rjmp	.+88     	; 0x18ee <malloc+0x9c>
    1896:	90 93 1c 05 	sts	0x051C, r25
    189a:	80 93 1b 05 	sts	0x051B, r24
    189e:	27 c0       	rjmp	.+78     	; 0x18ee <malloc+0x9c>
    18a0:	21 15       	cp	r18, r1
    18a2:	31 05       	cpc	r19, r1
    18a4:	31 f0       	breq	.+12     	; 0x18b2 <malloc+0x60>
    18a6:	42 17       	cp	r20, r18
    18a8:	53 07       	cpc	r21, r19
    18aa:	18 f0       	brcs	.+6      	; 0x18b2 <malloc+0x60>
    18ac:	a9 01       	movw	r20, r18
    18ae:	db 01       	movw	r26, r22
    18b0:	01 c0       	rjmp	.+2      	; 0x18b4 <malloc+0x62>
    18b2:	ef 01       	movw	r28, r30
    18b4:	9a 01       	movw	r18, r20
    18b6:	bd 01       	movw	r22, r26
    18b8:	df 01       	movw	r26, r30
    18ba:	02 80       	ldd	r0, Z+2	; 0x02
    18bc:	f3 81       	ldd	r31, Z+3	; 0x03
    18be:	e0 2d       	mov	r30, r0
    18c0:	d7 cf       	rjmp	.-82     	; 0x1870 <malloc+0x1e>
    18c2:	21 15       	cp	r18, r1
    18c4:	31 05       	cpc	r19, r1
    18c6:	f9 f0       	breq	.+62     	; 0x1906 <malloc+0xb4>
    18c8:	28 1b       	sub	r18, r24
    18ca:	39 0b       	sbc	r19, r25
    18cc:	24 30       	cpi	r18, 0x04	; 4
    18ce:	31 05       	cpc	r19, r1
    18d0:	80 f4       	brcc	.+32     	; 0x18f2 <malloc+0xa0>
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	9b 81       	ldd	r25, Y+3	; 0x03
    18d6:	61 15       	cp	r22, r1
    18d8:	71 05       	cpc	r23, r1
    18da:	21 f0       	breq	.+8      	; 0x18e4 <malloc+0x92>
    18dc:	fb 01       	movw	r30, r22
    18de:	93 83       	std	Z+3, r25	; 0x03
    18e0:	82 83       	std	Z+2, r24	; 0x02
    18e2:	04 c0       	rjmp	.+8      	; 0x18ec <malloc+0x9a>
    18e4:	90 93 1c 05 	sts	0x051C, r25
    18e8:	80 93 1b 05 	sts	0x051B, r24
    18ec:	fe 01       	movw	r30, r28
    18ee:	32 96       	adiw	r30, 0x02	; 2
    18f0:	44 c0       	rjmp	.+136    	; 0x197a <malloc+0x128>
    18f2:	fe 01       	movw	r30, r28
    18f4:	e2 0f       	add	r30, r18
    18f6:	f3 1f       	adc	r31, r19
    18f8:	81 93       	st	Z+, r24
    18fa:	91 93       	st	Z+, r25
    18fc:	22 50       	subi	r18, 0x02	; 2
    18fe:	31 09       	sbc	r19, r1
    1900:	39 83       	std	Y+1, r19	; 0x01
    1902:	28 83       	st	Y, r18
    1904:	3a c0       	rjmp	.+116    	; 0x197a <malloc+0x128>
    1906:	20 91 19 05 	lds	r18, 0x0519
    190a:	30 91 1a 05 	lds	r19, 0x051A
    190e:	23 2b       	or	r18, r19
    1910:	41 f4       	brne	.+16     	; 0x1922 <malloc+0xd0>
    1912:	20 91 02 02 	lds	r18, 0x0202
    1916:	30 91 03 02 	lds	r19, 0x0203
    191a:	30 93 1a 05 	sts	0x051A, r19
    191e:	20 93 19 05 	sts	0x0519, r18
    1922:	20 91 00 02 	lds	r18, 0x0200
    1926:	30 91 01 02 	lds	r19, 0x0201
    192a:	21 15       	cp	r18, r1
    192c:	31 05       	cpc	r19, r1
    192e:	41 f4       	brne	.+16     	; 0x1940 <malloc+0xee>
    1930:	2d b7       	in	r18, 0x3d	; 61
    1932:	3e b7       	in	r19, 0x3e	; 62
    1934:	40 91 04 02 	lds	r20, 0x0204
    1938:	50 91 05 02 	lds	r21, 0x0205
    193c:	24 1b       	sub	r18, r20
    193e:	35 0b       	sbc	r19, r21
    1940:	e0 91 19 05 	lds	r30, 0x0519
    1944:	f0 91 1a 05 	lds	r31, 0x051A
    1948:	e2 17       	cp	r30, r18
    194a:	f3 07       	cpc	r31, r19
    194c:	a0 f4       	brcc	.+40     	; 0x1976 <malloc+0x124>
    194e:	2e 1b       	sub	r18, r30
    1950:	3f 0b       	sbc	r19, r31
    1952:	28 17       	cp	r18, r24
    1954:	39 07       	cpc	r19, r25
    1956:	78 f0       	brcs	.+30     	; 0x1976 <malloc+0x124>
    1958:	ac 01       	movw	r20, r24
    195a:	4e 5f       	subi	r20, 0xFE	; 254
    195c:	5f 4f       	sbci	r21, 0xFF	; 255
    195e:	24 17       	cp	r18, r20
    1960:	35 07       	cpc	r19, r21
    1962:	48 f0       	brcs	.+18     	; 0x1976 <malloc+0x124>
    1964:	4e 0f       	add	r20, r30
    1966:	5f 1f       	adc	r21, r31
    1968:	50 93 1a 05 	sts	0x051A, r21
    196c:	40 93 19 05 	sts	0x0519, r20
    1970:	81 93       	st	Z+, r24
    1972:	91 93       	st	Z+, r25
    1974:	02 c0       	rjmp	.+4      	; 0x197a <malloc+0x128>
    1976:	e0 e0       	ldi	r30, 0x00	; 0
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	cf 01       	movw	r24, r30
    197c:	df 91       	pop	r29
    197e:	cf 91       	pop	r28
    1980:	08 95       	ret

00001982 <free>:
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	09 f4       	brne	.+2      	; 0x198c <free+0xa>
    198a:	87 c0       	rjmp	.+270    	; 0x1a9a <free+0x118>
    198c:	fc 01       	movw	r30, r24
    198e:	32 97       	sbiw	r30, 0x02	; 2
    1990:	13 82       	std	Z+3, r1	; 0x03
    1992:	12 82       	std	Z+2, r1	; 0x02
    1994:	c0 91 1b 05 	lds	r28, 0x051B
    1998:	d0 91 1c 05 	lds	r29, 0x051C
    199c:	20 97       	sbiw	r28, 0x00	; 0
    199e:	81 f4       	brne	.+32     	; 0x19c0 <free+0x3e>
    19a0:	20 81       	ld	r18, Z
    19a2:	31 81       	ldd	r19, Z+1	; 0x01
    19a4:	28 0f       	add	r18, r24
    19a6:	39 1f       	adc	r19, r25
    19a8:	80 91 19 05 	lds	r24, 0x0519
    19ac:	90 91 1a 05 	lds	r25, 0x051A
    19b0:	82 17       	cp	r24, r18
    19b2:	93 07       	cpc	r25, r19
    19b4:	79 f5       	brne	.+94     	; 0x1a14 <free+0x92>
    19b6:	f0 93 1a 05 	sts	0x051A, r31
    19ba:	e0 93 19 05 	sts	0x0519, r30
    19be:	6d c0       	rjmp	.+218    	; 0x1a9a <free+0x118>
    19c0:	de 01       	movw	r26, r28
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	ae 17       	cp	r26, r30
    19c8:	bf 07       	cpc	r27, r31
    19ca:	50 f4       	brcc	.+20     	; 0x19e0 <free+0x5e>
    19cc:	12 96       	adiw	r26, 0x02	; 2
    19ce:	4d 91       	ld	r20, X+
    19d0:	5c 91       	ld	r21, X
    19d2:	13 97       	sbiw	r26, 0x03	; 3
    19d4:	9d 01       	movw	r18, r26
    19d6:	41 15       	cp	r20, r1
    19d8:	51 05       	cpc	r21, r1
    19da:	09 f1       	breq	.+66     	; 0x1a1e <free+0x9c>
    19dc:	da 01       	movw	r26, r20
    19de:	f3 cf       	rjmp	.-26     	; 0x19c6 <free+0x44>
    19e0:	b3 83       	std	Z+3, r27	; 0x03
    19e2:	a2 83       	std	Z+2, r26	; 0x02
    19e4:	40 81       	ld	r20, Z
    19e6:	51 81       	ldd	r21, Z+1	; 0x01
    19e8:	84 0f       	add	r24, r20
    19ea:	95 1f       	adc	r25, r21
    19ec:	8a 17       	cp	r24, r26
    19ee:	9b 07       	cpc	r25, r27
    19f0:	71 f4       	brne	.+28     	; 0x1a0e <free+0x8c>
    19f2:	8d 91       	ld	r24, X+
    19f4:	9c 91       	ld	r25, X
    19f6:	11 97       	sbiw	r26, 0x01	; 1
    19f8:	84 0f       	add	r24, r20
    19fa:	95 1f       	adc	r25, r21
    19fc:	02 96       	adiw	r24, 0x02	; 2
    19fe:	91 83       	std	Z+1, r25	; 0x01
    1a00:	80 83       	st	Z, r24
    1a02:	12 96       	adiw	r26, 0x02	; 2
    1a04:	8d 91       	ld	r24, X+
    1a06:	9c 91       	ld	r25, X
    1a08:	13 97       	sbiw	r26, 0x03	; 3
    1a0a:	93 83       	std	Z+3, r25	; 0x03
    1a0c:	82 83       	std	Z+2, r24	; 0x02
    1a0e:	21 15       	cp	r18, r1
    1a10:	31 05       	cpc	r19, r1
    1a12:	29 f4       	brne	.+10     	; 0x1a1e <free+0x9c>
    1a14:	f0 93 1c 05 	sts	0x051C, r31
    1a18:	e0 93 1b 05 	sts	0x051B, r30
    1a1c:	3e c0       	rjmp	.+124    	; 0x1a9a <free+0x118>
    1a1e:	d9 01       	movw	r26, r18
    1a20:	13 96       	adiw	r26, 0x03	; 3
    1a22:	fc 93       	st	X, r31
    1a24:	ee 93       	st	-X, r30
    1a26:	12 97       	sbiw	r26, 0x02	; 2
    1a28:	4d 91       	ld	r20, X+
    1a2a:	5d 91       	ld	r21, X+
    1a2c:	a4 0f       	add	r26, r20
    1a2e:	b5 1f       	adc	r27, r21
    1a30:	ea 17       	cp	r30, r26
    1a32:	fb 07       	cpc	r31, r27
    1a34:	79 f4       	brne	.+30     	; 0x1a54 <free+0xd2>
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	84 0f       	add	r24, r20
    1a3c:	95 1f       	adc	r25, r21
    1a3e:	02 96       	adiw	r24, 0x02	; 2
    1a40:	d9 01       	movw	r26, r18
    1a42:	11 96       	adiw	r26, 0x01	; 1
    1a44:	9c 93       	st	X, r25
    1a46:	8e 93       	st	-X, r24
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	13 96       	adiw	r26, 0x03	; 3
    1a4e:	9c 93       	st	X, r25
    1a50:	8e 93       	st	-X, r24
    1a52:	12 97       	sbiw	r26, 0x02	; 2
    1a54:	e0 e0       	ldi	r30, 0x00	; 0
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	19 f0       	breq	.+6      	; 0x1a66 <free+0xe4>
    1a60:	fe 01       	movw	r30, r28
    1a62:	ec 01       	movw	r28, r24
    1a64:	f9 cf       	rjmp	.-14     	; 0x1a58 <free+0xd6>
    1a66:	ce 01       	movw	r24, r28
    1a68:	02 96       	adiw	r24, 0x02	; 2
    1a6a:	28 81       	ld	r18, Y
    1a6c:	39 81       	ldd	r19, Y+1	; 0x01
    1a6e:	82 0f       	add	r24, r18
    1a70:	93 1f       	adc	r25, r19
    1a72:	20 91 19 05 	lds	r18, 0x0519
    1a76:	30 91 1a 05 	lds	r19, 0x051A
    1a7a:	28 17       	cp	r18, r24
    1a7c:	39 07       	cpc	r19, r25
    1a7e:	69 f4       	brne	.+26     	; 0x1a9a <free+0x118>
    1a80:	30 97       	sbiw	r30, 0x00	; 0
    1a82:	29 f4       	brne	.+10     	; 0x1a8e <free+0x10c>
    1a84:	10 92 1c 05 	sts	0x051C, r1
    1a88:	10 92 1b 05 	sts	0x051B, r1
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <free+0x110>
    1a8e:	13 82       	std	Z+3, r1	; 0x03
    1a90:	12 82       	std	Z+2, r1	; 0x02
    1a92:	d0 93 1a 05 	sts	0x051A, r29
    1a96:	c0 93 19 05 	sts	0x0519, r28
    1a9a:	df 91       	pop	r29
    1a9c:	cf 91       	pop	r28
    1a9e:	08 95       	ret

00001aa0 <strnlen_P>:
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	05 90       	lpm	r0, Z+
    1aa4:	61 50       	subi	r22, 0x01	; 1
    1aa6:	70 40       	sbci	r23, 0x00	; 0
    1aa8:	01 10       	cpse	r0, r1
    1aaa:	d8 f7       	brcc	.-10     	; 0x1aa2 <strnlen_P+0x2>
    1aac:	80 95       	com	r24
    1aae:	90 95       	com	r25
    1ab0:	8e 0f       	add	r24, r30
    1ab2:	9f 1f       	adc	r25, r31
    1ab4:	08 95       	ret

00001ab6 <memset>:
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	01 c0       	rjmp	.+2      	; 0x1abc <memset+0x6>
    1aba:	6d 93       	st	X+, r22
    1abc:	41 50       	subi	r20, 0x01	; 1
    1abe:	50 40       	sbci	r21, 0x00	; 0
    1ac0:	e0 f7       	brcc	.-8      	; 0x1aba <memset+0x4>
    1ac2:	08 95       	ret

00001ac4 <strnlen>:
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	61 50       	subi	r22, 0x01	; 1
    1ac8:	70 40       	sbci	r23, 0x00	; 0
    1aca:	01 90       	ld	r0, Z+
    1acc:	01 10       	cpse	r0, r1
    1ace:	d8 f7       	brcc	.-10     	; 0x1ac6 <strnlen+0x2>
    1ad0:	80 95       	com	r24
    1ad2:	90 95       	com	r25
    1ad4:	8e 0f       	add	r24, r30
    1ad6:	9f 1f       	adc	r25, r31
    1ad8:	08 95       	ret

00001ada <fputc>:
    1ada:	0f 93       	push	r16
    1adc:	1f 93       	push	r17
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	18 2f       	mov	r17, r24
    1ae4:	09 2f       	mov	r16, r25
    1ae6:	eb 01       	movw	r28, r22
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	81 fd       	sbrc	r24, 1
    1aec:	03 c0       	rjmp	.+6      	; 0x1af4 <fputc+0x1a>
    1aee:	8f ef       	ldi	r24, 0xFF	; 255
    1af0:	9f ef       	ldi	r25, 0xFF	; 255
    1af2:	20 c0       	rjmp	.+64     	; 0x1b34 <fputc+0x5a>
    1af4:	82 ff       	sbrs	r24, 2
    1af6:	10 c0       	rjmp	.+32     	; 0x1b18 <fputc+0x3e>
    1af8:	4e 81       	ldd	r20, Y+6	; 0x06
    1afa:	5f 81       	ldd	r21, Y+7	; 0x07
    1afc:	2c 81       	ldd	r18, Y+4	; 0x04
    1afe:	3d 81       	ldd	r19, Y+5	; 0x05
    1b00:	42 17       	cp	r20, r18
    1b02:	53 07       	cpc	r21, r19
    1b04:	7c f4       	brge	.+30     	; 0x1b24 <fputc+0x4a>
    1b06:	e8 81       	ld	r30, Y
    1b08:	f9 81       	ldd	r31, Y+1	; 0x01
    1b0a:	9f 01       	movw	r18, r30
    1b0c:	2f 5f       	subi	r18, 0xFF	; 255
    1b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b10:	39 83       	std	Y+1, r19	; 0x01
    1b12:	28 83       	st	Y, r18
    1b14:	10 83       	st	Z, r17
    1b16:	06 c0       	rjmp	.+12     	; 0x1b24 <fputc+0x4a>
    1b18:	e8 85       	ldd	r30, Y+8	; 0x08
    1b1a:	f9 85       	ldd	r31, Y+9	; 0x09
    1b1c:	81 2f       	mov	r24, r17
    1b1e:	19 95       	eicall
    1b20:	89 2b       	or	r24, r25
    1b22:	29 f7       	brne	.-54     	; 0x1aee <fputc+0x14>
    1b24:	2e 81       	ldd	r18, Y+6	; 0x06
    1b26:	3f 81       	ldd	r19, Y+7	; 0x07
    1b28:	2f 5f       	subi	r18, 0xFF	; 255
    1b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2c:	3f 83       	std	Y+7, r19	; 0x07
    1b2e:	2e 83       	std	Y+6, r18	; 0x06
    1b30:	81 2f       	mov	r24, r17
    1b32:	90 2f       	mov	r25, r16
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	1f 91       	pop	r17
    1b3a:	0f 91       	pop	r16
    1b3c:	08 95       	ret

00001b3e <__ultoa_invert>:
    1b3e:	fa 01       	movw	r30, r20
    1b40:	aa 27       	eor	r26, r26
    1b42:	28 30       	cpi	r18, 0x08	; 8
    1b44:	51 f1       	breq	.+84     	; 0x1b9a <__ultoa_invert+0x5c>
    1b46:	20 31       	cpi	r18, 0x10	; 16
    1b48:	81 f1       	breq	.+96     	; 0x1baa <__ultoa_invert+0x6c>
    1b4a:	e8 94       	clt
    1b4c:	6f 93       	push	r22
    1b4e:	6e 7f       	andi	r22, 0xFE	; 254
    1b50:	6e 5f       	subi	r22, 0xFE	; 254
    1b52:	7f 4f       	sbci	r23, 0xFF	; 255
    1b54:	8f 4f       	sbci	r24, 0xFF	; 255
    1b56:	9f 4f       	sbci	r25, 0xFF	; 255
    1b58:	af 4f       	sbci	r26, 0xFF	; 255
    1b5a:	b1 e0       	ldi	r27, 0x01	; 1
    1b5c:	3e d0       	rcall	.+124    	; 0x1bda <__ultoa_invert+0x9c>
    1b5e:	b4 e0       	ldi	r27, 0x04	; 4
    1b60:	3c d0       	rcall	.+120    	; 0x1bda <__ultoa_invert+0x9c>
    1b62:	67 0f       	add	r22, r23
    1b64:	78 1f       	adc	r23, r24
    1b66:	89 1f       	adc	r24, r25
    1b68:	9a 1f       	adc	r25, r26
    1b6a:	a1 1d       	adc	r26, r1
    1b6c:	68 0f       	add	r22, r24
    1b6e:	79 1f       	adc	r23, r25
    1b70:	8a 1f       	adc	r24, r26
    1b72:	91 1d       	adc	r25, r1
    1b74:	a1 1d       	adc	r26, r1
    1b76:	6a 0f       	add	r22, r26
    1b78:	71 1d       	adc	r23, r1
    1b7a:	81 1d       	adc	r24, r1
    1b7c:	91 1d       	adc	r25, r1
    1b7e:	a1 1d       	adc	r26, r1
    1b80:	20 d0       	rcall	.+64     	; 0x1bc2 <__ultoa_invert+0x84>
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <__ultoa_invert+0x48>
    1b84:	68 94       	set
    1b86:	3f 91       	pop	r19
    1b88:	2a e0       	ldi	r18, 0x0A	; 10
    1b8a:	26 9f       	mul	r18, r22
    1b8c:	11 24       	eor	r1, r1
    1b8e:	30 19       	sub	r19, r0
    1b90:	30 5d       	subi	r19, 0xD0	; 208
    1b92:	31 93       	st	Z+, r19
    1b94:	de f6       	brtc	.-74     	; 0x1b4c <__ultoa_invert+0xe>
    1b96:	cf 01       	movw	r24, r30
    1b98:	08 95       	ret
    1b9a:	46 2f       	mov	r20, r22
    1b9c:	47 70       	andi	r20, 0x07	; 7
    1b9e:	40 5d       	subi	r20, 0xD0	; 208
    1ba0:	41 93       	st	Z+, r20
    1ba2:	b3 e0       	ldi	r27, 0x03	; 3
    1ba4:	0f d0       	rcall	.+30     	; 0x1bc4 <__ultoa_invert+0x86>
    1ba6:	c9 f7       	brne	.-14     	; 0x1b9a <__ultoa_invert+0x5c>
    1ba8:	f6 cf       	rjmp	.-20     	; 0x1b96 <__ultoa_invert+0x58>
    1baa:	46 2f       	mov	r20, r22
    1bac:	4f 70       	andi	r20, 0x0F	; 15
    1bae:	40 5d       	subi	r20, 0xD0	; 208
    1bb0:	4a 33       	cpi	r20, 0x3A	; 58
    1bb2:	18 f0       	brcs	.+6      	; 0x1bba <__ultoa_invert+0x7c>
    1bb4:	49 5d       	subi	r20, 0xD9	; 217
    1bb6:	31 fd       	sbrc	r19, 1
    1bb8:	40 52       	subi	r20, 0x20	; 32
    1bba:	41 93       	st	Z+, r20
    1bbc:	02 d0       	rcall	.+4      	; 0x1bc2 <__ultoa_invert+0x84>
    1bbe:	a9 f7       	brne	.-22     	; 0x1baa <__ultoa_invert+0x6c>
    1bc0:	ea cf       	rjmp	.-44     	; 0x1b96 <__ultoa_invert+0x58>
    1bc2:	b4 e0       	ldi	r27, 0x04	; 4
    1bc4:	a6 95       	lsr	r26
    1bc6:	97 95       	ror	r25
    1bc8:	87 95       	ror	r24
    1bca:	77 95       	ror	r23
    1bcc:	67 95       	ror	r22
    1bce:	ba 95       	dec	r27
    1bd0:	c9 f7       	brne	.-14     	; 0x1bc4 <__ultoa_invert+0x86>
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	61 05       	cpc	r22, r1
    1bd6:	71 05       	cpc	r23, r1
    1bd8:	08 95       	ret
    1bda:	9b 01       	movw	r18, r22
    1bdc:	ac 01       	movw	r20, r24
    1bde:	0a 2e       	mov	r0, r26
    1be0:	06 94       	lsr	r0
    1be2:	57 95       	ror	r21
    1be4:	47 95       	ror	r20
    1be6:	37 95       	ror	r19
    1be8:	27 95       	ror	r18
    1bea:	ba 95       	dec	r27
    1bec:	c9 f7       	brne	.-14     	; 0x1be0 <__ultoa_invert+0xa2>
    1bee:	62 0f       	add	r22, r18
    1bf0:	73 1f       	adc	r23, r19
    1bf2:	84 1f       	adc	r24, r20
    1bf4:	95 1f       	adc	r25, r21
    1bf6:	a0 1d       	adc	r26, r0
    1bf8:	08 95       	ret

00001bfa <_exit>:
    1bfa:	f8 94       	cli

00001bfc <__stop_program>:
    1bfc:	ff cf       	rjmp	.-2      	; 0x1bfc <__stop_program>
