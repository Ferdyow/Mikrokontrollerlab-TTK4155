
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e0  00800200  0000200a  0000209e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000200a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  008004e0  008004e0  0000237e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000237e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003a8  00000000  00000000  000023da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b93  00000000  00000000  00002782  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001429  00000000  00000000  00005315  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003c61  00000000  00000000  0000673e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008f0  00000000  00000000  0000a3a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001313d  00000000  00000000  0000ac90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001713  00000000  00000000  0001ddcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002d8  00000000  00000000  0001f4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000527e  00000000  00000000  0001f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e1 c0       	rjmp	.+450    	; 0x1c8 <__bad_interrupt>
       6:	00 00       	nop
       8:	df c0       	rjmp	.+446    	; 0x1c8 <__bad_interrupt>
       a:	00 00       	nop
       c:	dd c0       	rjmp	.+442    	; 0x1c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	db c0       	rjmp	.+438    	; 0x1c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	d9 c0       	rjmp	.+434    	; 0x1c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	1c c1       	rjmp	.+568    	; 0x252 <__vector_6>
      1a:	00 00       	nop
      1c:	d5 c0       	rjmp	.+426    	; 0x1c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d3 c0       	rjmp	.+422    	; 0x1c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	d1 c0       	rjmp	.+418    	; 0x1c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	cf c0       	rjmp	.+414    	; 0x1c8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cd c0       	rjmp	.+410    	; 0x1c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	cb c0       	rjmp	.+406    	; 0x1c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	c9 c0       	rjmp	.+402    	; 0x1c8 <__bad_interrupt>
      36:	00 00       	nop
      38:	c7 c0       	rjmp	.+398    	; 0x1c8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c5 c0       	rjmp	.+394    	; 0x1c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c3 c0       	rjmp	.+390    	; 0x1c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	c1 c0       	rjmp	.+386    	; 0x1c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	bf c0       	rjmp	.+382    	; 0x1c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bd c0       	rjmp	.+378    	; 0x1c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	bb c0       	rjmp	.+374    	; 0x1c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	b9 c0       	rjmp	.+370    	; 0x1c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	b7 c0       	rjmp	.+366    	; 0x1c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b5 c0       	rjmp	.+362    	; 0x1c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b3 c0       	rjmp	.+358    	; 0x1c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	b1 c0       	rjmp	.+354    	; 0x1c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	af c0       	rjmp	.+350    	; 0x1c8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ad c0       	rjmp	.+346    	; 0x1c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ab c0       	rjmp	.+342    	; 0x1c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	a9 c0       	rjmp	.+338    	; 0x1c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	a7 c0       	rjmp	.+334    	; 0x1c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a5 c0       	rjmp	.+330    	; 0x1c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a3 c0       	rjmp	.+326    	; 0x1c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	a1 c0       	rjmp	.+322    	; 0x1c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	9f c0       	rjmp	.+318    	; 0x1c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9d c0       	rjmp	.+314    	; 0x1c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9b c0       	rjmp	.+310    	; 0x1c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	99 c0       	rjmp	.+306    	; 0x1c8 <__bad_interrupt>
      96:	00 00       	nop
      98:	97 c0       	rjmp	.+302    	; 0x1c8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 85 08 	jmp	0x110a	; 0x110a <__vector_39>
      a0:	93 c0       	rjmp	.+294    	; 0x1c8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	91 c0       	rjmp	.+290    	; 0x1c8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	bd c1       	rjmp	.+890    	; 0x424 <__vector_42>
      aa:	00 00       	nop
      ac:	8d c0       	rjmp	.+282    	; 0x1c8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8b c0       	rjmp	.+278    	; 0x1c8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	89 c0       	rjmp	.+274    	; 0x1c8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	87 c0       	rjmp	.+270    	; 0x1c8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0a c7       	rjmp	.+3604   	; 0xed2 <__vector_47>
      be:	00 00       	nop
      c0:	2c c7       	rjmp	.+3672   	; 0xf1a <__vector_48>
      c2:	00 00       	nop
      c4:	81 c0       	rjmp	.+258    	; 0x1c8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7f c0       	rjmp	.+254    	; 0x1c8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7d c0       	rjmp	.+250    	; 0x1c8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7b c0       	rjmp	.+246    	; 0x1c8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	79 c0       	rjmp	.+242    	; 0x1c8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	77 c0       	rjmp	.+238    	; 0x1c8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	75 c0       	rjmp	.+234    	; 0x1c8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	73 c0       	rjmp	.+230    	; 0x1c8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a0 08       	sbc	r10, r0
      e6:	f2 08       	sbc	r15, r2
      e8:	f2 08       	sbc	r15, r2
      ea:	f2 08       	sbc	r15, r2
      ec:	f2 08       	sbc	r15, r2
      ee:	f2 08       	sbc	r15, r2
      f0:	f2 08       	sbc	r15, r2
      f2:	f2 08       	sbc	r15, r2
      f4:	a0 08       	sbc	r10, r0
      f6:	f2 08       	sbc	r15, r2
      f8:	f2 08       	sbc	r15, r2
      fa:	f2 08       	sbc	r15, r2
      fc:	f2 08       	sbc	r15, r2
      fe:	f2 08       	sbc	r15, r2
     100:	f2 08       	sbc	r15, r2
     102:	f2 08       	sbc	r15, r2
     104:	a2 08       	sbc	r10, r2
     106:	f2 08       	sbc	r15, r2
     108:	f2 08       	sbc	r15, r2
     10a:	f2 08       	sbc	r15, r2
     10c:	f2 08       	sbc	r15, r2
     10e:	f2 08       	sbc	r15, r2
     110:	f2 08       	sbc	r15, r2
     112:	f2 08       	sbc	r15, r2
     114:	f2 08       	sbc	r15, r2
     116:	f2 08       	sbc	r15, r2
     118:	f2 08       	sbc	r15, r2
     11a:	f2 08       	sbc	r15, r2
     11c:	f2 08       	sbc	r15, r2
     11e:	f2 08       	sbc	r15, r2
     120:	f2 08       	sbc	r15, r2
     122:	f2 08       	sbc	r15, r2
     124:	a2 08       	sbc	r10, r2
     126:	f2 08       	sbc	r15, r2
     128:	f2 08       	sbc	r15, r2
     12a:	f2 08       	sbc	r15, r2
     12c:	f2 08       	sbc	r15, r2
     12e:	f2 08       	sbc	r15, r2
     130:	f2 08       	sbc	r15, r2
     132:	f2 08       	sbc	r15, r2
     134:	f2 08       	sbc	r15, r2
     136:	f2 08       	sbc	r15, r2
     138:	f2 08       	sbc	r15, r2
     13a:	f2 08       	sbc	r15, r2
     13c:	f2 08       	sbc	r15, r2
     13e:	f2 08       	sbc	r15, r2
     140:	f2 08       	sbc	r15, r2
     142:	f2 08       	sbc	r15, r2
     144:	ee 08       	sbc	r14, r14
     146:	f2 08       	sbc	r15, r2
     148:	f2 08       	sbc	r15, r2
     14a:	f2 08       	sbc	r15, r2
     14c:	f2 08       	sbc	r15, r2
     14e:	f2 08       	sbc	r15, r2
     150:	f2 08       	sbc	r15, r2
     152:	f2 08       	sbc	r15, r2
     154:	cb 08       	sbc	r12, r11
     156:	f2 08       	sbc	r15, r2
     158:	f2 08       	sbc	r15, r2
     15a:	f2 08       	sbc	r15, r2
     15c:	f2 08       	sbc	r15, r2
     15e:	f2 08       	sbc	r15, r2
     160:	f2 08       	sbc	r15, r2
     162:	f2 08       	sbc	r15, r2
     164:	f2 08       	sbc	r15, r2
     166:	f2 08       	sbc	r15, r2
     168:	f2 08       	sbc	r15, r2
     16a:	f2 08       	sbc	r15, r2
     16c:	f2 08       	sbc	r15, r2
     16e:	f2 08       	sbc	r15, r2
     170:	f2 08       	sbc	r15, r2
     172:	f2 08       	sbc	r15, r2
     174:	bf 08       	sbc	r11, r15
     176:	f2 08       	sbc	r15, r2
     178:	f2 08       	sbc	r15, r2
     17a:	f2 08       	sbc	r15, r2
     17c:	f2 08       	sbc	r15, r2
     17e:	f2 08       	sbc	r15, r2
     180:	f2 08       	sbc	r15, r2
     182:	f2 08       	sbc	r15, r2
     184:	dd 08       	sbc	r13, r13

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	14 e0       	ldi	r17, 0x04	; 4
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ea e0       	ldi	r30, 0x0A	; 10
     19e:	f0 e2       	ldi	r31, 0x20	; 32
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a0 3e       	cpi	r26, 0xE0	; 224
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	25 e0       	ldi	r18, 0x05	; 5
     1b2:	a0 ee       	ldi	r26, 0xE0	; 224
     1b4:	b4 e0       	ldi	r27, 0x04	; 4
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	ad 31       	cpi	r26, 0x1D	; 29
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	0e 94 52 09 	call	0x12a4	; 0x12a4 <main>
     1c4:	0c 94 03 10 	jmp	0x2006	; 0x2006 <_exit>

000001c8 <__bad_interrupt>:
     1c8:	1b cf       	rjmp	.-458    	; 0x0 <__vectors>

000001ca <ADC_init>:
#include "ADC.h"


void ADC_init(void){
	// Enable ADC
	set_bit(ADCSRA, ADEN); 
     1ca:	ea e7       	ldi	r30, 0x7A	; 122
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	80 68       	ori	r24, 0x80	; 128
     1d2:	80 83       	st	Z, r24
	
	// Using a prescaler of 128. (To determine frequency of successive approximations. ADPS bit in ADCSRA)
	set_bit(ADCSRA, ADPS2);
     1d4:	80 81       	ld	r24, Z
     1d6:	84 60       	ori	r24, 0x04	; 4
     1d8:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS1);
     1da:	80 81       	ld	r24, Z
     1dc:	82 60       	ori	r24, 0x02	; 2
     1de:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS0);
     1e0:	80 81       	ld	r24, Z
     1e2:	81 60       	ori	r24, 0x01	; 1
     1e4:	80 83       	st	Z, r24
	
	// Voltage reference: AVCC with external capacitor at AREF pin [Table 26-3]
	set_bit(ADMUX, REFS0); 
     1e6:	ec e7       	ldi	r30, 0x7C	; 124
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	80 81       	ld	r24, Z
     1ec:	80 64       	ori	r24, 0x40	; 64
     1ee:	80 83       	st	Z, r24
     1f0:	08 95       	ret

000001f2 <ADC_read>:
	
}

uint16_t ADC_read(int channel){
	// Set bit 7 to 0, bit 6 to 1, bit 5 to 0, and let the rest be decided by the channel.
	ADMUX = 0x40 + channel;
     1f2:	80 5c       	subi	r24, 0xC0	; 192
     1f4:	80 93 7c 00 	sts	0x007C, r24

	set_bit(ADCSRA, ADSC); // Start a conversion
     1f8:	ea e7       	ldi	r30, 0x7A	; 122
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	80 64       	ori	r24, 0x40	; 64
     200:	80 83       	st	Z, r24

	// Wait until conversion is complete
	while(test_bit(ADCSRA, ADSC));
     202:	80 81       	ld	r24, Z
     204:	86 fd       	sbrc	r24, 6
     206:	fd cf       	rjmp	.-6      	; 0x202 <ADC_read+0x10>

	uint16_t adc_result = ADC;
     208:	80 91 78 00 	lds	r24, 0x0078
     20c:	90 91 79 00 	lds	r25, 0x0079
	return adc_result;
     210:	08 95       	ret

00000212 <CAN_int_vect>:
		
	}
	if(MCP2515_read(MCP_REC)){
		printf("RECEIVE ERROR");
	}
}
     212:	cf 93       	push	r28
     214:	f8 94       	cli
     216:	8c e2       	ldi	r24, 0x2C	; 44
     218:	55 d2       	rcall	.+1194   	; 0x6c4 <MCP2515_read>
     21a:	c8 2f       	mov	r28, r24
     21c:	80 ff       	sbrs	r24, 0
     21e:	0a c0       	rjmp	.+20     	; 0x234 <CAN_int_vect+0x22>
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	61 e0       	ldi	r22, 0x01	; 1
     224:	8c e2       	ldi	r24, 0x2C	; 44
     226:	73 d2       	rcall	.+1254   	; 0x70e <MCP2515_bit_modify>
     228:	21 e0       	ldi	r18, 0x01	; 1
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	30 93 e3 04 	sts	0x04E3, r19
     230:	20 93 e2 04 	sts	0x04E2, r18
     234:	c1 ff       	sbrs	r28, 1
     236:	0a c0       	rjmp	.+20     	; 0x24c <CAN_int_vect+0x3a>
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	62 e0       	ldi	r22, 0x02	; 2
     23c:	8c e2       	ldi	r24, 0x2C	; 44
     23e:	67 d2       	rcall	.+1230   	; 0x70e <MCP2515_bit_modify>
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	90 93 e1 04 	sts	0x04E1, r25
     248:	80 93 e0 04 	sts	0x04E0, r24
     24c:	78 94       	sei
     24e:	cf 91       	pop	r28
     250:	08 95       	ret

00000252 <__vector_6>:
     252:	1f 92       	push	r1
     254:	0f 92       	push	r0
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	0f 92       	push	r0
     25a:	11 24       	eor	r1, r1
     25c:	0b b6       	in	r0, 0x3b	; 59
     25e:	0f 92       	push	r0
     260:	2f 93       	push	r18
     262:	3f 93       	push	r19
     264:	4f 93       	push	r20
     266:	5f 93       	push	r21
     268:	6f 93       	push	r22
     26a:	7f 93       	push	r23
     26c:	8f 93       	push	r24
     26e:	9f 93       	push	r25
     270:	af 93       	push	r26
     272:	bf 93       	push	r27
     274:	ef 93       	push	r30
     276:	ff 93       	push	r31
     278:	cc df       	rcall	.-104    	; 0x212 <CAN_int_vect>
     27a:	ff 91       	pop	r31
     27c:	ef 91       	pop	r30
     27e:	bf 91       	pop	r27
     280:	af 91       	pop	r26
     282:	9f 91       	pop	r25
     284:	8f 91       	pop	r24
     286:	7f 91       	pop	r23
     288:	6f 91       	pop	r22
     28a:	5f 91       	pop	r21
     28c:	4f 91       	pop	r20
     28e:	3f 91       	pop	r19
     290:	2f 91       	pop	r18
     292:	0f 90       	pop	r0
     294:	0b be       	out	0x3b, r0	; 59
     296:	0f 90       	pop	r0
     298:	0f be       	out	0x3f, r0	; 63
     29a:	0f 90       	pop	r0
     29c:	1f 90       	pop	r1
     29e:	18 95       	reti

000002a0 <CAN_init>:
     2a0:	ed 98       	cbi	0x1d, 5	; 29
     2a2:	ed 9a       	sbi	0x1d, 5	; 29
     2a4:	4d d2       	rcall	.+1178   	; 0x740 <MCP2515_init>
     2a6:	4f ef       	ldi	r20, 0xFF	; 255
     2a8:	64 e6       	ldi	r22, 0x64	; 100
     2aa:	80 e6       	ldi	r24, 0x60	; 96
     2ac:	30 d2       	rcall	.+1120   	; 0x70e <MCP2515_bit_modify>
     2ae:	4f ef       	ldi	r20, 0xFF	; 255
     2b0:	60 e6       	ldi	r22, 0x60	; 96
     2b2:	80 e7       	ldi	r24, 0x70	; 112
     2b4:	2c d2       	rcall	.+1112   	; 0x70e <MCP2515_bit_modify>
     2b6:	43 e0       	ldi	r20, 0x03	; 3
     2b8:	63 e0       	ldi	r22, 0x03	; 3
     2ba:	8b e2       	ldi	r24, 0x2B	; 43
     2bc:	28 d2       	rcall	.+1104   	; 0x70e <MCP2515_bit_modify>
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	60 ee       	ldi	r22, 0xE0	; 224
     2c2:	8f e0       	ldi	r24, 0x0F	; 15
     2c4:	24 c2       	rjmp	.+1096   	; 0x70e <MCP2515_bit_modify>
     2c6:	08 95       	ret

000002c8 <CAN_transmit_complete>:


int CAN_transmit_complete(transmit_buffer tb) {
	const int address = MCP_TXB0CTRL + BUFFER_LENGTH * tb;
     2c8:	82 95       	swap	r24
     2ca:	80 7f       	andi	r24, 0xF0	; 240
	
	// Check if the TXREQ bit is clear, indication the transmit buffer is not pending transmission
	return !(MCP2515_read(address) & MCP_TXREQ);
     2cc:	80 5d       	subi	r24, 0xD0	; 208
     2ce:	fa d1       	rcall	.+1012   	; 0x6c4 <MCP2515_read>
     2d0:	86 95       	lsr	r24
     2d2:	86 95       	lsr	r24
     2d4:	86 95       	lsr	r24
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	89 27       	eor	r24, r25
}
     2da:	81 70       	andi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	08 95       	ret

000002e0 <CAN_message_send>:

	// Set Normal Mode
	MCP2515_bit_modify(MCP_CANCTRL,0xE0, NORMAL_MODE);
}

void CAN_message_send(can_message* msg) {
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	ec 01       	movw	r28, r24
	// Use only Transmit buffer register 0
	uint8_t buffer_numb = 0; 

	if(!CAN_transmit_complete(0)){
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	ed df       	rcall	.-38     	; 0x2c8 <CAN_transmit_complete>
     2ee:	89 2b       	or	r24, r25
     2f0:	29 f1       	breq	.+74     	; 0x33c <CAN_message_send+0x5c>
		return; //ERROR
	}

	// Set 11 bit ID
	uint8_t id_high = msg->id / 8;
     2f2:	08 81       	ld	r16, Y
     2f4:	19 81       	ldd	r17, Y+1	; 0x01
     2f6:	b8 01       	movw	r22, r16
     2f8:	76 95       	lsr	r23
     2fa:	67 95       	ror	r22
     2fc:	76 95       	lsr	r23
     2fe:	67 95       	ror	r22
     300:	76 95       	lsr	r23
     302:	67 95       	ror	r22
	uint8_t id_low = msg->id % 8;

	MCP2515_write(MCP_TXB0SIDH + BUFFER_LENGTH * buffer_numb, id_high);
     304:	81 e3       	ldi	r24, 0x31	; 49
     306:	eb d1       	rcall	.+982    	; 0x6de <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL + BUFFER_LENGTH * buffer_numb, (id_low << 5));
     308:	60 2f       	mov	r22, r16
     30a:	62 95       	swap	r22
     30c:	66 0f       	add	r22, r22
     30e:	60 7e       	andi	r22, 0xE0	; 224
     310:	82 e3       	ldi	r24, 0x32	; 50
     312:	e5 d1       	rcall	.+970    	; 0x6de <MCP2515_write>

	// Transmit the number of data bytes
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);
     314:	6a 81       	ldd	r22, Y+2	; 0x02
     316:	85 e3       	ldi	r24, 0x35	; 53
     318:	e2 d1       	rcall	.+964    	; 0x6de <MCP2515_write>

	// Transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     31a:	8a 81       	ldd	r24, Y+2	; 0x02
     31c:	88 23       	and	r24, r24
     31e:	61 f0       	breq	.+24     	; 0x338 <CAN_message_send+0x58>
     320:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
     322:	fe 01       	movw	r30, r28
     324:	e1 0f       	add	r30, r17
     326:	f1 1d       	adc	r31, r1
     328:	63 81       	ldd	r22, Z+3	; 0x03
     32a:	86 e3       	ldi	r24, 0x36	; 54
     32c:	81 0f       	add	r24, r17
     32e:	d7 d1       	rcall	.+942    	; 0x6de <MCP2515_write>

	// Transmit the number of data bytes
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);

	// Transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     330:	1f 5f       	subi	r17, 0xFF	; 255
     332:	8a 81       	ldd	r24, Y+2	; 0x02
     334:	18 17       	cp	r17, r24
     336:	a8 f3       	brcs	.-22     	; 0x322 <CAN_message_send+0x42>
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
	}
	
	uint8_t buffer_states = (uint8_t)(1 << buffer_numb);
	MCP2515_request_to_send(buffer_states);
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	e0 d1       	rcall	.+960    	; 0x6fc <MCP2515_request_to_send>
}
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	1f 91       	pop	r17
     342:	0f 91       	pop	r16
     344:	08 95       	ret

00000346 <CAN_message_receive>:
	// Check if the TXREQ bit is clear, indication the transmit buffer is not pending transmission
	return !(MCP2515_read(address) & MCP_TXREQ);
}


void CAN_message_receive(can_message* received_msg){
     346:	df 92       	push	r13
     348:	ef 92       	push	r14
     34a:	ff 92       	push	r15
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	8c 01       	movw	r16, r24
	cli();
     356:	f8 94       	cli
	int receive_buffer_index = 0;
	if(flag_RX0){
     358:	80 91 e2 04 	lds	r24, 0x04E2
     35c:	90 91 e3 04 	lds	r25, 0x04E3
     360:	89 2b       	or	r24, r25
     362:	39 f0       	breq	.+14     	; 0x372 <CAN_message_receive+0x2c>
		receive_buffer_index = 0;
		flag_RX0 = 0;
     364:	10 92 e3 04 	sts	0x04E3, r1
     368:	10 92 e2 04 	sts	0x04E2, r1

void CAN_message_receive(can_message* received_msg){
	cli();
	int receive_buffer_index = 0;
	if(flag_RX0){
		receive_buffer_index = 0;
     36c:	c0 e0       	ldi	r28, 0x00	; 0
     36e:	d0 e0       	ldi	r29, 0x00	; 0
     370:	13 c0       	rjmp	.+38     	; 0x398 <CAN_message_receive+0x52>
		flag_RX0 = 0;
	}
	else if(flag_RX1){
     372:	80 91 e0 04 	lds	r24, 0x04E0
     376:	90 91 e1 04 	lds	r25, 0x04E1
     37a:	89 2b       	or	r24, r25
     37c:	39 f0       	breq	.+14     	; 0x38c <CAN_message_receive+0x46>
		receive_buffer_index = 1;
		flag_RX1 = 0;
     37e:	10 92 e1 04 	sts	0x04E1, r1
     382:	10 92 e0 04 	sts	0x04E0, r1
	if(flag_RX0){
		receive_buffer_index = 0;
		flag_RX0 = 0;
	}
	else if(flag_RX1){
		receive_buffer_index = 1;
     386:	c1 e0       	ldi	r28, 0x01	; 1
     388:	d0 e0       	ldi	r29, 0x00	; 0
     38a:	06 c0       	rjmp	.+12     	; 0x398 <CAN_message_receive+0x52>
		flag_RX1 = 0;
	}
	else{
		// No message was received
		received_msg->length = 0;
     38c:	f8 01       	movw	r30, r16
     38e:	12 82       	std	Z+2, r1	; 0x02
		received_msg->id = 0;
     390:	11 82       	std	Z+1, r1	; 0x01
     392:	10 82       	st	Z, r1
		sei();
     394:	78 94       	sei
		return;
     396:	3e c0       	rjmp	.+124    	; 0x414 <CAN_message_receive+0xce>
	}

	// Set message ID
	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_index);
     398:	fc 2e       	mov	r15, r28
     39a:	ff 0c       	add	r15, r15
     39c:	ff 0c       	add	r15, r15
     39e:	ff 0c       	add	r15, r15
     3a0:	ff 0c       	add	r15, r15
     3a2:	81 e6       	ldi	r24, 0x61	; 97
     3a4:	8f 0d       	add	r24, r15
     3a6:	8e d1       	rcall	.+796    	; 0x6c4 <MCP2515_read>
     3a8:	e8 2e       	mov	r14, r24
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_index);
     3aa:	82 e6       	ldi	r24, 0x62	; 98
     3ac:	8f 0d       	add	r24, r15
     3ae:	8a d1       	rcall	.+788    	; 0x6c4 <MCP2515_read>
	
	// Only want the last 3 bits
	id_low = id_low >> 5;
	
	received_msg->id = (id_high << 3) + id_low;
     3b0:	2e 2d       	mov	r18, r14
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	22 0f       	add	r18, r18
     3b6:	33 1f       	adc	r19, r19
     3b8:	22 0f       	add	r18, r18
     3ba:	33 1f       	adc	r19, r19
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
	// Set message ID
	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_index);
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_index);
	
	// Only want the last 3 bits
	id_low = id_low >> 5;
     3c0:	82 95       	swap	r24
     3c2:	86 95       	lsr	r24
     3c4:	87 70       	andi	r24, 0x07	; 7
	
	received_msg->id = (id_high << 3) + id_low;
     3c6:	28 0f       	add	r18, r24
     3c8:	31 1d       	adc	r19, r1
     3ca:	f8 01       	movw	r30, r16
     3cc:	31 83       	std	Z+1, r19	; 0x01
     3ce:	20 83       	st	Z, r18
	
	// Read the data length, given by last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_index) % (1<<3));
     3d0:	85 e6       	ldi	r24, 0x65	; 101
     3d2:	8f 0d       	add	r24, r15
     3d4:	77 d1       	rcall	.+750    	; 0x6c4 <MCP2515_read>
     3d6:	87 70       	andi	r24, 0x07	; 7
     3d8:	f8 01       	movw	r30, r16
     3da:	82 83       	std	Z+2, r24	; 0x02
	
	// Read the received data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     3dc:	88 23       	and	r24, r24
     3de:	c9 f0       	breq	.+50     	; 0x412 <CAN_message_receive+0xcc>
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_index;
     3e0:	7e 01       	movw	r14, r28
     3e2:	ee 0c       	add	r14, r14
     3e4:	ff 1c       	adc	r15, r15
     3e6:	ee 0c       	add	r14, r14
     3e8:	ff 1c       	adc	r15, r15
     3ea:	ee 0c       	add	r14, r14
     3ec:	ff 1c       	adc	r15, r15
     3ee:	ee 0c       	add	r14, r14
     3f0:	ff 1c       	adc	r15, r15
	
	// Read the data length, given by last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_index) % (1<<3));
	
	// Read the received data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     3f2:	d1 2c       	mov	r13, r1
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_index;
     3f4:	cd 2d       	mov	r28, r13
     3f6:	d0 e0       	ldi	r29, 0x00	; 0
     3f8:	ce 01       	movw	r24, r28
     3fa:	8a 59       	subi	r24, 0x9A	; 154
     3fc:	9f 4f       	sbci	r25, 0xFF	; 255
		received_msg->data[byte] = MCP2515_read(address);
     3fe:	8e 0d       	add	r24, r14
     400:	61 d1       	rcall	.+706    	; 0x6c4 <MCP2515_read>
     402:	c0 0f       	add	r28, r16
     404:	d1 1f       	adc	r29, r17
     406:	8b 83       	std	Y+3, r24	; 0x03
	
	// Read the data length, given by last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_index) % (1<<3));
	
	// Read the received data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     408:	d3 94       	inc	r13
     40a:	f8 01       	movw	r30, r16
     40c:	82 81       	ldd	r24, Z+2	; 0x02
     40e:	d8 16       	cp	r13, r24
     410:	88 f3       	brcs	.-30     	; 0x3f4 <CAN_message_receive+0xae>
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_index;
		received_msg->data[byte] = MCP2515_read(address);
	}
	sei();
     412:	78 94       	sei
}
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	ff 90       	pop	r15
     41e:	ef 90       	pop	r14
     420:	df 90       	pop	r13
     422:	08 95       	ret

00000424 <__vector_42>:





ISR(TIMER4_COMPA_vect){
     424:	1f 92       	push	r1
     426:	0f 92       	push	r0
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	0f 92       	push	r0
     42c:	11 24       	eor	r1, r1
     42e:	8f 93       	push	r24
     430:	9f 93       	push	r25
	score_charge++;
     432:	80 91 fa 04 	lds	r24, 0x04FA
     436:	90 91 fb 04 	lds	r25, 0x04FB
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	90 93 fb 04 	sts	0x04FB, r25
     440:	80 93 fa 04 	sts	0x04FA, r24
	
	if(score_charge >= SCORE_MAX_CHARGE){
     444:	80 91 fa 04 	lds	r24, 0x04FA
     448:	90 91 fb 04 	lds	r25, 0x04FB
     44c:	0a 97       	sbiw	r24, 0x0a	; 10
     44e:	9c f0       	brlt	.+38     	; 0x476 <__vector_42+0x52>
		score_charge = 0;
     450:	10 92 fb 04 	sts	0x04FB, r1
     454:	10 92 fa 04 	sts	0x04FA, r1
		score_flag = 1;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	90 93 00 05 	sts	0x0500, r25
     460:	80 93 ff 04 	sts	0x04FF, r24
		score_ms += 1;
     464:	80 91 fd 04 	lds	r24, 0x04FD
     468:	90 91 fe 04 	lds	r25, 0x04FE
     46c:	01 96       	adiw	r24, 0x01	; 1
     46e:	90 93 fe 04 	sts	0x04FE, r25
     472:	80 93 fd 04 	sts	0x04FD, r24
	}
	
	// Set timer flag
	timer_flag = 1;
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	90 93 02 05 	sts	0x0502, r25
     47e:	80 93 01 05 	sts	0x0501, r24
}
     482:	9f 91       	pop	r25
     484:	8f 91       	pop	r24
     486:	0f 90       	pop	r0
     488:	0f be       	out	0x3f, r0	; 63
     48a:	0f 90       	pop	r0
     48c:	1f 90       	pop	r1
     48e:	18 95       	reti

00000490 <GAME_send_score>:
	control_type = c;
	GAME_timer_init();
}


void GAME_send_score(int score_ms) {
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	2b 97       	sbiw	r28, 0x0b	; 11
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
	can_message highscore;
	highscore.id = 'h';
     4a4:	28 e6       	ldi	r18, 0x68	; 104
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	3a 83       	std	Y+2, r19	; 0x02
     4aa:	29 83       	std	Y+1, r18	; 0x01
	highscore.length = 2;
     4ac:	22 e0       	ldi	r18, 0x02	; 2
     4ae:	2b 83       	std	Y+3, r18	; 0x03
	highscore.data[0] = score_ms >> 8;
     4b0:	9c 83       	std	Y+4, r25	; 0x04
	highscore.data[1] = score_ms & 0xFF;
     4b2:	8d 83       	std	Y+5, r24	; 0x05
	CAN_message_send(&highscore);
     4b4:	ce 01       	movw	r24, r28
     4b6:	01 96       	adiw	r24, 0x01	; 1
     4b8:	13 df       	rcall	.-474    	; 0x2e0 <CAN_message_send>
}
     4ba:	2b 96       	adiw	r28, 0x0b	; 11
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	cd bf       	out	0x3d, r28	; 61
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <GAME_timer_init>:


void GAME_timer_init(void) {
	// 16-bit interrupt
	set_bit(TCCR4A,COM4A1);
     4cc:	e0 ea       	ldi	r30, 0xA0	; 160
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	80 81       	ld	r24, Z
     4d2:	80 68       	ori	r24, 0x80	; 128
     4d4:	80 83       	st	Z, r24
		
	// Use timer4
	// clear timer on compare (CTC) mode (16 bit, TOP in OCR4A) page 145 (mode 4 table 17-2)
	// clear_bit(TCCR4B, WGM43);
	set_bit(TCCR4B, WGM42);
     4d6:	e1 ea       	ldi	r30, 0xA1	; 161
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	80 81       	ld	r24, Z
     4dc:	88 60       	ori	r24, 0x08	; 8
     4de:	80 83       	st	Z, r24
	// clear_bit(TCCR4A, WGM41);
	// clear_bit(TCCR4A, WGM40);
		
	// resets at this value (output compare register) ~100 Hz when prescaler = 8
	OCR4A = 20000;
     4e0:	80 e2       	ldi	r24, 0x20	; 32
     4e2:	9e e4       	ldi	r25, 0x4E	; 78
     4e4:	90 93 a9 00 	sts	0x00A9, r25
     4e8:	80 93 a8 00 	sts	0x00A8, r24
		
	// set prescaler 8
	clear_bit(TCCR4B, CS42);
     4ec:	80 81       	ld	r24, Z
     4ee:	8b 7f       	andi	r24, 0xFB	; 251
     4f0:	80 83       	st	Z, r24
	set_bit(TCCR4B, CS41);
     4f2:	80 81       	ld	r24, Z
     4f4:	82 60       	ori	r24, 0x02	; 2
     4f6:	80 83       	st	Z, r24
	clear_bit(TCCR4B, CS40);
     4f8:	80 81       	ld	r24, Z
     4fa:	8e 7f       	andi	r24, 0xFE	; 254
     4fc:	80 83       	st	Z, r24
		
	// output compare A match interrupt enable (17.11.35)
	set_bit(TIMSK4, OCIE4A);
     4fe:	e2 e7       	ldi	r30, 0x72	; 114
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	82 60       	ori	r24, 0x02	; 2
     506:	80 83       	st	Z, r24
		
	score_flag = 0;
     508:	10 92 00 05 	sts	0x0500, r1
     50c:	10 92 ff 04 	sts	0x04FF, r1
	score_ms = 0;
     510:	10 92 fe 04 	sts	0x04FE, r1
     514:	10 92 fd 04 	sts	0x04FD, r1
	score_charge = 0;
     518:	10 92 fb 04 	sts	0x04FB, r1
     51c:	10 92 fa 04 	sts	0x04FA, r1
     520:	08 95       	ret

00000522 <GAME_init>:
	timer_flag = 1;
}


void GAME_init(control c) {
	control_type = c;
     522:	80 93 fc 04 	sts	0x04FC, r24
	GAME_timer_init();
     526:	d2 cf       	rjmp	.-92     	; 0x4cc <GAME_timer_init>
     528:	08 95       	ret

0000052a <GAME_loop>:
	score_ms = 0;
	score_charge = 0;
}


void GAME_loop(void) {
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	2b 97       	sbiw	r28, 0x0b	; 11
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
	can_message control_inputs;
	int8_t velocity_reference = 0;
	uint8_t slider_left = 0;
	uint8_t slider_right = 0;
	uint8_t buttons = 0;
     53e:	00 e0       	ldi	r16, 0x00	; 0

void GAME_loop(void) {
	can_message control_inputs;
	int8_t velocity_reference = 0;
	uint8_t slider_left = 0;
	uint8_t slider_right = 0;
     540:	10 e0       	ldi	r17, 0x00	; 0
}


void GAME_loop(void) {
	can_message control_inputs;
	int8_t velocity_reference = 0;
     542:	f1 2c       	mov	r15, r1
	uint8_t slider_left = 0;
	uint8_t slider_right = 0;
	uint8_t buttons = 0;
	while(1) {
		do {
			CAN_message_receive(&control_inputs);
     544:	ce 01       	movw	r24, r28
     546:	01 96       	adiw	r24, 0x01	; 1
     548:	fe de       	rcall	.-516    	; 0x346 <CAN_message_receive>
			//print_can_message(&control_inputs);
		} while(control_inputs.id != 's');	
     54a:	29 81       	ldd	r18, Y+1	; 0x01
     54c:	3a 81       	ldd	r19, Y+2	; 0x02
     54e:	23 37       	cpi	r18, 0x73	; 115
     550:	31 05       	cpc	r19, r1
     552:	c1 f7       	brne	.-16     	; 0x544 <GAME_loop+0x1a>
		score_ms = 0;
     554:	10 92 fe 04 	sts	0x04FE, r1
     558:	10 92 fd 04 	sts	0x04FD, r1
		
		while(control_inputs.id != 'q'){	
     55c:	4c c0       	rjmp	.+152    	; 0x5f6 <GAME_loop+0xcc>
			//control_inputs.id = 0;  // Error/empty or something else starting with e
			CAN_message_receive(&control_inputs);
     55e:	ce 01       	movw	r24, r28
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	f1 de       	rcall	.-542    	; 0x346 <CAN_message_receive>
			if (control_inputs.id == 0) {
     564:	29 81       	ldd	r18, Y+1	; 0x01
     566:	3a 81       	ldd	r19, Y+2	; 0x02
     568:	21 15       	cp	r18, r1
     56a:	31 05       	cpc	r19, r1
     56c:	59 f0       	breq	.+22     	; 0x584 <GAME_loop+0x5a>
				// No message
			} else if (control_inputs.id == 'c') {
     56e:	23 36       	cpi	r18, 0x63	; 99
     570:	31 05       	cpc	r19, r1
     572:	21 f4       	brne	.+8      	; 0x57c <GAME_loop+0x52>
				velocity_reference = control_inputs.data[JOYSTICK_X];
     574:	fc 80       	ldd	r15, Y+4	; 0x04
				slider_left = control_inputs.data[SLIDER_LEFT];
				slider_right = control_inputs.data[SLIDER_RIGHT];
     576:	1f 81       	ldd	r17, Y+7	; 0x07
				buttons = control_inputs.data[BUTTONS];	
     578:	08 85       	ldd	r16, Y+8	; 0x08
     57a:	04 c0       	rjmp	.+8      	; 0x584 <GAME_loop+0x5a>
			} else {
				printf("SOMETHING WENT SERIOUSLY WRONG WITH THE CAN BUS\n");
     57c:	8b e1       	ldi	r24, 0x1B	; 27
     57e:	92 e0       	ldi	r25, 0x02	; 2
     580:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <puts>
			}
		
			servo_set(slider_right);
     584:	81 2f       	mov	r24, r17
     586:	58 d4       	rcall	.+2224   	; 0xe38 <servo_set>
		
			if (buttons & (1 << JOY_BUTTON)) {
     588:	02 fd       	sbrc	r16, 2
				solenoid_send_pulse();
     58a:	e5 d4       	rcall	.+2506   	; 0xf56 <solenoid_send_pulse>
			}
		
			if(timer_flag) {
     58c:	80 91 01 05 	lds	r24, 0x0501
     590:	90 91 02 05 	lds	r25, 0x0502
     594:	89 2b       	or	r24, r25
     596:	c9 f0       	breq	.+50     	; 0x5ca <GAME_loop+0xa0>
				timer_flag = 0;
     598:	10 92 02 05 	sts	0x0502, r1
     59c:	10 92 01 05 	sts	0x0501, r1
				switch (control_type) {
     5a0:	80 91 fc 04 	lds	r24, 0x04FC
     5a4:	88 23       	and	r24, r24
     5a6:	19 f0       	breq	.+6      	; 0x5ae <GAME_loop+0x84>
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	39 f0       	breq	.+14     	; 0x5ba <GAME_loop+0x90>
     5ac:	0e c0       	rjmp	.+28     	; 0x5ca <GAME_loop+0xa0>
					case OPEN_LOOP:
					motor_set_velocity(velocity_reference);
     5ae:	8f 2d       	mov	r24, r15
     5b0:	99 27       	eor	r25, r25
     5b2:	87 fd       	sbrc	r24, 7
     5b4:	90 95       	com	r25
     5b6:	fb d0       	rcall	.+502    	; 0x7ae <motor_set_velocity>
					break;
     5b8:	08 c0       	rjmp	.+16     	; 0x5ca <GAME_loop+0xa0>
				
					case CLOSED_LOOP:
					PI_control(velocity_reference);
     5ba:	6f 2d       	mov	r22, r15
     5bc:	77 27       	eor	r23, r23
     5be:	67 fd       	sbrc	r22, 7
     5c0:	70 95       	com	r23
     5c2:	87 2f       	mov	r24, r23
     5c4:	97 2f       	mov	r25, r23
     5c6:	77 d7       	rcall	.+3822   	; 0x14b6 <__floatsisf>
     5c8:	80 d3       	rcall	.+1792   	; 0xcca <PI_control>
				}
			}
		
			if(score_flag){
     5ca:	80 91 ff 04 	lds	r24, 0x04FF
     5ce:	90 91 00 05 	lds	r25, 0x0500
     5d2:	89 2b       	or	r24, r25
     5d4:	81 f0       	breq	.+32     	; 0x5f6 <GAME_loop+0xcc>
				score_flag = 0;
     5d6:	10 92 00 05 	sts	0x0500, r1
     5da:	10 92 ff 04 	sts	0x04FF, r1
				if(IR_disrupted()){
     5de:	19 d0       	rcall	.+50     	; 0x612 <IR_disrupted>
     5e0:	88 23       	and	r24, r24
     5e2:	21 f0       	breq	.+8      	; 0x5ec <GAME_loop+0xc2>
					score_ms = 0;
     5e4:	10 92 fe 04 	sts	0x04FE, r1
     5e8:	10 92 fd 04 	sts	0x04FD, r1
				}
				GAME_send_score(score_ms);
     5ec:	80 91 fd 04 	lds	r24, 0x04FD
     5f0:	90 91 fe 04 	lds	r25, 0x04FE
     5f4:	4d df       	rcall	.-358    	; 0x490 <GAME_send_score>
			CAN_message_receive(&control_inputs);
			//print_can_message(&control_inputs);
		} while(control_inputs.id != 's');	
		score_ms = 0;
		
		while(control_inputs.id != 'q'){	
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	9a 81       	ldd	r25, Y+2	; 0x02
     5fa:	81 37       	cpi	r24, 0x71	; 113
     5fc:	91 05       	cpc	r25, r1
     5fe:	09 f0       	breq	.+2      	; 0x602 <GAME_loop+0xd8>
     600:	ae cf       	rjmp	.-164    	; 0x55e <GAME_loop+0x34>
					score_ms = 0;
				}
				GAME_send_score(score_ms);
			}
		}
		servo_set(127);
     602:	8f e7       	ldi	r24, 0x7F	; 127
     604:	19 d4       	rcall	.+2098   	; 0xe38 <servo_set>
		motor_set_velocity(0);
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	d1 d0       	rcall	.+418    	; 0x7ae <motor_set_velocity>
	}
     60c:	9b cf       	rjmp	.-202    	; 0x544 <GAME_loop+0x1a>

0000060e <IR_init>:

#define DISRUPTION_THRESHOLD 10
#define MOVING_AVERAGE_SIZE 4

void IR_init(void) {
	ADC_init();
     60e:	dd cd       	rjmp	.-1094   	; 0x1ca <ADC_init>
     610:	08 95       	ret

00000612 <IR_disrupted>:
}


bool IR_disrupted(void) {
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
	uint16_t photodiode_brightness = ADC_read(0);
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	eb dd       	rcall	.-1066   	; 0x1f2 <ADC_read>
	
	// Shift previous measurements to make room for a new one.
	static int measurements[MOVING_AVERAGE_SIZE] = {0};
	for (int i = MOVING_AVERAGE_SIZE-1; i > 0; i--) {
		measurements[i] = measurements[i-1];
     61c:	e8 ee       	ldi	r30, 0xE8	; 232
     61e:	f4 e0       	ldi	r31, 0x04	; 4
     620:	20 81       	ld	r18, Z
     622:	31 81       	ldd	r19, Z+1	; 0x01
     624:	30 93 eb 04 	sts	0x04EB, r19
     628:	20 93 ea 04 	sts	0x04EA, r18
     62c:	a6 ee       	ldi	r26, 0xE6	; 230
     62e:	b4 e0       	ldi	r27, 0x04	; 4
     630:	4d 91       	ld	r20, X+
     632:	5c 91       	ld	r21, X
     634:	11 97       	sbiw	r26, 0x01	; 1
     636:	51 83       	std	Z+1, r21	; 0x01
     638:	40 83       	st	Z, r20
     63a:	e4 ee       	ldi	r30, 0xE4	; 228
     63c:	f4 e0       	ldi	r31, 0x04	; 4
     63e:	60 81       	ld	r22, Z
     640:	71 81       	ldd	r23, Z+1	; 0x01
     642:	6d 93       	st	X+, r22
     644:	7c 93       	st	X, r23
	}
	measurements[0] = photodiode_brightness;
     646:	91 83       	std	Z+1, r25	; 0x01
     648:	80 83       	st	Z, r24
	 *
	 * k: MOVING_AVERAGE_SIZE
	 */
	uint16_t brightness_sum = 0;
	for (int i = 0; i < MOVING_AVERAGE_SIZE; i++) {
		brightness_sum += measurements[i];
     64a:	68 0f       	add	r22, r24
     64c:	79 1f       	adc	r23, r25
     64e:	46 0f       	add	r20, r22
     650:	57 1f       	adc	r21, r23
     652:	24 0f       	add	r18, r20
     654:	35 1f       	adc	r19, r21
	}
	uint16_t filtered_brightness = brightness_sum / MOVING_AVERAGE_SIZE;
     656:	e9 01       	movw	r28, r18
     658:	d6 95       	lsr	r29
     65a:	c7 95       	ror	r28
     65c:	d6 95       	lsr	r29
     65e:	c7 95       	ror	r28
	
	// Return whether the IR signal is disrupted or not
	printf("Filtered brightness: %4d\n", filtered_brightness);
     660:	df 93       	push	r29
     662:	cf 93       	push	r28
     664:	8b e4       	ldi	r24, 0x4B	; 75
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <printf>
	return filtered_brightness < DISRUPTION_THRESHOLD;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	2a 97       	sbiw	r28, 0x0a	; 10
     67c:	08 f0       	brcs	.+2      	; 0x680 <IR_disrupted+0x6e>
     67e:	80 e0       	ldi	r24, 0x00	; 0
}
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <MAX520_init>:


uint8_t max520_address = 0x00;


void MAX520_init(uint8_t three_bit_address){
     686:	cf 93       	push	r28
     688:	c8 2f       	mov	r28, r24
	TWI_Master_Initialise(); // Initialize TWI for transferring
     68a:	13 d5       	rcall	.+2598   	; 0x10b2 <TWI_Master_Initialise>
	sei();
     68c:	78 94       	sei
	max520_address = MAX520_ADDRESS_BASE + (three_bit_address << 1); // Set the correct address for the TWI bus
     68e:	cc 0f       	add	r28, r28
     690:	c0 5b       	subi	r28, 0xB0	; 176
     692:	c0 93 ec 04 	sts	0x04EC, r28
}
     696:	cf 91       	pop	r28
     698:	08 95       	ret

0000069a <MAX520_send>:


// Channel must be between 0 and 3 (DAC0 - DAC3)
void MAX520_send(uint8_t channel, uint8_t data){
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	00 d0       	rcall	.+0      	; 0x6a0 <MAX520_send+0x6>
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
	// Message has the following format {address, command, output}
	uint8_t message[MAX520_MESSAGE_SIZE] = {
     6a4:	90 91 ec 04 	lds	r25, 0x04EC
     6a8:	99 83       	std	Y+1, r25	; 0x01
     6aa:	88 0f       	add	r24, r24
     6ac:	8a 83       	std	Y+2, r24	; 0x02
     6ae:	6b 83       	std	Y+3, r22	; 0x03
		0x00 + (channel << 1), 
		data
	};
	
	// Send the data over TWI
	TWI_Start_Transceiver_With_Data(message, MAX520_MESSAGE_SIZE);	
     6b0:	63 e0       	ldi	r22, 0x03	; 3
     6b2:	ce 01       	movw	r24, r28
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	07 d5       	rcall	.+2574   	; 0x10c6 <TWI_Start_Transceiver_With_Data>
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <MCP2515_read>:
	}
	
	return 0;
}

uint8_t MCP2515_read(uint8_t address) {
     6c4:	cf 93       	push	r28
     6c6:	c8 2f       	mov	r28, r24
	SPI_select();
     6c8:	99 d4       	rcall	.+2354   	; 0xffc <SPI_select>
	SPI_send(READ);
     6ca:	83 e0       	ldi	r24, 0x03	; 3
     6cc:	8b d4       	rcall	.+2326   	; 0xfe4 <SPI_send>
	SPI_send(address);
     6ce:	8c 2f       	mov	r24, r28
     6d0:	89 d4       	rcall	.+2322   	; 0xfe4 <SPI_send>
	uint8_t data = SPI_read();
     6d2:	8d d4       	rcall	.+2330   	; 0xfee <SPI_read>
     6d4:	c8 2f       	mov	r28, r24
	SPI_deselect();
     6d6:	94 d4       	rcall	.+2344   	; 0x1000 <SPI_deselect>
	return data;
	
	
}
     6d8:	8c 2f       	mov	r24, r28
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <MCP2515_write>:

void MCP2515_write(uint8_t address, uint8_t data) {
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	d8 2f       	mov	r29, r24
     6e4:	c6 2f       	mov	r28, r22
	SPI_select();
     6e6:	8a d4       	rcall	.+2324   	; 0xffc <SPI_select>
	SPI_send(WRITE);
     6e8:	82 e0       	ldi	r24, 0x02	; 2
     6ea:	7c d4       	rcall	.+2296   	; 0xfe4 <SPI_send>
	SPI_send(address);
     6ec:	8d 2f       	mov	r24, r29
     6ee:	7a d4       	rcall	.+2292   	; 0xfe4 <SPI_send>
	SPI_send(data);
     6f0:	8c 2f       	mov	r24, r28
     6f2:	78 d4       	rcall	.+2288   	; 0xfe4 <SPI_send>
	SPI_deselect();
     6f4:	85 d4       	rcall	.+2314   	; 0x1000 <SPI_deselect>
}
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	08 95       	ret

000006fc <MCP2515_request_to_send>:

//Buffer states: three bit, setting a 1 on the buffer initiates transmitting from it 
void MCP2515_request_to_send(uint8_t buffer_states) {
     6fc:	cf 93       	push	r28
     6fe:	c8 2f       	mov	r28, r24
	SPI_select();
     700:	7d d4       	rcall	.+2298   	; 0xffc <SPI_select>
	SPI_send(RTS_BASE+buffer_states);
     702:	80 e8       	ldi	r24, 0x80	; 128
     704:	8c 0f       	add	r24, r28
     706:	6e d4       	rcall	.+2268   	; 0xfe4 <SPI_send>
	SPI_deselect();
     708:	7b d4       	rcall	.+2294   	; 0x1000 <SPI_deselect>
}
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <MCP2515_bit_modify>:

//puts new_data in the selected reg_adress. the function assumes that you are allowed to change every bit in the register
void MCP2515_bit_modify(uint8_t reg_address, uint8_t masked_bits, uint8_t new_data) {
     70e:	1f 93       	push	r17
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	18 2f       	mov	r17, r24
     716:	d6 2f       	mov	r29, r22
     718:	c4 2f       	mov	r28, r20
	SPI_select();
     71a:	70 d4       	rcall	.+2272   	; 0xffc <SPI_select>
	SPI_send(BIT_MODIFY);
     71c:	85 e0       	ldi	r24, 0x05	; 5
     71e:	62 d4       	rcall	.+2244   	; 0xfe4 <SPI_send>
	SPI_send(reg_address);
     720:	81 2f       	mov	r24, r17
     722:	60 d4       	rcall	.+2240   	; 0xfe4 <SPI_send>
	SPI_send(masked_bits);
     724:	8d 2f       	mov	r24, r29
     726:	5e d4       	rcall	.+2236   	; 0xfe4 <SPI_send>
	SPI_send(new_data);
     728:	8c 2f       	mov	r24, r28
     72a:	5c d4       	rcall	.+2232   	; 0xfe4 <SPI_send>
	SPI_deselect();
     72c:	69 d4       	rcall	.+2258   	; 0x1000 <SPI_deselect>
}
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	08 95       	ret

00000736 <MCP2515_reset>:

void MCP2515_reset(void) {
	SPI_select();
     736:	62 d4       	rcall	.+2244   	; 0xffc <SPI_select>
	SPI_send(RESET);
     738:	80 ec       	ldi	r24, 0xC0	; 192
     73a:	54 d4       	rcall	.+2216   	; 0xfe4 <SPI_send>
	SPI_deselect();
     73c:	61 c4       	rjmp	.+2242   	; 0x1000 <SPI_deselect>
     73e:	08 95       	ret

00000740 <MCP2515_init>:
#define BIT_MODIFY 0x05
#define RTS_BASE 0x80


uint8_t MCP2515_init(void) {
	SPI_init();
     740:	43 d4       	rcall	.+2182   	; 0xfc8 <SPI_init>
	MCP2515_reset();
     742:	f9 df       	rcall	.-14     	; 0x736 <MCP2515_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     744:	8f e8       	ldi	r24, 0x8F	; 143
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	01 97       	sbiw	r24, 0x01	; 1
     74a:	f1 f7       	brne	.-4      	; 0x748 <MCP2515_init+0x8>
     74c:	00 c0       	rjmp	.+0      	; 0x74e <MCP2515_init+0xe>
     74e:	00 00       	nop
	
	_delay_us(100); //why oh why
	//check bit 7-5 of MCP_CANSTAT which signify the operation mode
	const uint8_t device_mode = MCP2515_read(MCP_CANSTAT) & MODE_MASK;
     750:	8e e0       	ldi	r24, 0x0E	; 14
     752:	b8 df       	rcall	.-144    	; 0x6c4 <MCP2515_read>
     754:	80 7e       	andi	r24, 0xE0	; 224

	if (device_mode != MODE_CONFIG) {
     756:	80 38       	cpi	r24, 0x80	; 128
     758:	31 f0       	breq	.+12     	; 0x766 <MCP2515_init+0x26>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
     75a:	85 e6       	ldi	r24, 0x65	; 101
     75c:	92 e0       	ldi	r25, 0x02	; 2
     75e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <puts>
		return 1;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	08 95       	ret
	}
	
	return 0;
     766:	80 e0       	ldi	r24, 0x00	; 0
}
     768:	08 95       	ret

0000076a <motor_enable>:
void motor_enable(void) {
	set_bit(MJ1, EN);
}

void motor_disable(void) {
	clear_bit(MJ1, EN);
     76a:	e2 e0       	ldi	r30, 0x02	; 2
     76c:	f1 e0       	ldi	r31, 0x01	; 1
     76e:	80 81       	ld	r24, Z
     770:	80 61       	ori	r24, 0x10	; 16
     772:	80 83       	st	Z, r24
     774:	08 95       	ret

00000776 <motor_set_direction>:
	motor_set_direction(motor_direction);
	motor_set_speed(motor_speed);
}

void motor_set_direction(direction motor_direction) {
	(motor_direction == LEFT) ? clear_bit(MJ1, DIR) : set_bit(MJ1, DIR);
     776:	81 11       	cpse	r24, r1
     778:	06 c0       	rjmp	.+12     	; 0x786 <motor_set_direction+0x10>
     77a:	e2 e0       	ldi	r30, 0x02	; 2
     77c:	f1 e0       	ldi	r31, 0x01	; 1
     77e:	80 81       	ld	r24, Z
     780:	8d 7f       	andi	r24, 0xFD	; 253
     782:	80 83       	st	Z, r24
     784:	08 95       	ret
     786:	e2 e0       	ldi	r30, 0x02	; 2
     788:	f1 e0       	ldi	r31, 0x01	; 1
     78a:	80 81       	ld	r24, Z
     78c:	82 60       	ori	r24, 0x02	; 2
     78e:	80 83       	st	Z, r24
     790:	08 95       	ret

00000792 <motor_set_speed>:
}

void motor_set_speed(uint8_t motor_speed) {
	MAX520_send(MOTOR_SPEED_CHANNEL, MOTOR_GAIN * motor_speed);
     792:	68 2f       	mov	r22, r24
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	8d d6       	rcall	.+3354   	; 0x14b6 <__floatsisf>
     79c:	21 ee       	ldi	r18, 0xE1	; 225
     79e:	3a e7       	ldi	r19, 0x7A	; 122
     7a0:	44 ee       	ldi	r20, 0xE4	; 228
     7a2:	5f e3       	ldi	r21, 0x3F	; 63
     7a4:	3c d7       	rcall	.+3704   	; 0x161e <__mulsf3>
     7a6:	59 d6       	rcall	.+3250   	; 0x145a <__fixunssfsi>
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	77 cf       	rjmp	.-274    	; 0x69a <MAX520_send>
     7ac:	08 95       	ret

000007ae <motor_set_velocity>:

void motor_disable(void) {
	clear_bit(MJ1, EN);
}

void motor_set_velocity(int16_t motor_velocity) { // u
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
	
	// Find the motor direction. Negative velocity corresponds to left.
	direction motor_direction = (motor_velocity < 0) ? LEFT : RIGHT;
	
	// Speed is in absolute value. Make sure it is not greater than 100.
	motor_velocity = SATURATE(motor_velocity, -100, 100);
     7b2:	c8 2f       	mov	r28, r24
     7b4:	d9 2f       	mov	r29, r25
     7b6:	cc 39       	cpi	r28, 0x9C	; 156
     7b8:	8f ef       	ldi	r24, 0xFF	; 255
     7ba:	d8 07       	cpc	r29, r24
     7bc:	14 f4       	brge	.+4      	; 0x7c2 <motor_set_velocity+0x14>
     7be:	cc e9       	ldi	r28, 0x9C	; 156
     7c0:	df ef       	ldi	r29, 0xFF	; 255
}

void motor_set_velocity(int16_t motor_velocity) { // u
	
	// Find the motor direction. Negative velocity corresponds to left.
	direction motor_direction = (motor_velocity < 0) ? LEFT : RIGHT;
     7c2:	89 2f       	mov	r24, r25
     7c4:	80 95       	com	r24
	// Speed is in absolute value. Make sure it is not greater than 100.
	motor_velocity = SATURATE(motor_velocity, -100, 100);
	uint8_t motor_speed = abs(motor_velocity);
	
	// Set direction and speed of motor.
	motor_set_direction(motor_direction);
     7c6:	88 1f       	adc	r24, r24
     7c8:	88 27       	eor	r24, r24
     7ca:	88 1f       	adc	r24, r24
     7cc:	d4 df       	rcall	.-88     	; 0x776 <motor_set_direction>
     7ce:	c5 36       	cpi	r28, 0x65	; 101
     7d0:	d1 05       	cpc	r29, r1
     7d2:	14 f0       	brlt	.+4      	; 0x7d8 <motor_set_velocity+0x2a>
     7d4:	c4 e6       	ldi	r28, 0x64	; 100
     7d6:	d0 e0       	ldi	r29, 0x00	; 0
	// Find the motor direction. Negative velocity corresponds to left.
	direction motor_direction = (motor_velocity < 0) ? LEFT : RIGHT;
	
	// Speed is in absolute value. Make sure it is not greater than 100.
	motor_velocity = SATURATE(motor_velocity, -100, 100);
	uint8_t motor_speed = abs(motor_velocity);
     7d8:	ce 01       	movw	r24, r28
     7da:	dd 23       	and	r29, r29
     7dc:	24 f4       	brge	.+8      	; 0x7e6 <motor_set_velocity+0x38>
     7de:	88 27       	eor	r24, r24
     7e0:	99 27       	eor	r25, r25
     7e2:	8c 1b       	sub	r24, r28
     7e4:	9d 0b       	sbc	r25, r29
	
	// Set direction and speed of motor.
	motor_set_direction(motor_direction);
	motor_set_speed(motor_speed);
     7e6:	d5 df       	rcall	.-86     	; 0x792 <motor_set_speed>
}
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <motor_read_position_change>:
/*				READ FROM ENCODER			*/
/*------------------------------------------*/

int16_t motor_read_position_change(void) { 
	// Read from the encoder as described in "Motorbox User Guide" page 5
	clear_bit(MJ1, OE);
     7ee:	e2 e0       	ldi	r30, 0x02	; 2
     7f0:	f1 e0       	ldi	r31, 0x01	; 1
     7f2:	80 81       	ld	r24, Z
     7f4:	8f 7d       	andi	r24, 0xDF	; 223
     7f6:	80 83       	st	Z, r24
	clear_bit(MJ1, SEL);
     7f8:	80 81       	ld	r24, Z
     7fa:	87 7f       	andi	r24, 0xF7	; 247
     7fc:	80 83       	st	Z, r24
     7fe:	2a e6       	ldi	r18, 0x6A	; 106
     800:	2a 95       	dec	r18
     802:	f1 f7       	brne	.-4      	; 0x800 <motor_read_position_change+0x12>
     804:	00 c0       	rjmp	.+0      	; 0x806 <motor_read_position_change+0x18>
	_delay_us(20);
	uint16_t position_change = (MJ2 << 8);
     806:	80 91 06 01 	lds	r24, 0x0106
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	98 2f       	mov	r25, r24
     80e:	88 27       	eor	r24, r24
	
	set_bit(MJ1, SEL);
     810:	20 81       	ld	r18, Z
     812:	28 60       	ori	r18, 0x08	; 8
     814:	20 83       	st	Z, r18
     816:	3a e6       	ldi	r19, 0x6A	; 106
     818:	3a 95       	dec	r19
     81a:	f1 f7       	brne	.-4      	; 0x818 <motor_read_position_change+0x2a>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <motor_read_position_change+0x30>
	_delay_us(20);
	position_change += MJ2;
     81e:	20 91 06 01 	lds	r18, 0x0106
	
	clear_bit(MJ1, RST);
     822:	30 81       	ld	r19, Z
     824:	3f 7b       	andi	r19, 0xBF	; 191
     826:	30 83       	st	Z, r19
     828:	35 e8       	ldi	r19, 0x85	; 133
     82a:	3a 95       	dec	r19
     82c:	f1 f7       	brne	.-4      	; 0x82a <motor_read_position_change+0x3c>
     82e:	00 00       	nop
	_delay_us(25);
	set_bit(MJ1, RST);
     830:	30 81       	ld	r19, Z
     832:	30 64       	ori	r19, 0x40	; 64
     834:	30 83       	st	Z, r19
	set_bit(MJ1, OE);
     836:	30 81       	ld	r19, Z
     838:	30 62       	ori	r19, 0x20	; 32
     83a:	30 83       	st	Z, r19
	
	return position_change;
}
     83c:	82 0f       	add	r24, r18
     83e:	91 1d       	adc	r25, r1
     840:	08 95       	ret

00000842 <motor_find_max_speed_manual>:
		case AUTOMATIC:
		motor_find_max_speed_auto();
	}
}

void motor_find_max_speed_manual(void){
     842:	8f 92       	push	r8
     844:	9f 92       	push	r9
     846:	bf 92       	push	r11
     848:	cf 92       	push	r12
     84a:	df 92       	push	r13
     84c:	ef 92       	push	r14
     84e:	ff 92       	push	r15
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	2b 97       	sbiw	r28, 0x0b	; 11
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
	
	can_message message;
	int8_t joystick_x = 0;
	int button_is_pressed = 0;
	
	printf("---------------------------------------------------------\n");
     868:	87 e9       	ldi	r24, 0x97	; 151
     86a:	92 e0       	ldi	r25, 0x02	; 2
     86c:	c3 d7       	rcall	.+3974   	; 0x17f4 <puts>
	printf("CALIBRATE THE ENCODER BY MEASURING THE MAXIMUM VELOCITY\n");
     86e:	81 ed       	ldi	r24, 0xD1	; 209
     870:	92 e0       	ldi	r25, 0x02	; 2
     872:	c0 d7       	rcall	.+3968   	; 0x17f4 <puts>
	printf("PRESS ANY BUTTON TO CONTINUE\n");
     874:	89 e0       	ldi	r24, 0x09	; 9
     876:	93 e0       	ldi	r25, 0x03	; 3
     878:	bd d7       	rcall	.+3962   	; 0x17f4 <puts>
	printf("---------------------------------------------------------\n");
     87a:	87 e9       	ldi	r24, 0x97	; 151
     87c:	92 e0       	ldi	r25, 0x02	; 2
     87e:	ba d7       	rcall	.+3956   	; 0x17f4 <puts>
			motor_set_velocity(joystick_x);

			double speed = abs(motor_read_position_change())/(double)(time_passed());
			if (speed > max_speed) {
				max_speed = speed;
				printf("[MANUAL] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
     880:	06 e2       	ldi	r16, 0x26	; 38
     882:	13 e0       	ldi	r17, 0x03	; 3
	printf("CALIBRATE THE ENCODER BY MEASURING THE MAXIMUM VELOCITY\n");
	printf("PRESS ANY BUTTON TO CONTINUE\n");
	printf("---------------------------------------------------------\n");
	
	while(!button_is_pressed) {
		CAN_message_receive(&message);
     884:	ce 01       	movw	r24, r28
     886:	01 96       	adiw	r24, 0x01	; 1
     888:	5e dd       	rcall	.-1348   	; 0x346 <CAN_message_receive>
		if(message.length) {
     88a:	8b 81       	ldd	r24, Y+3	; 0x03
     88c:	88 23       	and	r24, r24
     88e:	d1 f3       	breq	.-12     	; 0x884 <motor_find_max_speed_manual+0x42>
			joystick_x = message.data[JOYSTICK_X];
			const int RL_BUTTONS = 0b011;
			button_is_pressed = message.data[BUTTONS] & RL_BUTTONS;
     890:	88 85       	ldd	r24, Y+8	; 0x08
     892:	83 70       	andi	r24, 0x03	; 3
     894:	b8 2e       	mov	r11, r24
			
			motor_set_velocity(joystick_x);
     896:	8c 81       	ldd	r24, Y+4	; 0x04
     898:	99 27       	eor	r25, r25
     89a:	87 fd       	sbrc	r24, 7
     89c:	90 95       	com	r25
     89e:	87 df       	rcall	.-242    	; 0x7ae <motor_set_velocity>

			double speed = abs(motor_read_position_change())/(double)(time_passed());
     8a0:	a6 df       	rcall	.-180    	; 0x7ee <motor_read_position_change>
     8a2:	7c 01       	movw	r14, r24
     8a4:	f5 d3       	rcall	.+2026   	; 0x1090 <time_passed>
     8a6:	4c 01       	movw	r8, r24
     8a8:	b7 01       	movw	r22, r14
     8aa:	ff 20       	and	r15, r15
     8ac:	24 f4       	brge	.+8      	; 0x8b6 <motor_find_max_speed_manual+0x74>
     8ae:	66 27       	eor	r22, r22
     8b0:	77 27       	eor	r23, r23
     8b2:	6e 19       	sub	r22, r14
     8b4:	7f 09       	sbc	r23, r15
     8b6:	88 27       	eor	r24, r24
     8b8:	77 fd       	sbrc	r23, 7
     8ba:	80 95       	com	r24
     8bc:	98 2f       	mov	r25, r24
     8be:	fb d5       	rcall	.+3062   	; 0x14b6 <__floatsisf>
     8c0:	6b 01       	movw	r12, r22
     8c2:	7c 01       	movw	r14, r24
     8c4:	b4 01       	movw	r22, r8
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	f3 d5       	rcall	.+3046   	; 0x14b2 <__floatunsisf>
     8cc:	9b 01       	movw	r18, r22
     8ce:	ac 01       	movw	r20, r24
     8d0:	c7 01       	movw	r24, r14
     8d2:	b6 01       	movw	r22, r12
     8d4:	55 d5       	rcall	.+2730   	; 0x1380 <__divsf3>
     8d6:	6b 01       	movw	r12, r22
     8d8:	7c 01       	movw	r14, r24
			if (speed > max_speed) {
     8da:	20 91 ed 04 	lds	r18, 0x04ED
     8de:	30 91 ee 04 	lds	r19, 0x04EE
     8e2:	40 91 ef 04 	lds	r20, 0x04EF
     8e6:	50 91 f0 04 	lds	r21, 0x04F0
     8ea:	95 d6       	rcall	.+3370   	; 0x1616 <__gesf2>
     8ec:	18 16       	cp	r1, r24
     8ee:	cc f4       	brge	.+50     	; 0x922 <motor_find_max_speed_manual+0xe0>
				max_speed = speed;
     8f0:	c0 92 ed 04 	sts	0x04ED, r12
     8f4:	d0 92 ee 04 	sts	0x04EE, r13
     8f8:	e0 92 ef 04 	sts	0x04EF, r14
     8fc:	f0 92 f0 04 	sts	0x04F0, r15
				printf("[MANUAL] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	4a e7       	ldi	r20, 0x7A	; 122
     906:	54 e4       	ldi	r21, 0x44	; 68
     908:	c7 01       	movw	r24, r14
     90a:	b6 01       	movw	r22, r12
     90c:	88 d6       	rcall	.+3344   	; 0x161e <__mulsf3>
     90e:	a0 d5       	rcall	.+2880   	; 0x1450 <__fixsfsi>
     910:	7f 93       	push	r23
     912:	6f 93       	push	r22
     914:	1f 93       	push	r17
     916:	0f 93       	push	r16
     918:	5c d7       	rcall	.+3768   	; 0x17d2 <printf>
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     922:	8f e3       	ldi	r24, 0x3F	; 63
     924:	9c e9       	ldi	r25, 0x9C	; 156
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	f1 f7       	brne	.-4      	; 0x926 <motor_find_max_speed_manual+0xe4>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <motor_find_max_speed_manual+0xea>
     92c:	00 00       	nop
	printf("---------------------------------------------------------\n");
	printf("CALIBRATE THE ENCODER BY MEASURING THE MAXIMUM VELOCITY\n");
	printf("PRESS ANY BUTTON TO CONTINUE\n");
	printf("---------------------------------------------------------\n");
	
	while(!button_is_pressed) {
     92e:	bb 20       	and	r11, r11
     930:	09 f4       	brne	.+2      	; 0x934 <motor_find_max_speed_manual+0xf2>
     932:	a8 cf       	rjmp	.-176    	; 0x884 <motor_find_max_speed_manual+0x42>
			}
			_delay_ms(10);
		}
	}
	
	printf("---------------------------------------------------------\n");
     934:	87 e9       	ldi	r24, 0x97	; 151
     936:	92 e0       	ldi	r25, 0x02	; 2
     938:	5d d7       	rcall	.+3770   	; 0x17f4 <puts>
	printf("CALIBRATION COMPLETE\n");
     93a:	85 e4       	ldi	r24, 0x45	; 69
     93c:	93 e0       	ldi	r25, 0x03	; 3
     93e:	5a d7       	rcall	.+3764   	; 0x17f4 <puts>
	printf("---------------------------------------------------------\n");
     940:	87 e9       	ldi	r24, 0x97	; 151
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	57 d7       	rcall	.+3758   	; 0x17f4 <puts>
	motor_set_velocity(0);
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	31 df       	rcall	.-414    	; 0x7ae <motor_set_velocity>
}
     94c:	2b 96       	adiw	r28, 0x0b	; 11
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	de bf       	out	0x3e, r29	; 62
     954:	0f be       	out	0x3f, r0	; 63
     956:	cd bf       	out	0x3d, r28	; 61
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	ff 90       	pop	r15
     962:	ef 90       	pop	r14
     964:	df 90       	pop	r13
     966:	cf 90       	pop	r12
     968:	bf 90       	pop	r11
     96a:	9f 90       	pop	r9
     96c:	8f 90       	pop	r8
     96e:	08 95       	ret

00000970 <motor_find_max_speed_auto>:

void motor_find_max_speed_auto(void){
     970:	2f 92       	push	r2
     972:	3f 92       	push	r3
     974:	4f 92       	push	r4
     976:	5f 92       	push	r5
     978:	6f 92       	push	r6
     97a:	7f 92       	push	r7
     97c:	8f 92       	push	r8
     97e:	9f 92       	push	r9
     980:	af 92       	push	r10
     982:	bf 92       	push	r11
     984:	cf 92       	push	r12
     986:	df 92       	push	r13
     988:	ef 92       	push	r14
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	a8 97       	sbiw	r28, 0x28	; 40
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
	cli();
     9a4:	f8 94       	cli
	const int16_t velocities[] = {100, -100, 100, -100, 100, -100, 100, -100, 100, -100};
     9a6:	84 e1       	ldi	r24, 0x14	; 20
     9a8:	e7 e0       	ldi	r30, 0x07	; 7
     9aa:	f2 e0       	ldi	r31, 0x02	; 2
     9ac:	de 01       	movw	r26, r28
     9ae:	11 96       	adiw	r26, 0x01	; 1
     9b0:	01 90       	ld	r0, Z+
     9b2:	0d 92       	st	X+, r0
     9b4:	8a 95       	dec	r24
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <motor_find_max_speed_auto+0x40>
     9b8:	9e 01       	movw	r18, r28
     9ba:	2f 5f       	subi	r18, 0xFF	; 255
     9bc:	3f 4f       	sbci	r19, 0xFF	; 255
     9be:	38 a7       	std	Y+40, r19	; 0x28
     9c0:	2f a3       	std	Y+39, r18	; 0x27
     9c2:	ae 01       	movw	r20, r28
     9c4:	4b 5e       	subi	r20, 0xEB	; 235
     9c6:	5f 4f       	sbci	r21, 0xFF	; 255
     9c8:	5e 8b       	std	Y+22, r21	; 0x16
     9ca:	4d 8b       	std	Y+21, r20	; 0x15
	const uint8_t time_interval = 85;  // Unit unknown
	
	const int velocity_count = sizeof(velocities)/sizeof(velocities[0]); // Size of array
	for (int i = 0; i < velocity_count; i++) {
		// Used to keep track of how long the motor has been going in one direction.
		uint64_t time_sum = 0;
     9cc:	31 2c       	mov	r3, r1
     9ce:	0f a1       	ldd	r16, Y+39	; 0x27
     9d0:	18 a5       	ldd	r17, Y+40	; 0x28
		printf("Set velocity to: %d\n", velocities[i]);
     9d2:	d8 01       	movw	r26, r16
     9d4:	11 96       	adiw	r26, 0x01	; 1
     9d6:	8c 91       	ld	r24, X
     9d8:	11 97       	sbiw	r26, 0x01	; 1
     9da:	8f 93       	push	r24
     9dc:	8c 91       	ld	r24, X
     9de:	8f 93       	push	r24
     9e0:	aa e5       	ldi	r26, 0x5A	; 90
     9e2:	b3 e0       	ldi	r27, 0x03	; 3
     9e4:	bf 93       	push	r27
     9e6:	af 93       	push	r26
     9e8:	f4 d6       	rcall	.+3560   	; 0x17d2 <printf>
		
		sei(); // Interrupts need to be enabled in order to set velocity
     9ea:	78 94       	sei
		motor_set_velocity(velocities[i]); 
     9ec:	f8 01       	movw	r30, r16
     9ee:	80 81       	ld	r24, Z
     9f0:	91 81       	ldd	r25, Z+1	; 0x01
     9f2:	2f a1       	ldd	r18, Y+39	; 0x27
     9f4:	38 a5       	ldd	r19, Y+40	; 0x28
     9f6:	2e 5f       	subi	r18, 0xFE	; 254
     9f8:	3f 4f       	sbci	r19, 0xFF	; 255
     9fa:	38 a7       	std	Y+40, r19	; 0x28
     9fc:	2f a3       	std	Y+39, r18	; 0x27
     9fe:	d7 de       	rcall	.-594    	; 0x7ae <motor_set_velocity>
		cli();
     a00:	f8 94       	cli
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
	const uint8_t time_interval = 85;  // Unit unknown
	
	const int velocity_count = sizeof(velocities)/sizeof(velocities[0]); // Size of array
	for (int i = 0; i < velocity_count; i++) {
		// Used to keep track of how long the motor has been going in one direction.
		uint64_t time_sum = 0;
     a0a:	3f 8e       	std	Y+31, r3	; 0x1f
     a0c:	38 a2       	std	Y+32, r3	; 0x20
     a0e:	39 a2       	std	Y+33, r3	; 0x21
     a10:	3a a2       	std	Y+34, r3	; 0x22
     a12:	3b a2       	std	Y+35, r3	; 0x23
     a14:	3c a2       	std	Y+36, r3	; 0x24
     a16:	3d a2       	std	Y+37, r3	; 0x25
     a18:	3e a2       	std	Y+38, r3	; 0x26
		motor_set_velocity(velocities[i]); 
		cli();
		
		// A somewhat hacky way of doing it. Consider switching to a separate timer in the future.
		while((uint8_t)((time_sum)>>8) < time_interval) {
			double time = time_passed();
     a1a:	3a d3       	rcall	.+1652   	; 0x1090 <time_passed>
     a1c:	4c 01       	movw	r8, r24
			time_sum += (uint64_t)time;
     a1e:	ac 01       	movw	r20, r24
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	dc 01       	movw	r26, r24
     a2a:	8f 8a       	std	Y+23, r8	; 0x17
     a2c:	58 8f       	std	Y+24, r21	; 0x18
     a2e:	69 8f       	std	Y+25, r22	; 0x19
     a30:	7a 8f       	std	Y+26, r23	; 0x1a
     a32:	8b 8f       	std	Y+27, r24	; 0x1b
     a34:	9c 8f       	std	Y+28, r25	; 0x1c
     a36:	ad 8f       	std	Y+29, r26	; 0x1d
     a38:	be 8f       	std	Y+30, r27	; 0x1e
     a3a:	2f 8d       	ldd	r18, Y+31	; 0x1f
     a3c:	38 a1       	ldd	r19, Y+32	; 0x20
     a3e:	49 a1       	ldd	r20, Y+33	; 0x21
     a40:	5a a1       	ldd	r21, Y+34	; 0x22
     a42:	6b a1       	ldd	r22, Y+35	; 0x23
     a44:	7c a1       	ldd	r23, Y+36	; 0x24
     a46:	8d a1       	ldd	r24, Y+37	; 0x25
     a48:	9e a1       	ldd	r25, Y+38	; 0x26
     a4a:	af 88       	ldd	r10, Y+23	; 0x17
     a4c:	b8 8c       	ldd	r11, Y+24	; 0x18
     a4e:	c3 2c       	mov	r12, r3
     a50:	d3 2c       	mov	r13, r3
     a52:	e3 2c       	mov	r14, r3
     a54:	f3 2c       	mov	r15, r3
     a56:	03 2d       	mov	r16, r3
     a58:	13 2d       	mov	r17, r3
     a5a:	68 d6       	rcall	.+3280   	; 0x172c <__adddi3>
     a5c:	22 2e       	mov	r2, r18
     a5e:	53 2e       	mov	r5, r19
     a60:	64 2e       	mov	r6, r20
     a62:	75 2e       	mov	r7, r21
     a64:	a6 2e       	mov	r10, r22
     a66:	b7 2e       	mov	r11, r23
     a68:	08 2f       	mov	r16, r24
     a6a:	19 2f       	mov	r17, r25
     a6c:	2f 8f       	std	Y+31, r18	; 0x1f
     a6e:	38 a3       	std	Y+32, r19	; 0x20
     a70:	49 a3       	std	Y+33, r20	; 0x21
     a72:	5a a3       	std	Y+34, r21	; 0x22
     a74:	6b a3       	std	Y+35, r22	; 0x23
     a76:	7c a3       	std	Y+36, r23	; 0x24
     a78:	8d a3       	std	Y+37, r24	; 0x25
     a7a:	9e a3       	std	Y+38, r25	; 0x26
			
			double speed = abs(motor_read_position_change())/time;
     a7c:	b8 de       	rcall	.-656    	; 0x7ee <motor_read_position_change>
     a7e:	99 23       	and	r25, r25
     a80:	1c f4       	brge	.+6      	; 0xa88 <motor_find_max_speed_auto+0x118>
     a82:	91 95       	neg	r25
     a84:	81 95       	neg	r24
     a86:	91 09       	sbc	r25, r1
     a88:	bc 01       	movw	r22, r24
     a8a:	88 27       	eor	r24, r24
     a8c:	77 fd       	sbrc	r23, 7
     a8e:	80 95       	com	r24
     a90:	98 2f       	mov	r25, r24
     a92:	11 d5       	rcall	.+2594   	; 0x14b6 <__floatsisf>
     a94:	6b 01       	movw	r12, r22
     a96:	7c 01       	movw	r14, r24
		motor_set_velocity(velocities[i]); 
		cli();
		
		// A somewhat hacky way of doing it. Consider switching to a separate timer in the future.
		while((uint8_t)((time_sum)>>8) < time_interval) {
			double time = time_passed();
     a98:	b4 01       	movw	r22, r8
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	09 d5       	rcall	.+2578   	; 0x14b2 <__floatunsisf>
     aa0:	9b 01       	movw	r18, r22
     aa2:	ac 01       	movw	r20, r24
			time_sum += (uint64_t)time;
			
			double speed = abs(motor_read_position_change())/time;
     aa4:	c7 01       	movw	r24, r14
     aa6:	b6 01       	movw	r22, r12
     aa8:	6b d4       	rcall	.+2262   	; 0x1380 <__divsf3>
     aaa:	c6 2e       	mov	r12, r22
     aac:	d7 2e       	mov	r13, r23
     aae:	e8 2e       	mov	r14, r24
     ab0:	f9 2e       	mov	r15, r25
			max_speed = MAX(speed, max_speed);
     ab2:	90 90 ed 04 	lds	r9, 0x04ED
     ab6:	80 90 ee 04 	lds	r8, 0x04EE
     aba:	50 91 ef 04 	lds	r21, 0x04EF
     abe:	5f 8b       	std	Y+23, r21	; 0x17
     ac0:	40 90 f0 04 	lds	r4, 0x04F0
     ac4:	29 2d       	mov	r18, r9
     ac6:	38 2d       	mov	r19, r8
     ac8:	45 2f       	mov	r20, r21
     aca:	54 2d       	mov	r21, r4
     acc:	55 d4       	rcall	.+2218   	; 0x1378 <__cmpsf2>
     ace:	88 23       	and	r24, r24
     ad0:	24 f4       	brge	.+8      	; 0xada <motor_find_max_speed_auto+0x16a>
     ad2:	c9 2c       	mov	r12, r9
     ad4:	d8 2c       	mov	r13, r8
     ad6:	ef 88       	ldd	r14, Y+23	; 0x17
     ad8:	f4 2c       	mov	r15, r4
     ada:	8c 2d       	mov	r24, r12
     adc:	9d 2d       	mov	r25, r13
     ade:	ae 2d       	mov	r26, r14
     ae0:	bf 2d       	mov	r27, r15
     ae2:	80 93 ed 04 	sts	0x04ED, r24
     ae6:	90 93 ee 04 	sts	0x04EE, r25
     aea:	a0 93 ef 04 	sts	0x04EF, r26
     aee:	b0 93 f0 04 	sts	0x04F0, r27
     af2:	6f ef       	ldi	r22, 0xFF	; 255
     af4:	70 e7       	ldi	r23, 0x70	; 112
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	61 50       	subi	r22, 0x01	; 1
     afa:	70 40       	sbci	r23, 0x00	; 0
     afc:	80 40       	sbci	r24, 0x00	; 0
     afe:	e1 f7       	brne	.-8      	; 0xaf8 <motor_find_max_speed_auto+0x188>
     b00:	00 c0       	rjmp	.+0      	; 0xb02 <motor_find_max_speed_auto+0x192>
     b02:	00 00       	nop
		sei(); // Interrupts need to be enabled in order to set velocity
		motor_set_velocity(velocities[i]); 
		cli();
		
		// A somewhat hacky way of doing it. Consider switching to a separate timer in the future.
		while((uint8_t)((time_sum)>>8) < time_interval) {
     b04:	22 2d       	mov	r18, r2
     b06:	35 2d       	mov	r19, r5
     b08:	46 2d       	mov	r20, r6
     b0a:	57 2d       	mov	r21, r7
     b0c:	6a 2d       	mov	r22, r10
     b0e:	7b 2d       	mov	r23, r11
     b10:	80 2f       	mov	r24, r16
     b12:	91 2f       	mov	r25, r17
     b14:	08 e0       	ldi	r16, 0x08	; 8
     b16:	ee d5       	rcall	.+3036   	; 0x16f4 <__lshrdi3>
     b18:	25 35       	cpi	r18, 0x55	; 85
     b1a:	08 f4       	brcc	.+2      	; 0xb1e <motor_find_max_speed_auto+0x1ae>
     b1c:	7e cf       	rjmp	.-260    	; 0xa1a <motor_find_max_speed_auto+0xaa>
	cli();
	const int16_t velocities[] = {100, -100, 100, -100, 100, -100, 100, -100, 100, -100};
	const uint8_t time_interval = 85;  // Unit unknown
	
	const int velocity_count = sizeof(velocities)/sizeof(velocities[0]); // Size of array
	for (int i = 0; i < velocity_count; i++) {
     b1e:	af a1       	ldd	r26, Y+39	; 0x27
     b20:	b8 a5       	ldd	r27, Y+40	; 0x28
     b22:	ed 89       	ldd	r30, Y+21	; 0x15
     b24:	fe 89       	ldd	r31, Y+22	; 0x16
     b26:	ae 17       	cp	r26, r30
     b28:	bf 07       	cpc	r27, r31
     b2a:	09 f0       	breq	.+2      	; 0xb2e <motor_find_max_speed_auto+0x1be>
     b2c:	50 cf       	rjmp	.-352    	; 0x9ce <motor_find_max_speed_auto+0x5e>
			
			_delay_ms(50);
		}
	}
	
	printf("[AUTOMATIC] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	4a e7       	ldi	r20, 0x7A	; 122
     b34:	54 e4       	ldi	r21, 0x44	; 68
     b36:	60 91 ed 04 	lds	r22, 0x04ED
     b3a:	70 91 ee 04 	lds	r23, 0x04EE
     b3e:	80 91 ef 04 	lds	r24, 0x04EF
     b42:	90 91 f0 04 	lds	r25, 0x04F0
     b46:	6b d5       	rcall	.+2774   	; 0x161e <__mulsf3>
     b48:	83 d4       	rcall	.+2310   	; 0x1450 <__fixsfsi>
     b4a:	7f 93       	push	r23
     b4c:	6f 93       	push	r22
     b4e:	8f e6       	ldi	r24, 0x6F	; 111
     b50:	93 e0       	ldi	r25, 0x03	; 3
     b52:	9f 93       	push	r25
     b54:	8f 93       	push	r24
     b56:	3d d6       	rcall	.+3194   	; 0x17d2 <printf>
	
	sei(); // Interrupts need to be enabled in order to set velocity
     b58:	78 94       	sei
	motor_set_velocity(0); 
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	27 de       	rcall	.-946    	; 0x7ae <motor_set_velocity>
	cli();
     b60:	f8 94       	cli
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
}
     b6a:	a8 96       	adiw	r28, 0x28	; 40
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	f8 94       	cli
     b70:	de bf       	out	0x3e, r29	; 62
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	cd bf       	out	0x3d, r28	; 61
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	ff 90       	pop	r15
     b80:	ef 90       	pop	r14
     b82:	df 90       	pop	r13
     b84:	cf 90       	pop	r12
     b86:	bf 90       	pop	r11
     b88:	af 90       	pop	r10
     b8a:	9f 90       	pop	r9
     b8c:	8f 90       	pop	r8
     b8e:	7f 90       	pop	r7
     b90:	6f 90       	pop	r6
     b92:	5f 90       	pop	r5
     b94:	4f 90       	pop	r4
     b96:	3f 90       	pop	r3
     b98:	2f 90       	pop	r2
     b9a:	08 95       	ret

00000b9c <motor_init>:

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/

void motor_init(max_speed_mode mode){
     b9c:	cf 93       	push	r28
     b9e:	c8 2f       	mov	r28, r24
	MAX520_init(0b000);
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	71 dd       	rcall	.-1310   	; 0x686 <MAX520_init>
	motor_enable();
     ba4:	e2 dd       	rcall	.-1084   	; 0x76a <motor_enable>
	clear_bit(MJ1, OE);  // Enable encoder
     ba6:	e2 e0       	ldi	r30, 0x02	; 2
     ba8:	f1 e0       	ldi	r31, 0x01	; 1
     baa:	80 81       	ld	r24, Z
     bac:	8f 7d       	andi	r24, 0xDF	; 223
     bae:	80 83       	st	Z, r24
	set_bit(MJ1, RST);
     bb0:	80 81       	ld	r24, Z
     bb2:	80 64       	ori	r24, 0x40	; 64
     bb4:	80 83       	st	Z, r24
	
	motor_set_velocity(0);
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	f9 dd       	rcall	.-1038   	; 0x7ae <motor_set_velocity>
	
	// Set PORTH as output
	DDRH = 0xFF;
     bbc:	8f ef       	ldi	r24, 0xFF	; 255
     bbe:	80 93 01 01 	sts	0x0101, r24
	time_init();  // Used for measurement of speed/velocity.
     bc2:	5f d2       	rcall	.+1214   	; 0x1082 <time_init>
	
	// Read the change in position to clear the encoder before measurements are made
	motor_read_position_change();
     bc4:	14 de       	rcall	.-984    	; 0x7ee <motor_read_position_change>
	
	switch (mode) {
     bc6:	c1 30       	cpi	r28, 0x01	; 1
     bc8:	89 f0       	breq	.+34     	; 0xbec <motor_init+0x50>
     bca:	18 f0       	brcs	.+6      	; 0xbd2 <motor_init+0x36>
     bcc:	c2 30       	cpi	r28, 0x02	; 2
     bce:	81 f0       	breq	.+32     	; 0xbf0 <motor_init+0x54>
     bd0:	10 c0       	rjmp	.+32     	; 0xbf2 <motor_init+0x56>
		case DEFAULT:
		max_speed = MOTOR_DEFAULT_MAX_SPEED;
     bd2:	89 ed       	ldi	r24, 0xD9	; 217
     bd4:	9e ec       	ldi	r25, 0xCE	; 206
     bd6:	a7 ef       	ldi	r26, 0xF7	; 247
     bd8:	be e3       	ldi	r27, 0x3E	; 62
     bda:	80 93 ed 04 	sts	0x04ED, r24
     bde:	90 93 ee 04 	sts	0x04EE, r25
     be2:	a0 93 ef 04 	sts	0x04EF, r26
     be6:	b0 93 f0 04 	sts	0x04F0, r27
		break;
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <motor_init+0x56>
		
		case MANUAL:
		motor_find_max_speed_manual();
     bec:	2a de       	rcall	.-940    	; 0x842 <motor_find_max_speed_manual>
		break;
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <motor_init+0x56>
		
		case AUTOMATIC:
		motor_find_max_speed_auto();
     bf0:	bf de       	rcall	.-642    	; 0x970 <motor_find_max_speed_auto>
	}
}
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <motor_get_velocity>:
	set_bit(MJ1, OE);
	
	return position_change;
}

int8_t motor_get_velocity(void) {
     bf6:	cf 92       	push	r12
     bf8:	df 92       	push	r13
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
	double velocity = ((double) motor_read_position_change()) / time_passed();
     c02:	f5 dd       	rcall	.-1046   	; 0x7ee <motor_read_position_change>
     c04:	7c 01       	movw	r14, r24
     c06:	44 d2       	rcall	.+1160   	; 0x1090 <time_passed>
     c08:	ec 01       	movw	r28, r24
     c0a:	b7 01       	movw	r22, r14
     c0c:	88 27       	eor	r24, r24
     c0e:	77 fd       	sbrc	r23, 7
     c10:	80 95       	com	r24
     c12:	98 2f       	mov	r25, r24
     c14:	50 d4       	rcall	.+2208   	; 0x14b6 <__floatsisf>
     c16:	6b 01       	movw	r12, r22
     c18:	7c 01       	movw	r14, r24
     c1a:	be 01       	movw	r22, r28
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	48 d4       	rcall	.+2192   	; 0x14b2 <__floatunsisf>
     c22:	9b 01       	movw	r18, r22
     c24:	ac 01       	movw	r20, r24
     c26:	c7 01       	movw	r24, r14
     c28:	b6 01       	movw	r22, r12
     c2a:	aa d3       	rcall	.+1876   	; 0x1380 <__divsf3>
	int velocity_percentage = velocity * 100/max_speed;	
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	48 ec       	ldi	r20, 0xC8	; 200
     c32:	52 e4       	ldi	r21, 0x42	; 66
     c34:	f4 d4       	rcall	.+2536   	; 0x161e <__mulsf3>
     c36:	20 91 ed 04 	lds	r18, 0x04ED
     c3a:	30 91 ee 04 	lds	r19, 0x04EE
     c3e:	40 91 ef 04 	lds	r20, 0x04EF
     c42:	50 91 f0 04 	lds	r21, 0x04F0
     c46:	9c d3       	rcall	.+1848   	; 0x1380 <__divsf3>
     c48:	03 d4       	rcall	.+2054   	; 0x1450 <__fixsfsi>
	return SATURATE(velocity_percentage, -100, 100);
     c4a:	65 36       	cpi	r22, 0x65	; 101
     c4c:	71 05       	cpc	r23, r1
     c4e:	44 f4       	brge	.+16     	; 0xc60 <motor_get_velocity+0x6a>
     c50:	6c 39       	cpi	r22, 0x9C	; 156
     c52:	8f ef       	ldi	r24, 0xFF	; 255
     c54:	78 07       	cpc	r23, r24
     c56:	14 f4       	brge	.+4      	; 0xc5c <motor_get_velocity+0x66>
     c58:	6c e9       	ldi	r22, 0x9C	; 156
     c5a:	7f ef       	ldi	r23, 0xFF	; 255
     c5c:	86 2f       	mov	r24, r22
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <motor_get_velocity+0x6c>
     c60:	84 e6       	ldi	r24, 0x64	; 100
}
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	08 95       	ret

00000c70 <PI_init>:

volatile PI_controller_t controller;


void PI_init() {
	controller.max_error_sum = 20;
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	a0 ea       	ldi	r26, 0xA0	; 160
     c76:	b1 e4       	ldi	r27, 0x41	; 65
     c78:	80 93 0f 05 	sts	0x050F, r24
     c7c:	90 93 10 05 	sts	0x0510, r25
     c80:	a0 93 11 05 	sts	0x0511, r26
     c84:	b0 93 12 05 	sts	0x0512, r27
	controller.error_sum = 0;
     c88:	10 92 0b 05 	sts	0x050B, r1
     c8c:	10 92 0c 05 	sts	0x050C, r1
     c90:	10 92 0d 05 	sts	0x050D, r1
     c94:	10 92 0e 05 	sts	0x050E, r1
	controller.k_p = 0.5;
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	a0 e0       	ldi	r26, 0x00	; 0
     c9e:	bf e3       	ldi	r27, 0x3F	; 63
     ca0:	80 93 03 05 	sts	0x0503, r24
     ca4:	90 93 04 05 	sts	0x0504, r25
     ca8:	a0 93 05 05 	sts	0x0505, r26
     cac:	b0 93 06 05 	sts	0x0506, r27
	controller.k_i = 0.2;
     cb0:	8d ec       	ldi	r24, 0xCD	; 205
     cb2:	9c ec       	ldi	r25, 0xCC	; 204
     cb4:	ac e4       	ldi	r26, 0x4C	; 76
     cb6:	be e3       	ldi	r27, 0x3E	; 62
     cb8:	80 93 07 05 	sts	0x0507, r24
     cbc:	90 93 08 05 	sts	0x0508, r25
     cc0:	a0 93 09 05 	sts	0x0509, r26
     cc4:	b0 93 0a 05 	sts	0x050A, r27
     cc8:	08 95       	ret

00000cca <PI_control>:
	//controller.k_p = 0.7;
	//controller.k_i = 0.1;
}


void PI_control(double velocity_reference) {
     cca:	cf 92       	push	r12
     ccc:	df 92       	push	r13
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	0f 93       	push	r16
     cd4:	1f 93       	push	r17
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	6b 01       	movw	r12, r22
     cdc:	7c 01       	movw	r14, r24
	double error = velocity_reference - motor_get_velocity();
     cde:	8b df       	rcall	.-234    	; 0xbf6 <motor_get_velocity>
     ce0:	68 2f       	mov	r22, r24
     ce2:	77 27       	eor	r23, r23
     ce4:	67 fd       	sbrc	r22, 7
     ce6:	70 95       	com	r23
     ce8:	87 2f       	mov	r24, r23
     cea:	97 2f       	mov	r25, r23
     cec:	e4 d3       	rcall	.+1992   	; 0x14b6 <__floatsisf>
     cee:	9b 01       	movw	r18, r22
     cf0:	ac 01       	movw	r20, r24
     cf2:	c7 01       	movw	r24, r14
     cf4:	b6 01       	movw	r22, r12
     cf6:	db d2       	rcall	.+1462   	; 0x12ae <__subsf3>
     cf8:	6b 01       	movw	r12, r22
     cfa:	7c 01       	movw	r14, r24
	
	// Find the next error_sum.
	controller.error_sum += error;
     cfc:	cb e0       	ldi	r28, 0x0B	; 11
     cfe:	d5 e0       	ldi	r29, 0x05	; 5
     d00:	68 81       	ld	r22, Y
     d02:	79 81       	ldd	r23, Y+1	; 0x01
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	9b 81       	ldd	r25, Y+3	; 0x03
     d08:	a7 01       	movw	r20, r14
     d0a:	96 01       	movw	r18, r12
     d0c:	d1 d2       	rcall	.+1442   	; 0x12b0 <__addsf3>
     d0e:	68 83       	st	Y, r22
     d10:	79 83       	std	Y+1, r23	; 0x01
     d12:	8a 83       	std	Y+2, r24	; 0x02
     d14:	9b 83       	std	Y+3, r25	; 0x03
	
	// Saturate the error sum, such that it is on the interval [-MAX_ERROR_SUM, +MAX_ERROR_SUM]
	controller.error_sum = SATURATE(controller.error_sum, -controller.max_error_sum, controller.max_error_sum);
     d16:	68 81       	ld	r22, Y
     d18:	79 81       	ldd	r23, Y+1	; 0x01
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	9b 81       	ldd	r25, Y+3	; 0x03
     d1e:	00 91 0f 05 	lds	r16, 0x050F
     d22:	10 91 10 05 	lds	r17, 0x0510
     d26:	20 91 11 05 	lds	r18, 0x0511
     d2a:	30 91 12 05 	lds	r19, 0x0512
     d2e:	a9 01       	movw	r20, r18
     d30:	98 01       	movw	r18, r16
     d32:	50 58       	subi	r21, 0x80	; 128
     d34:	21 d3       	rcall	.+1602   	; 0x1378 <__cmpsf2>
     d36:	88 23       	and	r24, r24
     d38:	64 f4       	brge	.+24     	; 0xd52 <PI_control+0x88>
     d3a:	80 91 0f 05 	lds	r24, 0x050F
     d3e:	90 91 10 05 	lds	r25, 0x0510
     d42:	a0 91 11 05 	lds	r26, 0x0511
     d46:	b0 91 12 05 	lds	r27, 0x0512
     d4a:	bc 01       	movw	r22, r24
     d4c:	cd 01       	movw	r24, r26
     d4e:	90 58       	subi	r25, 0x80	; 128
     d50:	08 c0       	rjmp	.+16     	; 0xd62 <PI_control+0x98>
     d52:	60 91 0b 05 	lds	r22, 0x050B
     d56:	70 91 0c 05 	lds	r23, 0x050C
     d5a:	80 91 0d 05 	lds	r24, 0x050D
     d5e:	90 91 0e 05 	lds	r25, 0x050E
     d62:	20 91 0f 05 	lds	r18, 0x050F
     d66:	30 91 10 05 	lds	r19, 0x0510
     d6a:	40 91 11 05 	lds	r20, 0x0511
     d6e:	50 91 12 05 	lds	r21, 0x0512
     d72:	51 d4       	rcall	.+2210   	; 0x1616 <__gesf2>
     d74:	18 16       	cp	r1, r24
     d76:	4c f4       	brge	.+18     	; 0xd8a <PI_control+0xc0>
     d78:	80 91 0f 05 	lds	r24, 0x050F
     d7c:	90 91 10 05 	lds	r25, 0x0510
     d80:	a0 91 11 05 	lds	r26, 0x0511
     d84:	b0 91 12 05 	lds	r27, 0x0512
     d88:	28 c0       	rjmp	.+80     	; 0xdda <PI_control+0x110>
     d8a:	60 91 0b 05 	lds	r22, 0x050B
     d8e:	70 91 0c 05 	lds	r23, 0x050C
     d92:	80 91 0d 05 	lds	r24, 0x050D
     d96:	90 91 0e 05 	lds	r25, 0x050E
     d9a:	00 91 0f 05 	lds	r16, 0x050F
     d9e:	10 91 10 05 	lds	r17, 0x0510
     da2:	20 91 11 05 	lds	r18, 0x0511
     da6:	30 91 12 05 	lds	r19, 0x0512
     daa:	a9 01       	movw	r20, r18
     dac:	98 01       	movw	r18, r16
     dae:	50 58       	subi	r21, 0x80	; 128
     db0:	e3 d2       	rcall	.+1478   	; 0x1378 <__cmpsf2>
     db2:	88 23       	and	r24, r24
     db4:	54 f4       	brge	.+20     	; 0xdca <PI_control+0x100>
     db6:	80 91 0f 05 	lds	r24, 0x050F
     dba:	90 91 10 05 	lds	r25, 0x0510
     dbe:	a0 91 11 05 	lds	r26, 0x0511
     dc2:	b0 91 12 05 	lds	r27, 0x0512
     dc6:	b0 58       	subi	r27, 0x80	; 128
     dc8:	08 c0       	rjmp	.+16     	; 0xdda <PI_control+0x110>
     dca:	80 91 0b 05 	lds	r24, 0x050B
     dce:	90 91 0c 05 	lds	r25, 0x050C
     dd2:	a0 91 0d 05 	lds	r26, 0x050D
     dd6:	b0 91 0e 05 	lds	r27, 0x050E
     dda:	eb e0       	ldi	r30, 0x0B	; 11
     ddc:	f5 e0       	ldi	r31, 0x05	; 5
     dde:	80 83       	st	Z, r24
     de0:	91 83       	std	Z+1, r25	; 0x01
     de2:	a2 83       	std	Z+2, r26	; 0x02
     de4:	b3 83       	std	Z+3, r27	; 0x03
	
	// Calculate the output signal of the PI-regulator.
	int output_signal = (controller.k_p * error) + (controller.k_i * controller.error_sum);
     de6:	80 91 03 05 	lds	r24, 0x0503
     dea:	90 91 04 05 	lds	r25, 0x0504
     dee:	a0 91 05 05 	lds	r26, 0x0505
     df2:	b0 91 06 05 	lds	r27, 0x0506
     df6:	80 91 07 05 	lds	r24, 0x0507
     dfa:	90 91 08 05 	lds	r25, 0x0508
     dfe:	a0 91 09 05 	lds	r26, 0x0509
     e02:	b0 91 0a 05 	lds	r27, 0x050A
     e06:	80 81       	ld	r24, Z
     e08:	91 81       	ldd	r25, Z+1	; 0x01
     e0a:	a2 81       	ldd	r26, Z+2	; 0x02
     e0c:	b3 81       	ldd	r27, Z+3	; 0x03
	
	motor_set_velocity(error);
     e0e:	c7 01       	movw	r24, r14
     e10:	b6 01       	movw	r22, r12
     e12:	1e d3       	rcall	.+1596   	; 0x1450 <__fixsfsi>
     e14:	cb 01       	movw	r24, r22
     e16:	cb dc       	rcall	.-1642   	; 0x7ae <motor_set_velocity>
}
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	df 90       	pop	r13
     e26:	cf 90       	pop	r12
     e28:	08 95       	ret

00000e2a <servo_init>:
#define WIDTH_MIDPOINT (MAX_WIDTH + MIN_WIDTH) / 2
#define WIDTH_RADIUS   (MAX_WIDTH - MIN_WIDTH) / 2


void servo_init(void){
	PWM_init();
     e2a:	ec d0       	rcall	.+472    	; 0x1004 <PWM_init>
	PWM_set_width(WIDTH_MIDPOINT);
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	80 ec       	ldi	r24, 0xC0	; 192
     e32:	9f e3       	ldi	r25, 0x3F	; 63
     e34:	0b c1       	rjmp	.+534    	; 0x104c <PWM_set_width>
     e36:	08 95       	ret

00000e38 <servo_set>:
}

void servo_set(uint8_t x){
     e38:	cf 92       	push	r12
     e3a:	df 92       	push	r13
     e3c:	ef 92       	push	r14
     e3e:	ff 92       	push	r15
	// Calculate the width for the PWM.
	float width = MIN_WIDTH + (MAX_WIDTH - MIN_WIDTH) * ((float) x) / 255;
     e40:	68 2f       	mov	r22, r24
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	34 d3       	rcall	.+1640   	; 0x14b2 <__floatunsisf>
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	4f e7       	ldi	r20, 0x7F	; 127
     e50:	53 e4       	ldi	r21, 0x43	; 67
     e52:	96 d2       	rcall	.+1324   	; 0x1380 <__divsf3>
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e8       	ldi	r20, 0x80	; 128
     e5a:	5f e3       	ldi	r21, 0x3F	; 63
     e5c:	29 d2       	rcall	.+1106   	; 0x12b0 <__addsf3>
     e5e:	6b 01       	movw	r12, r22
     e60:	7c 01       	movw	r14, r24
	
	// Make sure width is within range.
	width = SATURATE(width, MIN_WIDTH, MAX_WIDTH);
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e8       	ldi	r20, 0x80	; 128
     e68:	5f e3       	ldi	r21, 0x3F	; 63
     e6a:	86 d2       	rcall	.+1292   	; 0x1378 <__cmpsf2>
     e6c:	88 23       	and	r24, r24
     e6e:	dc f0       	brlt	.+54     	; 0xea6 <servo_set+0x6e>
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	50 e4       	ldi	r21, 0x40	; 64
     e78:	c7 01       	movw	r24, r14
     e7a:	b6 01       	movw	r22, r12
     e7c:	cc d3       	rcall	.+1944   	; 0x1616 <__gesf2>
     e7e:	18 16       	cp	r1, r24
     e80:	dc f0       	brlt	.+54     	; 0xeb8 <servo_set+0x80>
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e8       	ldi	r20, 0x80	; 128
     e88:	5f e3       	ldi	r21, 0x3F	; 63
     e8a:	c7 01       	movw	r24, r14
     e8c:	b6 01       	movw	r22, r12
     e8e:	74 d2       	rcall	.+1256   	; 0x1378 <__cmpsf2>
     e90:	88 23       	and	r24, r24
     e92:	bc f4       	brge	.+46     	; 0xec2 <servo_set+0x8a>
     e94:	0f 2e       	mov	r0, r31
     e96:	c1 2c       	mov	r12, r1
     e98:	d1 2c       	mov	r13, r1
     e9a:	f0 e8       	ldi	r31, 0x80	; 128
     e9c:	ef 2e       	mov	r14, r31
     e9e:	ff e3       	ldi	r31, 0x3F	; 63
     ea0:	ff 2e       	mov	r15, r31
     ea2:	f0 2d       	mov	r31, r0
     ea4:	0e c0       	rjmp	.+28     	; 0xec2 <servo_set+0x8a>
     ea6:	0f 2e       	mov	r0, r31
     ea8:	c1 2c       	mov	r12, r1
     eaa:	d1 2c       	mov	r13, r1
     eac:	f0 e8       	ldi	r31, 0x80	; 128
     eae:	ef 2e       	mov	r14, r31
     eb0:	ff e3       	ldi	r31, 0x3F	; 63
     eb2:	ff 2e       	mov	r15, r31
     eb4:	f0 2d       	mov	r31, r0
     eb6:	05 c0       	rjmp	.+10     	; 0xec2 <servo_set+0x8a>
     eb8:	c1 2c       	mov	r12, r1
     eba:	d1 2c       	mov	r13, r1
     ebc:	76 01       	movw	r14, r12
     ebe:	68 94       	set
     ec0:	f6 f8       	bld	r15, 6
	
	PWM_set_width(width);
     ec2:	c7 01       	movw	r24, r14
     ec4:	b6 01       	movw	r22, r12
     ec6:	c2 d0       	rcall	.+388    	; 0x104c <PWM_set_width>
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	08 95       	ret

00000ed2 <__vector_47>:

void solenoid_timer_init(void);


// Wait for the solenoid to charge up for ~300 ms before allowing it to fire again.
ISR(TIMER5_COMPA_vect) {
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	0b b6       	in	r0, 0x3b	; 59
     ede:	0f 92       	push	r0
     ee0:	8f 93       	push	r24
     ee2:	9f 93       	push	r25
     ee4:	ef 93       	push	r30
     ee6:	ff 93       	push	r31
	solenoid_charged_flag++;
     ee8:	80 91 f1 04 	lds	r24, 0x04F1
     eec:	90 91 f2 04 	lds	r25, 0x04F2
     ef0:	01 96       	adiw	r24, 0x01	; 1
     ef2:	90 93 f2 04 	sts	0x04F2, r25
     ef6:	80 93 f1 04 	sts	0x04F1, r24
	TIMER5A_STOP();
     efa:	e3 e7       	ldi	r30, 0x73	; 115
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8d 7f       	andi	r24, 0xFD	; 253
     f02:	80 83       	st	Z, r24
}
     f04:	ff 91       	pop	r31
     f06:	ef 91       	pop	r30
     f08:	9f 91       	pop	r25
     f0a:	8f 91       	pop	r24
     f0c:	0f 90       	pop	r0
     f0e:	0b be       	out	0x3b, r0	; 59
     f10:	0f 90       	pop	r0
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	0f 90       	pop	r0
     f16:	1f 90       	pop	r1
     f18:	18 95       	reti

00000f1a <__vector_48>:


// Retract the solenoid ~30 ms after shooting it out, and start recharging.
ISR(TIMER5_COMPB_vect) {
     f1a:	1f 92       	push	r1
     f1c:	0f 92       	push	r0
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	0f 92       	push	r0
     f22:	11 24       	eor	r1, r1
     f24:	0b b6       	in	r0, 0x3b	; 59
     f26:	0f 92       	push	r0
     f28:	8f 93       	push	r24
     f2a:	ef 93       	push	r30
     f2c:	ff 93       	push	r31
	SOLENOID_RETRACT();
     f2e:	2c 9a       	sbi	0x05, 4	; 5
	TIMER5B_STOP();
     f30:	e3 e7       	ldi	r30, 0x73	; 115
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	8b 7f       	andi	r24, 0xFB	; 251
     f38:	80 83       	st	Z, r24
	TIMER5A_START();
     f3a:	d1 9a       	sbi	0x1a, 1	; 26
     f3c:	80 81       	ld	r24, Z
     f3e:	82 60       	ori	r24, 0x02	; 2
     f40:	80 83       	st	Z, r24
}
     f42:	ff 91       	pop	r31
     f44:	ef 91       	pop	r30
     f46:	8f 91       	pop	r24
     f48:	0f 90       	pop	r0
     f4a:	0b be       	out	0x3b, r0	; 59
     f4c:	0f 90       	pop	r0
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	0f 90       	pop	r0
     f52:	1f 90       	pop	r1
     f54:	18 95       	reti

00000f56 <solenoid_send_pulse>:
}


void solenoid_send_pulse(){
	// Only allow the solenoid to fire if it has been charged up.
	if(solenoid_charged_flag) {
     f56:	80 91 f1 04 	lds	r24, 0x04F1
     f5a:	90 91 f2 04 	lds	r25, 0x04F2
     f5e:	89 2b       	or	r24, r25
     f60:	59 f0       	breq	.+22     	; 0xf78 <solenoid_send_pulse+0x22>
		solenoid_charged_flag = 0;
     f62:	10 92 f2 04 	sts	0x04F2, r1
     f66:	10 92 f1 04 	sts	0x04F1, r1
		SOLENOID_EJECT();
     f6a:	2c 98       	cbi	0x05, 4	; 5
		TIMER5B_START();
     f6c:	d2 9a       	sbi	0x1a, 2	; 26
     f6e:	e3 e7       	ldi	r30, 0x73	; 115
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	84 60       	ori	r24, 0x04	; 4
     f76:	80 83       	st	Z, r24
     f78:	08 95       	ret

00000f7a <solenoid_timer_init>:
}


void solenoid_timer_init(void) {
	// Timer mode 4, (CTC) [Table 17-2]
	set_bit(TCCR5B, WGM52);
     f7a:	e1 e2       	ldi	r30, 0x21	; 33
     f7c:	f1 e0       	ldi	r31, 0x01	; 1
     f7e:	80 81       	ld	r24, Z
     f80:	88 60       	ori	r24, 0x08	; 8
     f82:	80 83       	st	Z, r24
	
	// Compare output mode. Clear counter on compare match [Table 17-3]
	set_bit(TCCR5A, COM5A1);
     f84:	a0 e2       	ldi	r26, 0x20	; 32
     f86:	b1 e0       	ldi	r27, 0x01	; 1
     f88:	8c 91       	ld	r24, X
     f8a:	80 68       	ori	r24, 0x80	; 128
     f8c:	8c 93       	st	X, r24
	
	// Use a prescaler of 1024 [Table 17-6]
	set_bit(TCCR5B, CS50);
     f8e:	80 81       	ld	r24, Z
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	80 83       	st	Z, r24
	set_bit(TCCR5B, CS52);
     f94:	80 81       	ld	r24, Z
     f96:	84 60       	ori	r24, 0x04	; 4
     f98:	80 83       	st	Z, r24
	
	// Set interrupt counter compare match values
	OCR5A = (int) (F_CPU * TIMER_5A_DELAY / TIMER5_PRESCALER);
     f9a:	8f e4       	ldi	r24, 0x4F	; 79
     f9c:	92 e1       	ldi	r25, 0x12	; 18
     f9e:	90 93 29 01 	sts	0x0129, r25
     fa2:	80 93 28 01 	sts	0x0128, r24
	OCR5B = (int) (F_CPU * TIMER_5B_DELAY / TIMER5_PRESCALER);
     fa6:	84 ed       	ldi	r24, 0xD4	; 212
     fa8:	91 e0       	ldi	r25, 0x01	; 1
     faa:	90 93 2b 01 	sts	0x012B, r25
     fae:	80 93 2a 01 	sts	0x012A, r24
	
	// The solenoid starts in a charged up state.
	solenoid_charged_flag = 1;
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	90 93 f2 04 	sts	0x04F2, r25
     fba:	80 93 f1 04 	sts	0x04F1, r24
     fbe:	08 95       	ret

00000fc0 <solenoid_init>:
}


void solenoid_init(){
	// Set output pin PB4
	set_bit(DDRB, DDB4);
     fc0:	24 9a       	sbi	0x04, 4	; 4
	
	// Set high to disconnect
	set_bit(PORTB, PB4);
     fc2:	2c 9a       	sbi	0x05, 4	; 5
	
	solenoid_timer_init();
     fc4:	da cf       	rjmp	.-76     	; 0xf7a <solenoid_timer_init>
     fc6:	08 95       	ret

00000fc8 <SPI_init>:

void SPI_test(void) {
	SPI_send(0x00);
	uint8_t spi_read_result = SPI_read();
	
	printf("SPI_TEST: %x\n\n", spi_read_result);
     fc8:	22 9a       	sbi	0x04, 2	; 4
     fca:	21 9a       	sbi	0x04, 1	; 4
     fcc:	27 9a       	sbi	0x04, 7	; 4
     fce:	20 9a       	sbi	0x04, 0	; 4
     fd0:	8c b5       	in	r24, 0x2c	; 44
     fd2:	80 61       	ori	r24, 0x10	; 16
     fd4:	8c bd       	out	0x2c, r24	; 44
     fd6:	8c b5       	in	r24, 0x2c	; 44
     fd8:	81 60       	ori	r24, 0x01	; 1
     fda:	8c bd       	out	0x2c, r24	; 44
     fdc:	8c b5       	in	r24, 0x2c	; 44
     fde:	80 64       	ori	r24, 0x40	; 64
     fe0:	8c bd       	out	0x2c, r24	; 44
     fe2:	08 95       	ret

00000fe4 <SPI_send>:
     fe4:	8e bd       	out	0x2e, r24	; 46
     fe6:	0d b4       	in	r0, 0x2d	; 45
     fe8:	07 fe       	sbrs	r0, 7
     fea:	fd cf       	rjmp	.-6      	; 0xfe6 <SPI_send+0x2>
     fec:	08 95       	ret

00000fee <SPI_read>:
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	f9 df       	rcall	.-14     	; 0xfe4 <SPI_send>
     ff2:	0d b4       	in	r0, 0x2d	; 45
     ff4:	07 fe       	sbrs	r0, 7
     ff6:	fd cf       	rjmp	.-6      	; 0xff2 <SPI_read+0x4>
     ff8:	8e b5       	in	r24, 0x2e	; 46
     ffa:	08 95       	ret

00000ffc <SPI_select>:
	
}

void SPI_select(void){
	clear_bit(PORTB, SS);
     ffc:	2f 98       	cbi	0x05, 7	; 5
     ffe:	08 95       	ret

00001000 <SPI_deselect>:
}

void SPI_deselect(void){
	set_bit(PORTB, SS);
    1000:	2f 9a       	sbi	0x05, 7	; 5
    1002:	08 95       	ret

00001004 <PWM_init>:

void PWM_init(void){
	//if clk_io = 1 / F_CPU: prescalar = 8, TOP = 39 999

	//select source of clock signal and set prescaler = 8
	clear_bit(TCCR1B, CS12);
    1004:	e1 e8       	ldi	r30, 0x81	; 129
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	8b 7f       	andi	r24, 0xFB	; 251
    100c:	80 83       	st	Z, r24
	set_bit(TCCR1B, CS11);
    100e:	80 81       	ld	r24, Z
    1010:	82 60       	ori	r24, 0x02	; 2
    1012:	80 83       	st	Z, r24
	clear_bit(TCCR1B, CS10);
    1014:	80 81       	ld	r24, Z
    1016:	8e 7f       	andi	r24, 0xFE	; 254
    1018:	80 83       	st	Z, r24
	
	
	//fast PWM (16 bit, TOP in ICR1) page 145 (mode 14 table 17-2)
	set_bit(TCCR1B, WGM13);
    101a:	80 81       	ld	r24, Z
    101c:	80 61       	ori	r24, 0x10	; 16
    101e:	80 83       	st	Z, r24
	set_bit(TCCR1B, WGM12);
    1020:	80 81       	ld	r24, Z
    1022:	88 60       	ori	r24, 0x08	; 8
    1024:	80 83       	st	Z, r24
	set_bit(TCCR1A, WGM11);
    1026:	e0 e8       	ldi	r30, 0x80	; 128
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	82 60       	ori	r24, 0x02	; 2
    102e:	80 83       	st	Z, r24
	clear_bit(TCCR1A, WGM10);
    1030:	80 81       	ld	r24, Z
    1032:	8e 7f       	andi	r24, 0xFE	; 254
    1034:	80 83       	st	Z, r24
	
	//set TOP so that we have a period of 20 ms
	ICR1 = F_CPU/TIMER1_PRESCALER*PWM_PERIOD_MS/1000 - 1; 
    1036:	8f e3       	ldi	r24, 0x3F	; 63
    1038:	9c e9       	ldi	r25, 0x9C	; 156
    103a:	90 93 87 00 	sts	0x0087, r25
    103e:	80 93 86 00 	sts	0x0086, r24
	
	//compare output mode (Normal mode)
	set_bit(TCCR1A, COM1A1);
    1042:	80 81       	ld	r24, Z
    1044:	80 68       	ori	r24, 0x80	; 128
    1046:	80 83       	st	Z, r24
	
	//set output pin PB5(OC1A: output clock 1 A)
	set_bit(DDRB, DDB5);
    1048:	25 9a       	sbi	0x04, 5	; 4
    104a:	08 95       	ret

0000104c <PWM_set_width>:
	//compares TCTn and OCRnx - cleared when match -> TCTn = BOTTOM
}


void PWM_set_width(float on_time_ms){
	OCR1A = F_CPU/TIMER1_PRESCALER*on_time_ms/1000-1; 
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	34 e2       	ldi	r19, 0x24	; 36
    1050:	44 ef       	ldi	r20, 0xF4	; 244
    1052:	59 e4       	ldi	r21, 0x49	; 73
    1054:	e4 d2       	rcall	.+1480   	; 0x161e <__mulsf3>
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	4a e7       	ldi	r20, 0x7A	; 122
    105c:	54 e4       	ldi	r21, 0x44	; 68
    105e:	90 d1       	rcall	.+800    	; 0x1380 <__divsf3>
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e8       	ldi	r20, 0x80	; 128
    1066:	5f e3       	ldi	r21, 0x3F	; 63
    1068:	22 d1       	rcall	.+580    	; 0x12ae <__subsf3>
    106a:	f7 d1       	rcall	.+1006   	; 0x145a <__fixunssfsi>
    106c:	70 93 89 00 	sts	0x0089, r23
    1070:	60 93 88 00 	sts	0x0088, r22
    1074:	08 95       	ret

00001076 <time_reset>:
	time_reset();
	
}

void time_reset(void) {
	TCNT3 = 0;
    1076:	10 92 95 00 	sts	0x0095, r1
    107a:	10 92 94 00 	sts	0x0094, r1
	
	// CLear overflow flag 
	set_bit(TIFR3, TOV3);
    107e:	c0 9a       	sbi	0x18, 0	; 24
    1080:	08 95       	ret

00001082 <time_init>:

void time_init(){
	// Normal port operation, non PWM
	
	// Prescaler 256 (see table 20-9)
	set_bit(TCCR3B, CS32);
    1082:	e1 e9       	ldi	r30, 0x91	; 145
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	84 60       	ori	r24, 0x04	; 4
    108a:	80 83       	st	Z, r24
	time_reset();
    108c:	f4 cf       	rjmp	.-24     	; 0x1076 <time_reset>
    108e:	08 95       	ret

00001090 <time_passed>:
	
	// CLear overflow flag 
	set_bit(TIFR3, TOV3);
}

uint16_t time_passed(void){
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
	uint16_t time_passed = TCNT3;
    1094:	c0 91 94 00 	lds	r28, 0x0094
    1098:	d0 91 95 00 	lds	r29, 0x0095
	time_reset();
    109c:	ec df       	rcall	.-40     	; 0x1076 <time_reset>
	if (time_passed == 0){
    109e:	20 97       	sbiw	r28, 0x00	; 0
    10a0:	19 f4       	brne	.+6      	; 0x10a8 <time_passed+0x18>
		return 1;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <time_passed+0x1c>
	}
	return time_passed;
    10a8:	8c 2f       	mov	r24, r28
    10aa:	9d 2f       	mov	r25, r29
}
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	08 95       	ret

000010b2 <TWI_Master_Initialise>:
    10b2:	8c e0       	ldi	r24, 0x0C	; 12
    10b4:	80 93 b8 00 	sts	0x00B8, r24
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	80 93 bb 00 	sts	0x00BB, r24
    10be:	84 e0       	ldi	r24, 0x04	; 4
    10c0:	80 93 bc 00 	sts	0x00BC, r24
    10c4:	08 95       	ret

000010c6 <TWI_Start_Transceiver_With_Data>:
    10c6:	ec eb       	ldi	r30, 0xBC	; 188
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	20 81       	ld	r18, Z
    10cc:	20 fd       	sbrc	r18, 0
    10ce:	fd cf       	rjmp	.-6      	; 0x10ca <TWI_Start_Transceiver_With_Data+0x4>
    10d0:	60 93 f5 04 	sts	0x04F5, r22
    10d4:	fc 01       	movw	r30, r24
    10d6:	20 81       	ld	r18, Z
    10d8:	20 93 f6 04 	sts	0x04F6, r18
    10dc:	20 fd       	sbrc	r18, 0
    10de:	0c c0       	rjmp	.+24     	; 0x10f8 <TWI_Start_Transceiver_With_Data+0x32>
    10e0:	62 30       	cpi	r22, 0x02	; 2
    10e2:	50 f0       	brcs	.+20     	; 0x10f8 <TWI_Start_Transceiver_With_Data+0x32>
    10e4:	dc 01       	movw	r26, r24
    10e6:	11 96       	adiw	r26, 0x01	; 1
    10e8:	e7 ef       	ldi	r30, 0xF7	; 247
    10ea:	f4 e0       	ldi	r31, 0x04	; 4
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	9d 91       	ld	r25, X+
    10f0:	91 93       	st	Z+, r25
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	86 13       	cpse	r24, r22
    10f6:	fb cf       	rjmp	.-10     	; 0x10ee <TWI_Start_Transceiver_With_Data+0x28>
    10f8:	10 92 f4 04 	sts	0x04F4, r1
    10fc:	88 ef       	ldi	r24, 0xF8	; 248
    10fe:	80 93 06 02 	sts	0x0206, r24
    1102:	85 ea       	ldi	r24, 0xA5	; 165
    1104:	80 93 bc 00 	sts	0x00BC, r24
    1108:	08 95       	ret

0000110a <__vector_39>:
    110a:	1f 92       	push	r1
    110c:	0f 92       	push	r0
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	0f 92       	push	r0
    1112:	11 24       	eor	r1, r1
    1114:	0b b6       	in	r0, 0x3b	; 59
    1116:	0f 92       	push	r0
    1118:	2f 93       	push	r18
    111a:	3f 93       	push	r19
    111c:	8f 93       	push	r24
    111e:	9f 93       	push	r25
    1120:	af 93       	push	r26
    1122:	bf 93       	push	r27
    1124:	ef 93       	push	r30
    1126:	ff 93       	push	r31
    1128:	80 91 b9 00 	lds	r24, 0x00B9
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	fc 01       	movw	r30, r24
    1130:	38 97       	sbiw	r30, 0x08	; 8
    1132:	e1 35       	cpi	r30, 0x51	; 81
    1134:	f1 05       	cpc	r31, r1
    1136:	08 f0       	brcs	.+2      	; 0x113a <__vector_39+0x30>
    1138:	55 c0       	rjmp	.+170    	; 0x11e4 <__vector_39+0xda>
    113a:	ee 58       	subi	r30, 0x8E	; 142
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	d2 c2       	rjmp	.+1444   	; 0x16e4 <__tablejump2__>
    1140:	10 92 f3 04 	sts	0x04F3, r1
    1144:	e0 91 f3 04 	lds	r30, 0x04F3
    1148:	80 91 f5 04 	lds	r24, 0x04F5
    114c:	e8 17       	cp	r30, r24
    114e:	70 f4       	brcc	.+28     	; 0x116c <__vector_39+0x62>
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	8e 0f       	add	r24, r30
    1154:	80 93 f3 04 	sts	0x04F3, r24
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	ea 50       	subi	r30, 0x0A	; 10
    115c:	fb 4f       	sbci	r31, 0xFB	; 251
    115e:	80 81       	ld	r24, Z
    1160:	80 93 bb 00 	sts	0x00BB, r24
    1164:	85 e8       	ldi	r24, 0x85	; 133
    1166:	80 93 bc 00 	sts	0x00BC, r24
    116a:	43 c0       	rjmp	.+134    	; 0x11f2 <__vector_39+0xe8>
    116c:	80 91 f4 04 	lds	r24, 0x04F4
    1170:	81 60       	ori	r24, 0x01	; 1
    1172:	80 93 f4 04 	sts	0x04F4, r24
    1176:	84 e9       	ldi	r24, 0x94	; 148
    1178:	80 93 bc 00 	sts	0x00BC, r24
    117c:	3a c0       	rjmp	.+116    	; 0x11f2 <__vector_39+0xe8>
    117e:	e0 91 f3 04 	lds	r30, 0x04F3
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	8e 0f       	add	r24, r30
    1186:	80 93 f3 04 	sts	0x04F3, r24
    118a:	80 91 bb 00 	lds	r24, 0x00BB
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	ea 50       	subi	r30, 0x0A	; 10
    1192:	fb 4f       	sbci	r31, 0xFB	; 251
    1194:	80 83       	st	Z, r24
    1196:	20 91 f3 04 	lds	r18, 0x04F3
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	80 91 f5 04 	lds	r24, 0x04F5
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	28 17       	cp	r18, r24
    11a6:	39 07       	cpc	r19, r25
    11a8:	24 f4       	brge	.+8      	; 0x11b2 <__vector_39+0xa8>
    11aa:	85 ec       	ldi	r24, 0xC5	; 197
    11ac:	80 93 bc 00 	sts	0x00BC, r24
    11b0:	20 c0       	rjmp	.+64     	; 0x11f2 <__vector_39+0xe8>
    11b2:	85 e8       	ldi	r24, 0x85	; 133
    11b4:	80 93 bc 00 	sts	0x00BC, r24
    11b8:	1c c0       	rjmp	.+56     	; 0x11f2 <__vector_39+0xe8>
    11ba:	80 91 bb 00 	lds	r24, 0x00BB
    11be:	e0 91 f3 04 	lds	r30, 0x04F3
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	ea 50       	subi	r30, 0x0A	; 10
    11c6:	fb 4f       	sbci	r31, 0xFB	; 251
    11c8:	80 83       	st	Z, r24
    11ca:	80 91 f4 04 	lds	r24, 0x04F4
    11ce:	81 60       	ori	r24, 0x01	; 1
    11d0:	80 93 f4 04 	sts	0x04F4, r24
    11d4:	84 e9       	ldi	r24, 0x94	; 148
    11d6:	80 93 bc 00 	sts	0x00BC, r24
    11da:	0b c0       	rjmp	.+22     	; 0x11f2 <__vector_39+0xe8>
    11dc:	85 ea       	ldi	r24, 0xA5	; 165
    11de:	80 93 bc 00 	sts	0x00BC, r24
    11e2:	07 c0       	rjmp	.+14     	; 0x11f2 <__vector_39+0xe8>
    11e4:	80 91 b9 00 	lds	r24, 0x00B9
    11e8:	80 93 06 02 	sts	0x0206, r24
    11ec:	84 e0       	ldi	r24, 0x04	; 4
    11ee:	80 93 bc 00 	sts	0x00BC, r24
    11f2:	ff 91       	pop	r31
    11f4:	ef 91       	pop	r30
    11f6:	bf 91       	pop	r27
    11f8:	af 91       	pop	r26
    11fa:	9f 91       	pop	r25
    11fc:	8f 91       	pop	r24
    11fe:	3f 91       	pop	r19
    1200:	2f 91       	pop	r18
    1202:	0f 90       	pop	r0
    1204:	0b be       	out	0x3b, r0	; 59
    1206:	0f 90       	pop	r0
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	0f 90       	pop	r0
    120c:	1f 90       	pop	r1
    120e:	18 95       	reti

00001210 <usart_transmit_to_computer>:
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
}


void usart_transmit_to_computer(unsigned int data) {
	while (!(UCSR0A & (1<<UDRE0)));	// Wait for empty transmit buffer
    1210:	e0 ec       	ldi	r30, 0xC0	; 192
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	90 81       	ld	r25, Z
    1216:	95 ff       	sbrs	r25, 5
    1218:	fd cf       	rjmp	.-6      	; 0x1214 <usart_transmit_to_computer+0x4>
	UDR0 = data;					// Put data into buffer (sends the data)
    121a:	80 93 c6 00 	sts	0x00C6, r24
    121e:	08 95       	ret

00001220 <usart_receive_from_computer>:
}


uint8_t usart_receive_from_computer(void) {
	// Wait for data to be received 
	while (!(UCSR0A & (1<<RXC0)));
    1220:	e0 ec       	ldi	r30, 0xC0	; 192
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 23       	and	r24, r24
    1228:	ec f7       	brge	.-6      	; 0x1224 <usart_receive_from_computer+0x4>
	
	// Get and return data from buffer
	return UDR0;
    122a:	80 91 c6 00 	lds	r24, 0x00C6
}
    122e:	08 95       	ret

00001230 <usart_init>:
#include <stdio.h>


void usart_init(unsigned int ubbr) {
	// Set baud rate
	UBRR0H = (unsigned char)(ubbr>>8);
    1230:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)(ubbr);
    1234:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    1238:	88 e1       	ldi	r24, 0x18	; 24
    123a:	80 93 c1 00 	sts	0x00C1, r24

	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0) | (3<<UCSZ00);
    123e:	8e e0       	ldi	r24, 0x0E	; 14
    1240:	80 93 c2 00 	sts	0x00C2, r24
	
	
	// Link printf to usart functions, so that it sends to/receives from PC
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
    1244:	60 e1       	ldi	r22, 0x10	; 16
    1246:	79 e0       	ldi	r23, 0x09	; 9
    1248:	88 e0       	ldi	r24, 0x08	; 8
    124a:	99 e0       	ldi	r25, 0x09	; 9
    124c:	78 c2       	rjmp	.+1264   	; 0x173e <fdevopen>
    124e:	08 95       	ret

00001250 <initialize>:

void initialize(void);


void initialize(void){
	cli();
    1250:	f8 94       	cli
	usart_init(MYUBRR);			printf("\n[NODE 2][main.c]: USART initialized.\n");
    1252:	87 e6       	ldi	r24, 0x67	; 103
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	ec df       	rcall	.-40     	; 0x1230 <usart_init>
    1258:	81 e9       	ldi	r24, 0x91	; 145
    125a:	93 e0       	ldi	r25, 0x03	; 3
    125c:	cb d2       	rcall	.+1430   	; 0x17f4 <puts>
	CAN_init();					printf("[NODE 2][main.c]: CAN initialized.\n");
    125e:	20 d8       	rcall	.-4032   	; 0x2a0 <CAN_init>
    1260:	87 eb       	ldi	r24, 0xB7	; 183
    1262:	93 e0       	ldi	r25, 0x03	; 3
    1264:	c7 d2       	rcall	.+1422   	; 0x17f4 <puts>
	servo_init();				printf("[NODE 2][main.c]: SERVO initialized.\n");
    1266:	e1 dd       	rcall	.-1086   	; 0xe2a <servo_init>
    1268:	8a ed       	ldi	r24, 0xDA	; 218
    126a:	93 e0       	ldi	r25, 0x03	; 3
    126c:	c3 d2       	rcall	.+1414   	; 0x17f4 <puts>
	IR_init();					printf("[NODE 2][main.c]: IR initialized.\n");
    126e:	cf d9       	rcall	.-3170   	; 0x60e <IR_init>
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	93 e0       	ldi	r25, 0x03	; 3
    1274:	bf d2       	rcall	.+1406   	; 0x17f4 <puts>
	motor_init(DEFAULT);		printf("[NODE 2][main.c]: MOTOR initialized!\n");
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	91 dc       	rcall	.-1758   	; 0xb9c <motor_init>
    127a:	81 e2       	ldi	r24, 0x21	; 33
    127c:	94 e0       	ldi	r25, 0x04	; 4
    127e:	ba d2       	rcall	.+1396   	; 0x17f4 <puts>
	PI_init();					printf("[NODE 2][main.c]: PI initialized!\n");
    1280:	f7 dc       	rcall	.-1554   	; 0xc70 <PI_init>
    1282:	86 e4       	ldi	r24, 0x46	; 70
    1284:	94 e0       	ldi	r25, 0x04	; 4
    1286:	b6 d2       	rcall	.+1388   	; 0x17f4 <puts>
	GAME_init(CLOSED_LOOP);		printf("[NODE 2][main.c]: CONTROL initialized!\n");
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	4b d9       	rcall	.-3434   	; 0x522 <GAME_init>
    128c:	88 e6       	ldi	r24, 0x68	; 104
    128e:	94 e0       	ldi	r25, 0x04	; 4
    1290:	b1 d2       	rcall	.+1378   	; 0x17f4 <puts>
	solenoid_init();			printf("[NODE 2][main.c]: SOLENOID initialized!\n");
    1292:	96 de       	rcall	.-724    	; 0xfc0 <solenoid_init>
    1294:	8f e8       	ldi	r24, 0x8F	; 143
    1296:	94 e0       	ldi	r25, 0x04	; 4
    1298:	ad d2       	rcall	.+1370   	; 0x17f4 <puts>
								printf("\n====== INITIALIZATION COMPLETE ======\n\n");
    129a:	87 eb       	ldi	r24, 0xB7	; 183
    129c:	94 e0       	ldi	r25, 0x04	; 4
    129e:	aa d2       	rcall	.+1364   	; 0x17f4 <puts>
	sei();
    12a0:	78 94       	sei
    12a2:	08 95       	ret

000012a4 <main>:
}


int main(void){
	initialize();
    12a4:	d5 df       	rcall	.-86     	; 0x1250 <initialize>
	GAME_loop();
    12a6:	41 d9       	rcall	.-3454   	; 0x52a <GAME_loop>
	return 0;
}
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	08 95       	ret

000012ae <__subsf3>:
    12ae:	50 58       	subi	r21, 0x80	; 128

000012b0 <__addsf3>:
    12b0:	bb 27       	eor	r27, r27
    12b2:	aa 27       	eor	r26, r26
    12b4:	0e d0       	rcall	.+28     	; 0x12d2 <__addsf3x>
    12b6:	75 c1       	rjmp	.+746    	; 0x15a2 <__fp_round>
    12b8:	66 d1       	rcall	.+716    	; 0x1586 <__fp_pscA>
    12ba:	30 f0       	brcs	.+12     	; 0x12c8 <__addsf3+0x18>
    12bc:	6b d1       	rcall	.+726    	; 0x1594 <__fp_pscB>
    12be:	20 f0       	brcs	.+8      	; 0x12c8 <__addsf3+0x18>
    12c0:	31 f4       	brne	.+12     	; 0x12ce <__addsf3+0x1e>
    12c2:	9f 3f       	cpi	r25, 0xFF	; 255
    12c4:	11 f4       	brne	.+4      	; 0x12ca <__addsf3+0x1a>
    12c6:	1e f4       	brtc	.+6      	; 0x12ce <__addsf3+0x1e>
    12c8:	5b c1       	rjmp	.+694    	; 0x1580 <__fp_nan>
    12ca:	0e f4       	brtc	.+2      	; 0x12ce <__addsf3+0x1e>
    12cc:	e0 95       	com	r30
    12ce:	e7 fb       	bst	r30, 7
    12d0:	51 c1       	rjmp	.+674    	; 0x1574 <__fp_inf>

000012d2 <__addsf3x>:
    12d2:	e9 2f       	mov	r30, r25
    12d4:	77 d1       	rcall	.+750    	; 0x15c4 <__fp_split3>
    12d6:	80 f3       	brcs	.-32     	; 0x12b8 <__addsf3+0x8>
    12d8:	ba 17       	cp	r27, r26
    12da:	62 07       	cpc	r22, r18
    12dc:	73 07       	cpc	r23, r19
    12de:	84 07       	cpc	r24, r20
    12e0:	95 07       	cpc	r25, r21
    12e2:	18 f0       	brcs	.+6      	; 0x12ea <__addsf3x+0x18>
    12e4:	71 f4       	brne	.+28     	; 0x1302 <__addsf3x+0x30>
    12e6:	9e f5       	brtc	.+102    	; 0x134e <__addsf3x+0x7c>
    12e8:	8f c1       	rjmp	.+798    	; 0x1608 <__fp_zero>
    12ea:	0e f4       	brtc	.+2      	; 0x12ee <__addsf3x+0x1c>
    12ec:	e0 95       	com	r30
    12ee:	0b 2e       	mov	r0, r27
    12f0:	ba 2f       	mov	r27, r26
    12f2:	a0 2d       	mov	r26, r0
    12f4:	0b 01       	movw	r0, r22
    12f6:	b9 01       	movw	r22, r18
    12f8:	90 01       	movw	r18, r0
    12fa:	0c 01       	movw	r0, r24
    12fc:	ca 01       	movw	r24, r20
    12fe:	a0 01       	movw	r20, r0
    1300:	11 24       	eor	r1, r1
    1302:	ff 27       	eor	r31, r31
    1304:	59 1b       	sub	r21, r25
    1306:	99 f0       	breq	.+38     	; 0x132e <__addsf3x+0x5c>
    1308:	59 3f       	cpi	r21, 0xF9	; 249
    130a:	50 f4       	brcc	.+20     	; 0x1320 <__addsf3x+0x4e>
    130c:	50 3e       	cpi	r21, 0xE0	; 224
    130e:	68 f1       	brcs	.+90     	; 0x136a <__addsf3x+0x98>
    1310:	1a 16       	cp	r1, r26
    1312:	f0 40       	sbci	r31, 0x00	; 0
    1314:	a2 2f       	mov	r26, r18
    1316:	23 2f       	mov	r18, r19
    1318:	34 2f       	mov	r19, r20
    131a:	44 27       	eor	r20, r20
    131c:	58 5f       	subi	r21, 0xF8	; 248
    131e:	f3 cf       	rjmp	.-26     	; 0x1306 <__addsf3x+0x34>
    1320:	46 95       	lsr	r20
    1322:	37 95       	ror	r19
    1324:	27 95       	ror	r18
    1326:	a7 95       	ror	r26
    1328:	f0 40       	sbci	r31, 0x00	; 0
    132a:	53 95       	inc	r21
    132c:	c9 f7       	brne	.-14     	; 0x1320 <__addsf3x+0x4e>
    132e:	7e f4       	brtc	.+30     	; 0x134e <__addsf3x+0x7c>
    1330:	1f 16       	cp	r1, r31
    1332:	ba 0b       	sbc	r27, r26
    1334:	62 0b       	sbc	r22, r18
    1336:	73 0b       	sbc	r23, r19
    1338:	84 0b       	sbc	r24, r20
    133a:	ba f0       	brmi	.+46     	; 0x136a <__addsf3x+0x98>
    133c:	91 50       	subi	r25, 0x01	; 1
    133e:	a1 f0       	breq	.+40     	; 0x1368 <__addsf3x+0x96>
    1340:	ff 0f       	add	r31, r31
    1342:	bb 1f       	adc	r27, r27
    1344:	66 1f       	adc	r22, r22
    1346:	77 1f       	adc	r23, r23
    1348:	88 1f       	adc	r24, r24
    134a:	c2 f7       	brpl	.-16     	; 0x133c <__addsf3x+0x6a>
    134c:	0e c0       	rjmp	.+28     	; 0x136a <__addsf3x+0x98>
    134e:	ba 0f       	add	r27, r26
    1350:	62 1f       	adc	r22, r18
    1352:	73 1f       	adc	r23, r19
    1354:	84 1f       	adc	r24, r20
    1356:	48 f4       	brcc	.+18     	; 0x136a <__addsf3x+0x98>
    1358:	87 95       	ror	r24
    135a:	77 95       	ror	r23
    135c:	67 95       	ror	r22
    135e:	b7 95       	ror	r27
    1360:	f7 95       	ror	r31
    1362:	9e 3f       	cpi	r25, 0xFE	; 254
    1364:	08 f0       	brcs	.+2      	; 0x1368 <__addsf3x+0x96>
    1366:	b3 cf       	rjmp	.-154    	; 0x12ce <__addsf3+0x1e>
    1368:	93 95       	inc	r25
    136a:	88 0f       	add	r24, r24
    136c:	08 f0       	brcs	.+2      	; 0x1370 <__addsf3x+0x9e>
    136e:	99 27       	eor	r25, r25
    1370:	ee 0f       	add	r30, r30
    1372:	97 95       	ror	r25
    1374:	87 95       	ror	r24
    1376:	08 95       	ret

00001378 <__cmpsf2>:
    1378:	d9 d0       	rcall	.+434    	; 0x152c <__fp_cmp>
    137a:	08 f4       	brcc	.+2      	; 0x137e <__cmpsf2+0x6>
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	08 95       	ret

00001380 <__divsf3>:
    1380:	0c d0       	rcall	.+24     	; 0x139a <__divsf3x>
    1382:	0f c1       	rjmp	.+542    	; 0x15a2 <__fp_round>
    1384:	07 d1       	rcall	.+526    	; 0x1594 <__fp_pscB>
    1386:	40 f0       	brcs	.+16     	; 0x1398 <__divsf3+0x18>
    1388:	fe d0       	rcall	.+508    	; 0x1586 <__fp_pscA>
    138a:	30 f0       	brcs	.+12     	; 0x1398 <__divsf3+0x18>
    138c:	21 f4       	brne	.+8      	; 0x1396 <__divsf3+0x16>
    138e:	5f 3f       	cpi	r21, 0xFF	; 255
    1390:	19 f0       	breq	.+6      	; 0x1398 <__divsf3+0x18>
    1392:	f0 c0       	rjmp	.+480    	; 0x1574 <__fp_inf>
    1394:	51 11       	cpse	r21, r1
    1396:	39 c1       	rjmp	.+626    	; 0x160a <__fp_szero>
    1398:	f3 c0       	rjmp	.+486    	; 0x1580 <__fp_nan>

0000139a <__divsf3x>:
    139a:	14 d1       	rcall	.+552    	; 0x15c4 <__fp_split3>
    139c:	98 f3       	brcs	.-26     	; 0x1384 <__divsf3+0x4>

0000139e <__divsf3_pse>:
    139e:	99 23       	and	r25, r25
    13a0:	c9 f3       	breq	.-14     	; 0x1394 <__divsf3+0x14>
    13a2:	55 23       	and	r21, r21
    13a4:	b1 f3       	breq	.-20     	; 0x1392 <__divsf3+0x12>
    13a6:	95 1b       	sub	r25, r21
    13a8:	55 0b       	sbc	r21, r21
    13aa:	bb 27       	eor	r27, r27
    13ac:	aa 27       	eor	r26, r26
    13ae:	62 17       	cp	r22, r18
    13b0:	73 07       	cpc	r23, r19
    13b2:	84 07       	cpc	r24, r20
    13b4:	38 f0       	brcs	.+14     	; 0x13c4 <__divsf3_pse+0x26>
    13b6:	9f 5f       	subi	r25, 0xFF	; 255
    13b8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ba:	22 0f       	add	r18, r18
    13bc:	33 1f       	adc	r19, r19
    13be:	44 1f       	adc	r20, r20
    13c0:	aa 1f       	adc	r26, r26
    13c2:	a9 f3       	breq	.-22     	; 0x13ae <__divsf3_pse+0x10>
    13c4:	33 d0       	rcall	.+102    	; 0x142c <__divsf3_pse+0x8e>
    13c6:	0e 2e       	mov	r0, r30
    13c8:	3a f0       	brmi	.+14     	; 0x13d8 <__divsf3_pse+0x3a>
    13ca:	e0 e8       	ldi	r30, 0x80	; 128
    13cc:	30 d0       	rcall	.+96     	; 0x142e <__divsf3_pse+0x90>
    13ce:	91 50       	subi	r25, 0x01	; 1
    13d0:	50 40       	sbci	r21, 0x00	; 0
    13d2:	e6 95       	lsr	r30
    13d4:	00 1c       	adc	r0, r0
    13d6:	ca f7       	brpl	.-14     	; 0x13ca <__divsf3_pse+0x2c>
    13d8:	29 d0       	rcall	.+82     	; 0x142c <__divsf3_pse+0x8e>
    13da:	fe 2f       	mov	r31, r30
    13dc:	27 d0       	rcall	.+78     	; 0x142c <__divsf3_pse+0x8e>
    13de:	66 0f       	add	r22, r22
    13e0:	77 1f       	adc	r23, r23
    13e2:	88 1f       	adc	r24, r24
    13e4:	bb 1f       	adc	r27, r27
    13e6:	26 17       	cp	r18, r22
    13e8:	37 07       	cpc	r19, r23
    13ea:	48 07       	cpc	r20, r24
    13ec:	ab 07       	cpc	r26, r27
    13ee:	b0 e8       	ldi	r27, 0x80	; 128
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <__divsf3_pse+0x56>
    13f2:	bb 0b       	sbc	r27, r27
    13f4:	80 2d       	mov	r24, r0
    13f6:	bf 01       	movw	r22, r30
    13f8:	ff 27       	eor	r31, r31
    13fa:	93 58       	subi	r25, 0x83	; 131
    13fc:	5f 4f       	sbci	r21, 0xFF	; 255
    13fe:	2a f0       	brmi	.+10     	; 0x140a <__divsf3_pse+0x6c>
    1400:	9e 3f       	cpi	r25, 0xFE	; 254
    1402:	51 05       	cpc	r21, r1
    1404:	68 f0       	brcs	.+26     	; 0x1420 <__divsf3_pse+0x82>
    1406:	b6 c0       	rjmp	.+364    	; 0x1574 <__fp_inf>
    1408:	00 c1       	rjmp	.+512    	; 0x160a <__fp_szero>
    140a:	5f 3f       	cpi	r21, 0xFF	; 255
    140c:	ec f3       	brlt	.-6      	; 0x1408 <__divsf3_pse+0x6a>
    140e:	98 3e       	cpi	r25, 0xE8	; 232
    1410:	dc f3       	brlt	.-10     	; 0x1408 <__divsf3_pse+0x6a>
    1412:	86 95       	lsr	r24
    1414:	77 95       	ror	r23
    1416:	67 95       	ror	r22
    1418:	b7 95       	ror	r27
    141a:	f7 95       	ror	r31
    141c:	9f 5f       	subi	r25, 0xFF	; 255
    141e:	c9 f7       	brne	.-14     	; 0x1412 <__divsf3_pse+0x74>
    1420:	88 0f       	add	r24, r24
    1422:	91 1d       	adc	r25, r1
    1424:	96 95       	lsr	r25
    1426:	87 95       	ror	r24
    1428:	97 f9       	bld	r25, 7
    142a:	08 95       	ret
    142c:	e1 e0       	ldi	r30, 0x01	; 1
    142e:	66 0f       	add	r22, r22
    1430:	77 1f       	adc	r23, r23
    1432:	88 1f       	adc	r24, r24
    1434:	bb 1f       	adc	r27, r27
    1436:	62 17       	cp	r22, r18
    1438:	73 07       	cpc	r23, r19
    143a:	84 07       	cpc	r24, r20
    143c:	ba 07       	cpc	r27, r26
    143e:	20 f0       	brcs	.+8      	; 0x1448 <__divsf3_pse+0xaa>
    1440:	62 1b       	sub	r22, r18
    1442:	73 0b       	sbc	r23, r19
    1444:	84 0b       	sbc	r24, r20
    1446:	ba 0b       	sbc	r27, r26
    1448:	ee 1f       	adc	r30, r30
    144a:	88 f7       	brcc	.-30     	; 0x142e <__divsf3_pse+0x90>
    144c:	e0 95       	com	r30
    144e:	08 95       	ret

00001450 <__fixsfsi>:
    1450:	04 d0       	rcall	.+8      	; 0x145a <__fixunssfsi>
    1452:	68 94       	set
    1454:	b1 11       	cpse	r27, r1
    1456:	d9 c0       	rjmp	.+434    	; 0x160a <__fp_szero>
    1458:	08 95       	ret

0000145a <__fixunssfsi>:
    145a:	bc d0       	rcall	.+376    	; 0x15d4 <__fp_splitA>
    145c:	88 f0       	brcs	.+34     	; 0x1480 <__fixunssfsi+0x26>
    145e:	9f 57       	subi	r25, 0x7F	; 127
    1460:	90 f0       	brcs	.+36     	; 0x1486 <__fixunssfsi+0x2c>
    1462:	b9 2f       	mov	r27, r25
    1464:	99 27       	eor	r25, r25
    1466:	b7 51       	subi	r27, 0x17	; 23
    1468:	a0 f0       	brcs	.+40     	; 0x1492 <__fixunssfsi+0x38>
    146a:	d1 f0       	breq	.+52     	; 0x14a0 <__fixunssfsi+0x46>
    146c:	66 0f       	add	r22, r22
    146e:	77 1f       	adc	r23, r23
    1470:	88 1f       	adc	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	1a f0       	brmi	.+6      	; 0x147c <__fixunssfsi+0x22>
    1476:	ba 95       	dec	r27
    1478:	c9 f7       	brne	.-14     	; 0x146c <__fixunssfsi+0x12>
    147a:	12 c0       	rjmp	.+36     	; 0x14a0 <__fixunssfsi+0x46>
    147c:	b1 30       	cpi	r27, 0x01	; 1
    147e:	81 f0       	breq	.+32     	; 0x14a0 <__fixunssfsi+0x46>
    1480:	c3 d0       	rcall	.+390    	; 0x1608 <__fp_zero>
    1482:	b1 e0       	ldi	r27, 0x01	; 1
    1484:	08 95       	ret
    1486:	c0 c0       	rjmp	.+384    	; 0x1608 <__fp_zero>
    1488:	67 2f       	mov	r22, r23
    148a:	78 2f       	mov	r23, r24
    148c:	88 27       	eor	r24, r24
    148e:	b8 5f       	subi	r27, 0xF8	; 248
    1490:	39 f0       	breq	.+14     	; 0x14a0 <__fixunssfsi+0x46>
    1492:	b9 3f       	cpi	r27, 0xF9	; 249
    1494:	cc f3       	brlt	.-14     	; 0x1488 <__fixunssfsi+0x2e>
    1496:	86 95       	lsr	r24
    1498:	77 95       	ror	r23
    149a:	67 95       	ror	r22
    149c:	b3 95       	inc	r27
    149e:	d9 f7       	brne	.-10     	; 0x1496 <__fixunssfsi+0x3c>
    14a0:	3e f4       	brtc	.+14     	; 0x14b0 <__fixunssfsi+0x56>
    14a2:	90 95       	com	r25
    14a4:	80 95       	com	r24
    14a6:	70 95       	com	r23
    14a8:	61 95       	neg	r22
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255
    14ac:	8f 4f       	sbci	r24, 0xFF	; 255
    14ae:	9f 4f       	sbci	r25, 0xFF	; 255
    14b0:	08 95       	ret

000014b2 <__floatunsisf>:
    14b2:	e8 94       	clt
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <__floatsisf+0x12>

000014b6 <__floatsisf>:
    14b6:	97 fb       	bst	r25, 7
    14b8:	3e f4       	brtc	.+14     	; 0x14c8 <__floatsisf+0x12>
    14ba:	90 95       	com	r25
    14bc:	80 95       	com	r24
    14be:	70 95       	com	r23
    14c0:	61 95       	neg	r22
    14c2:	7f 4f       	sbci	r23, 0xFF	; 255
    14c4:	8f 4f       	sbci	r24, 0xFF	; 255
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	99 23       	and	r25, r25
    14ca:	a9 f0       	breq	.+42     	; 0x14f6 <__floatsisf+0x40>
    14cc:	f9 2f       	mov	r31, r25
    14ce:	96 e9       	ldi	r25, 0x96	; 150
    14d0:	bb 27       	eor	r27, r27
    14d2:	93 95       	inc	r25
    14d4:	f6 95       	lsr	r31
    14d6:	87 95       	ror	r24
    14d8:	77 95       	ror	r23
    14da:	67 95       	ror	r22
    14dc:	b7 95       	ror	r27
    14de:	f1 11       	cpse	r31, r1
    14e0:	f8 cf       	rjmp	.-16     	; 0x14d2 <__floatsisf+0x1c>
    14e2:	fa f4       	brpl	.+62     	; 0x1522 <__floatsisf+0x6c>
    14e4:	bb 0f       	add	r27, r27
    14e6:	11 f4       	brne	.+4      	; 0x14ec <__floatsisf+0x36>
    14e8:	60 ff       	sbrs	r22, 0
    14ea:	1b c0       	rjmp	.+54     	; 0x1522 <__floatsisf+0x6c>
    14ec:	6f 5f       	subi	r22, 0xFF	; 255
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	8f 4f       	sbci	r24, 0xFF	; 255
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	16 c0       	rjmp	.+44     	; 0x1522 <__floatsisf+0x6c>
    14f6:	88 23       	and	r24, r24
    14f8:	11 f0       	breq	.+4      	; 0x14fe <__floatsisf+0x48>
    14fa:	96 e9       	ldi	r25, 0x96	; 150
    14fc:	11 c0       	rjmp	.+34     	; 0x1520 <__floatsisf+0x6a>
    14fe:	77 23       	and	r23, r23
    1500:	21 f0       	breq	.+8      	; 0x150a <__floatsisf+0x54>
    1502:	9e e8       	ldi	r25, 0x8E	; 142
    1504:	87 2f       	mov	r24, r23
    1506:	76 2f       	mov	r23, r22
    1508:	05 c0       	rjmp	.+10     	; 0x1514 <__floatsisf+0x5e>
    150a:	66 23       	and	r22, r22
    150c:	71 f0       	breq	.+28     	; 0x152a <__floatsisf+0x74>
    150e:	96 e8       	ldi	r25, 0x86	; 134
    1510:	86 2f       	mov	r24, r22
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	2a f0       	brmi	.+10     	; 0x1522 <__floatsisf+0x6c>
    1518:	9a 95       	dec	r25
    151a:	66 0f       	add	r22, r22
    151c:	77 1f       	adc	r23, r23
    151e:	88 1f       	adc	r24, r24
    1520:	da f7       	brpl	.-10     	; 0x1518 <__floatsisf+0x62>
    1522:	88 0f       	add	r24, r24
    1524:	96 95       	lsr	r25
    1526:	87 95       	ror	r24
    1528:	97 f9       	bld	r25, 7
    152a:	08 95       	ret

0000152c <__fp_cmp>:
    152c:	99 0f       	add	r25, r25
    152e:	00 08       	sbc	r0, r0
    1530:	55 0f       	add	r21, r21
    1532:	aa 0b       	sbc	r26, r26
    1534:	e0 e8       	ldi	r30, 0x80	; 128
    1536:	fe ef       	ldi	r31, 0xFE	; 254
    1538:	16 16       	cp	r1, r22
    153a:	17 06       	cpc	r1, r23
    153c:	e8 07       	cpc	r30, r24
    153e:	f9 07       	cpc	r31, r25
    1540:	c0 f0       	brcs	.+48     	; 0x1572 <__fp_cmp+0x46>
    1542:	12 16       	cp	r1, r18
    1544:	13 06       	cpc	r1, r19
    1546:	e4 07       	cpc	r30, r20
    1548:	f5 07       	cpc	r31, r21
    154a:	98 f0       	brcs	.+38     	; 0x1572 <__fp_cmp+0x46>
    154c:	62 1b       	sub	r22, r18
    154e:	73 0b       	sbc	r23, r19
    1550:	84 0b       	sbc	r24, r20
    1552:	95 0b       	sbc	r25, r21
    1554:	39 f4       	brne	.+14     	; 0x1564 <__fp_cmp+0x38>
    1556:	0a 26       	eor	r0, r26
    1558:	61 f0       	breq	.+24     	; 0x1572 <__fp_cmp+0x46>
    155a:	23 2b       	or	r18, r19
    155c:	24 2b       	or	r18, r20
    155e:	25 2b       	or	r18, r21
    1560:	21 f4       	brne	.+8      	; 0x156a <__fp_cmp+0x3e>
    1562:	08 95       	ret
    1564:	0a 26       	eor	r0, r26
    1566:	09 f4       	brne	.+2      	; 0x156a <__fp_cmp+0x3e>
    1568:	a1 40       	sbci	r26, 0x01	; 1
    156a:	a6 95       	lsr	r26
    156c:	8f ef       	ldi	r24, 0xFF	; 255
    156e:	81 1d       	adc	r24, r1
    1570:	81 1d       	adc	r24, r1
    1572:	08 95       	ret

00001574 <__fp_inf>:
    1574:	97 f9       	bld	r25, 7
    1576:	9f 67       	ori	r25, 0x7F	; 127
    1578:	80 e8       	ldi	r24, 0x80	; 128
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	08 95       	ret

00001580 <__fp_nan>:
    1580:	9f ef       	ldi	r25, 0xFF	; 255
    1582:	80 ec       	ldi	r24, 0xC0	; 192
    1584:	08 95       	ret

00001586 <__fp_pscA>:
    1586:	00 24       	eor	r0, r0
    1588:	0a 94       	dec	r0
    158a:	16 16       	cp	r1, r22
    158c:	17 06       	cpc	r1, r23
    158e:	18 06       	cpc	r1, r24
    1590:	09 06       	cpc	r0, r25
    1592:	08 95       	ret

00001594 <__fp_pscB>:
    1594:	00 24       	eor	r0, r0
    1596:	0a 94       	dec	r0
    1598:	12 16       	cp	r1, r18
    159a:	13 06       	cpc	r1, r19
    159c:	14 06       	cpc	r1, r20
    159e:	05 06       	cpc	r0, r21
    15a0:	08 95       	ret

000015a2 <__fp_round>:
    15a2:	09 2e       	mov	r0, r25
    15a4:	03 94       	inc	r0
    15a6:	00 0c       	add	r0, r0
    15a8:	11 f4       	brne	.+4      	; 0x15ae <__fp_round+0xc>
    15aa:	88 23       	and	r24, r24
    15ac:	52 f0       	brmi	.+20     	; 0x15c2 <__fp_round+0x20>
    15ae:	bb 0f       	add	r27, r27
    15b0:	40 f4       	brcc	.+16     	; 0x15c2 <__fp_round+0x20>
    15b2:	bf 2b       	or	r27, r31
    15b4:	11 f4       	brne	.+4      	; 0x15ba <__fp_round+0x18>
    15b6:	60 ff       	sbrs	r22, 0
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <__fp_round+0x20>
    15ba:	6f 5f       	subi	r22, 0xFF	; 255
    15bc:	7f 4f       	sbci	r23, 0xFF	; 255
    15be:	8f 4f       	sbci	r24, 0xFF	; 255
    15c0:	9f 4f       	sbci	r25, 0xFF	; 255
    15c2:	08 95       	ret

000015c4 <__fp_split3>:
    15c4:	57 fd       	sbrc	r21, 7
    15c6:	90 58       	subi	r25, 0x80	; 128
    15c8:	44 0f       	add	r20, r20
    15ca:	55 1f       	adc	r21, r21
    15cc:	59 f0       	breq	.+22     	; 0x15e4 <__fp_splitA+0x10>
    15ce:	5f 3f       	cpi	r21, 0xFF	; 255
    15d0:	71 f0       	breq	.+28     	; 0x15ee <__fp_splitA+0x1a>
    15d2:	47 95       	ror	r20

000015d4 <__fp_splitA>:
    15d4:	88 0f       	add	r24, r24
    15d6:	97 fb       	bst	r25, 7
    15d8:	99 1f       	adc	r25, r25
    15da:	61 f0       	breq	.+24     	; 0x15f4 <__fp_splitA+0x20>
    15dc:	9f 3f       	cpi	r25, 0xFF	; 255
    15de:	79 f0       	breq	.+30     	; 0x15fe <__fp_splitA+0x2a>
    15e0:	87 95       	ror	r24
    15e2:	08 95       	ret
    15e4:	12 16       	cp	r1, r18
    15e6:	13 06       	cpc	r1, r19
    15e8:	14 06       	cpc	r1, r20
    15ea:	55 1f       	adc	r21, r21
    15ec:	f2 cf       	rjmp	.-28     	; 0x15d2 <__fp_split3+0xe>
    15ee:	46 95       	lsr	r20
    15f0:	f1 df       	rcall	.-30     	; 0x15d4 <__fp_splitA>
    15f2:	08 c0       	rjmp	.+16     	; 0x1604 <__fp_splitA+0x30>
    15f4:	16 16       	cp	r1, r22
    15f6:	17 06       	cpc	r1, r23
    15f8:	18 06       	cpc	r1, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	f1 cf       	rjmp	.-30     	; 0x15e0 <__fp_splitA+0xc>
    15fe:	86 95       	lsr	r24
    1600:	71 05       	cpc	r23, r1
    1602:	61 05       	cpc	r22, r1
    1604:	08 94       	sec
    1606:	08 95       	ret

00001608 <__fp_zero>:
    1608:	e8 94       	clt

0000160a <__fp_szero>:
    160a:	bb 27       	eor	r27, r27
    160c:	66 27       	eor	r22, r22
    160e:	77 27       	eor	r23, r23
    1610:	cb 01       	movw	r24, r22
    1612:	97 f9       	bld	r25, 7
    1614:	08 95       	ret

00001616 <__gesf2>:
    1616:	8a df       	rcall	.-236    	; 0x152c <__fp_cmp>
    1618:	08 f4       	brcc	.+2      	; 0x161c <__gesf2+0x6>
    161a:	8f ef       	ldi	r24, 0xFF	; 255
    161c:	08 95       	ret

0000161e <__mulsf3>:
    161e:	0b d0       	rcall	.+22     	; 0x1636 <__mulsf3x>
    1620:	c0 cf       	rjmp	.-128    	; 0x15a2 <__fp_round>
    1622:	b1 df       	rcall	.-158    	; 0x1586 <__fp_pscA>
    1624:	28 f0       	brcs	.+10     	; 0x1630 <__mulsf3+0x12>
    1626:	b6 df       	rcall	.-148    	; 0x1594 <__fp_pscB>
    1628:	18 f0       	brcs	.+6      	; 0x1630 <__mulsf3+0x12>
    162a:	95 23       	and	r25, r21
    162c:	09 f0       	breq	.+2      	; 0x1630 <__mulsf3+0x12>
    162e:	a2 cf       	rjmp	.-188    	; 0x1574 <__fp_inf>
    1630:	a7 cf       	rjmp	.-178    	; 0x1580 <__fp_nan>
    1632:	11 24       	eor	r1, r1
    1634:	ea cf       	rjmp	.-44     	; 0x160a <__fp_szero>

00001636 <__mulsf3x>:
    1636:	c6 df       	rcall	.-116    	; 0x15c4 <__fp_split3>
    1638:	a0 f3       	brcs	.-24     	; 0x1622 <__mulsf3+0x4>

0000163a <__mulsf3_pse>:
    163a:	95 9f       	mul	r25, r21
    163c:	d1 f3       	breq	.-12     	; 0x1632 <__mulsf3+0x14>
    163e:	95 0f       	add	r25, r21
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	55 1f       	adc	r21, r21
    1644:	62 9f       	mul	r22, r18
    1646:	f0 01       	movw	r30, r0
    1648:	72 9f       	mul	r23, r18
    164a:	bb 27       	eor	r27, r27
    164c:	f0 0d       	add	r31, r0
    164e:	b1 1d       	adc	r27, r1
    1650:	63 9f       	mul	r22, r19
    1652:	aa 27       	eor	r26, r26
    1654:	f0 0d       	add	r31, r0
    1656:	b1 1d       	adc	r27, r1
    1658:	aa 1f       	adc	r26, r26
    165a:	64 9f       	mul	r22, r20
    165c:	66 27       	eor	r22, r22
    165e:	b0 0d       	add	r27, r0
    1660:	a1 1d       	adc	r26, r1
    1662:	66 1f       	adc	r22, r22
    1664:	82 9f       	mul	r24, r18
    1666:	22 27       	eor	r18, r18
    1668:	b0 0d       	add	r27, r0
    166a:	a1 1d       	adc	r26, r1
    166c:	62 1f       	adc	r22, r18
    166e:	73 9f       	mul	r23, r19
    1670:	b0 0d       	add	r27, r0
    1672:	a1 1d       	adc	r26, r1
    1674:	62 1f       	adc	r22, r18
    1676:	83 9f       	mul	r24, r19
    1678:	a0 0d       	add	r26, r0
    167a:	61 1d       	adc	r22, r1
    167c:	22 1f       	adc	r18, r18
    167e:	74 9f       	mul	r23, r20
    1680:	33 27       	eor	r19, r19
    1682:	a0 0d       	add	r26, r0
    1684:	61 1d       	adc	r22, r1
    1686:	23 1f       	adc	r18, r19
    1688:	84 9f       	mul	r24, r20
    168a:	60 0d       	add	r22, r0
    168c:	21 1d       	adc	r18, r1
    168e:	82 2f       	mov	r24, r18
    1690:	76 2f       	mov	r23, r22
    1692:	6a 2f       	mov	r22, r26
    1694:	11 24       	eor	r1, r1
    1696:	9f 57       	subi	r25, 0x7F	; 127
    1698:	50 40       	sbci	r21, 0x00	; 0
    169a:	8a f0       	brmi	.+34     	; 0x16be <__mulsf3_pse+0x84>
    169c:	e1 f0       	breq	.+56     	; 0x16d6 <__mulsf3_pse+0x9c>
    169e:	88 23       	and	r24, r24
    16a0:	4a f0       	brmi	.+18     	; 0x16b4 <__mulsf3_pse+0x7a>
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	bb 1f       	adc	r27, r27
    16a8:	66 1f       	adc	r22, r22
    16aa:	77 1f       	adc	r23, r23
    16ac:	88 1f       	adc	r24, r24
    16ae:	91 50       	subi	r25, 0x01	; 1
    16b0:	50 40       	sbci	r21, 0x00	; 0
    16b2:	a9 f7       	brne	.-22     	; 0x169e <__mulsf3_pse+0x64>
    16b4:	9e 3f       	cpi	r25, 0xFE	; 254
    16b6:	51 05       	cpc	r21, r1
    16b8:	70 f0       	brcs	.+28     	; 0x16d6 <__mulsf3_pse+0x9c>
    16ba:	5c cf       	rjmp	.-328    	; 0x1574 <__fp_inf>
    16bc:	a6 cf       	rjmp	.-180    	; 0x160a <__fp_szero>
    16be:	5f 3f       	cpi	r21, 0xFF	; 255
    16c0:	ec f3       	brlt	.-6      	; 0x16bc <__mulsf3_pse+0x82>
    16c2:	98 3e       	cpi	r25, 0xE8	; 232
    16c4:	dc f3       	brlt	.-10     	; 0x16bc <__mulsf3_pse+0x82>
    16c6:	86 95       	lsr	r24
    16c8:	77 95       	ror	r23
    16ca:	67 95       	ror	r22
    16cc:	b7 95       	ror	r27
    16ce:	f7 95       	ror	r31
    16d0:	e7 95       	ror	r30
    16d2:	9f 5f       	subi	r25, 0xFF	; 255
    16d4:	c1 f7       	brne	.-16     	; 0x16c6 <__mulsf3_pse+0x8c>
    16d6:	fe 2b       	or	r31, r30
    16d8:	88 0f       	add	r24, r24
    16da:	91 1d       	adc	r25, r1
    16dc:	96 95       	lsr	r25
    16de:	87 95       	ror	r24
    16e0:	97 f9       	bld	r25, 7
    16e2:	08 95       	ret

000016e4 <__tablejump2__>:
    16e4:	ee 0f       	add	r30, r30
    16e6:	ff 1f       	adc	r31, r31

000016e8 <__tablejump__>:
    16e8:	05 90       	lpm	r0, Z+
    16ea:	f4 91       	lpm	r31, Z
    16ec:	e0 2d       	mov	r30, r0
    16ee:	19 94       	eijmp

000016f0 <__ashrdi3>:
    16f0:	97 fb       	bst	r25, 7
    16f2:	10 f8       	bld	r1, 0

000016f4 <__lshrdi3>:
    16f4:	16 94       	lsr	r1
    16f6:	00 08       	sbc	r0, r0
    16f8:	0f 93       	push	r16
    16fa:	08 30       	cpi	r16, 0x08	; 8
    16fc:	98 f0       	brcs	.+38     	; 0x1724 <__lshrdi3+0x30>
    16fe:	08 50       	subi	r16, 0x08	; 8
    1700:	23 2f       	mov	r18, r19
    1702:	34 2f       	mov	r19, r20
    1704:	45 2f       	mov	r20, r21
    1706:	56 2f       	mov	r21, r22
    1708:	67 2f       	mov	r22, r23
    170a:	78 2f       	mov	r23, r24
    170c:	89 2f       	mov	r24, r25
    170e:	90 2d       	mov	r25, r0
    1710:	f4 cf       	rjmp	.-24     	; 0x16fa <__lshrdi3+0x6>
    1712:	05 94       	asr	r0
    1714:	97 95       	ror	r25
    1716:	87 95       	ror	r24
    1718:	77 95       	ror	r23
    171a:	67 95       	ror	r22
    171c:	57 95       	ror	r21
    171e:	47 95       	ror	r20
    1720:	37 95       	ror	r19
    1722:	27 95       	ror	r18
    1724:	0a 95       	dec	r16
    1726:	aa f7       	brpl	.-22     	; 0x1712 <__lshrdi3+0x1e>
    1728:	0f 91       	pop	r16
    172a:	08 95       	ret

0000172c <__adddi3>:
    172c:	2a 0d       	add	r18, r10
    172e:	3b 1d       	adc	r19, r11
    1730:	4c 1d       	adc	r20, r12
    1732:	5d 1d       	adc	r21, r13
    1734:	6e 1d       	adc	r22, r14
    1736:	7f 1d       	adc	r23, r15
    1738:	80 1f       	adc	r24, r16
    173a:	91 1f       	adc	r25, r17
    173c:	08 95       	ret

0000173e <fdevopen>:
    173e:	0f 93       	push	r16
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	ec 01       	movw	r28, r24
    1748:	8b 01       	movw	r16, r22
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	31 f4       	brne	.+12     	; 0x175a <fdevopen+0x1c>
    174e:	61 15       	cp	r22, r1
    1750:	71 05       	cpc	r23, r1
    1752:	19 f4       	brne	.+6      	; 0x175a <fdevopen+0x1c>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	37 c0       	rjmp	.+110    	; 0x17c8 <fdevopen+0x8a>
    175a:	6e e0       	ldi	r22, 0x0E	; 14
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	63 d2       	rcall	.+1222   	; 0x1c2a <calloc>
    1764:	fc 01       	movw	r30, r24
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	a9 f3       	breq	.-22     	; 0x1754 <fdevopen+0x16>
    176a:	80 e8       	ldi	r24, 0x80	; 128
    176c:	83 83       	std	Z+3, r24	; 0x03
    176e:	01 15       	cp	r16, r1
    1770:	11 05       	cpc	r17, r1
    1772:	71 f0       	breq	.+28     	; 0x1790 <fdevopen+0x52>
    1774:	13 87       	std	Z+11, r17	; 0x0b
    1776:	02 87       	std	Z+10, r16	; 0x0a
    1778:	81 e8       	ldi	r24, 0x81	; 129
    177a:	83 83       	std	Z+3, r24	; 0x03
    177c:	80 91 13 05 	lds	r24, 0x0513
    1780:	90 91 14 05 	lds	r25, 0x0514
    1784:	89 2b       	or	r24, r25
    1786:	21 f4       	brne	.+8      	; 0x1790 <fdevopen+0x52>
    1788:	f0 93 14 05 	sts	0x0514, r31
    178c:	e0 93 13 05 	sts	0x0513, r30
    1790:	20 97       	sbiw	r28, 0x00	; 0
    1792:	c9 f0       	breq	.+50     	; 0x17c6 <fdevopen+0x88>
    1794:	d1 87       	std	Z+9, r29	; 0x09
    1796:	c0 87       	std	Z+8, r28	; 0x08
    1798:	83 81       	ldd	r24, Z+3	; 0x03
    179a:	82 60       	ori	r24, 0x02	; 2
    179c:	83 83       	std	Z+3, r24	; 0x03
    179e:	80 91 15 05 	lds	r24, 0x0515
    17a2:	90 91 16 05 	lds	r25, 0x0516
    17a6:	89 2b       	or	r24, r25
    17a8:	71 f4       	brne	.+28     	; 0x17c6 <fdevopen+0x88>
    17aa:	f0 93 16 05 	sts	0x0516, r31
    17ae:	e0 93 15 05 	sts	0x0515, r30
    17b2:	80 91 17 05 	lds	r24, 0x0517
    17b6:	90 91 18 05 	lds	r25, 0x0518
    17ba:	89 2b       	or	r24, r25
    17bc:	21 f4       	brne	.+8      	; 0x17c6 <fdevopen+0x88>
    17be:	f0 93 18 05 	sts	0x0518, r31
    17c2:	e0 93 17 05 	sts	0x0517, r30
    17c6:	cf 01       	movw	r24, r30
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	08 95       	ret

000017d2 <printf>:
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	fe 01       	movw	r30, r28
    17dc:	36 96       	adiw	r30, 0x06	; 6
    17de:	61 91       	ld	r22, Z+
    17e0:	71 91       	ld	r23, Z+
    17e2:	af 01       	movw	r20, r30
    17e4:	80 91 15 05 	lds	r24, 0x0515
    17e8:	90 91 16 05 	lds	r25, 0x0516
    17ec:	30 d0       	rcall	.+96     	; 0x184e <vfprintf>
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	08 95       	ret

000017f4 <puts>:
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	e0 91 15 05 	lds	r30, 0x0515
    1800:	f0 91 16 05 	lds	r31, 0x0516
    1804:	23 81       	ldd	r18, Z+3	; 0x03
    1806:	21 ff       	sbrs	r18, 1
    1808:	1b c0       	rjmp	.+54     	; 0x1840 <puts+0x4c>
    180a:	ec 01       	movw	r28, r24
    180c:	00 e0       	ldi	r16, 0x00	; 0
    180e:	10 e0       	ldi	r17, 0x00	; 0
    1810:	89 91       	ld	r24, Y+
    1812:	60 91 15 05 	lds	r22, 0x0515
    1816:	70 91 16 05 	lds	r23, 0x0516
    181a:	db 01       	movw	r26, r22
    181c:	18 96       	adiw	r26, 0x08	; 8
    181e:	ed 91       	ld	r30, X+
    1820:	fc 91       	ld	r31, X
    1822:	19 97       	sbiw	r26, 0x09	; 9
    1824:	88 23       	and	r24, r24
    1826:	31 f0       	breq	.+12     	; 0x1834 <puts+0x40>
    1828:	19 95       	eicall
    182a:	89 2b       	or	r24, r25
    182c:	89 f3       	breq	.-30     	; 0x1810 <puts+0x1c>
    182e:	0f ef       	ldi	r16, 0xFF	; 255
    1830:	1f ef       	ldi	r17, 0xFF	; 255
    1832:	ee cf       	rjmp	.-36     	; 0x1810 <puts+0x1c>
    1834:	8a e0       	ldi	r24, 0x0A	; 10
    1836:	19 95       	eicall
    1838:	89 2b       	or	r24, r25
    183a:	11 f4       	brne	.+4      	; 0x1840 <puts+0x4c>
    183c:	c8 01       	movw	r24, r16
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <puts+0x50>
    1840:	8f ef       	ldi	r24, 0xFF	; 255
    1842:	9f ef       	ldi	r25, 0xFF	; 255
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	08 95       	ret

0000184e <vfprintf>:
    184e:	2f 92       	push	r2
    1850:	3f 92       	push	r3
    1852:	4f 92       	push	r4
    1854:	5f 92       	push	r5
    1856:	6f 92       	push	r6
    1858:	7f 92       	push	r7
    185a:	8f 92       	push	r8
    185c:	9f 92       	push	r9
    185e:	af 92       	push	r10
    1860:	bf 92       	push	r11
    1862:	cf 92       	push	r12
    1864:	df 92       	push	r13
    1866:	ef 92       	push	r14
    1868:	ff 92       	push	r15
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	2c 97       	sbiw	r28, 0x0c	; 12
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	7c 01       	movw	r14, r24
    1884:	6b 01       	movw	r12, r22
    1886:	8a 01       	movw	r16, r20
    1888:	fc 01       	movw	r30, r24
    188a:	17 82       	std	Z+7, r1	; 0x07
    188c:	16 82       	std	Z+6, r1	; 0x06
    188e:	83 81       	ldd	r24, Z+3	; 0x03
    1890:	81 ff       	sbrs	r24, 1
    1892:	b0 c1       	rjmp	.+864    	; 0x1bf4 <vfprintf+0x3a6>
    1894:	ce 01       	movw	r24, r28
    1896:	01 96       	adiw	r24, 0x01	; 1
    1898:	4c 01       	movw	r8, r24
    189a:	f7 01       	movw	r30, r14
    189c:	93 81       	ldd	r25, Z+3	; 0x03
    189e:	f6 01       	movw	r30, r12
    18a0:	93 fd       	sbrc	r25, 3
    18a2:	85 91       	lpm	r24, Z+
    18a4:	93 ff       	sbrs	r25, 3
    18a6:	81 91       	ld	r24, Z+
    18a8:	6f 01       	movw	r12, r30
    18aa:	88 23       	and	r24, r24
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <vfprintf+0x62>
    18ae:	9e c1       	rjmp	.+828    	; 0x1bec <vfprintf+0x39e>
    18b0:	85 32       	cpi	r24, 0x25	; 37
    18b2:	39 f4       	brne	.+14     	; 0x18c2 <vfprintf+0x74>
    18b4:	93 fd       	sbrc	r25, 3
    18b6:	85 91       	lpm	r24, Z+
    18b8:	93 ff       	sbrs	r25, 3
    18ba:	81 91       	ld	r24, Z+
    18bc:	6f 01       	movw	r12, r30
    18be:	85 32       	cpi	r24, 0x25	; 37
    18c0:	21 f4       	brne	.+8      	; 0x18ca <vfprintf+0x7c>
    18c2:	b7 01       	movw	r22, r14
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0f d3       	rcall	.+1566   	; 0x1ee6 <fputc>
    18c8:	e8 cf       	rjmp	.-48     	; 0x189a <vfprintf+0x4c>
    18ca:	51 2c       	mov	r5, r1
    18cc:	31 2c       	mov	r3, r1
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	20 32       	cpi	r18, 0x20	; 32
    18d2:	a0 f4       	brcc	.+40     	; 0x18fc <vfprintf+0xae>
    18d4:	8b 32       	cpi	r24, 0x2B	; 43
    18d6:	69 f0       	breq	.+26     	; 0x18f2 <vfprintf+0xa4>
    18d8:	30 f4       	brcc	.+12     	; 0x18e6 <vfprintf+0x98>
    18da:	80 32       	cpi	r24, 0x20	; 32
    18dc:	59 f0       	breq	.+22     	; 0x18f4 <vfprintf+0xa6>
    18de:	83 32       	cpi	r24, 0x23	; 35
    18e0:	69 f4       	brne	.+26     	; 0x18fc <vfprintf+0xae>
    18e2:	20 61       	ori	r18, 0x10	; 16
    18e4:	2c c0       	rjmp	.+88     	; 0x193e <vfprintf+0xf0>
    18e6:	8d 32       	cpi	r24, 0x2D	; 45
    18e8:	39 f0       	breq	.+14     	; 0x18f8 <vfprintf+0xaa>
    18ea:	80 33       	cpi	r24, 0x30	; 48
    18ec:	39 f4       	brne	.+14     	; 0x18fc <vfprintf+0xae>
    18ee:	21 60       	ori	r18, 0x01	; 1
    18f0:	26 c0       	rjmp	.+76     	; 0x193e <vfprintf+0xf0>
    18f2:	22 60       	ori	r18, 0x02	; 2
    18f4:	24 60       	ori	r18, 0x04	; 4
    18f6:	23 c0       	rjmp	.+70     	; 0x193e <vfprintf+0xf0>
    18f8:	28 60       	ori	r18, 0x08	; 8
    18fa:	21 c0       	rjmp	.+66     	; 0x193e <vfprintf+0xf0>
    18fc:	27 fd       	sbrc	r18, 7
    18fe:	27 c0       	rjmp	.+78     	; 0x194e <vfprintf+0x100>
    1900:	30 ed       	ldi	r19, 0xD0	; 208
    1902:	38 0f       	add	r19, r24
    1904:	3a 30       	cpi	r19, 0x0A	; 10
    1906:	78 f4       	brcc	.+30     	; 0x1926 <vfprintf+0xd8>
    1908:	26 ff       	sbrs	r18, 6
    190a:	06 c0       	rjmp	.+12     	; 0x1918 <vfprintf+0xca>
    190c:	fa e0       	ldi	r31, 0x0A	; 10
    190e:	5f 9e       	mul	r5, r31
    1910:	30 0d       	add	r19, r0
    1912:	11 24       	eor	r1, r1
    1914:	53 2e       	mov	r5, r19
    1916:	13 c0       	rjmp	.+38     	; 0x193e <vfprintf+0xf0>
    1918:	8a e0       	ldi	r24, 0x0A	; 10
    191a:	38 9e       	mul	r3, r24
    191c:	30 0d       	add	r19, r0
    191e:	11 24       	eor	r1, r1
    1920:	33 2e       	mov	r3, r19
    1922:	20 62       	ori	r18, 0x20	; 32
    1924:	0c c0       	rjmp	.+24     	; 0x193e <vfprintf+0xf0>
    1926:	8e 32       	cpi	r24, 0x2E	; 46
    1928:	21 f4       	brne	.+8      	; 0x1932 <vfprintf+0xe4>
    192a:	26 fd       	sbrc	r18, 6
    192c:	5f c1       	rjmp	.+702    	; 0x1bec <vfprintf+0x39e>
    192e:	20 64       	ori	r18, 0x40	; 64
    1930:	06 c0       	rjmp	.+12     	; 0x193e <vfprintf+0xf0>
    1932:	8c 36       	cpi	r24, 0x6C	; 108
    1934:	11 f4       	brne	.+4      	; 0x193a <vfprintf+0xec>
    1936:	20 68       	ori	r18, 0x80	; 128
    1938:	02 c0       	rjmp	.+4      	; 0x193e <vfprintf+0xf0>
    193a:	88 36       	cpi	r24, 0x68	; 104
    193c:	41 f4       	brne	.+16     	; 0x194e <vfprintf+0x100>
    193e:	f6 01       	movw	r30, r12
    1940:	93 fd       	sbrc	r25, 3
    1942:	85 91       	lpm	r24, Z+
    1944:	93 ff       	sbrs	r25, 3
    1946:	81 91       	ld	r24, Z+
    1948:	6f 01       	movw	r12, r30
    194a:	81 11       	cpse	r24, r1
    194c:	c1 cf       	rjmp	.-126    	; 0x18d0 <vfprintf+0x82>
    194e:	98 2f       	mov	r25, r24
    1950:	9f 7d       	andi	r25, 0xDF	; 223
    1952:	95 54       	subi	r25, 0x45	; 69
    1954:	93 30       	cpi	r25, 0x03	; 3
    1956:	28 f4       	brcc	.+10     	; 0x1962 <vfprintf+0x114>
    1958:	0c 5f       	subi	r16, 0xFC	; 252
    195a:	1f 4f       	sbci	r17, 0xFF	; 255
    195c:	ff e3       	ldi	r31, 0x3F	; 63
    195e:	f9 83       	std	Y+1, r31	; 0x01
    1960:	0d c0       	rjmp	.+26     	; 0x197c <vfprintf+0x12e>
    1962:	83 36       	cpi	r24, 0x63	; 99
    1964:	31 f0       	breq	.+12     	; 0x1972 <vfprintf+0x124>
    1966:	83 37       	cpi	r24, 0x73	; 115
    1968:	71 f0       	breq	.+28     	; 0x1986 <vfprintf+0x138>
    196a:	83 35       	cpi	r24, 0x53	; 83
    196c:	09 f0       	breq	.+2      	; 0x1970 <vfprintf+0x122>
    196e:	57 c0       	rjmp	.+174    	; 0x1a1e <vfprintf+0x1d0>
    1970:	21 c0       	rjmp	.+66     	; 0x19b4 <vfprintf+0x166>
    1972:	f8 01       	movw	r30, r16
    1974:	80 81       	ld	r24, Z
    1976:	89 83       	std	Y+1, r24	; 0x01
    1978:	0e 5f       	subi	r16, 0xFE	; 254
    197a:	1f 4f       	sbci	r17, 0xFF	; 255
    197c:	44 24       	eor	r4, r4
    197e:	43 94       	inc	r4
    1980:	51 2c       	mov	r5, r1
    1982:	54 01       	movw	r10, r8
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <vfprintf+0x160>
    1986:	38 01       	movw	r6, r16
    1988:	f2 e0       	ldi	r31, 0x02	; 2
    198a:	6f 0e       	add	r6, r31
    198c:	71 1c       	adc	r7, r1
    198e:	f8 01       	movw	r30, r16
    1990:	a0 80       	ld	r10, Z
    1992:	b1 80       	ldd	r11, Z+1	; 0x01
    1994:	26 ff       	sbrs	r18, 6
    1996:	03 c0       	rjmp	.+6      	; 0x199e <vfprintf+0x150>
    1998:	65 2d       	mov	r22, r5
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <vfprintf+0x154>
    199e:	6f ef       	ldi	r22, 0xFF	; 255
    19a0:	7f ef       	ldi	r23, 0xFF	; 255
    19a2:	c5 01       	movw	r24, r10
    19a4:	2c 87       	std	Y+12, r18	; 0x0c
    19a6:	94 d2       	rcall	.+1320   	; 0x1ed0 <strnlen>
    19a8:	2c 01       	movw	r4, r24
    19aa:	83 01       	movw	r16, r6
    19ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    19ae:	2f 77       	andi	r18, 0x7F	; 127
    19b0:	22 2e       	mov	r2, r18
    19b2:	16 c0       	rjmp	.+44     	; 0x19e0 <vfprintf+0x192>
    19b4:	38 01       	movw	r6, r16
    19b6:	f2 e0       	ldi	r31, 0x02	; 2
    19b8:	6f 0e       	add	r6, r31
    19ba:	71 1c       	adc	r7, r1
    19bc:	f8 01       	movw	r30, r16
    19be:	a0 80       	ld	r10, Z
    19c0:	b1 80       	ldd	r11, Z+1	; 0x01
    19c2:	26 ff       	sbrs	r18, 6
    19c4:	03 c0       	rjmp	.+6      	; 0x19cc <vfprintf+0x17e>
    19c6:	65 2d       	mov	r22, r5
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <vfprintf+0x182>
    19cc:	6f ef       	ldi	r22, 0xFF	; 255
    19ce:	7f ef       	ldi	r23, 0xFF	; 255
    19d0:	c5 01       	movw	r24, r10
    19d2:	2c 87       	std	Y+12, r18	; 0x0c
    19d4:	6b d2       	rcall	.+1238   	; 0x1eac <strnlen_P>
    19d6:	2c 01       	movw	r4, r24
    19d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    19da:	20 68       	ori	r18, 0x80	; 128
    19dc:	22 2e       	mov	r2, r18
    19de:	83 01       	movw	r16, r6
    19e0:	23 fc       	sbrc	r2, 3
    19e2:	19 c0       	rjmp	.+50     	; 0x1a16 <vfprintf+0x1c8>
    19e4:	83 2d       	mov	r24, r3
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	48 16       	cp	r4, r24
    19ea:	59 06       	cpc	r5, r25
    19ec:	a0 f4       	brcc	.+40     	; 0x1a16 <vfprintf+0x1c8>
    19ee:	b7 01       	movw	r22, r14
    19f0:	80 e2       	ldi	r24, 0x20	; 32
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	78 d2       	rcall	.+1264   	; 0x1ee6 <fputc>
    19f6:	3a 94       	dec	r3
    19f8:	f5 cf       	rjmp	.-22     	; 0x19e4 <vfprintf+0x196>
    19fa:	f5 01       	movw	r30, r10
    19fc:	27 fc       	sbrc	r2, 7
    19fe:	85 91       	lpm	r24, Z+
    1a00:	27 fe       	sbrs	r2, 7
    1a02:	81 91       	ld	r24, Z+
    1a04:	5f 01       	movw	r10, r30
    1a06:	b7 01       	movw	r22, r14
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	6d d2       	rcall	.+1242   	; 0x1ee6 <fputc>
    1a0c:	31 10       	cpse	r3, r1
    1a0e:	3a 94       	dec	r3
    1a10:	f1 e0       	ldi	r31, 0x01	; 1
    1a12:	4f 1a       	sub	r4, r31
    1a14:	51 08       	sbc	r5, r1
    1a16:	41 14       	cp	r4, r1
    1a18:	51 04       	cpc	r5, r1
    1a1a:	79 f7       	brne	.-34     	; 0x19fa <vfprintf+0x1ac>
    1a1c:	de c0       	rjmp	.+444    	; 0x1bda <vfprintf+0x38c>
    1a1e:	84 36       	cpi	r24, 0x64	; 100
    1a20:	11 f0       	breq	.+4      	; 0x1a26 <vfprintf+0x1d8>
    1a22:	89 36       	cpi	r24, 0x69	; 105
    1a24:	31 f5       	brne	.+76     	; 0x1a72 <vfprintf+0x224>
    1a26:	f8 01       	movw	r30, r16
    1a28:	27 ff       	sbrs	r18, 7
    1a2a:	07 c0       	rjmp	.+14     	; 0x1a3a <vfprintf+0x1ec>
    1a2c:	60 81       	ld	r22, Z
    1a2e:	71 81       	ldd	r23, Z+1	; 0x01
    1a30:	82 81       	ldd	r24, Z+2	; 0x02
    1a32:	93 81       	ldd	r25, Z+3	; 0x03
    1a34:	0c 5f       	subi	r16, 0xFC	; 252
    1a36:	1f 4f       	sbci	r17, 0xFF	; 255
    1a38:	08 c0       	rjmp	.+16     	; 0x1a4a <vfprintf+0x1fc>
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	88 27       	eor	r24, r24
    1a40:	77 fd       	sbrc	r23, 7
    1a42:	80 95       	com	r24
    1a44:	98 2f       	mov	r25, r24
    1a46:	0e 5f       	subi	r16, 0xFE	; 254
    1a48:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4a:	2f 76       	andi	r18, 0x6F	; 111
    1a4c:	b2 2e       	mov	r11, r18
    1a4e:	97 ff       	sbrs	r25, 7
    1a50:	09 c0       	rjmp	.+18     	; 0x1a64 <vfprintf+0x216>
    1a52:	90 95       	com	r25
    1a54:	80 95       	com	r24
    1a56:	70 95       	com	r23
    1a58:	61 95       	neg	r22
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	20 68       	ori	r18, 0x80	; 128
    1a62:	b2 2e       	mov	r11, r18
    1a64:	2a e0       	ldi	r18, 0x0A	; 10
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	a4 01       	movw	r20, r8
    1a6a:	6f d2       	rcall	.+1246   	; 0x1f4a <__ultoa_invert>
    1a6c:	a8 2e       	mov	r10, r24
    1a6e:	a8 18       	sub	r10, r8
    1a70:	43 c0       	rjmp	.+134    	; 0x1af8 <vfprintf+0x2aa>
    1a72:	85 37       	cpi	r24, 0x75	; 117
    1a74:	29 f4       	brne	.+10     	; 0x1a80 <vfprintf+0x232>
    1a76:	2f 7e       	andi	r18, 0xEF	; 239
    1a78:	b2 2e       	mov	r11, r18
    1a7a:	2a e0       	ldi	r18, 0x0A	; 10
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	25 c0       	rjmp	.+74     	; 0x1aca <vfprintf+0x27c>
    1a80:	f2 2f       	mov	r31, r18
    1a82:	f9 7f       	andi	r31, 0xF9	; 249
    1a84:	bf 2e       	mov	r11, r31
    1a86:	8f 36       	cpi	r24, 0x6F	; 111
    1a88:	c1 f0       	breq	.+48     	; 0x1aba <vfprintf+0x26c>
    1a8a:	18 f4       	brcc	.+6      	; 0x1a92 <vfprintf+0x244>
    1a8c:	88 35       	cpi	r24, 0x58	; 88
    1a8e:	79 f0       	breq	.+30     	; 0x1aae <vfprintf+0x260>
    1a90:	ad c0       	rjmp	.+346    	; 0x1bec <vfprintf+0x39e>
    1a92:	80 37       	cpi	r24, 0x70	; 112
    1a94:	19 f0       	breq	.+6      	; 0x1a9c <vfprintf+0x24e>
    1a96:	88 37       	cpi	r24, 0x78	; 120
    1a98:	21 f0       	breq	.+8      	; 0x1aa2 <vfprintf+0x254>
    1a9a:	a8 c0       	rjmp	.+336    	; 0x1bec <vfprintf+0x39e>
    1a9c:	2f 2f       	mov	r18, r31
    1a9e:	20 61       	ori	r18, 0x10	; 16
    1aa0:	b2 2e       	mov	r11, r18
    1aa2:	b4 fe       	sbrs	r11, 4
    1aa4:	0d c0       	rjmp	.+26     	; 0x1ac0 <vfprintf+0x272>
    1aa6:	8b 2d       	mov	r24, r11
    1aa8:	84 60       	ori	r24, 0x04	; 4
    1aaa:	b8 2e       	mov	r11, r24
    1aac:	09 c0       	rjmp	.+18     	; 0x1ac0 <vfprintf+0x272>
    1aae:	24 ff       	sbrs	r18, 4
    1ab0:	0a c0       	rjmp	.+20     	; 0x1ac6 <vfprintf+0x278>
    1ab2:	9f 2f       	mov	r25, r31
    1ab4:	96 60       	ori	r25, 0x06	; 6
    1ab6:	b9 2e       	mov	r11, r25
    1ab8:	06 c0       	rjmp	.+12     	; 0x1ac6 <vfprintf+0x278>
    1aba:	28 e0       	ldi	r18, 0x08	; 8
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	05 c0       	rjmp	.+10     	; 0x1aca <vfprintf+0x27c>
    1ac0:	20 e1       	ldi	r18, 0x10	; 16
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <vfprintf+0x27c>
    1ac6:	20 e1       	ldi	r18, 0x10	; 16
    1ac8:	32 e0       	ldi	r19, 0x02	; 2
    1aca:	f8 01       	movw	r30, r16
    1acc:	b7 fe       	sbrs	r11, 7
    1ace:	07 c0       	rjmp	.+14     	; 0x1ade <vfprintf+0x290>
    1ad0:	60 81       	ld	r22, Z
    1ad2:	71 81       	ldd	r23, Z+1	; 0x01
    1ad4:	82 81       	ldd	r24, Z+2	; 0x02
    1ad6:	93 81       	ldd	r25, Z+3	; 0x03
    1ad8:	0c 5f       	subi	r16, 0xFC	; 252
    1ada:	1f 4f       	sbci	r17, 0xFF	; 255
    1adc:	06 c0       	rjmp	.+12     	; 0x1aea <vfprintf+0x29c>
    1ade:	60 81       	ld	r22, Z
    1ae0:	71 81       	ldd	r23, Z+1	; 0x01
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	0e 5f       	subi	r16, 0xFE	; 254
    1ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aea:	a4 01       	movw	r20, r8
    1aec:	2e d2       	rcall	.+1116   	; 0x1f4a <__ultoa_invert>
    1aee:	a8 2e       	mov	r10, r24
    1af0:	a8 18       	sub	r10, r8
    1af2:	fb 2d       	mov	r31, r11
    1af4:	ff 77       	andi	r31, 0x7F	; 127
    1af6:	bf 2e       	mov	r11, r31
    1af8:	b6 fe       	sbrs	r11, 6
    1afa:	0b c0       	rjmp	.+22     	; 0x1b12 <vfprintf+0x2c4>
    1afc:	2b 2d       	mov	r18, r11
    1afe:	2e 7f       	andi	r18, 0xFE	; 254
    1b00:	a5 14       	cp	r10, r5
    1b02:	50 f4       	brcc	.+20     	; 0x1b18 <vfprintf+0x2ca>
    1b04:	b4 fe       	sbrs	r11, 4
    1b06:	0a c0       	rjmp	.+20     	; 0x1b1c <vfprintf+0x2ce>
    1b08:	b2 fc       	sbrc	r11, 2
    1b0a:	08 c0       	rjmp	.+16     	; 0x1b1c <vfprintf+0x2ce>
    1b0c:	2b 2d       	mov	r18, r11
    1b0e:	2e 7e       	andi	r18, 0xEE	; 238
    1b10:	05 c0       	rjmp	.+10     	; 0x1b1c <vfprintf+0x2ce>
    1b12:	7a 2c       	mov	r7, r10
    1b14:	2b 2d       	mov	r18, r11
    1b16:	03 c0       	rjmp	.+6      	; 0x1b1e <vfprintf+0x2d0>
    1b18:	7a 2c       	mov	r7, r10
    1b1a:	01 c0       	rjmp	.+2      	; 0x1b1e <vfprintf+0x2d0>
    1b1c:	75 2c       	mov	r7, r5
    1b1e:	24 ff       	sbrs	r18, 4
    1b20:	0d c0       	rjmp	.+26     	; 0x1b3c <vfprintf+0x2ee>
    1b22:	fe 01       	movw	r30, r28
    1b24:	ea 0d       	add	r30, r10
    1b26:	f1 1d       	adc	r31, r1
    1b28:	80 81       	ld	r24, Z
    1b2a:	80 33       	cpi	r24, 0x30	; 48
    1b2c:	11 f4       	brne	.+4      	; 0x1b32 <vfprintf+0x2e4>
    1b2e:	29 7e       	andi	r18, 0xE9	; 233
    1b30:	09 c0       	rjmp	.+18     	; 0x1b44 <vfprintf+0x2f6>
    1b32:	22 ff       	sbrs	r18, 2
    1b34:	06 c0       	rjmp	.+12     	; 0x1b42 <vfprintf+0x2f4>
    1b36:	73 94       	inc	r7
    1b38:	73 94       	inc	r7
    1b3a:	04 c0       	rjmp	.+8      	; 0x1b44 <vfprintf+0x2f6>
    1b3c:	82 2f       	mov	r24, r18
    1b3e:	86 78       	andi	r24, 0x86	; 134
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <vfprintf+0x2f6>
    1b42:	73 94       	inc	r7
    1b44:	23 fd       	sbrc	r18, 3
    1b46:	12 c0       	rjmp	.+36     	; 0x1b6c <vfprintf+0x31e>
    1b48:	20 ff       	sbrs	r18, 0
    1b4a:	06 c0       	rjmp	.+12     	; 0x1b58 <vfprintf+0x30a>
    1b4c:	5a 2c       	mov	r5, r10
    1b4e:	73 14       	cp	r7, r3
    1b50:	18 f4       	brcc	.+6      	; 0x1b58 <vfprintf+0x30a>
    1b52:	53 0c       	add	r5, r3
    1b54:	57 18       	sub	r5, r7
    1b56:	73 2c       	mov	r7, r3
    1b58:	73 14       	cp	r7, r3
    1b5a:	60 f4       	brcc	.+24     	; 0x1b74 <vfprintf+0x326>
    1b5c:	b7 01       	movw	r22, r14
    1b5e:	80 e2       	ldi	r24, 0x20	; 32
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	2c 87       	std	Y+12, r18	; 0x0c
    1b64:	c0 d1       	rcall	.+896    	; 0x1ee6 <fputc>
    1b66:	73 94       	inc	r7
    1b68:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b6a:	f6 cf       	rjmp	.-20     	; 0x1b58 <vfprintf+0x30a>
    1b6c:	73 14       	cp	r7, r3
    1b6e:	10 f4       	brcc	.+4      	; 0x1b74 <vfprintf+0x326>
    1b70:	37 18       	sub	r3, r7
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <vfprintf+0x328>
    1b74:	31 2c       	mov	r3, r1
    1b76:	24 ff       	sbrs	r18, 4
    1b78:	11 c0       	rjmp	.+34     	; 0x1b9c <vfprintf+0x34e>
    1b7a:	b7 01       	movw	r22, r14
    1b7c:	80 e3       	ldi	r24, 0x30	; 48
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	2c 87       	std	Y+12, r18	; 0x0c
    1b82:	b1 d1       	rcall	.+866    	; 0x1ee6 <fputc>
    1b84:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b86:	22 ff       	sbrs	r18, 2
    1b88:	16 c0       	rjmp	.+44     	; 0x1bb6 <vfprintf+0x368>
    1b8a:	21 ff       	sbrs	r18, 1
    1b8c:	03 c0       	rjmp	.+6      	; 0x1b94 <vfprintf+0x346>
    1b8e:	88 e5       	ldi	r24, 0x58	; 88
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <vfprintf+0x34a>
    1b94:	88 e7       	ldi	r24, 0x78	; 120
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	b7 01       	movw	r22, r14
    1b9a:	0c c0       	rjmp	.+24     	; 0x1bb4 <vfprintf+0x366>
    1b9c:	82 2f       	mov	r24, r18
    1b9e:	86 78       	andi	r24, 0x86	; 134
    1ba0:	51 f0       	breq	.+20     	; 0x1bb6 <vfprintf+0x368>
    1ba2:	21 fd       	sbrc	r18, 1
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <vfprintf+0x35c>
    1ba6:	80 e2       	ldi	r24, 0x20	; 32
    1ba8:	01 c0       	rjmp	.+2      	; 0x1bac <vfprintf+0x35e>
    1baa:	8b e2       	ldi	r24, 0x2B	; 43
    1bac:	27 fd       	sbrc	r18, 7
    1bae:	8d e2       	ldi	r24, 0x2D	; 45
    1bb0:	b7 01       	movw	r22, r14
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	98 d1       	rcall	.+816    	; 0x1ee6 <fputc>
    1bb6:	a5 14       	cp	r10, r5
    1bb8:	30 f4       	brcc	.+12     	; 0x1bc6 <vfprintf+0x378>
    1bba:	b7 01       	movw	r22, r14
    1bbc:	80 e3       	ldi	r24, 0x30	; 48
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	92 d1       	rcall	.+804    	; 0x1ee6 <fputc>
    1bc2:	5a 94       	dec	r5
    1bc4:	f8 cf       	rjmp	.-16     	; 0x1bb6 <vfprintf+0x368>
    1bc6:	aa 94       	dec	r10
    1bc8:	f4 01       	movw	r30, r8
    1bca:	ea 0d       	add	r30, r10
    1bcc:	f1 1d       	adc	r31, r1
    1bce:	80 81       	ld	r24, Z
    1bd0:	b7 01       	movw	r22, r14
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	88 d1       	rcall	.+784    	; 0x1ee6 <fputc>
    1bd6:	a1 10       	cpse	r10, r1
    1bd8:	f6 cf       	rjmp	.-20     	; 0x1bc6 <vfprintf+0x378>
    1bda:	33 20       	and	r3, r3
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <vfprintf+0x392>
    1bde:	5d ce       	rjmp	.-838    	; 0x189a <vfprintf+0x4c>
    1be0:	b7 01       	movw	r22, r14
    1be2:	80 e2       	ldi	r24, 0x20	; 32
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	7f d1       	rcall	.+766    	; 0x1ee6 <fputc>
    1be8:	3a 94       	dec	r3
    1bea:	f7 cf       	rjmp	.-18     	; 0x1bda <vfprintf+0x38c>
    1bec:	f7 01       	movw	r30, r14
    1bee:	86 81       	ldd	r24, Z+6	; 0x06
    1bf0:	97 81       	ldd	r25, Z+7	; 0x07
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <vfprintf+0x3aa>
    1bf4:	8f ef       	ldi	r24, 0xFF	; 255
    1bf6:	9f ef       	ldi	r25, 0xFF	; 255
    1bf8:	2c 96       	adiw	r28, 0x0c	; 12
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	ff 90       	pop	r15
    1c0e:	ef 90       	pop	r14
    1c10:	df 90       	pop	r13
    1c12:	cf 90       	pop	r12
    1c14:	bf 90       	pop	r11
    1c16:	af 90       	pop	r10
    1c18:	9f 90       	pop	r9
    1c1a:	8f 90       	pop	r8
    1c1c:	7f 90       	pop	r7
    1c1e:	6f 90       	pop	r6
    1c20:	5f 90       	pop	r5
    1c22:	4f 90       	pop	r4
    1c24:	3f 90       	pop	r3
    1c26:	2f 90       	pop	r2
    1c28:	08 95       	ret

00001c2a <calloc>:
    1c2a:	0f 93       	push	r16
    1c2c:	1f 93       	push	r17
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	86 9f       	mul	r24, r22
    1c34:	80 01       	movw	r16, r0
    1c36:	87 9f       	mul	r24, r23
    1c38:	10 0d       	add	r17, r0
    1c3a:	96 9f       	mul	r25, r22
    1c3c:	10 0d       	add	r17, r0
    1c3e:	11 24       	eor	r1, r1
    1c40:	c8 01       	movw	r24, r16
    1c42:	0d d0       	rcall	.+26     	; 0x1c5e <malloc>
    1c44:	ec 01       	movw	r28, r24
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	21 f0       	breq	.+8      	; 0x1c52 <calloc+0x28>
    1c4a:	a8 01       	movw	r20, r16
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	38 d1       	rcall	.+624    	; 0x1ec2 <memset>
    1c52:	ce 01       	movw	r24, r28
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	1f 91       	pop	r17
    1c5a:	0f 91       	pop	r16
    1c5c:	08 95       	ret

00001c5e <malloc>:
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	82 30       	cpi	r24, 0x02	; 2
    1c64:	91 05       	cpc	r25, r1
    1c66:	10 f4       	brcc	.+4      	; 0x1c6c <malloc+0xe>
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	e0 91 1b 05 	lds	r30, 0x051B
    1c70:	f0 91 1c 05 	lds	r31, 0x051C
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	a0 e0       	ldi	r26, 0x00	; 0
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	30 97       	sbiw	r30, 0x00	; 0
    1c7e:	39 f1       	breq	.+78     	; 0x1cce <malloc+0x70>
    1c80:	40 81       	ld	r20, Z
    1c82:	51 81       	ldd	r21, Z+1	; 0x01
    1c84:	48 17       	cp	r20, r24
    1c86:	59 07       	cpc	r21, r25
    1c88:	b8 f0       	brcs	.+46     	; 0x1cb8 <malloc+0x5a>
    1c8a:	48 17       	cp	r20, r24
    1c8c:	59 07       	cpc	r21, r25
    1c8e:	71 f4       	brne	.+28     	; 0x1cac <malloc+0x4e>
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	10 97       	sbiw	r26, 0x00	; 0
    1c96:	29 f0       	breq	.+10     	; 0x1ca2 <malloc+0x44>
    1c98:	13 96       	adiw	r26, 0x03	; 3
    1c9a:	9c 93       	st	X, r25
    1c9c:	8e 93       	st	-X, r24
    1c9e:	12 97       	sbiw	r26, 0x02	; 2
    1ca0:	2c c0       	rjmp	.+88     	; 0x1cfa <malloc+0x9c>
    1ca2:	90 93 1c 05 	sts	0x051C, r25
    1ca6:	80 93 1b 05 	sts	0x051B, r24
    1caa:	27 c0       	rjmp	.+78     	; 0x1cfa <malloc+0x9c>
    1cac:	21 15       	cp	r18, r1
    1cae:	31 05       	cpc	r19, r1
    1cb0:	31 f0       	breq	.+12     	; 0x1cbe <malloc+0x60>
    1cb2:	42 17       	cp	r20, r18
    1cb4:	53 07       	cpc	r21, r19
    1cb6:	18 f0       	brcs	.+6      	; 0x1cbe <malloc+0x60>
    1cb8:	a9 01       	movw	r20, r18
    1cba:	db 01       	movw	r26, r22
    1cbc:	01 c0       	rjmp	.+2      	; 0x1cc0 <malloc+0x62>
    1cbe:	ef 01       	movw	r28, r30
    1cc0:	9a 01       	movw	r18, r20
    1cc2:	bd 01       	movw	r22, r26
    1cc4:	df 01       	movw	r26, r30
    1cc6:	02 80       	ldd	r0, Z+2	; 0x02
    1cc8:	f3 81       	ldd	r31, Z+3	; 0x03
    1cca:	e0 2d       	mov	r30, r0
    1ccc:	d7 cf       	rjmp	.-82     	; 0x1c7c <malloc+0x1e>
    1cce:	21 15       	cp	r18, r1
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	f9 f0       	breq	.+62     	; 0x1d12 <malloc+0xb4>
    1cd4:	28 1b       	sub	r18, r24
    1cd6:	39 0b       	sbc	r19, r25
    1cd8:	24 30       	cpi	r18, 0x04	; 4
    1cda:	31 05       	cpc	r19, r1
    1cdc:	80 f4       	brcc	.+32     	; 0x1cfe <malloc+0xa0>
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce2:	61 15       	cp	r22, r1
    1ce4:	71 05       	cpc	r23, r1
    1ce6:	21 f0       	breq	.+8      	; 0x1cf0 <malloc+0x92>
    1ce8:	fb 01       	movw	r30, r22
    1cea:	93 83       	std	Z+3, r25	; 0x03
    1cec:	82 83       	std	Z+2, r24	; 0x02
    1cee:	04 c0       	rjmp	.+8      	; 0x1cf8 <malloc+0x9a>
    1cf0:	90 93 1c 05 	sts	0x051C, r25
    1cf4:	80 93 1b 05 	sts	0x051B, r24
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	32 96       	adiw	r30, 0x02	; 2
    1cfc:	44 c0       	rjmp	.+136    	; 0x1d86 <malloc+0x128>
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e2 0f       	add	r30, r18
    1d02:	f3 1f       	adc	r31, r19
    1d04:	81 93       	st	Z+, r24
    1d06:	91 93       	st	Z+, r25
    1d08:	22 50       	subi	r18, 0x02	; 2
    1d0a:	31 09       	sbc	r19, r1
    1d0c:	39 83       	std	Y+1, r19	; 0x01
    1d0e:	28 83       	st	Y, r18
    1d10:	3a c0       	rjmp	.+116    	; 0x1d86 <malloc+0x128>
    1d12:	20 91 19 05 	lds	r18, 0x0519
    1d16:	30 91 1a 05 	lds	r19, 0x051A
    1d1a:	23 2b       	or	r18, r19
    1d1c:	41 f4       	brne	.+16     	; 0x1d2e <malloc+0xd0>
    1d1e:	20 91 02 02 	lds	r18, 0x0202
    1d22:	30 91 03 02 	lds	r19, 0x0203
    1d26:	30 93 1a 05 	sts	0x051A, r19
    1d2a:	20 93 19 05 	sts	0x0519, r18
    1d2e:	20 91 00 02 	lds	r18, 0x0200
    1d32:	30 91 01 02 	lds	r19, 0x0201
    1d36:	21 15       	cp	r18, r1
    1d38:	31 05       	cpc	r19, r1
    1d3a:	41 f4       	brne	.+16     	; 0x1d4c <malloc+0xee>
    1d3c:	2d b7       	in	r18, 0x3d	; 61
    1d3e:	3e b7       	in	r19, 0x3e	; 62
    1d40:	40 91 04 02 	lds	r20, 0x0204
    1d44:	50 91 05 02 	lds	r21, 0x0205
    1d48:	24 1b       	sub	r18, r20
    1d4a:	35 0b       	sbc	r19, r21
    1d4c:	e0 91 19 05 	lds	r30, 0x0519
    1d50:	f0 91 1a 05 	lds	r31, 0x051A
    1d54:	e2 17       	cp	r30, r18
    1d56:	f3 07       	cpc	r31, r19
    1d58:	a0 f4       	brcc	.+40     	; 0x1d82 <malloc+0x124>
    1d5a:	2e 1b       	sub	r18, r30
    1d5c:	3f 0b       	sbc	r19, r31
    1d5e:	28 17       	cp	r18, r24
    1d60:	39 07       	cpc	r19, r25
    1d62:	78 f0       	brcs	.+30     	; 0x1d82 <malloc+0x124>
    1d64:	ac 01       	movw	r20, r24
    1d66:	4e 5f       	subi	r20, 0xFE	; 254
    1d68:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6a:	24 17       	cp	r18, r20
    1d6c:	35 07       	cpc	r19, r21
    1d6e:	48 f0       	brcs	.+18     	; 0x1d82 <malloc+0x124>
    1d70:	4e 0f       	add	r20, r30
    1d72:	5f 1f       	adc	r21, r31
    1d74:	50 93 1a 05 	sts	0x051A, r21
    1d78:	40 93 19 05 	sts	0x0519, r20
    1d7c:	81 93       	st	Z+, r24
    1d7e:	91 93       	st	Z+, r25
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <malloc+0x128>
    1d82:	e0 e0       	ldi	r30, 0x00	; 0
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	cf 01       	movw	r24, r30
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	08 95       	ret

00001d8e <free>:
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <free+0xa>
    1d96:	87 c0       	rjmp	.+270    	; 0x1ea6 <free+0x118>
    1d98:	fc 01       	movw	r30, r24
    1d9a:	32 97       	sbiw	r30, 0x02	; 2
    1d9c:	13 82       	std	Z+3, r1	; 0x03
    1d9e:	12 82       	std	Z+2, r1	; 0x02
    1da0:	c0 91 1b 05 	lds	r28, 0x051B
    1da4:	d0 91 1c 05 	lds	r29, 0x051C
    1da8:	20 97       	sbiw	r28, 0x00	; 0
    1daa:	81 f4       	brne	.+32     	; 0x1dcc <free+0x3e>
    1dac:	20 81       	ld	r18, Z
    1dae:	31 81       	ldd	r19, Z+1	; 0x01
    1db0:	28 0f       	add	r18, r24
    1db2:	39 1f       	adc	r19, r25
    1db4:	80 91 19 05 	lds	r24, 0x0519
    1db8:	90 91 1a 05 	lds	r25, 0x051A
    1dbc:	82 17       	cp	r24, r18
    1dbe:	93 07       	cpc	r25, r19
    1dc0:	79 f5       	brne	.+94     	; 0x1e20 <free+0x92>
    1dc2:	f0 93 1a 05 	sts	0x051A, r31
    1dc6:	e0 93 19 05 	sts	0x0519, r30
    1dca:	6d c0       	rjmp	.+218    	; 0x1ea6 <free+0x118>
    1dcc:	de 01       	movw	r26, r28
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	ae 17       	cp	r26, r30
    1dd4:	bf 07       	cpc	r27, r31
    1dd6:	50 f4       	brcc	.+20     	; 0x1dec <free+0x5e>
    1dd8:	12 96       	adiw	r26, 0x02	; 2
    1dda:	4d 91       	ld	r20, X+
    1ddc:	5c 91       	ld	r21, X
    1dde:	13 97       	sbiw	r26, 0x03	; 3
    1de0:	9d 01       	movw	r18, r26
    1de2:	41 15       	cp	r20, r1
    1de4:	51 05       	cpc	r21, r1
    1de6:	09 f1       	breq	.+66     	; 0x1e2a <free+0x9c>
    1de8:	da 01       	movw	r26, r20
    1dea:	f3 cf       	rjmp	.-26     	; 0x1dd2 <free+0x44>
    1dec:	b3 83       	std	Z+3, r27	; 0x03
    1dee:	a2 83       	std	Z+2, r26	; 0x02
    1df0:	40 81       	ld	r20, Z
    1df2:	51 81       	ldd	r21, Z+1	; 0x01
    1df4:	84 0f       	add	r24, r20
    1df6:	95 1f       	adc	r25, r21
    1df8:	8a 17       	cp	r24, r26
    1dfa:	9b 07       	cpc	r25, r27
    1dfc:	71 f4       	brne	.+28     	; 0x1e1a <free+0x8c>
    1dfe:	8d 91       	ld	r24, X+
    1e00:	9c 91       	ld	r25, X
    1e02:	11 97       	sbiw	r26, 0x01	; 1
    1e04:	84 0f       	add	r24, r20
    1e06:	95 1f       	adc	r25, r21
    1e08:	02 96       	adiw	r24, 0x02	; 2
    1e0a:	91 83       	std	Z+1, r25	; 0x01
    1e0c:	80 83       	st	Z, r24
    1e0e:	12 96       	adiw	r26, 0x02	; 2
    1e10:	8d 91       	ld	r24, X+
    1e12:	9c 91       	ld	r25, X
    1e14:	13 97       	sbiw	r26, 0x03	; 3
    1e16:	93 83       	std	Z+3, r25	; 0x03
    1e18:	82 83       	std	Z+2, r24	; 0x02
    1e1a:	21 15       	cp	r18, r1
    1e1c:	31 05       	cpc	r19, r1
    1e1e:	29 f4       	brne	.+10     	; 0x1e2a <free+0x9c>
    1e20:	f0 93 1c 05 	sts	0x051C, r31
    1e24:	e0 93 1b 05 	sts	0x051B, r30
    1e28:	3e c0       	rjmp	.+124    	; 0x1ea6 <free+0x118>
    1e2a:	d9 01       	movw	r26, r18
    1e2c:	13 96       	adiw	r26, 0x03	; 3
    1e2e:	fc 93       	st	X, r31
    1e30:	ee 93       	st	-X, r30
    1e32:	12 97       	sbiw	r26, 0x02	; 2
    1e34:	4d 91       	ld	r20, X+
    1e36:	5d 91       	ld	r21, X+
    1e38:	a4 0f       	add	r26, r20
    1e3a:	b5 1f       	adc	r27, r21
    1e3c:	ea 17       	cp	r30, r26
    1e3e:	fb 07       	cpc	r31, r27
    1e40:	79 f4       	brne	.+30     	; 0x1e60 <free+0xd2>
    1e42:	80 81       	ld	r24, Z
    1e44:	91 81       	ldd	r25, Z+1	; 0x01
    1e46:	84 0f       	add	r24, r20
    1e48:	95 1f       	adc	r25, r21
    1e4a:	02 96       	adiw	r24, 0x02	; 2
    1e4c:	d9 01       	movw	r26, r18
    1e4e:	11 96       	adiw	r26, 0x01	; 1
    1e50:	9c 93       	st	X, r25
    1e52:	8e 93       	st	-X, r24
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	13 96       	adiw	r26, 0x03	; 3
    1e5a:	9c 93       	st	X, r25
    1e5c:	8e 93       	st	-X, r24
    1e5e:	12 97       	sbiw	r26, 0x02	; 2
    1e60:	e0 e0       	ldi	r30, 0x00	; 0
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	9b 81       	ldd	r25, Y+3	; 0x03
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	19 f0       	breq	.+6      	; 0x1e72 <free+0xe4>
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	ec 01       	movw	r28, r24
    1e70:	f9 cf       	rjmp	.-14     	; 0x1e64 <free+0xd6>
    1e72:	ce 01       	movw	r24, r28
    1e74:	02 96       	adiw	r24, 0x02	; 2
    1e76:	28 81       	ld	r18, Y
    1e78:	39 81       	ldd	r19, Y+1	; 0x01
    1e7a:	82 0f       	add	r24, r18
    1e7c:	93 1f       	adc	r25, r19
    1e7e:	20 91 19 05 	lds	r18, 0x0519
    1e82:	30 91 1a 05 	lds	r19, 0x051A
    1e86:	28 17       	cp	r18, r24
    1e88:	39 07       	cpc	r19, r25
    1e8a:	69 f4       	brne	.+26     	; 0x1ea6 <free+0x118>
    1e8c:	30 97       	sbiw	r30, 0x00	; 0
    1e8e:	29 f4       	brne	.+10     	; 0x1e9a <free+0x10c>
    1e90:	10 92 1c 05 	sts	0x051C, r1
    1e94:	10 92 1b 05 	sts	0x051B, r1
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <free+0x110>
    1e9a:	13 82       	std	Z+3, r1	; 0x03
    1e9c:	12 82       	std	Z+2, r1	; 0x02
    1e9e:	d0 93 1a 05 	sts	0x051A, r29
    1ea2:	c0 93 19 05 	sts	0x0519, r28
    1ea6:	df 91       	pop	r29
    1ea8:	cf 91       	pop	r28
    1eaa:	08 95       	ret

00001eac <strnlen_P>:
    1eac:	fc 01       	movw	r30, r24
    1eae:	05 90       	lpm	r0, Z+
    1eb0:	61 50       	subi	r22, 0x01	; 1
    1eb2:	70 40       	sbci	r23, 0x00	; 0
    1eb4:	01 10       	cpse	r0, r1
    1eb6:	d8 f7       	brcc	.-10     	; 0x1eae <strnlen_P+0x2>
    1eb8:	80 95       	com	r24
    1eba:	90 95       	com	r25
    1ebc:	8e 0f       	add	r24, r30
    1ebe:	9f 1f       	adc	r25, r31
    1ec0:	08 95       	ret

00001ec2 <memset>:
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	01 c0       	rjmp	.+2      	; 0x1ec8 <memset+0x6>
    1ec6:	6d 93       	st	X+, r22
    1ec8:	41 50       	subi	r20, 0x01	; 1
    1eca:	50 40       	sbci	r21, 0x00	; 0
    1ecc:	e0 f7       	brcc	.-8      	; 0x1ec6 <memset+0x4>
    1ece:	08 95       	ret

00001ed0 <strnlen>:
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	61 50       	subi	r22, 0x01	; 1
    1ed4:	70 40       	sbci	r23, 0x00	; 0
    1ed6:	01 90       	ld	r0, Z+
    1ed8:	01 10       	cpse	r0, r1
    1eda:	d8 f7       	brcc	.-10     	; 0x1ed2 <strnlen+0x2>
    1edc:	80 95       	com	r24
    1ede:	90 95       	com	r25
    1ee0:	8e 0f       	add	r24, r30
    1ee2:	9f 1f       	adc	r25, r31
    1ee4:	08 95       	ret

00001ee6 <fputc>:
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	18 2f       	mov	r17, r24
    1ef0:	09 2f       	mov	r16, r25
    1ef2:	eb 01       	movw	r28, r22
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	81 fd       	sbrc	r24, 1
    1ef8:	03 c0       	rjmp	.+6      	; 0x1f00 <fputc+0x1a>
    1efa:	8f ef       	ldi	r24, 0xFF	; 255
    1efc:	9f ef       	ldi	r25, 0xFF	; 255
    1efe:	20 c0       	rjmp	.+64     	; 0x1f40 <fputc+0x5a>
    1f00:	82 ff       	sbrs	r24, 2
    1f02:	10 c0       	rjmp	.+32     	; 0x1f24 <fputc+0x3e>
    1f04:	4e 81       	ldd	r20, Y+6	; 0x06
    1f06:	5f 81       	ldd	r21, Y+7	; 0x07
    1f08:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f0c:	42 17       	cp	r20, r18
    1f0e:	53 07       	cpc	r21, r19
    1f10:	7c f4       	brge	.+30     	; 0x1f30 <fputc+0x4a>
    1f12:	e8 81       	ld	r30, Y
    1f14:	f9 81       	ldd	r31, Y+1	; 0x01
    1f16:	9f 01       	movw	r18, r30
    1f18:	2f 5f       	subi	r18, 0xFF	; 255
    1f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1c:	39 83       	std	Y+1, r19	; 0x01
    1f1e:	28 83       	st	Y, r18
    1f20:	10 83       	st	Z, r17
    1f22:	06 c0       	rjmp	.+12     	; 0x1f30 <fputc+0x4a>
    1f24:	e8 85       	ldd	r30, Y+8	; 0x08
    1f26:	f9 85       	ldd	r31, Y+9	; 0x09
    1f28:	81 2f       	mov	r24, r17
    1f2a:	19 95       	eicall
    1f2c:	89 2b       	or	r24, r25
    1f2e:	29 f7       	brne	.-54     	; 0x1efa <fputc+0x14>
    1f30:	2e 81       	ldd	r18, Y+6	; 0x06
    1f32:	3f 81       	ldd	r19, Y+7	; 0x07
    1f34:	2f 5f       	subi	r18, 0xFF	; 255
    1f36:	3f 4f       	sbci	r19, 0xFF	; 255
    1f38:	3f 83       	std	Y+7, r19	; 0x07
    1f3a:	2e 83       	std	Y+6, r18	; 0x06
    1f3c:	81 2f       	mov	r24, r17
    1f3e:	90 2f       	mov	r25, r16
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	08 95       	ret

00001f4a <__ultoa_invert>:
    1f4a:	fa 01       	movw	r30, r20
    1f4c:	aa 27       	eor	r26, r26
    1f4e:	28 30       	cpi	r18, 0x08	; 8
    1f50:	51 f1       	breq	.+84     	; 0x1fa6 <__ultoa_invert+0x5c>
    1f52:	20 31       	cpi	r18, 0x10	; 16
    1f54:	81 f1       	breq	.+96     	; 0x1fb6 <__ultoa_invert+0x6c>
    1f56:	e8 94       	clt
    1f58:	6f 93       	push	r22
    1f5a:	6e 7f       	andi	r22, 0xFE	; 254
    1f5c:	6e 5f       	subi	r22, 0xFE	; 254
    1f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f60:	8f 4f       	sbci	r24, 0xFF	; 255
    1f62:	9f 4f       	sbci	r25, 0xFF	; 255
    1f64:	af 4f       	sbci	r26, 0xFF	; 255
    1f66:	b1 e0       	ldi	r27, 0x01	; 1
    1f68:	3e d0       	rcall	.+124    	; 0x1fe6 <__ultoa_invert+0x9c>
    1f6a:	b4 e0       	ldi	r27, 0x04	; 4
    1f6c:	3c d0       	rcall	.+120    	; 0x1fe6 <__ultoa_invert+0x9c>
    1f6e:	67 0f       	add	r22, r23
    1f70:	78 1f       	adc	r23, r24
    1f72:	89 1f       	adc	r24, r25
    1f74:	9a 1f       	adc	r25, r26
    1f76:	a1 1d       	adc	r26, r1
    1f78:	68 0f       	add	r22, r24
    1f7a:	79 1f       	adc	r23, r25
    1f7c:	8a 1f       	adc	r24, r26
    1f7e:	91 1d       	adc	r25, r1
    1f80:	a1 1d       	adc	r26, r1
    1f82:	6a 0f       	add	r22, r26
    1f84:	71 1d       	adc	r23, r1
    1f86:	81 1d       	adc	r24, r1
    1f88:	91 1d       	adc	r25, r1
    1f8a:	a1 1d       	adc	r26, r1
    1f8c:	20 d0       	rcall	.+64     	; 0x1fce <__ultoa_invert+0x84>
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <__ultoa_invert+0x48>
    1f90:	68 94       	set
    1f92:	3f 91       	pop	r19
    1f94:	2a e0       	ldi	r18, 0x0A	; 10
    1f96:	26 9f       	mul	r18, r22
    1f98:	11 24       	eor	r1, r1
    1f9a:	30 19       	sub	r19, r0
    1f9c:	30 5d       	subi	r19, 0xD0	; 208
    1f9e:	31 93       	st	Z+, r19
    1fa0:	de f6       	brtc	.-74     	; 0x1f58 <__ultoa_invert+0xe>
    1fa2:	cf 01       	movw	r24, r30
    1fa4:	08 95       	ret
    1fa6:	46 2f       	mov	r20, r22
    1fa8:	47 70       	andi	r20, 0x07	; 7
    1faa:	40 5d       	subi	r20, 0xD0	; 208
    1fac:	41 93       	st	Z+, r20
    1fae:	b3 e0       	ldi	r27, 0x03	; 3
    1fb0:	0f d0       	rcall	.+30     	; 0x1fd0 <__ultoa_invert+0x86>
    1fb2:	c9 f7       	brne	.-14     	; 0x1fa6 <__ultoa_invert+0x5c>
    1fb4:	f6 cf       	rjmp	.-20     	; 0x1fa2 <__ultoa_invert+0x58>
    1fb6:	46 2f       	mov	r20, r22
    1fb8:	4f 70       	andi	r20, 0x0F	; 15
    1fba:	40 5d       	subi	r20, 0xD0	; 208
    1fbc:	4a 33       	cpi	r20, 0x3A	; 58
    1fbe:	18 f0       	brcs	.+6      	; 0x1fc6 <__ultoa_invert+0x7c>
    1fc0:	49 5d       	subi	r20, 0xD9	; 217
    1fc2:	31 fd       	sbrc	r19, 1
    1fc4:	40 52       	subi	r20, 0x20	; 32
    1fc6:	41 93       	st	Z+, r20
    1fc8:	02 d0       	rcall	.+4      	; 0x1fce <__ultoa_invert+0x84>
    1fca:	a9 f7       	brne	.-22     	; 0x1fb6 <__ultoa_invert+0x6c>
    1fcc:	ea cf       	rjmp	.-44     	; 0x1fa2 <__ultoa_invert+0x58>
    1fce:	b4 e0       	ldi	r27, 0x04	; 4
    1fd0:	a6 95       	lsr	r26
    1fd2:	97 95       	ror	r25
    1fd4:	87 95       	ror	r24
    1fd6:	77 95       	ror	r23
    1fd8:	67 95       	ror	r22
    1fda:	ba 95       	dec	r27
    1fdc:	c9 f7       	brne	.-14     	; 0x1fd0 <__ultoa_invert+0x86>
    1fde:	00 97       	sbiw	r24, 0x00	; 0
    1fe0:	61 05       	cpc	r22, r1
    1fe2:	71 05       	cpc	r23, r1
    1fe4:	08 95       	ret
    1fe6:	9b 01       	movw	r18, r22
    1fe8:	ac 01       	movw	r20, r24
    1fea:	0a 2e       	mov	r0, r26
    1fec:	06 94       	lsr	r0
    1fee:	57 95       	ror	r21
    1ff0:	47 95       	ror	r20
    1ff2:	37 95       	ror	r19
    1ff4:	27 95       	ror	r18
    1ff6:	ba 95       	dec	r27
    1ff8:	c9 f7       	brne	.-14     	; 0x1fec <__ultoa_invert+0xa2>
    1ffa:	62 0f       	add	r22, r18
    1ffc:	73 1f       	adc	r23, r19
    1ffe:	84 1f       	adc	r24, r20
    2000:	95 1f       	adc	r25, r21
    2002:	a0 1d       	adc	r26, r0
    2004:	08 95       	ret

00002006 <_exit>:
    2006:	f8 94       	cli

00002008 <__stop_program>:
    2008:	ff cf       	rjmp	.-2      	; 0x2008 <__stop_program>
