
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000182  00800200  00001ca2  00001d36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ca2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800382  00800382  00001eb8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000388  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000029be  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001435  00000000  00000000  00004c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000039aa  00000000  00000000  0000608f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000088c  00000000  00000000  00009a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00012e43  00000000  00000000  0000a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001605  00000000  00000000  0001d10b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a0  00000000  00000000  0001e710  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00005190  00000000  00000000  0001e9b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	09 c1       	rjmp	.+530    	; 0x22c <__vector_6>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	c3 c1       	rjmp	.+902    	; 0x3dc <__vector_21>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	9a c6       	rjmp	.+3380   	; 0xdd2 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	04 07       	cpc	r16, r20
      e6:	56 07       	cpc	r21, r22
      e8:	56 07       	cpc	r21, r22
      ea:	56 07       	cpc	r21, r22
      ec:	56 07       	cpc	r21, r22
      ee:	56 07       	cpc	r21, r22
      f0:	56 07       	cpc	r21, r22
      f2:	56 07       	cpc	r21, r22
      f4:	04 07       	cpc	r16, r20
      f6:	56 07       	cpc	r21, r22
      f8:	56 07       	cpc	r21, r22
      fa:	56 07       	cpc	r21, r22
      fc:	56 07       	cpc	r21, r22
      fe:	56 07       	cpc	r21, r22
     100:	56 07       	cpc	r21, r22
     102:	56 07       	cpc	r21, r22
     104:	06 07       	cpc	r16, r22
     106:	56 07       	cpc	r21, r22
     108:	56 07       	cpc	r21, r22
     10a:	56 07       	cpc	r21, r22
     10c:	56 07       	cpc	r21, r22
     10e:	56 07       	cpc	r21, r22
     110:	56 07       	cpc	r21, r22
     112:	56 07       	cpc	r21, r22
     114:	56 07       	cpc	r21, r22
     116:	56 07       	cpc	r21, r22
     118:	56 07       	cpc	r21, r22
     11a:	56 07       	cpc	r21, r22
     11c:	56 07       	cpc	r21, r22
     11e:	56 07       	cpc	r21, r22
     120:	56 07       	cpc	r21, r22
     122:	56 07       	cpc	r21, r22
     124:	06 07       	cpc	r16, r22
     126:	56 07       	cpc	r21, r22
     128:	56 07       	cpc	r21, r22
     12a:	56 07       	cpc	r21, r22
     12c:	56 07       	cpc	r21, r22
     12e:	56 07       	cpc	r21, r22
     130:	56 07       	cpc	r21, r22
     132:	56 07       	cpc	r21, r22
     134:	56 07       	cpc	r21, r22
     136:	56 07       	cpc	r21, r22
     138:	56 07       	cpc	r21, r22
     13a:	56 07       	cpc	r21, r22
     13c:	56 07       	cpc	r21, r22
     13e:	56 07       	cpc	r21, r22
     140:	56 07       	cpc	r21, r22
     142:	56 07       	cpc	r21, r22
     144:	52 07       	cpc	r21, r18
     146:	56 07       	cpc	r21, r22
     148:	56 07       	cpc	r21, r22
     14a:	56 07       	cpc	r21, r22
     14c:	56 07       	cpc	r21, r22
     14e:	56 07       	cpc	r21, r22
     150:	56 07       	cpc	r21, r22
     152:	56 07       	cpc	r21, r22
     154:	2f 07       	cpc	r18, r31
     156:	56 07       	cpc	r21, r22
     158:	56 07       	cpc	r21, r22
     15a:	56 07       	cpc	r21, r22
     15c:	56 07       	cpc	r21, r22
     15e:	56 07       	cpc	r21, r22
     160:	56 07       	cpc	r21, r22
     162:	56 07       	cpc	r21, r22
     164:	56 07       	cpc	r21, r22
     166:	56 07       	cpc	r21, r22
     168:	56 07       	cpc	r21, r22
     16a:	56 07       	cpc	r21, r22
     16c:	56 07       	cpc	r21, r22
     16e:	56 07       	cpc	r21, r22
     170:	56 07       	cpc	r21, r22
     172:	56 07       	cpc	r21, r22
     174:	23 07       	cpc	r18, r19
     176:	56 07       	cpc	r21, r22
     178:	56 07       	cpc	r21, r22
     17a:	56 07       	cpc	r21, r22
     17c:	56 07       	cpc	r21, r22
     17e:	56 07       	cpc	r21, r22
     180:	56 07       	cpc	r21, r22
     182:	56 07       	cpc	r21, r22
     184:	41 07       	cpc	r20, r17

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	13 e0       	ldi	r17, 0x03	; 3
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e2 ea       	ldi	r30, 0xA2	; 162
     19e:	fc e1       	ldi	r31, 0x1C	; 28
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a2 38       	cpi	r26, 0x82	; 130
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	23 e0       	ldi	r18, 0x03	; 3
     1b2:	a2 e8       	ldi	r26, 0x82	; 130
     1b4:	b3 e0       	ldi	r27, 0x03	; 3
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	ae 3a       	cpi	r26, 0xAE	; 174
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	b9 d6       	rcall	.+3442   	; 0xf34 <main>
     1c2:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <ADC_init>:
#include "defines.h"
#include "ADC.h"


void ADC_init(void){
	set_bit(ADCSRA, ADEN); //Enables the ADC
     1c8:	ea e7       	ldi	r30, 0x7A	; 122
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	80 83       	st	Z, r24
	//Use a prescaler to determine the frequency of successive approximation (ADPS bit in ADCSRA) (we used 128)
	set_bit(ADCSRA, ADPS2);
     1d2:	80 81       	ld	r24, Z
     1d4:	84 60       	ori	r24, 0x04	; 4
     1d6:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS1);	
     1d8:	80 81       	ld	r24, Z
     1da:	82 60       	ori	r24, 0x02	; 2
     1dc:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS0);					
     1de:	80 81       	ld	r24, Z
     1e0:	81 60       	ori	r24, 0x01	; 1
     1e2:	80 83       	st	Z, r24
	set_bit(ADMUX, REFS0); //Voltage reference: AVCC with external capacitor at AREF pin (Table 26-3)
     1e4:	ec e7       	ldi	r30, 0x7C	; 124
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	80 64       	ori	r24, 0x40	; 64
     1ec:	80 83       	st	Z, r24
     1ee:	08 95       	ret

000001f0 <CAN_int_vect>:
	}
	MCP2515_bit_modify(MCP_CANCTRL,0xE0, 0x00);
	
	printf("ERROR FLAGS: %x\n", MCP2515_read(MCP_EFLG));
	
}
     1f0:	cf 93       	push	r28
     1f2:	8c e2       	ldi	r24, 0x2C	; 44
     1f4:	73 d1       	rcall	.+742    	; 0x4dc <MCP2515_read>
     1f6:	c8 2f       	mov	r28, r24
     1f8:	80 ff       	sbrs	r24, 0
     1fa:	0a c0       	rjmp	.+20     	; 0x210 <CAN_int_vect+0x20>
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	8c e2       	ldi	r24, 0x2C	; 44
     202:	79 d1       	rcall	.+754    	; 0x4f6 <MCP2515_bit_modify>
     204:	21 e0       	ldi	r18, 0x01	; 1
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	30 93 85 03 	sts	0x0385, r19
     20c:	20 93 84 03 	sts	0x0384, r18
     210:	c1 ff       	sbrs	r28, 1
     212:	0a c0       	rjmp	.+20     	; 0x228 <CAN_int_vect+0x38>
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	62 e0       	ldi	r22, 0x02	; 2
     218:	8c e2       	ldi	r24, 0x2C	; 44
     21a:	6d d1       	rcall	.+730    	; 0x4f6 <MCP2515_bit_modify>
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	90 93 83 03 	sts	0x0383, r25
     224:	80 93 82 03 	sts	0x0382, r24
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <__vector_6>:
     22c:	1f 92       	push	r1
     22e:	0f 92       	push	r0
     230:	0f b6       	in	r0, 0x3f	; 63
     232:	0f 92       	push	r0
     234:	11 24       	eor	r1, r1
     236:	0b b6       	in	r0, 0x3b	; 59
     238:	0f 92       	push	r0
     23a:	2f 93       	push	r18
     23c:	3f 93       	push	r19
     23e:	4f 93       	push	r20
     240:	5f 93       	push	r21
     242:	6f 93       	push	r22
     244:	7f 93       	push	r23
     246:	8f 93       	push	r24
     248:	9f 93       	push	r25
     24a:	af 93       	push	r26
     24c:	bf 93       	push	r27
     24e:	ef 93       	push	r30
     250:	ff 93       	push	r31
     252:	ce df       	rcall	.-100    	; 0x1f0 <CAN_int_vect>
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	bf 91       	pop	r27
     25a:	af 91       	pop	r26
     25c:	9f 91       	pop	r25
     25e:	8f 91       	pop	r24
     260:	7f 91       	pop	r23
     262:	6f 91       	pop	r22
     264:	5f 91       	pop	r21
     266:	4f 91       	pop	r20
     268:	3f 91       	pop	r19
     26a:	2f 91       	pop	r18
     26c:	0f 90       	pop	r0
     26e:	0b be       	out	0x3b, r0	; 59
     270:	0f 90       	pop	r0
     272:	0f be       	out	0x3f, r0	; 63
     274:	0f 90       	pop	r0
     276:	1f 90       	pop	r1
     278:	18 95       	reti

0000027a <CAN_init>:
     27a:	ed 98       	cbi	0x1d, 5	; 29
     27c:	ea e6       	ldi	r30, 0x6A	; 106
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	87 7f       	andi	r24, 0xF7	; 247
     284:	80 83       	st	Z, r24
     286:	80 81       	ld	r24, Z
     288:	8b 7f       	andi	r24, 0xFB	; 251
     28a:	80 83       	st	Z, r24
     28c:	ed 9a       	sbi	0x1d, 5	; 29
     28e:	4c d1       	rcall	.+664    	; 0x528 <MCP2515_init>
     290:	4f ef       	ldi	r20, 0xFF	; 255
     292:	64 e6       	ldi	r22, 0x64	; 100
     294:	80 e6       	ldi	r24, 0x60	; 96
     296:	2f d1       	rcall	.+606    	; 0x4f6 <MCP2515_bit_modify>
     298:	4f ef       	ldi	r20, 0xFF	; 255
     29a:	60 e6       	ldi	r22, 0x60	; 96
     29c:	80 e7       	ldi	r24, 0x70	; 112
     29e:	2b d1       	rcall	.+598    	; 0x4f6 <MCP2515_bit_modify>
     2a0:	43 e0       	ldi	r20, 0x03	; 3
     2a2:	63 e0       	ldi	r22, 0x03	; 3
     2a4:	8b e2       	ldi	r24, 0x2B	; 43
     2a6:	27 d1       	rcall	.+590    	; 0x4f6 <MCP2515_bit_modify>
     2a8:	40 e0       	ldi	r20, 0x00	; 0
     2aa:	60 ee       	ldi	r22, 0xE0	; 224
     2ac:	8f e0       	ldi	r24, 0x0F	; 15
     2ae:	23 c1       	rjmp	.+582    	; 0x4f6 <MCP2515_bit_modify>
     2b0:	08 95       	ret

000002b2 <CAN_data_receive>:
     2b2:	df 92       	push	r13
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	8c 01       	movw	r16, r24
     2c2:	f8 94       	cli
     2c4:	80 91 84 03 	lds	r24, 0x0384
     2c8:	90 91 85 03 	lds	r25, 0x0385
     2cc:	89 2b       	or	r24, r25
     2ce:	39 f0       	breq	.+14     	; 0x2de <CAN_data_receive+0x2c>
     2d0:	10 92 85 03 	sts	0x0385, r1
     2d4:	10 92 84 03 	sts	0x0384, r1
     2d8:	c0 e0       	ldi	r28, 0x00	; 0
     2da:	d0 e0       	ldi	r29, 0x00	; 0
     2dc:	11 c0       	rjmp	.+34     	; 0x300 <CAN_data_receive+0x4e>
     2de:	80 91 82 03 	lds	r24, 0x0382
     2e2:	90 91 83 03 	lds	r25, 0x0383
     2e6:	89 2b       	or	r24, r25
     2e8:	39 f0       	breq	.+14     	; 0x2f8 <CAN_data_receive+0x46>
     2ea:	10 92 83 03 	sts	0x0383, r1
     2ee:	10 92 82 03 	sts	0x0382, r1
     2f2:	c1 e0       	ldi	r28, 0x01	; 1
     2f4:	d0 e0       	ldi	r29, 0x00	; 0
     2f6:	04 c0       	rjmp	.+8      	; 0x300 <CAN_data_receive+0x4e>
     2f8:	f8 01       	movw	r30, r16
     2fa:	12 82       	std	Z+2, r1	; 0x02
     2fc:	78 94       	sei
     2fe:	3e c0       	rjmp	.+124    	; 0x37c <CAN_data_receive+0xca>
     300:	fc 2e       	mov	r15, r28
     302:	ff 0c       	add	r15, r15
     304:	ff 0c       	add	r15, r15
     306:	ff 0c       	add	r15, r15
     308:	ff 0c       	add	r15, r15
     30a:	81 e6       	ldi	r24, 0x61	; 97
     30c:	8f 0d       	add	r24, r15
     30e:	e6 d0       	rcall	.+460    	; 0x4dc <MCP2515_read>
     310:	e8 2e       	mov	r14, r24
     312:	82 e6       	ldi	r24, 0x62	; 98
     314:	8f 0d       	add	r24, r15
     316:	e2 d0       	rcall	.+452    	; 0x4dc <MCP2515_read>
     318:	2e 2d       	mov	r18, r14
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	22 0f       	add	r18, r18
     31e:	33 1f       	adc	r19, r19
     320:	22 0f       	add	r18, r18
     322:	33 1f       	adc	r19, r19
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	82 95       	swap	r24
     32a:	86 95       	lsr	r24
     32c:	87 70       	andi	r24, 0x07	; 7
     32e:	28 0f       	add	r18, r24
     330:	31 1d       	adc	r19, r1
     332:	f8 01       	movw	r30, r16
     334:	31 83       	std	Z+1, r19	; 0x01
     336:	20 83       	st	Z, r18
     338:	85 e6       	ldi	r24, 0x65	; 101
     33a:	8f 0d       	add	r24, r15
     33c:	cf d0       	rcall	.+414    	; 0x4dc <MCP2515_read>
     33e:	87 70       	andi	r24, 0x07	; 7
     340:	f8 01       	movw	r30, r16
     342:	82 83       	std	Z+2, r24	; 0x02
     344:	88 23       	and	r24, r24
     346:	c9 f0       	breq	.+50     	; 0x37a <CAN_data_receive+0xc8>
     348:	7e 01       	movw	r14, r28
     34a:	ee 0c       	add	r14, r14
     34c:	ff 1c       	adc	r15, r15
     34e:	ee 0c       	add	r14, r14
     350:	ff 1c       	adc	r15, r15
     352:	ee 0c       	add	r14, r14
     354:	ff 1c       	adc	r15, r15
     356:	ee 0c       	add	r14, r14
     358:	ff 1c       	adc	r15, r15
     35a:	d1 2c       	mov	r13, r1
     35c:	cd 2d       	mov	r28, r13
     35e:	d0 e0       	ldi	r29, 0x00	; 0
     360:	ce 01       	movw	r24, r28
     362:	8a 59       	subi	r24, 0x9A	; 154
     364:	9f 4f       	sbci	r25, 0xFF	; 255
     366:	8e 0d       	add	r24, r14
     368:	b9 d0       	rcall	.+370    	; 0x4dc <MCP2515_read>
     36a:	c0 0f       	add	r28, r16
     36c:	d1 1f       	adc	r29, r17
     36e:	8b 83       	std	Y+3, r24	; 0x03
     370:	d3 94       	inc	r13
     372:	f8 01       	movw	r30, r16
     374:	82 81       	ldd	r24, Z+2	; 0x02
     376:	d8 16       	cp	r13, r24
     378:	88 f3       	brcs	.-30     	; 0x35c <CAN_data_receive+0xaa>
     37a:	78 94       	sei
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	ff 90       	pop	r15
     386:	ef 90       	pop	r14
     388:	df 90       	pop	r13
     38a:	08 95       	ret

0000038c <receive_control_inputs>:

can_message receive_control_inputs(void){
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	2b 97       	sbiw	r28, 0x0b	; 11
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	8c 01       	movw	r16, r24
	can_message msg;
	msg.length = 0;
     3a6:	1b 82       	std	Y+3, r1	; 0x03
	
	while (!msg.length) {
		CAN_data_receive(&msg);
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	82 df       	rcall	.-252    	; 0x2b2 <CAN_data_receive>

can_message receive_control_inputs(void){
	can_message msg;
	msg.length = 0;
	
	while (!msg.length) {
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	88 23       	and	r24, r24
     3b2:	d1 f3       	breq	.-12     	; 0x3a8 <receive_control_inputs+0x1c>
		CAN_data_receive(&msg);
	}
	return msg;
     3b4:	8b e0       	ldi	r24, 0x0B	; 11
     3b6:	fe 01       	movw	r30, r28
     3b8:	31 96       	adiw	r30, 0x01	; 1
     3ba:	d8 01       	movw	r26, r16
     3bc:	01 90       	ld	r0, Z+
     3be:	0d 92       	st	X+, r0
     3c0:	8a 95       	dec	r24
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <receive_control_inputs+0x30>
     3c4:	c8 01       	movw	r24, r16
     3c6:	2b 96       	adiw	r28, 0x0b	; 11
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	08 95       	ret

000003dc <__vector_21>:

volatile int timer_flag;


// Set the timer_flag when the timer has counted to OCR0A
ISR(TIMER0_COMPA_vect){
     3dc:	1f 92       	push	r1
     3de:	0f 92       	push	r0
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	0f 92       	push	r0
     3e4:	11 24       	eor	r1, r1
     3e6:	8f 93       	push	r24
     3e8:	9f 93       	push	r25
	timer_flag = 1;
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	90 93 93 03 	sts	0x0393, r25
     3f2:	80 93 92 03 	sts	0x0392, r24
}
     3f6:	9f 91       	pop	r25
     3f8:	8f 91       	pop	r24
     3fa:	0f 90       	pop	r0
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	0f 90       	pop	r0
     400:	1f 90       	pop	r1
     402:	18 95       	reti

00000404 <CONTROL_init>:


// Initializes timer
void CONTROL_init(void) {
	// CTC mode (count until you reach a target clock count, then the interrupt is activated) [Table 16-8]
	set_bit(TCCR0A, WGM01);
     404:	84 b5       	in	r24, 0x24	; 36
     406:	82 60       	ori	r24, 0x02	; 2
     408:	84 bd       	out	0x24, r24	; 36
		
	// Prescaler 1024 [Table 16-9]
	set_bit(TCCR0B, CS00);
     40a:	85 b5       	in	r24, 0x25	; 37
     40c:	81 60       	ori	r24, 0x01	; 1
     40e:	85 bd       	out	0x25, r24	; 37
	set_bit(TCCR0B, CS02);
     410:	85 b5       	in	r24, 0x25	; 37
     412:	84 60       	ori	r24, 0x04	; 4
     414:	85 bd       	out	0x25, r24	; 37
		
	// 66.67 Hz timer, assuming 16MHz clock.
	OCR0A = 234;
     416:	8a ee       	ldi	r24, 0xEA	; 234
     418:	87 bd       	out	0x27, r24	; 39
		
	// Make sure the counter resets upon reaching its target (OCR0A). Enables interrupts [16.9.6]
	set_bit(TIMSK0, OCIE0A);
     41a:	ee e6       	ldi	r30, 0x6E	; 110
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	82 60       	ori	r24, 0x02	; 2
     422:	80 83       	st	Z, r24
     424:	08 95       	ret

00000426 <CONTROL_run>:
}


void CONTROL_run(control control_type) {
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
     42e:	2b 97       	sbiw	r28, 0x0b	; 11
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	08 2f       	mov	r16, r24
	while(1) {
		can_message control_inputs = receive_control_inputs();
     43c:	ce 01       	movw	r24, r28
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	a5 df       	rcall	.-182    	; 0x38c <receive_control_inputs>
		int8_t velocity_reference = control_inputs.data[JOYSTICK_X];
     442:	1c 81       	ldd	r17, Y+4	; 0x04
		uint8_t slider_left = control_inputs.data[SLIDER_LEFT];
		uint8_t slider_right = control_inputs.data[SLIDER_RIGHT];
		
		uint8_t buttons = control_inputs.data[BUTTONS];
		if(buttons & (1 << JOY_BUTTON)){
     444:	98 85       	ldd	r25, Y+8	; 0x08
     446:	92 ff       	sbrs	r25, 2
     448:	0a c0       	rjmp	.+20     	; 0x45e <CONTROL_run+0x38>
			solenoid_send_pulse();
     44a:	1c d4       	rcall	.+2104   	; 0xc84 <solenoid_send_pulse>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     44c:	2f ef       	ldi	r18, 0xFF	; 255
     44e:	83 ec       	ldi	r24, 0xC3	; 195
     450:	99 e0       	ldi	r25, 0x09	; 9
     452:	21 50       	subi	r18, 0x01	; 1
     454:	80 40       	sbci	r24, 0x00	; 0
     456:	90 40       	sbci	r25, 0x00	; 0
     458:	e1 f7       	brne	.-8      	; 0x452 <CONTROL_run+0x2c>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <CONTROL_run+0x36>
     45c:	00 00       	nop
			_delay_ms(200);
		}
		
		if (timer_flag) {
     45e:	20 91 92 03 	lds	r18, 0x0392
     462:	30 91 93 03 	lds	r19, 0x0393
     466:	23 2b       	or	r18, r19
     468:	49 f3       	breq	.-46     	; 0x43c <CONTROL_run+0x16>
			timer_flag = 0;
     46a:	10 92 93 03 	sts	0x0393, r1
     46e:	10 92 92 03 	sts	0x0392, r1
			switch (control_type) {
     472:	00 23       	and	r16, r16
     474:	19 f0       	breq	.+6      	; 0x47c <CONTROL_run+0x56>
     476:	01 30       	cpi	r16, 0x01	; 1
     478:	39 f0       	breq	.+14     	; 0x488 <CONTROL_run+0x62>
     47a:	e0 cf       	rjmp	.-64     	; 0x43c <CONTROL_run+0x16>
				case OPEN_LOOP: 
				motor_set_velocity(velocity_reference); 
     47c:	81 2f       	mov	r24, r17
     47e:	99 27       	eor	r25, r25
     480:	87 fd       	sbrc	r24, 7
     482:	90 95       	com	r25
     484:	7d d0       	rcall	.+250    	; 0x580 <motor_set_velocity>
				break;
     486:	da cf       	rjmp	.-76     	; 0x43c <CONTROL_run+0x16>
				
				case CLOSED_LOOP: 
				PI_control(velocity_reference);
     488:	61 2f       	mov	r22, r17
     48a:	77 27       	eor	r23, r23
     48c:	67 fd       	sbrc	r22, 7
     48e:	70 95       	com	r23
     490:	87 2f       	mov	r24, r23
     492:	97 2f       	mov	r25, r23
     494:	5c d6       	rcall	.+3256   	; 0x114e <__floatsisf>
     496:	1f d3       	rcall	.+1598   	; 0xad6 <PI_control>
			}
		}
	}
     498:	d1 cf       	rjmp	.-94     	; 0x43c <CONTROL_run+0x16>

0000049a <IR_init>:

#define DISRUPTION_THRESHOLD 10
#define MOVING_AVERAGE_SIZE 4

void IR_init(void) {
	ADC_init();
     49a:	96 ce       	rjmp	.-724    	; 0x1c8 <ADC_init>
     49c:	08 95       	ret

0000049e <MAX520_init>:


uint8_t max520_address = 0x00;


void MAX520_init(uint8_t three_bit_adress){
     49e:	cf 93       	push	r28
     4a0:	c8 2f       	mov	r28, r24
	TWI_Master_Initialise(); //Initialize TWI for transferring
     4a2:	6b d4       	rcall	.+2262   	; 0xd7a <TWI_Master_Initialise>
	sei();
     4a4:	78 94       	sei
	max520_address = MAX520_ADDRESS_BASE + (three_bit_adress << 1); //Set the correct address for the TWI bus
     4a6:	cc 0f       	add	r28, r28
     4a8:	c0 5b       	subi	r28, 0xB0	; 176
     4aa:	c0 93 86 03 	sts	0x0386, r28
}
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <MAX520_send>:


// Channel must be between 0 and 3 (DAC0 - DAC3)
void MAX520_send(uint8_t channel, uint8_t data){
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <MAX520_send+0x6>
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
	//Message has the following format {address, command, output}
	uint8_t message[MAX520_MESSAGE_SIZE] = {
     4bc:	90 91 86 03 	lds	r25, 0x0386
     4c0:	99 83       	std	Y+1, r25	; 0x01
     4c2:	88 0f       	add	r24, r24
     4c4:	8a 83       	std	Y+2, r24	; 0x02
     4c6:	6b 83       	std	Y+3, r22	; 0x03
		0x00 + (channel << 1), 
		data
	};
	
	//Send the data over TWI
	TWI_Start_Transceiver_With_Data(message, MAX520_MESSAGE_SIZE);	
     4c8:	63 e0       	ldi	r22, 0x03	; 3
     4ca:	ce 01       	movw	r24, r28
     4cc:	01 96       	adiw	r24, 0x01	; 1
     4ce:	5f d4       	rcall	.+2238   	; 0xd8e <TWI_Start_Transceiver_With_Data>
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	08 95       	ret

000004dc <MCP2515_read>:
//Buffer states: three bit, setting a 1 on the buffer initiates transmitting from it 
void MCP2515_request_to_send(uint8_t buffer_states) {
	SPI_select();
	SPI_send(RTS_BASE+buffer_states);
	SPI_deselect();
}
     4dc:	cf 93       	push	r28
     4de:	c8 2f       	mov	r28, r24
     4e0:	f7 d3       	rcall	.+2030   	; 0xcd0 <SPI_select>
     4e2:	83 e0       	ldi	r24, 0x03	; 3
     4e4:	e9 d3       	rcall	.+2002   	; 0xcb8 <SPI_send>
     4e6:	8c 2f       	mov	r24, r28
     4e8:	e7 d3       	rcall	.+1998   	; 0xcb8 <SPI_send>
     4ea:	eb d3       	rcall	.+2006   	; 0xcc2 <SPI_read>
     4ec:	c8 2f       	mov	r28, r24
     4ee:	f2 d3       	rcall	.+2020   	; 0xcd4 <SPI_deselect>
     4f0:	8c 2f       	mov	r24, r28
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <MCP2515_bit_modify>:

//puts new_data in the selected reg_adress. the function assumes that you are allowed to change every bit in the register
void MCP2515_bit_modify(uint8_t reg_address, uint8_t masked_bits, uint8_t new_data) {
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	18 2f       	mov	r17, r24
     4fe:	d6 2f       	mov	r29, r22
     500:	c4 2f       	mov	r28, r20
	SPI_select();
     502:	e6 d3       	rcall	.+1996   	; 0xcd0 <SPI_select>
	SPI_send(BIT_MODIFY);
     504:	85 e0       	ldi	r24, 0x05	; 5
     506:	d8 d3       	rcall	.+1968   	; 0xcb8 <SPI_send>
	SPI_send(reg_address);
     508:	81 2f       	mov	r24, r17
     50a:	d6 d3       	rcall	.+1964   	; 0xcb8 <SPI_send>
	SPI_send(masked_bits);
     50c:	8d 2f       	mov	r24, r29
     50e:	d4 d3       	rcall	.+1960   	; 0xcb8 <SPI_send>
	SPI_send(new_data);
     510:	8c 2f       	mov	r24, r28
     512:	d2 d3       	rcall	.+1956   	; 0xcb8 <SPI_send>
	SPI_deselect();
     514:	df d3       	rcall	.+1982   	; 0xcd4 <SPI_deselect>
}
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	08 95       	ret

0000051e <MCP2515_reset>:

void MCP2515_reset(void) {
	SPI_select();
     51e:	d8 d3       	rcall	.+1968   	; 0xcd0 <SPI_select>
	SPI_send(RESET);
     520:	80 ec       	ldi	r24, 0xC0	; 192
     522:	ca d3       	rcall	.+1940   	; 0xcb8 <SPI_send>
	SPI_deselect();
     524:	d7 c3       	rjmp	.+1966   	; 0xcd4 <SPI_deselect>
     526:	08 95       	ret

00000528 <MCP2515_init>:
#define BIT_MODIFY 0x05
#define RTS_BASE 0x80


uint8_t MCP2515_init(void) {
	SPI_init();
     528:	b9 d3       	rcall	.+1906   	; 0xc9c <SPI_init>
	MCP2515_reset();
     52a:	f9 df       	rcall	.-14     	; 0x51e <MCP2515_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     52c:	8f e8       	ldi	r24, 0x8F	; 143
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	01 97       	sbiw	r24, 0x01	; 1
     532:	f1 f7       	brne	.-4      	; 0x530 <MCP2515_init+0x8>
     534:	00 c0       	rjmp	.+0      	; 0x536 <MCP2515_init+0xe>
     536:	00 00       	nop
	
	_delay_us(100); //why oh why
	//check bit 7-5 of MCP_CANSTAT which signify the operation mode
	const uint8_t device_mode = MCP2515_read(MCP_CANSTAT) & MODE_MASK;
     538:	8e e0       	ldi	r24, 0x0E	; 14
     53a:	d0 df       	rcall	.-96     	; 0x4dc <MCP2515_read>
     53c:	80 7e       	andi	r24, 0xE0	; 224

	if (device_mode != MODE_CONFIG) {
     53e:	80 38       	cpi	r24, 0x80	; 128
     540:	29 f0       	breq	.+10     	; 0x54c <MCP2515_init+0x24>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
     542:	8b e1       	ldi	r24, 0x1B	; 27
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	a2 d7       	rcall	.+3908   	; 0x148c <puts>
		return 1;
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	08 95       	ret
	}
	
	return 0;
     54c:	80 e0       	ldi	r24, 0x00	; 0
}
     54e:	08 95       	ret

00000550 <motor_enable>:
void motor_enable(void) {
	set_bit(MJ1, EN);
}

void motor_disable(void) {
	clear_bit(MJ1, EN);
     550:	e2 e0       	ldi	r30, 0x02	; 2
     552:	f1 e0       	ldi	r31, 0x01	; 1
     554:	80 81       	ld	r24, Z
     556:	80 61       	ori	r24, 0x10	; 16
     558:	80 83       	st	Z, r24
     55a:	08 95       	ret

0000055c <motor_set_direction>:
	motor_set_direction(motor_direction);
	motor_set_speed(motor_speed * MOTOR_GAIN);
}

void motor_set_direction(direction motor_direction) {
	(motor_direction == LEFT) ? clear_bit(MJ1, DIR) : set_bit(MJ1, DIR);
     55c:	81 11       	cpse	r24, r1
     55e:	06 c0       	rjmp	.+12     	; 0x56c <motor_set_direction+0x10>
     560:	e2 e0       	ldi	r30, 0x02	; 2
     562:	f1 e0       	ldi	r31, 0x01	; 1
     564:	80 81       	ld	r24, Z
     566:	8d 7f       	andi	r24, 0xFD	; 253
     568:	80 83       	st	Z, r24
     56a:	08 95       	ret
     56c:	e2 e0       	ldi	r30, 0x02	; 2
     56e:	f1 e0       	ldi	r31, 0x01	; 1
     570:	80 81       	ld	r24, Z
     572:	82 60       	ori	r24, 0x02	; 2
     574:	80 83       	st	Z, r24
     576:	08 95       	ret

00000578 <motor_set_speed>:
}

void motor_set_speed(uint8_t motor_speed) {
	MAX520_send(MOTOR_SPEED_CHANNEL, motor_speed);
     578:	68 2f       	mov	r22, r24
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	9a cf       	rjmp	.-204    	; 0x4b2 <MAX520_send>
     57e:	08 95       	ret

00000580 <motor_set_velocity>:

void motor_disable(void) {
	clear_bit(MJ1, EN);
}

void motor_set_velocity(int16_t motor_velocity) { // u
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
	
	// Find the motor direction. Negative velocity corresponds to left.
	direction motor_direction = (motor_velocity < 0) ? LEFT : RIGHT;
	
	// Speed is in absolute value. Make sure it is not greater than 100.
	motor_velocity = SATURATE(motor_velocity, -100, 100);
     584:	c8 2f       	mov	r28, r24
     586:	d9 2f       	mov	r29, r25
     588:	cc 39       	cpi	r28, 0x9C	; 156
     58a:	8f ef       	ldi	r24, 0xFF	; 255
     58c:	d8 07       	cpc	r29, r24
     58e:	14 f4       	brge	.+4      	; 0x594 <motor_set_velocity+0x14>
     590:	cc e9       	ldi	r28, 0x9C	; 156
     592:	df ef       	ldi	r29, 0xFF	; 255
}

void motor_set_velocity(int16_t motor_velocity) { // u
	
	// Find the motor direction. Negative velocity corresponds to left.
	direction motor_direction = (motor_velocity < 0) ? LEFT : RIGHT;
     594:	89 2f       	mov	r24, r25
     596:	80 95       	com	r24
	// Speed is in absolute value. Make sure it is not greater than 100.
	motor_velocity = SATURATE(motor_velocity, -100, 100);
	uint8_t motor_speed = abs(motor_velocity);
	
	// Set direction and speed of motor.
	motor_set_direction(motor_direction);
     598:	88 1f       	adc	r24, r24
     59a:	88 27       	eor	r24, r24
     59c:	88 1f       	adc	r24, r24
     59e:	de df       	rcall	.-68     	; 0x55c <motor_set_direction>
     5a0:	c5 36       	cpi	r28, 0x65	; 101
     5a2:	d1 05       	cpc	r29, r1
     5a4:	14 f0       	brlt	.+4      	; 0x5aa <motor_set_velocity+0x2a>
     5a6:	c4 e6       	ldi	r28, 0x64	; 100
     5a8:	d0 e0       	ldi	r29, 0x00	; 0
	// Find the motor direction. Negative velocity corresponds to left.
	direction motor_direction = (motor_velocity < 0) ? LEFT : RIGHT;
	
	// Speed is in absolute value. Make sure it is not greater than 100.
	motor_velocity = SATURATE(motor_velocity, -100, 100);
	uint8_t motor_speed = abs(motor_velocity);
     5aa:	be 01       	movw	r22, r28
     5ac:	dd 23       	and	r29, r29
     5ae:	24 f4       	brge	.+8      	; 0x5b8 <motor_set_velocity+0x38>
     5b0:	66 27       	eor	r22, r22
     5b2:	77 27       	eor	r23, r23
     5b4:	6c 1b       	sub	r22, r28
     5b6:	7d 0b       	sbc	r23, r29
	
	// Set direction and speed of motor.
	motor_set_direction(motor_direction);
	motor_set_speed(motor_speed * MOTOR_GAIN);
     5b8:	77 27       	eor	r23, r23
     5ba:	88 27       	eor	r24, r24
     5bc:	77 fd       	sbrc	r23, 7
     5be:	80 95       	com	r24
     5c0:	98 2f       	mov	r25, r24
     5c2:	c5 d5       	rcall	.+2954   	; 0x114e <__floatsisf>
     5c4:	23 e3       	ldi	r18, 0x33	; 51
     5c6:	33 e3       	ldi	r19, 0x33	; 51
     5c8:	43 e3       	ldi	r20, 0x33	; 51
     5ca:	5f e3       	ldi	r21, 0x3F	; 63
     5cc:	74 d6       	rcall	.+3304   	; 0x12b6 <__mulsf3>
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	4f e7       	ldi	r20, 0x7F	; 127
     5d4:	53 e4       	ldi	r21, 0x43	; 67
     5d6:	6f d6       	rcall	.+3294   	; 0x12b6 <__mulsf3>
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	48 ec       	ldi	r20, 0xC8	; 200
     5de:	52 e4       	ldi	r21, 0x42	; 66
     5e0:	1b d5       	rcall	.+2614   	; 0x1018 <__divsf3>
     5e2:	87 d5       	rcall	.+2830   	; 0x10f2 <__fixunssfsi>
     5e4:	86 2f       	mov	r24, r22
     5e6:	c8 df       	rcall	.-112    	; 0x578 <motor_set_speed>
}
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <motor_read_position_change>:
/*				READ FROM ENCODER			*/
/*------------------------------------------*/

int16_t motor_read_position_change(void) { 
	// Read from the encoder as described in "Motorbox User Guide" page 5
	clear_bit(MJ1, OE);
     5ee:	e2 e0       	ldi	r30, 0x02	; 2
     5f0:	f1 e0       	ldi	r31, 0x01	; 1
     5f2:	80 81       	ld	r24, Z
     5f4:	8f 7d       	andi	r24, 0xDF	; 223
     5f6:	80 83       	st	Z, r24
	clear_bit(MJ1, SEL);
     5f8:	80 81       	ld	r24, Z
     5fa:	87 7f       	andi	r24, 0xF7	; 247
     5fc:	80 83       	st	Z, r24
     5fe:	2a e6       	ldi	r18, 0x6A	; 106
     600:	2a 95       	dec	r18
     602:	f1 f7       	brne	.-4      	; 0x600 <motor_read_position_change+0x12>
     604:	00 c0       	rjmp	.+0      	; 0x606 <motor_read_position_change+0x18>
	_delay_us(20);
	uint16_t position_change = (MJ2 << 8);
     606:	80 91 06 01 	lds	r24, 0x0106
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	98 2f       	mov	r25, r24
     60e:	88 27       	eor	r24, r24
	
	set_bit(MJ1, SEL);
     610:	20 81       	ld	r18, Z
     612:	28 60       	ori	r18, 0x08	; 8
     614:	20 83       	st	Z, r18
     616:	3a e6       	ldi	r19, 0x6A	; 106
     618:	3a 95       	dec	r19
     61a:	f1 f7       	brne	.-4      	; 0x618 <motor_read_position_change+0x2a>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <motor_read_position_change+0x30>
	_delay_us(20);
	position_change += MJ2;
     61e:	20 91 06 01 	lds	r18, 0x0106
	
	clear_bit(MJ1, RST);
     622:	30 81       	ld	r19, Z
     624:	3f 7b       	andi	r19, 0xBF	; 191
     626:	30 83       	st	Z, r19
     628:	35 e8       	ldi	r19, 0x85	; 133
     62a:	3a 95       	dec	r19
     62c:	f1 f7       	brne	.-4      	; 0x62a <motor_read_position_change+0x3c>
     62e:	00 00       	nop
	_delay_us(25);
	set_bit(MJ1, RST);
     630:	30 81       	ld	r19, Z
     632:	30 64       	ori	r19, 0x40	; 64
     634:	30 83       	st	Z, r19
	set_bit(MJ1, OE);
     636:	30 81       	ld	r19, Z
     638:	30 62       	ori	r19, 0x20	; 32
     63a:	30 83       	st	Z, r19
	
	return position_change;
}
     63c:	82 0f       	add	r24, r18
     63e:	91 1d       	adc	r25, r1
     640:	08 95       	ret

00000642 <motor_find_max_speed_manual>:
		case AUTOMATIC:
		motor_find_max_speed_auto();
	}
}

void motor_find_max_speed_manual(void){
     642:	8f 92       	push	r8
     644:	9f 92       	push	r9
     646:	af 92       	push	r10
     648:	bf 92       	push	r11
     64a:	cf 92       	push	r12
     64c:	df 92       	push	r13
     64e:	ef 92       	push	r14
     650:	ff 92       	push	r15
     652:	1f 93       	push	r17
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	2b 97       	sbiw	r28, 0x0b	; 11
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
	
	can_message message;
	int8_t joystick_x = 0;
	int button_is_pressed = 0;
	
	printf("---------------------------------------------------------\n");
     668:	8d e4       	ldi	r24, 0x4D	; 77
     66a:	92 e0       	ldi	r25, 0x02	; 2
     66c:	0f d7       	rcall	.+3614   	; 0x148c <puts>
	printf("CALIBRATE THE ENCODER BY MEASURING THE MAXIMUM VELOCITY\n");
     66e:	87 e8       	ldi	r24, 0x87	; 135
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	0c d7       	rcall	.+3608   	; 0x148c <puts>
	printf("PRESS ANY BUTTON TO CONTINUE\n");
     674:	8f eb       	ldi	r24, 0xBF	; 191
     676:	92 e0       	ldi	r25, 0x02	; 2
     678:	09 d7       	rcall	.+3602   	; 0x148c <puts>
	printf("---------------------------------------------------------\n");
     67a:	8d e4       	ldi	r24, 0x4D	; 77
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	06 d7       	rcall	.+3596   	; 0x148c <puts>
		motor_set_velocity(joystick_x);

		double speed = abs(motor_read_position_change())/(double)(time_passed());
		if (speed > max_speed) {
			max_speed = speed;
			printf("[MANUAL] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
     680:	0f 2e       	mov	r0, r31
     682:	fc ed       	ldi	r31, 0xDC	; 220
     684:	af 2e       	mov	r10, r31
     686:	f2 e0       	ldi	r31, 0x02	; 2
     688:	bf 2e       	mov	r11, r31
     68a:	f0 2d       	mov	r31, r0
	printf("CALIBRATE THE ENCODER BY MEASURING THE MAXIMUM VELOCITY\n");
	printf("PRESS ANY BUTTON TO CONTINUE\n");
	printf("---------------------------------------------------------\n");
	
	while(!button_is_pressed) {
		message = receive_control_inputs();
     68c:	ce 01       	movw	r24, r28
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	7d de       	rcall	.-774    	; 0x38c <receive_control_inputs>
		joystick_x = message.data[JOYSTICK_X];
		const int RL_BUTTONS = 0b011;
		button_is_pressed = message.data[BUTTONS] & RL_BUTTONS;
     692:	88 85       	ldd	r24, Y+8	; 0x08
     694:	18 2f       	mov	r17, r24
     696:	13 70       	andi	r17, 0x03	; 3
		
		motor_set_velocity(joystick_x);
     698:	8c 81       	ldd	r24, Y+4	; 0x04
     69a:	99 27       	eor	r25, r25
     69c:	87 fd       	sbrc	r24, 7
     69e:	90 95       	com	r25
     6a0:	6f df       	rcall	.-290    	; 0x580 <motor_set_velocity>

		double speed = abs(motor_read_position_change())/(double)(time_passed());
     6a2:	a5 df       	rcall	.-182    	; 0x5ee <motor_read_position_change>
     6a4:	7c 01       	movw	r14, r24
     6a6:	5e d3       	rcall	.+1724   	; 0xd64 <time_passed>
     6a8:	4c 01       	movw	r8, r24
     6aa:	b7 01       	movw	r22, r14
     6ac:	ff 20       	and	r15, r15
     6ae:	24 f4       	brge	.+8      	; 0x6b8 <motor_find_max_speed_manual+0x76>
     6b0:	66 27       	eor	r22, r22
     6b2:	77 27       	eor	r23, r23
     6b4:	6e 19       	sub	r22, r14
     6b6:	7f 09       	sbc	r23, r15
     6b8:	88 27       	eor	r24, r24
     6ba:	77 fd       	sbrc	r23, 7
     6bc:	80 95       	com	r24
     6be:	98 2f       	mov	r25, r24
     6c0:	46 d5       	rcall	.+2700   	; 0x114e <__floatsisf>
     6c2:	6b 01       	movw	r12, r22
     6c4:	7c 01       	movw	r14, r24
     6c6:	b4 01       	movw	r22, r8
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	3e d5       	rcall	.+2684   	; 0x114a <__floatunsisf>
     6ce:	9b 01       	movw	r18, r22
     6d0:	ac 01       	movw	r20, r24
     6d2:	c7 01       	movw	r24, r14
     6d4:	b6 01       	movw	r22, r12
     6d6:	a0 d4       	rcall	.+2368   	; 0x1018 <__divsf3>
     6d8:	6b 01       	movw	r12, r22
     6da:	7c 01       	movw	r14, r24
		if (speed > max_speed) {
     6dc:	20 91 87 03 	lds	r18, 0x0387
     6e0:	30 91 88 03 	lds	r19, 0x0388
     6e4:	40 91 89 03 	lds	r20, 0x0389
     6e8:	50 91 8a 03 	lds	r21, 0x038A
     6ec:	e0 d5       	rcall	.+3008   	; 0x12ae <__gesf2>
     6ee:	18 16       	cp	r1, r24
     6f0:	cc f4       	brge	.+50     	; 0x724 <motor_find_max_speed_manual+0xe2>
			max_speed = speed;
     6f2:	c0 92 87 03 	sts	0x0387, r12
     6f6:	d0 92 88 03 	sts	0x0388, r13
     6fa:	e0 92 89 03 	sts	0x0389, r14
     6fe:	f0 92 8a 03 	sts	0x038A, r15
			printf("[MANUAL] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	4a e7       	ldi	r20, 0x7A	; 122
     708:	54 e4       	ldi	r21, 0x44	; 68
     70a:	c7 01       	movw	r24, r14
     70c:	b6 01       	movw	r22, r12
     70e:	d3 d5       	rcall	.+2982   	; 0x12b6 <__mulsf3>
     710:	eb d4       	rcall	.+2518   	; 0x10e8 <__fixsfsi>
     712:	7f 93       	push	r23
     714:	6f 93       	push	r22
     716:	bf 92       	push	r11
     718:	af 92       	push	r10
     71a:	a7 d6       	rcall	.+3406   	; 0x146a <printf>
     71c:	0f 90       	pop	r0
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     724:	8f e3       	ldi	r24, 0x3F	; 63
     726:	9c e9       	ldi	r25, 0x9C	; 156
     728:	01 97       	sbiw	r24, 0x01	; 1
     72a:	f1 f7       	brne	.-4      	; 0x728 <motor_find_max_speed_manual+0xe6>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <motor_find_max_speed_manual+0xec>
     72e:	00 00       	nop
	printf("---------------------------------------------------------\n");
	printf("CALIBRATE THE ENCODER BY MEASURING THE MAXIMUM VELOCITY\n");
	printf("PRESS ANY BUTTON TO CONTINUE\n");
	printf("---------------------------------------------------------\n");
	
	while(!button_is_pressed) {
     730:	11 23       	and	r17, r17
     732:	09 f4       	brne	.+2      	; 0x736 <motor_find_max_speed_manual+0xf4>
     734:	ab cf       	rjmp	.-170    	; 0x68c <motor_find_max_speed_manual+0x4a>
			printf("[MANUAL] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
		}
		_delay_ms(10);
	}
	
	printf("---------------------------------------------------------\n");
     736:	8d e4       	ldi	r24, 0x4D	; 77
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	a8 d6       	rcall	.+3408   	; 0x148c <puts>
	printf("CALIBRATION COMPLETE\n");
     73c:	8b ef       	ldi	r24, 0xFB	; 251
     73e:	92 e0       	ldi	r25, 0x02	; 2
     740:	a5 d6       	rcall	.+3402   	; 0x148c <puts>
	printf("---------------------------------------------------------\n");
     742:	8d e4       	ldi	r24, 0x4D	; 77
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	a2 d6       	rcall	.+3396   	; 0x148c <puts>
	motor_set_velocity(0);
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	19 df       	rcall	.-462    	; 0x580 <motor_set_velocity>
}
     74e:	2b 96       	adiw	r28, 0x0b	; 11
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	f8 94       	cli
     754:	de bf       	out	0x3e, r29	; 62
     756:	0f be       	out	0x3f, r0	; 63
     758:	cd bf       	out	0x3d, r28	; 61
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	ff 90       	pop	r15
     762:	ef 90       	pop	r14
     764:	df 90       	pop	r13
     766:	cf 90       	pop	r12
     768:	bf 90       	pop	r11
     76a:	af 90       	pop	r10
     76c:	9f 90       	pop	r9
     76e:	8f 90       	pop	r8
     770:	08 95       	ret

00000772 <motor_find_max_speed_auto>:

void motor_find_max_speed_auto(void){
     772:	2f 92       	push	r2
     774:	3f 92       	push	r3
     776:	4f 92       	push	r4
     778:	5f 92       	push	r5
     77a:	6f 92       	push	r6
     77c:	7f 92       	push	r7
     77e:	8f 92       	push	r8
     780:	9f 92       	push	r9
     782:	af 92       	push	r10
     784:	bf 92       	push	r11
     786:	cf 92       	push	r12
     788:	df 92       	push	r13
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	a7 97       	sbiw	r28, 0x27	; 39
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
	cli();
     7a6:	f8 94       	cli
	const int16_t velocities[] = {100, -100, 100, -100, 100, -100, 100, -100, 100, -100};
     7a8:	84 e1       	ldi	r24, 0x14	; 20
     7aa:	e7 e0       	ldi	r30, 0x07	; 7
     7ac:	f2 e0       	ldi	r31, 0x02	; 2
     7ae:	de 01       	movw	r26, r28
     7b0:	11 96       	adiw	r26, 0x01	; 1
     7b2:	01 90       	ld	r0, Z+
     7b4:	0d 92       	st	X+, r0
     7b6:	8a 95       	dec	r24
     7b8:	e1 f7       	brne	.-8      	; 0x7b2 <motor_find_max_speed_auto+0x40>
     7ba:	9e 01       	movw	r18, r28
     7bc:	2f 5f       	subi	r18, 0xFF	; 255
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	3f a3       	std	Y+39, r19	; 0x27
     7c2:	2e a3       	std	Y+38, r18	; 0x26
     7c4:	ae 01       	movw	r20, r28
     7c6:	4b 5e       	subi	r20, 0xEB	; 235
     7c8:	5f 4f       	sbci	r21, 0xFF	; 255
     7ca:	5e 8b       	std	Y+22, r21	; 0x16
     7cc:	4d 8b       	std	Y+21, r20	; 0x15
	const uint8_t time_interval = 85;  // Unit unknown
	
	const int velocity_count = sizeof(velocities)/sizeof(velocities[0]); // Size of array
	for (int i = 0; i < velocity_count; i++) {
		// Used to keep track of how long the motor has been going in one direction.
		uint64_t time_sum = 0;
     7ce:	41 2c       	mov	r4, r1
     7d0:	0e a1       	ldd	r16, Y+38	; 0x26
     7d2:	1f a1       	ldd	r17, Y+39	; 0x27
		printf("Set velocity to: %d\n", velocities[i]);
     7d4:	d8 01       	movw	r26, r16
     7d6:	11 96       	adiw	r26, 0x01	; 1
     7d8:	8c 91       	ld	r24, X
     7da:	11 97       	sbiw	r26, 0x01	; 1
     7dc:	8f 93       	push	r24
     7de:	8c 91       	ld	r24, X
     7e0:	8f 93       	push	r24
     7e2:	a0 e1       	ldi	r26, 0x10	; 16
     7e4:	b3 e0       	ldi	r27, 0x03	; 3
     7e6:	bf 93       	push	r27
     7e8:	af 93       	push	r26
     7ea:	3f d6       	rcall	.+3198   	; 0x146a <printf>
		
		sei(); // Interrupts need to be enabled in order to set velocity
     7ec:	78 94       	sei
		motor_set_velocity(velocities[i]); 
     7ee:	f8 01       	movw	r30, r16
     7f0:	80 81       	ld	r24, Z
     7f2:	91 81       	ldd	r25, Z+1	; 0x01
     7f4:	2e a1       	ldd	r18, Y+38	; 0x26
     7f6:	3f a1       	ldd	r19, Y+39	; 0x27
     7f8:	2e 5f       	subi	r18, 0xFE	; 254
     7fa:	3f 4f       	sbci	r19, 0xFF	; 255
     7fc:	3f a3       	std	Y+39, r19	; 0x27
     7fe:	2e a3       	std	Y+38, r18	; 0x26
     800:	bf de       	rcall	.-642    	; 0x580 <motor_set_velocity>
		cli();
     802:	f8 94       	cli
     804:	0f 90       	pop	r0
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
	const uint8_t time_interval = 85;  // Unit unknown
	
	const int velocity_count = sizeof(velocities)/sizeof(velocities[0]); // Size of array
	for (int i = 0; i < velocity_count; i++) {
		// Used to keep track of how long the motor has been going in one direction.
		uint64_t time_sum = 0;
     80c:	34 2c       	mov	r3, r4
     80e:	4f 8e       	std	Y+31, r4	; 0x1f
     810:	48 a2       	std	Y+32, r4	; 0x20
     812:	49 a2       	std	Y+33, r4	; 0x21
     814:	4a a2       	std	Y+34, r4	; 0x22
     816:	4b a2       	std	Y+35, r4	; 0x23
     818:	4c a2       	std	Y+36, r4	; 0x24
     81a:	4d a2       	std	Y+37, r4	; 0x25
		motor_set_velocity(velocities[i]); 
		cli();
		
		// A somewhat hacky way of doing it. Consider switching to a separate timer in the future.
		while((uint8_t)((time_sum)>>8) < time_interval) {
			double time = time_passed();
     81c:	a3 d2       	rcall	.+1350   	; 0xd64 <time_passed>
     81e:	4c 01       	movw	r8, r24
			time_sum += (uint64_t)time;
     820:	ac 01       	movw	r20, r24
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	dc 01       	movw	r26, r24
     82c:	8f 8a       	std	Y+23, r8	; 0x17
     82e:	58 8f       	std	Y+24, r21	; 0x18
     830:	69 8f       	std	Y+25, r22	; 0x19
     832:	7a 8f       	std	Y+26, r23	; 0x1a
     834:	8b 8f       	std	Y+27, r24	; 0x1b
     836:	9c 8f       	std	Y+28, r25	; 0x1c
     838:	ad 8f       	std	Y+29, r26	; 0x1d
     83a:	be 8f       	std	Y+30, r27	; 0x1e
     83c:	23 2d       	mov	r18, r3
     83e:	3f 8d       	ldd	r19, Y+31	; 0x1f
     840:	48 a1       	ldd	r20, Y+32	; 0x20
     842:	59 a1       	ldd	r21, Y+33	; 0x21
     844:	6a a1       	ldd	r22, Y+34	; 0x22
     846:	7b a1       	ldd	r23, Y+35	; 0x23
     848:	8c a1       	ldd	r24, Y+36	; 0x24
     84a:	9d a1       	ldd	r25, Y+37	; 0x25
     84c:	af 88       	ldd	r10, Y+23	; 0x17
     84e:	b8 8c       	ldd	r11, Y+24	; 0x18
     850:	c4 2c       	mov	r12, r4
     852:	d4 2c       	mov	r13, r4
     854:	e4 2c       	mov	r14, r4
     856:	f4 2c       	mov	r15, r4
     858:	04 2d       	mov	r16, r4
     85a:	14 2d       	mov	r17, r4
     85c:	b3 d5       	rcall	.+2918   	; 0x13c4 <__adddi3>
     85e:	22 2e       	mov	r2, r18
     860:	53 2e       	mov	r5, r19
     862:	64 2e       	mov	r6, r20
     864:	75 2e       	mov	r7, r21
     866:	a6 2e       	mov	r10, r22
     868:	b7 2e       	mov	r11, r23
     86a:	08 2f       	mov	r16, r24
     86c:	19 2f       	mov	r17, r25
     86e:	32 2e       	mov	r3, r18
     870:	3f 8f       	std	Y+31, r19	; 0x1f
     872:	48 a3       	std	Y+32, r20	; 0x20
     874:	59 a3       	std	Y+33, r21	; 0x21
     876:	6a a3       	std	Y+34, r22	; 0x22
     878:	7b a3       	std	Y+35, r23	; 0x23
     87a:	8c a3       	std	Y+36, r24	; 0x24
     87c:	9d a3       	std	Y+37, r25	; 0x25
			
			double speed = abs(motor_read_position_change())/time;
     87e:	b7 de       	rcall	.-658    	; 0x5ee <motor_read_position_change>
     880:	99 23       	and	r25, r25
     882:	1c f4       	brge	.+6      	; 0x88a <motor_find_max_speed_auto+0x118>
     884:	91 95       	neg	r25
     886:	81 95       	neg	r24
     888:	91 09       	sbc	r25, r1
     88a:	bc 01       	movw	r22, r24
     88c:	88 27       	eor	r24, r24
     88e:	77 fd       	sbrc	r23, 7
     890:	80 95       	com	r24
     892:	98 2f       	mov	r25, r24
     894:	5c d4       	rcall	.+2232   	; 0x114e <__floatsisf>
     896:	6b 01       	movw	r12, r22
     898:	7c 01       	movw	r14, r24
		motor_set_velocity(velocities[i]); 
		cli();
		
		// A somewhat hacky way of doing it. Consider switching to a separate timer in the future.
		while((uint8_t)((time_sum)>>8) < time_interval) {
			double time = time_passed();
     89a:	b4 01       	movw	r22, r8
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	54 d4       	rcall	.+2216   	; 0x114a <__floatunsisf>
     8a2:	9b 01       	movw	r18, r22
     8a4:	ac 01       	movw	r20, r24
			time_sum += (uint64_t)time;
			
			double speed = abs(motor_read_position_change())/time;
     8a6:	c7 01       	movw	r24, r14
     8a8:	b6 01       	movw	r22, r12
     8aa:	b6 d3       	rcall	.+1900   	; 0x1018 <__divsf3>
     8ac:	6b 01       	movw	r12, r22
     8ae:	7c 01       	movw	r14, r24
			if (speed > max_speed) {
     8b0:	20 91 87 03 	lds	r18, 0x0387
     8b4:	30 91 88 03 	lds	r19, 0x0388
     8b8:	40 91 89 03 	lds	r20, 0x0389
     8bc:	50 91 8a 03 	lds	r21, 0x038A
     8c0:	f6 d4       	rcall	.+2540   	; 0x12ae <__gesf2>
     8c2:	18 16       	cp	r1, r24
     8c4:	dc f4       	brge	.+54     	; 0x8fc <motor_find_max_speed_auto+0x18a>
				max_speed = speed;
     8c6:	c0 92 87 03 	sts	0x0387, r12
     8ca:	d0 92 88 03 	sts	0x0388, r13
     8ce:	e0 92 89 03 	sts	0x0389, r14
     8d2:	f0 92 8a 03 	sts	0x038A, r15
				printf("[AUTOMATIC] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
     8d6:	20 e0       	ldi	r18, 0x00	; 0
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	4a e7       	ldi	r20, 0x7A	; 122
     8dc:	54 e4       	ldi	r21, 0x44	; 68
     8de:	c7 01       	movw	r24, r14
     8e0:	b6 01       	movw	r22, r12
     8e2:	e9 d4       	rcall	.+2514   	; 0x12b6 <__mulsf3>
     8e4:	01 d4       	rcall	.+2050   	; 0x10e8 <__fixsfsi>
     8e6:	7f 93       	push	r23
     8e8:	6f 93       	push	r22
     8ea:	a5 e2       	ldi	r26, 0x25	; 37
     8ec:	b3 e0       	ldi	r27, 0x03	; 3
     8ee:	bf 93       	push	r27
     8f0:	af 93       	push	r26
     8f2:	bb d5       	rcall	.+2934   	; 0x146a <printf>
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	ff ef       	ldi	r31, 0xFF	; 255
     8fe:	20 e7       	ldi	r18, 0x70	; 112
     900:	32 e0       	ldi	r19, 0x02	; 2
     902:	f1 50       	subi	r31, 0x01	; 1
     904:	20 40       	sbci	r18, 0x00	; 0
     906:	30 40       	sbci	r19, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <motor_find_max_speed_auto+0x190>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <motor_find_max_speed_auto+0x19a>
     90c:	00 00       	nop
		sei(); // Interrupts need to be enabled in order to set velocity
		motor_set_velocity(velocities[i]); 
		cli();
		
		// A somewhat hacky way of doing it. Consider switching to a separate timer in the future.
		while((uint8_t)((time_sum)>>8) < time_interval) {
     90e:	22 2d       	mov	r18, r2
     910:	35 2d       	mov	r19, r5
     912:	46 2d       	mov	r20, r6
     914:	57 2d       	mov	r21, r7
     916:	6a 2d       	mov	r22, r10
     918:	7b 2d       	mov	r23, r11
     91a:	80 2f       	mov	r24, r16
     91c:	91 2f       	mov	r25, r17
     91e:	08 e0       	ldi	r16, 0x08	; 8
     920:	35 d5       	rcall	.+2666   	; 0x138c <__lshrdi3>
     922:	25 35       	cpi	r18, 0x55	; 85
     924:	08 f4       	brcc	.+2      	; 0x928 <motor_find_max_speed_auto+0x1b6>
     926:	7a cf       	rjmp	.-268    	; 0x81c <motor_find_max_speed_auto+0xaa>
	cli();
	const int16_t velocities[] = {100, -100, 100, -100, 100, -100, 100, -100, 100, -100};
	const uint8_t time_interval = 85;  // Unit unknown
	
	const int velocity_count = sizeof(velocities)/sizeof(velocities[0]); // Size of array
	for (int i = 0; i < velocity_count; i++) {
     928:	4e a1       	ldd	r20, Y+38	; 0x26
     92a:	5f a1       	ldd	r21, Y+39	; 0x27
     92c:	6d 89       	ldd	r22, Y+21	; 0x15
     92e:	7e 89       	ldd	r23, Y+22	; 0x16
     930:	46 17       	cp	r20, r22
     932:	57 07       	cpc	r21, r23
     934:	09 f0       	breq	.+2      	; 0x938 <motor_find_max_speed_auto+0x1c6>
     936:	4c cf       	rjmp	.-360    	; 0x7d0 <motor_find_max_speed_auto+0x5e>
			}
			_delay_ms(50);
		}
	}
	
	printf("[AUTOMATIC] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	4a e7       	ldi	r20, 0x7A	; 122
     93e:	54 e4       	ldi	r21, 0x44	; 68
     940:	60 91 87 03 	lds	r22, 0x0387
     944:	70 91 88 03 	lds	r23, 0x0388
     948:	80 91 89 03 	lds	r24, 0x0389
     94c:	90 91 8a 03 	lds	r25, 0x038A
     950:	b2 d4       	rcall	.+2404   	; 0x12b6 <__mulsf3>
     952:	ca d3       	rcall	.+1940   	; 0x10e8 <__fixsfsi>
     954:	7f 93       	push	r23
     956:	6f 93       	push	r22
     958:	85 e2       	ldi	r24, 0x25	; 37
     95a:	93 e0       	ldi	r25, 0x03	; 3
     95c:	9f 93       	push	r25
     95e:	8f 93       	push	r24
     960:	84 d5       	rcall	.+2824   	; 0x146a <printf>
	
	sei(); // Interrupts need to be enabled in order to set velocity
     962:	78 94       	sei
	motor_set_velocity(0); 
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0b de       	rcall	.-1002   	; 0x580 <motor_set_velocity>
	cli();
     96a:	f8 94       	cli
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
}
     974:	a7 96       	adiw	r28, 0x27	; 39
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	f8 94       	cli
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	cd bf       	out	0x3d, r28	; 61
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	df 90       	pop	r13
     98e:	cf 90       	pop	r12
     990:	bf 90       	pop	r11
     992:	af 90       	pop	r10
     994:	9f 90       	pop	r9
     996:	8f 90       	pop	r8
     998:	7f 90       	pop	r7
     99a:	6f 90       	pop	r6
     99c:	5f 90       	pop	r5
     99e:	4f 90       	pop	r4
     9a0:	3f 90       	pop	r3
     9a2:	2f 90       	pop	r2
     9a4:	08 95       	ret

000009a6 <motor_init>:

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/

void motor_init(max_speed_mode mode){
     9a6:	cf 93       	push	r28
     9a8:	c8 2f       	mov	r28, r24
	MAX520_init(0b000);
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	78 dd       	rcall	.-1296   	; 0x49e <MAX520_init>
	motor_enable();
     9ae:	d0 dd       	rcall	.-1120   	; 0x550 <motor_enable>
	clear_bit(MJ1, OE);  // Enable encoder
     9b0:	e2 e0       	ldi	r30, 0x02	; 2
     9b2:	f1 e0       	ldi	r31, 0x01	; 1
     9b4:	80 81       	ld	r24, Z
     9b6:	8f 7d       	andi	r24, 0xDF	; 223
     9b8:	80 83       	st	Z, r24
	set_bit(MJ1, RST);
     9ba:	80 81       	ld	r24, Z
     9bc:	80 64       	ori	r24, 0x40	; 64
     9be:	80 83       	st	Z, r24
	
	motor_set_velocity(0);
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	dd dd       	rcall	.-1094   	; 0x580 <motor_set_velocity>
	
	// Set PORTH as output
	DDRH = 0xFF;
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	80 93 01 01 	sts	0x0101, r24
	time_init();  // Used for measurement of speed/velocity.
     9cc:	c4 d1       	rcall	.+904    	; 0xd56 <time_init>
	
	// Read the change in position to clear the encoder before measurements are made
	motor_read_position_change();
     9ce:	0f de       	rcall	.-994    	; 0x5ee <motor_read_position_change>
	
	switch (mode) {
     9d0:	c1 30       	cpi	r28, 0x01	; 1
     9d2:	89 f0       	breq	.+34     	; 0x9f6 <motor_init+0x50>
     9d4:	18 f0       	brcs	.+6      	; 0x9dc <motor_init+0x36>
     9d6:	c2 30       	cpi	r28, 0x02	; 2
     9d8:	81 f0       	breq	.+32     	; 0x9fa <motor_init+0x54>
     9da:	10 c0       	rjmp	.+32     	; 0x9fc <motor_init+0x56>
		case DEFAULT:
		max_speed = MOTOR_DEFAULT_MAX_SPEED;
     9dc:	89 ed       	ldi	r24, 0xD9	; 217
     9de:	9e ec       	ldi	r25, 0xCE	; 206
     9e0:	a7 ef       	ldi	r26, 0xF7	; 247
     9e2:	be e3       	ldi	r27, 0x3E	; 62
     9e4:	80 93 87 03 	sts	0x0387, r24
     9e8:	90 93 88 03 	sts	0x0388, r25
     9ec:	a0 93 89 03 	sts	0x0389, r26
     9f0:	b0 93 8a 03 	sts	0x038A, r27
		break;
     9f4:	03 c0       	rjmp	.+6      	; 0x9fc <motor_init+0x56>
		
		case MANUAL:
		motor_find_max_speed_manual();
     9f6:	25 de       	rcall	.-950    	; 0x642 <motor_find_max_speed_manual>
		break;
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <motor_init+0x56>
		
		case AUTOMATIC:
		motor_find_max_speed_auto();
     9fa:	bb de       	rcall	.-650    	; 0x772 <motor_find_max_speed_auto>
	}
}
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <motor_get_velocity>:
	set_bit(MJ1, OE);
	
	return position_change;
}

int8_t motor_get_velocity(void) {
     a00:	cf 92       	push	r12
     a02:	df 92       	push	r13
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
	double velocity = ((double) motor_read_position_change()) / time_passed();
     a0c:	f0 dd       	rcall	.-1056   	; 0x5ee <motor_read_position_change>
     a0e:	7c 01       	movw	r14, r24
     a10:	a9 d1       	rcall	.+850    	; 0xd64 <time_passed>
     a12:	ec 01       	movw	r28, r24
     a14:	b7 01       	movw	r22, r14
     a16:	88 27       	eor	r24, r24
     a18:	77 fd       	sbrc	r23, 7
     a1a:	80 95       	com	r24
     a1c:	98 2f       	mov	r25, r24
     a1e:	97 d3       	rcall	.+1838   	; 0x114e <__floatsisf>
     a20:	6b 01       	movw	r12, r22
     a22:	7c 01       	movw	r14, r24
     a24:	be 01       	movw	r22, r28
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	8f d3       	rcall	.+1822   	; 0x114a <__floatunsisf>
     a2c:	9b 01       	movw	r18, r22
     a2e:	ac 01       	movw	r20, r24
     a30:	c7 01       	movw	r24, r14
     a32:	b6 01       	movw	r22, r12
     a34:	f1 d2       	rcall	.+1506   	; 0x1018 <__divsf3>
	int velocity_percentage;
	velocity_percentage = velocity * 100/max_speed;
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	48 ec       	ldi	r20, 0xC8	; 200
     a3c:	52 e4       	ldi	r21, 0x42	; 66
     a3e:	3b d4       	rcall	.+2166   	; 0x12b6 <__mulsf3>
     a40:	20 91 87 03 	lds	r18, 0x0387
     a44:	30 91 88 03 	lds	r19, 0x0388
     a48:	40 91 89 03 	lds	r20, 0x0389
     a4c:	50 91 8a 03 	lds	r21, 0x038A
     a50:	e3 d2       	rcall	.+1478   	; 0x1018 <__divsf3>
     a52:	4a d3       	rcall	.+1684   	; 0x10e8 <__fixsfsi>
     a54:	c6 2f       	mov	r28, r22
		velocity_percentage = 100 * fabs(velocity)/velocity;
	}
	else {
		velocity_percentage = velocity * 100/max_speed;
	}*/
	printf("Velocity percentage: %d\n", velocity_percentage);
     a56:	7f 93       	push	r23
     a58:	6f 93       	push	r22
     a5a:	27 e4       	ldi	r18, 0x47	; 71
     a5c:	33 e0       	ldi	r19, 0x03	; 3
     a5e:	3f 93       	push	r19
     a60:	2f 93       	push	r18
     a62:	03 d5       	rcall	.+2566   	; 0x146a <printf>
	
	return velocity_percentage;
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	0f 90       	pop	r0
}
     a6c:	8c 2f       	mov	r24, r28
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	df 90       	pop	r13
     a78:	cf 90       	pop	r12
     a7a:	08 95       	ret

00000a7c <PI_init>:

volatile PI_controller_t controller;


void PI_init() {
	controller.error_sum = 0;
     a7c:	10 92 9c 03 	sts	0x039C, r1
     a80:	10 92 9d 03 	sts	0x039D, r1
     a84:	10 92 9e 03 	sts	0x039E, r1
     a88:	10 92 9f 03 	sts	0x039F, r1
	controller.k_p = 0.5;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	bf e3       	ldi	r27, 0x3F	; 63
     a94:	80 93 94 03 	sts	0x0394, r24
     a98:	90 93 95 03 	sts	0x0395, r25
     a9c:	a0 93 96 03 	sts	0x0396, r26
     aa0:	b0 93 97 03 	sts	0x0397, r27
	controller.k_i = 0.2;
     aa4:	8d ec       	ldi	r24, 0xCD	; 205
     aa6:	9c ec       	ldi	r25, 0xCC	; 204
     aa8:	ac e4       	ldi	r26, 0x4C	; 76
     aaa:	be e3       	ldi	r27, 0x3E	; 62
     aac:	80 93 98 03 	sts	0x0398, r24
     ab0:	90 93 99 03 	sts	0x0399, r25
     ab4:	a0 93 9a 03 	sts	0x039A, r26
     ab8:	b0 93 9b 03 	sts	0x039B, r27
	controller.max_error_sum = 20;
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	a0 ea       	ldi	r26, 0xA0	; 160
     ac2:	b1 e4       	ldi	r27, 0x41	; 65
     ac4:	80 93 a0 03 	sts	0x03A0, r24
     ac8:	90 93 a1 03 	sts	0x03A1, r25
     acc:	a0 93 a2 03 	sts	0x03A2, r26
     ad0:	b0 93 a3 03 	sts	0x03A3, r27
     ad4:	08 95       	ret

00000ad6 <PI_control>:
}


void PI_control(double velocity_reference) {
     ad6:	4f 92       	push	r4
     ad8:	5f 92       	push	r5
     ada:	6f 92       	push	r6
     adc:	7f 92       	push	r7
     ade:	8f 92       	push	r8
     ae0:	9f 92       	push	r9
     ae2:	af 92       	push	r10
     ae4:	bf 92       	push	r11
     ae6:	cf 92       	push	r12
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	6b 01       	movw	r12, r22
     af8:	7c 01       	movw	r14, r24
	double error = velocity_reference - motor_get_velocity();
     afa:	82 df       	rcall	.-252    	; 0xa00 <motor_get_velocity>
     afc:	68 2f       	mov	r22, r24
     afe:	77 27       	eor	r23, r23
     b00:	67 fd       	sbrc	r22, 7
     b02:	70 95       	com	r23
     b04:	87 2f       	mov	r24, r23
     b06:	97 2f       	mov	r25, r23
     b08:	22 d3       	rcall	.+1604   	; 0x114e <__floatsisf>
     b0a:	9b 01       	movw	r18, r22
     b0c:	ac 01       	movw	r20, r24
     b0e:	c7 01       	movw	r24, r14
     b10:	b6 01       	movw	r22, r12
     b12:	19 d2       	rcall	.+1074   	; 0xf46 <__subsf3>
     b14:	6b 01       	movw	r12, r22
     b16:	7c 01       	movw	r14, r24
	
	// Find the next error_sum.
	controller.error_sum += error;
     b18:	cc e9       	ldi	r28, 0x9C	; 156
     b1a:	d3 e0       	ldi	r29, 0x03	; 3
     b1c:	68 81       	ld	r22, Y
     b1e:	79 81       	ldd	r23, Y+1	; 0x01
     b20:	8a 81       	ldd	r24, Y+2	; 0x02
     b22:	9b 81       	ldd	r25, Y+3	; 0x03
     b24:	a7 01       	movw	r20, r14
     b26:	96 01       	movw	r18, r12
     b28:	0f d2       	rcall	.+1054   	; 0xf48 <__addsf3>
     b2a:	68 83       	st	Y, r22
     b2c:	79 83       	std	Y+1, r23	; 0x01
     b2e:	8a 83       	std	Y+2, r24	; 0x02
     b30:	9b 83       	std	Y+3, r25	; 0x03
	
	// Saturate the error sum, such that it is on the interval [-MAX_ERROR_SUM, +MAX_ERROR_SUM]
	controller.error_sum = SATURATE(controller.error_sum, -controller.max_error_sum, controller.max_error_sum);
     b32:	68 81       	ld	r22, Y
     b34:	79 81       	ldd	r23, Y+1	; 0x01
     b36:	8a 81       	ldd	r24, Y+2	; 0x02
     b38:	9b 81       	ldd	r25, Y+3	; 0x03
     b3a:	00 91 a0 03 	lds	r16, 0x03A0
     b3e:	10 91 a1 03 	lds	r17, 0x03A1
     b42:	20 91 a2 03 	lds	r18, 0x03A2
     b46:	30 91 a3 03 	lds	r19, 0x03A3
     b4a:	a9 01       	movw	r20, r18
     b4c:	98 01       	movw	r18, r16
     b4e:	50 58       	subi	r21, 0x80	; 128
     b50:	5f d2       	rcall	.+1214   	; 0x1010 <__cmpsf2>
     b52:	88 23       	and	r24, r24
     b54:	64 f4       	brge	.+24     	; 0xb6e <PI_control+0x98>
     b56:	80 91 a0 03 	lds	r24, 0x03A0
     b5a:	90 91 a1 03 	lds	r25, 0x03A1
     b5e:	a0 91 a2 03 	lds	r26, 0x03A2
     b62:	b0 91 a3 03 	lds	r27, 0x03A3
     b66:	bc 01       	movw	r22, r24
     b68:	cd 01       	movw	r24, r26
     b6a:	90 58       	subi	r25, 0x80	; 128
     b6c:	08 c0       	rjmp	.+16     	; 0xb7e <PI_control+0xa8>
     b6e:	60 91 9c 03 	lds	r22, 0x039C
     b72:	70 91 9d 03 	lds	r23, 0x039D
     b76:	80 91 9e 03 	lds	r24, 0x039E
     b7a:	90 91 9f 03 	lds	r25, 0x039F
     b7e:	20 91 a0 03 	lds	r18, 0x03A0
     b82:	30 91 a1 03 	lds	r19, 0x03A1
     b86:	40 91 a2 03 	lds	r20, 0x03A2
     b8a:	50 91 a3 03 	lds	r21, 0x03A3
     b8e:	8f d3       	rcall	.+1822   	; 0x12ae <__gesf2>
     b90:	18 16       	cp	r1, r24
     b92:	4c f4       	brge	.+18     	; 0xba6 <PI_control+0xd0>
     b94:	80 91 a0 03 	lds	r24, 0x03A0
     b98:	90 91 a1 03 	lds	r25, 0x03A1
     b9c:	a0 91 a2 03 	lds	r26, 0x03A2
     ba0:	b0 91 a3 03 	lds	r27, 0x03A3
     ba4:	28 c0       	rjmp	.+80     	; 0xbf6 <PI_control+0x120>
     ba6:	60 91 9c 03 	lds	r22, 0x039C
     baa:	70 91 9d 03 	lds	r23, 0x039D
     bae:	80 91 9e 03 	lds	r24, 0x039E
     bb2:	90 91 9f 03 	lds	r25, 0x039F
     bb6:	00 91 a0 03 	lds	r16, 0x03A0
     bba:	10 91 a1 03 	lds	r17, 0x03A1
     bbe:	20 91 a2 03 	lds	r18, 0x03A2
     bc2:	30 91 a3 03 	lds	r19, 0x03A3
     bc6:	a9 01       	movw	r20, r18
     bc8:	98 01       	movw	r18, r16
     bca:	50 58       	subi	r21, 0x80	; 128
     bcc:	21 d2       	rcall	.+1090   	; 0x1010 <__cmpsf2>
     bce:	88 23       	and	r24, r24
     bd0:	54 f4       	brge	.+20     	; 0xbe6 <PI_control+0x110>
     bd2:	80 91 a0 03 	lds	r24, 0x03A0
     bd6:	90 91 a1 03 	lds	r25, 0x03A1
     bda:	a0 91 a2 03 	lds	r26, 0x03A2
     bde:	b0 91 a3 03 	lds	r27, 0x03A3
     be2:	b0 58       	subi	r27, 0x80	; 128
     be4:	08 c0       	rjmp	.+16     	; 0xbf6 <PI_control+0x120>
     be6:	80 91 9c 03 	lds	r24, 0x039C
     bea:	90 91 9d 03 	lds	r25, 0x039D
     bee:	a0 91 9e 03 	lds	r26, 0x039E
     bf2:	b0 91 9f 03 	lds	r27, 0x039F
     bf6:	ec e9       	ldi	r30, 0x9C	; 156
     bf8:	f3 e0       	ldi	r31, 0x03	; 3
     bfa:	80 83       	st	Z, r24
     bfc:	91 83       	std	Z+1, r25	; 0x01
     bfe:	a2 83       	std	Z+2, r26	; 0x02
     c00:	b3 83       	std	Z+3, r27	; 0x03
	
	// Calculate the output signal of the PI-regulator.
	int output_signal = (controller.k_p * error) + (controller.k_i * controller.error_sum);
     c02:	60 91 94 03 	lds	r22, 0x0394
     c06:	70 91 95 03 	lds	r23, 0x0395
     c0a:	80 91 96 03 	lds	r24, 0x0396
     c0e:	90 91 97 03 	lds	r25, 0x0397
     c12:	80 90 98 03 	lds	r8, 0x0398
     c16:	90 90 99 03 	lds	r9, 0x0399
     c1a:	a0 90 9a 03 	lds	r10, 0x039A
     c1e:	b0 90 9b 03 	lds	r11, 0x039B
     c22:	40 80       	ld	r4, Z
     c24:	51 80       	ldd	r5, Z+1	; 0x01
     c26:	62 80       	ldd	r6, Z+2	; 0x02
     c28:	73 80       	ldd	r7, Z+3	; 0x03
     c2a:	a7 01       	movw	r20, r14
     c2c:	96 01       	movw	r18, r12
     c2e:	43 d3       	rcall	.+1670   	; 0x12b6 <__mulsf3>
     c30:	6b 01       	movw	r12, r22
     c32:	7c 01       	movw	r14, r24
     c34:	a3 01       	movw	r20, r6
     c36:	92 01       	movw	r18, r4
     c38:	c5 01       	movw	r24, r10
     c3a:	b4 01       	movw	r22, r8
     c3c:	3c d3       	rcall	.+1656   	; 0x12b6 <__mulsf3>
     c3e:	9b 01       	movw	r18, r22
     c40:	ac 01       	movw	r20, r24
     c42:	c7 01       	movw	r24, r14
     c44:	b6 01       	movw	r22, r12
     c46:	80 d1       	rcall	.+768    	; 0xf48 <__addsf3>
     c48:	4f d2       	rcall	.+1182   	; 0x10e8 <__fixsfsi>
	
	motor_set_velocity(output_signal);
     c4a:	cb 01       	movw	r24, r22
     c4c:	99 dc       	rcall	.-1742   	; 0x580 <motor_set_velocity>
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
     c5e:	bf 90       	pop	r11
     c60:	af 90       	pop	r10
     c62:	9f 90       	pop	r9
     c64:	8f 90       	pop	r8
     c66:	7f 90       	pop	r7
     c68:	6f 90       	pop	r6
     c6a:	5f 90       	pop	r5
     c6c:	4f 90       	pop	r4
     c6e:	08 95       	ret

00000c70 <servo_init>:
#define WIDTH_MIDPOINT (MAX_WIDTH + MIN_WIDTH) / 2
#define WIDTH_RADIUS   (MAX_WIDTH - MIN_WIDTH) / 2


void servo_init(void){
	PWM_init();
     c70:	33 d0       	rcall	.+102    	; 0xcd8 <PWM_init>
	PWM_set_width(WIDTH_MIDPOINT);
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 ec       	ldi	r24, 0xC0	; 192
     c78:	9f e3       	ldi	r25, 0x3F	; 63
     c7a:	52 c0       	rjmp	.+164    	; 0xd20 <PWM_set_width>
     c7c:	08 95       	ret

00000c7e <solenoid_init>:
#include <util/delay.h>


void solenoid_init(){
	//set output pin PB4(OC1A: output clock 1 A)
	set_bit(DDRB, DDB4);
     c7e:	24 9a       	sbi	0x04, 4	; 4
	
	//set high to disconnect
	set_bit(PORTB, PB4);
     c80:	2c 9a       	sbi	0x05, 4	; 5
     c82:	08 95       	ret

00000c84 <solenoid_send_pulse>:
}

void solenoid_send_pulse(){
	clear_bit(PORTB, PB4);
     c84:	2c 98       	cbi	0x05, 4	; 5
     c86:	2f ef       	ldi	r18, 0xFF	; 255
     c88:	86 e7       	ldi	r24, 0x76	; 118
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	21 50       	subi	r18, 0x01	; 1
     c8e:	80 40       	sbci	r24, 0x00	; 0
     c90:	90 40       	sbci	r25, 0x00	; 0
     c92:	e1 f7       	brne	.-8      	; 0xc8c <solenoid_send_pulse+0x8>
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <solenoid_send_pulse+0x12>
     c96:	00 00       	nop
	_delay_ms(30);
	set_bit(PORTB, PB4);
     c98:	2c 9a       	sbi	0x05, 4	; 5
     c9a:	08 95       	ret

00000c9c <SPI_init>:

void SPI_test(void) {
	SPI_send(0x00);
	uint8_t spi_read_result = SPI_read();
	
	printf("SPI_TEST: %x\n\n", spi_read_result);
     c9c:	22 9a       	sbi	0x04, 2	; 4
     c9e:	21 9a       	sbi	0x04, 1	; 4
     ca0:	27 9a       	sbi	0x04, 7	; 4
     ca2:	20 9a       	sbi	0x04, 0	; 4
     ca4:	8c b5       	in	r24, 0x2c	; 44
     ca6:	80 61       	ori	r24, 0x10	; 16
     ca8:	8c bd       	out	0x2c, r24	; 44
     caa:	8c b5       	in	r24, 0x2c	; 44
     cac:	81 60       	ori	r24, 0x01	; 1
     cae:	8c bd       	out	0x2c, r24	; 44
     cb0:	8c b5       	in	r24, 0x2c	; 44
     cb2:	80 64       	ori	r24, 0x40	; 64
     cb4:	8c bd       	out	0x2c, r24	; 44
     cb6:	08 95       	ret

00000cb8 <SPI_send>:
     cb8:	8e bd       	out	0x2e, r24	; 46
     cba:	0d b4       	in	r0, 0x2d	; 45
     cbc:	07 fe       	sbrs	r0, 7
     cbe:	fd cf       	rjmp	.-6      	; 0xcba <SPI_send+0x2>
     cc0:	08 95       	ret

00000cc2 <SPI_read>:
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	f9 df       	rcall	.-14     	; 0xcb8 <SPI_send>
     cc6:	0d b4       	in	r0, 0x2d	; 45
     cc8:	07 fe       	sbrs	r0, 7
     cca:	fd cf       	rjmp	.-6      	; 0xcc6 <SPI_read+0x4>
     ccc:	8e b5       	in	r24, 0x2e	; 46
     cce:	08 95       	ret

00000cd0 <SPI_select>:
	
}

void SPI_select(void){
	clear_bit(PORTB, SS);
     cd0:	2f 98       	cbi	0x05, 7	; 5
     cd2:	08 95       	ret

00000cd4 <SPI_deselect>:
}

void SPI_deselect(void){
	set_bit(PORTB, SS);
     cd4:	2f 9a       	sbi	0x05, 7	; 5
     cd6:	08 95       	ret

00000cd8 <PWM_init>:

void PWM_init(void){
	//if clk_io = 1 / F_CPU: prescalar = 8, TOP = 39 999

	//select source of clock signal and set prescaler = 8
	clear_bit(TCCR1B, CS12);
     cd8:	e1 e8       	ldi	r30, 0x81	; 129
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	8b 7f       	andi	r24, 0xFB	; 251
     ce0:	80 83       	st	Z, r24
	set_bit(TCCR1B, CS11);
     ce2:	80 81       	ld	r24, Z
     ce4:	82 60       	ori	r24, 0x02	; 2
     ce6:	80 83       	st	Z, r24
	clear_bit(TCCR1B, CS10);
     ce8:	80 81       	ld	r24, Z
     cea:	8e 7f       	andi	r24, 0xFE	; 254
     cec:	80 83       	st	Z, r24
	
	
	//fast PWM (16 bit, TOP in ICR1) page 145 (mode 14 table 17-2)
	set_bit(TCCR1B, WGM13);
     cee:	80 81       	ld	r24, Z
     cf0:	80 61       	ori	r24, 0x10	; 16
     cf2:	80 83       	st	Z, r24
	set_bit(TCCR1B, WGM12);
     cf4:	80 81       	ld	r24, Z
     cf6:	88 60       	ori	r24, 0x08	; 8
     cf8:	80 83       	st	Z, r24
	set_bit(TCCR1A, WGM11);
     cfa:	e0 e8       	ldi	r30, 0x80	; 128
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	82 60       	ori	r24, 0x02	; 2
     d02:	80 83       	st	Z, r24
	clear_bit(TCCR1A, WGM10);
     d04:	80 81       	ld	r24, Z
     d06:	8e 7f       	andi	r24, 0xFE	; 254
     d08:	80 83       	st	Z, r24
	
	//set TOP so that we have a period of 20 ms
	ICR1 = F_CPU/PRESCALER*PERIOD_MS/1000 - 1; 
     d0a:	8f e3       	ldi	r24, 0x3F	; 63
     d0c:	9c e9       	ldi	r25, 0x9C	; 156
     d0e:	90 93 87 00 	sts	0x0087, r25
     d12:	80 93 86 00 	sts	0x0086, r24
	
	//compare output mode (Normal mode)
	set_bit(TCCR1A, COM1A1);
     d16:	80 81       	ld	r24, Z
     d18:	80 68       	ori	r24, 0x80	; 128
     d1a:	80 83       	st	Z, r24
	
	//set output pin PB5(OC1A: output clock 1 A)
	set_bit(DDRB, DDB5);
     d1c:	25 9a       	sbi	0x04, 5	; 4
     d1e:	08 95       	ret

00000d20 <PWM_set_width>:

	//compares TCTn and OCRnx - cleared when match -> TCTn = BOTTOM
}

void PWM_set_width(float on_time_ms){
	OCR1A = F_CPU/PRESCALER*on_time_ms/1000-1; 
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	34 e2       	ldi	r19, 0x24	; 36
     d24:	44 ef       	ldi	r20, 0xF4	; 244
     d26:	59 e4       	ldi	r21, 0x49	; 73
     d28:	c6 d2       	rcall	.+1420   	; 0x12b6 <__mulsf3>
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	4a e7       	ldi	r20, 0x7A	; 122
     d30:	54 e4       	ldi	r21, 0x44	; 68
     d32:	72 d1       	rcall	.+740    	; 0x1018 <__divsf3>
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e8       	ldi	r20, 0x80	; 128
     d3a:	5f e3       	ldi	r21, 0x3F	; 63
     d3c:	04 d1       	rcall	.+520    	; 0xf46 <__subsf3>
     d3e:	d9 d1       	rcall	.+946    	; 0x10f2 <__fixunssfsi>
     d40:	70 93 89 00 	sts	0x0089, r23
     d44:	60 93 88 00 	sts	0x0088, r22
     d48:	08 95       	ret

00000d4a <time_reset>:
	
}

//setter time started til current time
void time_reset(void) {
	TCNT3 = 0;
     d4a:	10 92 95 00 	sts	0x0095, r1
     d4e:	10 92 94 00 	sts	0x0094, r1
	//printf("OVERFLOW FLAG: %d\n", test_bit(TIFR3, TOV3));
	set_bit(TIFR3, TOV3);
     d52:	c0 9a       	sbi	0x18, 0	; 24
     d54:	08 95       	ret

00000d56 <time_init>:

void time_init(){
	//Normal port operation, non PWM
	
	//prescaler 256 (see table 20-9)
	set_bit(TCCR3B, CS32);
     d56:	e1 e9       	ldi	r30, 0x91	; 145
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	84 60       	ori	r24, 0x04	; 4
     d5e:	80 83       	st	Z, r24
	time_reset();
     d60:	f4 cf       	rjmp	.-24     	; 0xd4a <time_reset>
     d62:	08 95       	ret

00000d64 <time_passed>:
	TCNT3 = 0;
	//printf("OVERFLOW FLAG: %d\n", test_bit(TIFR3, TOV3));
	set_bit(TIFR3, TOV3);
}

uint16_t time_passed(void){
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
	uint16_t time_passed = TCNT3;
     d68:	c0 91 94 00 	lds	r28, 0x0094
     d6c:	d0 91 95 00 	lds	r29, 0x0095
	time_reset();
     d70:	ec df       	rcall	.-40     	; 0xd4a <time_reset>
	return time_passed;
}
     d72:	ce 01       	movw	r24, r28
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <TWI_Master_Initialise>:
     d7a:	8c e0       	ldi	r24, 0x0C	; 12
     d7c:	80 93 b8 00 	sts	0x00B8, r24
     d80:	8f ef       	ldi	r24, 0xFF	; 255
     d82:	80 93 bb 00 	sts	0x00BB, r24
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	80 93 bc 00 	sts	0x00BC, r24
     d8c:	08 95       	ret

00000d8e <TWI_Start_Transceiver_With_Data>:
     d8e:	ec eb       	ldi	r30, 0xBC	; 188
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	20 81       	ld	r18, Z
     d94:	20 fd       	sbrc	r18, 0
     d96:	fd cf       	rjmp	.-6      	; 0xd92 <TWI_Start_Transceiver_With_Data+0x4>
     d98:	60 93 8d 03 	sts	0x038D, r22
     d9c:	fc 01       	movw	r30, r24
     d9e:	20 81       	ld	r18, Z
     da0:	20 93 8e 03 	sts	0x038E, r18
     da4:	20 fd       	sbrc	r18, 0
     da6:	0c c0       	rjmp	.+24     	; 0xdc0 <TWI_Start_Transceiver_With_Data+0x32>
     da8:	62 30       	cpi	r22, 0x02	; 2
     daa:	50 f0       	brcs	.+20     	; 0xdc0 <TWI_Start_Transceiver_With_Data+0x32>
     dac:	dc 01       	movw	r26, r24
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	ef e8       	ldi	r30, 0x8F	; 143
     db2:	f3 e0       	ldi	r31, 0x03	; 3
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	9d 91       	ld	r25, X+
     db8:	91 93       	st	Z+, r25
     dba:	8f 5f       	subi	r24, 0xFF	; 255
     dbc:	86 13       	cpse	r24, r22
     dbe:	fb cf       	rjmp	.-10     	; 0xdb6 <TWI_Start_Transceiver_With_Data+0x28>
     dc0:	10 92 8c 03 	sts	0x038C, r1
     dc4:	88 ef       	ldi	r24, 0xF8	; 248
     dc6:	80 93 06 02 	sts	0x0206, r24
     dca:	85 ea       	ldi	r24, 0xA5	; 165
     dcc:	80 93 bc 00 	sts	0x00BC, r24
     dd0:	08 95       	ret

00000dd2 <__vector_39>:
     dd2:	1f 92       	push	r1
     dd4:	0f 92       	push	r0
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	0f 92       	push	r0
     dda:	11 24       	eor	r1, r1
     ddc:	0b b6       	in	r0, 0x3b	; 59
     dde:	0f 92       	push	r0
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	8f 93       	push	r24
     de6:	9f 93       	push	r25
     de8:	af 93       	push	r26
     dea:	bf 93       	push	r27
     dec:	ef 93       	push	r30
     dee:	ff 93       	push	r31
     df0:	80 91 b9 00 	lds	r24, 0x00B9
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	fc 01       	movw	r30, r24
     df8:	38 97       	sbiw	r30, 0x08	; 8
     dfa:	e1 35       	cpi	r30, 0x51	; 81
     dfc:	f1 05       	cpc	r31, r1
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <__vector_39+0x30>
     e00:	55 c0       	rjmp	.+170    	; 0xeac <__vector_39+0xda>
     e02:	ee 58       	subi	r30, 0x8E	; 142
     e04:	ff 4f       	sbci	r31, 0xFF	; 255
     e06:	ba c2       	rjmp	.+1396   	; 0x137c <__tablejump2__>
     e08:	10 92 8b 03 	sts	0x038B, r1
     e0c:	e0 91 8b 03 	lds	r30, 0x038B
     e10:	80 91 8d 03 	lds	r24, 0x038D
     e14:	e8 17       	cp	r30, r24
     e16:	70 f4       	brcc	.+28     	; 0xe34 <__vector_39+0x62>
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	8e 0f       	add	r24, r30
     e1c:	80 93 8b 03 	sts	0x038B, r24
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	e2 57       	subi	r30, 0x72	; 114
     e24:	fc 4f       	sbci	r31, 0xFC	; 252
     e26:	80 81       	ld	r24, Z
     e28:	80 93 bb 00 	sts	0x00BB, r24
     e2c:	85 e8       	ldi	r24, 0x85	; 133
     e2e:	80 93 bc 00 	sts	0x00BC, r24
     e32:	43 c0       	rjmp	.+134    	; 0xeba <__vector_39+0xe8>
     e34:	80 91 8c 03 	lds	r24, 0x038C
     e38:	81 60       	ori	r24, 0x01	; 1
     e3a:	80 93 8c 03 	sts	0x038C, r24
     e3e:	84 e9       	ldi	r24, 0x94	; 148
     e40:	80 93 bc 00 	sts	0x00BC, r24
     e44:	3a c0       	rjmp	.+116    	; 0xeba <__vector_39+0xe8>
     e46:	e0 91 8b 03 	lds	r30, 0x038B
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	8e 0f       	add	r24, r30
     e4e:	80 93 8b 03 	sts	0x038B, r24
     e52:	80 91 bb 00 	lds	r24, 0x00BB
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	e2 57       	subi	r30, 0x72	; 114
     e5a:	fc 4f       	sbci	r31, 0xFC	; 252
     e5c:	80 83       	st	Z, r24
     e5e:	20 91 8b 03 	lds	r18, 0x038B
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	80 91 8d 03 	lds	r24, 0x038D
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	28 17       	cp	r18, r24
     e6e:	39 07       	cpc	r19, r25
     e70:	24 f4       	brge	.+8      	; 0xe7a <__vector_39+0xa8>
     e72:	85 ec       	ldi	r24, 0xC5	; 197
     e74:	80 93 bc 00 	sts	0x00BC, r24
     e78:	20 c0       	rjmp	.+64     	; 0xeba <__vector_39+0xe8>
     e7a:	85 e8       	ldi	r24, 0x85	; 133
     e7c:	80 93 bc 00 	sts	0x00BC, r24
     e80:	1c c0       	rjmp	.+56     	; 0xeba <__vector_39+0xe8>
     e82:	80 91 bb 00 	lds	r24, 0x00BB
     e86:	e0 91 8b 03 	lds	r30, 0x038B
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	e2 57       	subi	r30, 0x72	; 114
     e8e:	fc 4f       	sbci	r31, 0xFC	; 252
     e90:	80 83       	st	Z, r24
     e92:	80 91 8c 03 	lds	r24, 0x038C
     e96:	81 60       	ori	r24, 0x01	; 1
     e98:	80 93 8c 03 	sts	0x038C, r24
     e9c:	84 e9       	ldi	r24, 0x94	; 148
     e9e:	80 93 bc 00 	sts	0x00BC, r24
     ea2:	0b c0       	rjmp	.+22     	; 0xeba <__vector_39+0xe8>
     ea4:	85 ea       	ldi	r24, 0xA5	; 165
     ea6:	80 93 bc 00 	sts	0x00BC, r24
     eaa:	07 c0       	rjmp	.+14     	; 0xeba <__vector_39+0xe8>
     eac:	80 91 b9 00 	lds	r24, 0x00B9
     eb0:	80 93 06 02 	sts	0x0206, r24
     eb4:	84 e0       	ldi	r24, 0x04	; 4
     eb6:	80 93 bc 00 	sts	0x00BC, r24
     eba:	ff 91       	pop	r31
     ebc:	ef 91       	pop	r30
     ebe:	bf 91       	pop	r27
     ec0:	af 91       	pop	r26
     ec2:	9f 91       	pop	r25
     ec4:	8f 91       	pop	r24
     ec6:	3f 91       	pop	r19
     ec8:	2f 91       	pop	r18
     eca:	0f 90       	pop	r0
     ecc:	0b be       	out	0x3b, r0	; 59
     ece:	0f 90       	pop	r0
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	0f 90       	pop	r0
     ed4:	1f 90       	pop	r1
     ed6:	18 95       	reti

00000ed8 <usart_transmit_to_computer>:
     ed8:	e0 ec       	ldi	r30, 0xC0	; 192
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	90 81       	ld	r25, Z
     ede:	95 ff       	sbrs	r25, 5
     ee0:	fd cf       	rjmp	.-6      	; 0xedc <usart_transmit_to_computer+0x4>
     ee2:	80 93 c6 00 	sts	0x00C6, r24
     ee6:	08 95       	ret

00000ee8 <usart_receive_from_computer>:
     ee8:	e0 ec       	ldi	r30, 0xC0	; 192
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	88 23       	and	r24, r24
     ef0:	ec f7       	brge	.-6      	; 0xeec <usart_receive_from_computer+0x4>
     ef2:	80 91 c6 00 	lds	r24, 0x00C6
     ef6:	08 95       	ret

00000ef8 <usart_init>:
     ef8:	90 93 c5 00 	sts	0x00C5, r25
     efc:	80 93 c4 00 	sts	0x00C4, r24
     f00:	88 e1       	ldi	r24, 0x18	; 24
     f02:	80 93 c1 00 	sts	0x00C1, r24
     f06:	8e e0       	ldi	r24, 0x0E	; 14
     f08:	80 93 c2 00 	sts	0x00C2, r24
     f0c:	64 e7       	ldi	r22, 0x74	; 116
     f0e:	77 e0       	ldi	r23, 0x07	; 7
     f10:	8c e6       	ldi	r24, 0x6C	; 108
     f12:	97 e0       	ldi	r25, 0x07	; 7
     f14:	60 c2       	rjmp	.+1216   	; 0x13d6 <fdevopen>
     f16:	08 95       	ret

00000f18 <initialize>:
void test(void);
void test_servo_and_ir(void);


void initialize(void){
	cli();
     f18:	f8 94       	cli
	usart_init(MYUBRR);
     f1a:	87 e6       	ldi	r24, 0x67	; 103
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	ec df       	rcall	.-40     	; 0xef8 <usart_init>
	CAN_init();
     f20:	ac d9       	rcall	.-3240   	; 0x27a <CAN_init>
	servo_init();
     f22:	a6 de       	rcall	.-692    	; 0xc70 <servo_init>
	IR_init();
     f24:	ba da       	rcall	.-2700   	; 0x49a <IR_init>
	motor_init(DEFAULT);
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	3e dd       	rcall	.-1412   	; 0x9a6 <motor_init>
	PI_init();
     f2a:	a8 dd       	rcall	.-1200   	; 0xa7c <PI_init>
	CONTROL_init();
     f2c:	6b da       	rcall	.-2858   	; 0x404 <CONTROL_init>
	solenoid_init();
     f2e:	a7 de       	rcall	.-690    	; 0xc7e <solenoid_init>
	sei();
     f30:	78 94       	sei
     f32:	08 95       	ret

00000f34 <main>:
}


int main(void){
	initialize(); 
     f34:	f1 df       	rcall	.-30     	; 0xf18 <initialize>
	printf("[NODE2] Initialization complete!\n\n");
     f36:	80 e6       	ldi	r24, 0x60	; 96
     f38:	93 e0       	ldi	r25, 0x03	; 3
     f3a:	a8 d2       	rcall	.+1360   	; 0x148c <puts>
	//solenoid_send_pulse();
	CONTROL_run(CLOSED_LOOP);
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	73 da       	rcall	.-2842   	; 0x426 <CONTROL_run>
	
	return 0;
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	08 95       	ret

00000f46 <__subsf3>:
     f46:	50 58       	subi	r21, 0x80	; 128

00000f48 <__addsf3>:
     f48:	bb 27       	eor	r27, r27
     f4a:	aa 27       	eor	r26, r26
     f4c:	0e d0       	rcall	.+28     	; 0xf6a <__addsf3x>
     f4e:	75 c1       	rjmp	.+746    	; 0x123a <__fp_round>
     f50:	66 d1       	rcall	.+716    	; 0x121e <__fp_pscA>
     f52:	30 f0       	brcs	.+12     	; 0xf60 <__addsf3+0x18>
     f54:	6b d1       	rcall	.+726    	; 0x122c <__fp_pscB>
     f56:	20 f0       	brcs	.+8      	; 0xf60 <__addsf3+0x18>
     f58:	31 f4       	brne	.+12     	; 0xf66 <__addsf3+0x1e>
     f5a:	9f 3f       	cpi	r25, 0xFF	; 255
     f5c:	11 f4       	brne	.+4      	; 0xf62 <__addsf3+0x1a>
     f5e:	1e f4       	brtc	.+6      	; 0xf66 <__addsf3+0x1e>
     f60:	5b c1       	rjmp	.+694    	; 0x1218 <__fp_nan>
     f62:	0e f4       	brtc	.+2      	; 0xf66 <__addsf3+0x1e>
     f64:	e0 95       	com	r30
     f66:	e7 fb       	bst	r30, 7
     f68:	51 c1       	rjmp	.+674    	; 0x120c <__fp_inf>

00000f6a <__addsf3x>:
     f6a:	e9 2f       	mov	r30, r25
     f6c:	77 d1       	rcall	.+750    	; 0x125c <__fp_split3>
     f6e:	80 f3       	brcs	.-32     	; 0xf50 <__addsf3+0x8>
     f70:	ba 17       	cp	r27, r26
     f72:	62 07       	cpc	r22, r18
     f74:	73 07       	cpc	r23, r19
     f76:	84 07       	cpc	r24, r20
     f78:	95 07       	cpc	r25, r21
     f7a:	18 f0       	brcs	.+6      	; 0xf82 <__addsf3x+0x18>
     f7c:	71 f4       	brne	.+28     	; 0xf9a <__addsf3x+0x30>
     f7e:	9e f5       	brtc	.+102    	; 0xfe6 <__addsf3x+0x7c>
     f80:	8f c1       	rjmp	.+798    	; 0x12a0 <__fp_zero>
     f82:	0e f4       	brtc	.+2      	; 0xf86 <__addsf3x+0x1c>
     f84:	e0 95       	com	r30
     f86:	0b 2e       	mov	r0, r27
     f88:	ba 2f       	mov	r27, r26
     f8a:	a0 2d       	mov	r26, r0
     f8c:	0b 01       	movw	r0, r22
     f8e:	b9 01       	movw	r22, r18
     f90:	90 01       	movw	r18, r0
     f92:	0c 01       	movw	r0, r24
     f94:	ca 01       	movw	r24, r20
     f96:	a0 01       	movw	r20, r0
     f98:	11 24       	eor	r1, r1
     f9a:	ff 27       	eor	r31, r31
     f9c:	59 1b       	sub	r21, r25
     f9e:	99 f0       	breq	.+38     	; 0xfc6 <__addsf3x+0x5c>
     fa0:	59 3f       	cpi	r21, 0xF9	; 249
     fa2:	50 f4       	brcc	.+20     	; 0xfb8 <__addsf3x+0x4e>
     fa4:	50 3e       	cpi	r21, 0xE0	; 224
     fa6:	68 f1       	brcs	.+90     	; 0x1002 <__addsf3x+0x98>
     fa8:	1a 16       	cp	r1, r26
     faa:	f0 40       	sbci	r31, 0x00	; 0
     fac:	a2 2f       	mov	r26, r18
     fae:	23 2f       	mov	r18, r19
     fb0:	34 2f       	mov	r19, r20
     fb2:	44 27       	eor	r20, r20
     fb4:	58 5f       	subi	r21, 0xF8	; 248
     fb6:	f3 cf       	rjmp	.-26     	; 0xf9e <__addsf3x+0x34>
     fb8:	46 95       	lsr	r20
     fba:	37 95       	ror	r19
     fbc:	27 95       	ror	r18
     fbe:	a7 95       	ror	r26
     fc0:	f0 40       	sbci	r31, 0x00	; 0
     fc2:	53 95       	inc	r21
     fc4:	c9 f7       	brne	.-14     	; 0xfb8 <__addsf3x+0x4e>
     fc6:	7e f4       	brtc	.+30     	; 0xfe6 <__addsf3x+0x7c>
     fc8:	1f 16       	cp	r1, r31
     fca:	ba 0b       	sbc	r27, r26
     fcc:	62 0b       	sbc	r22, r18
     fce:	73 0b       	sbc	r23, r19
     fd0:	84 0b       	sbc	r24, r20
     fd2:	ba f0       	brmi	.+46     	; 0x1002 <__addsf3x+0x98>
     fd4:	91 50       	subi	r25, 0x01	; 1
     fd6:	a1 f0       	breq	.+40     	; 0x1000 <__addsf3x+0x96>
     fd8:	ff 0f       	add	r31, r31
     fda:	bb 1f       	adc	r27, r27
     fdc:	66 1f       	adc	r22, r22
     fde:	77 1f       	adc	r23, r23
     fe0:	88 1f       	adc	r24, r24
     fe2:	c2 f7       	brpl	.-16     	; 0xfd4 <__addsf3x+0x6a>
     fe4:	0e c0       	rjmp	.+28     	; 0x1002 <__addsf3x+0x98>
     fe6:	ba 0f       	add	r27, r26
     fe8:	62 1f       	adc	r22, r18
     fea:	73 1f       	adc	r23, r19
     fec:	84 1f       	adc	r24, r20
     fee:	48 f4       	brcc	.+18     	; 0x1002 <__addsf3x+0x98>
     ff0:	87 95       	ror	r24
     ff2:	77 95       	ror	r23
     ff4:	67 95       	ror	r22
     ff6:	b7 95       	ror	r27
     ff8:	f7 95       	ror	r31
     ffa:	9e 3f       	cpi	r25, 0xFE	; 254
     ffc:	08 f0       	brcs	.+2      	; 0x1000 <__addsf3x+0x96>
     ffe:	b3 cf       	rjmp	.-154    	; 0xf66 <__addsf3+0x1e>
    1000:	93 95       	inc	r25
    1002:	88 0f       	add	r24, r24
    1004:	08 f0       	brcs	.+2      	; 0x1008 <__addsf3x+0x9e>
    1006:	99 27       	eor	r25, r25
    1008:	ee 0f       	add	r30, r30
    100a:	97 95       	ror	r25
    100c:	87 95       	ror	r24
    100e:	08 95       	ret

00001010 <__cmpsf2>:
    1010:	d9 d0       	rcall	.+434    	; 0x11c4 <__fp_cmp>
    1012:	08 f4       	brcc	.+2      	; 0x1016 <__cmpsf2+0x6>
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	08 95       	ret

00001018 <__divsf3>:
    1018:	0c d0       	rcall	.+24     	; 0x1032 <__divsf3x>
    101a:	0f c1       	rjmp	.+542    	; 0x123a <__fp_round>
    101c:	07 d1       	rcall	.+526    	; 0x122c <__fp_pscB>
    101e:	40 f0       	brcs	.+16     	; 0x1030 <__divsf3+0x18>
    1020:	fe d0       	rcall	.+508    	; 0x121e <__fp_pscA>
    1022:	30 f0       	brcs	.+12     	; 0x1030 <__divsf3+0x18>
    1024:	21 f4       	brne	.+8      	; 0x102e <__divsf3+0x16>
    1026:	5f 3f       	cpi	r21, 0xFF	; 255
    1028:	19 f0       	breq	.+6      	; 0x1030 <__divsf3+0x18>
    102a:	f0 c0       	rjmp	.+480    	; 0x120c <__fp_inf>
    102c:	51 11       	cpse	r21, r1
    102e:	39 c1       	rjmp	.+626    	; 0x12a2 <__fp_szero>
    1030:	f3 c0       	rjmp	.+486    	; 0x1218 <__fp_nan>

00001032 <__divsf3x>:
    1032:	14 d1       	rcall	.+552    	; 0x125c <__fp_split3>
    1034:	98 f3       	brcs	.-26     	; 0x101c <__divsf3+0x4>

00001036 <__divsf3_pse>:
    1036:	99 23       	and	r25, r25
    1038:	c9 f3       	breq	.-14     	; 0x102c <__divsf3+0x14>
    103a:	55 23       	and	r21, r21
    103c:	b1 f3       	breq	.-20     	; 0x102a <__divsf3+0x12>
    103e:	95 1b       	sub	r25, r21
    1040:	55 0b       	sbc	r21, r21
    1042:	bb 27       	eor	r27, r27
    1044:	aa 27       	eor	r26, r26
    1046:	62 17       	cp	r22, r18
    1048:	73 07       	cpc	r23, r19
    104a:	84 07       	cpc	r24, r20
    104c:	38 f0       	brcs	.+14     	; 0x105c <__divsf3_pse+0x26>
    104e:	9f 5f       	subi	r25, 0xFF	; 255
    1050:	5f 4f       	sbci	r21, 0xFF	; 255
    1052:	22 0f       	add	r18, r18
    1054:	33 1f       	adc	r19, r19
    1056:	44 1f       	adc	r20, r20
    1058:	aa 1f       	adc	r26, r26
    105a:	a9 f3       	breq	.-22     	; 0x1046 <__divsf3_pse+0x10>
    105c:	33 d0       	rcall	.+102    	; 0x10c4 <__divsf3_pse+0x8e>
    105e:	0e 2e       	mov	r0, r30
    1060:	3a f0       	brmi	.+14     	; 0x1070 <__divsf3_pse+0x3a>
    1062:	e0 e8       	ldi	r30, 0x80	; 128
    1064:	30 d0       	rcall	.+96     	; 0x10c6 <__divsf3_pse+0x90>
    1066:	91 50       	subi	r25, 0x01	; 1
    1068:	50 40       	sbci	r21, 0x00	; 0
    106a:	e6 95       	lsr	r30
    106c:	00 1c       	adc	r0, r0
    106e:	ca f7       	brpl	.-14     	; 0x1062 <__divsf3_pse+0x2c>
    1070:	29 d0       	rcall	.+82     	; 0x10c4 <__divsf3_pse+0x8e>
    1072:	fe 2f       	mov	r31, r30
    1074:	27 d0       	rcall	.+78     	; 0x10c4 <__divsf3_pse+0x8e>
    1076:	66 0f       	add	r22, r22
    1078:	77 1f       	adc	r23, r23
    107a:	88 1f       	adc	r24, r24
    107c:	bb 1f       	adc	r27, r27
    107e:	26 17       	cp	r18, r22
    1080:	37 07       	cpc	r19, r23
    1082:	48 07       	cpc	r20, r24
    1084:	ab 07       	cpc	r26, r27
    1086:	b0 e8       	ldi	r27, 0x80	; 128
    1088:	09 f0       	breq	.+2      	; 0x108c <__divsf3_pse+0x56>
    108a:	bb 0b       	sbc	r27, r27
    108c:	80 2d       	mov	r24, r0
    108e:	bf 01       	movw	r22, r30
    1090:	ff 27       	eor	r31, r31
    1092:	93 58       	subi	r25, 0x83	; 131
    1094:	5f 4f       	sbci	r21, 0xFF	; 255
    1096:	2a f0       	brmi	.+10     	; 0x10a2 <__divsf3_pse+0x6c>
    1098:	9e 3f       	cpi	r25, 0xFE	; 254
    109a:	51 05       	cpc	r21, r1
    109c:	68 f0       	brcs	.+26     	; 0x10b8 <__divsf3_pse+0x82>
    109e:	b6 c0       	rjmp	.+364    	; 0x120c <__fp_inf>
    10a0:	00 c1       	rjmp	.+512    	; 0x12a2 <__fp_szero>
    10a2:	5f 3f       	cpi	r21, 0xFF	; 255
    10a4:	ec f3       	brlt	.-6      	; 0x10a0 <__divsf3_pse+0x6a>
    10a6:	98 3e       	cpi	r25, 0xE8	; 232
    10a8:	dc f3       	brlt	.-10     	; 0x10a0 <__divsf3_pse+0x6a>
    10aa:	86 95       	lsr	r24
    10ac:	77 95       	ror	r23
    10ae:	67 95       	ror	r22
    10b0:	b7 95       	ror	r27
    10b2:	f7 95       	ror	r31
    10b4:	9f 5f       	subi	r25, 0xFF	; 255
    10b6:	c9 f7       	brne	.-14     	; 0x10aa <__divsf3_pse+0x74>
    10b8:	88 0f       	add	r24, r24
    10ba:	91 1d       	adc	r25, r1
    10bc:	96 95       	lsr	r25
    10be:	87 95       	ror	r24
    10c0:	97 f9       	bld	r25, 7
    10c2:	08 95       	ret
    10c4:	e1 e0       	ldi	r30, 0x01	; 1
    10c6:	66 0f       	add	r22, r22
    10c8:	77 1f       	adc	r23, r23
    10ca:	88 1f       	adc	r24, r24
    10cc:	bb 1f       	adc	r27, r27
    10ce:	62 17       	cp	r22, r18
    10d0:	73 07       	cpc	r23, r19
    10d2:	84 07       	cpc	r24, r20
    10d4:	ba 07       	cpc	r27, r26
    10d6:	20 f0       	brcs	.+8      	; 0x10e0 <__divsf3_pse+0xaa>
    10d8:	62 1b       	sub	r22, r18
    10da:	73 0b       	sbc	r23, r19
    10dc:	84 0b       	sbc	r24, r20
    10de:	ba 0b       	sbc	r27, r26
    10e0:	ee 1f       	adc	r30, r30
    10e2:	88 f7       	brcc	.-30     	; 0x10c6 <__divsf3_pse+0x90>
    10e4:	e0 95       	com	r30
    10e6:	08 95       	ret

000010e8 <__fixsfsi>:
    10e8:	04 d0       	rcall	.+8      	; 0x10f2 <__fixunssfsi>
    10ea:	68 94       	set
    10ec:	b1 11       	cpse	r27, r1
    10ee:	d9 c0       	rjmp	.+434    	; 0x12a2 <__fp_szero>
    10f0:	08 95       	ret

000010f2 <__fixunssfsi>:
    10f2:	bc d0       	rcall	.+376    	; 0x126c <__fp_splitA>
    10f4:	88 f0       	brcs	.+34     	; 0x1118 <__fixunssfsi+0x26>
    10f6:	9f 57       	subi	r25, 0x7F	; 127
    10f8:	90 f0       	brcs	.+36     	; 0x111e <__fixunssfsi+0x2c>
    10fa:	b9 2f       	mov	r27, r25
    10fc:	99 27       	eor	r25, r25
    10fe:	b7 51       	subi	r27, 0x17	; 23
    1100:	a0 f0       	brcs	.+40     	; 0x112a <__fixunssfsi+0x38>
    1102:	d1 f0       	breq	.+52     	; 0x1138 <__fixunssfsi+0x46>
    1104:	66 0f       	add	r22, r22
    1106:	77 1f       	adc	r23, r23
    1108:	88 1f       	adc	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	1a f0       	brmi	.+6      	; 0x1114 <__fixunssfsi+0x22>
    110e:	ba 95       	dec	r27
    1110:	c9 f7       	brne	.-14     	; 0x1104 <__fixunssfsi+0x12>
    1112:	12 c0       	rjmp	.+36     	; 0x1138 <__fixunssfsi+0x46>
    1114:	b1 30       	cpi	r27, 0x01	; 1
    1116:	81 f0       	breq	.+32     	; 0x1138 <__fixunssfsi+0x46>
    1118:	c3 d0       	rcall	.+390    	; 0x12a0 <__fp_zero>
    111a:	b1 e0       	ldi	r27, 0x01	; 1
    111c:	08 95       	ret
    111e:	c0 c0       	rjmp	.+384    	; 0x12a0 <__fp_zero>
    1120:	67 2f       	mov	r22, r23
    1122:	78 2f       	mov	r23, r24
    1124:	88 27       	eor	r24, r24
    1126:	b8 5f       	subi	r27, 0xF8	; 248
    1128:	39 f0       	breq	.+14     	; 0x1138 <__fixunssfsi+0x46>
    112a:	b9 3f       	cpi	r27, 0xF9	; 249
    112c:	cc f3       	brlt	.-14     	; 0x1120 <__fixunssfsi+0x2e>
    112e:	86 95       	lsr	r24
    1130:	77 95       	ror	r23
    1132:	67 95       	ror	r22
    1134:	b3 95       	inc	r27
    1136:	d9 f7       	brne	.-10     	; 0x112e <__fixunssfsi+0x3c>
    1138:	3e f4       	brtc	.+14     	; 0x1148 <__fixunssfsi+0x56>
    113a:	90 95       	com	r25
    113c:	80 95       	com	r24
    113e:	70 95       	com	r23
    1140:	61 95       	neg	r22
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	8f 4f       	sbci	r24, 0xFF	; 255
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	08 95       	ret

0000114a <__floatunsisf>:
    114a:	e8 94       	clt
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <__floatsisf+0x12>

0000114e <__floatsisf>:
    114e:	97 fb       	bst	r25, 7
    1150:	3e f4       	brtc	.+14     	; 0x1160 <__floatsisf+0x12>
    1152:	90 95       	com	r25
    1154:	80 95       	com	r24
    1156:	70 95       	com	r23
    1158:	61 95       	neg	r22
    115a:	7f 4f       	sbci	r23, 0xFF	; 255
    115c:	8f 4f       	sbci	r24, 0xFF	; 255
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	99 23       	and	r25, r25
    1162:	a9 f0       	breq	.+42     	; 0x118e <__floatsisf+0x40>
    1164:	f9 2f       	mov	r31, r25
    1166:	96 e9       	ldi	r25, 0x96	; 150
    1168:	bb 27       	eor	r27, r27
    116a:	93 95       	inc	r25
    116c:	f6 95       	lsr	r31
    116e:	87 95       	ror	r24
    1170:	77 95       	ror	r23
    1172:	67 95       	ror	r22
    1174:	b7 95       	ror	r27
    1176:	f1 11       	cpse	r31, r1
    1178:	f8 cf       	rjmp	.-16     	; 0x116a <__floatsisf+0x1c>
    117a:	fa f4       	brpl	.+62     	; 0x11ba <__floatsisf+0x6c>
    117c:	bb 0f       	add	r27, r27
    117e:	11 f4       	brne	.+4      	; 0x1184 <__floatsisf+0x36>
    1180:	60 ff       	sbrs	r22, 0
    1182:	1b c0       	rjmp	.+54     	; 0x11ba <__floatsisf+0x6c>
    1184:	6f 5f       	subi	r22, 0xFF	; 255
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	8f 4f       	sbci	r24, 0xFF	; 255
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	16 c0       	rjmp	.+44     	; 0x11ba <__floatsisf+0x6c>
    118e:	88 23       	and	r24, r24
    1190:	11 f0       	breq	.+4      	; 0x1196 <__floatsisf+0x48>
    1192:	96 e9       	ldi	r25, 0x96	; 150
    1194:	11 c0       	rjmp	.+34     	; 0x11b8 <__floatsisf+0x6a>
    1196:	77 23       	and	r23, r23
    1198:	21 f0       	breq	.+8      	; 0x11a2 <__floatsisf+0x54>
    119a:	9e e8       	ldi	r25, 0x8E	; 142
    119c:	87 2f       	mov	r24, r23
    119e:	76 2f       	mov	r23, r22
    11a0:	05 c0       	rjmp	.+10     	; 0x11ac <__floatsisf+0x5e>
    11a2:	66 23       	and	r22, r22
    11a4:	71 f0       	breq	.+28     	; 0x11c2 <__floatsisf+0x74>
    11a6:	96 e8       	ldi	r25, 0x86	; 134
    11a8:	86 2f       	mov	r24, r22
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	2a f0       	brmi	.+10     	; 0x11ba <__floatsisf+0x6c>
    11b0:	9a 95       	dec	r25
    11b2:	66 0f       	add	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	88 1f       	adc	r24, r24
    11b8:	da f7       	brpl	.-10     	; 0x11b0 <__floatsisf+0x62>
    11ba:	88 0f       	add	r24, r24
    11bc:	96 95       	lsr	r25
    11be:	87 95       	ror	r24
    11c0:	97 f9       	bld	r25, 7
    11c2:	08 95       	ret

000011c4 <__fp_cmp>:
    11c4:	99 0f       	add	r25, r25
    11c6:	00 08       	sbc	r0, r0
    11c8:	55 0f       	add	r21, r21
    11ca:	aa 0b       	sbc	r26, r26
    11cc:	e0 e8       	ldi	r30, 0x80	; 128
    11ce:	fe ef       	ldi	r31, 0xFE	; 254
    11d0:	16 16       	cp	r1, r22
    11d2:	17 06       	cpc	r1, r23
    11d4:	e8 07       	cpc	r30, r24
    11d6:	f9 07       	cpc	r31, r25
    11d8:	c0 f0       	brcs	.+48     	; 0x120a <__fp_cmp+0x46>
    11da:	12 16       	cp	r1, r18
    11dc:	13 06       	cpc	r1, r19
    11de:	e4 07       	cpc	r30, r20
    11e0:	f5 07       	cpc	r31, r21
    11e2:	98 f0       	brcs	.+38     	; 0x120a <__fp_cmp+0x46>
    11e4:	62 1b       	sub	r22, r18
    11e6:	73 0b       	sbc	r23, r19
    11e8:	84 0b       	sbc	r24, r20
    11ea:	95 0b       	sbc	r25, r21
    11ec:	39 f4       	brne	.+14     	; 0x11fc <__fp_cmp+0x38>
    11ee:	0a 26       	eor	r0, r26
    11f0:	61 f0       	breq	.+24     	; 0x120a <__fp_cmp+0x46>
    11f2:	23 2b       	or	r18, r19
    11f4:	24 2b       	or	r18, r20
    11f6:	25 2b       	or	r18, r21
    11f8:	21 f4       	brne	.+8      	; 0x1202 <__fp_cmp+0x3e>
    11fa:	08 95       	ret
    11fc:	0a 26       	eor	r0, r26
    11fe:	09 f4       	brne	.+2      	; 0x1202 <__fp_cmp+0x3e>
    1200:	a1 40       	sbci	r26, 0x01	; 1
    1202:	a6 95       	lsr	r26
    1204:	8f ef       	ldi	r24, 0xFF	; 255
    1206:	81 1d       	adc	r24, r1
    1208:	81 1d       	adc	r24, r1
    120a:	08 95       	ret

0000120c <__fp_inf>:
    120c:	97 f9       	bld	r25, 7
    120e:	9f 67       	ori	r25, 0x7F	; 127
    1210:	80 e8       	ldi	r24, 0x80	; 128
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	08 95       	ret

00001218 <__fp_nan>:
    1218:	9f ef       	ldi	r25, 0xFF	; 255
    121a:	80 ec       	ldi	r24, 0xC0	; 192
    121c:	08 95       	ret

0000121e <__fp_pscA>:
    121e:	00 24       	eor	r0, r0
    1220:	0a 94       	dec	r0
    1222:	16 16       	cp	r1, r22
    1224:	17 06       	cpc	r1, r23
    1226:	18 06       	cpc	r1, r24
    1228:	09 06       	cpc	r0, r25
    122a:	08 95       	ret

0000122c <__fp_pscB>:
    122c:	00 24       	eor	r0, r0
    122e:	0a 94       	dec	r0
    1230:	12 16       	cp	r1, r18
    1232:	13 06       	cpc	r1, r19
    1234:	14 06       	cpc	r1, r20
    1236:	05 06       	cpc	r0, r21
    1238:	08 95       	ret

0000123a <__fp_round>:
    123a:	09 2e       	mov	r0, r25
    123c:	03 94       	inc	r0
    123e:	00 0c       	add	r0, r0
    1240:	11 f4       	brne	.+4      	; 0x1246 <__fp_round+0xc>
    1242:	88 23       	and	r24, r24
    1244:	52 f0       	brmi	.+20     	; 0x125a <__fp_round+0x20>
    1246:	bb 0f       	add	r27, r27
    1248:	40 f4       	brcc	.+16     	; 0x125a <__fp_round+0x20>
    124a:	bf 2b       	or	r27, r31
    124c:	11 f4       	brne	.+4      	; 0x1252 <__fp_round+0x18>
    124e:	60 ff       	sbrs	r22, 0
    1250:	04 c0       	rjmp	.+8      	; 0x125a <__fp_round+0x20>
    1252:	6f 5f       	subi	r22, 0xFF	; 255
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	8f 4f       	sbci	r24, 0xFF	; 255
    1258:	9f 4f       	sbci	r25, 0xFF	; 255
    125a:	08 95       	ret

0000125c <__fp_split3>:
    125c:	57 fd       	sbrc	r21, 7
    125e:	90 58       	subi	r25, 0x80	; 128
    1260:	44 0f       	add	r20, r20
    1262:	55 1f       	adc	r21, r21
    1264:	59 f0       	breq	.+22     	; 0x127c <__fp_splitA+0x10>
    1266:	5f 3f       	cpi	r21, 0xFF	; 255
    1268:	71 f0       	breq	.+28     	; 0x1286 <__fp_splitA+0x1a>
    126a:	47 95       	ror	r20

0000126c <__fp_splitA>:
    126c:	88 0f       	add	r24, r24
    126e:	97 fb       	bst	r25, 7
    1270:	99 1f       	adc	r25, r25
    1272:	61 f0       	breq	.+24     	; 0x128c <__fp_splitA+0x20>
    1274:	9f 3f       	cpi	r25, 0xFF	; 255
    1276:	79 f0       	breq	.+30     	; 0x1296 <__fp_splitA+0x2a>
    1278:	87 95       	ror	r24
    127a:	08 95       	ret
    127c:	12 16       	cp	r1, r18
    127e:	13 06       	cpc	r1, r19
    1280:	14 06       	cpc	r1, r20
    1282:	55 1f       	adc	r21, r21
    1284:	f2 cf       	rjmp	.-28     	; 0x126a <__fp_split3+0xe>
    1286:	46 95       	lsr	r20
    1288:	f1 df       	rcall	.-30     	; 0x126c <__fp_splitA>
    128a:	08 c0       	rjmp	.+16     	; 0x129c <__fp_splitA+0x30>
    128c:	16 16       	cp	r1, r22
    128e:	17 06       	cpc	r1, r23
    1290:	18 06       	cpc	r1, r24
    1292:	99 1f       	adc	r25, r25
    1294:	f1 cf       	rjmp	.-30     	; 0x1278 <__fp_splitA+0xc>
    1296:	86 95       	lsr	r24
    1298:	71 05       	cpc	r23, r1
    129a:	61 05       	cpc	r22, r1
    129c:	08 94       	sec
    129e:	08 95       	ret

000012a0 <__fp_zero>:
    12a0:	e8 94       	clt

000012a2 <__fp_szero>:
    12a2:	bb 27       	eor	r27, r27
    12a4:	66 27       	eor	r22, r22
    12a6:	77 27       	eor	r23, r23
    12a8:	cb 01       	movw	r24, r22
    12aa:	97 f9       	bld	r25, 7
    12ac:	08 95       	ret

000012ae <__gesf2>:
    12ae:	8a df       	rcall	.-236    	; 0x11c4 <__fp_cmp>
    12b0:	08 f4       	brcc	.+2      	; 0x12b4 <__gesf2+0x6>
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	08 95       	ret

000012b6 <__mulsf3>:
    12b6:	0b d0       	rcall	.+22     	; 0x12ce <__mulsf3x>
    12b8:	c0 cf       	rjmp	.-128    	; 0x123a <__fp_round>
    12ba:	b1 df       	rcall	.-158    	; 0x121e <__fp_pscA>
    12bc:	28 f0       	brcs	.+10     	; 0x12c8 <__mulsf3+0x12>
    12be:	b6 df       	rcall	.-148    	; 0x122c <__fp_pscB>
    12c0:	18 f0       	brcs	.+6      	; 0x12c8 <__mulsf3+0x12>
    12c2:	95 23       	and	r25, r21
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <__mulsf3+0x12>
    12c6:	a2 cf       	rjmp	.-188    	; 0x120c <__fp_inf>
    12c8:	a7 cf       	rjmp	.-178    	; 0x1218 <__fp_nan>
    12ca:	11 24       	eor	r1, r1
    12cc:	ea cf       	rjmp	.-44     	; 0x12a2 <__fp_szero>

000012ce <__mulsf3x>:
    12ce:	c6 df       	rcall	.-116    	; 0x125c <__fp_split3>
    12d0:	a0 f3       	brcs	.-24     	; 0x12ba <__mulsf3+0x4>

000012d2 <__mulsf3_pse>:
    12d2:	95 9f       	mul	r25, r21
    12d4:	d1 f3       	breq	.-12     	; 0x12ca <__mulsf3+0x14>
    12d6:	95 0f       	add	r25, r21
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	55 1f       	adc	r21, r21
    12dc:	62 9f       	mul	r22, r18
    12de:	f0 01       	movw	r30, r0
    12e0:	72 9f       	mul	r23, r18
    12e2:	bb 27       	eor	r27, r27
    12e4:	f0 0d       	add	r31, r0
    12e6:	b1 1d       	adc	r27, r1
    12e8:	63 9f       	mul	r22, r19
    12ea:	aa 27       	eor	r26, r26
    12ec:	f0 0d       	add	r31, r0
    12ee:	b1 1d       	adc	r27, r1
    12f0:	aa 1f       	adc	r26, r26
    12f2:	64 9f       	mul	r22, r20
    12f4:	66 27       	eor	r22, r22
    12f6:	b0 0d       	add	r27, r0
    12f8:	a1 1d       	adc	r26, r1
    12fa:	66 1f       	adc	r22, r22
    12fc:	82 9f       	mul	r24, r18
    12fe:	22 27       	eor	r18, r18
    1300:	b0 0d       	add	r27, r0
    1302:	a1 1d       	adc	r26, r1
    1304:	62 1f       	adc	r22, r18
    1306:	73 9f       	mul	r23, r19
    1308:	b0 0d       	add	r27, r0
    130a:	a1 1d       	adc	r26, r1
    130c:	62 1f       	adc	r22, r18
    130e:	83 9f       	mul	r24, r19
    1310:	a0 0d       	add	r26, r0
    1312:	61 1d       	adc	r22, r1
    1314:	22 1f       	adc	r18, r18
    1316:	74 9f       	mul	r23, r20
    1318:	33 27       	eor	r19, r19
    131a:	a0 0d       	add	r26, r0
    131c:	61 1d       	adc	r22, r1
    131e:	23 1f       	adc	r18, r19
    1320:	84 9f       	mul	r24, r20
    1322:	60 0d       	add	r22, r0
    1324:	21 1d       	adc	r18, r1
    1326:	82 2f       	mov	r24, r18
    1328:	76 2f       	mov	r23, r22
    132a:	6a 2f       	mov	r22, r26
    132c:	11 24       	eor	r1, r1
    132e:	9f 57       	subi	r25, 0x7F	; 127
    1330:	50 40       	sbci	r21, 0x00	; 0
    1332:	8a f0       	brmi	.+34     	; 0x1356 <__mulsf3_pse+0x84>
    1334:	e1 f0       	breq	.+56     	; 0x136e <__mulsf3_pse+0x9c>
    1336:	88 23       	and	r24, r24
    1338:	4a f0       	brmi	.+18     	; 0x134c <__mulsf3_pse+0x7a>
    133a:	ee 0f       	add	r30, r30
    133c:	ff 1f       	adc	r31, r31
    133e:	bb 1f       	adc	r27, r27
    1340:	66 1f       	adc	r22, r22
    1342:	77 1f       	adc	r23, r23
    1344:	88 1f       	adc	r24, r24
    1346:	91 50       	subi	r25, 0x01	; 1
    1348:	50 40       	sbci	r21, 0x00	; 0
    134a:	a9 f7       	brne	.-22     	; 0x1336 <__mulsf3_pse+0x64>
    134c:	9e 3f       	cpi	r25, 0xFE	; 254
    134e:	51 05       	cpc	r21, r1
    1350:	70 f0       	brcs	.+28     	; 0x136e <__mulsf3_pse+0x9c>
    1352:	5c cf       	rjmp	.-328    	; 0x120c <__fp_inf>
    1354:	a6 cf       	rjmp	.-180    	; 0x12a2 <__fp_szero>
    1356:	5f 3f       	cpi	r21, 0xFF	; 255
    1358:	ec f3       	brlt	.-6      	; 0x1354 <__mulsf3_pse+0x82>
    135a:	98 3e       	cpi	r25, 0xE8	; 232
    135c:	dc f3       	brlt	.-10     	; 0x1354 <__mulsf3_pse+0x82>
    135e:	86 95       	lsr	r24
    1360:	77 95       	ror	r23
    1362:	67 95       	ror	r22
    1364:	b7 95       	ror	r27
    1366:	f7 95       	ror	r31
    1368:	e7 95       	ror	r30
    136a:	9f 5f       	subi	r25, 0xFF	; 255
    136c:	c1 f7       	brne	.-16     	; 0x135e <__mulsf3_pse+0x8c>
    136e:	fe 2b       	or	r31, r30
    1370:	88 0f       	add	r24, r24
    1372:	91 1d       	adc	r25, r1
    1374:	96 95       	lsr	r25
    1376:	87 95       	ror	r24
    1378:	97 f9       	bld	r25, 7
    137a:	08 95       	ret

0000137c <__tablejump2__>:
    137c:	ee 0f       	add	r30, r30
    137e:	ff 1f       	adc	r31, r31

00001380 <__tablejump__>:
    1380:	05 90       	lpm	r0, Z+
    1382:	f4 91       	lpm	r31, Z
    1384:	e0 2d       	mov	r30, r0
    1386:	19 94       	eijmp

00001388 <__ashrdi3>:
    1388:	97 fb       	bst	r25, 7
    138a:	10 f8       	bld	r1, 0

0000138c <__lshrdi3>:
    138c:	16 94       	lsr	r1
    138e:	00 08       	sbc	r0, r0
    1390:	0f 93       	push	r16
    1392:	08 30       	cpi	r16, 0x08	; 8
    1394:	98 f0       	brcs	.+38     	; 0x13bc <__lshrdi3+0x30>
    1396:	08 50       	subi	r16, 0x08	; 8
    1398:	23 2f       	mov	r18, r19
    139a:	34 2f       	mov	r19, r20
    139c:	45 2f       	mov	r20, r21
    139e:	56 2f       	mov	r21, r22
    13a0:	67 2f       	mov	r22, r23
    13a2:	78 2f       	mov	r23, r24
    13a4:	89 2f       	mov	r24, r25
    13a6:	90 2d       	mov	r25, r0
    13a8:	f4 cf       	rjmp	.-24     	; 0x1392 <__lshrdi3+0x6>
    13aa:	05 94       	asr	r0
    13ac:	97 95       	ror	r25
    13ae:	87 95       	ror	r24
    13b0:	77 95       	ror	r23
    13b2:	67 95       	ror	r22
    13b4:	57 95       	ror	r21
    13b6:	47 95       	ror	r20
    13b8:	37 95       	ror	r19
    13ba:	27 95       	ror	r18
    13bc:	0a 95       	dec	r16
    13be:	aa f7       	brpl	.-22     	; 0x13aa <__lshrdi3+0x1e>
    13c0:	0f 91       	pop	r16
    13c2:	08 95       	ret

000013c4 <__adddi3>:
    13c4:	2a 0d       	add	r18, r10
    13c6:	3b 1d       	adc	r19, r11
    13c8:	4c 1d       	adc	r20, r12
    13ca:	5d 1d       	adc	r21, r13
    13cc:	6e 1d       	adc	r22, r14
    13ce:	7f 1d       	adc	r23, r15
    13d0:	80 1f       	adc	r24, r16
    13d2:	91 1f       	adc	r25, r17
    13d4:	08 95       	ret

000013d6 <fdevopen>:
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	ec 01       	movw	r28, r24
    13e0:	8b 01       	movw	r16, r22
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	31 f4       	brne	.+12     	; 0x13f2 <fdevopen+0x1c>
    13e6:	61 15       	cp	r22, r1
    13e8:	71 05       	cpc	r23, r1
    13ea:	19 f4       	brne	.+6      	; 0x13f2 <fdevopen+0x1c>
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	37 c0       	rjmp	.+110    	; 0x1460 <fdevopen+0x8a>
    13f2:	6e e0       	ldi	r22, 0x0E	; 14
    13f4:	70 e0       	ldi	r23, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	63 d2       	rcall	.+1222   	; 0x18c2 <calloc>
    13fc:	fc 01       	movw	r30, r24
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	a9 f3       	breq	.-22     	; 0x13ec <fdevopen+0x16>
    1402:	80 e8       	ldi	r24, 0x80	; 128
    1404:	83 83       	std	Z+3, r24	; 0x03
    1406:	01 15       	cp	r16, r1
    1408:	11 05       	cpc	r17, r1
    140a:	71 f0       	breq	.+28     	; 0x1428 <fdevopen+0x52>
    140c:	13 87       	std	Z+11, r17	; 0x0b
    140e:	02 87       	std	Z+10, r16	; 0x0a
    1410:	81 e8       	ldi	r24, 0x81	; 129
    1412:	83 83       	std	Z+3, r24	; 0x03
    1414:	80 91 a4 03 	lds	r24, 0x03A4
    1418:	90 91 a5 03 	lds	r25, 0x03A5
    141c:	89 2b       	or	r24, r25
    141e:	21 f4       	brne	.+8      	; 0x1428 <fdevopen+0x52>
    1420:	f0 93 a5 03 	sts	0x03A5, r31
    1424:	e0 93 a4 03 	sts	0x03A4, r30
    1428:	20 97       	sbiw	r28, 0x00	; 0
    142a:	c9 f0       	breq	.+50     	; 0x145e <fdevopen+0x88>
    142c:	d1 87       	std	Z+9, r29	; 0x09
    142e:	c0 87       	std	Z+8, r28	; 0x08
    1430:	83 81       	ldd	r24, Z+3	; 0x03
    1432:	82 60       	ori	r24, 0x02	; 2
    1434:	83 83       	std	Z+3, r24	; 0x03
    1436:	80 91 a6 03 	lds	r24, 0x03A6
    143a:	90 91 a7 03 	lds	r25, 0x03A7
    143e:	89 2b       	or	r24, r25
    1440:	71 f4       	brne	.+28     	; 0x145e <fdevopen+0x88>
    1442:	f0 93 a7 03 	sts	0x03A7, r31
    1446:	e0 93 a6 03 	sts	0x03A6, r30
    144a:	80 91 a8 03 	lds	r24, 0x03A8
    144e:	90 91 a9 03 	lds	r25, 0x03A9
    1452:	89 2b       	or	r24, r25
    1454:	21 f4       	brne	.+8      	; 0x145e <fdevopen+0x88>
    1456:	f0 93 a9 03 	sts	0x03A9, r31
    145a:	e0 93 a8 03 	sts	0x03A8, r30
    145e:	cf 01       	movw	r24, r30
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	1f 91       	pop	r17
    1466:	0f 91       	pop	r16
    1468:	08 95       	ret

0000146a <printf>:
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	fe 01       	movw	r30, r28
    1474:	36 96       	adiw	r30, 0x06	; 6
    1476:	61 91       	ld	r22, Z+
    1478:	71 91       	ld	r23, Z+
    147a:	af 01       	movw	r20, r30
    147c:	80 91 a6 03 	lds	r24, 0x03A6
    1480:	90 91 a7 03 	lds	r25, 0x03A7
    1484:	30 d0       	rcall	.+96     	; 0x14e6 <vfprintf>
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	08 95       	ret

0000148c <puts>:
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	e0 91 a6 03 	lds	r30, 0x03A6
    1498:	f0 91 a7 03 	lds	r31, 0x03A7
    149c:	23 81       	ldd	r18, Z+3	; 0x03
    149e:	21 ff       	sbrs	r18, 1
    14a0:	1b c0       	rjmp	.+54     	; 0x14d8 <puts+0x4c>
    14a2:	ec 01       	movw	r28, r24
    14a4:	00 e0       	ldi	r16, 0x00	; 0
    14a6:	10 e0       	ldi	r17, 0x00	; 0
    14a8:	89 91       	ld	r24, Y+
    14aa:	60 91 a6 03 	lds	r22, 0x03A6
    14ae:	70 91 a7 03 	lds	r23, 0x03A7
    14b2:	db 01       	movw	r26, r22
    14b4:	18 96       	adiw	r26, 0x08	; 8
    14b6:	ed 91       	ld	r30, X+
    14b8:	fc 91       	ld	r31, X
    14ba:	19 97       	sbiw	r26, 0x09	; 9
    14bc:	88 23       	and	r24, r24
    14be:	31 f0       	breq	.+12     	; 0x14cc <puts+0x40>
    14c0:	19 95       	eicall
    14c2:	89 2b       	or	r24, r25
    14c4:	89 f3       	breq	.-30     	; 0x14a8 <puts+0x1c>
    14c6:	0f ef       	ldi	r16, 0xFF	; 255
    14c8:	1f ef       	ldi	r17, 0xFF	; 255
    14ca:	ee cf       	rjmp	.-36     	; 0x14a8 <puts+0x1c>
    14cc:	8a e0       	ldi	r24, 0x0A	; 10
    14ce:	19 95       	eicall
    14d0:	89 2b       	or	r24, r25
    14d2:	11 f4       	brne	.+4      	; 0x14d8 <puts+0x4c>
    14d4:	c8 01       	movw	r24, r16
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <puts+0x50>
    14d8:	8f ef       	ldi	r24, 0xFF	; 255
    14da:	9f ef       	ldi	r25, 0xFF	; 255
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	0f 91       	pop	r16
    14e4:	08 95       	ret

000014e6 <vfprintf>:
    14e6:	2f 92       	push	r2
    14e8:	3f 92       	push	r3
    14ea:	4f 92       	push	r4
    14ec:	5f 92       	push	r5
    14ee:	6f 92       	push	r6
    14f0:	7f 92       	push	r7
    14f2:	8f 92       	push	r8
    14f4:	9f 92       	push	r9
    14f6:	af 92       	push	r10
    14f8:	bf 92       	push	r11
    14fa:	cf 92       	push	r12
    14fc:	df 92       	push	r13
    14fe:	ef 92       	push	r14
    1500:	ff 92       	push	r15
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	2c 97       	sbiw	r28, 0x0c	; 12
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	7c 01       	movw	r14, r24
    151c:	6b 01       	movw	r12, r22
    151e:	8a 01       	movw	r16, r20
    1520:	fc 01       	movw	r30, r24
    1522:	17 82       	std	Z+7, r1	; 0x07
    1524:	16 82       	std	Z+6, r1	; 0x06
    1526:	83 81       	ldd	r24, Z+3	; 0x03
    1528:	81 ff       	sbrs	r24, 1
    152a:	b0 c1       	rjmp	.+864    	; 0x188c <vfprintf+0x3a6>
    152c:	ce 01       	movw	r24, r28
    152e:	01 96       	adiw	r24, 0x01	; 1
    1530:	4c 01       	movw	r8, r24
    1532:	f7 01       	movw	r30, r14
    1534:	93 81       	ldd	r25, Z+3	; 0x03
    1536:	f6 01       	movw	r30, r12
    1538:	93 fd       	sbrc	r25, 3
    153a:	85 91       	lpm	r24, Z+
    153c:	93 ff       	sbrs	r25, 3
    153e:	81 91       	ld	r24, Z+
    1540:	6f 01       	movw	r12, r30
    1542:	88 23       	and	r24, r24
    1544:	09 f4       	brne	.+2      	; 0x1548 <vfprintf+0x62>
    1546:	9e c1       	rjmp	.+828    	; 0x1884 <vfprintf+0x39e>
    1548:	85 32       	cpi	r24, 0x25	; 37
    154a:	39 f4       	brne	.+14     	; 0x155a <vfprintf+0x74>
    154c:	93 fd       	sbrc	r25, 3
    154e:	85 91       	lpm	r24, Z+
    1550:	93 ff       	sbrs	r25, 3
    1552:	81 91       	ld	r24, Z+
    1554:	6f 01       	movw	r12, r30
    1556:	85 32       	cpi	r24, 0x25	; 37
    1558:	21 f4       	brne	.+8      	; 0x1562 <vfprintf+0x7c>
    155a:	b7 01       	movw	r22, r14
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	0f d3       	rcall	.+1566   	; 0x1b7e <fputc>
    1560:	e8 cf       	rjmp	.-48     	; 0x1532 <vfprintf+0x4c>
    1562:	51 2c       	mov	r5, r1
    1564:	31 2c       	mov	r3, r1
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	20 32       	cpi	r18, 0x20	; 32
    156a:	a0 f4       	brcc	.+40     	; 0x1594 <vfprintf+0xae>
    156c:	8b 32       	cpi	r24, 0x2B	; 43
    156e:	69 f0       	breq	.+26     	; 0x158a <vfprintf+0xa4>
    1570:	30 f4       	brcc	.+12     	; 0x157e <vfprintf+0x98>
    1572:	80 32       	cpi	r24, 0x20	; 32
    1574:	59 f0       	breq	.+22     	; 0x158c <vfprintf+0xa6>
    1576:	83 32       	cpi	r24, 0x23	; 35
    1578:	69 f4       	brne	.+26     	; 0x1594 <vfprintf+0xae>
    157a:	20 61       	ori	r18, 0x10	; 16
    157c:	2c c0       	rjmp	.+88     	; 0x15d6 <vfprintf+0xf0>
    157e:	8d 32       	cpi	r24, 0x2D	; 45
    1580:	39 f0       	breq	.+14     	; 0x1590 <vfprintf+0xaa>
    1582:	80 33       	cpi	r24, 0x30	; 48
    1584:	39 f4       	brne	.+14     	; 0x1594 <vfprintf+0xae>
    1586:	21 60       	ori	r18, 0x01	; 1
    1588:	26 c0       	rjmp	.+76     	; 0x15d6 <vfprintf+0xf0>
    158a:	22 60       	ori	r18, 0x02	; 2
    158c:	24 60       	ori	r18, 0x04	; 4
    158e:	23 c0       	rjmp	.+70     	; 0x15d6 <vfprintf+0xf0>
    1590:	28 60       	ori	r18, 0x08	; 8
    1592:	21 c0       	rjmp	.+66     	; 0x15d6 <vfprintf+0xf0>
    1594:	27 fd       	sbrc	r18, 7
    1596:	27 c0       	rjmp	.+78     	; 0x15e6 <vfprintf+0x100>
    1598:	30 ed       	ldi	r19, 0xD0	; 208
    159a:	38 0f       	add	r19, r24
    159c:	3a 30       	cpi	r19, 0x0A	; 10
    159e:	78 f4       	brcc	.+30     	; 0x15be <vfprintf+0xd8>
    15a0:	26 ff       	sbrs	r18, 6
    15a2:	06 c0       	rjmp	.+12     	; 0x15b0 <vfprintf+0xca>
    15a4:	fa e0       	ldi	r31, 0x0A	; 10
    15a6:	5f 9e       	mul	r5, r31
    15a8:	30 0d       	add	r19, r0
    15aa:	11 24       	eor	r1, r1
    15ac:	53 2e       	mov	r5, r19
    15ae:	13 c0       	rjmp	.+38     	; 0x15d6 <vfprintf+0xf0>
    15b0:	8a e0       	ldi	r24, 0x0A	; 10
    15b2:	38 9e       	mul	r3, r24
    15b4:	30 0d       	add	r19, r0
    15b6:	11 24       	eor	r1, r1
    15b8:	33 2e       	mov	r3, r19
    15ba:	20 62       	ori	r18, 0x20	; 32
    15bc:	0c c0       	rjmp	.+24     	; 0x15d6 <vfprintf+0xf0>
    15be:	8e 32       	cpi	r24, 0x2E	; 46
    15c0:	21 f4       	brne	.+8      	; 0x15ca <vfprintf+0xe4>
    15c2:	26 fd       	sbrc	r18, 6
    15c4:	5f c1       	rjmp	.+702    	; 0x1884 <vfprintf+0x39e>
    15c6:	20 64       	ori	r18, 0x40	; 64
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <vfprintf+0xf0>
    15ca:	8c 36       	cpi	r24, 0x6C	; 108
    15cc:	11 f4       	brne	.+4      	; 0x15d2 <vfprintf+0xec>
    15ce:	20 68       	ori	r18, 0x80	; 128
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <vfprintf+0xf0>
    15d2:	88 36       	cpi	r24, 0x68	; 104
    15d4:	41 f4       	brne	.+16     	; 0x15e6 <vfprintf+0x100>
    15d6:	f6 01       	movw	r30, r12
    15d8:	93 fd       	sbrc	r25, 3
    15da:	85 91       	lpm	r24, Z+
    15dc:	93 ff       	sbrs	r25, 3
    15de:	81 91       	ld	r24, Z+
    15e0:	6f 01       	movw	r12, r30
    15e2:	81 11       	cpse	r24, r1
    15e4:	c1 cf       	rjmp	.-126    	; 0x1568 <vfprintf+0x82>
    15e6:	98 2f       	mov	r25, r24
    15e8:	9f 7d       	andi	r25, 0xDF	; 223
    15ea:	95 54       	subi	r25, 0x45	; 69
    15ec:	93 30       	cpi	r25, 0x03	; 3
    15ee:	28 f4       	brcc	.+10     	; 0x15fa <vfprintf+0x114>
    15f0:	0c 5f       	subi	r16, 0xFC	; 252
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	ff e3       	ldi	r31, 0x3F	; 63
    15f6:	f9 83       	std	Y+1, r31	; 0x01
    15f8:	0d c0       	rjmp	.+26     	; 0x1614 <vfprintf+0x12e>
    15fa:	83 36       	cpi	r24, 0x63	; 99
    15fc:	31 f0       	breq	.+12     	; 0x160a <vfprintf+0x124>
    15fe:	83 37       	cpi	r24, 0x73	; 115
    1600:	71 f0       	breq	.+28     	; 0x161e <vfprintf+0x138>
    1602:	83 35       	cpi	r24, 0x53	; 83
    1604:	09 f0       	breq	.+2      	; 0x1608 <vfprintf+0x122>
    1606:	57 c0       	rjmp	.+174    	; 0x16b6 <vfprintf+0x1d0>
    1608:	21 c0       	rjmp	.+66     	; 0x164c <vfprintf+0x166>
    160a:	f8 01       	movw	r30, r16
    160c:	80 81       	ld	r24, Z
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	0e 5f       	subi	r16, 0xFE	; 254
    1612:	1f 4f       	sbci	r17, 0xFF	; 255
    1614:	44 24       	eor	r4, r4
    1616:	43 94       	inc	r4
    1618:	51 2c       	mov	r5, r1
    161a:	54 01       	movw	r10, r8
    161c:	14 c0       	rjmp	.+40     	; 0x1646 <vfprintf+0x160>
    161e:	38 01       	movw	r6, r16
    1620:	f2 e0       	ldi	r31, 0x02	; 2
    1622:	6f 0e       	add	r6, r31
    1624:	71 1c       	adc	r7, r1
    1626:	f8 01       	movw	r30, r16
    1628:	a0 80       	ld	r10, Z
    162a:	b1 80       	ldd	r11, Z+1	; 0x01
    162c:	26 ff       	sbrs	r18, 6
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <vfprintf+0x150>
    1630:	65 2d       	mov	r22, r5
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	02 c0       	rjmp	.+4      	; 0x163a <vfprintf+0x154>
    1636:	6f ef       	ldi	r22, 0xFF	; 255
    1638:	7f ef       	ldi	r23, 0xFF	; 255
    163a:	c5 01       	movw	r24, r10
    163c:	2c 87       	std	Y+12, r18	; 0x0c
    163e:	94 d2       	rcall	.+1320   	; 0x1b68 <strnlen>
    1640:	2c 01       	movw	r4, r24
    1642:	83 01       	movw	r16, r6
    1644:	2c 85       	ldd	r18, Y+12	; 0x0c
    1646:	2f 77       	andi	r18, 0x7F	; 127
    1648:	22 2e       	mov	r2, r18
    164a:	16 c0       	rjmp	.+44     	; 0x1678 <vfprintf+0x192>
    164c:	38 01       	movw	r6, r16
    164e:	f2 e0       	ldi	r31, 0x02	; 2
    1650:	6f 0e       	add	r6, r31
    1652:	71 1c       	adc	r7, r1
    1654:	f8 01       	movw	r30, r16
    1656:	a0 80       	ld	r10, Z
    1658:	b1 80       	ldd	r11, Z+1	; 0x01
    165a:	26 ff       	sbrs	r18, 6
    165c:	03 c0       	rjmp	.+6      	; 0x1664 <vfprintf+0x17e>
    165e:	65 2d       	mov	r22, r5
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <vfprintf+0x182>
    1664:	6f ef       	ldi	r22, 0xFF	; 255
    1666:	7f ef       	ldi	r23, 0xFF	; 255
    1668:	c5 01       	movw	r24, r10
    166a:	2c 87       	std	Y+12, r18	; 0x0c
    166c:	6b d2       	rcall	.+1238   	; 0x1b44 <strnlen_P>
    166e:	2c 01       	movw	r4, r24
    1670:	2c 85       	ldd	r18, Y+12	; 0x0c
    1672:	20 68       	ori	r18, 0x80	; 128
    1674:	22 2e       	mov	r2, r18
    1676:	83 01       	movw	r16, r6
    1678:	23 fc       	sbrc	r2, 3
    167a:	19 c0       	rjmp	.+50     	; 0x16ae <vfprintf+0x1c8>
    167c:	83 2d       	mov	r24, r3
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	48 16       	cp	r4, r24
    1682:	59 06       	cpc	r5, r25
    1684:	a0 f4       	brcc	.+40     	; 0x16ae <vfprintf+0x1c8>
    1686:	b7 01       	movw	r22, r14
    1688:	80 e2       	ldi	r24, 0x20	; 32
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	78 d2       	rcall	.+1264   	; 0x1b7e <fputc>
    168e:	3a 94       	dec	r3
    1690:	f5 cf       	rjmp	.-22     	; 0x167c <vfprintf+0x196>
    1692:	f5 01       	movw	r30, r10
    1694:	27 fc       	sbrc	r2, 7
    1696:	85 91       	lpm	r24, Z+
    1698:	27 fe       	sbrs	r2, 7
    169a:	81 91       	ld	r24, Z+
    169c:	5f 01       	movw	r10, r30
    169e:	b7 01       	movw	r22, r14
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	6d d2       	rcall	.+1242   	; 0x1b7e <fputc>
    16a4:	31 10       	cpse	r3, r1
    16a6:	3a 94       	dec	r3
    16a8:	f1 e0       	ldi	r31, 0x01	; 1
    16aa:	4f 1a       	sub	r4, r31
    16ac:	51 08       	sbc	r5, r1
    16ae:	41 14       	cp	r4, r1
    16b0:	51 04       	cpc	r5, r1
    16b2:	79 f7       	brne	.-34     	; 0x1692 <vfprintf+0x1ac>
    16b4:	de c0       	rjmp	.+444    	; 0x1872 <vfprintf+0x38c>
    16b6:	84 36       	cpi	r24, 0x64	; 100
    16b8:	11 f0       	breq	.+4      	; 0x16be <vfprintf+0x1d8>
    16ba:	89 36       	cpi	r24, 0x69	; 105
    16bc:	31 f5       	brne	.+76     	; 0x170a <vfprintf+0x224>
    16be:	f8 01       	movw	r30, r16
    16c0:	27 ff       	sbrs	r18, 7
    16c2:	07 c0       	rjmp	.+14     	; 0x16d2 <vfprintf+0x1ec>
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	82 81       	ldd	r24, Z+2	; 0x02
    16ca:	93 81       	ldd	r25, Z+3	; 0x03
    16cc:	0c 5f       	subi	r16, 0xFC	; 252
    16ce:	1f 4f       	sbci	r17, 0xFF	; 255
    16d0:	08 c0       	rjmp	.+16     	; 0x16e2 <vfprintf+0x1fc>
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	88 27       	eor	r24, r24
    16d8:	77 fd       	sbrc	r23, 7
    16da:	80 95       	com	r24
    16dc:	98 2f       	mov	r25, r24
    16de:	0e 5f       	subi	r16, 0xFE	; 254
    16e0:	1f 4f       	sbci	r17, 0xFF	; 255
    16e2:	2f 76       	andi	r18, 0x6F	; 111
    16e4:	b2 2e       	mov	r11, r18
    16e6:	97 ff       	sbrs	r25, 7
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <vfprintf+0x216>
    16ea:	90 95       	com	r25
    16ec:	80 95       	com	r24
    16ee:	70 95       	com	r23
    16f0:	61 95       	neg	r22
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	8f 4f       	sbci	r24, 0xFF	; 255
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
    16f8:	20 68       	ori	r18, 0x80	; 128
    16fa:	b2 2e       	mov	r11, r18
    16fc:	2a e0       	ldi	r18, 0x0A	; 10
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	a4 01       	movw	r20, r8
    1702:	6f d2       	rcall	.+1246   	; 0x1be2 <__ultoa_invert>
    1704:	a8 2e       	mov	r10, r24
    1706:	a8 18       	sub	r10, r8
    1708:	43 c0       	rjmp	.+134    	; 0x1790 <vfprintf+0x2aa>
    170a:	85 37       	cpi	r24, 0x75	; 117
    170c:	29 f4       	brne	.+10     	; 0x1718 <vfprintf+0x232>
    170e:	2f 7e       	andi	r18, 0xEF	; 239
    1710:	b2 2e       	mov	r11, r18
    1712:	2a e0       	ldi	r18, 0x0A	; 10
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	25 c0       	rjmp	.+74     	; 0x1762 <vfprintf+0x27c>
    1718:	f2 2f       	mov	r31, r18
    171a:	f9 7f       	andi	r31, 0xF9	; 249
    171c:	bf 2e       	mov	r11, r31
    171e:	8f 36       	cpi	r24, 0x6F	; 111
    1720:	c1 f0       	breq	.+48     	; 0x1752 <vfprintf+0x26c>
    1722:	18 f4       	brcc	.+6      	; 0x172a <vfprintf+0x244>
    1724:	88 35       	cpi	r24, 0x58	; 88
    1726:	79 f0       	breq	.+30     	; 0x1746 <vfprintf+0x260>
    1728:	ad c0       	rjmp	.+346    	; 0x1884 <vfprintf+0x39e>
    172a:	80 37       	cpi	r24, 0x70	; 112
    172c:	19 f0       	breq	.+6      	; 0x1734 <vfprintf+0x24e>
    172e:	88 37       	cpi	r24, 0x78	; 120
    1730:	21 f0       	breq	.+8      	; 0x173a <vfprintf+0x254>
    1732:	a8 c0       	rjmp	.+336    	; 0x1884 <vfprintf+0x39e>
    1734:	2f 2f       	mov	r18, r31
    1736:	20 61       	ori	r18, 0x10	; 16
    1738:	b2 2e       	mov	r11, r18
    173a:	b4 fe       	sbrs	r11, 4
    173c:	0d c0       	rjmp	.+26     	; 0x1758 <vfprintf+0x272>
    173e:	8b 2d       	mov	r24, r11
    1740:	84 60       	ori	r24, 0x04	; 4
    1742:	b8 2e       	mov	r11, r24
    1744:	09 c0       	rjmp	.+18     	; 0x1758 <vfprintf+0x272>
    1746:	24 ff       	sbrs	r18, 4
    1748:	0a c0       	rjmp	.+20     	; 0x175e <vfprintf+0x278>
    174a:	9f 2f       	mov	r25, r31
    174c:	96 60       	ori	r25, 0x06	; 6
    174e:	b9 2e       	mov	r11, r25
    1750:	06 c0       	rjmp	.+12     	; 0x175e <vfprintf+0x278>
    1752:	28 e0       	ldi	r18, 0x08	; 8
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	05 c0       	rjmp	.+10     	; 0x1762 <vfprintf+0x27c>
    1758:	20 e1       	ldi	r18, 0x10	; 16
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <vfprintf+0x27c>
    175e:	20 e1       	ldi	r18, 0x10	; 16
    1760:	32 e0       	ldi	r19, 0x02	; 2
    1762:	f8 01       	movw	r30, r16
    1764:	b7 fe       	sbrs	r11, 7
    1766:	07 c0       	rjmp	.+14     	; 0x1776 <vfprintf+0x290>
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	0c 5f       	subi	r16, 0xFC	; 252
    1772:	1f 4f       	sbci	r17, 0xFF	; 255
    1774:	06 c0       	rjmp	.+12     	; 0x1782 <vfprintf+0x29c>
    1776:	60 81       	ld	r22, Z
    1778:	71 81       	ldd	r23, Z+1	; 0x01
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 5f       	subi	r16, 0xFE	; 254
    1780:	1f 4f       	sbci	r17, 0xFF	; 255
    1782:	a4 01       	movw	r20, r8
    1784:	2e d2       	rcall	.+1116   	; 0x1be2 <__ultoa_invert>
    1786:	a8 2e       	mov	r10, r24
    1788:	a8 18       	sub	r10, r8
    178a:	fb 2d       	mov	r31, r11
    178c:	ff 77       	andi	r31, 0x7F	; 127
    178e:	bf 2e       	mov	r11, r31
    1790:	b6 fe       	sbrs	r11, 6
    1792:	0b c0       	rjmp	.+22     	; 0x17aa <vfprintf+0x2c4>
    1794:	2b 2d       	mov	r18, r11
    1796:	2e 7f       	andi	r18, 0xFE	; 254
    1798:	a5 14       	cp	r10, r5
    179a:	50 f4       	brcc	.+20     	; 0x17b0 <vfprintf+0x2ca>
    179c:	b4 fe       	sbrs	r11, 4
    179e:	0a c0       	rjmp	.+20     	; 0x17b4 <vfprintf+0x2ce>
    17a0:	b2 fc       	sbrc	r11, 2
    17a2:	08 c0       	rjmp	.+16     	; 0x17b4 <vfprintf+0x2ce>
    17a4:	2b 2d       	mov	r18, r11
    17a6:	2e 7e       	andi	r18, 0xEE	; 238
    17a8:	05 c0       	rjmp	.+10     	; 0x17b4 <vfprintf+0x2ce>
    17aa:	7a 2c       	mov	r7, r10
    17ac:	2b 2d       	mov	r18, r11
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6 <vfprintf+0x2d0>
    17b0:	7a 2c       	mov	r7, r10
    17b2:	01 c0       	rjmp	.+2      	; 0x17b6 <vfprintf+0x2d0>
    17b4:	75 2c       	mov	r7, r5
    17b6:	24 ff       	sbrs	r18, 4
    17b8:	0d c0       	rjmp	.+26     	; 0x17d4 <vfprintf+0x2ee>
    17ba:	fe 01       	movw	r30, r28
    17bc:	ea 0d       	add	r30, r10
    17be:	f1 1d       	adc	r31, r1
    17c0:	80 81       	ld	r24, Z
    17c2:	80 33       	cpi	r24, 0x30	; 48
    17c4:	11 f4       	brne	.+4      	; 0x17ca <vfprintf+0x2e4>
    17c6:	29 7e       	andi	r18, 0xE9	; 233
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <vfprintf+0x2f6>
    17ca:	22 ff       	sbrs	r18, 2
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <vfprintf+0x2f4>
    17ce:	73 94       	inc	r7
    17d0:	73 94       	inc	r7
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <vfprintf+0x2f6>
    17d4:	82 2f       	mov	r24, r18
    17d6:	86 78       	andi	r24, 0x86	; 134
    17d8:	09 f0       	breq	.+2      	; 0x17dc <vfprintf+0x2f6>
    17da:	73 94       	inc	r7
    17dc:	23 fd       	sbrc	r18, 3
    17de:	12 c0       	rjmp	.+36     	; 0x1804 <vfprintf+0x31e>
    17e0:	20 ff       	sbrs	r18, 0
    17e2:	06 c0       	rjmp	.+12     	; 0x17f0 <vfprintf+0x30a>
    17e4:	5a 2c       	mov	r5, r10
    17e6:	73 14       	cp	r7, r3
    17e8:	18 f4       	brcc	.+6      	; 0x17f0 <vfprintf+0x30a>
    17ea:	53 0c       	add	r5, r3
    17ec:	57 18       	sub	r5, r7
    17ee:	73 2c       	mov	r7, r3
    17f0:	73 14       	cp	r7, r3
    17f2:	60 f4       	brcc	.+24     	; 0x180c <vfprintf+0x326>
    17f4:	b7 01       	movw	r22, r14
    17f6:	80 e2       	ldi	r24, 0x20	; 32
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	2c 87       	std	Y+12, r18	; 0x0c
    17fc:	c0 d1       	rcall	.+896    	; 0x1b7e <fputc>
    17fe:	73 94       	inc	r7
    1800:	2c 85       	ldd	r18, Y+12	; 0x0c
    1802:	f6 cf       	rjmp	.-20     	; 0x17f0 <vfprintf+0x30a>
    1804:	73 14       	cp	r7, r3
    1806:	10 f4       	brcc	.+4      	; 0x180c <vfprintf+0x326>
    1808:	37 18       	sub	r3, r7
    180a:	01 c0       	rjmp	.+2      	; 0x180e <vfprintf+0x328>
    180c:	31 2c       	mov	r3, r1
    180e:	24 ff       	sbrs	r18, 4
    1810:	11 c0       	rjmp	.+34     	; 0x1834 <vfprintf+0x34e>
    1812:	b7 01       	movw	r22, r14
    1814:	80 e3       	ldi	r24, 0x30	; 48
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	2c 87       	std	Y+12, r18	; 0x0c
    181a:	b1 d1       	rcall	.+866    	; 0x1b7e <fputc>
    181c:	2c 85       	ldd	r18, Y+12	; 0x0c
    181e:	22 ff       	sbrs	r18, 2
    1820:	16 c0       	rjmp	.+44     	; 0x184e <vfprintf+0x368>
    1822:	21 ff       	sbrs	r18, 1
    1824:	03 c0       	rjmp	.+6      	; 0x182c <vfprintf+0x346>
    1826:	88 e5       	ldi	r24, 0x58	; 88
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <vfprintf+0x34a>
    182c:	88 e7       	ldi	r24, 0x78	; 120
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	b7 01       	movw	r22, r14
    1832:	0c c0       	rjmp	.+24     	; 0x184c <vfprintf+0x366>
    1834:	82 2f       	mov	r24, r18
    1836:	86 78       	andi	r24, 0x86	; 134
    1838:	51 f0       	breq	.+20     	; 0x184e <vfprintf+0x368>
    183a:	21 fd       	sbrc	r18, 1
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <vfprintf+0x35c>
    183e:	80 e2       	ldi	r24, 0x20	; 32
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <vfprintf+0x35e>
    1842:	8b e2       	ldi	r24, 0x2B	; 43
    1844:	27 fd       	sbrc	r18, 7
    1846:	8d e2       	ldi	r24, 0x2D	; 45
    1848:	b7 01       	movw	r22, r14
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	98 d1       	rcall	.+816    	; 0x1b7e <fputc>
    184e:	a5 14       	cp	r10, r5
    1850:	30 f4       	brcc	.+12     	; 0x185e <vfprintf+0x378>
    1852:	b7 01       	movw	r22, r14
    1854:	80 e3       	ldi	r24, 0x30	; 48
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	92 d1       	rcall	.+804    	; 0x1b7e <fputc>
    185a:	5a 94       	dec	r5
    185c:	f8 cf       	rjmp	.-16     	; 0x184e <vfprintf+0x368>
    185e:	aa 94       	dec	r10
    1860:	f4 01       	movw	r30, r8
    1862:	ea 0d       	add	r30, r10
    1864:	f1 1d       	adc	r31, r1
    1866:	80 81       	ld	r24, Z
    1868:	b7 01       	movw	r22, r14
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	88 d1       	rcall	.+784    	; 0x1b7e <fputc>
    186e:	a1 10       	cpse	r10, r1
    1870:	f6 cf       	rjmp	.-20     	; 0x185e <vfprintf+0x378>
    1872:	33 20       	and	r3, r3
    1874:	09 f4       	brne	.+2      	; 0x1878 <vfprintf+0x392>
    1876:	5d ce       	rjmp	.-838    	; 0x1532 <vfprintf+0x4c>
    1878:	b7 01       	movw	r22, r14
    187a:	80 e2       	ldi	r24, 0x20	; 32
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	7f d1       	rcall	.+766    	; 0x1b7e <fputc>
    1880:	3a 94       	dec	r3
    1882:	f7 cf       	rjmp	.-18     	; 0x1872 <vfprintf+0x38c>
    1884:	f7 01       	movw	r30, r14
    1886:	86 81       	ldd	r24, Z+6	; 0x06
    1888:	97 81       	ldd	r25, Z+7	; 0x07
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <vfprintf+0x3aa>
    188c:	8f ef       	ldi	r24, 0xFF	; 255
    188e:	9f ef       	ldi	r25, 0xFF	; 255
    1890:	2c 96       	adiw	r28, 0x0c	; 12
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	df 90       	pop	r13
    18aa:	cf 90       	pop	r12
    18ac:	bf 90       	pop	r11
    18ae:	af 90       	pop	r10
    18b0:	9f 90       	pop	r9
    18b2:	8f 90       	pop	r8
    18b4:	7f 90       	pop	r7
    18b6:	6f 90       	pop	r6
    18b8:	5f 90       	pop	r5
    18ba:	4f 90       	pop	r4
    18bc:	3f 90       	pop	r3
    18be:	2f 90       	pop	r2
    18c0:	08 95       	ret

000018c2 <calloc>:
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	86 9f       	mul	r24, r22
    18cc:	80 01       	movw	r16, r0
    18ce:	87 9f       	mul	r24, r23
    18d0:	10 0d       	add	r17, r0
    18d2:	96 9f       	mul	r25, r22
    18d4:	10 0d       	add	r17, r0
    18d6:	11 24       	eor	r1, r1
    18d8:	c8 01       	movw	r24, r16
    18da:	0d d0       	rcall	.+26     	; 0x18f6 <malloc>
    18dc:	ec 01       	movw	r28, r24
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	21 f0       	breq	.+8      	; 0x18ea <calloc+0x28>
    18e2:	a8 01       	movw	r20, r16
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	38 d1       	rcall	.+624    	; 0x1b5a <memset>
    18ea:	ce 01       	movw	r24, r28
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	08 95       	ret

000018f6 <malloc>:
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	82 30       	cpi	r24, 0x02	; 2
    18fc:	91 05       	cpc	r25, r1
    18fe:	10 f4       	brcc	.+4      	; 0x1904 <malloc+0xe>
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	e0 91 ac 03 	lds	r30, 0x03AC
    1908:	f0 91 ad 03 	lds	r31, 0x03AD
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	a0 e0       	ldi	r26, 0x00	; 0
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	30 97       	sbiw	r30, 0x00	; 0
    1916:	39 f1       	breq	.+78     	; 0x1966 <malloc+0x70>
    1918:	40 81       	ld	r20, Z
    191a:	51 81       	ldd	r21, Z+1	; 0x01
    191c:	48 17       	cp	r20, r24
    191e:	59 07       	cpc	r21, r25
    1920:	b8 f0       	brcs	.+46     	; 0x1950 <malloc+0x5a>
    1922:	48 17       	cp	r20, r24
    1924:	59 07       	cpc	r21, r25
    1926:	71 f4       	brne	.+28     	; 0x1944 <malloc+0x4e>
    1928:	82 81       	ldd	r24, Z+2	; 0x02
    192a:	93 81       	ldd	r25, Z+3	; 0x03
    192c:	10 97       	sbiw	r26, 0x00	; 0
    192e:	29 f0       	breq	.+10     	; 0x193a <malloc+0x44>
    1930:	13 96       	adiw	r26, 0x03	; 3
    1932:	9c 93       	st	X, r25
    1934:	8e 93       	st	-X, r24
    1936:	12 97       	sbiw	r26, 0x02	; 2
    1938:	2c c0       	rjmp	.+88     	; 0x1992 <malloc+0x9c>
    193a:	90 93 ad 03 	sts	0x03AD, r25
    193e:	80 93 ac 03 	sts	0x03AC, r24
    1942:	27 c0       	rjmp	.+78     	; 0x1992 <malloc+0x9c>
    1944:	21 15       	cp	r18, r1
    1946:	31 05       	cpc	r19, r1
    1948:	31 f0       	breq	.+12     	; 0x1956 <malloc+0x60>
    194a:	42 17       	cp	r20, r18
    194c:	53 07       	cpc	r21, r19
    194e:	18 f0       	brcs	.+6      	; 0x1956 <malloc+0x60>
    1950:	a9 01       	movw	r20, r18
    1952:	db 01       	movw	r26, r22
    1954:	01 c0       	rjmp	.+2      	; 0x1958 <malloc+0x62>
    1956:	ef 01       	movw	r28, r30
    1958:	9a 01       	movw	r18, r20
    195a:	bd 01       	movw	r22, r26
    195c:	df 01       	movw	r26, r30
    195e:	02 80       	ldd	r0, Z+2	; 0x02
    1960:	f3 81       	ldd	r31, Z+3	; 0x03
    1962:	e0 2d       	mov	r30, r0
    1964:	d7 cf       	rjmp	.-82     	; 0x1914 <malloc+0x1e>
    1966:	21 15       	cp	r18, r1
    1968:	31 05       	cpc	r19, r1
    196a:	f9 f0       	breq	.+62     	; 0x19aa <malloc+0xb4>
    196c:	28 1b       	sub	r18, r24
    196e:	39 0b       	sbc	r19, r25
    1970:	24 30       	cpi	r18, 0x04	; 4
    1972:	31 05       	cpc	r19, r1
    1974:	80 f4       	brcc	.+32     	; 0x1996 <malloc+0xa0>
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	9b 81       	ldd	r25, Y+3	; 0x03
    197a:	61 15       	cp	r22, r1
    197c:	71 05       	cpc	r23, r1
    197e:	21 f0       	breq	.+8      	; 0x1988 <malloc+0x92>
    1980:	fb 01       	movw	r30, r22
    1982:	93 83       	std	Z+3, r25	; 0x03
    1984:	82 83       	std	Z+2, r24	; 0x02
    1986:	04 c0       	rjmp	.+8      	; 0x1990 <malloc+0x9a>
    1988:	90 93 ad 03 	sts	0x03AD, r25
    198c:	80 93 ac 03 	sts	0x03AC, r24
    1990:	fe 01       	movw	r30, r28
    1992:	32 96       	adiw	r30, 0x02	; 2
    1994:	44 c0       	rjmp	.+136    	; 0x1a1e <malloc+0x128>
    1996:	fe 01       	movw	r30, r28
    1998:	e2 0f       	add	r30, r18
    199a:	f3 1f       	adc	r31, r19
    199c:	81 93       	st	Z+, r24
    199e:	91 93       	st	Z+, r25
    19a0:	22 50       	subi	r18, 0x02	; 2
    19a2:	31 09       	sbc	r19, r1
    19a4:	39 83       	std	Y+1, r19	; 0x01
    19a6:	28 83       	st	Y, r18
    19a8:	3a c0       	rjmp	.+116    	; 0x1a1e <malloc+0x128>
    19aa:	20 91 aa 03 	lds	r18, 0x03AA
    19ae:	30 91 ab 03 	lds	r19, 0x03AB
    19b2:	23 2b       	or	r18, r19
    19b4:	41 f4       	brne	.+16     	; 0x19c6 <malloc+0xd0>
    19b6:	20 91 02 02 	lds	r18, 0x0202
    19ba:	30 91 03 02 	lds	r19, 0x0203
    19be:	30 93 ab 03 	sts	0x03AB, r19
    19c2:	20 93 aa 03 	sts	0x03AA, r18
    19c6:	20 91 00 02 	lds	r18, 0x0200
    19ca:	30 91 01 02 	lds	r19, 0x0201
    19ce:	21 15       	cp	r18, r1
    19d0:	31 05       	cpc	r19, r1
    19d2:	41 f4       	brne	.+16     	; 0x19e4 <malloc+0xee>
    19d4:	2d b7       	in	r18, 0x3d	; 61
    19d6:	3e b7       	in	r19, 0x3e	; 62
    19d8:	40 91 04 02 	lds	r20, 0x0204
    19dc:	50 91 05 02 	lds	r21, 0x0205
    19e0:	24 1b       	sub	r18, r20
    19e2:	35 0b       	sbc	r19, r21
    19e4:	e0 91 aa 03 	lds	r30, 0x03AA
    19e8:	f0 91 ab 03 	lds	r31, 0x03AB
    19ec:	e2 17       	cp	r30, r18
    19ee:	f3 07       	cpc	r31, r19
    19f0:	a0 f4       	brcc	.+40     	; 0x1a1a <malloc+0x124>
    19f2:	2e 1b       	sub	r18, r30
    19f4:	3f 0b       	sbc	r19, r31
    19f6:	28 17       	cp	r18, r24
    19f8:	39 07       	cpc	r19, r25
    19fa:	78 f0       	brcs	.+30     	; 0x1a1a <malloc+0x124>
    19fc:	ac 01       	movw	r20, r24
    19fe:	4e 5f       	subi	r20, 0xFE	; 254
    1a00:	5f 4f       	sbci	r21, 0xFF	; 255
    1a02:	24 17       	cp	r18, r20
    1a04:	35 07       	cpc	r19, r21
    1a06:	48 f0       	brcs	.+18     	; 0x1a1a <malloc+0x124>
    1a08:	4e 0f       	add	r20, r30
    1a0a:	5f 1f       	adc	r21, r31
    1a0c:	50 93 ab 03 	sts	0x03AB, r21
    1a10:	40 93 aa 03 	sts	0x03AA, r20
    1a14:	81 93       	st	Z+, r24
    1a16:	91 93       	st	Z+, r25
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <malloc+0x128>
    1a1a:	e0 e0       	ldi	r30, 0x00	; 0
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	cf 01       	movw	r24, r30
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <free>:
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <free+0xa>
    1a2e:	87 c0       	rjmp	.+270    	; 0x1b3e <free+0x118>
    1a30:	fc 01       	movw	r30, r24
    1a32:	32 97       	sbiw	r30, 0x02	; 2
    1a34:	13 82       	std	Z+3, r1	; 0x03
    1a36:	12 82       	std	Z+2, r1	; 0x02
    1a38:	c0 91 ac 03 	lds	r28, 0x03AC
    1a3c:	d0 91 ad 03 	lds	r29, 0x03AD
    1a40:	20 97       	sbiw	r28, 0x00	; 0
    1a42:	81 f4       	brne	.+32     	; 0x1a64 <free+0x3e>
    1a44:	20 81       	ld	r18, Z
    1a46:	31 81       	ldd	r19, Z+1	; 0x01
    1a48:	28 0f       	add	r18, r24
    1a4a:	39 1f       	adc	r19, r25
    1a4c:	80 91 aa 03 	lds	r24, 0x03AA
    1a50:	90 91 ab 03 	lds	r25, 0x03AB
    1a54:	82 17       	cp	r24, r18
    1a56:	93 07       	cpc	r25, r19
    1a58:	79 f5       	brne	.+94     	; 0x1ab8 <free+0x92>
    1a5a:	f0 93 ab 03 	sts	0x03AB, r31
    1a5e:	e0 93 aa 03 	sts	0x03AA, r30
    1a62:	6d c0       	rjmp	.+218    	; 0x1b3e <free+0x118>
    1a64:	de 01       	movw	r26, r28
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	ae 17       	cp	r26, r30
    1a6c:	bf 07       	cpc	r27, r31
    1a6e:	50 f4       	brcc	.+20     	; 0x1a84 <free+0x5e>
    1a70:	12 96       	adiw	r26, 0x02	; 2
    1a72:	4d 91       	ld	r20, X+
    1a74:	5c 91       	ld	r21, X
    1a76:	13 97       	sbiw	r26, 0x03	; 3
    1a78:	9d 01       	movw	r18, r26
    1a7a:	41 15       	cp	r20, r1
    1a7c:	51 05       	cpc	r21, r1
    1a7e:	09 f1       	breq	.+66     	; 0x1ac2 <free+0x9c>
    1a80:	da 01       	movw	r26, r20
    1a82:	f3 cf       	rjmp	.-26     	; 0x1a6a <free+0x44>
    1a84:	b3 83       	std	Z+3, r27	; 0x03
    1a86:	a2 83       	std	Z+2, r26	; 0x02
    1a88:	40 81       	ld	r20, Z
    1a8a:	51 81       	ldd	r21, Z+1	; 0x01
    1a8c:	84 0f       	add	r24, r20
    1a8e:	95 1f       	adc	r25, r21
    1a90:	8a 17       	cp	r24, r26
    1a92:	9b 07       	cpc	r25, r27
    1a94:	71 f4       	brne	.+28     	; 0x1ab2 <free+0x8c>
    1a96:	8d 91       	ld	r24, X+
    1a98:	9c 91       	ld	r25, X
    1a9a:	11 97       	sbiw	r26, 0x01	; 1
    1a9c:	84 0f       	add	r24, r20
    1a9e:	95 1f       	adc	r25, r21
    1aa0:	02 96       	adiw	r24, 0x02	; 2
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
    1aa6:	12 96       	adiw	r26, 0x02	; 2
    1aa8:	8d 91       	ld	r24, X+
    1aaa:	9c 91       	ld	r25, X
    1aac:	13 97       	sbiw	r26, 0x03	; 3
    1aae:	93 83       	std	Z+3, r25	; 0x03
    1ab0:	82 83       	std	Z+2, r24	; 0x02
    1ab2:	21 15       	cp	r18, r1
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	29 f4       	brne	.+10     	; 0x1ac2 <free+0x9c>
    1ab8:	f0 93 ad 03 	sts	0x03AD, r31
    1abc:	e0 93 ac 03 	sts	0x03AC, r30
    1ac0:	3e c0       	rjmp	.+124    	; 0x1b3e <free+0x118>
    1ac2:	d9 01       	movw	r26, r18
    1ac4:	13 96       	adiw	r26, 0x03	; 3
    1ac6:	fc 93       	st	X, r31
    1ac8:	ee 93       	st	-X, r30
    1aca:	12 97       	sbiw	r26, 0x02	; 2
    1acc:	4d 91       	ld	r20, X+
    1ace:	5d 91       	ld	r21, X+
    1ad0:	a4 0f       	add	r26, r20
    1ad2:	b5 1f       	adc	r27, r21
    1ad4:	ea 17       	cp	r30, r26
    1ad6:	fb 07       	cpc	r31, r27
    1ad8:	79 f4       	brne	.+30     	; 0x1af8 <free+0xd2>
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	84 0f       	add	r24, r20
    1ae0:	95 1f       	adc	r25, r21
    1ae2:	02 96       	adiw	r24, 0x02	; 2
    1ae4:	d9 01       	movw	r26, r18
    1ae6:	11 96       	adiw	r26, 0x01	; 1
    1ae8:	9c 93       	st	X, r25
    1aea:	8e 93       	st	-X, r24
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	13 96       	adiw	r26, 0x03	; 3
    1af2:	9c 93       	st	X, r25
    1af4:	8e 93       	st	-X, r24
    1af6:	12 97       	sbiw	r26, 0x02	; 2
    1af8:	e0 e0       	ldi	r30, 0x00	; 0
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	9b 81       	ldd	r25, Y+3	; 0x03
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	19 f0       	breq	.+6      	; 0x1b0a <free+0xe4>
    1b04:	fe 01       	movw	r30, r28
    1b06:	ec 01       	movw	r28, r24
    1b08:	f9 cf       	rjmp	.-14     	; 0x1afc <free+0xd6>
    1b0a:	ce 01       	movw	r24, r28
    1b0c:	02 96       	adiw	r24, 0x02	; 2
    1b0e:	28 81       	ld	r18, Y
    1b10:	39 81       	ldd	r19, Y+1	; 0x01
    1b12:	82 0f       	add	r24, r18
    1b14:	93 1f       	adc	r25, r19
    1b16:	20 91 aa 03 	lds	r18, 0x03AA
    1b1a:	30 91 ab 03 	lds	r19, 0x03AB
    1b1e:	28 17       	cp	r18, r24
    1b20:	39 07       	cpc	r19, r25
    1b22:	69 f4       	brne	.+26     	; 0x1b3e <free+0x118>
    1b24:	30 97       	sbiw	r30, 0x00	; 0
    1b26:	29 f4       	brne	.+10     	; 0x1b32 <free+0x10c>
    1b28:	10 92 ad 03 	sts	0x03AD, r1
    1b2c:	10 92 ac 03 	sts	0x03AC, r1
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <free+0x110>
    1b32:	13 82       	std	Z+3, r1	; 0x03
    1b34:	12 82       	std	Z+2, r1	; 0x02
    1b36:	d0 93 ab 03 	sts	0x03AB, r29
    1b3a:	c0 93 aa 03 	sts	0x03AA, r28
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	08 95       	ret

00001b44 <strnlen_P>:
    1b44:	fc 01       	movw	r30, r24
    1b46:	05 90       	lpm	r0, Z+
    1b48:	61 50       	subi	r22, 0x01	; 1
    1b4a:	70 40       	sbci	r23, 0x00	; 0
    1b4c:	01 10       	cpse	r0, r1
    1b4e:	d8 f7       	brcc	.-10     	; 0x1b46 <strnlen_P+0x2>
    1b50:	80 95       	com	r24
    1b52:	90 95       	com	r25
    1b54:	8e 0f       	add	r24, r30
    1b56:	9f 1f       	adc	r25, r31
    1b58:	08 95       	ret

00001b5a <memset>:
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	01 c0       	rjmp	.+2      	; 0x1b60 <memset+0x6>
    1b5e:	6d 93       	st	X+, r22
    1b60:	41 50       	subi	r20, 0x01	; 1
    1b62:	50 40       	sbci	r21, 0x00	; 0
    1b64:	e0 f7       	brcc	.-8      	; 0x1b5e <memset+0x4>
    1b66:	08 95       	ret

00001b68 <strnlen>:
    1b68:	fc 01       	movw	r30, r24
    1b6a:	61 50       	subi	r22, 0x01	; 1
    1b6c:	70 40       	sbci	r23, 0x00	; 0
    1b6e:	01 90       	ld	r0, Z+
    1b70:	01 10       	cpse	r0, r1
    1b72:	d8 f7       	brcc	.-10     	; 0x1b6a <strnlen+0x2>
    1b74:	80 95       	com	r24
    1b76:	90 95       	com	r25
    1b78:	8e 0f       	add	r24, r30
    1b7a:	9f 1f       	adc	r25, r31
    1b7c:	08 95       	ret

00001b7e <fputc>:
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	18 2f       	mov	r17, r24
    1b88:	09 2f       	mov	r16, r25
    1b8a:	eb 01       	movw	r28, r22
    1b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8e:	81 fd       	sbrc	r24, 1
    1b90:	03 c0       	rjmp	.+6      	; 0x1b98 <fputc+0x1a>
    1b92:	8f ef       	ldi	r24, 0xFF	; 255
    1b94:	9f ef       	ldi	r25, 0xFF	; 255
    1b96:	20 c0       	rjmp	.+64     	; 0x1bd8 <fputc+0x5a>
    1b98:	82 ff       	sbrs	r24, 2
    1b9a:	10 c0       	rjmp	.+32     	; 0x1bbc <fputc+0x3e>
    1b9c:	4e 81       	ldd	r20, Y+6	; 0x06
    1b9e:	5f 81       	ldd	r21, Y+7	; 0x07
    1ba0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba4:	42 17       	cp	r20, r18
    1ba6:	53 07       	cpc	r21, r19
    1ba8:	7c f4       	brge	.+30     	; 0x1bc8 <fputc+0x4a>
    1baa:	e8 81       	ld	r30, Y
    1bac:	f9 81       	ldd	r31, Y+1	; 0x01
    1bae:	9f 01       	movw	r18, r30
    1bb0:	2f 5f       	subi	r18, 0xFF	; 255
    1bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb4:	39 83       	std	Y+1, r19	; 0x01
    1bb6:	28 83       	st	Y, r18
    1bb8:	10 83       	st	Z, r17
    1bba:	06 c0       	rjmp	.+12     	; 0x1bc8 <fputc+0x4a>
    1bbc:	e8 85       	ldd	r30, Y+8	; 0x08
    1bbe:	f9 85       	ldd	r31, Y+9	; 0x09
    1bc0:	81 2f       	mov	r24, r17
    1bc2:	19 95       	eicall
    1bc4:	89 2b       	or	r24, r25
    1bc6:	29 f7       	brne	.-54     	; 0x1b92 <fputc+0x14>
    1bc8:	2e 81       	ldd	r18, Y+6	; 0x06
    1bca:	3f 81       	ldd	r19, Y+7	; 0x07
    1bcc:	2f 5f       	subi	r18, 0xFF	; 255
    1bce:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd0:	3f 83       	std	Y+7, r19	; 0x07
    1bd2:	2e 83       	std	Y+6, r18	; 0x06
    1bd4:	81 2f       	mov	r24, r17
    1bd6:	90 2f       	mov	r25, r16
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	08 95       	ret

00001be2 <__ultoa_invert>:
    1be2:	fa 01       	movw	r30, r20
    1be4:	aa 27       	eor	r26, r26
    1be6:	28 30       	cpi	r18, 0x08	; 8
    1be8:	51 f1       	breq	.+84     	; 0x1c3e <__ultoa_invert+0x5c>
    1bea:	20 31       	cpi	r18, 0x10	; 16
    1bec:	81 f1       	breq	.+96     	; 0x1c4e <__ultoa_invert+0x6c>
    1bee:	e8 94       	clt
    1bf0:	6f 93       	push	r22
    1bf2:	6e 7f       	andi	r22, 0xFE	; 254
    1bf4:	6e 5f       	subi	r22, 0xFE	; 254
    1bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	af 4f       	sbci	r26, 0xFF	; 255
    1bfe:	b1 e0       	ldi	r27, 0x01	; 1
    1c00:	3e d0       	rcall	.+124    	; 0x1c7e <__ultoa_invert+0x9c>
    1c02:	b4 e0       	ldi	r27, 0x04	; 4
    1c04:	3c d0       	rcall	.+120    	; 0x1c7e <__ultoa_invert+0x9c>
    1c06:	67 0f       	add	r22, r23
    1c08:	78 1f       	adc	r23, r24
    1c0a:	89 1f       	adc	r24, r25
    1c0c:	9a 1f       	adc	r25, r26
    1c0e:	a1 1d       	adc	r26, r1
    1c10:	68 0f       	add	r22, r24
    1c12:	79 1f       	adc	r23, r25
    1c14:	8a 1f       	adc	r24, r26
    1c16:	91 1d       	adc	r25, r1
    1c18:	a1 1d       	adc	r26, r1
    1c1a:	6a 0f       	add	r22, r26
    1c1c:	71 1d       	adc	r23, r1
    1c1e:	81 1d       	adc	r24, r1
    1c20:	91 1d       	adc	r25, r1
    1c22:	a1 1d       	adc	r26, r1
    1c24:	20 d0       	rcall	.+64     	; 0x1c66 <__ultoa_invert+0x84>
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <__ultoa_invert+0x48>
    1c28:	68 94       	set
    1c2a:	3f 91       	pop	r19
    1c2c:	2a e0       	ldi	r18, 0x0A	; 10
    1c2e:	26 9f       	mul	r18, r22
    1c30:	11 24       	eor	r1, r1
    1c32:	30 19       	sub	r19, r0
    1c34:	30 5d       	subi	r19, 0xD0	; 208
    1c36:	31 93       	st	Z+, r19
    1c38:	de f6       	brtc	.-74     	; 0x1bf0 <__ultoa_invert+0xe>
    1c3a:	cf 01       	movw	r24, r30
    1c3c:	08 95       	ret
    1c3e:	46 2f       	mov	r20, r22
    1c40:	47 70       	andi	r20, 0x07	; 7
    1c42:	40 5d       	subi	r20, 0xD0	; 208
    1c44:	41 93       	st	Z+, r20
    1c46:	b3 e0       	ldi	r27, 0x03	; 3
    1c48:	0f d0       	rcall	.+30     	; 0x1c68 <__ultoa_invert+0x86>
    1c4a:	c9 f7       	brne	.-14     	; 0x1c3e <__ultoa_invert+0x5c>
    1c4c:	f6 cf       	rjmp	.-20     	; 0x1c3a <__ultoa_invert+0x58>
    1c4e:	46 2f       	mov	r20, r22
    1c50:	4f 70       	andi	r20, 0x0F	; 15
    1c52:	40 5d       	subi	r20, 0xD0	; 208
    1c54:	4a 33       	cpi	r20, 0x3A	; 58
    1c56:	18 f0       	brcs	.+6      	; 0x1c5e <__ultoa_invert+0x7c>
    1c58:	49 5d       	subi	r20, 0xD9	; 217
    1c5a:	31 fd       	sbrc	r19, 1
    1c5c:	40 52       	subi	r20, 0x20	; 32
    1c5e:	41 93       	st	Z+, r20
    1c60:	02 d0       	rcall	.+4      	; 0x1c66 <__ultoa_invert+0x84>
    1c62:	a9 f7       	brne	.-22     	; 0x1c4e <__ultoa_invert+0x6c>
    1c64:	ea cf       	rjmp	.-44     	; 0x1c3a <__ultoa_invert+0x58>
    1c66:	b4 e0       	ldi	r27, 0x04	; 4
    1c68:	a6 95       	lsr	r26
    1c6a:	97 95       	ror	r25
    1c6c:	87 95       	ror	r24
    1c6e:	77 95       	ror	r23
    1c70:	67 95       	ror	r22
    1c72:	ba 95       	dec	r27
    1c74:	c9 f7       	brne	.-14     	; 0x1c68 <__ultoa_invert+0x86>
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	61 05       	cpc	r22, r1
    1c7a:	71 05       	cpc	r23, r1
    1c7c:	08 95       	ret
    1c7e:	9b 01       	movw	r18, r22
    1c80:	ac 01       	movw	r20, r24
    1c82:	0a 2e       	mov	r0, r26
    1c84:	06 94       	lsr	r0
    1c86:	57 95       	ror	r21
    1c88:	47 95       	ror	r20
    1c8a:	37 95       	ror	r19
    1c8c:	27 95       	ror	r18
    1c8e:	ba 95       	dec	r27
    1c90:	c9 f7       	brne	.-14     	; 0x1c84 <__ultoa_invert+0xa2>
    1c92:	62 0f       	add	r22, r18
    1c94:	73 1f       	adc	r23, r19
    1c96:	84 1f       	adc	r24, r20
    1c98:	95 1f       	adc	r25, r21
    1c9a:	a0 1d       	adc	r26, r0
    1c9c:	08 95       	ret

00001c9e <_exit>:
    1c9e:	f8 94       	cli

00001ca0 <__stop_program>:
    1ca0:	ff cf       	rjmp	.-2      	; 0x1ca0 <__stop_program>
