
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016a  00800200  00001d4c  00001de0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  0080036a  0080036a  00001f4a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f4a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000388  00000000  00000000  00001fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002962  00000000  00000000  0000232e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013ff  00000000  00000000  00004c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003afb  00000000  00000000  0000608f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000087c  00000000  00000000  00009b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00012ee9  00000000  00000000  0000a408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015ce  00000000  00000000  0001d2f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a0  00000000  00000000  0001e8bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00005219  00000000  00000000  0001eb5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	09 c1       	rjmp	.+530    	; 0x22c <__vector_6>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	c3 c1       	rjmp	.+902    	; 0x3dc <__vector_21>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ef c6       	rjmp	.+3550   	; 0xe7c <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	59 07       	cpc	r21, r25
      e6:	ab 07       	cpc	r26, r27
      e8:	ab 07       	cpc	r26, r27
      ea:	ab 07       	cpc	r26, r27
      ec:	ab 07       	cpc	r26, r27
      ee:	ab 07       	cpc	r26, r27
      f0:	ab 07       	cpc	r26, r27
      f2:	ab 07       	cpc	r26, r27
      f4:	59 07       	cpc	r21, r25
      f6:	ab 07       	cpc	r26, r27
      f8:	ab 07       	cpc	r26, r27
      fa:	ab 07       	cpc	r26, r27
      fc:	ab 07       	cpc	r26, r27
      fe:	ab 07       	cpc	r26, r27
     100:	ab 07       	cpc	r26, r27
     102:	ab 07       	cpc	r26, r27
     104:	5b 07       	cpc	r21, r27
     106:	ab 07       	cpc	r26, r27
     108:	ab 07       	cpc	r26, r27
     10a:	ab 07       	cpc	r26, r27
     10c:	ab 07       	cpc	r26, r27
     10e:	ab 07       	cpc	r26, r27
     110:	ab 07       	cpc	r26, r27
     112:	ab 07       	cpc	r26, r27
     114:	ab 07       	cpc	r26, r27
     116:	ab 07       	cpc	r26, r27
     118:	ab 07       	cpc	r26, r27
     11a:	ab 07       	cpc	r26, r27
     11c:	ab 07       	cpc	r26, r27
     11e:	ab 07       	cpc	r26, r27
     120:	ab 07       	cpc	r26, r27
     122:	ab 07       	cpc	r26, r27
     124:	5b 07       	cpc	r21, r27
     126:	ab 07       	cpc	r26, r27
     128:	ab 07       	cpc	r26, r27
     12a:	ab 07       	cpc	r26, r27
     12c:	ab 07       	cpc	r26, r27
     12e:	ab 07       	cpc	r26, r27
     130:	ab 07       	cpc	r26, r27
     132:	ab 07       	cpc	r26, r27
     134:	ab 07       	cpc	r26, r27
     136:	ab 07       	cpc	r26, r27
     138:	ab 07       	cpc	r26, r27
     13a:	ab 07       	cpc	r26, r27
     13c:	ab 07       	cpc	r26, r27
     13e:	ab 07       	cpc	r26, r27
     140:	ab 07       	cpc	r26, r27
     142:	ab 07       	cpc	r26, r27
     144:	a7 07       	cpc	r26, r23
     146:	ab 07       	cpc	r26, r27
     148:	ab 07       	cpc	r26, r27
     14a:	ab 07       	cpc	r26, r27
     14c:	ab 07       	cpc	r26, r27
     14e:	ab 07       	cpc	r26, r27
     150:	ab 07       	cpc	r26, r27
     152:	ab 07       	cpc	r26, r27
     154:	84 07       	cpc	r24, r20
     156:	ab 07       	cpc	r26, r27
     158:	ab 07       	cpc	r26, r27
     15a:	ab 07       	cpc	r26, r27
     15c:	ab 07       	cpc	r26, r27
     15e:	ab 07       	cpc	r26, r27
     160:	ab 07       	cpc	r26, r27
     162:	ab 07       	cpc	r26, r27
     164:	ab 07       	cpc	r26, r27
     166:	ab 07       	cpc	r26, r27
     168:	ab 07       	cpc	r26, r27
     16a:	ab 07       	cpc	r26, r27
     16c:	ab 07       	cpc	r26, r27
     16e:	ab 07       	cpc	r26, r27
     170:	ab 07       	cpc	r26, r27
     172:	ab 07       	cpc	r26, r27
     174:	78 07       	cpc	r23, r24
     176:	ab 07       	cpc	r26, r27
     178:	ab 07       	cpc	r26, r27
     17a:	ab 07       	cpc	r26, r27
     17c:	ab 07       	cpc	r26, r27
     17e:	ab 07       	cpc	r26, r27
     180:	ab 07       	cpc	r26, r27
     182:	ab 07       	cpc	r26, r27
     184:	96 07       	cpc	r25, r22

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	13 e0       	ldi	r17, 0x03	; 3
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ec e4       	ldi	r30, 0x4C	; 76
     19e:	fd e1       	ldi	r31, 0x1D	; 29
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	aa 36       	cpi	r26, 0x6A	; 106
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	23 e0       	ldi	r18, 0x03	; 3
     1b2:	aa e6       	ldi	r26, 0x6A	; 106
     1b4:	b3 e0       	ldi	r27, 0x03	; 3
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a8 39       	cpi	r26, 0x98	; 152
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	0e d7       	rcall	.+3612   	; 0xfde <main>
     1c2:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <ADC_init>:
#include "ADC.h"


void ADC_init(void){
	// Enable ADC
	set_bit(ADCSRA, ADEN); 
     1c8:	ea e7       	ldi	r30, 0x7A	; 122
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	80 83       	st	Z, r24
	
	// Using a prescaler of 128. (To determine frequency of successive approximations. ADPS bit in ADCSRA)
	set_bit(ADCSRA, ADPS2);
     1d2:	80 81       	ld	r24, Z
     1d4:	84 60       	ori	r24, 0x04	; 4
     1d6:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS1);
     1d8:	80 81       	ld	r24, Z
     1da:	82 60       	ori	r24, 0x02	; 2
     1dc:	80 83       	st	Z, r24
	set_bit(ADCSRA, ADPS0);
     1de:	80 81       	ld	r24, Z
     1e0:	81 60       	ori	r24, 0x01	; 1
     1e2:	80 83       	st	Z, r24
	
	// Voltage reference: AVCC with external capacitor at AREF pin [Table 26-3]
	set_bit(ADMUX, REFS0); 
     1e4:	ec e7       	ldi	r30, 0x7C	; 124
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	80 64       	ori	r24, 0x40	; 64
     1ec:	80 83       	st	Z, r24
     1ee:	08 95       	ret

000001f0 <CAN_int_vect>:
	}
	MCP2515_bit_modify(MCP_CANCTRL,0xE0, 0x00);
	
	printf("ERROR FLAGS: %x\n", MCP2515_read(MCP_EFLG));
	
}
     1f0:	cf 93       	push	r28
     1f2:	8c e2       	ldi	r24, 0x2C	; 44
     1f4:	8d d1       	rcall	.+794    	; 0x510 <MCP2515_read>
     1f6:	c8 2f       	mov	r28, r24
     1f8:	80 ff       	sbrs	r24, 0
     1fa:	0a c0       	rjmp	.+20     	; 0x210 <CAN_int_vect+0x20>
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	8c e2       	ldi	r24, 0x2C	; 44
     202:	93 d1       	rcall	.+806    	; 0x52a <MCP2515_bit_modify>
     204:	21 e0       	ldi	r18, 0x01	; 1
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	30 93 6d 03 	sts	0x036D, r19
     20c:	20 93 6c 03 	sts	0x036C, r18
     210:	c1 ff       	sbrs	r28, 1
     212:	0a c0       	rjmp	.+20     	; 0x228 <CAN_int_vect+0x38>
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	62 e0       	ldi	r22, 0x02	; 2
     218:	8c e2       	ldi	r24, 0x2C	; 44
     21a:	87 d1       	rcall	.+782    	; 0x52a <MCP2515_bit_modify>
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	90 93 6b 03 	sts	0x036B, r25
     224:	80 93 6a 03 	sts	0x036A, r24
     228:	cf 91       	pop	r28
     22a:	08 95       	ret

0000022c <__vector_6>:
     22c:	1f 92       	push	r1
     22e:	0f 92       	push	r0
     230:	0f b6       	in	r0, 0x3f	; 63
     232:	0f 92       	push	r0
     234:	11 24       	eor	r1, r1
     236:	0b b6       	in	r0, 0x3b	; 59
     238:	0f 92       	push	r0
     23a:	2f 93       	push	r18
     23c:	3f 93       	push	r19
     23e:	4f 93       	push	r20
     240:	5f 93       	push	r21
     242:	6f 93       	push	r22
     244:	7f 93       	push	r23
     246:	8f 93       	push	r24
     248:	9f 93       	push	r25
     24a:	af 93       	push	r26
     24c:	bf 93       	push	r27
     24e:	ef 93       	push	r30
     250:	ff 93       	push	r31
     252:	ce df       	rcall	.-100    	; 0x1f0 <CAN_int_vect>
     254:	ff 91       	pop	r31
     256:	ef 91       	pop	r30
     258:	bf 91       	pop	r27
     25a:	af 91       	pop	r26
     25c:	9f 91       	pop	r25
     25e:	8f 91       	pop	r24
     260:	7f 91       	pop	r23
     262:	6f 91       	pop	r22
     264:	5f 91       	pop	r21
     266:	4f 91       	pop	r20
     268:	3f 91       	pop	r19
     26a:	2f 91       	pop	r18
     26c:	0f 90       	pop	r0
     26e:	0b be       	out	0x3b, r0	; 59
     270:	0f 90       	pop	r0
     272:	0f be       	out	0x3f, r0	; 63
     274:	0f 90       	pop	r0
     276:	1f 90       	pop	r1
     278:	18 95       	reti

0000027a <CAN_init>:
     27a:	ed 98       	cbi	0x1d, 5	; 29
     27c:	ea e6       	ldi	r30, 0x6A	; 106
     27e:	f0 e0       	ldi	r31, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	87 7f       	andi	r24, 0xF7	; 247
     284:	80 83       	st	Z, r24
     286:	80 81       	ld	r24, Z
     288:	8b 7f       	andi	r24, 0xFB	; 251
     28a:	80 83       	st	Z, r24
     28c:	ed 9a       	sbi	0x1d, 5	; 29
     28e:	66 d1       	rcall	.+716    	; 0x55c <MCP2515_init>
     290:	4f ef       	ldi	r20, 0xFF	; 255
     292:	64 e6       	ldi	r22, 0x64	; 100
     294:	80 e6       	ldi	r24, 0x60	; 96
     296:	49 d1       	rcall	.+658    	; 0x52a <MCP2515_bit_modify>
     298:	4f ef       	ldi	r20, 0xFF	; 255
     29a:	60 e6       	ldi	r22, 0x60	; 96
     29c:	80 e7       	ldi	r24, 0x70	; 112
     29e:	45 d1       	rcall	.+650    	; 0x52a <MCP2515_bit_modify>
     2a0:	43 e0       	ldi	r20, 0x03	; 3
     2a2:	63 e0       	ldi	r22, 0x03	; 3
     2a4:	8b e2       	ldi	r24, 0x2B	; 43
     2a6:	41 d1       	rcall	.+642    	; 0x52a <MCP2515_bit_modify>
     2a8:	40 e0       	ldi	r20, 0x00	; 0
     2aa:	60 ee       	ldi	r22, 0xE0	; 224
     2ac:	8f e0       	ldi	r24, 0x0F	; 15
     2ae:	3d c1       	rjmp	.+634    	; 0x52a <MCP2515_bit_modify>
     2b0:	08 95       	ret

000002b2 <CAN_data_receive>:
     2b2:	df 92       	push	r13
     2b4:	ef 92       	push	r14
     2b6:	ff 92       	push	r15
     2b8:	0f 93       	push	r16
     2ba:	1f 93       	push	r17
     2bc:	cf 93       	push	r28
     2be:	df 93       	push	r29
     2c0:	8c 01       	movw	r16, r24
     2c2:	f8 94       	cli
     2c4:	80 91 6c 03 	lds	r24, 0x036C
     2c8:	90 91 6d 03 	lds	r25, 0x036D
     2cc:	89 2b       	or	r24, r25
     2ce:	39 f0       	breq	.+14     	; 0x2de <CAN_data_receive+0x2c>
     2d0:	10 92 6d 03 	sts	0x036D, r1
     2d4:	10 92 6c 03 	sts	0x036C, r1
     2d8:	c0 e0       	ldi	r28, 0x00	; 0
     2da:	d0 e0       	ldi	r29, 0x00	; 0
     2dc:	11 c0       	rjmp	.+34     	; 0x300 <CAN_data_receive+0x4e>
     2de:	80 91 6a 03 	lds	r24, 0x036A
     2e2:	90 91 6b 03 	lds	r25, 0x036B
     2e6:	89 2b       	or	r24, r25
     2e8:	39 f0       	breq	.+14     	; 0x2f8 <CAN_data_receive+0x46>
     2ea:	10 92 6b 03 	sts	0x036B, r1
     2ee:	10 92 6a 03 	sts	0x036A, r1
     2f2:	c1 e0       	ldi	r28, 0x01	; 1
     2f4:	d0 e0       	ldi	r29, 0x00	; 0
     2f6:	04 c0       	rjmp	.+8      	; 0x300 <CAN_data_receive+0x4e>
     2f8:	f8 01       	movw	r30, r16
     2fa:	12 82       	std	Z+2, r1	; 0x02
     2fc:	78 94       	sei
     2fe:	3e c0       	rjmp	.+124    	; 0x37c <CAN_data_receive+0xca>
     300:	fc 2e       	mov	r15, r28
     302:	ff 0c       	add	r15, r15
     304:	ff 0c       	add	r15, r15
     306:	ff 0c       	add	r15, r15
     308:	ff 0c       	add	r15, r15
     30a:	81 e6       	ldi	r24, 0x61	; 97
     30c:	8f 0d       	add	r24, r15
     30e:	00 d1       	rcall	.+512    	; 0x510 <MCP2515_read>
     310:	e8 2e       	mov	r14, r24
     312:	82 e6       	ldi	r24, 0x62	; 98
     314:	8f 0d       	add	r24, r15
     316:	fc d0       	rcall	.+504    	; 0x510 <MCP2515_read>
     318:	2e 2d       	mov	r18, r14
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	22 0f       	add	r18, r18
     31e:	33 1f       	adc	r19, r19
     320:	22 0f       	add	r18, r18
     322:	33 1f       	adc	r19, r19
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	82 95       	swap	r24
     32a:	86 95       	lsr	r24
     32c:	87 70       	andi	r24, 0x07	; 7
     32e:	28 0f       	add	r18, r24
     330:	31 1d       	adc	r19, r1
     332:	f8 01       	movw	r30, r16
     334:	31 83       	std	Z+1, r19	; 0x01
     336:	20 83       	st	Z, r18
     338:	85 e6       	ldi	r24, 0x65	; 101
     33a:	8f 0d       	add	r24, r15
     33c:	e9 d0       	rcall	.+466    	; 0x510 <MCP2515_read>
     33e:	87 70       	andi	r24, 0x07	; 7
     340:	f8 01       	movw	r30, r16
     342:	82 83       	std	Z+2, r24	; 0x02
     344:	88 23       	and	r24, r24
     346:	c9 f0       	breq	.+50     	; 0x37a <CAN_data_receive+0xc8>
     348:	7e 01       	movw	r14, r28
     34a:	ee 0c       	add	r14, r14
     34c:	ff 1c       	adc	r15, r15
     34e:	ee 0c       	add	r14, r14
     350:	ff 1c       	adc	r15, r15
     352:	ee 0c       	add	r14, r14
     354:	ff 1c       	adc	r15, r15
     356:	ee 0c       	add	r14, r14
     358:	ff 1c       	adc	r15, r15
     35a:	d1 2c       	mov	r13, r1
     35c:	cd 2d       	mov	r28, r13
     35e:	d0 e0       	ldi	r29, 0x00	; 0
     360:	ce 01       	movw	r24, r28
     362:	8a 59       	subi	r24, 0x9A	; 154
     364:	9f 4f       	sbci	r25, 0xFF	; 255
     366:	8e 0d       	add	r24, r14
     368:	d3 d0       	rcall	.+422    	; 0x510 <MCP2515_read>
     36a:	c0 0f       	add	r28, r16
     36c:	d1 1f       	adc	r29, r17
     36e:	8b 83       	std	Y+3, r24	; 0x03
     370:	d3 94       	inc	r13
     372:	f8 01       	movw	r30, r16
     374:	82 81       	ldd	r24, Z+2	; 0x02
     376:	d8 16       	cp	r13, r24
     378:	88 f3       	brcs	.-30     	; 0x35c <CAN_data_receive+0xaa>
     37a:	78 94       	sei
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	ff 90       	pop	r15
     386:	ef 90       	pop	r14
     388:	df 90       	pop	r13
     38a:	08 95       	ret

0000038c <receive_control_inputs>:

can_message receive_control_inputs(void){
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	cd b7       	in	r28, 0x3d	; 61
     396:	de b7       	in	r29, 0x3e	; 62
     398:	2b 97       	sbiw	r28, 0x0b	; 11
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	de bf       	out	0x3e, r29	; 62
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	cd bf       	out	0x3d, r28	; 61
     3a4:	8c 01       	movw	r16, r24
	can_message msg;
	msg.length = 0;
     3a6:	1b 82       	std	Y+3, r1	; 0x03
	
	while (!msg.length) {
		CAN_data_receive(&msg);
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	82 df       	rcall	.-252    	; 0x2b2 <CAN_data_receive>

can_message receive_control_inputs(void){
	can_message msg;
	msg.length = 0;
	
	while (!msg.length) {
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	88 23       	and	r24, r24
     3b2:	d1 f3       	breq	.-12     	; 0x3a8 <receive_control_inputs+0x1c>
		CAN_data_receive(&msg);
	}
	return msg;
     3b4:	8b e0       	ldi	r24, 0x0B	; 11
     3b6:	fe 01       	movw	r30, r28
     3b8:	31 96       	adiw	r30, 0x01	; 1
     3ba:	d8 01       	movw	r26, r16
     3bc:	01 90       	ld	r0, Z+
     3be:	0d 92       	st	X+, r0
     3c0:	8a 95       	dec	r24
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <receive_control_inputs+0x30>
     3c4:	c8 01       	movw	r24, r16
     3c6:	2b 96       	adiw	r28, 0x0b	; 11
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	08 95       	ret

000003dc <__vector_21>:
#define SOLENOID_CHARGE_TIME ((double) 1000)/1000  // s

#define SOLENOID_MAX_CHARGE (int)(INTERRUPT_FREQUENCY * SOLENOID_CHARGE_TIME)

// Set the timer_flag when the timer has counted to OCR0A
ISR(TIMER0_COMPA_vect){
     3dc:	1f 92       	push	r1
     3de:	0f 92       	push	r0
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	0f 92       	push	r0
     3e4:	11 24       	eor	r1, r1
     3e6:	8f 93       	push	r24
     3e8:	9f 93       	push	r25
	// Increment solenoid charge
	solenoid_charge = MIN(solenoid_charge + 1, SOLENOID_MAX_CHARGE);
     3ea:	80 91 7a 03 	lds	r24, 0x037A
     3ee:	90 91 7b 03 	lds	r25, 0x037B
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	83 34       	cpi	r24, 0x43	; 67
     3f6:	91 05       	cpc	r25, r1
     3f8:	34 f4       	brge	.+12     	; 0x406 <__vector_21+0x2a>
     3fa:	80 91 7a 03 	lds	r24, 0x037A
     3fe:	90 91 7b 03 	lds	r25, 0x037B
     402:	01 96       	adiw	r24, 0x01	; 1
     404:	02 c0       	rjmp	.+4      	; 0x40a <__vector_21+0x2e>
     406:	82 e4       	ldi	r24, 0x42	; 66
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	90 93 7b 03 	sts	0x037B, r25
     40e:	80 93 7a 03 	sts	0x037A, r24
	
	// Set timer flag
	timer_flag = 1;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	90 93 7d 03 	sts	0x037D, r25
     41a:	80 93 7c 03 	sts	0x037C, r24
}
     41e:	9f 91       	pop	r25
     420:	8f 91       	pop	r24
     422:	0f 90       	pop	r0
     424:	0f be       	out	0x3f, r0	; 63
     426:	0f 90       	pop	r0
     428:	1f 90       	pop	r1
     42a:	18 95       	reti

0000042c <CONTROL_init>:


// Initializes timer
void CONTROL_init(void) {
	// CTC mode (count until you reach a target clock count, then the interrupt is activated) [Table 16-8]
	set_bit(TCCR0A, WGM01);
     42c:	84 b5       	in	r24, 0x24	; 36
     42e:	82 60       	ori	r24, 0x02	; 2
     430:	84 bd       	out	0x24, r24	; 36
		
	// Prescaler 1024 [Table 16-9]
	set_bit(TCCR0B, CS00);
     432:	85 b5       	in	r24, 0x25	; 37
     434:	81 60       	ori	r24, 0x01	; 1
     436:	85 bd       	out	0x25, r24	; 37
	set_bit(TCCR0B, CS02);
     438:	85 b5       	in	r24, 0x25	; 37
     43a:	84 60       	ori	r24, 0x04	; 4
     43c:	85 bd       	out	0x25, r24	; 37
		
	// 66.67 Hz timer, assuming 16MHz clock.
	OCR0A = 234;
     43e:	8a ee       	ldi	r24, 0xEA	; 234
     440:	87 bd       	out	0x27, r24	; 39
		
	// Make sure the counter resets upon reaching its target (OCR0A). Enables interrupts [16.9.6]
	set_bit(TIMSK0, OCIE0A);
     442:	ee e6       	ldi	r30, 0x6E	; 110
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	82 60       	ori	r24, 0x02	; 2
     44a:	80 83       	st	Z, r24
     44c:	08 95       	ret

0000044e <CONTROL_run>:
}


void CONTROL_run(control control_type) {
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	2b 97       	sbiw	r28, 0x0b	; 11
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	cd bf       	out	0x3d, r28	; 61
     462:	f8 2e       	mov	r15, r24
	while(1) {
		can_message control_inputs = receive_control_inputs();
     464:	ce 01       	movw	r24, r28
     466:	01 96       	adiw	r24, 0x01	; 1
     468:	91 df       	rcall	.-222    	; 0x38c <receive_control_inputs>
		int8_t velocity_reference = control_inputs.data[JOYSTICK_X];
     46a:	0c 81       	ldd	r16, Y+4	; 0x04
		uint8_t slider_left = control_inputs.data[SLIDER_LEFT];
     46c:	1e 81       	ldd	r17, Y+6	; 0x06
		uint8_t slider_right = control_inputs.data[SLIDER_RIGHT];
		
		uint8_t buttons = control_inputs.data[BUTTONS];
     46e:	98 85       	ldd	r25, Y+8	; 0x08
		if ((solenoid_charge == SOLENOID_MAX_CHARGE) && (buttons & (1 << JOY_BUTTON))){
     470:	20 91 7a 03 	lds	r18, 0x037A
     474:	30 91 7b 03 	lds	r19, 0x037B
     478:	22 34       	cpi	r18, 0x42	; 66
     47a:	31 05       	cpc	r19, r1
     47c:	39 f4       	brne	.+14     	; 0x48c <CONTROL_run+0x3e>
     47e:	92 ff       	sbrs	r25, 2
     480:	05 c0       	rjmp	.+10     	; 0x48c <CONTROL_run+0x3e>
			solenoid_send_pulse();
     482:	55 d4       	rcall	.+2218   	; 0xd2e <solenoid_send_pulse>
			solenoid_charge = 0;
     484:	10 92 7b 03 	sts	0x037B, r1
     488:	10 92 7a 03 	sts	0x037A, r1
		}
		
		servo_set(slider_left);
     48c:	81 2f       	mov	r24, r17
     48e:	ff d3       	rcall	.+2046   	; 0xc8e <servo_set>
		
		if (timer_flag) {
     490:	20 91 7c 03 	lds	r18, 0x037C
     494:	30 91 7d 03 	lds	r19, 0x037D
     498:	23 2b       	or	r18, r19
     49a:	21 f3       	breq	.-56     	; 0x464 <CONTROL_run+0x16>
			timer_flag = 0;
     49c:	10 92 7d 03 	sts	0x037D, r1
     4a0:	10 92 7c 03 	sts	0x037C, r1
			switch (control_type) {
     4a4:	ff 20       	and	r15, r15
     4a6:	21 f0       	breq	.+8      	; 0x4b0 <CONTROL_run+0x62>
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	f8 16       	cp	r15, r24
     4ac:	39 f0       	breq	.+14     	; 0x4bc <CONTROL_run+0x6e>
     4ae:	da cf       	rjmp	.-76     	; 0x464 <CONTROL_run+0x16>
				case OPEN_LOOP: 
				motor_set_velocity(velocity_reference); 
     4b0:	80 2f       	mov	r24, r16
     4b2:	99 27       	eor	r25, r25
     4b4:	87 fd       	sbrc	r24, 7
     4b6:	90 95       	com	r25
     4b8:	87 d0       	rcall	.+270    	; 0x5c8 <motor_set_velocity>
				break;
     4ba:	d4 cf       	rjmp	.-88     	; 0x464 <CONTROL_run+0x16>
				
				case CLOSED_LOOP: 
				PI_control(velocity_reference);
     4bc:	60 2f       	mov	r22, r16
     4be:	77 27       	eor	r23, r23
     4c0:	67 fd       	sbrc	r22, 7
     4c2:	70 95       	com	r23
     4c4:	87 2f       	mov	r24, r23
     4c6:	97 2f       	mov	r25, r23
     4c8:	97 d6       	rcall	.+3374   	; 0x11f8 <__floatsisf>
     4ca:	0d d3       	rcall	.+1562   	; 0xae6 <PI_control>
			}
		}
	}
     4cc:	cb cf       	rjmp	.-106    	; 0x464 <CONTROL_run+0x16>

000004ce <IR_init>:

#define DISRUPTION_THRESHOLD 10
#define MOVING_AVERAGE_SIZE 4

void IR_init(void) {
	ADC_init();
     4ce:	7c ce       	rjmp	.-776    	; 0x1c8 <ADC_init>
     4d0:	08 95       	ret

000004d2 <MAX520_init>:


uint8_t max520_address = 0x00;


void MAX520_init(uint8_t three_bit_address){
     4d2:	cf 93       	push	r28
     4d4:	c8 2f       	mov	r28, r24
	TWI_Master_Initialise(); //Initialize TWI for transferring
     4d6:	a6 d4       	rcall	.+2380   	; 0xe24 <TWI_Master_Initialise>
	sei();
     4d8:	78 94       	sei
	max520_address = MAX520_ADDRESS_BASE + (three_bit_address << 1); //Set the correct address for the TWI bus
     4da:	cc 0f       	add	r28, r28
     4dc:	c0 5b       	subi	r28, 0xB0	; 176
     4de:	c0 93 6e 03 	sts	0x036E, r28
}
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <MAX520_send>:


// Channel must be between 0 and 3 (DAC0 - DAC3)
void MAX520_send(uint8_t channel, uint8_t data){
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <MAX520_send+0x6>
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
	//Message has the following format {address, command, output}
	uint8_t message[MAX520_MESSAGE_SIZE] = {
     4f0:	90 91 6e 03 	lds	r25, 0x036E
     4f4:	99 83       	std	Y+1, r25	; 0x01
     4f6:	88 0f       	add	r24, r24
     4f8:	8a 83       	std	Y+2, r24	; 0x02
     4fa:	6b 83       	std	Y+3, r22	; 0x03
		0x00 + (channel << 1), 
		data
	};
	
	//Send the data over TWI
	TWI_Start_Transceiver_With_Data(message, MAX520_MESSAGE_SIZE);	
     4fc:	63 e0       	ldi	r22, 0x03	; 3
     4fe:	ce 01       	movw	r24, r28
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	9a d4       	rcall	.+2356   	; 0xe38 <TWI_Start_Transceiver_With_Data>
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <MCP2515_read>:
//Buffer states: three bit, setting a 1 on the buffer initiates transmitting from it 
void MCP2515_request_to_send(uint8_t buffer_states) {
	SPI_select();
	SPI_send(RTS_BASE+buffer_states);
	SPI_deselect();
}
     510:	cf 93       	push	r28
     512:	c8 2f       	mov	r28, r24
     514:	32 d4       	rcall	.+2148   	; 0xd7a <SPI_select>
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	24 d4       	rcall	.+2120   	; 0xd62 <SPI_send>
     51a:	8c 2f       	mov	r24, r28
     51c:	22 d4       	rcall	.+2116   	; 0xd62 <SPI_send>
     51e:	26 d4       	rcall	.+2124   	; 0xd6c <SPI_read>
     520:	c8 2f       	mov	r28, r24
     522:	2d d4       	rcall	.+2138   	; 0xd7e <SPI_deselect>
     524:	8c 2f       	mov	r24, r28
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <MCP2515_bit_modify>:

//puts new_data in the selected reg_adress. the function assumes that you are allowed to change every bit in the register
void MCP2515_bit_modify(uint8_t reg_address, uint8_t masked_bits, uint8_t new_data) {
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	18 2f       	mov	r17, r24
     532:	d6 2f       	mov	r29, r22
     534:	c4 2f       	mov	r28, r20
	SPI_select();
     536:	21 d4       	rcall	.+2114   	; 0xd7a <SPI_select>
	SPI_send(BIT_MODIFY);
     538:	85 e0       	ldi	r24, 0x05	; 5
     53a:	13 d4       	rcall	.+2086   	; 0xd62 <SPI_send>
	SPI_send(reg_address);
     53c:	81 2f       	mov	r24, r17
     53e:	11 d4       	rcall	.+2082   	; 0xd62 <SPI_send>
	SPI_send(masked_bits);
     540:	8d 2f       	mov	r24, r29
     542:	0f d4       	rcall	.+2078   	; 0xd62 <SPI_send>
	SPI_send(new_data);
     544:	8c 2f       	mov	r24, r28
     546:	0d d4       	rcall	.+2074   	; 0xd62 <SPI_send>
	SPI_deselect();
     548:	1a d4       	rcall	.+2100   	; 0xd7e <SPI_deselect>
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	08 95       	ret

00000552 <MCP2515_reset>:

void MCP2515_reset(void) {
	SPI_select();
     552:	13 d4       	rcall	.+2086   	; 0xd7a <SPI_select>
	SPI_send(RESET);
     554:	80 ec       	ldi	r24, 0xC0	; 192
     556:	05 d4       	rcall	.+2058   	; 0xd62 <SPI_send>
	SPI_deselect();
     558:	12 c4       	rjmp	.+2084   	; 0xd7e <SPI_deselect>
     55a:	08 95       	ret

0000055c <MCP2515_init>:
#define BIT_MODIFY 0x05
#define RTS_BASE 0x80


uint8_t MCP2515_init(void) {
	SPI_init();
     55c:	f4 d3       	rcall	.+2024   	; 0xd46 <SPI_init>
	MCP2515_reset();
     55e:	f9 df       	rcall	.-14     	; 0x552 <MCP2515_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     560:	8f e8       	ldi	r24, 0x8F	; 143
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	01 97       	sbiw	r24, 0x01	; 1
     566:	f1 f7       	brne	.-4      	; 0x564 <MCP2515_init+0x8>
     568:	00 c0       	rjmp	.+0      	; 0x56a <MCP2515_init+0xe>
     56a:	00 00       	nop
	
	_delay_us(100); //why oh why
	//check bit 7-5 of MCP_CANSTAT which signify the operation mode
	const uint8_t device_mode = MCP2515_read(MCP_CANSTAT) & MODE_MASK;
     56c:	8e e0       	ldi	r24, 0x0E	; 14
     56e:	d0 df       	rcall	.-96     	; 0x510 <MCP2515_read>
     570:	80 7e       	andi	r24, 0xE0	; 224

	if (device_mode != MODE_CONFIG) {
     572:	80 38       	cpi	r24, 0x80	; 128
     574:	29 f0       	breq	.+10     	; 0x580 <MCP2515_init+0x24>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
     576:	8b e1       	ldi	r24, 0x1B	; 27
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	dd d7       	rcall	.+4026   	; 0x1536 <puts>
		return 1;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	08 95       	ret
	}
	
	return 0;
     580:	80 e0       	ldi	r24, 0x00	; 0
}
     582:	08 95       	ret

00000584 <motor_enable>:
void motor_enable(void) {
	set_bit(MJ1, EN);
}

void motor_disable(void) {
	clear_bit(MJ1, EN);
     584:	e2 e0       	ldi	r30, 0x02	; 2
     586:	f1 e0       	ldi	r31, 0x01	; 1
     588:	80 81       	ld	r24, Z
     58a:	80 61       	ori	r24, 0x10	; 16
     58c:	80 83       	st	Z, r24
     58e:	08 95       	ret

00000590 <motor_set_direction>:
	motor_set_direction(motor_direction);
	motor_set_speed(motor_speed);
}

void motor_set_direction(direction motor_direction) {
	(motor_direction == LEFT) ? clear_bit(MJ1, DIR) : set_bit(MJ1, DIR);
     590:	81 11       	cpse	r24, r1
     592:	06 c0       	rjmp	.+12     	; 0x5a0 <motor_set_direction+0x10>
     594:	e2 e0       	ldi	r30, 0x02	; 2
     596:	f1 e0       	ldi	r31, 0x01	; 1
     598:	80 81       	ld	r24, Z
     59a:	8d 7f       	andi	r24, 0xFD	; 253
     59c:	80 83       	st	Z, r24
     59e:	08 95       	ret
     5a0:	e2 e0       	ldi	r30, 0x02	; 2
     5a2:	f1 e0       	ldi	r31, 0x01	; 1
     5a4:	80 81       	ld	r24, Z
     5a6:	82 60       	ori	r24, 0x02	; 2
     5a8:	80 83       	st	Z, r24
     5aa:	08 95       	ret

000005ac <motor_set_speed>:
}

void motor_set_speed(uint8_t motor_speed) {
	MAX520_send(MOTOR_SPEED_CHANNEL, MOTOR_GAIN * motor_speed);
     5ac:	68 2f       	mov	r22, r24
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	21 d6       	rcall	.+3138   	; 0x11f8 <__floatsisf>
     5b6:	21 ee       	ldi	r18, 0xE1	; 225
     5b8:	3a e7       	ldi	r19, 0x7A	; 122
     5ba:	44 ee       	ldi	r20, 0xE4	; 228
     5bc:	5f e3       	ldi	r21, 0x3F	; 63
     5be:	d0 d6       	rcall	.+3488   	; 0x1360 <__mulsf3>
     5c0:	ed d5       	rcall	.+3034   	; 0x119c <__fixunssfsi>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 cf       	rjmp	.-224    	; 0x4e6 <MAX520_send>
     5c6:	08 95       	ret

000005c8 <motor_set_velocity>:

void motor_disable(void) {
	clear_bit(MJ1, EN);
}

void motor_set_velocity(int16_t motor_velocity) { // u
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
	
	// Find the motor direction. Negative velocity corresponds to left.
	direction motor_direction = (motor_velocity < 0) ? LEFT : RIGHT;
	
	// Speed is in absolute value. Make sure it is not greater than 100.
	motor_velocity = SATURATE(motor_velocity, -100, 100);
     5cc:	c8 2f       	mov	r28, r24
     5ce:	d9 2f       	mov	r29, r25
     5d0:	cc 39       	cpi	r28, 0x9C	; 156
     5d2:	8f ef       	ldi	r24, 0xFF	; 255
     5d4:	d8 07       	cpc	r29, r24
     5d6:	14 f4       	brge	.+4      	; 0x5dc <motor_set_velocity+0x14>
     5d8:	cc e9       	ldi	r28, 0x9C	; 156
     5da:	df ef       	ldi	r29, 0xFF	; 255
}

void motor_set_velocity(int16_t motor_velocity) { // u
	
	// Find the motor direction. Negative velocity corresponds to left.
	direction motor_direction = (motor_velocity < 0) ? LEFT : RIGHT;
     5dc:	89 2f       	mov	r24, r25
     5de:	80 95       	com	r24
	// Speed is in absolute value. Make sure it is not greater than 100.
	motor_velocity = SATURATE(motor_velocity, -100, 100);
	uint8_t motor_speed = abs(motor_velocity);
	
	// Set direction and speed of motor.
	motor_set_direction(motor_direction);
     5e0:	88 1f       	adc	r24, r24
     5e2:	88 27       	eor	r24, r24
     5e4:	88 1f       	adc	r24, r24
     5e6:	d4 df       	rcall	.-88     	; 0x590 <motor_set_direction>
     5e8:	c5 36       	cpi	r28, 0x65	; 101
     5ea:	d1 05       	cpc	r29, r1
     5ec:	14 f0       	brlt	.+4      	; 0x5f2 <motor_set_velocity+0x2a>
     5ee:	c4 e6       	ldi	r28, 0x64	; 100
     5f0:	d0 e0       	ldi	r29, 0x00	; 0
	// Find the motor direction. Negative velocity corresponds to left.
	direction motor_direction = (motor_velocity < 0) ? LEFT : RIGHT;
	
	// Speed is in absolute value. Make sure it is not greater than 100.
	motor_velocity = SATURATE(motor_velocity, -100, 100);
	uint8_t motor_speed = abs(motor_velocity);
     5f2:	ce 01       	movw	r24, r28
     5f4:	dd 23       	and	r29, r29
     5f6:	24 f4       	brge	.+8      	; 0x600 <motor_set_velocity+0x38>
     5f8:	88 27       	eor	r24, r24
     5fa:	99 27       	eor	r25, r25
     5fc:	8c 1b       	sub	r24, r28
     5fe:	9d 0b       	sbc	r25, r29
	
	// Set direction and speed of motor.
	motor_set_direction(motor_direction);
	motor_set_speed(motor_speed);
     600:	d5 df       	rcall	.-86     	; 0x5ac <motor_set_speed>
}
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <motor_read_position_change>:
/*				READ FROM ENCODER			*/
/*------------------------------------------*/

int16_t motor_read_position_change(void) { 
	// Read from the encoder as described in "Motorbox User Guide" page 5
	clear_bit(MJ1, OE);
     608:	e2 e0       	ldi	r30, 0x02	; 2
     60a:	f1 e0       	ldi	r31, 0x01	; 1
     60c:	80 81       	ld	r24, Z
     60e:	8f 7d       	andi	r24, 0xDF	; 223
     610:	80 83       	st	Z, r24
	clear_bit(MJ1, SEL);
     612:	80 81       	ld	r24, Z
     614:	87 7f       	andi	r24, 0xF7	; 247
     616:	80 83       	st	Z, r24
     618:	2a e6       	ldi	r18, 0x6A	; 106
     61a:	2a 95       	dec	r18
     61c:	f1 f7       	brne	.-4      	; 0x61a <motor_read_position_change+0x12>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <motor_read_position_change+0x18>
	_delay_us(20);
	uint16_t position_change = (MJ2 << 8);
     620:	80 91 06 01 	lds	r24, 0x0106
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	98 2f       	mov	r25, r24
     628:	88 27       	eor	r24, r24
	
	set_bit(MJ1, SEL);
     62a:	20 81       	ld	r18, Z
     62c:	28 60       	ori	r18, 0x08	; 8
     62e:	20 83       	st	Z, r18
     630:	3a e6       	ldi	r19, 0x6A	; 106
     632:	3a 95       	dec	r19
     634:	f1 f7       	brne	.-4      	; 0x632 <motor_read_position_change+0x2a>
     636:	00 c0       	rjmp	.+0      	; 0x638 <motor_read_position_change+0x30>
	_delay_us(20);
	position_change += MJ2;
     638:	20 91 06 01 	lds	r18, 0x0106
	
	clear_bit(MJ1, RST);
     63c:	30 81       	ld	r19, Z
     63e:	3f 7b       	andi	r19, 0xBF	; 191
     640:	30 83       	st	Z, r19
     642:	35 e8       	ldi	r19, 0x85	; 133
     644:	3a 95       	dec	r19
     646:	f1 f7       	brne	.-4      	; 0x644 <motor_read_position_change+0x3c>
     648:	00 00       	nop
	_delay_us(25);
	set_bit(MJ1, RST);
     64a:	30 81       	ld	r19, Z
     64c:	30 64       	ori	r19, 0x40	; 64
     64e:	30 83       	st	Z, r19
	set_bit(MJ1, OE);
     650:	30 81       	ld	r19, Z
     652:	30 62       	ori	r19, 0x20	; 32
     654:	30 83       	st	Z, r19
	
	return position_change;
}
     656:	82 0f       	add	r24, r18
     658:	91 1d       	adc	r25, r1
     65a:	08 95       	ret

0000065c <motor_find_max_speed_manual>:
		case AUTOMATIC:
		motor_find_max_speed_auto();
	}
}

void motor_find_max_speed_manual(void){
     65c:	8f 92       	push	r8
     65e:	9f 92       	push	r9
     660:	af 92       	push	r10
     662:	bf 92       	push	r11
     664:	cf 92       	push	r12
     666:	df 92       	push	r13
     668:	ef 92       	push	r14
     66a:	ff 92       	push	r15
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	cd b7       	in	r28, 0x3d	; 61
     674:	de b7       	in	r29, 0x3e	; 62
     676:	2b 97       	sbiw	r28, 0x0b	; 11
     678:	0f b6       	in	r0, 0x3f	; 63
     67a:	f8 94       	cli
     67c:	de bf       	out	0x3e, r29	; 62
     67e:	0f be       	out	0x3f, r0	; 63
     680:	cd bf       	out	0x3d, r28	; 61
	
	can_message message;
	int8_t joystick_x = 0;
	int button_is_pressed = 0;
	
	printf("---------------------------------------------------------\n");
     682:	8d e4       	ldi	r24, 0x4D	; 77
     684:	92 e0       	ldi	r25, 0x02	; 2
     686:	57 d7       	rcall	.+3758   	; 0x1536 <puts>
	printf("CALIBRATE THE ENCODER BY MEASURING THE MAXIMUM VELOCITY\n");
     688:	87 e8       	ldi	r24, 0x87	; 135
     68a:	92 e0       	ldi	r25, 0x02	; 2
     68c:	54 d7       	rcall	.+3752   	; 0x1536 <puts>
	printf("PRESS ANY BUTTON TO CONTINUE\n");
     68e:	8f eb       	ldi	r24, 0xBF	; 191
     690:	92 e0       	ldi	r25, 0x02	; 2
     692:	51 d7       	rcall	.+3746   	; 0x1536 <puts>
	printf("---------------------------------------------------------\n");
     694:	8d e4       	ldi	r24, 0x4D	; 77
     696:	92 e0       	ldi	r25, 0x02	; 2
     698:	4e d7       	rcall	.+3740   	; 0x1536 <puts>
		motor_set_velocity(joystick_x);

		double speed = abs(motor_read_position_change())/(double)(time_passed());
		if (speed > max_speed) {
			max_speed = speed;
			printf("[MANUAL] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
     69a:	0f 2e       	mov	r0, r31
     69c:	fc ed       	ldi	r31, 0xDC	; 220
     69e:	af 2e       	mov	r10, r31
     6a0:	f2 e0       	ldi	r31, 0x02	; 2
     6a2:	bf 2e       	mov	r11, r31
     6a4:	f0 2d       	mov	r31, r0
	printf("CALIBRATE THE ENCODER BY MEASURING THE MAXIMUM VELOCITY\n");
	printf("PRESS ANY BUTTON TO CONTINUE\n");
	printf("---------------------------------------------------------\n");
	
	while(!button_is_pressed) {
		message = receive_control_inputs();
     6a6:	ce 01       	movw	r24, r28
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	70 de       	rcall	.-800    	; 0x38c <receive_control_inputs>
		joystick_x = message.data[JOYSTICK_X];
		const int RL_BUTTONS = 0b011;
		button_is_pressed = message.data[BUTTONS] & RL_BUTTONS;
     6ac:	88 85       	ldd	r24, Y+8	; 0x08
     6ae:	18 2f       	mov	r17, r24
     6b0:	13 70       	andi	r17, 0x03	; 3
		
		motor_set_velocity(joystick_x);
     6b2:	8c 81       	ldd	r24, Y+4	; 0x04
     6b4:	99 27       	eor	r25, r25
     6b6:	87 fd       	sbrc	r24, 7
     6b8:	90 95       	com	r25
     6ba:	86 df       	rcall	.-244    	; 0x5c8 <motor_set_velocity>

		double speed = abs(motor_read_position_change())/(double)(time_passed());
     6bc:	a5 df       	rcall	.-182    	; 0x608 <motor_read_position_change>
     6be:	7c 01       	movw	r14, r24
     6c0:	a6 d3       	rcall	.+1868   	; 0xe0e <time_passed>
     6c2:	4c 01       	movw	r8, r24
     6c4:	b7 01       	movw	r22, r14
     6c6:	ff 20       	and	r15, r15
     6c8:	24 f4       	brge	.+8      	; 0x6d2 <motor_find_max_speed_manual+0x76>
     6ca:	66 27       	eor	r22, r22
     6cc:	77 27       	eor	r23, r23
     6ce:	6e 19       	sub	r22, r14
     6d0:	7f 09       	sbc	r23, r15
     6d2:	88 27       	eor	r24, r24
     6d4:	77 fd       	sbrc	r23, 7
     6d6:	80 95       	com	r24
     6d8:	98 2f       	mov	r25, r24
     6da:	8e d5       	rcall	.+2844   	; 0x11f8 <__floatsisf>
     6dc:	6b 01       	movw	r12, r22
     6de:	7c 01       	movw	r14, r24
     6e0:	b4 01       	movw	r22, r8
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	86 d5       	rcall	.+2828   	; 0x11f4 <__floatunsisf>
     6e8:	9b 01       	movw	r18, r22
     6ea:	ac 01       	movw	r20, r24
     6ec:	c7 01       	movw	r24, r14
     6ee:	b6 01       	movw	r22, r12
     6f0:	e8 d4       	rcall	.+2512   	; 0x10c2 <__divsf3>
     6f2:	6b 01       	movw	r12, r22
     6f4:	7c 01       	movw	r14, r24
		if (speed > max_speed) {
     6f6:	20 91 6f 03 	lds	r18, 0x036F
     6fa:	30 91 70 03 	lds	r19, 0x0370
     6fe:	40 91 71 03 	lds	r20, 0x0371
     702:	50 91 72 03 	lds	r21, 0x0372
     706:	28 d6       	rcall	.+3152   	; 0x1358 <__gesf2>
     708:	18 16       	cp	r1, r24
     70a:	cc f4       	brge	.+50     	; 0x73e <motor_find_max_speed_manual+0xe2>
			max_speed = speed;
     70c:	c0 92 6f 03 	sts	0x036F, r12
     710:	d0 92 70 03 	sts	0x0370, r13
     714:	e0 92 71 03 	sts	0x0371, r14
     718:	f0 92 72 03 	sts	0x0372, r15
			printf("[MANUAL] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	4a e7       	ldi	r20, 0x7A	; 122
     722:	54 e4       	ldi	r21, 0x44	; 68
     724:	c7 01       	movw	r24, r14
     726:	b6 01       	movw	r22, r12
     728:	1b d6       	rcall	.+3126   	; 0x1360 <__mulsf3>
     72a:	33 d5       	rcall	.+2662   	; 0x1192 <__fixsfsi>
     72c:	7f 93       	push	r23
     72e:	6f 93       	push	r22
     730:	bf 92       	push	r11
     732:	af 92       	push	r10
     734:	ef d6       	rcall	.+3550   	; 0x1514 <printf>
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     73e:	8f e3       	ldi	r24, 0x3F	; 63
     740:	9c e9       	ldi	r25, 0x9C	; 156
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	f1 f7       	brne	.-4      	; 0x742 <motor_find_max_speed_manual+0xe6>
     746:	00 c0       	rjmp	.+0      	; 0x748 <motor_find_max_speed_manual+0xec>
     748:	00 00       	nop
	printf("---------------------------------------------------------\n");
	printf("CALIBRATE THE ENCODER BY MEASURING THE MAXIMUM VELOCITY\n");
	printf("PRESS ANY BUTTON TO CONTINUE\n");
	printf("---------------------------------------------------------\n");
	
	while(!button_is_pressed) {
     74a:	11 23       	and	r17, r17
     74c:	09 f4       	brne	.+2      	; 0x750 <motor_find_max_speed_manual+0xf4>
     74e:	ab cf       	rjmp	.-170    	; 0x6a6 <motor_find_max_speed_manual+0x4a>
			printf("[MANUAL] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
		}
		_delay_ms(10);
	}
	
	printf("---------------------------------------------------------\n");
     750:	8d e4       	ldi	r24, 0x4D	; 77
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	f0 d6       	rcall	.+3552   	; 0x1536 <puts>
	printf("CALIBRATION COMPLETE\n");
     756:	8b ef       	ldi	r24, 0xFB	; 251
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	ed d6       	rcall	.+3546   	; 0x1536 <puts>
	printf("---------------------------------------------------------\n");
     75c:	8d e4       	ldi	r24, 0x4D	; 77
     75e:	92 e0       	ldi	r25, 0x02	; 2
     760:	ea d6       	rcall	.+3540   	; 0x1536 <puts>
	motor_set_velocity(0);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	30 df       	rcall	.-416    	; 0x5c8 <motor_set_velocity>
}
     768:	2b 96       	adiw	r28, 0x0b	; 11
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	de bf       	out	0x3e, r29	; 62
     770:	0f be       	out	0x3f, r0	; 63
     772:	cd bf       	out	0x3d, r28	; 61
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	ff 90       	pop	r15
     77c:	ef 90       	pop	r14
     77e:	df 90       	pop	r13
     780:	cf 90       	pop	r12
     782:	bf 90       	pop	r11
     784:	af 90       	pop	r10
     786:	9f 90       	pop	r9
     788:	8f 90       	pop	r8
     78a:	08 95       	ret

0000078c <motor_find_max_speed_auto>:

void motor_find_max_speed_auto(void){
     78c:	2f 92       	push	r2
     78e:	3f 92       	push	r3
     790:	4f 92       	push	r4
     792:	5f 92       	push	r5
     794:	6f 92       	push	r6
     796:	7f 92       	push	r7
     798:	8f 92       	push	r8
     79a:	9f 92       	push	r9
     79c:	af 92       	push	r10
     79e:	bf 92       	push	r11
     7a0:	cf 92       	push	r12
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
     7b4:	a8 97       	sbiw	r28, 0x28	; 40
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	de bf       	out	0x3e, r29	; 62
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	cd bf       	out	0x3d, r28	; 61
	cli();
     7c0:	f8 94       	cli
	const int16_t velocities[] = {100, -100, 100, -100, 100, -100, 100, -100, 100, -100};
     7c2:	84 e1       	ldi	r24, 0x14	; 20
     7c4:	e7 e0       	ldi	r30, 0x07	; 7
     7c6:	f2 e0       	ldi	r31, 0x02	; 2
     7c8:	de 01       	movw	r26, r28
     7ca:	11 96       	adiw	r26, 0x01	; 1
     7cc:	01 90       	ld	r0, Z+
     7ce:	0d 92       	st	X+, r0
     7d0:	8a 95       	dec	r24
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <motor_find_max_speed_auto+0x40>
     7d4:	9e 01       	movw	r18, r28
     7d6:	2f 5f       	subi	r18, 0xFF	; 255
     7d8:	3f 4f       	sbci	r19, 0xFF	; 255
     7da:	38 a7       	std	Y+40, r19	; 0x28
     7dc:	2f a3       	std	Y+39, r18	; 0x27
     7de:	ae 01       	movw	r20, r28
     7e0:	4b 5e       	subi	r20, 0xEB	; 235
     7e2:	5f 4f       	sbci	r21, 0xFF	; 255
     7e4:	5e 8b       	std	Y+22, r21	; 0x16
     7e6:	4d 8b       	std	Y+21, r20	; 0x15
	const uint8_t time_interval = 85;  // Unit unknown
	
	const int velocity_count = sizeof(velocities)/sizeof(velocities[0]); // Size of array
	for (int i = 0; i < velocity_count; i++) {
		// Used to keep track of how long the motor has been going in one direction.
		uint64_t time_sum = 0;
     7e8:	31 2c       	mov	r3, r1
     7ea:	0f a1       	ldd	r16, Y+39	; 0x27
     7ec:	18 a5       	ldd	r17, Y+40	; 0x28
		printf("Set velocity to: %d\n", velocities[i]);
     7ee:	d8 01       	movw	r26, r16
     7f0:	11 96       	adiw	r26, 0x01	; 1
     7f2:	8c 91       	ld	r24, X
     7f4:	11 97       	sbiw	r26, 0x01	; 1
     7f6:	8f 93       	push	r24
     7f8:	8c 91       	ld	r24, X
     7fa:	8f 93       	push	r24
     7fc:	a0 e1       	ldi	r26, 0x10	; 16
     7fe:	b3 e0       	ldi	r27, 0x03	; 3
     800:	bf 93       	push	r27
     802:	af 93       	push	r26
     804:	87 d6       	rcall	.+3342   	; 0x1514 <printf>
		
		sei(); // Interrupts need to be enabled in order to set velocity
     806:	78 94       	sei
		motor_set_velocity(velocities[i]); 
     808:	f8 01       	movw	r30, r16
     80a:	80 81       	ld	r24, Z
     80c:	91 81       	ldd	r25, Z+1	; 0x01
     80e:	2f a1       	ldd	r18, Y+39	; 0x27
     810:	38 a5       	ldd	r19, Y+40	; 0x28
     812:	2e 5f       	subi	r18, 0xFE	; 254
     814:	3f 4f       	sbci	r19, 0xFF	; 255
     816:	38 a7       	std	Y+40, r19	; 0x28
     818:	2f a3       	std	Y+39, r18	; 0x27
     81a:	d6 de       	rcall	.-596    	; 0x5c8 <motor_set_velocity>
		cli();
     81c:	f8 94       	cli
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
	const uint8_t time_interval = 85;  // Unit unknown
	
	const int velocity_count = sizeof(velocities)/sizeof(velocities[0]); // Size of array
	for (int i = 0; i < velocity_count; i++) {
		// Used to keep track of how long the motor has been going in one direction.
		uint64_t time_sum = 0;
     826:	3f 8e       	std	Y+31, r3	; 0x1f
     828:	38 a2       	std	Y+32, r3	; 0x20
     82a:	39 a2       	std	Y+33, r3	; 0x21
     82c:	3a a2       	std	Y+34, r3	; 0x22
     82e:	3b a2       	std	Y+35, r3	; 0x23
     830:	3c a2       	std	Y+36, r3	; 0x24
     832:	3d a2       	std	Y+37, r3	; 0x25
     834:	3e a2       	std	Y+38, r3	; 0x26
		motor_set_velocity(velocities[i]); 
		cli();
		
		// A somewhat hacky way of doing it. Consider switching to a separate timer in the future.
		while((uint8_t)((time_sum)>>8) < time_interval) {
			double time = time_passed();
     836:	eb d2       	rcall	.+1494   	; 0xe0e <time_passed>
     838:	4c 01       	movw	r8, r24
			time_sum += (uint64_t)time;
     83a:	ac 01       	movw	r20, r24
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	dc 01       	movw	r26, r24
     846:	8f 8a       	std	Y+23, r8	; 0x17
     848:	58 8f       	std	Y+24, r21	; 0x18
     84a:	69 8f       	std	Y+25, r22	; 0x19
     84c:	7a 8f       	std	Y+26, r23	; 0x1a
     84e:	8b 8f       	std	Y+27, r24	; 0x1b
     850:	9c 8f       	std	Y+28, r25	; 0x1c
     852:	ad 8f       	std	Y+29, r26	; 0x1d
     854:	be 8f       	std	Y+30, r27	; 0x1e
     856:	2f 8d       	ldd	r18, Y+31	; 0x1f
     858:	38 a1       	ldd	r19, Y+32	; 0x20
     85a:	49 a1       	ldd	r20, Y+33	; 0x21
     85c:	5a a1       	ldd	r21, Y+34	; 0x22
     85e:	6b a1       	ldd	r22, Y+35	; 0x23
     860:	7c a1       	ldd	r23, Y+36	; 0x24
     862:	8d a1       	ldd	r24, Y+37	; 0x25
     864:	9e a1       	ldd	r25, Y+38	; 0x26
     866:	af 88       	ldd	r10, Y+23	; 0x17
     868:	b8 8c       	ldd	r11, Y+24	; 0x18
     86a:	c3 2c       	mov	r12, r3
     86c:	d3 2c       	mov	r13, r3
     86e:	e3 2c       	mov	r14, r3
     870:	f3 2c       	mov	r15, r3
     872:	03 2d       	mov	r16, r3
     874:	13 2d       	mov	r17, r3
     876:	fb d5       	rcall	.+3062   	; 0x146e <__adddi3>
     878:	22 2e       	mov	r2, r18
     87a:	53 2e       	mov	r5, r19
     87c:	64 2e       	mov	r6, r20
     87e:	75 2e       	mov	r7, r21
     880:	a6 2e       	mov	r10, r22
     882:	b7 2e       	mov	r11, r23
     884:	08 2f       	mov	r16, r24
     886:	19 2f       	mov	r17, r25
     888:	2f 8f       	std	Y+31, r18	; 0x1f
     88a:	38 a3       	std	Y+32, r19	; 0x20
     88c:	49 a3       	std	Y+33, r20	; 0x21
     88e:	5a a3       	std	Y+34, r21	; 0x22
     890:	6b a3       	std	Y+35, r22	; 0x23
     892:	7c a3       	std	Y+36, r23	; 0x24
     894:	8d a3       	std	Y+37, r24	; 0x25
     896:	9e a3       	std	Y+38, r25	; 0x26
			
			double speed = abs(motor_read_position_change())/time;
     898:	b7 de       	rcall	.-658    	; 0x608 <motor_read_position_change>
     89a:	99 23       	and	r25, r25
     89c:	1c f4       	brge	.+6      	; 0x8a4 <motor_find_max_speed_auto+0x118>
     89e:	91 95       	neg	r25
     8a0:	81 95       	neg	r24
     8a2:	91 09       	sbc	r25, r1
     8a4:	bc 01       	movw	r22, r24
     8a6:	88 27       	eor	r24, r24
     8a8:	77 fd       	sbrc	r23, 7
     8aa:	80 95       	com	r24
     8ac:	98 2f       	mov	r25, r24
     8ae:	a4 d4       	rcall	.+2376   	; 0x11f8 <__floatsisf>
     8b0:	6b 01       	movw	r12, r22
     8b2:	7c 01       	movw	r14, r24
		motor_set_velocity(velocities[i]); 
		cli();
		
		// A somewhat hacky way of doing it. Consider switching to a separate timer in the future.
		while((uint8_t)((time_sum)>>8) < time_interval) {
			double time = time_passed();
     8b4:	b4 01       	movw	r22, r8
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	9c d4       	rcall	.+2360   	; 0x11f4 <__floatunsisf>
     8bc:	9b 01       	movw	r18, r22
     8be:	ac 01       	movw	r20, r24
			time_sum += (uint64_t)time;
			
			double speed = abs(motor_read_position_change())/time;
     8c0:	c7 01       	movw	r24, r14
     8c2:	b6 01       	movw	r22, r12
     8c4:	fe d3       	rcall	.+2044   	; 0x10c2 <__divsf3>
     8c6:	c6 2e       	mov	r12, r22
     8c8:	d7 2e       	mov	r13, r23
     8ca:	e8 2e       	mov	r14, r24
     8cc:	f9 2e       	mov	r15, r25
			max_speed = MAX(speed, max_speed);
     8ce:	90 90 6f 03 	lds	r9, 0x036F
     8d2:	80 90 70 03 	lds	r8, 0x0370
     8d6:	50 91 71 03 	lds	r21, 0x0371
     8da:	5f 8b       	std	Y+23, r21	; 0x17
     8dc:	40 90 72 03 	lds	r4, 0x0372
     8e0:	29 2d       	mov	r18, r9
     8e2:	38 2d       	mov	r19, r8
     8e4:	45 2f       	mov	r20, r21
     8e6:	54 2d       	mov	r21, r4
     8e8:	e8 d3       	rcall	.+2000   	; 0x10ba <__cmpsf2>
     8ea:	88 23       	and	r24, r24
     8ec:	24 f4       	brge	.+8      	; 0x8f6 <motor_find_max_speed_auto+0x16a>
     8ee:	c9 2c       	mov	r12, r9
     8f0:	d8 2c       	mov	r13, r8
     8f2:	ef 88       	ldd	r14, Y+23	; 0x17
     8f4:	f4 2c       	mov	r15, r4
     8f6:	8c 2d       	mov	r24, r12
     8f8:	9d 2d       	mov	r25, r13
     8fa:	ae 2d       	mov	r26, r14
     8fc:	bf 2d       	mov	r27, r15
     8fe:	80 93 6f 03 	sts	0x036F, r24
     902:	90 93 70 03 	sts	0x0370, r25
     906:	a0 93 71 03 	sts	0x0371, r26
     90a:	b0 93 72 03 	sts	0x0372, r27
     90e:	6f ef       	ldi	r22, 0xFF	; 255
     910:	70 e7       	ldi	r23, 0x70	; 112
     912:	82 e0       	ldi	r24, 0x02	; 2
     914:	61 50       	subi	r22, 0x01	; 1
     916:	70 40       	sbci	r23, 0x00	; 0
     918:	80 40       	sbci	r24, 0x00	; 0
     91a:	e1 f7       	brne	.-8      	; 0x914 <motor_find_max_speed_auto+0x188>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <motor_find_max_speed_auto+0x192>
     91e:	00 00       	nop
		sei(); // Interrupts need to be enabled in order to set velocity
		motor_set_velocity(velocities[i]); 
		cli();
		
		// A somewhat hacky way of doing it. Consider switching to a separate timer in the future.
		while((uint8_t)((time_sum)>>8) < time_interval) {
     920:	22 2d       	mov	r18, r2
     922:	35 2d       	mov	r19, r5
     924:	46 2d       	mov	r20, r6
     926:	57 2d       	mov	r21, r7
     928:	6a 2d       	mov	r22, r10
     92a:	7b 2d       	mov	r23, r11
     92c:	80 2f       	mov	r24, r16
     92e:	91 2f       	mov	r25, r17
     930:	08 e0       	ldi	r16, 0x08	; 8
     932:	81 d5       	rcall	.+2818   	; 0x1436 <__lshrdi3>
     934:	25 35       	cpi	r18, 0x55	; 85
     936:	08 f4       	brcc	.+2      	; 0x93a <motor_find_max_speed_auto+0x1ae>
     938:	7e cf       	rjmp	.-260    	; 0x836 <motor_find_max_speed_auto+0xaa>
	cli();
	const int16_t velocities[] = {100, -100, 100, -100, 100, -100, 100, -100, 100, -100};
	const uint8_t time_interval = 85;  // Unit unknown
	
	const int velocity_count = sizeof(velocities)/sizeof(velocities[0]); // Size of array
	for (int i = 0; i < velocity_count; i++) {
     93a:	af a1       	ldd	r26, Y+39	; 0x27
     93c:	b8 a5       	ldd	r27, Y+40	; 0x28
     93e:	ed 89       	ldd	r30, Y+21	; 0x15
     940:	fe 89       	ldd	r31, Y+22	; 0x16
     942:	ae 17       	cp	r26, r30
     944:	bf 07       	cpc	r27, r31
     946:	09 f0       	breq	.+2      	; 0x94a <motor_find_max_speed_auto+0x1be>
     948:	50 cf       	rjmp	.-352    	; 0x7ea <motor_find_max_speed_auto+0x5e>
			
			_delay_ms(50);
		}
	}
	
	printf("[AUTOMATIC] 1000 * MAX SPEED: %d\n", (int)(max_speed*1000));
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	4a e7       	ldi	r20, 0x7A	; 122
     950:	54 e4       	ldi	r21, 0x44	; 68
     952:	60 91 6f 03 	lds	r22, 0x036F
     956:	70 91 70 03 	lds	r23, 0x0370
     95a:	80 91 71 03 	lds	r24, 0x0371
     95e:	90 91 72 03 	lds	r25, 0x0372
     962:	fe d4       	rcall	.+2556   	; 0x1360 <__mulsf3>
     964:	16 d4       	rcall	.+2092   	; 0x1192 <__fixsfsi>
     966:	7f 93       	push	r23
     968:	6f 93       	push	r22
     96a:	85 e2       	ldi	r24, 0x25	; 37
     96c:	93 e0       	ldi	r25, 0x03	; 3
     96e:	9f 93       	push	r25
     970:	8f 93       	push	r24
     972:	d0 d5       	rcall	.+2976   	; 0x1514 <printf>
	
	sei(); // Interrupts need to be enabled in order to set velocity
     974:	78 94       	sei
	motor_set_velocity(0); 
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	26 de       	rcall	.-948    	; 0x5c8 <motor_set_velocity>
	cli();
     97c:	f8 94       	cli
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
}
     986:	a8 96       	adiw	r28, 0x28	; 40
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	de bf       	out	0x3e, r29	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	cd bf       	out	0x3d, r28	; 61
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	df 90       	pop	r13
     9a0:	cf 90       	pop	r12
     9a2:	bf 90       	pop	r11
     9a4:	af 90       	pop	r10
     9a6:	9f 90       	pop	r9
     9a8:	8f 90       	pop	r8
     9aa:	7f 90       	pop	r7
     9ac:	6f 90       	pop	r6
     9ae:	5f 90       	pop	r5
     9b0:	4f 90       	pop	r4
     9b2:	3f 90       	pop	r3
     9b4:	2f 90       	pop	r2
     9b6:	08 95       	ret

000009b8 <motor_init>:

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/

void motor_init(max_speed_mode mode){
     9b8:	cf 93       	push	r28
     9ba:	c8 2f       	mov	r28, r24
	MAX520_init(0b000);
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	89 dd       	rcall	.-1262   	; 0x4d2 <MAX520_init>
	motor_enable();
     9c0:	e1 dd       	rcall	.-1086   	; 0x584 <motor_enable>
	clear_bit(MJ1, OE);  // Enable encoder
     9c2:	e2 e0       	ldi	r30, 0x02	; 2
     9c4:	f1 e0       	ldi	r31, 0x01	; 1
     9c6:	80 81       	ld	r24, Z
     9c8:	8f 7d       	andi	r24, 0xDF	; 223
     9ca:	80 83       	st	Z, r24
	set_bit(MJ1, RST);
     9cc:	80 81       	ld	r24, Z
     9ce:	80 64       	ori	r24, 0x40	; 64
     9d0:	80 83       	st	Z, r24
	
	motor_set_velocity(0);
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	f8 dd       	rcall	.-1040   	; 0x5c8 <motor_set_velocity>
	
	// Set PORTH as output
	DDRH = 0xFF;
     9d8:	8f ef       	ldi	r24, 0xFF	; 255
     9da:	80 93 01 01 	sts	0x0101, r24
	time_init();  // Used for measurement of speed/velocity.
     9de:	10 d2       	rcall	.+1056   	; 0xe00 <time_init>
	
	// Read the change in position to clear the encoder before measurements are made
	motor_read_position_change();
     9e0:	13 de       	rcall	.-986    	; 0x608 <motor_read_position_change>
	
	switch (mode) {
     9e2:	c1 30       	cpi	r28, 0x01	; 1
     9e4:	89 f0       	breq	.+34     	; 0xa08 <motor_init+0x50>
     9e6:	18 f0       	brcs	.+6      	; 0x9ee <motor_init+0x36>
     9e8:	c2 30       	cpi	r28, 0x02	; 2
     9ea:	81 f0       	breq	.+32     	; 0xa0c <motor_init+0x54>
     9ec:	10 c0       	rjmp	.+32     	; 0xa0e <motor_init+0x56>
		case DEFAULT:
		max_speed = MOTOR_DEFAULT_MAX_SPEED;
     9ee:	89 ed       	ldi	r24, 0xD9	; 217
     9f0:	9e ec       	ldi	r25, 0xCE	; 206
     9f2:	a7 ef       	ldi	r26, 0xF7	; 247
     9f4:	be e3       	ldi	r27, 0x3E	; 62
     9f6:	80 93 6f 03 	sts	0x036F, r24
     9fa:	90 93 70 03 	sts	0x0370, r25
     9fe:	a0 93 71 03 	sts	0x0371, r26
     a02:	b0 93 72 03 	sts	0x0372, r27
		break;
     a06:	03 c0       	rjmp	.+6      	; 0xa0e <motor_init+0x56>
		
		case MANUAL:
		motor_find_max_speed_manual();
     a08:	29 de       	rcall	.-942    	; 0x65c <motor_find_max_speed_manual>
		break;
     a0a:	01 c0       	rjmp	.+2      	; 0xa0e <motor_init+0x56>
		
		case AUTOMATIC:
		motor_find_max_speed_auto();
     a0c:	bf de       	rcall	.-642    	; 0x78c <motor_find_max_speed_auto>
	}
}
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <motor_get_velocity>:
	set_bit(MJ1, OE);
	
	return position_change;
}

int8_t motor_get_velocity(void) {
     a12:	cf 92       	push	r12
     a14:	df 92       	push	r13
     a16:	ef 92       	push	r14
     a18:	ff 92       	push	r15
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
	double velocity = ((double) motor_read_position_change()) / time_passed();
     a1e:	f4 dd       	rcall	.-1048   	; 0x608 <motor_read_position_change>
     a20:	7c 01       	movw	r14, r24
     a22:	f5 d1       	rcall	.+1002   	; 0xe0e <time_passed>
     a24:	ec 01       	movw	r28, r24
     a26:	b7 01       	movw	r22, r14
     a28:	88 27       	eor	r24, r24
     a2a:	77 fd       	sbrc	r23, 7
     a2c:	80 95       	com	r24
     a2e:	98 2f       	mov	r25, r24
     a30:	e3 d3       	rcall	.+1990   	; 0x11f8 <__floatsisf>
     a32:	6b 01       	movw	r12, r22
     a34:	7c 01       	movw	r14, r24
     a36:	be 01       	movw	r22, r28
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	db d3       	rcall	.+1974   	; 0x11f4 <__floatunsisf>
     a3e:	9b 01       	movw	r18, r22
     a40:	ac 01       	movw	r20, r24
     a42:	c7 01       	movw	r24, r14
     a44:	b6 01       	movw	r22, r12
     a46:	3d d3       	rcall	.+1658   	; 0x10c2 <__divsf3>
	int velocity_percentage = velocity * 100/max_speed;	
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	48 ec       	ldi	r20, 0xC8	; 200
     a4e:	52 e4       	ldi	r21, 0x42	; 66
     a50:	87 d4       	rcall	.+2318   	; 0x1360 <__mulsf3>
     a52:	20 91 6f 03 	lds	r18, 0x036F
     a56:	30 91 70 03 	lds	r19, 0x0370
     a5a:	40 91 71 03 	lds	r20, 0x0371
     a5e:	50 91 72 03 	lds	r21, 0x0372
     a62:	2f d3       	rcall	.+1630   	; 0x10c2 <__divsf3>
     a64:	96 d3       	rcall	.+1836   	; 0x1192 <__fixsfsi>
	return SATURATE(velocity_percentage, -100, 100);
     a66:	65 36       	cpi	r22, 0x65	; 101
     a68:	71 05       	cpc	r23, r1
     a6a:	44 f4       	brge	.+16     	; 0xa7c <motor_get_velocity+0x6a>
     a6c:	6c 39       	cpi	r22, 0x9C	; 156
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	78 07       	cpc	r23, r24
     a72:	14 f4       	brge	.+4      	; 0xa78 <motor_get_velocity+0x66>
     a74:	6c e9       	ldi	r22, 0x9C	; 156
     a76:	7f ef       	ldi	r23, 0xFF	; 255
     a78:	86 2f       	mov	r24, r22
     a7a:	01 c0       	rjmp	.+2      	; 0xa7e <motor_get_velocity+0x6c>
     a7c:	84 e6       	ldi	r24, 0x64	; 100
}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	ff 90       	pop	r15
     a84:	ef 90       	pop	r14
     a86:	df 90       	pop	r13
     a88:	cf 90       	pop	r12
     a8a:	08 95       	ret

00000a8c <PI_init>:

volatile PI_controller_t controller;


void PI_init() {
	controller.max_error_sum = 20;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 ea       	ldi	r26, 0xA0	; 160
     a92:	b1 e4       	ldi	r27, 0x41	; 65
     a94:	80 93 8a 03 	sts	0x038A, r24
     a98:	90 93 8b 03 	sts	0x038B, r25
     a9c:	a0 93 8c 03 	sts	0x038C, r26
     aa0:	b0 93 8d 03 	sts	0x038D, r27
	controller.error_sum = 0;
     aa4:	10 92 86 03 	sts	0x0386, r1
     aa8:	10 92 87 03 	sts	0x0387, r1
     aac:	10 92 88 03 	sts	0x0388, r1
     ab0:	10 92 89 03 	sts	0x0389, r1
	controller.k_p = 0.5;
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a0 e0       	ldi	r26, 0x00	; 0
     aba:	bf e3       	ldi	r27, 0x3F	; 63
     abc:	80 93 7e 03 	sts	0x037E, r24
     ac0:	90 93 7f 03 	sts	0x037F, r25
     ac4:	a0 93 80 03 	sts	0x0380, r26
     ac8:	b0 93 81 03 	sts	0x0381, r27
	controller.k_i = 0.2;
     acc:	8d ec       	ldi	r24, 0xCD	; 205
     ace:	9c ec       	ldi	r25, 0xCC	; 204
     ad0:	ac e4       	ldi	r26, 0x4C	; 76
     ad2:	be e3       	ldi	r27, 0x3E	; 62
     ad4:	80 93 82 03 	sts	0x0382, r24
     ad8:	90 93 83 03 	sts	0x0383, r25
     adc:	a0 93 84 03 	sts	0x0384, r26
     ae0:	b0 93 85 03 	sts	0x0385, r27
     ae4:	08 95       	ret

00000ae6 <PI_control>:
}


void PI_control(double velocity_reference) {
     ae6:	4f 92       	push	r4
     ae8:	5f 92       	push	r5
     aea:	6f 92       	push	r6
     aec:	7f 92       	push	r7
     aee:	8f 92       	push	r8
     af0:	9f 92       	push	r9
     af2:	af 92       	push	r10
     af4:	bf 92       	push	r11
     af6:	cf 92       	push	r12
     af8:	df 92       	push	r13
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	6b 01       	movw	r12, r22
     b08:	7c 01       	movw	r14, r24
	double error = velocity_reference - motor_get_velocity();
     b0a:	83 df       	rcall	.-250    	; 0xa12 <motor_get_velocity>
     b0c:	68 2f       	mov	r22, r24
     b0e:	77 27       	eor	r23, r23
     b10:	67 fd       	sbrc	r22, 7
     b12:	70 95       	com	r23
     b14:	87 2f       	mov	r24, r23
     b16:	97 2f       	mov	r25, r23
     b18:	6f d3       	rcall	.+1758   	; 0x11f8 <__floatsisf>
     b1a:	9b 01       	movw	r18, r22
     b1c:	ac 01       	movw	r20, r24
     b1e:	c7 01       	movw	r24, r14
     b20:	b6 01       	movw	r22, r12
     b22:	66 d2       	rcall	.+1228   	; 0xff0 <__subsf3>
     b24:	6b 01       	movw	r12, r22
     b26:	7c 01       	movw	r14, r24
	
	// Find the next error_sum.
	controller.error_sum += error;
     b28:	c6 e8       	ldi	r28, 0x86	; 134
     b2a:	d3 e0       	ldi	r29, 0x03	; 3
     b2c:	68 81       	ld	r22, Y
     b2e:	79 81       	ldd	r23, Y+1	; 0x01
     b30:	8a 81       	ldd	r24, Y+2	; 0x02
     b32:	9b 81       	ldd	r25, Y+3	; 0x03
     b34:	a7 01       	movw	r20, r14
     b36:	96 01       	movw	r18, r12
     b38:	5c d2       	rcall	.+1208   	; 0xff2 <__addsf3>
     b3a:	68 83       	st	Y, r22
     b3c:	79 83       	std	Y+1, r23	; 0x01
     b3e:	8a 83       	std	Y+2, r24	; 0x02
     b40:	9b 83       	std	Y+3, r25	; 0x03
	
	// Saturate the error sum, such that it is on the interval [-MAX_ERROR_SUM, +MAX_ERROR_SUM]
	controller.error_sum = SATURATE(controller.error_sum, -controller.max_error_sum, controller.max_error_sum);
     b42:	68 81       	ld	r22, Y
     b44:	79 81       	ldd	r23, Y+1	; 0x01
     b46:	8a 81       	ldd	r24, Y+2	; 0x02
     b48:	9b 81       	ldd	r25, Y+3	; 0x03
     b4a:	00 91 8a 03 	lds	r16, 0x038A
     b4e:	10 91 8b 03 	lds	r17, 0x038B
     b52:	20 91 8c 03 	lds	r18, 0x038C
     b56:	30 91 8d 03 	lds	r19, 0x038D
     b5a:	a9 01       	movw	r20, r18
     b5c:	98 01       	movw	r18, r16
     b5e:	50 58       	subi	r21, 0x80	; 128
     b60:	ac d2       	rcall	.+1368   	; 0x10ba <__cmpsf2>
     b62:	88 23       	and	r24, r24
     b64:	64 f4       	brge	.+24     	; 0xb7e <PI_control+0x98>
     b66:	80 91 8a 03 	lds	r24, 0x038A
     b6a:	90 91 8b 03 	lds	r25, 0x038B
     b6e:	a0 91 8c 03 	lds	r26, 0x038C
     b72:	b0 91 8d 03 	lds	r27, 0x038D
     b76:	bc 01       	movw	r22, r24
     b78:	cd 01       	movw	r24, r26
     b7a:	90 58       	subi	r25, 0x80	; 128
     b7c:	08 c0       	rjmp	.+16     	; 0xb8e <PI_control+0xa8>
     b7e:	60 91 86 03 	lds	r22, 0x0386
     b82:	70 91 87 03 	lds	r23, 0x0387
     b86:	80 91 88 03 	lds	r24, 0x0388
     b8a:	90 91 89 03 	lds	r25, 0x0389
     b8e:	20 91 8a 03 	lds	r18, 0x038A
     b92:	30 91 8b 03 	lds	r19, 0x038B
     b96:	40 91 8c 03 	lds	r20, 0x038C
     b9a:	50 91 8d 03 	lds	r21, 0x038D
     b9e:	dc d3       	rcall	.+1976   	; 0x1358 <__gesf2>
     ba0:	18 16       	cp	r1, r24
     ba2:	4c f4       	brge	.+18     	; 0xbb6 <PI_control+0xd0>
     ba4:	80 91 8a 03 	lds	r24, 0x038A
     ba8:	90 91 8b 03 	lds	r25, 0x038B
     bac:	a0 91 8c 03 	lds	r26, 0x038C
     bb0:	b0 91 8d 03 	lds	r27, 0x038D
     bb4:	28 c0       	rjmp	.+80     	; 0xc06 <PI_control+0x120>
     bb6:	60 91 86 03 	lds	r22, 0x0386
     bba:	70 91 87 03 	lds	r23, 0x0387
     bbe:	80 91 88 03 	lds	r24, 0x0388
     bc2:	90 91 89 03 	lds	r25, 0x0389
     bc6:	00 91 8a 03 	lds	r16, 0x038A
     bca:	10 91 8b 03 	lds	r17, 0x038B
     bce:	20 91 8c 03 	lds	r18, 0x038C
     bd2:	30 91 8d 03 	lds	r19, 0x038D
     bd6:	a9 01       	movw	r20, r18
     bd8:	98 01       	movw	r18, r16
     bda:	50 58       	subi	r21, 0x80	; 128
     bdc:	6e d2       	rcall	.+1244   	; 0x10ba <__cmpsf2>
     bde:	88 23       	and	r24, r24
     be0:	54 f4       	brge	.+20     	; 0xbf6 <PI_control+0x110>
     be2:	80 91 8a 03 	lds	r24, 0x038A
     be6:	90 91 8b 03 	lds	r25, 0x038B
     bea:	a0 91 8c 03 	lds	r26, 0x038C
     bee:	b0 91 8d 03 	lds	r27, 0x038D
     bf2:	b0 58       	subi	r27, 0x80	; 128
     bf4:	08 c0       	rjmp	.+16     	; 0xc06 <PI_control+0x120>
     bf6:	80 91 86 03 	lds	r24, 0x0386
     bfa:	90 91 87 03 	lds	r25, 0x0387
     bfe:	a0 91 88 03 	lds	r26, 0x0388
     c02:	b0 91 89 03 	lds	r27, 0x0389
     c06:	e6 e8       	ldi	r30, 0x86	; 134
     c08:	f3 e0       	ldi	r31, 0x03	; 3
     c0a:	80 83       	st	Z, r24
     c0c:	91 83       	std	Z+1, r25	; 0x01
     c0e:	a2 83       	std	Z+2, r26	; 0x02
     c10:	b3 83       	std	Z+3, r27	; 0x03
	
	// Calculate the output signal of the PI-regulator.
	int output_signal = (controller.k_p * error) + (controller.k_i * controller.error_sum);
     c12:	60 91 7e 03 	lds	r22, 0x037E
     c16:	70 91 7f 03 	lds	r23, 0x037F
     c1a:	80 91 80 03 	lds	r24, 0x0380
     c1e:	90 91 81 03 	lds	r25, 0x0381
     c22:	80 90 82 03 	lds	r8, 0x0382
     c26:	90 90 83 03 	lds	r9, 0x0383
     c2a:	a0 90 84 03 	lds	r10, 0x0384
     c2e:	b0 90 85 03 	lds	r11, 0x0385
     c32:	40 80       	ld	r4, Z
     c34:	51 80       	ldd	r5, Z+1	; 0x01
     c36:	62 80       	ldd	r6, Z+2	; 0x02
     c38:	73 80       	ldd	r7, Z+3	; 0x03
     c3a:	a7 01       	movw	r20, r14
     c3c:	96 01       	movw	r18, r12
     c3e:	90 d3       	rcall	.+1824   	; 0x1360 <__mulsf3>
     c40:	6b 01       	movw	r12, r22
     c42:	7c 01       	movw	r14, r24
     c44:	a3 01       	movw	r20, r6
     c46:	92 01       	movw	r18, r4
     c48:	c5 01       	movw	r24, r10
     c4a:	b4 01       	movw	r22, r8
     c4c:	89 d3       	rcall	.+1810   	; 0x1360 <__mulsf3>
     c4e:	9b 01       	movw	r18, r22
     c50:	ac 01       	movw	r20, r24
     c52:	c7 01       	movw	r24, r14
     c54:	b6 01       	movw	r22, r12
     c56:	cd d1       	rcall	.+922    	; 0xff2 <__addsf3>
     c58:	9c d2       	rcall	.+1336   	; 0x1192 <__fixsfsi>
	
	motor_set_velocity(output_signal);
     c5a:	cb 01       	movw	r24, r22
     c5c:	b5 dc       	rcall	.-1686   	; 0x5c8 <motor_set_velocity>
}
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	ff 90       	pop	r15
     c68:	ef 90       	pop	r14
     c6a:	df 90       	pop	r13
     c6c:	cf 90       	pop	r12
     c6e:	bf 90       	pop	r11
     c70:	af 90       	pop	r10
     c72:	9f 90       	pop	r9
     c74:	8f 90       	pop	r8
     c76:	7f 90       	pop	r7
     c78:	6f 90       	pop	r6
     c7a:	5f 90       	pop	r5
     c7c:	4f 90       	pop	r4
     c7e:	08 95       	ret

00000c80 <servo_init>:
#define WIDTH_MIDPOINT (MAX_WIDTH + MIN_WIDTH) / 2
#define WIDTH_RADIUS   (MAX_WIDTH - MIN_WIDTH) / 2


void servo_init(void){
	PWM_init();
     c80:	80 d0       	rcall	.+256    	; 0xd82 <PWM_init>
	PWM_set_width(WIDTH_MIDPOINT);
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	80 ec       	ldi	r24, 0xC0	; 192
     c88:	9f e3       	ldi	r25, 0x3F	; 63
     c8a:	9f c0       	rjmp	.+318    	; 0xdca <PWM_set_width>
     c8c:	08 95       	ret

00000c8e <servo_set>:
}

void servo_set(uint8_t x){
     c8e:	cf 92       	push	r12
     c90:	df 92       	push	r13
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
	// Calculate the width for the PWM.
	float width = MIN_WIDTH + (MAX_WIDTH - MIN_WIDTH) * ((float) x) / 255;
     c96:	68 2f       	mov	r22, r24
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	aa d2       	rcall	.+1364   	; 0x11f4 <__floatunsisf>
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	4f e7       	ldi	r20, 0x7F	; 127
     ca6:	53 e4       	ldi	r21, 0x43	; 67
     ca8:	0c d2       	rcall	.+1048   	; 0x10c2 <__divsf3>
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	40 e8       	ldi	r20, 0x80	; 128
     cb0:	5f e3       	ldi	r21, 0x3F	; 63
     cb2:	9f d1       	rcall	.+830    	; 0xff2 <__addsf3>
     cb4:	6b 01       	movw	r12, r22
     cb6:	7c 01       	movw	r14, r24
	
	// Make sure width is within range.
	width = SATURATE(width, MIN_WIDTH, MAX_WIDTH);
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 e8       	ldi	r20, 0x80	; 128
     cbe:	5f e3       	ldi	r21, 0x3F	; 63
     cc0:	fc d1       	rcall	.+1016   	; 0x10ba <__cmpsf2>
     cc2:	88 23       	and	r24, r24
     cc4:	dc f0       	brlt	.+54     	; 0xcfc <servo_set+0x6e>
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	50 e4       	ldi	r21, 0x40	; 64
     cce:	c7 01       	movw	r24, r14
     cd0:	b6 01       	movw	r22, r12
     cd2:	42 d3       	rcall	.+1668   	; 0x1358 <__gesf2>
     cd4:	18 16       	cp	r1, r24
     cd6:	dc f0       	brlt	.+54     	; 0xd0e <servo_set+0x80>
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	40 e8       	ldi	r20, 0x80	; 128
     cde:	5f e3       	ldi	r21, 0x3F	; 63
     ce0:	c7 01       	movw	r24, r14
     ce2:	b6 01       	movw	r22, r12
     ce4:	ea d1       	rcall	.+980    	; 0x10ba <__cmpsf2>
     ce6:	88 23       	and	r24, r24
     ce8:	bc f4       	brge	.+46     	; 0xd18 <servo_set+0x8a>
     cea:	0f 2e       	mov	r0, r31
     cec:	c1 2c       	mov	r12, r1
     cee:	d1 2c       	mov	r13, r1
     cf0:	f0 e8       	ldi	r31, 0x80	; 128
     cf2:	ef 2e       	mov	r14, r31
     cf4:	ff e3       	ldi	r31, 0x3F	; 63
     cf6:	ff 2e       	mov	r15, r31
     cf8:	f0 2d       	mov	r31, r0
     cfa:	0e c0       	rjmp	.+28     	; 0xd18 <servo_set+0x8a>
     cfc:	0f 2e       	mov	r0, r31
     cfe:	c1 2c       	mov	r12, r1
     d00:	d1 2c       	mov	r13, r1
     d02:	f0 e8       	ldi	r31, 0x80	; 128
     d04:	ef 2e       	mov	r14, r31
     d06:	ff e3       	ldi	r31, 0x3F	; 63
     d08:	ff 2e       	mov	r15, r31
     d0a:	f0 2d       	mov	r31, r0
     d0c:	05 c0       	rjmp	.+10     	; 0xd18 <servo_set+0x8a>
     d0e:	c1 2c       	mov	r12, r1
     d10:	d1 2c       	mov	r13, r1
     d12:	76 01       	movw	r14, r12
     d14:	68 94       	set
     d16:	f6 f8       	bld	r15, 6
	
	PWM_set_width(width);
     d18:	c7 01       	movw	r24, r14
     d1a:	b6 01       	movw	r22, r12
     d1c:	56 d0       	rcall	.+172    	; 0xdca <PWM_set_width>
     d1e:	ff 90       	pop	r15
     d20:	ef 90       	pop	r14
     d22:	df 90       	pop	r13
     d24:	cf 90       	pop	r12
     d26:	08 95       	ret

00000d28 <solenoid_init>:
#include <util/delay.h>


void solenoid_init(){
	//set output pin PB4(OC1A: output clock 1 A)
	set_bit(DDRB, DDB4);
     d28:	24 9a       	sbi	0x04, 4	; 4
	
	//set high to disconnect
	set_bit(PORTB, PB4);
     d2a:	2c 9a       	sbi	0x05, 4	; 5
     d2c:	08 95       	ret

00000d2e <solenoid_send_pulse>:
}


void solenoid_send_pulse(){
	clear_bit(PORTB, PB4);
     d2e:	2c 98       	cbi	0x05, 4	; 5
     d30:	2f ef       	ldi	r18, 0xFF	; 255
     d32:	86 e7       	ldi	r24, 0x76	; 118
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	21 50       	subi	r18, 0x01	; 1
     d38:	80 40       	sbci	r24, 0x00	; 0
     d3a:	90 40       	sbci	r25, 0x00	; 0
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <solenoid_send_pulse+0x8>
     d3e:	00 c0       	rjmp	.+0      	; 0xd40 <solenoid_send_pulse+0x12>
     d40:	00 00       	nop
	_delay_ms(30);
	set_bit(PORTB, PB4);
     d42:	2c 9a       	sbi	0x05, 4	; 5
     d44:	08 95       	ret

00000d46 <SPI_init>:

void SPI_test(void) {
	SPI_send(0x00);
	uint8_t spi_read_result = SPI_read();
	
	printf("SPI_TEST: %x\n\n", spi_read_result);
     d46:	22 9a       	sbi	0x04, 2	; 4
     d48:	21 9a       	sbi	0x04, 1	; 4
     d4a:	27 9a       	sbi	0x04, 7	; 4
     d4c:	20 9a       	sbi	0x04, 0	; 4
     d4e:	8c b5       	in	r24, 0x2c	; 44
     d50:	80 61       	ori	r24, 0x10	; 16
     d52:	8c bd       	out	0x2c, r24	; 44
     d54:	8c b5       	in	r24, 0x2c	; 44
     d56:	81 60       	ori	r24, 0x01	; 1
     d58:	8c bd       	out	0x2c, r24	; 44
     d5a:	8c b5       	in	r24, 0x2c	; 44
     d5c:	80 64       	ori	r24, 0x40	; 64
     d5e:	8c bd       	out	0x2c, r24	; 44
     d60:	08 95       	ret

00000d62 <SPI_send>:
     d62:	8e bd       	out	0x2e, r24	; 46
     d64:	0d b4       	in	r0, 0x2d	; 45
     d66:	07 fe       	sbrs	r0, 7
     d68:	fd cf       	rjmp	.-6      	; 0xd64 <SPI_send+0x2>
     d6a:	08 95       	ret

00000d6c <SPI_read>:
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	f9 df       	rcall	.-14     	; 0xd62 <SPI_send>
     d70:	0d b4       	in	r0, 0x2d	; 45
     d72:	07 fe       	sbrs	r0, 7
     d74:	fd cf       	rjmp	.-6      	; 0xd70 <SPI_read+0x4>
     d76:	8e b5       	in	r24, 0x2e	; 46
     d78:	08 95       	ret

00000d7a <SPI_select>:
	
}

void SPI_select(void){
	clear_bit(PORTB, SS);
     d7a:	2f 98       	cbi	0x05, 7	; 5
     d7c:	08 95       	ret

00000d7e <SPI_deselect>:
}

void SPI_deselect(void){
	set_bit(PORTB, SS);
     d7e:	2f 9a       	sbi	0x05, 7	; 5
     d80:	08 95       	ret

00000d82 <PWM_init>:

void PWM_init(void){
	//if clk_io = 1 / F_CPU: prescalar = 8, TOP = 39 999

	//select source of clock signal and set prescaler = 8
	clear_bit(TCCR1B, CS12);
     d82:	e1 e8       	ldi	r30, 0x81	; 129
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	8b 7f       	andi	r24, 0xFB	; 251
     d8a:	80 83       	st	Z, r24
	set_bit(TCCR1B, CS11);
     d8c:	80 81       	ld	r24, Z
     d8e:	82 60       	ori	r24, 0x02	; 2
     d90:	80 83       	st	Z, r24
	clear_bit(TCCR1B, CS10);
     d92:	80 81       	ld	r24, Z
     d94:	8e 7f       	andi	r24, 0xFE	; 254
     d96:	80 83       	st	Z, r24
	
	
	//fast PWM (16 bit, TOP in ICR1) page 145 (mode 14 table 17-2)
	set_bit(TCCR1B, WGM13);
     d98:	80 81       	ld	r24, Z
     d9a:	80 61       	ori	r24, 0x10	; 16
     d9c:	80 83       	st	Z, r24
	set_bit(TCCR1B, WGM12);
     d9e:	80 81       	ld	r24, Z
     da0:	88 60       	ori	r24, 0x08	; 8
     da2:	80 83       	st	Z, r24
	set_bit(TCCR1A, WGM11);
     da4:	e0 e8       	ldi	r30, 0x80	; 128
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	82 60       	ori	r24, 0x02	; 2
     dac:	80 83       	st	Z, r24
	clear_bit(TCCR1A, WGM10);
     dae:	80 81       	ld	r24, Z
     db0:	8e 7f       	andi	r24, 0xFE	; 254
     db2:	80 83       	st	Z, r24
	
	//set TOP so that we have a period of 20 ms
	ICR1 = F_CPU/PRESCALER*PERIOD_MS/1000 - 1; 
     db4:	8f e3       	ldi	r24, 0x3F	; 63
     db6:	9c e9       	ldi	r25, 0x9C	; 156
     db8:	90 93 87 00 	sts	0x0087, r25
     dbc:	80 93 86 00 	sts	0x0086, r24
	
	//compare output mode (Normal mode)
	set_bit(TCCR1A, COM1A1);
     dc0:	80 81       	ld	r24, Z
     dc2:	80 68       	ori	r24, 0x80	; 128
     dc4:	80 83       	st	Z, r24
	
	//set output pin PB5(OC1A: output clock 1 A)
	set_bit(DDRB, DDB5);
     dc6:	25 9a       	sbi	0x04, 5	; 4
     dc8:	08 95       	ret

00000dca <PWM_set_width>:

	//compares TCTn and OCRnx - cleared when match -> TCTn = BOTTOM
}

void PWM_set_width(float on_time_ms){
	OCR1A = F_CPU/PRESCALER*on_time_ms/1000-1; 
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	34 e2       	ldi	r19, 0x24	; 36
     dce:	44 ef       	ldi	r20, 0xF4	; 244
     dd0:	59 e4       	ldi	r21, 0x49	; 73
     dd2:	c6 d2       	rcall	.+1420   	; 0x1360 <__mulsf3>
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	4a e7       	ldi	r20, 0x7A	; 122
     dda:	54 e4       	ldi	r21, 0x44	; 68
     ddc:	72 d1       	rcall	.+740    	; 0x10c2 <__divsf3>
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e8       	ldi	r20, 0x80	; 128
     de4:	5f e3       	ldi	r21, 0x3F	; 63
     de6:	04 d1       	rcall	.+520    	; 0xff0 <__subsf3>
     de8:	d9 d1       	rcall	.+946    	; 0x119c <__fixunssfsi>
     dea:	70 93 89 00 	sts	0x0089, r23
     dee:	60 93 88 00 	sts	0x0088, r22
     df2:	08 95       	ret

00000df4 <time_reset>:
	
}

//setter time started til current time
void time_reset(void) {
	TCNT3 = 0;
     df4:	10 92 95 00 	sts	0x0095, r1
     df8:	10 92 94 00 	sts	0x0094, r1
	//printf("OVERFLOW FLAG: %d\n", test_bit(TIFR3, TOV3));
	set_bit(TIFR3, TOV3);
     dfc:	c0 9a       	sbi	0x18, 0	; 24
     dfe:	08 95       	ret

00000e00 <time_init>:

void time_init(){
	//Normal port operation, non PWM
	
	//prescaler 256 (see table 20-9)
	set_bit(TCCR3B, CS32);
     e00:	e1 e9       	ldi	r30, 0x91	; 145
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	84 60       	ori	r24, 0x04	; 4
     e08:	80 83       	st	Z, r24
	time_reset();
     e0a:	f4 cf       	rjmp	.-24     	; 0xdf4 <time_reset>
     e0c:	08 95       	ret

00000e0e <time_passed>:
	TCNT3 = 0;
	//printf("OVERFLOW FLAG: %d\n", test_bit(TIFR3, TOV3));
	set_bit(TIFR3, TOV3);
}

uint16_t time_passed(void){
     e0e:	cf 93       	push	r28
     e10:	df 93       	push	r29
	uint16_t time_passed = TCNT3;
     e12:	c0 91 94 00 	lds	r28, 0x0094
     e16:	d0 91 95 00 	lds	r29, 0x0095
	time_reset();
     e1a:	ec df       	rcall	.-40     	; 0xdf4 <time_reset>
	return time_passed;
}
     e1c:	ce 01       	movw	r24, r28
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <TWI_Master_Initialise>:
     e24:	8c e0       	ldi	r24, 0x0C	; 12
     e26:	80 93 b8 00 	sts	0x00B8, r24
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	80 93 bb 00 	sts	0x00BB, r24
     e30:	84 e0       	ldi	r24, 0x04	; 4
     e32:	80 93 bc 00 	sts	0x00BC, r24
     e36:	08 95       	ret

00000e38 <TWI_Start_Transceiver_With_Data>:
     e38:	ec eb       	ldi	r30, 0xBC	; 188
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	20 81       	ld	r18, Z
     e3e:	20 fd       	sbrc	r18, 0
     e40:	fd cf       	rjmp	.-6      	; 0xe3c <TWI_Start_Transceiver_With_Data+0x4>
     e42:	60 93 75 03 	sts	0x0375, r22
     e46:	fc 01       	movw	r30, r24
     e48:	20 81       	ld	r18, Z
     e4a:	20 93 76 03 	sts	0x0376, r18
     e4e:	20 fd       	sbrc	r18, 0
     e50:	0c c0       	rjmp	.+24     	; 0xe6a <TWI_Start_Transceiver_With_Data+0x32>
     e52:	62 30       	cpi	r22, 0x02	; 2
     e54:	50 f0       	brcs	.+20     	; 0xe6a <TWI_Start_Transceiver_With_Data+0x32>
     e56:	dc 01       	movw	r26, r24
     e58:	11 96       	adiw	r26, 0x01	; 1
     e5a:	e7 e7       	ldi	r30, 0x77	; 119
     e5c:	f3 e0       	ldi	r31, 0x03	; 3
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	9d 91       	ld	r25, X+
     e62:	91 93       	st	Z+, r25
     e64:	8f 5f       	subi	r24, 0xFF	; 255
     e66:	86 13       	cpse	r24, r22
     e68:	fb cf       	rjmp	.-10     	; 0xe60 <TWI_Start_Transceiver_With_Data+0x28>
     e6a:	10 92 74 03 	sts	0x0374, r1
     e6e:	88 ef       	ldi	r24, 0xF8	; 248
     e70:	80 93 06 02 	sts	0x0206, r24
     e74:	85 ea       	ldi	r24, 0xA5	; 165
     e76:	80 93 bc 00 	sts	0x00BC, r24
     e7a:	08 95       	ret

00000e7c <__vector_39>:
     e7c:	1f 92       	push	r1
     e7e:	0f 92       	push	r0
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	0f 92       	push	r0
     e84:	11 24       	eor	r1, r1
     e86:	0b b6       	in	r0, 0x3b	; 59
     e88:	0f 92       	push	r0
     e8a:	2f 93       	push	r18
     e8c:	3f 93       	push	r19
     e8e:	8f 93       	push	r24
     e90:	9f 93       	push	r25
     e92:	af 93       	push	r26
     e94:	bf 93       	push	r27
     e96:	ef 93       	push	r30
     e98:	ff 93       	push	r31
     e9a:	80 91 b9 00 	lds	r24, 0x00B9
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	fc 01       	movw	r30, r24
     ea2:	38 97       	sbiw	r30, 0x08	; 8
     ea4:	e1 35       	cpi	r30, 0x51	; 81
     ea6:	f1 05       	cpc	r31, r1
     ea8:	08 f0       	brcs	.+2      	; 0xeac <__vector_39+0x30>
     eaa:	55 c0       	rjmp	.+170    	; 0xf56 <__vector_39+0xda>
     eac:	ee 58       	subi	r30, 0x8E	; 142
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	ba c2       	rjmp	.+1396   	; 0x1426 <__tablejump2__>
     eb2:	10 92 73 03 	sts	0x0373, r1
     eb6:	e0 91 73 03 	lds	r30, 0x0373
     eba:	80 91 75 03 	lds	r24, 0x0375
     ebe:	e8 17       	cp	r30, r24
     ec0:	70 f4       	brcc	.+28     	; 0xede <__vector_39+0x62>
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	8e 0f       	add	r24, r30
     ec6:	80 93 73 03 	sts	0x0373, r24
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	ea 58       	subi	r30, 0x8A	; 138
     ece:	fc 4f       	sbci	r31, 0xFC	; 252
     ed0:	80 81       	ld	r24, Z
     ed2:	80 93 bb 00 	sts	0x00BB, r24
     ed6:	85 e8       	ldi	r24, 0x85	; 133
     ed8:	80 93 bc 00 	sts	0x00BC, r24
     edc:	43 c0       	rjmp	.+134    	; 0xf64 <__vector_39+0xe8>
     ede:	80 91 74 03 	lds	r24, 0x0374
     ee2:	81 60       	ori	r24, 0x01	; 1
     ee4:	80 93 74 03 	sts	0x0374, r24
     ee8:	84 e9       	ldi	r24, 0x94	; 148
     eea:	80 93 bc 00 	sts	0x00BC, r24
     eee:	3a c0       	rjmp	.+116    	; 0xf64 <__vector_39+0xe8>
     ef0:	e0 91 73 03 	lds	r30, 0x0373
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	8e 0f       	add	r24, r30
     ef8:	80 93 73 03 	sts	0x0373, r24
     efc:	80 91 bb 00 	lds	r24, 0x00BB
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	ea 58       	subi	r30, 0x8A	; 138
     f04:	fc 4f       	sbci	r31, 0xFC	; 252
     f06:	80 83       	st	Z, r24
     f08:	20 91 73 03 	lds	r18, 0x0373
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	80 91 75 03 	lds	r24, 0x0375
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	24 f4       	brge	.+8      	; 0xf24 <__vector_39+0xa8>
     f1c:	85 ec       	ldi	r24, 0xC5	; 197
     f1e:	80 93 bc 00 	sts	0x00BC, r24
     f22:	20 c0       	rjmp	.+64     	; 0xf64 <__vector_39+0xe8>
     f24:	85 e8       	ldi	r24, 0x85	; 133
     f26:	80 93 bc 00 	sts	0x00BC, r24
     f2a:	1c c0       	rjmp	.+56     	; 0xf64 <__vector_39+0xe8>
     f2c:	80 91 bb 00 	lds	r24, 0x00BB
     f30:	e0 91 73 03 	lds	r30, 0x0373
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	ea 58       	subi	r30, 0x8A	; 138
     f38:	fc 4f       	sbci	r31, 0xFC	; 252
     f3a:	80 83       	st	Z, r24
     f3c:	80 91 74 03 	lds	r24, 0x0374
     f40:	81 60       	ori	r24, 0x01	; 1
     f42:	80 93 74 03 	sts	0x0374, r24
     f46:	84 e9       	ldi	r24, 0x94	; 148
     f48:	80 93 bc 00 	sts	0x00BC, r24
     f4c:	0b c0       	rjmp	.+22     	; 0xf64 <__vector_39+0xe8>
     f4e:	85 ea       	ldi	r24, 0xA5	; 165
     f50:	80 93 bc 00 	sts	0x00BC, r24
     f54:	07 c0       	rjmp	.+14     	; 0xf64 <__vector_39+0xe8>
     f56:	80 91 b9 00 	lds	r24, 0x00B9
     f5a:	80 93 06 02 	sts	0x0206, r24
     f5e:	84 e0       	ldi	r24, 0x04	; 4
     f60:	80 93 bc 00 	sts	0x00BC, r24
     f64:	ff 91       	pop	r31
     f66:	ef 91       	pop	r30
     f68:	bf 91       	pop	r27
     f6a:	af 91       	pop	r26
     f6c:	9f 91       	pop	r25
     f6e:	8f 91       	pop	r24
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0b be       	out	0x3b, r0	; 59
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <usart_transmit_to_computer>:
     f82:	e0 ec       	ldi	r30, 0xC0	; 192
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	90 81       	ld	r25, Z
     f88:	95 ff       	sbrs	r25, 5
     f8a:	fd cf       	rjmp	.-6      	; 0xf86 <usart_transmit_to_computer+0x4>
     f8c:	80 93 c6 00 	sts	0x00C6, r24
     f90:	08 95       	ret

00000f92 <usart_receive_from_computer>:
     f92:	e0 ec       	ldi	r30, 0xC0	; 192
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	88 23       	and	r24, r24
     f9a:	ec f7       	brge	.-6      	; 0xf96 <usart_receive_from_computer+0x4>
     f9c:	80 91 c6 00 	lds	r24, 0x00C6
     fa0:	08 95       	ret

00000fa2 <usart_init>:
     fa2:	90 93 c5 00 	sts	0x00C5, r25
     fa6:	80 93 c4 00 	sts	0x00C4, r24
     faa:	88 e1       	ldi	r24, 0x18	; 24
     fac:	80 93 c1 00 	sts	0x00C1, r24
     fb0:	8e e0       	ldi	r24, 0x0E	; 14
     fb2:	80 93 c2 00 	sts	0x00C2, r24
     fb6:	69 ec       	ldi	r22, 0xC9	; 201
     fb8:	77 e0       	ldi	r23, 0x07	; 7
     fba:	81 ec       	ldi	r24, 0xC1	; 193
     fbc:	97 e0       	ldi	r25, 0x07	; 7
     fbe:	60 c2       	rjmp	.+1216   	; 0x1480 <fdevopen>
     fc0:	08 95       	ret

00000fc2 <initialize>:
void test(void);
void test_servo_and_ir(void);


void initialize(void){
	cli();
     fc2:	f8 94       	cli
	usart_init(MYUBRR);
     fc4:	87 e6       	ldi	r24, 0x67	; 103
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	ec df       	rcall	.-40     	; 0xfa2 <usart_init>
	CAN_init();
     fca:	57 d9       	rcall	.-3410   	; 0x27a <CAN_init>
	servo_init();
     fcc:	59 de       	rcall	.-846    	; 0xc80 <servo_init>
	IR_init();
     fce:	7f da       	rcall	.-2818   	; 0x4ce <IR_init>
	motor_init(DEFAULT);
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	f2 dc       	rcall	.-1564   	; 0x9b8 <motor_init>
	PI_init();
     fd4:	5b dd       	rcall	.-1354   	; 0xa8c <PI_init>
	CONTROL_init();
     fd6:	2a da       	rcall	.-2988   	; 0x42c <CONTROL_init>
	solenoid_init();
     fd8:	a7 de       	rcall	.-690    	; 0xd28 <solenoid_init>
	sei();
     fda:	78 94       	sei
     fdc:	08 95       	ret

00000fde <main>:
}


int main(void){
	initialize(); 
     fde:	f1 df       	rcall	.-30     	; 0xfc2 <initialize>
	printf("[NODE2] Initialization complete!\n\n");
     fe0:	87 e4       	ldi	r24, 0x47	; 71
     fe2:	93 e0       	ldi	r25, 0x03	; 3
     fe4:	a8 d2       	rcall	.+1360   	; 0x1536 <puts>
	
	CONTROL_run(CLOSED_LOOP);
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	32 da       	rcall	.-2972   	; 0x44e <CONTROL_run>
	
	return 0;
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	08 95       	ret

00000ff0 <__subsf3>:
     ff0:	50 58       	subi	r21, 0x80	; 128

00000ff2 <__addsf3>:
     ff2:	bb 27       	eor	r27, r27
     ff4:	aa 27       	eor	r26, r26
     ff6:	0e d0       	rcall	.+28     	; 0x1014 <__addsf3x>
     ff8:	75 c1       	rjmp	.+746    	; 0x12e4 <__fp_round>
     ffa:	66 d1       	rcall	.+716    	; 0x12c8 <__fp_pscA>
     ffc:	30 f0       	brcs	.+12     	; 0x100a <__addsf3+0x18>
     ffe:	6b d1       	rcall	.+726    	; 0x12d6 <__fp_pscB>
    1000:	20 f0       	brcs	.+8      	; 0x100a <__addsf3+0x18>
    1002:	31 f4       	brne	.+12     	; 0x1010 <__addsf3+0x1e>
    1004:	9f 3f       	cpi	r25, 0xFF	; 255
    1006:	11 f4       	brne	.+4      	; 0x100c <__addsf3+0x1a>
    1008:	1e f4       	brtc	.+6      	; 0x1010 <__addsf3+0x1e>
    100a:	5b c1       	rjmp	.+694    	; 0x12c2 <__fp_nan>
    100c:	0e f4       	brtc	.+2      	; 0x1010 <__addsf3+0x1e>
    100e:	e0 95       	com	r30
    1010:	e7 fb       	bst	r30, 7
    1012:	51 c1       	rjmp	.+674    	; 0x12b6 <__fp_inf>

00001014 <__addsf3x>:
    1014:	e9 2f       	mov	r30, r25
    1016:	77 d1       	rcall	.+750    	; 0x1306 <__fp_split3>
    1018:	80 f3       	brcs	.-32     	; 0xffa <__addsf3+0x8>
    101a:	ba 17       	cp	r27, r26
    101c:	62 07       	cpc	r22, r18
    101e:	73 07       	cpc	r23, r19
    1020:	84 07       	cpc	r24, r20
    1022:	95 07       	cpc	r25, r21
    1024:	18 f0       	brcs	.+6      	; 0x102c <__addsf3x+0x18>
    1026:	71 f4       	brne	.+28     	; 0x1044 <__addsf3x+0x30>
    1028:	9e f5       	brtc	.+102    	; 0x1090 <__addsf3x+0x7c>
    102a:	8f c1       	rjmp	.+798    	; 0x134a <__fp_zero>
    102c:	0e f4       	brtc	.+2      	; 0x1030 <__addsf3x+0x1c>
    102e:	e0 95       	com	r30
    1030:	0b 2e       	mov	r0, r27
    1032:	ba 2f       	mov	r27, r26
    1034:	a0 2d       	mov	r26, r0
    1036:	0b 01       	movw	r0, r22
    1038:	b9 01       	movw	r22, r18
    103a:	90 01       	movw	r18, r0
    103c:	0c 01       	movw	r0, r24
    103e:	ca 01       	movw	r24, r20
    1040:	a0 01       	movw	r20, r0
    1042:	11 24       	eor	r1, r1
    1044:	ff 27       	eor	r31, r31
    1046:	59 1b       	sub	r21, r25
    1048:	99 f0       	breq	.+38     	; 0x1070 <__addsf3x+0x5c>
    104a:	59 3f       	cpi	r21, 0xF9	; 249
    104c:	50 f4       	brcc	.+20     	; 0x1062 <__addsf3x+0x4e>
    104e:	50 3e       	cpi	r21, 0xE0	; 224
    1050:	68 f1       	brcs	.+90     	; 0x10ac <__addsf3x+0x98>
    1052:	1a 16       	cp	r1, r26
    1054:	f0 40       	sbci	r31, 0x00	; 0
    1056:	a2 2f       	mov	r26, r18
    1058:	23 2f       	mov	r18, r19
    105a:	34 2f       	mov	r19, r20
    105c:	44 27       	eor	r20, r20
    105e:	58 5f       	subi	r21, 0xF8	; 248
    1060:	f3 cf       	rjmp	.-26     	; 0x1048 <__addsf3x+0x34>
    1062:	46 95       	lsr	r20
    1064:	37 95       	ror	r19
    1066:	27 95       	ror	r18
    1068:	a7 95       	ror	r26
    106a:	f0 40       	sbci	r31, 0x00	; 0
    106c:	53 95       	inc	r21
    106e:	c9 f7       	brne	.-14     	; 0x1062 <__addsf3x+0x4e>
    1070:	7e f4       	brtc	.+30     	; 0x1090 <__addsf3x+0x7c>
    1072:	1f 16       	cp	r1, r31
    1074:	ba 0b       	sbc	r27, r26
    1076:	62 0b       	sbc	r22, r18
    1078:	73 0b       	sbc	r23, r19
    107a:	84 0b       	sbc	r24, r20
    107c:	ba f0       	brmi	.+46     	; 0x10ac <__addsf3x+0x98>
    107e:	91 50       	subi	r25, 0x01	; 1
    1080:	a1 f0       	breq	.+40     	; 0x10aa <__addsf3x+0x96>
    1082:	ff 0f       	add	r31, r31
    1084:	bb 1f       	adc	r27, r27
    1086:	66 1f       	adc	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	88 1f       	adc	r24, r24
    108c:	c2 f7       	brpl	.-16     	; 0x107e <__addsf3x+0x6a>
    108e:	0e c0       	rjmp	.+28     	; 0x10ac <__addsf3x+0x98>
    1090:	ba 0f       	add	r27, r26
    1092:	62 1f       	adc	r22, r18
    1094:	73 1f       	adc	r23, r19
    1096:	84 1f       	adc	r24, r20
    1098:	48 f4       	brcc	.+18     	; 0x10ac <__addsf3x+0x98>
    109a:	87 95       	ror	r24
    109c:	77 95       	ror	r23
    109e:	67 95       	ror	r22
    10a0:	b7 95       	ror	r27
    10a2:	f7 95       	ror	r31
    10a4:	9e 3f       	cpi	r25, 0xFE	; 254
    10a6:	08 f0       	brcs	.+2      	; 0x10aa <__addsf3x+0x96>
    10a8:	b3 cf       	rjmp	.-154    	; 0x1010 <__addsf3+0x1e>
    10aa:	93 95       	inc	r25
    10ac:	88 0f       	add	r24, r24
    10ae:	08 f0       	brcs	.+2      	; 0x10b2 <__addsf3x+0x9e>
    10b0:	99 27       	eor	r25, r25
    10b2:	ee 0f       	add	r30, r30
    10b4:	97 95       	ror	r25
    10b6:	87 95       	ror	r24
    10b8:	08 95       	ret

000010ba <__cmpsf2>:
    10ba:	d9 d0       	rcall	.+434    	; 0x126e <__fp_cmp>
    10bc:	08 f4       	brcc	.+2      	; 0x10c0 <__cmpsf2+0x6>
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	08 95       	ret

000010c2 <__divsf3>:
    10c2:	0c d0       	rcall	.+24     	; 0x10dc <__divsf3x>
    10c4:	0f c1       	rjmp	.+542    	; 0x12e4 <__fp_round>
    10c6:	07 d1       	rcall	.+526    	; 0x12d6 <__fp_pscB>
    10c8:	40 f0       	brcs	.+16     	; 0x10da <__divsf3+0x18>
    10ca:	fe d0       	rcall	.+508    	; 0x12c8 <__fp_pscA>
    10cc:	30 f0       	brcs	.+12     	; 0x10da <__divsf3+0x18>
    10ce:	21 f4       	brne	.+8      	; 0x10d8 <__divsf3+0x16>
    10d0:	5f 3f       	cpi	r21, 0xFF	; 255
    10d2:	19 f0       	breq	.+6      	; 0x10da <__divsf3+0x18>
    10d4:	f0 c0       	rjmp	.+480    	; 0x12b6 <__fp_inf>
    10d6:	51 11       	cpse	r21, r1
    10d8:	39 c1       	rjmp	.+626    	; 0x134c <__fp_szero>
    10da:	f3 c0       	rjmp	.+486    	; 0x12c2 <__fp_nan>

000010dc <__divsf3x>:
    10dc:	14 d1       	rcall	.+552    	; 0x1306 <__fp_split3>
    10de:	98 f3       	brcs	.-26     	; 0x10c6 <__divsf3+0x4>

000010e0 <__divsf3_pse>:
    10e0:	99 23       	and	r25, r25
    10e2:	c9 f3       	breq	.-14     	; 0x10d6 <__divsf3+0x14>
    10e4:	55 23       	and	r21, r21
    10e6:	b1 f3       	breq	.-20     	; 0x10d4 <__divsf3+0x12>
    10e8:	95 1b       	sub	r25, r21
    10ea:	55 0b       	sbc	r21, r21
    10ec:	bb 27       	eor	r27, r27
    10ee:	aa 27       	eor	r26, r26
    10f0:	62 17       	cp	r22, r18
    10f2:	73 07       	cpc	r23, r19
    10f4:	84 07       	cpc	r24, r20
    10f6:	38 f0       	brcs	.+14     	; 0x1106 <__divsf3_pse+0x26>
    10f8:	9f 5f       	subi	r25, 0xFF	; 255
    10fa:	5f 4f       	sbci	r21, 0xFF	; 255
    10fc:	22 0f       	add	r18, r18
    10fe:	33 1f       	adc	r19, r19
    1100:	44 1f       	adc	r20, r20
    1102:	aa 1f       	adc	r26, r26
    1104:	a9 f3       	breq	.-22     	; 0x10f0 <__divsf3_pse+0x10>
    1106:	33 d0       	rcall	.+102    	; 0x116e <__divsf3_pse+0x8e>
    1108:	0e 2e       	mov	r0, r30
    110a:	3a f0       	brmi	.+14     	; 0x111a <__divsf3_pse+0x3a>
    110c:	e0 e8       	ldi	r30, 0x80	; 128
    110e:	30 d0       	rcall	.+96     	; 0x1170 <__divsf3_pse+0x90>
    1110:	91 50       	subi	r25, 0x01	; 1
    1112:	50 40       	sbci	r21, 0x00	; 0
    1114:	e6 95       	lsr	r30
    1116:	00 1c       	adc	r0, r0
    1118:	ca f7       	brpl	.-14     	; 0x110c <__divsf3_pse+0x2c>
    111a:	29 d0       	rcall	.+82     	; 0x116e <__divsf3_pse+0x8e>
    111c:	fe 2f       	mov	r31, r30
    111e:	27 d0       	rcall	.+78     	; 0x116e <__divsf3_pse+0x8e>
    1120:	66 0f       	add	r22, r22
    1122:	77 1f       	adc	r23, r23
    1124:	88 1f       	adc	r24, r24
    1126:	bb 1f       	adc	r27, r27
    1128:	26 17       	cp	r18, r22
    112a:	37 07       	cpc	r19, r23
    112c:	48 07       	cpc	r20, r24
    112e:	ab 07       	cpc	r26, r27
    1130:	b0 e8       	ldi	r27, 0x80	; 128
    1132:	09 f0       	breq	.+2      	; 0x1136 <__divsf3_pse+0x56>
    1134:	bb 0b       	sbc	r27, r27
    1136:	80 2d       	mov	r24, r0
    1138:	bf 01       	movw	r22, r30
    113a:	ff 27       	eor	r31, r31
    113c:	93 58       	subi	r25, 0x83	; 131
    113e:	5f 4f       	sbci	r21, 0xFF	; 255
    1140:	2a f0       	brmi	.+10     	; 0x114c <__divsf3_pse+0x6c>
    1142:	9e 3f       	cpi	r25, 0xFE	; 254
    1144:	51 05       	cpc	r21, r1
    1146:	68 f0       	brcs	.+26     	; 0x1162 <__divsf3_pse+0x82>
    1148:	b6 c0       	rjmp	.+364    	; 0x12b6 <__fp_inf>
    114a:	00 c1       	rjmp	.+512    	; 0x134c <__fp_szero>
    114c:	5f 3f       	cpi	r21, 0xFF	; 255
    114e:	ec f3       	brlt	.-6      	; 0x114a <__divsf3_pse+0x6a>
    1150:	98 3e       	cpi	r25, 0xE8	; 232
    1152:	dc f3       	brlt	.-10     	; 0x114a <__divsf3_pse+0x6a>
    1154:	86 95       	lsr	r24
    1156:	77 95       	ror	r23
    1158:	67 95       	ror	r22
    115a:	b7 95       	ror	r27
    115c:	f7 95       	ror	r31
    115e:	9f 5f       	subi	r25, 0xFF	; 255
    1160:	c9 f7       	brne	.-14     	; 0x1154 <__divsf3_pse+0x74>
    1162:	88 0f       	add	r24, r24
    1164:	91 1d       	adc	r25, r1
    1166:	96 95       	lsr	r25
    1168:	87 95       	ror	r24
    116a:	97 f9       	bld	r25, 7
    116c:	08 95       	ret
    116e:	e1 e0       	ldi	r30, 0x01	; 1
    1170:	66 0f       	add	r22, r22
    1172:	77 1f       	adc	r23, r23
    1174:	88 1f       	adc	r24, r24
    1176:	bb 1f       	adc	r27, r27
    1178:	62 17       	cp	r22, r18
    117a:	73 07       	cpc	r23, r19
    117c:	84 07       	cpc	r24, r20
    117e:	ba 07       	cpc	r27, r26
    1180:	20 f0       	brcs	.+8      	; 0x118a <__divsf3_pse+0xaa>
    1182:	62 1b       	sub	r22, r18
    1184:	73 0b       	sbc	r23, r19
    1186:	84 0b       	sbc	r24, r20
    1188:	ba 0b       	sbc	r27, r26
    118a:	ee 1f       	adc	r30, r30
    118c:	88 f7       	brcc	.-30     	; 0x1170 <__divsf3_pse+0x90>
    118e:	e0 95       	com	r30
    1190:	08 95       	ret

00001192 <__fixsfsi>:
    1192:	04 d0       	rcall	.+8      	; 0x119c <__fixunssfsi>
    1194:	68 94       	set
    1196:	b1 11       	cpse	r27, r1
    1198:	d9 c0       	rjmp	.+434    	; 0x134c <__fp_szero>
    119a:	08 95       	ret

0000119c <__fixunssfsi>:
    119c:	bc d0       	rcall	.+376    	; 0x1316 <__fp_splitA>
    119e:	88 f0       	brcs	.+34     	; 0x11c2 <__fixunssfsi+0x26>
    11a0:	9f 57       	subi	r25, 0x7F	; 127
    11a2:	90 f0       	brcs	.+36     	; 0x11c8 <__fixunssfsi+0x2c>
    11a4:	b9 2f       	mov	r27, r25
    11a6:	99 27       	eor	r25, r25
    11a8:	b7 51       	subi	r27, 0x17	; 23
    11aa:	a0 f0       	brcs	.+40     	; 0x11d4 <__fixunssfsi+0x38>
    11ac:	d1 f0       	breq	.+52     	; 0x11e2 <__fixunssfsi+0x46>
    11ae:	66 0f       	add	r22, r22
    11b0:	77 1f       	adc	r23, r23
    11b2:	88 1f       	adc	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	1a f0       	brmi	.+6      	; 0x11be <__fixunssfsi+0x22>
    11b8:	ba 95       	dec	r27
    11ba:	c9 f7       	brne	.-14     	; 0x11ae <__fixunssfsi+0x12>
    11bc:	12 c0       	rjmp	.+36     	; 0x11e2 <__fixunssfsi+0x46>
    11be:	b1 30       	cpi	r27, 0x01	; 1
    11c0:	81 f0       	breq	.+32     	; 0x11e2 <__fixunssfsi+0x46>
    11c2:	c3 d0       	rcall	.+390    	; 0x134a <__fp_zero>
    11c4:	b1 e0       	ldi	r27, 0x01	; 1
    11c6:	08 95       	ret
    11c8:	c0 c0       	rjmp	.+384    	; 0x134a <__fp_zero>
    11ca:	67 2f       	mov	r22, r23
    11cc:	78 2f       	mov	r23, r24
    11ce:	88 27       	eor	r24, r24
    11d0:	b8 5f       	subi	r27, 0xF8	; 248
    11d2:	39 f0       	breq	.+14     	; 0x11e2 <__fixunssfsi+0x46>
    11d4:	b9 3f       	cpi	r27, 0xF9	; 249
    11d6:	cc f3       	brlt	.-14     	; 0x11ca <__fixunssfsi+0x2e>
    11d8:	86 95       	lsr	r24
    11da:	77 95       	ror	r23
    11dc:	67 95       	ror	r22
    11de:	b3 95       	inc	r27
    11e0:	d9 f7       	brne	.-10     	; 0x11d8 <__fixunssfsi+0x3c>
    11e2:	3e f4       	brtc	.+14     	; 0x11f2 <__fixunssfsi+0x56>
    11e4:	90 95       	com	r25
    11e6:	80 95       	com	r24
    11e8:	70 95       	com	r23
    11ea:	61 95       	neg	r22
    11ec:	7f 4f       	sbci	r23, 0xFF	; 255
    11ee:	8f 4f       	sbci	r24, 0xFF	; 255
    11f0:	9f 4f       	sbci	r25, 0xFF	; 255
    11f2:	08 95       	ret

000011f4 <__floatunsisf>:
    11f4:	e8 94       	clt
    11f6:	09 c0       	rjmp	.+18     	; 0x120a <__floatsisf+0x12>

000011f8 <__floatsisf>:
    11f8:	97 fb       	bst	r25, 7
    11fa:	3e f4       	brtc	.+14     	; 0x120a <__floatsisf+0x12>
    11fc:	90 95       	com	r25
    11fe:	80 95       	com	r24
    1200:	70 95       	com	r23
    1202:	61 95       	neg	r22
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	8f 4f       	sbci	r24, 0xFF	; 255
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	99 23       	and	r25, r25
    120c:	a9 f0       	breq	.+42     	; 0x1238 <__floatsisf+0x40>
    120e:	f9 2f       	mov	r31, r25
    1210:	96 e9       	ldi	r25, 0x96	; 150
    1212:	bb 27       	eor	r27, r27
    1214:	93 95       	inc	r25
    1216:	f6 95       	lsr	r31
    1218:	87 95       	ror	r24
    121a:	77 95       	ror	r23
    121c:	67 95       	ror	r22
    121e:	b7 95       	ror	r27
    1220:	f1 11       	cpse	r31, r1
    1222:	f8 cf       	rjmp	.-16     	; 0x1214 <__floatsisf+0x1c>
    1224:	fa f4       	brpl	.+62     	; 0x1264 <__floatsisf+0x6c>
    1226:	bb 0f       	add	r27, r27
    1228:	11 f4       	brne	.+4      	; 0x122e <__floatsisf+0x36>
    122a:	60 ff       	sbrs	r22, 0
    122c:	1b c0       	rjmp	.+54     	; 0x1264 <__floatsisf+0x6c>
    122e:	6f 5f       	subi	r22, 0xFF	; 255
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	8f 4f       	sbci	r24, 0xFF	; 255
    1234:	9f 4f       	sbci	r25, 0xFF	; 255
    1236:	16 c0       	rjmp	.+44     	; 0x1264 <__floatsisf+0x6c>
    1238:	88 23       	and	r24, r24
    123a:	11 f0       	breq	.+4      	; 0x1240 <__floatsisf+0x48>
    123c:	96 e9       	ldi	r25, 0x96	; 150
    123e:	11 c0       	rjmp	.+34     	; 0x1262 <__floatsisf+0x6a>
    1240:	77 23       	and	r23, r23
    1242:	21 f0       	breq	.+8      	; 0x124c <__floatsisf+0x54>
    1244:	9e e8       	ldi	r25, 0x8E	; 142
    1246:	87 2f       	mov	r24, r23
    1248:	76 2f       	mov	r23, r22
    124a:	05 c0       	rjmp	.+10     	; 0x1256 <__floatsisf+0x5e>
    124c:	66 23       	and	r22, r22
    124e:	71 f0       	breq	.+28     	; 0x126c <__floatsisf+0x74>
    1250:	96 e8       	ldi	r25, 0x86	; 134
    1252:	86 2f       	mov	r24, r22
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	2a f0       	brmi	.+10     	; 0x1264 <__floatsisf+0x6c>
    125a:	9a 95       	dec	r25
    125c:	66 0f       	add	r22, r22
    125e:	77 1f       	adc	r23, r23
    1260:	88 1f       	adc	r24, r24
    1262:	da f7       	brpl	.-10     	; 0x125a <__floatsisf+0x62>
    1264:	88 0f       	add	r24, r24
    1266:	96 95       	lsr	r25
    1268:	87 95       	ror	r24
    126a:	97 f9       	bld	r25, 7
    126c:	08 95       	ret

0000126e <__fp_cmp>:
    126e:	99 0f       	add	r25, r25
    1270:	00 08       	sbc	r0, r0
    1272:	55 0f       	add	r21, r21
    1274:	aa 0b       	sbc	r26, r26
    1276:	e0 e8       	ldi	r30, 0x80	; 128
    1278:	fe ef       	ldi	r31, 0xFE	; 254
    127a:	16 16       	cp	r1, r22
    127c:	17 06       	cpc	r1, r23
    127e:	e8 07       	cpc	r30, r24
    1280:	f9 07       	cpc	r31, r25
    1282:	c0 f0       	brcs	.+48     	; 0x12b4 <__fp_cmp+0x46>
    1284:	12 16       	cp	r1, r18
    1286:	13 06       	cpc	r1, r19
    1288:	e4 07       	cpc	r30, r20
    128a:	f5 07       	cpc	r31, r21
    128c:	98 f0       	brcs	.+38     	; 0x12b4 <__fp_cmp+0x46>
    128e:	62 1b       	sub	r22, r18
    1290:	73 0b       	sbc	r23, r19
    1292:	84 0b       	sbc	r24, r20
    1294:	95 0b       	sbc	r25, r21
    1296:	39 f4       	brne	.+14     	; 0x12a6 <__fp_cmp+0x38>
    1298:	0a 26       	eor	r0, r26
    129a:	61 f0       	breq	.+24     	; 0x12b4 <__fp_cmp+0x46>
    129c:	23 2b       	or	r18, r19
    129e:	24 2b       	or	r18, r20
    12a0:	25 2b       	or	r18, r21
    12a2:	21 f4       	brne	.+8      	; 0x12ac <__fp_cmp+0x3e>
    12a4:	08 95       	ret
    12a6:	0a 26       	eor	r0, r26
    12a8:	09 f4       	brne	.+2      	; 0x12ac <__fp_cmp+0x3e>
    12aa:	a1 40       	sbci	r26, 0x01	; 1
    12ac:	a6 95       	lsr	r26
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	81 1d       	adc	r24, r1
    12b2:	81 1d       	adc	r24, r1
    12b4:	08 95       	ret

000012b6 <__fp_inf>:
    12b6:	97 f9       	bld	r25, 7
    12b8:	9f 67       	ori	r25, 0x7F	; 127
    12ba:	80 e8       	ldi	r24, 0x80	; 128
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	08 95       	ret

000012c2 <__fp_nan>:
    12c2:	9f ef       	ldi	r25, 0xFF	; 255
    12c4:	80 ec       	ldi	r24, 0xC0	; 192
    12c6:	08 95       	ret

000012c8 <__fp_pscA>:
    12c8:	00 24       	eor	r0, r0
    12ca:	0a 94       	dec	r0
    12cc:	16 16       	cp	r1, r22
    12ce:	17 06       	cpc	r1, r23
    12d0:	18 06       	cpc	r1, r24
    12d2:	09 06       	cpc	r0, r25
    12d4:	08 95       	ret

000012d6 <__fp_pscB>:
    12d6:	00 24       	eor	r0, r0
    12d8:	0a 94       	dec	r0
    12da:	12 16       	cp	r1, r18
    12dc:	13 06       	cpc	r1, r19
    12de:	14 06       	cpc	r1, r20
    12e0:	05 06       	cpc	r0, r21
    12e2:	08 95       	ret

000012e4 <__fp_round>:
    12e4:	09 2e       	mov	r0, r25
    12e6:	03 94       	inc	r0
    12e8:	00 0c       	add	r0, r0
    12ea:	11 f4       	brne	.+4      	; 0x12f0 <__fp_round+0xc>
    12ec:	88 23       	and	r24, r24
    12ee:	52 f0       	brmi	.+20     	; 0x1304 <__fp_round+0x20>
    12f0:	bb 0f       	add	r27, r27
    12f2:	40 f4       	brcc	.+16     	; 0x1304 <__fp_round+0x20>
    12f4:	bf 2b       	or	r27, r31
    12f6:	11 f4       	brne	.+4      	; 0x12fc <__fp_round+0x18>
    12f8:	60 ff       	sbrs	r22, 0
    12fa:	04 c0       	rjmp	.+8      	; 0x1304 <__fp_round+0x20>
    12fc:	6f 5f       	subi	r22, 0xFF	; 255
    12fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1300:	8f 4f       	sbci	r24, 0xFF	; 255
    1302:	9f 4f       	sbci	r25, 0xFF	; 255
    1304:	08 95       	ret

00001306 <__fp_split3>:
    1306:	57 fd       	sbrc	r21, 7
    1308:	90 58       	subi	r25, 0x80	; 128
    130a:	44 0f       	add	r20, r20
    130c:	55 1f       	adc	r21, r21
    130e:	59 f0       	breq	.+22     	; 0x1326 <__fp_splitA+0x10>
    1310:	5f 3f       	cpi	r21, 0xFF	; 255
    1312:	71 f0       	breq	.+28     	; 0x1330 <__fp_splitA+0x1a>
    1314:	47 95       	ror	r20

00001316 <__fp_splitA>:
    1316:	88 0f       	add	r24, r24
    1318:	97 fb       	bst	r25, 7
    131a:	99 1f       	adc	r25, r25
    131c:	61 f0       	breq	.+24     	; 0x1336 <__fp_splitA+0x20>
    131e:	9f 3f       	cpi	r25, 0xFF	; 255
    1320:	79 f0       	breq	.+30     	; 0x1340 <__fp_splitA+0x2a>
    1322:	87 95       	ror	r24
    1324:	08 95       	ret
    1326:	12 16       	cp	r1, r18
    1328:	13 06       	cpc	r1, r19
    132a:	14 06       	cpc	r1, r20
    132c:	55 1f       	adc	r21, r21
    132e:	f2 cf       	rjmp	.-28     	; 0x1314 <__fp_split3+0xe>
    1330:	46 95       	lsr	r20
    1332:	f1 df       	rcall	.-30     	; 0x1316 <__fp_splitA>
    1334:	08 c0       	rjmp	.+16     	; 0x1346 <__fp_splitA+0x30>
    1336:	16 16       	cp	r1, r22
    1338:	17 06       	cpc	r1, r23
    133a:	18 06       	cpc	r1, r24
    133c:	99 1f       	adc	r25, r25
    133e:	f1 cf       	rjmp	.-30     	; 0x1322 <__fp_splitA+0xc>
    1340:	86 95       	lsr	r24
    1342:	71 05       	cpc	r23, r1
    1344:	61 05       	cpc	r22, r1
    1346:	08 94       	sec
    1348:	08 95       	ret

0000134a <__fp_zero>:
    134a:	e8 94       	clt

0000134c <__fp_szero>:
    134c:	bb 27       	eor	r27, r27
    134e:	66 27       	eor	r22, r22
    1350:	77 27       	eor	r23, r23
    1352:	cb 01       	movw	r24, r22
    1354:	97 f9       	bld	r25, 7
    1356:	08 95       	ret

00001358 <__gesf2>:
    1358:	8a df       	rcall	.-236    	; 0x126e <__fp_cmp>
    135a:	08 f4       	brcc	.+2      	; 0x135e <__gesf2+0x6>
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	08 95       	ret

00001360 <__mulsf3>:
    1360:	0b d0       	rcall	.+22     	; 0x1378 <__mulsf3x>
    1362:	c0 cf       	rjmp	.-128    	; 0x12e4 <__fp_round>
    1364:	b1 df       	rcall	.-158    	; 0x12c8 <__fp_pscA>
    1366:	28 f0       	brcs	.+10     	; 0x1372 <__mulsf3+0x12>
    1368:	b6 df       	rcall	.-148    	; 0x12d6 <__fp_pscB>
    136a:	18 f0       	brcs	.+6      	; 0x1372 <__mulsf3+0x12>
    136c:	95 23       	and	r25, r21
    136e:	09 f0       	breq	.+2      	; 0x1372 <__mulsf3+0x12>
    1370:	a2 cf       	rjmp	.-188    	; 0x12b6 <__fp_inf>
    1372:	a7 cf       	rjmp	.-178    	; 0x12c2 <__fp_nan>
    1374:	11 24       	eor	r1, r1
    1376:	ea cf       	rjmp	.-44     	; 0x134c <__fp_szero>

00001378 <__mulsf3x>:
    1378:	c6 df       	rcall	.-116    	; 0x1306 <__fp_split3>
    137a:	a0 f3       	brcs	.-24     	; 0x1364 <__mulsf3+0x4>

0000137c <__mulsf3_pse>:
    137c:	95 9f       	mul	r25, r21
    137e:	d1 f3       	breq	.-12     	; 0x1374 <__mulsf3+0x14>
    1380:	95 0f       	add	r25, r21
    1382:	50 e0       	ldi	r21, 0x00	; 0
    1384:	55 1f       	adc	r21, r21
    1386:	62 9f       	mul	r22, r18
    1388:	f0 01       	movw	r30, r0
    138a:	72 9f       	mul	r23, r18
    138c:	bb 27       	eor	r27, r27
    138e:	f0 0d       	add	r31, r0
    1390:	b1 1d       	adc	r27, r1
    1392:	63 9f       	mul	r22, r19
    1394:	aa 27       	eor	r26, r26
    1396:	f0 0d       	add	r31, r0
    1398:	b1 1d       	adc	r27, r1
    139a:	aa 1f       	adc	r26, r26
    139c:	64 9f       	mul	r22, r20
    139e:	66 27       	eor	r22, r22
    13a0:	b0 0d       	add	r27, r0
    13a2:	a1 1d       	adc	r26, r1
    13a4:	66 1f       	adc	r22, r22
    13a6:	82 9f       	mul	r24, r18
    13a8:	22 27       	eor	r18, r18
    13aa:	b0 0d       	add	r27, r0
    13ac:	a1 1d       	adc	r26, r1
    13ae:	62 1f       	adc	r22, r18
    13b0:	73 9f       	mul	r23, r19
    13b2:	b0 0d       	add	r27, r0
    13b4:	a1 1d       	adc	r26, r1
    13b6:	62 1f       	adc	r22, r18
    13b8:	83 9f       	mul	r24, r19
    13ba:	a0 0d       	add	r26, r0
    13bc:	61 1d       	adc	r22, r1
    13be:	22 1f       	adc	r18, r18
    13c0:	74 9f       	mul	r23, r20
    13c2:	33 27       	eor	r19, r19
    13c4:	a0 0d       	add	r26, r0
    13c6:	61 1d       	adc	r22, r1
    13c8:	23 1f       	adc	r18, r19
    13ca:	84 9f       	mul	r24, r20
    13cc:	60 0d       	add	r22, r0
    13ce:	21 1d       	adc	r18, r1
    13d0:	82 2f       	mov	r24, r18
    13d2:	76 2f       	mov	r23, r22
    13d4:	6a 2f       	mov	r22, r26
    13d6:	11 24       	eor	r1, r1
    13d8:	9f 57       	subi	r25, 0x7F	; 127
    13da:	50 40       	sbci	r21, 0x00	; 0
    13dc:	8a f0       	brmi	.+34     	; 0x1400 <__mulsf3_pse+0x84>
    13de:	e1 f0       	breq	.+56     	; 0x1418 <__mulsf3_pse+0x9c>
    13e0:	88 23       	and	r24, r24
    13e2:	4a f0       	brmi	.+18     	; 0x13f6 <__mulsf3_pse+0x7a>
    13e4:	ee 0f       	add	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	bb 1f       	adc	r27, r27
    13ea:	66 1f       	adc	r22, r22
    13ec:	77 1f       	adc	r23, r23
    13ee:	88 1f       	adc	r24, r24
    13f0:	91 50       	subi	r25, 0x01	; 1
    13f2:	50 40       	sbci	r21, 0x00	; 0
    13f4:	a9 f7       	brne	.-22     	; 0x13e0 <__mulsf3_pse+0x64>
    13f6:	9e 3f       	cpi	r25, 0xFE	; 254
    13f8:	51 05       	cpc	r21, r1
    13fa:	70 f0       	brcs	.+28     	; 0x1418 <__mulsf3_pse+0x9c>
    13fc:	5c cf       	rjmp	.-328    	; 0x12b6 <__fp_inf>
    13fe:	a6 cf       	rjmp	.-180    	; 0x134c <__fp_szero>
    1400:	5f 3f       	cpi	r21, 0xFF	; 255
    1402:	ec f3       	brlt	.-6      	; 0x13fe <__mulsf3_pse+0x82>
    1404:	98 3e       	cpi	r25, 0xE8	; 232
    1406:	dc f3       	brlt	.-10     	; 0x13fe <__mulsf3_pse+0x82>
    1408:	86 95       	lsr	r24
    140a:	77 95       	ror	r23
    140c:	67 95       	ror	r22
    140e:	b7 95       	ror	r27
    1410:	f7 95       	ror	r31
    1412:	e7 95       	ror	r30
    1414:	9f 5f       	subi	r25, 0xFF	; 255
    1416:	c1 f7       	brne	.-16     	; 0x1408 <__mulsf3_pse+0x8c>
    1418:	fe 2b       	or	r31, r30
    141a:	88 0f       	add	r24, r24
    141c:	91 1d       	adc	r25, r1
    141e:	96 95       	lsr	r25
    1420:	87 95       	ror	r24
    1422:	97 f9       	bld	r25, 7
    1424:	08 95       	ret

00001426 <__tablejump2__>:
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31

0000142a <__tablejump__>:
    142a:	05 90       	lpm	r0, Z+
    142c:	f4 91       	lpm	r31, Z
    142e:	e0 2d       	mov	r30, r0
    1430:	19 94       	eijmp

00001432 <__ashrdi3>:
    1432:	97 fb       	bst	r25, 7
    1434:	10 f8       	bld	r1, 0

00001436 <__lshrdi3>:
    1436:	16 94       	lsr	r1
    1438:	00 08       	sbc	r0, r0
    143a:	0f 93       	push	r16
    143c:	08 30       	cpi	r16, 0x08	; 8
    143e:	98 f0       	brcs	.+38     	; 0x1466 <__lshrdi3+0x30>
    1440:	08 50       	subi	r16, 0x08	; 8
    1442:	23 2f       	mov	r18, r19
    1444:	34 2f       	mov	r19, r20
    1446:	45 2f       	mov	r20, r21
    1448:	56 2f       	mov	r21, r22
    144a:	67 2f       	mov	r22, r23
    144c:	78 2f       	mov	r23, r24
    144e:	89 2f       	mov	r24, r25
    1450:	90 2d       	mov	r25, r0
    1452:	f4 cf       	rjmp	.-24     	; 0x143c <__lshrdi3+0x6>
    1454:	05 94       	asr	r0
    1456:	97 95       	ror	r25
    1458:	87 95       	ror	r24
    145a:	77 95       	ror	r23
    145c:	67 95       	ror	r22
    145e:	57 95       	ror	r21
    1460:	47 95       	ror	r20
    1462:	37 95       	ror	r19
    1464:	27 95       	ror	r18
    1466:	0a 95       	dec	r16
    1468:	aa f7       	brpl	.-22     	; 0x1454 <__lshrdi3+0x1e>
    146a:	0f 91       	pop	r16
    146c:	08 95       	ret

0000146e <__adddi3>:
    146e:	2a 0d       	add	r18, r10
    1470:	3b 1d       	adc	r19, r11
    1472:	4c 1d       	adc	r20, r12
    1474:	5d 1d       	adc	r21, r13
    1476:	6e 1d       	adc	r22, r14
    1478:	7f 1d       	adc	r23, r15
    147a:	80 1f       	adc	r24, r16
    147c:	91 1f       	adc	r25, r17
    147e:	08 95       	ret

00001480 <fdevopen>:
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
    1488:	ec 01       	movw	r28, r24
    148a:	8b 01       	movw	r16, r22
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	31 f4       	brne	.+12     	; 0x149c <fdevopen+0x1c>
    1490:	61 15       	cp	r22, r1
    1492:	71 05       	cpc	r23, r1
    1494:	19 f4       	brne	.+6      	; 0x149c <fdevopen+0x1c>
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	37 c0       	rjmp	.+110    	; 0x150a <fdevopen+0x8a>
    149c:	6e e0       	ldi	r22, 0x0E	; 14
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	63 d2       	rcall	.+1222   	; 0x196c <calloc>
    14a6:	fc 01       	movw	r30, r24
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	a9 f3       	breq	.-22     	; 0x1496 <fdevopen+0x16>
    14ac:	80 e8       	ldi	r24, 0x80	; 128
    14ae:	83 83       	std	Z+3, r24	; 0x03
    14b0:	01 15       	cp	r16, r1
    14b2:	11 05       	cpc	r17, r1
    14b4:	71 f0       	breq	.+28     	; 0x14d2 <fdevopen+0x52>
    14b6:	13 87       	std	Z+11, r17	; 0x0b
    14b8:	02 87       	std	Z+10, r16	; 0x0a
    14ba:	81 e8       	ldi	r24, 0x81	; 129
    14bc:	83 83       	std	Z+3, r24	; 0x03
    14be:	80 91 8e 03 	lds	r24, 0x038E
    14c2:	90 91 8f 03 	lds	r25, 0x038F
    14c6:	89 2b       	or	r24, r25
    14c8:	21 f4       	brne	.+8      	; 0x14d2 <fdevopen+0x52>
    14ca:	f0 93 8f 03 	sts	0x038F, r31
    14ce:	e0 93 8e 03 	sts	0x038E, r30
    14d2:	20 97       	sbiw	r28, 0x00	; 0
    14d4:	c9 f0       	breq	.+50     	; 0x1508 <fdevopen+0x88>
    14d6:	d1 87       	std	Z+9, r29	; 0x09
    14d8:	c0 87       	std	Z+8, r28	; 0x08
    14da:	83 81       	ldd	r24, Z+3	; 0x03
    14dc:	82 60       	ori	r24, 0x02	; 2
    14de:	83 83       	std	Z+3, r24	; 0x03
    14e0:	80 91 90 03 	lds	r24, 0x0390
    14e4:	90 91 91 03 	lds	r25, 0x0391
    14e8:	89 2b       	or	r24, r25
    14ea:	71 f4       	brne	.+28     	; 0x1508 <fdevopen+0x88>
    14ec:	f0 93 91 03 	sts	0x0391, r31
    14f0:	e0 93 90 03 	sts	0x0390, r30
    14f4:	80 91 92 03 	lds	r24, 0x0392
    14f8:	90 91 93 03 	lds	r25, 0x0393
    14fc:	89 2b       	or	r24, r25
    14fe:	21 f4       	brne	.+8      	; 0x1508 <fdevopen+0x88>
    1500:	f0 93 93 03 	sts	0x0393, r31
    1504:	e0 93 92 03 	sts	0x0392, r30
    1508:	cf 01       	movw	r24, r30
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	08 95       	ret

00001514 <printf>:
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	fe 01       	movw	r30, r28
    151e:	36 96       	adiw	r30, 0x06	; 6
    1520:	61 91       	ld	r22, Z+
    1522:	71 91       	ld	r23, Z+
    1524:	af 01       	movw	r20, r30
    1526:	80 91 90 03 	lds	r24, 0x0390
    152a:	90 91 91 03 	lds	r25, 0x0391
    152e:	30 d0       	rcall	.+96     	; 0x1590 <vfprintf>
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	08 95       	ret

00001536 <puts>:
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	e0 91 90 03 	lds	r30, 0x0390
    1542:	f0 91 91 03 	lds	r31, 0x0391
    1546:	23 81       	ldd	r18, Z+3	; 0x03
    1548:	21 ff       	sbrs	r18, 1
    154a:	1b c0       	rjmp	.+54     	; 0x1582 <puts+0x4c>
    154c:	ec 01       	movw	r28, r24
    154e:	00 e0       	ldi	r16, 0x00	; 0
    1550:	10 e0       	ldi	r17, 0x00	; 0
    1552:	89 91       	ld	r24, Y+
    1554:	60 91 90 03 	lds	r22, 0x0390
    1558:	70 91 91 03 	lds	r23, 0x0391
    155c:	db 01       	movw	r26, r22
    155e:	18 96       	adiw	r26, 0x08	; 8
    1560:	ed 91       	ld	r30, X+
    1562:	fc 91       	ld	r31, X
    1564:	19 97       	sbiw	r26, 0x09	; 9
    1566:	88 23       	and	r24, r24
    1568:	31 f0       	breq	.+12     	; 0x1576 <puts+0x40>
    156a:	19 95       	eicall
    156c:	89 2b       	or	r24, r25
    156e:	89 f3       	breq	.-30     	; 0x1552 <puts+0x1c>
    1570:	0f ef       	ldi	r16, 0xFF	; 255
    1572:	1f ef       	ldi	r17, 0xFF	; 255
    1574:	ee cf       	rjmp	.-36     	; 0x1552 <puts+0x1c>
    1576:	8a e0       	ldi	r24, 0x0A	; 10
    1578:	19 95       	eicall
    157a:	89 2b       	or	r24, r25
    157c:	11 f4       	brne	.+4      	; 0x1582 <puts+0x4c>
    157e:	c8 01       	movw	r24, r16
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <puts+0x50>
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	9f ef       	ldi	r25, 0xFF	; 255
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	08 95       	ret

00001590 <vfprintf>:
    1590:	2f 92       	push	r2
    1592:	3f 92       	push	r3
    1594:	4f 92       	push	r4
    1596:	5f 92       	push	r5
    1598:	6f 92       	push	r6
    159a:	7f 92       	push	r7
    159c:	8f 92       	push	r8
    159e:	9f 92       	push	r9
    15a0:	af 92       	push	r10
    15a2:	bf 92       	push	r11
    15a4:	cf 92       	push	r12
    15a6:	df 92       	push	r13
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	2c 97       	sbiw	r28, 0x0c	; 12
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	7c 01       	movw	r14, r24
    15c6:	6b 01       	movw	r12, r22
    15c8:	8a 01       	movw	r16, r20
    15ca:	fc 01       	movw	r30, r24
    15cc:	17 82       	std	Z+7, r1	; 0x07
    15ce:	16 82       	std	Z+6, r1	; 0x06
    15d0:	83 81       	ldd	r24, Z+3	; 0x03
    15d2:	81 ff       	sbrs	r24, 1
    15d4:	b0 c1       	rjmp	.+864    	; 0x1936 <vfprintf+0x3a6>
    15d6:	ce 01       	movw	r24, r28
    15d8:	01 96       	adiw	r24, 0x01	; 1
    15da:	4c 01       	movw	r8, r24
    15dc:	f7 01       	movw	r30, r14
    15de:	93 81       	ldd	r25, Z+3	; 0x03
    15e0:	f6 01       	movw	r30, r12
    15e2:	93 fd       	sbrc	r25, 3
    15e4:	85 91       	lpm	r24, Z+
    15e6:	93 ff       	sbrs	r25, 3
    15e8:	81 91       	ld	r24, Z+
    15ea:	6f 01       	movw	r12, r30
    15ec:	88 23       	and	r24, r24
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <vfprintf+0x62>
    15f0:	9e c1       	rjmp	.+828    	; 0x192e <vfprintf+0x39e>
    15f2:	85 32       	cpi	r24, 0x25	; 37
    15f4:	39 f4       	brne	.+14     	; 0x1604 <vfprintf+0x74>
    15f6:	93 fd       	sbrc	r25, 3
    15f8:	85 91       	lpm	r24, Z+
    15fa:	93 ff       	sbrs	r25, 3
    15fc:	81 91       	ld	r24, Z+
    15fe:	6f 01       	movw	r12, r30
    1600:	85 32       	cpi	r24, 0x25	; 37
    1602:	21 f4       	brne	.+8      	; 0x160c <vfprintf+0x7c>
    1604:	b7 01       	movw	r22, r14
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0f d3       	rcall	.+1566   	; 0x1c28 <fputc>
    160a:	e8 cf       	rjmp	.-48     	; 0x15dc <vfprintf+0x4c>
    160c:	51 2c       	mov	r5, r1
    160e:	31 2c       	mov	r3, r1
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	20 32       	cpi	r18, 0x20	; 32
    1614:	a0 f4       	brcc	.+40     	; 0x163e <vfprintf+0xae>
    1616:	8b 32       	cpi	r24, 0x2B	; 43
    1618:	69 f0       	breq	.+26     	; 0x1634 <vfprintf+0xa4>
    161a:	30 f4       	brcc	.+12     	; 0x1628 <vfprintf+0x98>
    161c:	80 32       	cpi	r24, 0x20	; 32
    161e:	59 f0       	breq	.+22     	; 0x1636 <vfprintf+0xa6>
    1620:	83 32       	cpi	r24, 0x23	; 35
    1622:	69 f4       	brne	.+26     	; 0x163e <vfprintf+0xae>
    1624:	20 61       	ori	r18, 0x10	; 16
    1626:	2c c0       	rjmp	.+88     	; 0x1680 <vfprintf+0xf0>
    1628:	8d 32       	cpi	r24, 0x2D	; 45
    162a:	39 f0       	breq	.+14     	; 0x163a <vfprintf+0xaa>
    162c:	80 33       	cpi	r24, 0x30	; 48
    162e:	39 f4       	brne	.+14     	; 0x163e <vfprintf+0xae>
    1630:	21 60       	ori	r18, 0x01	; 1
    1632:	26 c0       	rjmp	.+76     	; 0x1680 <vfprintf+0xf0>
    1634:	22 60       	ori	r18, 0x02	; 2
    1636:	24 60       	ori	r18, 0x04	; 4
    1638:	23 c0       	rjmp	.+70     	; 0x1680 <vfprintf+0xf0>
    163a:	28 60       	ori	r18, 0x08	; 8
    163c:	21 c0       	rjmp	.+66     	; 0x1680 <vfprintf+0xf0>
    163e:	27 fd       	sbrc	r18, 7
    1640:	27 c0       	rjmp	.+78     	; 0x1690 <vfprintf+0x100>
    1642:	30 ed       	ldi	r19, 0xD0	; 208
    1644:	38 0f       	add	r19, r24
    1646:	3a 30       	cpi	r19, 0x0A	; 10
    1648:	78 f4       	brcc	.+30     	; 0x1668 <vfprintf+0xd8>
    164a:	26 ff       	sbrs	r18, 6
    164c:	06 c0       	rjmp	.+12     	; 0x165a <vfprintf+0xca>
    164e:	fa e0       	ldi	r31, 0x0A	; 10
    1650:	5f 9e       	mul	r5, r31
    1652:	30 0d       	add	r19, r0
    1654:	11 24       	eor	r1, r1
    1656:	53 2e       	mov	r5, r19
    1658:	13 c0       	rjmp	.+38     	; 0x1680 <vfprintf+0xf0>
    165a:	8a e0       	ldi	r24, 0x0A	; 10
    165c:	38 9e       	mul	r3, r24
    165e:	30 0d       	add	r19, r0
    1660:	11 24       	eor	r1, r1
    1662:	33 2e       	mov	r3, r19
    1664:	20 62       	ori	r18, 0x20	; 32
    1666:	0c c0       	rjmp	.+24     	; 0x1680 <vfprintf+0xf0>
    1668:	8e 32       	cpi	r24, 0x2E	; 46
    166a:	21 f4       	brne	.+8      	; 0x1674 <vfprintf+0xe4>
    166c:	26 fd       	sbrc	r18, 6
    166e:	5f c1       	rjmp	.+702    	; 0x192e <vfprintf+0x39e>
    1670:	20 64       	ori	r18, 0x40	; 64
    1672:	06 c0       	rjmp	.+12     	; 0x1680 <vfprintf+0xf0>
    1674:	8c 36       	cpi	r24, 0x6C	; 108
    1676:	11 f4       	brne	.+4      	; 0x167c <vfprintf+0xec>
    1678:	20 68       	ori	r18, 0x80	; 128
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <vfprintf+0xf0>
    167c:	88 36       	cpi	r24, 0x68	; 104
    167e:	41 f4       	brne	.+16     	; 0x1690 <vfprintf+0x100>
    1680:	f6 01       	movw	r30, r12
    1682:	93 fd       	sbrc	r25, 3
    1684:	85 91       	lpm	r24, Z+
    1686:	93 ff       	sbrs	r25, 3
    1688:	81 91       	ld	r24, Z+
    168a:	6f 01       	movw	r12, r30
    168c:	81 11       	cpse	r24, r1
    168e:	c1 cf       	rjmp	.-126    	; 0x1612 <vfprintf+0x82>
    1690:	98 2f       	mov	r25, r24
    1692:	9f 7d       	andi	r25, 0xDF	; 223
    1694:	95 54       	subi	r25, 0x45	; 69
    1696:	93 30       	cpi	r25, 0x03	; 3
    1698:	28 f4       	brcc	.+10     	; 0x16a4 <vfprintf+0x114>
    169a:	0c 5f       	subi	r16, 0xFC	; 252
    169c:	1f 4f       	sbci	r17, 0xFF	; 255
    169e:	ff e3       	ldi	r31, 0x3F	; 63
    16a0:	f9 83       	std	Y+1, r31	; 0x01
    16a2:	0d c0       	rjmp	.+26     	; 0x16be <vfprintf+0x12e>
    16a4:	83 36       	cpi	r24, 0x63	; 99
    16a6:	31 f0       	breq	.+12     	; 0x16b4 <vfprintf+0x124>
    16a8:	83 37       	cpi	r24, 0x73	; 115
    16aa:	71 f0       	breq	.+28     	; 0x16c8 <vfprintf+0x138>
    16ac:	83 35       	cpi	r24, 0x53	; 83
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <vfprintf+0x122>
    16b0:	57 c0       	rjmp	.+174    	; 0x1760 <vfprintf+0x1d0>
    16b2:	21 c0       	rjmp	.+66     	; 0x16f6 <vfprintf+0x166>
    16b4:	f8 01       	movw	r30, r16
    16b6:	80 81       	ld	r24, Z
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	0e 5f       	subi	r16, 0xFE	; 254
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
    16be:	44 24       	eor	r4, r4
    16c0:	43 94       	inc	r4
    16c2:	51 2c       	mov	r5, r1
    16c4:	54 01       	movw	r10, r8
    16c6:	14 c0       	rjmp	.+40     	; 0x16f0 <vfprintf+0x160>
    16c8:	38 01       	movw	r6, r16
    16ca:	f2 e0       	ldi	r31, 0x02	; 2
    16cc:	6f 0e       	add	r6, r31
    16ce:	71 1c       	adc	r7, r1
    16d0:	f8 01       	movw	r30, r16
    16d2:	a0 80       	ld	r10, Z
    16d4:	b1 80       	ldd	r11, Z+1	; 0x01
    16d6:	26 ff       	sbrs	r18, 6
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <vfprintf+0x150>
    16da:	65 2d       	mov	r22, r5
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <vfprintf+0x154>
    16e0:	6f ef       	ldi	r22, 0xFF	; 255
    16e2:	7f ef       	ldi	r23, 0xFF	; 255
    16e4:	c5 01       	movw	r24, r10
    16e6:	2c 87       	std	Y+12, r18	; 0x0c
    16e8:	94 d2       	rcall	.+1320   	; 0x1c12 <strnlen>
    16ea:	2c 01       	movw	r4, r24
    16ec:	83 01       	movw	r16, r6
    16ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    16f0:	2f 77       	andi	r18, 0x7F	; 127
    16f2:	22 2e       	mov	r2, r18
    16f4:	16 c0       	rjmp	.+44     	; 0x1722 <vfprintf+0x192>
    16f6:	38 01       	movw	r6, r16
    16f8:	f2 e0       	ldi	r31, 0x02	; 2
    16fa:	6f 0e       	add	r6, r31
    16fc:	71 1c       	adc	r7, r1
    16fe:	f8 01       	movw	r30, r16
    1700:	a0 80       	ld	r10, Z
    1702:	b1 80       	ldd	r11, Z+1	; 0x01
    1704:	26 ff       	sbrs	r18, 6
    1706:	03 c0       	rjmp	.+6      	; 0x170e <vfprintf+0x17e>
    1708:	65 2d       	mov	r22, r5
    170a:	70 e0       	ldi	r23, 0x00	; 0
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <vfprintf+0x182>
    170e:	6f ef       	ldi	r22, 0xFF	; 255
    1710:	7f ef       	ldi	r23, 0xFF	; 255
    1712:	c5 01       	movw	r24, r10
    1714:	2c 87       	std	Y+12, r18	; 0x0c
    1716:	6b d2       	rcall	.+1238   	; 0x1bee <strnlen_P>
    1718:	2c 01       	movw	r4, r24
    171a:	2c 85       	ldd	r18, Y+12	; 0x0c
    171c:	20 68       	ori	r18, 0x80	; 128
    171e:	22 2e       	mov	r2, r18
    1720:	83 01       	movw	r16, r6
    1722:	23 fc       	sbrc	r2, 3
    1724:	19 c0       	rjmp	.+50     	; 0x1758 <vfprintf+0x1c8>
    1726:	83 2d       	mov	r24, r3
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	48 16       	cp	r4, r24
    172c:	59 06       	cpc	r5, r25
    172e:	a0 f4       	brcc	.+40     	; 0x1758 <vfprintf+0x1c8>
    1730:	b7 01       	movw	r22, r14
    1732:	80 e2       	ldi	r24, 0x20	; 32
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	78 d2       	rcall	.+1264   	; 0x1c28 <fputc>
    1738:	3a 94       	dec	r3
    173a:	f5 cf       	rjmp	.-22     	; 0x1726 <vfprintf+0x196>
    173c:	f5 01       	movw	r30, r10
    173e:	27 fc       	sbrc	r2, 7
    1740:	85 91       	lpm	r24, Z+
    1742:	27 fe       	sbrs	r2, 7
    1744:	81 91       	ld	r24, Z+
    1746:	5f 01       	movw	r10, r30
    1748:	b7 01       	movw	r22, r14
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	6d d2       	rcall	.+1242   	; 0x1c28 <fputc>
    174e:	31 10       	cpse	r3, r1
    1750:	3a 94       	dec	r3
    1752:	f1 e0       	ldi	r31, 0x01	; 1
    1754:	4f 1a       	sub	r4, r31
    1756:	51 08       	sbc	r5, r1
    1758:	41 14       	cp	r4, r1
    175a:	51 04       	cpc	r5, r1
    175c:	79 f7       	brne	.-34     	; 0x173c <vfprintf+0x1ac>
    175e:	de c0       	rjmp	.+444    	; 0x191c <vfprintf+0x38c>
    1760:	84 36       	cpi	r24, 0x64	; 100
    1762:	11 f0       	breq	.+4      	; 0x1768 <vfprintf+0x1d8>
    1764:	89 36       	cpi	r24, 0x69	; 105
    1766:	31 f5       	brne	.+76     	; 0x17b4 <vfprintf+0x224>
    1768:	f8 01       	movw	r30, r16
    176a:	27 ff       	sbrs	r18, 7
    176c:	07 c0       	rjmp	.+14     	; 0x177c <vfprintf+0x1ec>
    176e:	60 81       	ld	r22, Z
    1770:	71 81       	ldd	r23, Z+1	; 0x01
    1772:	82 81       	ldd	r24, Z+2	; 0x02
    1774:	93 81       	ldd	r25, Z+3	; 0x03
    1776:	0c 5f       	subi	r16, 0xFC	; 252
    1778:	1f 4f       	sbci	r17, 0xFF	; 255
    177a:	08 c0       	rjmp	.+16     	; 0x178c <vfprintf+0x1fc>
    177c:	60 81       	ld	r22, Z
    177e:	71 81       	ldd	r23, Z+1	; 0x01
    1780:	88 27       	eor	r24, r24
    1782:	77 fd       	sbrc	r23, 7
    1784:	80 95       	com	r24
    1786:	98 2f       	mov	r25, r24
    1788:	0e 5f       	subi	r16, 0xFE	; 254
    178a:	1f 4f       	sbci	r17, 0xFF	; 255
    178c:	2f 76       	andi	r18, 0x6F	; 111
    178e:	b2 2e       	mov	r11, r18
    1790:	97 ff       	sbrs	r25, 7
    1792:	09 c0       	rjmp	.+18     	; 0x17a6 <vfprintf+0x216>
    1794:	90 95       	com	r25
    1796:	80 95       	com	r24
    1798:	70 95       	com	r23
    179a:	61 95       	neg	r22
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	8f 4f       	sbci	r24, 0xFF	; 255
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	20 68       	ori	r18, 0x80	; 128
    17a4:	b2 2e       	mov	r11, r18
    17a6:	2a e0       	ldi	r18, 0x0A	; 10
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	a4 01       	movw	r20, r8
    17ac:	6f d2       	rcall	.+1246   	; 0x1c8c <__ultoa_invert>
    17ae:	a8 2e       	mov	r10, r24
    17b0:	a8 18       	sub	r10, r8
    17b2:	43 c0       	rjmp	.+134    	; 0x183a <vfprintf+0x2aa>
    17b4:	85 37       	cpi	r24, 0x75	; 117
    17b6:	29 f4       	brne	.+10     	; 0x17c2 <vfprintf+0x232>
    17b8:	2f 7e       	andi	r18, 0xEF	; 239
    17ba:	b2 2e       	mov	r11, r18
    17bc:	2a e0       	ldi	r18, 0x0A	; 10
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	25 c0       	rjmp	.+74     	; 0x180c <vfprintf+0x27c>
    17c2:	f2 2f       	mov	r31, r18
    17c4:	f9 7f       	andi	r31, 0xF9	; 249
    17c6:	bf 2e       	mov	r11, r31
    17c8:	8f 36       	cpi	r24, 0x6F	; 111
    17ca:	c1 f0       	breq	.+48     	; 0x17fc <vfprintf+0x26c>
    17cc:	18 f4       	brcc	.+6      	; 0x17d4 <vfprintf+0x244>
    17ce:	88 35       	cpi	r24, 0x58	; 88
    17d0:	79 f0       	breq	.+30     	; 0x17f0 <vfprintf+0x260>
    17d2:	ad c0       	rjmp	.+346    	; 0x192e <vfprintf+0x39e>
    17d4:	80 37       	cpi	r24, 0x70	; 112
    17d6:	19 f0       	breq	.+6      	; 0x17de <vfprintf+0x24e>
    17d8:	88 37       	cpi	r24, 0x78	; 120
    17da:	21 f0       	breq	.+8      	; 0x17e4 <vfprintf+0x254>
    17dc:	a8 c0       	rjmp	.+336    	; 0x192e <vfprintf+0x39e>
    17de:	2f 2f       	mov	r18, r31
    17e0:	20 61       	ori	r18, 0x10	; 16
    17e2:	b2 2e       	mov	r11, r18
    17e4:	b4 fe       	sbrs	r11, 4
    17e6:	0d c0       	rjmp	.+26     	; 0x1802 <vfprintf+0x272>
    17e8:	8b 2d       	mov	r24, r11
    17ea:	84 60       	ori	r24, 0x04	; 4
    17ec:	b8 2e       	mov	r11, r24
    17ee:	09 c0       	rjmp	.+18     	; 0x1802 <vfprintf+0x272>
    17f0:	24 ff       	sbrs	r18, 4
    17f2:	0a c0       	rjmp	.+20     	; 0x1808 <vfprintf+0x278>
    17f4:	9f 2f       	mov	r25, r31
    17f6:	96 60       	ori	r25, 0x06	; 6
    17f8:	b9 2e       	mov	r11, r25
    17fa:	06 c0       	rjmp	.+12     	; 0x1808 <vfprintf+0x278>
    17fc:	28 e0       	ldi	r18, 0x08	; 8
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	05 c0       	rjmp	.+10     	; 0x180c <vfprintf+0x27c>
    1802:	20 e1       	ldi	r18, 0x10	; 16
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	02 c0       	rjmp	.+4      	; 0x180c <vfprintf+0x27c>
    1808:	20 e1       	ldi	r18, 0x10	; 16
    180a:	32 e0       	ldi	r19, 0x02	; 2
    180c:	f8 01       	movw	r30, r16
    180e:	b7 fe       	sbrs	r11, 7
    1810:	07 c0       	rjmp	.+14     	; 0x1820 <vfprintf+0x290>
    1812:	60 81       	ld	r22, Z
    1814:	71 81       	ldd	r23, Z+1	; 0x01
    1816:	82 81       	ldd	r24, Z+2	; 0x02
    1818:	93 81       	ldd	r25, Z+3	; 0x03
    181a:	0c 5f       	subi	r16, 0xFC	; 252
    181c:	1f 4f       	sbci	r17, 0xFF	; 255
    181e:	06 c0       	rjmp	.+12     	; 0x182c <vfprintf+0x29c>
    1820:	60 81       	ld	r22, Z
    1822:	71 81       	ldd	r23, Z+1	; 0x01
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 5f       	subi	r16, 0xFE	; 254
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
    182c:	a4 01       	movw	r20, r8
    182e:	2e d2       	rcall	.+1116   	; 0x1c8c <__ultoa_invert>
    1830:	a8 2e       	mov	r10, r24
    1832:	a8 18       	sub	r10, r8
    1834:	fb 2d       	mov	r31, r11
    1836:	ff 77       	andi	r31, 0x7F	; 127
    1838:	bf 2e       	mov	r11, r31
    183a:	b6 fe       	sbrs	r11, 6
    183c:	0b c0       	rjmp	.+22     	; 0x1854 <vfprintf+0x2c4>
    183e:	2b 2d       	mov	r18, r11
    1840:	2e 7f       	andi	r18, 0xFE	; 254
    1842:	a5 14       	cp	r10, r5
    1844:	50 f4       	brcc	.+20     	; 0x185a <vfprintf+0x2ca>
    1846:	b4 fe       	sbrs	r11, 4
    1848:	0a c0       	rjmp	.+20     	; 0x185e <vfprintf+0x2ce>
    184a:	b2 fc       	sbrc	r11, 2
    184c:	08 c0       	rjmp	.+16     	; 0x185e <vfprintf+0x2ce>
    184e:	2b 2d       	mov	r18, r11
    1850:	2e 7e       	andi	r18, 0xEE	; 238
    1852:	05 c0       	rjmp	.+10     	; 0x185e <vfprintf+0x2ce>
    1854:	7a 2c       	mov	r7, r10
    1856:	2b 2d       	mov	r18, r11
    1858:	03 c0       	rjmp	.+6      	; 0x1860 <vfprintf+0x2d0>
    185a:	7a 2c       	mov	r7, r10
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <vfprintf+0x2d0>
    185e:	75 2c       	mov	r7, r5
    1860:	24 ff       	sbrs	r18, 4
    1862:	0d c0       	rjmp	.+26     	; 0x187e <vfprintf+0x2ee>
    1864:	fe 01       	movw	r30, r28
    1866:	ea 0d       	add	r30, r10
    1868:	f1 1d       	adc	r31, r1
    186a:	80 81       	ld	r24, Z
    186c:	80 33       	cpi	r24, 0x30	; 48
    186e:	11 f4       	brne	.+4      	; 0x1874 <vfprintf+0x2e4>
    1870:	29 7e       	andi	r18, 0xE9	; 233
    1872:	09 c0       	rjmp	.+18     	; 0x1886 <vfprintf+0x2f6>
    1874:	22 ff       	sbrs	r18, 2
    1876:	06 c0       	rjmp	.+12     	; 0x1884 <vfprintf+0x2f4>
    1878:	73 94       	inc	r7
    187a:	73 94       	inc	r7
    187c:	04 c0       	rjmp	.+8      	; 0x1886 <vfprintf+0x2f6>
    187e:	82 2f       	mov	r24, r18
    1880:	86 78       	andi	r24, 0x86	; 134
    1882:	09 f0       	breq	.+2      	; 0x1886 <vfprintf+0x2f6>
    1884:	73 94       	inc	r7
    1886:	23 fd       	sbrc	r18, 3
    1888:	12 c0       	rjmp	.+36     	; 0x18ae <vfprintf+0x31e>
    188a:	20 ff       	sbrs	r18, 0
    188c:	06 c0       	rjmp	.+12     	; 0x189a <vfprintf+0x30a>
    188e:	5a 2c       	mov	r5, r10
    1890:	73 14       	cp	r7, r3
    1892:	18 f4       	brcc	.+6      	; 0x189a <vfprintf+0x30a>
    1894:	53 0c       	add	r5, r3
    1896:	57 18       	sub	r5, r7
    1898:	73 2c       	mov	r7, r3
    189a:	73 14       	cp	r7, r3
    189c:	60 f4       	brcc	.+24     	; 0x18b6 <vfprintf+0x326>
    189e:	b7 01       	movw	r22, r14
    18a0:	80 e2       	ldi	r24, 0x20	; 32
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	2c 87       	std	Y+12, r18	; 0x0c
    18a6:	c0 d1       	rcall	.+896    	; 0x1c28 <fputc>
    18a8:	73 94       	inc	r7
    18aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ac:	f6 cf       	rjmp	.-20     	; 0x189a <vfprintf+0x30a>
    18ae:	73 14       	cp	r7, r3
    18b0:	10 f4       	brcc	.+4      	; 0x18b6 <vfprintf+0x326>
    18b2:	37 18       	sub	r3, r7
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <vfprintf+0x328>
    18b6:	31 2c       	mov	r3, r1
    18b8:	24 ff       	sbrs	r18, 4
    18ba:	11 c0       	rjmp	.+34     	; 0x18de <vfprintf+0x34e>
    18bc:	b7 01       	movw	r22, r14
    18be:	80 e3       	ldi	r24, 0x30	; 48
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	2c 87       	std	Y+12, r18	; 0x0c
    18c4:	b1 d1       	rcall	.+866    	; 0x1c28 <fputc>
    18c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    18c8:	22 ff       	sbrs	r18, 2
    18ca:	16 c0       	rjmp	.+44     	; 0x18f8 <vfprintf+0x368>
    18cc:	21 ff       	sbrs	r18, 1
    18ce:	03 c0       	rjmp	.+6      	; 0x18d6 <vfprintf+0x346>
    18d0:	88 e5       	ldi	r24, 0x58	; 88
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <vfprintf+0x34a>
    18d6:	88 e7       	ldi	r24, 0x78	; 120
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	b7 01       	movw	r22, r14
    18dc:	0c c0       	rjmp	.+24     	; 0x18f6 <vfprintf+0x366>
    18de:	82 2f       	mov	r24, r18
    18e0:	86 78       	andi	r24, 0x86	; 134
    18e2:	51 f0       	breq	.+20     	; 0x18f8 <vfprintf+0x368>
    18e4:	21 fd       	sbrc	r18, 1
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <vfprintf+0x35c>
    18e8:	80 e2       	ldi	r24, 0x20	; 32
    18ea:	01 c0       	rjmp	.+2      	; 0x18ee <vfprintf+0x35e>
    18ec:	8b e2       	ldi	r24, 0x2B	; 43
    18ee:	27 fd       	sbrc	r18, 7
    18f0:	8d e2       	ldi	r24, 0x2D	; 45
    18f2:	b7 01       	movw	r22, r14
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	98 d1       	rcall	.+816    	; 0x1c28 <fputc>
    18f8:	a5 14       	cp	r10, r5
    18fa:	30 f4       	brcc	.+12     	; 0x1908 <vfprintf+0x378>
    18fc:	b7 01       	movw	r22, r14
    18fe:	80 e3       	ldi	r24, 0x30	; 48
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	92 d1       	rcall	.+804    	; 0x1c28 <fputc>
    1904:	5a 94       	dec	r5
    1906:	f8 cf       	rjmp	.-16     	; 0x18f8 <vfprintf+0x368>
    1908:	aa 94       	dec	r10
    190a:	f4 01       	movw	r30, r8
    190c:	ea 0d       	add	r30, r10
    190e:	f1 1d       	adc	r31, r1
    1910:	80 81       	ld	r24, Z
    1912:	b7 01       	movw	r22, r14
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	88 d1       	rcall	.+784    	; 0x1c28 <fputc>
    1918:	a1 10       	cpse	r10, r1
    191a:	f6 cf       	rjmp	.-20     	; 0x1908 <vfprintf+0x378>
    191c:	33 20       	and	r3, r3
    191e:	09 f4       	brne	.+2      	; 0x1922 <vfprintf+0x392>
    1920:	5d ce       	rjmp	.-838    	; 0x15dc <vfprintf+0x4c>
    1922:	b7 01       	movw	r22, r14
    1924:	80 e2       	ldi	r24, 0x20	; 32
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	7f d1       	rcall	.+766    	; 0x1c28 <fputc>
    192a:	3a 94       	dec	r3
    192c:	f7 cf       	rjmp	.-18     	; 0x191c <vfprintf+0x38c>
    192e:	f7 01       	movw	r30, r14
    1930:	86 81       	ldd	r24, Z+6	; 0x06
    1932:	97 81       	ldd	r25, Z+7	; 0x07
    1934:	02 c0       	rjmp	.+4      	; 0x193a <vfprintf+0x3aa>
    1936:	8f ef       	ldi	r24, 0xFF	; 255
    1938:	9f ef       	ldi	r25, 0xFF	; 255
    193a:	2c 96       	adiw	r28, 0x0c	; 12
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	1f 91       	pop	r17
    194c:	0f 91       	pop	r16
    194e:	ff 90       	pop	r15
    1950:	ef 90       	pop	r14
    1952:	df 90       	pop	r13
    1954:	cf 90       	pop	r12
    1956:	bf 90       	pop	r11
    1958:	af 90       	pop	r10
    195a:	9f 90       	pop	r9
    195c:	8f 90       	pop	r8
    195e:	7f 90       	pop	r7
    1960:	6f 90       	pop	r6
    1962:	5f 90       	pop	r5
    1964:	4f 90       	pop	r4
    1966:	3f 90       	pop	r3
    1968:	2f 90       	pop	r2
    196a:	08 95       	ret

0000196c <calloc>:
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	86 9f       	mul	r24, r22
    1976:	80 01       	movw	r16, r0
    1978:	87 9f       	mul	r24, r23
    197a:	10 0d       	add	r17, r0
    197c:	96 9f       	mul	r25, r22
    197e:	10 0d       	add	r17, r0
    1980:	11 24       	eor	r1, r1
    1982:	c8 01       	movw	r24, r16
    1984:	0d d0       	rcall	.+26     	; 0x19a0 <malloc>
    1986:	ec 01       	movw	r28, r24
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	21 f0       	breq	.+8      	; 0x1994 <calloc+0x28>
    198c:	a8 01       	movw	r20, r16
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	38 d1       	rcall	.+624    	; 0x1c04 <memset>
    1994:	ce 01       	movw	r24, r28
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	08 95       	ret

000019a0 <malloc>:
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	82 30       	cpi	r24, 0x02	; 2
    19a6:	91 05       	cpc	r25, r1
    19a8:	10 f4       	brcc	.+4      	; 0x19ae <malloc+0xe>
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	e0 91 96 03 	lds	r30, 0x0396
    19b2:	f0 91 97 03 	lds	r31, 0x0397
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	a0 e0       	ldi	r26, 0x00	; 0
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	30 97       	sbiw	r30, 0x00	; 0
    19c0:	39 f1       	breq	.+78     	; 0x1a10 <malloc+0x70>
    19c2:	40 81       	ld	r20, Z
    19c4:	51 81       	ldd	r21, Z+1	; 0x01
    19c6:	48 17       	cp	r20, r24
    19c8:	59 07       	cpc	r21, r25
    19ca:	b8 f0       	brcs	.+46     	; 0x19fa <malloc+0x5a>
    19cc:	48 17       	cp	r20, r24
    19ce:	59 07       	cpc	r21, r25
    19d0:	71 f4       	brne	.+28     	; 0x19ee <malloc+0x4e>
    19d2:	82 81       	ldd	r24, Z+2	; 0x02
    19d4:	93 81       	ldd	r25, Z+3	; 0x03
    19d6:	10 97       	sbiw	r26, 0x00	; 0
    19d8:	29 f0       	breq	.+10     	; 0x19e4 <malloc+0x44>
    19da:	13 96       	adiw	r26, 0x03	; 3
    19dc:	9c 93       	st	X, r25
    19de:	8e 93       	st	-X, r24
    19e0:	12 97       	sbiw	r26, 0x02	; 2
    19e2:	2c c0       	rjmp	.+88     	; 0x1a3c <malloc+0x9c>
    19e4:	90 93 97 03 	sts	0x0397, r25
    19e8:	80 93 96 03 	sts	0x0396, r24
    19ec:	27 c0       	rjmp	.+78     	; 0x1a3c <malloc+0x9c>
    19ee:	21 15       	cp	r18, r1
    19f0:	31 05       	cpc	r19, r1
    19f2:	31 f0       	breq	.+12     	; 0x1a00 <malloc+0x60>
    19f4:	42 17       	cp	r20, r18
    19f6:	53 07       	cpc	r21, r19
    19f8:	18 f0       	brcs	.+6      	; 0x1a00 <malloc+0x60>
    19fa:	a9 01       	movw	r20, r18
    19fc:	db 01       	movw	r26, r22
    19fe:	01 c0       	rjmp	.+2      	; 0x1a02 <malloc+0x62>
    1a00:	ef 01       	movw	r28, r30
    1a02:	9a 01       	movw	r18, r20
    1a04:	bd 01       	movw	r22, r26
    1a06:	df 01       	movw	r26, r30
    1a08:	02 80       	ldd	r0, Z+2	; 0x02
    1a0a:	f3 81       	ldd	r31, Z+3	; 0x03
    1a0c:	e0 2d       	mov	r30, r0
    1a0e:	d7 cf       	rjmp	.-82     	; 0x19be <malloc+0x1e>
    1a10:	21 15       	cp	r18, r1
    1a12:	31 05       	cpc	r19, r1
    1a14:	f9 f0       	breq	.+62     	; 0x1a54 <malloc+0xb4>
    1a16:	28 1b       	sub	r18, r24
    1a18:	39 0b       	sbc	r19, r25
    1a1a:	24 30       	cpi	r18, 0x04	; 4
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	80 f4       	brcc	.+32     	; 0x1a40 <malloc+0xa0>
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	9b 81       	ldd	r25, Y+3	; 0x03
    1a24:	61 15       	cp	r22, r1
    1a26:	71 05       	cpc	r23, r1
    1a28:	21 f0       	breq	.+8      	; 0x1a32 <malloc+0x92>
    1a2a:	fb 01       	movw	r30, r22
    1a2c:	93 83       	std	Z+3, r25	; 0x03
    1a2e:	82 83       	std	Z+2, r24	; 0x02
    1a30:	04 c0       	rjmp	.+8      	; 0x1a3a <malloc+0x9a>
    1a32:	90 93 97 03 	sts	0x0397, r25
    1a36:	80 93 96 03 	sts	0x0396, r24
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	32 96       	adiw	r30, 0x02	; 2
    1a3e:	44 c0       	rjmp	.+136    	; 0x1ac8 <malloc+0x128>
    1a40:	fe 01       	movw	r30, r28
    1a42:	e2 0f       	add	r30, r18
    1a44:	f3 1f       	adc	r31, r19
    1a46:	81 93       	st	Z+, r24
    1a48:	91 93       	st	Z+, r25
    1a4a:	22 50       	subi	r18, 0x02	; 2
    1a4c:	31 09       	sbc	r19, r1
    1a4e:	39 83       	std	Y+1, r19	; 0x01
    1a50:	28 83       	st	Y, r18
    1a52:	3a c0       	rjmp	.+116    	; 0x1ac8 <malloc+0x128>
    1a54:	20 91 94 03 	lds	r18, 0x0394
    1a58:	30 91 95 03 	lds	r19, 0x0395
    1a5c:	23 2b       	or	r18, r19
    1a5e:	41 f4       	brne	.+16     	; 0x1a70 <malloc+0xd0>
    1a60:	20 91 02 02 	lds	r18, 0x0202
    1a64:	30 91 03 02 	lds	r19, 0x0203
    1a68:	30 93 95 03 	sts	0x0395, r19
    1a6c:	20 93 94 03 	sts	0x0394, r18
    1a70:	20 91 00 02 	lds	r18, 0x0200
    1a74:	30 91 01 02 	lds	r19, 0x0201
    1a78:	21 15       	cp	r18, r1
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	41 f4       	brne	.+16     	; 0x1a8e <malloc+0xee>
    1a7e:	2d b7       	in	r18, 0x3d	; 61
    1a80:	3e b7       	in	r19, 0x3e	; 62
    1a82:	40 91 04 02 	lds	r20, 0x0204
    1a86:	50 91 05 02 	lds	r21, 0x0205
    1a8a:	24 1b       	sub	r18, r20
    1a8c:	35 0b       	sbc	r19, r21
    1a8e:	e0 91 94 03 	lds	r30, 0x0394
    1a92:	f0 91 95 03 	lds	r31, 0x0395
    1a96:	e2 17       	cp	r30, r18
    1a98:	f3 07       	cpc	r31, r19
    1a9a:	a0 f4       	brcc	.+40     	; 0x1ac4 <malloc+0x124>
    1a9c:	2e 1b       	sub	r18, r30
    1a9e:	3f 0b       	sbc	r19, r31
    1aa0:	28 17       	cp	r18, r24
    1aa2:	39 07       	cpc	r19, r25
    1aa4:	78 f0       	brcs	.+30     	; 0x1ac4 <malloc+0x124>
    1aa6:	ac 01       	movw	r20, r24
    1aa8:	4e 5f       	subi	r20, 0xFE	; 254
    1aaa:	5f 4f       	sbci	r21, 0xFF	; 255
    1aac:	24 17       	cp	r18, r20
    1aae:	35 07       	cpc	r19, r21
    1ab0:	48 f0       	brcs	.+18     	; 0x1ac4 <malloc+0x124>
    1ab2:	4e 0f       	add	r20, r30
    1ab4:	5f 1f       	adc	r21, r31
    1ab6:	50 93 95 03 	sts	0x0395, r21
    1aba:	40 93 94 03 	sts	0x0394, r20
    1abe:	81 93       	st	Z+, r24
    1ac0:	91 93       	st	Z+, r25
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <malloc+0x128>
    1ac4:	e0 e0       	ldi	r30, 0x00	; 0
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	cf 01       	movw	r24, r30
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <free>:
    1ad0:	cf 93       	push	r28
    1ad2:	df 93       	push	r29
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <free+0xa>
    1ad8:	87 c0       	rjmp	.+270    	; 0x1be8 <free+0x118>
    1ada:	fc 01       	movw	r30, r24
    1adc:	32 97       	sbiw	r30, 0x02	; 2
    1ade:	13 82       	std	Z+3, r1	; 0x03
    1ae0:	12 82       	std	Z+2, r1	; 0x02
    1ae2:	c0 91 96 03 	lds	r28, 0x0396
    1ae6:	d0 91 97 03 	lds	r29, 0x0397
    1aea:	20 97       	sbiw	r28, 0x00	; 0
    1aec:	81 f4       	brne	.+32     	; 0x1b0e <free+0x3e>
    1aee:	20 81       	ld	r18, Z
    1af0:	31 81       	ldd	r19, Z+1	; 0x01
    1af2:	28 0f       	add	r18, r24
    1af4:	39 1f       	adc	r19, r25
    1af6:	80 91 94 03 	lds	r24, 0x0394
    1afa:	90 91 95 03 	lds	r25, 0x0395
    1afe:	82 17       	cp	r24, r18
    1b00:	93 07       	cpc	r25, r19
    1b02:	79 f5       	brne	.+94     	; 0x1b62 <free+0x92>
    1b04:	f0 93 95 03 	sts	0x0395, r31
    1b08:	e0 93 94 03 	sts	0x0394, r30
    1b0c:	6d c0       	rjmp	.+218    	; 0x1be8 <free+0x118>
    1b0e:	de 01       	movw	r26, r28
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	ae 17       	cp	r26, r30
    1b16:	bf 07       	cpc	r27, r31
    1b18:	50 f4       	brcc	.+20     	; 0x1b2e <free+0x5e>
    1b1a:	12 96       	adiw	r26, 0x02	; 2
    1b1c:	4d 91       	ld	r20, X+
    1b1e:	5c 91       	ld	r21, X
    1b20:	13 97       	sbiw	r26, 0x03	; 3
    1b22:	9d 01       	movw	r18, r26
    1b24:	41 15       	cp	r20, r1
    1b26:	51 05       	cpc	r21, r1
    1b28:	09 f1       	breq	.+66     	; 0x1b6c <free+0x9c>
    1b2a:	da 01       	movw	r26, r20
    1b2c:	f3 cf       	rjmp	.-26     	; 0x1b14 <free+0x44>
    1b2e:	b3 83       	std	Z+3, r27	; 0x03
    1b30:	a2 83       	std	Z+2, r26	; 0x02
    1b32:	40 81       	ld	r20, Z
    1b34:	51 81       	ldd	r21, Z+1	; 0x01
    1b36:	84 0f       	add	r24, r20
    1b38:	95 1f       	adc	r25, r21
    1b3a:	8a 17       	cp	r24, r26
    1b3c:	9b 07       	cpc	r25, r27
    1b3e:	71 f4       	brne	.+28     	; 0x1b5c <free+0x8c>
    1b40:	8d 91       	ld	r24, X+
    1b42:	9c 91       	ld	r25, X
    1b44:	11 97       	sbiw	r26, 0x01	; 1
    1b46:	84 0f       	add	r24, r20
    1b48:	95 1f       	adc	r25, r21
    1b4a:	02 96       	adiw	r24, 0x02	; 2
    1b4c:	91 83       	std	Z+1, r25	; 0x01
    1b4e:	80 83       	st	Z, r24
    1b50:	12 96       	adiw	r26, 0x02	; 2
    1b52:	8d 91       	ld	r24, X+
    1b54:	9c 91       	ld	r25, X
    1b56:	13 97       	sbiw	r26, 0x03	; 3
    1b58:	93 83       	std	Z+3, r25	; 0x03
    1b5a:	82 83       	std	Z+2, r24	; 0x02
    1b5c:	21 15       	cp	r18, r1
    1b5e:	31 05       	cpc	r19, r1
    1b60:	29 f4       	brne	.+10     	; 0x1b6c <free+0x9c>
    1b62:	f0 93 97 03 	sts	0x0397, r31
    1b66:	e0 93 96 03 	sts	0x0396, r30
    1b6a:	3e c0       	rjmp	.+124    	; 0x1be8 <free+0x118>
    1b6c:	d9 01       	movw	r26, r18
    1b6e:	13 96       	adiw	r26, 0x03	; 3
    1b70:	fc 93       	st	X, r31
    1b72:	ee 93       	st	-X, r30
    1b74:	12 97       	sbiw	r26, 0x02	; 2
    1b76:	4d 91       	ld	r20, X+
    1b78:	5d 91       	ld	r21, X+
    1b7a:	a4 0f       	add	r26, r20
    1b7c:	b5 1f       	adc	r27, r21
    1b7e:	ea 17       	cp	r30, r26
    1b80:	fb 07       	cpc	r31, r27
    1b82:	79 f4       	brne	.+30     	; 0x1ba2 <free+0xd2>
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	84 0f       	add	r24, r20
    1b8a:	95 1f       	adc	r25, r21
    1b8c:	02 96       	adiw	r24, 0x02	; 2
    1b8e:	d9 01       	movw	r26, r18
    1b90:	11 96       	adiw	r26, 0x01	; 1
    1b92:	9c 93       	st	X, r25
    1b94:	8e 93       	st	-X, r24
    1b96:	82 81       	ldd	r24, Z+2	; 0x02
    1b98:	93 81       	ldd	r25, Z+3	; 0x03
    1b9a:	13 96       	adiw	r26, 0x03	; 3
    1b9c:	9c 93       	st	X, r25
    1b9e:	8e 93       	st	-X, r24
    1ba0:	12 97       	sbiw	r26, 0x02	; 2
    1ba2:	e0 e0       	ldi	r30, 0x00	; 0
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	19 f0       	breq	.+6      	; 0x1bb4 <free+0xe4>
    1bae:	fe 01       	movw	r30, r28
    1bb0:	ec 01       	movw	r28, r24
    1bb2:	f9 cf       	rjmp	.-14     	; 0x1ba6 <free+0xd6>
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	02 96       	adiw	r24, 0x02	; 2
    1bb8:	28 81       	ld	r18, Y
    1bba:	39 81       	ldd	r19, Y+1	; 0x01
    1bbc:	82 0f       	add	r24, r18
    1bbe:	93 1f       	adc	r25, r19
    1bc0:	20 91 94 03 	lds	r18, 0x0394
    1bc4:	30 91 95 03 	lds	r19, 0x0395
    1bc8:	28 17       	cp	r18, r24
    1bca:	39 07       	cpc	r19, r25
    1bcc:	69 f4       	brne	.+26     	; 0x1be8 <free+0x118>
    1bce:	30 97       	sbiw	r30, 0x00	; 0
    1bd0:	29 f4       	brne	.+10     	; 0x1bdc <free+0x10c>
    1bd2:	10 92 97 03 	sts	0x0397, r1
    1bd6:	10 92 96 03 	sts	0x0396, r1
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <free+0x110>
    1bdc:	13 82       	std	Z+3, r1	; 0x03
    1bde:	12 82       	std	Z+2, r1	; 0x02
    1be0:	d0 93 95 03 	sts	0x0395, r29
    1be4:	c0 93 94 03 	sts	0x0394, r28
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	08 95       	ret

00001bee <strnlen_P>:
    1bee:	fc 01       	movw	r30, r24
    1bf0:	05 90       	lpm	r0, Z+
    1bf2:	61 50       	subi	r22, 0x01	; 1
    1bf4:	70 40       	sbci	r23, 0x00	; 0
    1bf6:	01 10       	cpse	r0, r1
    1bf8:	d8 f7       	brcc	.-10     	; 0x1bf0 <strnlen_P+0x2>
    1bfa:	80 95       	com	r24
    1bfc:	90 95       	com	r25
    1bfe:	8e 0f       	add	r24, r30
    1c00:	9f 1f       	adc	r25, r31
    1c02:	08 95       	ret

00001c04 <memset>:
    1c04:	dc 01       	movw	r26, r24
    1c06:	01 c0       	rjmp	.+2      	; 0x1c0a <memset+0x6>
    1c08:	6d 93       	st	X+, r22
    1c0a:	41 50       	subi	r20, 0x01	; 1
    1c0c:	50 40       	sbci	r21, 0x00	; 0
    1c0e:	e0 f7       	brcc	.-8      	; 0x1c08 <memset+0x4>
    1c10:	08 95       	ret

00001c12 <strnlen>:
    1c12:	fc 01       	movw	r30, r24
    1c14:	61 50       	subi	r22, 0x01	; 1
    1c16:	70 40       	sbci	r23, 0x00	; 0
    1c18:	01 90       	ld	r0, Z+
    1c1a:	01 10       	cpse	r0, r1
    1c1c:	d8 f7       	brcc	.-10     	; 0x1c14 <strnlen+0x2>
    1c1e:	80 95       	com	r24
    1c20:	90 95       	com	r25
    1c22:	8e 0f       	add	r24, r30
    1c24:	9f 1f       	adc	r25, r31
    1c26:	08 95       	ret

00001c28 <fputc>:
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	18 2f       	mov	r17, r24
    1c32:	09 2f       	mov	r16, r25
    1c34:	eb 01       	movw	r28, r22
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	81 fd       	sbrc	r24, 1
    1c3a:	03 c0       	rjmp	.+6      	; 0x1c42 <fputc+0x1a>
    1c3c:	8f ef       	ldi	r24, 0xFF	; 255
    1c3e:	9f ef       	ldi	r25, 0xFF	; 255
    1c40:	20 c0       	rjmp	.+64     	; 0x1c82 <fputc+0x5a>
    1c42:	82 ff       	sbrs	r24, 2
    1c44:	10 c0       	rjmp	.+32     	; 0x1c66 <fputc+0x3e>
    1c46:	4e 81       	ldd	r20, Y+6	; 0x06
    1c48:	5f 81       	ldd	r21, Y+7	; 0x07
    1c4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c4e:	42 17       	cp	r20, r18
    1c50:	53 07       	cpc	r21, r19
    1c52:	7c f4       	brge	.+30     	; 0x1c72 <fputc+0x4a>
    1c54:	e8 81       	ld	r30, Y
    1c56:	f9 81       	ldd	r31, Y+1	; 0x01
    1c58:	9f 01       	movw	r18, r30
    1c5a:	2f 5f       	subi	r18, 0xFF	; 255
    1c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5e:	39 83       	std	Y+1, r19	; 0x01
    1c60:	28 83       	st	Y, r18
    1c62:	10 83       	st	Z, r17
    1c64:	06 c0       	rjmp	.+12     	; 0x1c72 <fputc+0x4a>
    1c66:	e8 85       	ldd	r30, Y+8	; 0x08
    1c68:	f9 85       	ldd	r31, Y+9	; 0x09
    1c6a:	81 2f       	mov	r24, r17
    1c6c:	19 95       	eicall
    1c6e:	89 2b       	or	r24, r25
    1c70:	29 f7       	brne	.-54     	; 0x1c3c <fputc+0x14>
    1c72:	2e 81       	ldd	r18, Y+6	; 0x06
    1c74:	3f 81       	ldd	r19, Y+7	; 0x07
    1c76:	2f 5f       	subi	r18, 0xFF	; 255
    1c78:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7a:	3f 83       	std	Y+7, r19	; 0x07
    1c7c:	2e 83       	std	Y+6, r18	; 0x06
    1c7e:	81 2f       	mov	r24, r17
    1c80:	90 2f       	mov	r25, r16
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	08 95       	ret

00001c8c <__ultoa_invert>:
    1c8c:	fa 01       	movw	r30, r20
    1c8e:	aa 27       	eor	r26, r26
    1c90:	28 30       	cpi	r18, 0x08	; 8
    1c92:	51 f1       	breq	.+84     	; 0x1ce8 <__ultoa_invert+0x5c>
    1c94:	20 31       	cpi	r18, 0x10	; 16
    1c96:	81 f1       	breq	.+96     	; 0x1cf8 <__ultoa_invert+0x6c>
    1c98:	e8 94       	clt
    1c9a:	6f 93       	push	r22
    1c9c:	6e 7f       	andi	r22, 0xFE	; 254
    1c9e:	6e 5f       	subi	r22, 0xFE	; 254
    1ca0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca6:	af 4f       	sbci	r26, 0xFF	; 255
    1ca8:	b1 e0       	ldi	r27, 0x01	; 1
    1caa:	3e d0       	rcall	.+124    	; 0x1d28 <__ultoa_invert+0x9c>
    1cac:	b4 e0       	ldi	r27, 0x04	; 4
    1cae:	3c d0       	rcall	.+120    	; 0x1d28 <__ultoa_invert+0x9c>
    1cb0:	67 0f       	add	r22, r23
    1cb2:	78 1f       	adc	r23, r24
    1cb4:	89 1f       	adc	r24, r25
    1cb6:	9a 1f       	adc	r25, r26
    1cb8:	a1 1d       	adc	r26, r1
    1cba:	68 0f       	add	r22, r24
    1cbc:	79 1f       	adc	r23, r25
    1cbe:	8a 1f       	adc	r24, r26
    1cc0:	91 1d       	adc	r25, r1
    1cc2:	a1 1d       	adc	r26, r1
    1cc4:	6a 0f       	add	r22, r26
    1cc6:	71 1d       	adc	r23, r1
    1cc8:	81 1d       	adc	r24, r1
    1cca:	91 1d       	adc	r25, r1
    1ccc:	a1 1d       	adc	r26, r1
    1cce:	20 d0       	rcall	.+64     	; 0x1d10 <__ultoa_invert+0x84>
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <__ultoa_invert+0x48>
    1cd2:	68 94       	set
    1cd4:	3f 91       	pop	r19
    1cd6:	2a e0       	ldi	r18, 0x0A	; 10
    1cd8:	26 9f       	mul	r18, r22
    1cda:	11 24       	eor	r1, r1
    1cdc:	30 19       	sub	r19, r0
    1cde:	30 5d       	subi	r19, 0xD0	; 208
    1ce0:	31 93       	st	Z+, r19
    1ce2:	de f6       	brtc	.-74     	; 0x1c9a <__ultoa_invert+0xe>
    1ce4:	cf 01       	movw	r24, r30
    1ce6:	08 95       	ret
    1ce8:	46 2f       	mov	r20, r22
    1cea:	47 70       	andi	r20, 0x07	; 7
    1cec:	40 5d       	subi	r20, 0xD0	; 208
    1cee:	41 93       	st	Z+, r20
    1cf0:	b3 e0       	ldi	r27, 0x03	; 3
    1cf2:	0f d0       	rcall	.+30     	; 0x1d12 <__ultoa_invert+0x86>
    1cf4:	c9 f7       	brne	.-14     	; 0x1ce8 <__ultoa_invert+0x5c>
    1cf6:	f6 cf       	rjmp	.-20     	; 0x1ce4 <__ultoa_invert+0x58>
    1cf8:	46 2f       	mov	r20, r22
    1cfa:	4f 70       	andi	r20, 0x0F	; 15
    1cfc:	40 5d       	subi	r20, 0xD0	; 208
    1cfe:	4a 33       	cpi	r20, 0x3A	; 58
    1d00:	18 f0       	brcs	.+6      	; 0x1d08 <__ultoa_invert+0x7c>
    1d02:	49 5d       	subi	r20, 0xD9	; 217
    1d04:	31 fd       	sbrc	r19, 1
    1d06:	40 52       	subi	r20, 0x20	; 32
    1d08:	41 93       	st	Z+, r20
    1d0a:	02 d0       	rcall	.+4      	; 0x1d10 <__ultoa_invert+0x84>
    1d0c:	a9 f7       	brne	.-22     	; 0x1cf8 <__ultoa_invert+0x6c>
    1d0e:	ea cf       	rjmp	.-44     	; 0x1ce4 <__ultoa_invert+0x58>
    1d10:	b4 e0       	ldi	r27, 0x04	; 4
    1d12:	a6 95       	lsr	r26
    1d14:	97 95       	ror	r25
    1d16:	87 95       	ror	r24
    1d18:	77 95       	ror	r23
    1d1a:	67 95       	ror	r22
    1d1c:	ba 95       	dec	r27
    1d1e:	c9 f7       	brne	.-14     	; 0x1d12 <__ultoa_invert+0x86>
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	61 05       	cpc	r22, r1
    1d24:	71 05       	cpc	r23, r1
    1d26:	08 95       	ret
    1d28:	9b 01       	movw	r18, r22
    1d2a:	ac 01       	movw	r20, r24
    1d2c:	0a 2e       	mov	r0, r26
    1d2e:	06 94       	lsr	r0
    1d30:	57 95       	ror	r21
    1d32:	47 95       	ror	r20
    1d34:	37 95       	ror	r19
    1d36:	27 95       	ror	r18
    1d38:	ba 95       	dec	r27
    1d3a:	c9 f7       	brne	.-14     	; 0x1d2e <__ultoa_invert+0xa2>
    1d3c:	62 0f       	add	r22, r18
    1d3e:	73 1f       	adc	r23, r19
    1d40:	84 1f       	adc	r24, r20
    1d42:	95 1f       	adc	r25, r21
    1d44:	a0 1d       	adc	r26, r0
    1d46:	08 95       	ret

00001d48 <_exit>:
    1d48:	f8 94       	cli

00001d4a <__stop_program>:
    1d4a:	ff cf       	rjmp	.-2      	; 0x1d4a <__stop_program>
