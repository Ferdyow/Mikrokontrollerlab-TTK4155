
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ba  00800100  00001fee  00002082  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  008003ba  008003ba  0000233c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000233c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003d0  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000458c  00000000  00000000  00002768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000018d3  00000000  00000000  00006cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001624  00000000  00000000  000085c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ae4  00000000  00000000  00009bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b60  00000000  00000000  0000a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002349  00000000  00000000  0000b230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000340  00000000  00000000  0000d579  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cc 01 	jmp	0x398	; 0x398 <__ctors_end>
       4:	0c 94 84 02 	jmp	0x508	; 0x508 <__vector_1>
       8:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
       c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      10:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      14:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      18:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      1c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      20:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      24:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      28:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      2c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      30:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      34:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      38:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      3c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      40:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      44:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      48:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      4c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      50:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      54:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      58:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      5c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      60:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      64:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      68:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      6c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <keyboard_print+0xa8>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????
     368:	24 2e       	mov	r2, r20
     36a:	6b 6b       	ori	r22, 0xBB	; 187
     36c:	3a 12       	cpse	r3, r26
     36e:	00 00       	nop
     370:	46 66       	ori	r20, 0x66	; 102
     372:	30 18       	sub	r3, r0
     374:	0c 66       	ori	r16, 0x6C	; 108
     376:	62 00       	.word	0x0062	; ????
     378:	30 7a       	andi	r19, 0xA0	; 160
     37a:	4f 5d       	subi	r20, 0xDF	; 223
     37c:	37 7a       	andi	r19, 0xA7	; 167
     37e:	48 00       	.word	0x0048	; ????
     380:	04 07       	cpc	r16, r20
     382:	03 00       	.word	0x0003	; ????
     384:	00 00       	nop
     386:	00 00       	nop
     388:	00 1c       	adc	r0, r0
     38a:	3e 63       	ori	r19, 0x3E	; 62
     38c:	41 00       	.word	0x0041	; ????
     38e:	00 00       	nop
     390:	00 41       	sbci	r16, 0x10	; 16
     392:	63 3e       	cpi	r22, 0xE3	; 227
     394:	1c 00       	.word	0x001c	; ????
	...

00000398 <__ctors_end>:
     398:	11 24       	eor	r1, r1
     39a:	1f be       	out	0x3f, r1	; 63
     39c:	cf ef       	ldi	r28, 0xFF	; 255
     39e:	d4 e0       	ldi	r29, 0x04	; 4
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	cd bf       	out	0x3d, r28	; 61

000003a4 <__do_copy_data>:
     3a4:	13 e0       	ldi	r17, 0x03	; 3
     3a6:	a0 e0       	ldi	r26, 0x00	; 0
     3a8:	b1 e0       	ldi	r27, 0x01	; 1
     3aa:	ee ee       	ldi	r30, 0xEE	; 238
     3ac:	ff e1       	ldi	r31, 0x1F	; 31
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <__do_copy_data+0x10>
     3b0:	05 90       	lpm	r0, Z+
     3b2:	0d 92       	st	X+, r0
     3b4:	aa 3b       	cpi	r26, 0xBA	; 186
     3b6:	b1 07       	cpc	r27, r17
     3b8:	d9 f7       	brne	.-10     	; 0x3b0 <__do_copy_data+0xc>

000003ba <__do_clear_bss>:
     3ba:	23 e0       	ldi	r18, 0x03	; 3
     3bc:	aa eb       	ldi	r26, 0xBA	; 186
     3be:	b3 e0       	ldi	r27, 0x03	; 3
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <.do_clear_bss_start>

000003c2 <.do_clear_bss_loop>:
     3c2:	1d 92       	st	X+, r1

000003c4 <.do_clear_bss_start>:
     3c4:	a8 3d       	cpi	r26, 0xD8	; 216
     3c6:	b2 07       	cpc	r27, r18
     3c8:	e1 f7       	brne	.-8      	; 0x3c2 <.do_clear_bss_loop>
     3ca:	0e 94 b5 09 	call	0x136a	; 0x136a <main>
     3ce:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <_exit>

000003d2 <__bad_interrupt>:
     3d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d6 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
     3d6:	30 98       	cbi	0x06, 0	; 6
     3d8:	08 95       	ret

000003da <ADC_read>:
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3da:	84 30       	cpi	r24, 0x04	; 4
     3dc:	40 f4       	brcc	.+16     	; 0x3ee <ADC_read+0x14>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
     3de:	8c 5f       	subi	r24, 0xFC	; 252
     3e0:	80 93 00 14 	sts	0x1400, r24
	
	//wait 'til /INTR is low
	while(test_bit(PINE, PINE0));
     3e4:	28 99       	sbic	0x05, 0	; 5
     3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <ADC_read+0xa>
	//reset interrupt
	inter = 0;
	*/

	//return current value
	return *adc; 
     3e8:	80 91 00 14 	lds	r24, 0x1400
     3ec:	08 95       	ret
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3ee:	80 e0       	ldi	r24, 0x00	; 0
	inter = 0;
	*/

	//return current value
	return *adc; 
     3f0:	08 95       	ret

000003f2 <brightness_init>:
#include "joy.h"
#include "OLED_driver.h"
#include "defines.h"


brightness_init() {
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
	OLED_reset();
     3fa:	0e 94 26 0a 	call	0x144c	; 0x144c <OLED_reset>
	fprintf(OLED, "%s ", "l_slider:");
     3fe:	8d e5       	ldi	r24, 0x5D	; 93
     400:	91 e0       	ldi	r25, 0x01	; 1
     402:	9f 93       	push	r25
     404:	8f 93       	push	r24
     406:	07 e6       	ldi	r16, 0x67	; 103
     408:	11 e0       	ldi	r17, 0x01	; 1
     40a:	1f 93       	push	r17
     40c:	0f 93       	push	r16
     40e:	c6 e0       	ldi	r28, 0x06	; 6
     410:	d1 e0       	ldi	r29, 0x01	; 1
     412:	df 93       	push	r29
     414:	cf 93       	push	r28
     416:	0e 94 a7 0c 	call	0x194e	; 0x194e <fprintf>
	OLED_pos(1,0);
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <OLED_pos>
	fprintf(OLED, "%s ", "sets brightness");
     422:	8b e6       	ldi	r24, 0x6B	; 107
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	9f 93       	push	r25
     428:	8f 93       	push	r24
     42a:	1f 93       	push	r17
     42c:	0f 93       	push	r16
     42e:	df 93       	push	r29
     430:	cf 93       	push	r28
     432:	0e 94 a7 0c 	call	0x194e	; 0x194e <fprintf>
	OLED_pos(2,0);
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	82 e0       	ldi	r24, 0x02	; 2
     43a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <OLED_pos>
	fprintf(OLED, "%s ", "l_button: back");
     43e:	8b e7       	ldi	r24, 0x7B	; 123
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	9f 93       	push	r25
     444:	8f 93       	push	r24
     446:	1f 93       	push	r17
     448:	0f 93       	push	r16
     44a:	df 93       	push	r29
     44c:	cf 93       	push	r28
     44e:	0e 94 a7 0c 	call	0x194e	; 0x194e <fprintf>
	for (int line = 4; line < 8; line++) {
		OLED_set_line(line);
     452:	84 e0       	ldi	r24, 0x04	; 4
     454:	0e 94 b0 0a 	call	0x1560	; 0x1560 <OLED_set_line>
     458:	85 e0       	ldi	r24, 0x05	; 5
     45a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <OLED_set_line>
     45e:	86 e0       	ldi	r24, 0x06	; 6
     460:	0e 94 b0 0a 	call	0x1560	; 0x1560 <OLED_set_line>
     464:	87 e0       	ldi	r24, 0x07	; 7
     466:	0e 94 b0 0a 	call	0x1560	; 0x1560 <OLED_set_line>
     46a:	8d b7       	in	r24, 0x3d	; 61
     46c:	9e b7       	in	r25, 0x3e	; 62
     46e:	42 96       	adiw	r24, 0x12	; 18
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	9e bf       	out	0x3e, r25	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	8d bf       	out	0x3d, r24	; 61
	}
	
}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	08 95       	ret

00000484 <brightness_run>:

brightness_run() {
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
	brightness_init();
     48a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <brightness_init>
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
		slider_position = SLI_getPosition();
		//printf("slider_position %d\n", slider_position.right);
		printf("slider_position (left) %d\n", slider_position.left);
     48e:	ca e8       	ldi	r28, 0x8A	; 138
     490:	d1 e0       	ldi	r29, 0x01	; 1
}

brightness_run() {
	brightness_init();
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     492:	10 c0       	rjmp	.+32     	; 0x4b4 <brightness_run+0x30>
		slider_position = SLI_getPosition();
     494:	0e 94 c2 03 	call	0x784	; 0x784 <SLI_getPosition>
     498:	16 2f       	mov	r17, r22
		//printf("slider_position %d\n", slider_position.right);
		printf("slider_position (left) %d\n", slider_position.left);
     49a:	7f 93       	push	r23
     49c:	6f 93       	push	r22
     49e:	df 93       	push	r29
     4a0:	cf 93       	push	r28
     4a2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <printf>
		OLED_set_brightness(slider_position.left); //RIGHT funker ikke
     4a6:	81 2f       	mov	r24, r17
     4a8:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <OLED_set_brightness>
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
}

brightness_run() {
	brightness_init();
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	0e 94 46 03 	call	0x68c	; 0x68c <JOY_button_pressed>
     4ba:	89 2b       	or	r24, r25
     4bc:	59 f3       	breq	.-42     	; 0x494 <brightness_run+0x10>
		slider_position = SLI_getPosition();
		//printf("slider_position %d\n", slider_position.right);
		printf("slider_position (left) %d\n", slider_position.left);
		OLED_set_brightness(slider_position.left); //RIGHT funker ikke
	}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	08 95       	ret

000004c6 <CAN_int_vect>:
ISR(INT0_vect){
	CAN_int_vect();
}


void CAN_int_vect() {
     4c6:	cf 93       	push	r28
	uint8_t int_flags = MCP2515_read(MCP_CANINTF);
     4c8:	8c e2       	ldi	r24, 0x2C	; 44
     4ca:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <MCP2515_read>
     4ce:	c8 2f       	mov	r28, r24
	if(int_flags & MCP_RX0IF){
     4d0:	80 ff       	sbrs	r24, 0
     4d2:	0b c0       	rjmp	.+22     	; 0x4ea <CAN_int_vect+0x24>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     4d4:	40 e0       	ldi	r20, 0x00	; 0
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	8c e2       	ldi	r24, 0x2C	; 44
     4da:	0e 94 fd 07 	call	0xffa	; 0xffa <MCP2515_bit_modify>
		flag_RX0 = 1;
     4de:	21 e0       	ldi	r18, 0x01	; 1
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	30 93 bd 03 	sts	0x03BD, r19
     4e6:	20 93 bc 03 	sts	0x03BC, r18
	}
			
	if(int_flags & MCP_RX1IF){
     4ea:	c1 ff       	sbrs	r28, 1
     4ec:	0b c0       	rjmp	.+22     	; 0x504 <__stack+0x5>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     4ee:	40 e0       	ldi	r20, 0x00	; 0
     4f0:	62 e0       	ldi	r22, 0x02	; 2
     4f2:	8c e2       	ldi	r24, 0x2C	; 44
     4f4:	0e 94 fd 07 	call	0xffa	; 0xffa <MCP2515_bit_modify>
		flag_RX1 = 1;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	90 93 bb 03 	sts	0x03BB, r25
     500:	80 93 ba 03 	sts	0x03BA, r24
	}
			
	
	
}
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <__vector_1>:

volatile int flag_RX0 = 0;
volatile int flag_RX1 = 0;

//interrupt service routine
ISR(INT0_vect){
     508:	1f 92       	push	r1
     50a:	0f 92       	push	r0
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	0f 92       	push	r0
     510:	11 24       	eor	r1, r1
     512:	2f 93       	push	r18
     514:	3f 93       	push	r19
     516:	4f 93       	push	r20
     518:	5f 93       	push	r21
     51a:	6f 93       	push	r22
     51c:	7f 93       	push	r23
     51e:	8f 93       	push	r24
     520:	9f 93       	push	r25
     522:	af 93       	push	r26
     524:	bf 93       	push	r27
     526:	ef 93       	push	r30
     528:	ff 93       	push	r31
	CAN_int_vect();
     52a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <CAN_int_vect>
}
     52e:	ff 91       	pop	r31
     530:	ef 91       	pop	r30
     532:	bf 91       	pop	r27
     534:	af 91       	pop	r26
     536:	9f 91       	pop	r25
     538:	8f 91       	pop	r24
     53a:	7f 91       	pop	r23
     53c:	6f 91       	pop	r22
     53e:	5f 91       	pop	r21
     540:	4f 91       	pop	r20
     542:	3f 91       	pop	r19
     544:	2f 91       	pop	r18
     546:	0f 90       	pop	r0
     548:	0f be       	out	0x3f, r0	; 63
     54a:	0f 90       	pop	r0
     54c:	1f 90       	pop	r1
     54e:	18 95       	reti

00000550 <JOY_calibrate>:
	clear_bit(DDRB,PB2);
	clear_bit(SFIOR, PUD);
	JOY_calibrate();
}

void JOY_calibrate(){
     550:	bf 92       	push	r11
     552:	cf 92       	push	r12
     554:	df 92       	push	r13
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
	max.x = 0;
     562:	10 92 c2 03 	sts	0x03C2, r1
	max.y = 0;
     566:	10 92 c3 03 	sts	0x03C3, r1
	min.x = 255;
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	80 93 c6 03 	sts	0x03C6, r24
	min.y = 255;
     570:	80 93 c7 03 	sts	0x03C7, r24
	uint8_t x;
	uint8_t y;
	OLED_reset();
     574:	0e 94 26 0a 	call	0x144c	; 0x144c <OLED_reset>
	printf("\nMove the joystick to all extreme points.\n");
     578:	85 ea       	ldi	r24, 0xA5	; 165
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <puts>
	printf("Press the joystick when you're done.\n");
     580:	8f ec       	ldi	r24, 0xCF	; 207
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <puts>
	fprintf(OLED, "%s ", "CALIBRATE JOY"); 
     588:	84 ef       	ldi	r24, 0xF4	; 244
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	9f 93       	push	r25
     58e:	8f 93       	push	r24
     590:	87 e6       	ldi	r24, 0x67	; 103
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	84 e1       	ldi	r24, 0x14	; 20
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	9f 93       	push	r25
     59e:	8f 93       	push	r24
     5a0:	0e 94 a7 0c 	call	0x194e	; 0x194e <fprintf>
	//check channels 
	while(test_bit(PINB,PINB2)){
     5a4:	0f 90       	pop	r0
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
		// Read sensor values
		x = ADC_read(0);
		y = ADC_read(1);
		
		// Calibrate x
		if (min.x > x) min.x = x; 
     5b0:	06 ec       	ldi	r16, 0xC6	; 198
     5b2:	13 e0       	ldi	r17, 0x03	; 3
		else if (max.x < x) max.x = x;
     5b4:	0f 2e       	mov	r0, r31
     5b6:	f2 ec       	ldi	r31, 0xC2	; 194
     5b8:	cf 2e       	mov	r12, r31
     5ba:	f3 e0       	ldi	r31, 0x03	; 3
     5bc:	df 2e       	mov	r13, r31
     5be:	f0 2d       	mov	r31, r0
		
		// Calibrate y
		if (min.y > y) min.y = y;
     5c0:	c7 ec       	ldi	r28, 0xC7	; 199
     5c2:	d3 e0       	ldi	r29, 0x03	; 3
		else if (max.y < y) max.y = y;		
     5c4:	0f 2e       	mov	r0, r31
     5c6:	f3 ec       	ldi	r31, 0xC3	; 195
     5c8:	ef 2e       	mov	r14, r31
     5ca:	f3 e0       	ldi	r31, 0x03	; 3
     5cc:	ff 2e       	mov	r15, r31
     5ce:	f0 2d       	mov	r31, r0
	OLED_reset();
	printf("\nMove the joystick to all extreme points.\n");
	printf("Press the joystick when you're done.\n");
	fprintf(OLED, "%s ", "CALIBRATE JOY"); 
	//check channels 
	while(test_bit(PINB,PINB2)){
     5d0:	1c c0       	rjmp	.+56     	; 0x60a <JOY_calibrate+0xba>
		// Read sensor values
		x = ADC_read(0);
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 ed 01 	call	0x3da	; 0x3da <ADC_read>
     5d8:	b8 2e       	mov	r11, r24
		y = ADC_read(1);
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	0e 94 ed 01 	call	0x3da	; 0x3da <ADC_read>
		
		// Calibrate x
		if (min.x > x) min.x = x; 
     5e0:	f8 01       	movw	r30, r16
     5e2:	90 81       	ld	r25, Z
     5e4:	b9 16       	cp	r11, r25
     5e6:	10 f4       	brcc	.+4      	; 0x5ec <JOY_calibrate+0x9c>
     5e8:	b0 82       	st	Z, r11
     5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <JOY_calibrate+0xa6>
		else if (max.x < x) max.x = x;
     5ec:	f6 01       	movw	r30, r12
     5ee:	90 81       	ld	r25, Z
     5f0:	9b 15       	cp	r25, r11
     5f2:	08 f4       	brcc	.+2      	; 0x5f6 <JOY_calibrate+0xa6>
     5f4:	b0 82       	st	Z, r11
		
		// Calibrate y
		if (min.y > y) min.y = y;
     5f6:	98 81       	ld	r25, Y
     5f8:	89 17       	cp	r24, r25
     5fa:	10 f4       	brcc	.+4      	; 0x600 <JOY_calibrate+0xb0>
     5fc:	88 83       	st	Y, r24
     5fe:	05 c0       	rjmp	.+10     	; 0x60a <JOY_calibrate+0xba>
		else if (max.y < y) max.y = y;		
     600:	f7 01       	movw	r30, r14
     602:	90 81       	ld	r25, Z
     604:	98 17       	cp	r25, r24
     606:	08 f4       	brcc	.+2      	; 0x60a <JOY_calibrate+0xba>
     608:	80 83       	st	Z, r24
	OLED_reset();
	printf("\nMove the joystick to all extreme points.\n");
	printf("Press the joystick when you're done.\n");
	fprintf(OLED, "%s ", "CALIBRATE JOY"); 
	//check channels 
	while(test_bit(PINB,PINB2)){
     60a:	b2 99       	sbic	0x16, 2	; 22
     60c:	e2 cf       	rjmp	.-60     	; 0x5d2 <JOY_calibrate+0x82>
		if (min.y > y) min.y = y;
		else if (max.y < y) max.y = y;		
	}

	// Find distance from middle to edges (radius)
	rad.x = (max.x - min.x) / 2;
     60e:	e0 91 c2 03 	lds	r30, 0x03C2
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	60 91 c6 03 	lds	r22, 0x03C6
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	9f 01       	movw	r18, r30
     61c:	26 1b       	sub	r18, r22
     61e:	37 0b       	sbc	r19, r23
     620:	c9 01       	movw	r24, r18
     622:	99 23       	and	r25, r25
     624:	0c f4       	brge	.+2      	; 0x628 <JOY_calibrate+0xd8>
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	95 95       	asr	r25
     62a:	87 95       	ror	r24
     62c:	80 93 c4 03 	sts	0x03C4, r24
	rad.y = (max.y - min.y) / 2;
     630:	40 91 c3 03 	lds	r20, 0x03C3
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	20 91 c7 03 	lds	r18, 0x03C7
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	da 01       	movw	r26, r20
     63e:	a2 1b       	sub	r26, r18
     640:	b3 0b       	sbc	r27, r19
     642:	cd 01       	movw	r24, r26
     644:	0a f4       	brpl	.+2      	; 0x648 <JOY_calibrate+0xf8>
     646:	01 96       	adiw	r24, 0x01	; 1
     648:	95 95       	asr	r25
     64a:	87 95       	ror	r24
     64c:	80 93 c5 03 	sts	0x03C5, r24
	
	// Find mid point using edges.
	mid.x = (max.x + min.x) / 2;
     650:	6e 0f       	add	r22, r30
     652:	7f 1f       	adc	r23, r31
     654:	75 95       	asr	r23
     656:	67 95       	ror	r22
     658:	60 93 c8 03 	sts	0x03C8, r22
	mid.y = (max.y + min.y) / 2;
     65c:	24 0f       	add	r18, r20
     65e:	35 1f       	adc	r19, r21
     660:	35 95       	asr	r19
     662:	27 95       	ror	r18
     664:	20 93 c9 03 	sts	0x03C9, r18
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	1f 91       	pop	r17
     66e:	0f 91       	pop	r16
     670:	ff 90       	pop	r15
     672:	ef 90       	pop	r14
     674:	df 90       	pop	r13
     676:	cf 90       	pop	r12
     678:	bf 90       	pop	r11
     67a:	08 95       	ret

0000067c <JOY_init>:
	uint8_t y;
} max, min, rad, mid;

void JOY_init(){
	//set pull-up resistors on PORTB for JOY_button
	set_bit(PORTB,PB2);
     67c:	c2 9a       	sbi	0x18, 2	; 24
	clear_bit(DDRB,PB2);
     67e:	ba 98       	cbi	0x17, 2	; 23
	clear_bit(SFIOR, PUD);
     680:	80 b7       	in	r24, 0x30	; 48
     682:	8b 7f       	andi	r24, 0xFB	; 251
     684:	80 bf       	out	0x30, r24	; 48
	JOY_calibrate();
     686:	0e 94 a8 02 	call	0x550	; 0x550 <JOY_calibrate>
     68a:	08 95       	ret

0000068c <JOY_button_pressed>:
	mid.x = (max.x + min.x) / 2;
	mid.y = (max.y + min.y) / 2;
}

int JOY_button_pressed(button b) {
	switch (b) {
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	41 f0       	breq	.+16     	; 0x6a0 <JOY_button_pressed+0x14>
     690:	18 f0       	brcs	.+6      	; 0x698 <JOY_button_pressed+0xc>
     692:	82 30       	cpi	r24, 0x02	; 2
     694:	51 f0       	breq	.+20     	; 0x6aa <JOY_button_pressed+0x1e>
     696:	11 c0       	rjmp	.+34     	; 0x6ba <JOY_button_pressed+0x2e>
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     698:	86 b3       	in	r24, 0x16	; 22
     69a:	81 70       	andi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return 1;
     6a0:	86 b3       	in	r24, 0x16	; 22
}

int JOY_button_pressed(button b) {
	switch (b) {
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     6a2:	86 95       	lsr	r24
     6a4:	81 70       	andi	r24, 0x01	; 1
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return 1;
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return 1;
     6aa:	86 b3       	in	r24, 0x16	; 22
     6ac:	86 95       	lsr	r24
     6ae:	86 95       	lsr	r24
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	89 27       	eor	r24, r25
}

int JOY_button_pressed(button b) {
	switch (b) {
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     6b4:	81 70       	andi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	08 95       	ret
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return 1;
		break;
	}
	return 0;
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
}
     6be:	08 95       	ret

000006c0 <JOY_getPosition>:

JOY_position_t JOY_getPosition() {
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
	JOY_position_t JOY_position;
	JOY_position.x = (100 * (ADC_read(X_COORD) - mid.x)) / rad.x;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	0e 94 ed 01 	call	0x3da	; 0x3da <ADC_read>
     6cc:	28 2f       	mov	r18, r24
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	80 91 c8 03 	lds	r24, 0x03C8
     6d4:	28 1b       	sub	r18, r24
     6d6:	31 09       	sbc	r19, r1
     6d8:	14 e6       	ldi	r17, 0x64	; 100
     6da:	12 9f       	mul	r17, r18
     6dc:	c0 01       	movw	r24, r0
     6de:	13 9f       	mul	r17, r19
     6e0:	90 0d       	add	r25, r0
     6e2:	11 24       	eor	r1, r1
     6e4:	60 91 c4 03 	lds	r22, 0x03C4
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	0e 94 0d 0b 	call	0x161a	; 0x161a <__divmodhi4>
     6ee:	eb 01       	movw	r28, r22
	JOY_position.y = (100 * (ADC_read(Y_COORD) - mid.y)) / rad.y;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	0e 94 ed 01 	call	0x3da	; 0x3da <ADC_read>
     6f6:	28 2f       	mov	r18, r24
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	80 91 c9 03 	lds	r24, 0x03C9
     6fe:	28 1b       	sub	r18, r24
     700:	31 09       	sbc	r19, r1
     702:	12 9f       	mul	r17, r18
     704:	c0 01       	movw	r24, r0
     706:	13 9f       	mul	r17, r19
     708:	90 0d       	add	r25, r0
     70a:	11 24       	eor	r1, r1
     70c:	60 91 c5 03 	lds	r22, 0x03C5
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	0e 94 0d 0b 	call	0x161a	; 0x161a <__divmodhi4>
     716:	9b 01       	movw	r18, r22
	return JOY_position;
     718:	be 01       	movw	r22, r28
     71a:	c9 01       	movw	r24, r18
}
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	08 95       	ret

00000724 <JOY_getDirection>:

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
     724:	0e 94 60 03 	call	0x6c0	; 0x6c0 <JOY_getPosition>
     728:	fb 01       	movw	r30, r22
     72a:	ac 01       	movw	r20, r24
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     72c:	9b 01       	movw	r18, r22
     72e:	2c 5f       	subi	r18, 0xFC	; 252
     730:	3f 4f       	sbci	r19, 0xFF	; 255
     732:	29 30       	cpi	r18, 0x09	; 9
     734:	31 05       	cpc	r19, r1
     736:	30 f4       	brcc	.+12     	; 0x744 <JOY_getDirection+0x20>
     738:	9c 01       	movw	r18, r24
     73a:	2c 5f       	subi	r18, 0xFC	; 252
     73c:	3f 4f       	sbci	r19, 0xFF	; 255
     73e:	29 30       	cpi	r18, 0x09	; 9
     740:	31 05       	cpc	r19, r1
     742:	e0 f0       	brcs	.+56     	; 0x77c <JOY_getDirection+0x58>

	// The x-coordinate is dominating
	else if (abs(position.x) > abs(position.y)) {
     744:	db 01       	movw	r26, r22
     746:	ff 23       	and	r31, r31
     748:	24 f4       	brge	.+8      	; 0x752 <JOY_getDirection+0x2e>
     74a:	aa 27       	eor	r26, r26
     74c:	bb 27       	eor	r27, r27
     74e:	a6 1b       	sub	r26, r22
     750:	b7 0b       	sbc	r27, r23
     752:	9c 01       	movw	r18, r24
     754:	55 23       	and	r21, r21
     756:	24 f4       	brge	.+8      	; 0x760 <JOY_getDirection+0x3c>
     758:	22 27       	eor	r18, r18
     75a:	33 27       	eor	r19, r19
     75c:	28 1b       	sub	r18, r24
     75e:	39 0b       	sbc	r19, r25
     760:	2a 17       	cp	r18, r26
     762:	3b 07       	cpc	r19, r27
     764:	34 f4       	brge	.+12     	; 0x772 <JOY_getDirection+0x4e>
		// Positive x => RIGHT
		if (position.x > 0) return RIGHT;
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	1e 16       	cp	r1, r30
     76a:	1f 06       	cpc	r1, r31
     76c:	54 f0       	brlt	.+20     	; 0x782 <JOY_getDirection+0x5e>
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	08 95       	ret
		else return LEFT;

	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
     772:	14 16       	cp	r1, r20
     774:	15 06       	cpc	r1, r21
     776:	24 f4       	brge	.+8      	; 0x780 <JOY_getDirection+0x5c>
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	08 95       	ret

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     77c:	84 e0       	ldi	r24, 0x04	; 4
     77e:	08 95       	ret
	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
		// Negative y => DOWN
		else return DOWN;
     780:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     782:	08 95       	ret

00000784 <SLI_getPosition>:

SLI_position_t SLI_getPosition() {
     784:	cf 93       	push	r28
	SLI_position_t pos;
	pos.left = ADC_read(LEFT_CH);
     786:	82 e0       	ldi	r24, 0x02	; 2
     788:	0e 94 ed 01 	call	0x3da	; 0x3da <ADC_read>
     78c:	c8 2f       	mov	r28, r24
	pos.right = ADC_read(RIGHT_CH);
     78e:	83 e0       	ldi	r24, 0x03	; 3
     790:	0e 94 ed 01 	call	0x3da	; 0x3da <ADC_read>
     794:	28 2f       	mov	r18, r24
	return pos;
     796:	6c 2f       	mov	r22, r28
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	82 2f       	mov	r24, r18
     79c:	90 e0       	ldi	r25, 0x00	; 0
}
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <print_blank>:
	int x, y
}position;

position pos = {0,0};

void print_blank(int number) {
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
     7ac:	18 16       	cp	r1, r24
     7ae:	19 06       	cpc	r1, r25
     7b0:	54 f4       	brge	.+20     	; 0x7c6 <print_blank+0x24>
     7b2:	c0 e0       	ldi	r28, 0x00	; 0
     7b4:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0x00);
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
}position;

position pos = {0,0};

void print_blank(int number) {
	for (int i = 0; i < number; i++) {
     7be:	21 96       	adiw	r28, 0x01	; 1
     7c0:	c0 17       	cp	r28, r16
     7c2:	d1 07       	cpc	r29, r17
     7c4:	c1 f7       	brne	.-16     	; 0x7b6 <print_blank+0x14>
		write_data(0x00);
	}
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	08 95       	ret

000007d0 <print_fill>:

void print_fill(int number) {
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
     7da:	18 16       	cp	r1, r24
     7dc:	19 06       	cpc	r1, r25
     7de:	54 f4       	brge	.+20     	; 0x7f4 <print_fill+0x24>
     7e0:	c0 e0       	ldi	r28, 0x00	; 0
     7e2:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0xFF);
     7e4:	8f ef       	ldi	r24, 0xFF	; 255
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
		write_data(0x00);
	}
}

void print_fill(int number) {
	for (int i = 0; i < number; i++) {
     7ec:	21 96       	adiw	r28, 0x01	; 1
     7ee:	c0 17       	cp	r28, r16
     7f0:	d1 07       	cpc	r29, r17
     7f2:	c1 f7       	brne	.-16     	; 0x7e4 <print_fill+0x14>
		write_data(0xFF);
	}
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	08 95       	ret

000007fe <print_shift>:

void print_shift() {
	print_blank(4);
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <print_blank>
	//up-arrow
	write_data(0b00010000);
     806:	80 e1       	ldi	r24, 0x10	; 16
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(0b00011000);
     80e:	88 e1       	ldi	r24, 0x18	; 24
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(0b00111100);
     816:	8c e3       	ldi	r24, 0x3C	; 60
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(0b00111110);
     81e:	8e e3       	ldi	r24, 0x3E	; 62
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(0b00111100);
     826:	8c e3       	ldi	r24, 0x3C	; 60
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(0b00011000);
     82e:	88 e1       	ldi	r24, 0x18	; 24
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(0b00010000);
     836:	80 e1       	ldi	r24, 0x10	; 16
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>

	print_blank(5);
     83e:	85 e0       	ldi	r24, 0x05	; 5
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <print_blank>
     846:	08 95       	ret

00000848 <print_shift_inverse>:
}

void print_shift_inverse() {
	print_fill(4);
     848:	84 e0       	ldi	r24, 0x04	; 4
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <print_fill>

	//up-arrow
	write_data(~0b00010000);
     850:	8f ee       	ldi	r24, 0xEF	; 239
     852:	9f ef       	ldi	r25, 0xFF	; 255
     854:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(~0b00011000);
     858:	87 ee       	ldi	r24, 0xE7	; 231
     85a:	9f ef       	ldi	r25, 0xFF	; 255
     85c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(~0b00111100);
     860:	83 ec       	ldi	r24, 0xC3	; 195
     862:	9f ef       	ldi	r25, 0xFF	; 255
     864:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(~0b00111110);
     868:	81 ec       	ldi	r24, 0xC1	; 193
     86a:	9f ef       	ldi	r25, 0xFF	; 255
     86c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(~0b00111100);
     870:	83 ec       	ldi	r24, 0xC3	; 195
     872:	9f ef       	ldi	r25, 0xFF	; 255
     874:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(~0b00011000);
     878:	87 ee       	ldi	r24, 0xE7	; 231
     87a:	9f ef       	ldi	r25, 0xFF	; 255
     87c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(~0b00010000);
     880:	8f ee       	ldi	r24, 0xEF	; 239
     882:	9f ef       	ldi	r25, 0xFF	; 255
     884:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>

	print_fill(5);
     888:	85 e0       	ldi	r24, 0x05	; 5
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <print_fill>
     890:	08 95       	ret

00000892 <print_left_arrow>:
}

void print_left_arrow() {
	print_blank(6);
     892:	86 e0       	ldi	r24, 0x06	; 6
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <print_blank>
	//left-arrow
	
	write_data(0b00010000);
     89a:	80 e1       	ldi	r24, 0x10	; 16
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(0b00111000);
     8a2:	88 e3       	ldi	r24, 0x38	; 56
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(0b01111100);
     8aa:	8c e7       	ldi	r24, 0x7C	; 124
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	
	print_blank(7);
     8b2:	87 e0       	ldi	r24, 0x07	; 7
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <print_blank>
     8ba:	08 95       	ret

000008bc <print_left_arrow_inverse>:
}

void print_left_arrow_inverse() {
	print_fill(6);
     8bc:	86 e0       	ldi	r24, 0x06	; 6
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <print_fill>
	//left-arrow
	write_data(~0b00010000);
     8c4:	8f ee       	ldi	r24, 0xEF	; 239
     8c6:	9f ef       	ldi	r25, 0xFF	; 255
     8c8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(~0b00111000);
     8cc:	87 ec       	ldi	r24, 0xC7	; 199
     8ce:	9f ef       	ldi	r25, 0xFF	; 255
     8d0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(~0b01111100);
     8d4:	83 e8       	ldi	r24, 0x83	; 131
     8d6:	9f ef       	ldi	r25, 0xFF	; 255
     8d8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>

	print_fill(7);
     8dc:	87 e0       	ldi	r24, 0x07	; 7
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <print_fill>
     8e4:	08 95       	ret

000008e6 <print_right_arrow>:
}

void print_right_arrow() {
	print_blank(6);
     8e6:	86 e0       	ldi	r24, 0x06	; 6
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <print_blank>

	//left-arrow
	write_data(0b01111100);
     8ee:	8c e7       	ldi	r24, 0x7C	; 124
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(0b00111000);
     8f6:	88 e3       	ldi	r24, 0x38	; 56
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(0b00010000);
     8fe:	80 e1       	ldi	r24, 0x10	; 16
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	
	print_blank(7);
     906:	87 e0       	ldi	r24, 0x07	; 7
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <print_blank>
     90e:	08 95       	ret

00000910 <print_right_arrow_inverse>:
}

void print_right_arrow_inverse() {
	print_fill(6);
     910:	86 e0       	ldi	r24, 0x06	; 6
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <print_fill>

	//left-arrow
	write_data(~0b01111100);
     918:	83 e8       	ldi	r24, 0x83	; 131
     91a:	9f ef       	ldi	r25, 0xFF	; 255
     91c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(~0b00111000);
     920:	87 ec       	ldi	r24, 0xC7	; 199
     922:	9f ef       	ldi	r25, 0xFF	; 255
     924:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
	write_data(~0b00010000);
     928:	8f ee       	ldi	r24, 0xEF	; 239
     92a:	9f ef       	ldi	r25, 0xFF	; 255
     92c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>

	print_fill(7);
     930:	87 e0       	ldi	r24, 0x07	; 7
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <print_fill>
     938:	08 95       	ret

0000093a <print_spacebar>:
}


void print_spacebar() {
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
	print_blank(4);
     93e:	84 e0       	ldi	r24, 0x04	; 4
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <print_blank>

	//spacebar
	write_data(0b00111000);
     946:	88 e3       	ldi	r24, 0x38	; 56
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
     94e:	c7 e2       	ldi	r28, 0x27	; 39
     950:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 39;i++) write_data(0b00100000);
     952:	80 e2       	ldi	r24, 0x20	; 32
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
     95a:	21 97       	sbiw	r28, 0x01	; 1
     95c:	20 97       	sbiw	r28, 0x00	; 0
     95e:	c9 f7       	brne	.-14     	; 0x952 <print_spacebar+0x18>
	write_data(0b00111000);
     960:	88 e3       	ldi	r24, 0x38	; 56
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>

	print_blank(5);
     968:	85 e0       	ldi	r24, 0x05	; 5
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <print_blank>
}
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <print_spacebar_inverse>:

void print_spacebar_inverse() {
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
	print_blank(4);
     97a:	84 e0       	ldi	r24, 0x04	; 4
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <print_blank>

	//spacebar
	write_data(~0b00111000);
     982:	87 ec       	ldi	r24, 0xC7	; 199
     984:	9f ef       	ldi	r25, 0xFF	; 255
     986:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
     98a:	c7 e2       	ldi	r28, 0x27	; 39
     98c:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < 39;i++) write_data(~0b00100000);
     98e:	8f ed       	ldi	r24, 0xDF	; 223
     990:	9f ef       	ldi	r25, 0xFF	; 255
     992:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>
     996:	21 97       	sbiw	r28, 0x01	; 1
     998:	20 97       	sbiw	r28, 0x00	; 0
     99a:	c9 f7       	brne	.-14     	; 0x98e <print_spacebar_inverse+0x18>
	write_data(~0b00111000);
     99c:	87 ec       	ldi	r24, 0xC7	; 199
     99e:	9f ef       	ldi	r25, 0xFF	; 255
     9a0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <write_data>

	print_blank(5);
     9a4:	85 e0       	ldi	r24, 0x05	; 5
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <print_blank>
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	08 95       	ret

000009b2 <print_options_bar>:


void print_options_bar() {
	print_shift();
     9b2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <print_shift>
	print_spacebar();
     9b6:	0e 94 9d 04 	call	0x93a	; 0x93a <print_spacebar>
	print_left_arrow();
     9ba:	0e 94 49 04 	call	0x892	; 0x892 <print_left_arrow>
	print_right_arrow();
     9be:	0e 94 73 04 	call	0x8e6	; 0x8e6 <print_right_arrow>
     9c2:	08 95       	ret

000009c4 <keyboard_goto>:
}

// 5 lines x 16 columns
void keyboard_goto(int line, int column) {
	OLED_pos(line + 3, (column+2) * 8);
     9c4:	6e 5f       	subi	r22, 0xFE	; 254
     9c6:	7f 4f       	sbci	r23, 0xFF	; 255
     9c8:	66 0f       	add	r22, r22
     9ca:	66 0f       	add	r22, r22
     9cc:	66 0f       	add	r22, r22
     9ce:	8d 5f       	subi	r24, 0xFD	; 253
     9d0:	0e 94 fd 09 	call	0x13fa	; 0x13fa <OLED_pos>
     9d4:	08 95       	ret

000009d6 <keyboard_goto_line>:
}

void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <keyboard_goto>
     9de:	08 95       	ret

000009e0 <keyboard_init>:
	}


void keyboard_init() {
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
	OLED_reset();
     9ec:	0e 94 26 0a 	call	0x144c	; 0x144c <OLED_reset>
	letters = LETTERS_SMALL;
     9f0:	8a ed       	ldi	r24, 0xDA	; 218
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	90 93 25 01 	sts	0x0125, r25
     9f8:	80 93 24 01 	sts	0x0124, r24
	keyboard_goto_line(0);
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <keyboard_goto_line>
	pos.x = 0;
     a04:	10 92 bf 03 	sts	0x03BF, r1
     a08:	10 92 be 03 	sts	0x03BE, r1
	pos.y = 0;
     a0c:	10 92 c1 03 	sts	0x03C1, r1
     a10:	10 92 c0 03 	sts	0x03C0, r1
	strcpy(written_string, "\0");
     a14:	e0 91 22 01 	lds	r30, 0x0122
     a18:	f0 91 23 01 	lds	r31, 0x0123
     a1c:	10 82       	st	Z, r1

	//The first letter is selected by default
	OLED_print_char_inverse(letters[0]);
     a1e:	e0 91 24 01 	lds	r30, 0x0124
     a22:	f0 91 25 01 	lds	r31, 0x0125
     a26:	80 81       	ld	r24, Z
     a28:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <OLED_print_char_inverse>

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     a2c:	c1 e0       	ldi	r28, 0x01	; 1
     a2e:	d0 e0       	ldi	r29, 0x00	; 0
		if (i % LINE_LENGTH == 0) {
     a30:	0c e0       	ldi	r16, 0x0C	; 12
     a32:	10 e0       	ldi	r17, 0x00	; 0
			keyboard_goto_line(++pos.y);
     a34:	0f 2e       	mov	r0, r31
     a36:	f0 ec       	ldi	r31, 0xC0	; 192
     a38:	ef 2e       	mov	r14, r31
     a3a:	f3 e0       	ldi	r31, 0x03	; 3
     a3c:	ff 2e       	mov	r15, r31
     a3e:	f0 2d       	mov	r31, r0
     a40:	0e c0       	rjmp	.+28     	; 0xa5e <keyboard_init+0x7e>
	//The first letter is selected by default
	OLED_print_char_inverse(letters[0]);

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0) {
     a42:	ce 01       	movw	r24, r28
     a44:	b8 01       	movw	r22, r16
     a46:	0e 94 0d 0b 	call	0x161a	; 0x161a <__divmodhi4>
     a4a:	89 2b       	or	r24, r25
     a4c:	41 f4       	brne	.+16     	; 0xa5e <keyboard_init+0x7e>
			keyboard_goto_line(++pos.y);
     a4e:	f7 01       	movw	r30, r14
     a50:	80 81       	ld	r24, Z
     a52:	91 81       	ldd	r25, Z+1	; 0x01
     a54:	01 96       	adiw	r24, 0x01	; 1
     a56:	91 83       	std	Z+1, r25	; 0x01
     a58:	80 83       	st	Z, r24
     a5a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <keyboard_goto_line>
		}
		OLED_print_char(letters[i]);
     a5e:	e0 91 24 01 	lds	r30, 0x0124
     a62:	f0 91 25 01 	lds	r31, 0x0125
     a66:	ec 0f       	add	r30, r28
     a68:	fd 1f       	adc	r31, r29
     a6a:	80 81       	ld	r24, Z
     a6c:	0e 94 ba 09 	call	0x1374	; 0x1374 <OLED_print_char>

	//The first letter is selected by default
	OLED_print_char_inverse(letters[0]);

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     a70:	21 96       	adiw	r28, 0x01	; 1
     a72:	c0 33       	cpi	r28, 0x30	; 48
     a74:	d1 05       	cpc	r29, r1
     a76:	29 f7       	brne	.-54     	; 0xa42 <keyboard_init+0x62>
			keyboard_goto_line(++pos.y);
		}
		OLED_print_char(letters[i]);
	}
	//print the tool buttons
	keyboard_goto_line(4);
     a78:	84 e0       	ldi	r24, 0x04	; 4
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <keyboard_goto_line>
	print_options_bar();
     a80:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <print_options_bar>

	//reset y-position
	pos.y = 0;
     a84:	10 92 c1 03 	sts	0x03C1, r1
     a88:	10 92 c0 03 	sts	0x03C0, r1

}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	1f 91       	pop	r17
     a92:	0f 91       	pop	r16
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	08 95       	ret

00000a9a <keyboard_print>:

void keyboard_print() {
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
	keyboard_goto_line(0);
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <keyboard_goto_line>
	pos.y = 0;
     ab2:	10 92 c1 03 	sts	0x03C1, r1
     ab6:	10 92 c0 03 	sts	0x03C0, r1
     aba:	01 e0       	ldi	r16, 0x01	; 1
     abc:	10 e0       	ldi	r17, 0x00	; 0
     abe:	c0 e0       	ldi	r28, 0x00	; 0
     ac0:	d0 e0       	ldi	r29, 0x00	; 0
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
     ac2:	0f 2e       	mov	r0, r31
     ac4:	fc e0       	ldi	r31, 0x0C	; 12
     ac6:	ef 2e       	mov	r14, r31
     ac8:	f1 2c       	mov	r15, r1
     aca:	f0 2d       	mov	r31, r0
			keyboard_goto_line(++pos.y);
     acc:	0f 2e       	mov	r0, r31
     ace:	f0 ec       	ldi	r31, 0xC0	; 192
     ad0:	cf 2e       	mov	r12, r31
     ad2:	f3 e0       	ldi	r31, 0x03	; 3
     ad4:	df 2e       	mov	r13, r31
     ad6:	f0 2d       	mov	r31, r0
     ad8:	03 c0       	rjmp	.+6      	; 0xae0 <keyboard_print+0x46>
     ada:	21 96       	adiw	r28, 0x01	; 1
     adc:	0f 5f       	subi	r16, 0xFF	; 255
     ade:	1f 4f       	sbci	r17, 0xFF	; 255
void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
     ae0:	ce 01       	movw	r24, r28
     ae2:	b7 01       	movw	r22, r14
     ae4:	0e 94 0d 0b 	call	0x161a	; 0x161a <__divmodhi4>
     ae8:	89 2b       	or	r24, r25
     aea:	51 f4       	brne	.+20     	; 0xb00 <keyboard_print+0x66>
     aec:	20 97       	sbiw	r28, 0x00	; 0
     aee:	d9 f0       	breq	.+54     	; 0xb26 <keyboard_print+0x8c>
			keyboard_goto_line(++pos.y);
     af0:	f6 01       	movw	r30, r12
     af2:	80 81       	ld	r24, Z
     af4:	91 81       	ldd	r25, Z+1	; 0x01
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	91 83       	std	Z+1, r25	; 0x01
     afa:	80 83       	st	Z, r24
     afc:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <keyboard_goto_line>
		}
		OLED_print_char(letters[i]);
     b00:	e0 91 24 01 	lds	r30, 0x0124
     b04:	f0 91 25 01 	lds	r31, 0x0125
     b08:	ec 0f       	add	r30, r28
     b0a:	fd 1f       	adc	r31, r29
     b0c:	80 81       	ld	r24, Z
     b0e:	0e 94 ba 09 	call	0x1374	; 0x1374 <OLED_print_char>

void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
     b12:	00 33       	cpi	r16, 0x30	; 48
     b14:	11 05       	cpc	r17, r1
     b16:	0c f3       	brlt	.-62     	; 0xada <keyboard_print+0x40>
			keyboard_goto_line(++pos.y);
		}
		OLED_print_char(letters[i]);
	}
	//print the tool buttons
	keyboard_goto_line(4);
     b18:	84 e0       	ldi	r24, 0x04	; 4
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <keyboard_goto_line>
	print_options_bar();
     b20:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <print_options_bar>
     b24:	0a c0       	rjmp	.+20     	; 0xb3a <keyboard_print+0xa0>
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
			keyboard_goto_line(++pos.y);
		}
		OLED_print_char(letters[i]);
     b26:	e0 91 24 01 	lds	r30, 0x0124
     b2a:	f0 91 25 01 	lds	r31, 0x0125
     b2e:	ec 0f       	add	r30, r28
     b30:	fd 1f       	adc	r31, r29
     b32:	80 81       	ld	r24, Z
     b34:	0e 94 ba 09 	call	0x1374	; 0x1374 <OLED_print_char>
     b38:	d0 cf       	rjmp	.-96     	; 0xada <keyboard_print+0x40>
	//print the tool buttons
	keyboard_goto_line(4);
	print_options_bar();


}
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	df 90       	pop	r13
     b48:	cf 90       	pop	r12
     b4a:	08 95       	ret

00000b4c <toggle_shift>:

void toggle_shift() {
	if (letters == LETTERS_SMALL) {
     b4c:	80 91 24 01 	lds	r24, 0x0124
     b50:	90 91 25 01 	lds	r25, 0x0125
     b54:	8a 5d       	subi	r24, 0xDA	; 218
     b56:	92 40       	sbci	r25, 0x02	; 2
     b58:	39 f4       	brne	.+14     	; 0xb68 <toggle_shift+0x1c>
		letters = LETTERS_BIG;
     b5a:	8a ea       	ldi	r24, 0xAA	; 170
     b5c:	92 e0       	ldi	r25, 0x02	; 2
     b5e:	90 93 25 01 	sts	0x0125, r25
     b62:	80 93 24 01 	sts	0x0124, r24
     b66:	06 c0       	rjmp	.+12     	; 0xb74 <toggle_shift+0x28>
	}
	else {
		letters = LETTERS_SMALL;
     b68:	8a ed       	ldi	r24, 0xDA	; 218
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	90 93 25 01 	sts	0x0125, r25
     b70:	80 93 24 01 	sts	0x0124, r24
	}

	keyboard_print();
     b74:	0e 94 4d 05 	call	0xa9a	; 0xa9a <keyboard_print>
	keyboard_goto_line(4);
     b78:	84 e0       	ldi	r24, 0x04	; 4
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <keyboard_goto_line>
	print_shift_inverse();
     b80:	0e 94 24 04 	call	0x848	; 0x848 <print_shift_inverse>
		
	pos.y = 4;
     b84:	84 e0       	ldi	r24, 0x04	; 4
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	90 93 c1 03 	sts	0x03C1, r25
     b8c:	80 93 c0 03 	sts	0x03C0, r24
	pos.x = 0;
     b90:	10 92 bf 03 	sts	0x03BF, r1
     b94:	10 92 be 03 	sts	0x03BE, r1
     b98:	08 95       	ret

00000b9a <append>:
}

void append(char c){
	int len = strlen(written_string);
     b9a:	a0 91 22 01 	lds	r26, 0x0122
     b9e:	b0 91 23 01 	lds	r27, 0x0123
     ba2:	fd 01       	movw	r30, r26
     ba4:	01 90       	ld	r0, Z+
     ba6:	00 20       	and	r0, r0
     ba8:	e9 f7       	brne	.-6      	; 0xba4 <append+0xa>
     baa:	31 97       	sbiw	r30, 0x01	; 1
	written_string[len] = c;
     bac:	9f 01       	movw	r18, r30
     bae:	2a 1b       	sub	r18, r26
     bb0:	3b 0b       	sbc	r19, r27
     bb2:	80 83       	st	Z, r24
	written_string[len+1] = '\0';
     bb4:	80 91 22 01 	lds	r24, 0x0122
     bb8:	90 91 23 01 	lds	r25, 0x0123
     bbc:	fc 01       	movw	r30, r24
     bbe:	e2 0f       	add	r30, r18
     bc0:	f3 1f       	adc	r31, r19
     bc2:	11 82       	std	Z+1, r1	; 0x01
     bc4:	08 95       	ret

00000bc6 <keyboard_run>:
}

void keyboard_run() {
     bc6:	2f 92       	push	r2
     bc8:	3f 92       	push	r3
     bca:	4f 92       	push	r4
     bcc:	5f 92       	push	r5
     bce:	6f 92       	push	r6
     bd0:	7f 92       	push	r7
     bd2:	8f 92       	push	r8
     bd4:	9f 92       	push	r9
     bd6:	af 92       	push	r10
     bd8:	bf 92       	push	r11
     bda:	cf 92       	push	r12
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
	//printf("RESTART\n");
	keyboard_init();
     bea:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <keyboard_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bee:	2f ef       	ldi	r18, 0xFF	; 255
     bf0:	3f e7       	ldi	r19, 0x7F	; 127
     bf2:	47 e0       	ldi	r20, 0x07	; 7
     bf4:	21 50       	subi	r18, 0x01	; 1
     bf6:	30 40       	sbci	r19, 0x00	; 0
     bf8:	40 40       	sbci	r20, 0x00	; 0
     bfa:	e1 f7       	brne	.-8      	; 0xbf4 <keyboard_run+0x2e>
     bfc:	00 c0       	rjmp	.+0      	; 0xbfe <keyboard_run+0x38>
     bfe:	00 00       	nop
	_delay_ms(500);
	int old_y=0;
	int old_x=0;
     c00:	e1 2c       	mov	r14, r1
     c02:	f1 2c       	mov	r15, r1

void keyboard_run() {
	//printf("RESTART\n");
	keyboard_init();
	_delay_ms(500);
	int old_y=0;
     c04:	00 e0       	ldi	r16, 0x00	; 0
     c06:	10 e0       	ldi	r17, 0x00	; 0
			old_y = pos.y--;
		}
		else if (direction == LEFT && pos.x > 0) {
			old_x = pos.x--;
		}
		else if (direction == RIGHT && pos.x < LINE_LENGTH-1) {
     c08:	ce eb       	ldi	r28, 0xBE	; 190
     c0a:	d3 e0       	ldi	r29, 0x03	; 3
			
			if(pos.y == 4){
     c0c:	0f 2e       	mov	r0, r31
     c0e:	f0 ec       	ldi	r31, 0xC0	; 192
     c10:	cf 2e       	mov	r12, r31
     c12:	f3 e0       	ldi	r31, 0x03	; 3
     c14:	df 2e       	mov	r13, r31
     c16:	f0 2d       	mov	r31, r0
					old_x = 2;
					pos.x = 8;
				}
				else if(pos.x < 10){
					old_x = 8;
					pos.x = 10;	
     c18:	0f 2e       	mov	r0, r31
     c1a:	fa e0       	ldi	r31, 0x0A	; 10
     c1c:	6f 2e       	mov	r6, r31
     c1e:	71 2c       	mov	r7, r1
     c20:	f0 2d       	mov	r31, r0
				 else if (pos.x < 8){
					old_x = 2;
					pos.x = 8;
				}
				else if(pos.x < 10){
					old_x = 8;
     c22:	31 2c       	mov	r3, r1
		}
		else if (direction == RIGHT && pos.x < LINE_LENGTH-1) {
			
			if(pos.y == 4){
				if (pos.x < 2){
					old_x = 0;
     c24:	21 2c       	mov	r2, r1
			}
		}

		//Add logic to handle the bottom taskbar
		if (old_y != pos.y || old_x != pos.x) {
			printf("old_y: %d, y: %d, old_x: %d, old_y %d\n", old_y, pos.y, old_x, pos.x);
     c26:	0f 2e       	mov	r0, r31
     c28:	f3 e8       	ldi	r31, 0x83	; 131
     c2a:	8f 2e       	mov	r8, r31
     c2c:	f2 e0       	ldi	r31, 0x02	; 2
     c2e:	9f 2e       	mov	r9, r31
     c30:	f0 2d       	mov	r31, r0
			position_moved = 1;
     c32:	44 24       	eor	r4, r4
     c34:	43 94       	inc	r4
     c36:	51 2c       	mov	r5, r1
	int old_x=0;
	JOY_direction_t direction;
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
     c38:	b5 c1       	rjmp	.+874    	; 0xfa4 <keyboard_run+0x3de>
		//Check if we switch letter
		direction = JOY_getDirection();
     c3a:	0e 94 92 03 	call	0x724	; 0x724 <JOY_getDirection>
		if (direction == NEUTRAL);
     c3e:	84 30       	cpi	r24, 0x04	; 4
     c40:	09 f4       	brne	.+2      	; 0xc44 <keyboard_run+0x7e>
     c42:	5c c0       	rjmp	.+184    	; 0xcfc <keyboard_run+0x136>
		else if (direction == DOWN && pos.y < 4) {
     c44:	83 30       	cpi	r24, 0x03	; 3
     c46:	61 f4       	brne	.+24     	; 0xc60 <keyboard_run+0x9a>
     c48:	f6 01       	movw	r30, r12
     c4a:	20 81       	ld	r18, Z
     c4c:	31 81       	ldd	r19, Z+1	; 0x01
     c4e:	24 30       	cpi	r18, 0x04	; 4
     c50:	31 05       	cpc	r19, r1
     c52:	24 f5       	brge	.+72     	; 0xc9c <keyboard_run+0xd6>
			old_y = pos.y++;
     c54:	c9 01       	movw	r24, r18
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	91 83       	std	Z+1, r25	; 0x01
     c5a:	80 83       	st	Z, r24
     c5c:	89 01       	movw	r16, r18
     c5e:	4e c0       	rjmp	.+156    	; 0xcfc <keyboard_run+0x136>
		}
		else if (direction == UP && pos.y > 0) {
     c60:	82 30       	cpi	r24, 0x02	; 2
     c62:	71 f4       	brne	.+28     	; 0xc80 <keyboard_run+0xba>
     c64:	f6 01       	movw	r30, r12
     c66:	80 81       	ld	r24, Z
     c68:	91 81       	ldd	r25, Z+1	; 0x01
     c6a:	18 16       	cp	r1, r24
     c6c:	19 06       	cpc	r1, r25
     c6e:	0c f0       	brlt	.+2      	; 0xc72 <keyboard_run+0xac>
     c70:	45 c0       	rjmp	.+138    	; 0xcfc <keyboard_run+0x136>
			old_y = pos.y--;
     c72:	9c 01       	movw	r18, r24
     c74:	21 50       	subi	r18, 0x01	; 1
     c76:	31 09       	sbc	r19, r1
     c78:	31 83       	std	Z+1, r19	; 0x01
     c7a:	20 83       	st	Z, r18
     c7c:	8c 01       	movw	r16, r24
     c7e:	3e c0       	rjmp	.+124    	; 0xcfc <keyboard_run+0x136>
		}
		else if (direction == LEFT && pos.x > 0) {
     c80:	81 11       	cpse	r24, r1
     c82:	0c c0       	rjmp	.+24     	; 0xc9c <keyboard_run+0xd6>
     c84:	88 81       	ld	r24, Y
     c86:	99 81       	ldd	r25, Y+1	; 0x01
     c88:	18 16       	cp	r1, r24
     c8a:	19 06       	cpc	r1, r25
     c8c:	bc f5       	brge	.+110    	; 0xcfc <keyboard_run+0x136>
			old_x = pos.x--;
     c8e:	9c 01       	movw	r18, r24
     c90:	21 50       	subi	r18, 0x01	; 1
     c92:	31 09       	sbc	r19, r1
     c94:	39 83       	std	Y+1, r19	; 0x01
     c96:	28 83       	st	Y, r18
     c98:	7c 01       	movw	r14, r24
     c9a:	30 c0       	rjmp	.+96     	; 0xcfc <keyboard_run+0x136>
		}
		else if (direction == RIGHT && pos.x < LINE_LENGTH-1) {
     c9c:	81 30       	cpi	r24, 0x01	; 1
     c9e:	71 f5       	brne	.+92     	; 0xcfc <keyboard_run+0x136>
     ca0:	88 81       	ld	r24, Y
     ca2:	99 81       	ldd	r25, Y+1	; 0x01
     ca4:	8b 30       	cpi	r24, 0x0B	; 11
     ca6:	91 05       	cpc	r25, r1
     ca8:	4c f5       	brge	.+82     	; 0xcfc <keyboard_run+0x136>
			
			if(pos.y == 4){
     caa:	f6 01       	movw	r30, r12
     cac:	20 81       	ld	r18, Z
     cae:	31 81       	ldd	r19, Z+1	; 0x01
     cb0:	24 30       	cpi	r18, 0x04	; 4
     cb2:	31 05       	cpc	r19, r1
     cb4:	e9 f4       	brne	.+58     	; 0xcf0 <keyboard_run+0x12a>
				if (pos.x < 2){
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	91 05       	cpc	r25, r1
     cba:	34 f4       	brge	.+12     	; 0xcc8 <keyboard_run+0x102>
					old_x = 0;
					pos.x = 2;
     cbc:	f2 e0       	ldi	r31, 0x02	; 2
     cbe:	f8 83       	st	Y, r31
     cc0:	19 82       	std	Y+1, r1	; 0x01
		}
		else if (direction == RIGHT && pos.x < LINE_LENGTH-1) {
			
			if(pos.y == 4){
				if (pos.x < 2){
					old_x = 0;
     cc2:	e1 2c       	mov	r14, r1
     cc4:	f2 2c       	mov	r15, r2
     cc6:	1a c0       	rjmp	.+52     	; 0xcfc <keyboard_run+0x136>
					pos.x = 2;
				}
				 else if (pos.x < 8){
     cc8:	88 30       	cpi	r24, 0x08	; 8
     cca:	91 05       	cpc	r25, r1
     ccc:	44 f4       	brge	.+16     	; 0xcde <keyboard_run+0x118>
					old_x = 2;
					pos.x = 8;
     cce:	28 e0       	ldi	r18, 0x08	; 8
     cd0:	28 83       	st	Y, r18
     cd2:	39 82       	std	Y+1, r3	; 0x01
				if (pos.x < 2){
					old_x = 0;
					pos.x = 2;
				}
				 else if (pos.x < 8){
					old_x = 2;
     cd4:	68 94       	set
     cd6:	ee 24       	eor	r14, r14
     cd8:	e1 f8       	bld	r14, 1
     cda:	f1 2c       	mov	r15, r1
     cdc:	0f c0       	rjmp	.+30     	; 0xcfc <keyboard_run+0x136>
					pos.x = 8;
				}
				else if(pos.x < 10){
     cde:	0a 97       	sbiw	r24, 0x0a	; 10
     ce0:	6c f4       	brge	.+26     	; 0xcfc <keyboard_run+0x136>
					old_x = 8;
					pos.x = 10;	
     ce2:	79 82       	std	Y+1, r7	; 0x01
     ce4:	68 82       	st	Y, r6
				 else if (pos.x < 8){
					old_x = 2;
					pos.x = 8;
				}
				else if(pos.x < 10){
					old_x = 8;
     ce6:	68 94       	set
     ce8:	ee 24       	eor	r14, r14
     cea:	e3 f8       	bld	r14, 3
     cec:	f3 2c       	mov	r15, r3
     cee:	06 c0       	rjmp	.+12     	; 0xcfc <keyboard_run+0x136>
					pos.x = 10;	
				}
			}
			else{
				old_x = pos.x++;
     cf0:	9c 01       	movw	r18, r24
     cf2:	2f 5f       	subi	r18, 0xFF	; 255
     cf4:	3f 4f       	sbci	r19, 0xFF	; 255
     cf6:	39 83       	std	Y+1, r19	; 0x01
     cf8:	28 83       	st	Y, r18
     cfa:	7c 01       	movw	r14, r24
			}
		}

		//Add logic to handle the bottom taskbar
		if (old_y != pos.y || old_x != pos.x) {
     cfc:	f6 01       	movw	r30, r12
     cfe:	80 81       	ld	r24, Z
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	80 17       	cp	r24, r16
     d04:	91 07       	cpc	r25, r17
     d06:	31 f4       	brne	.+12     	; 0xd14 <keyboard_run+0x14e>
     d08:	28 81       	ld	r18, Y
     d0a:	39 81       	ldd	r19, Y+1	; 0x01
     d0c:	2e 15       	cp	r18, r14
     d0e:	3f 05       	cpc	r19, r15
     d10:	09 f4       	brne	.+2      	; 0xd14 <keyboard_run+0x14e>
     d12:	bd c0       	rjmp	.+378    	; 0xe8e <keyboard_run+0x2c8>
			printf("old_y: %d, y: %d, old_x: %d, old_y %d\n", old_y, pos.y, old_x, pos.x);
     d14:	29 81       	ldd	r18, Y+1	; 0x01
     d16:	2f 93       	push	r18
     d18:	28 81       	ld	r18, Y
     d1a:	2f 93       	push	r18
     d1c:	ff 92       	push	r15
     d1e:	ef 92       	push	r14
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	1f 93       	push	r17
     d26:	0f 93       	push	r16
     d28:	9f 92       	push	r9
     d2a:	8f 92       	push	r8
     d2c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <printf>
			position_moved = 1;
			//unselect the old letter and select the new one

			//old item is a letter
			if (old_y < 4) {
     d30:	2d b7       	in	r18, 0x3d	; 61
     d32:	3e b7       	in	r19, 0x3e	; 62
     d34:	26 5f       	subi	r18, 0xF6	; 246
     d36:	3f 4f       	sbci	r19, 0xFF	; 255
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	3e bf       	out	0x3e, r19	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	2d bf       	out	0x3d, r18	; 61
     d42:	04 30       	cpi	r16, 0x04	; 4
     d44:	11 05       	cpc	r17, r1
     d46:	d4 f4       	brge	.+52     	; 0xd7c <keyboard_run+0x1b6>
				keyboard_goto(old_y, old_x);
     d48:	b7 01       	movw	r22, r14
     d4a:	c8 01       	movw	r24, r16
     d4c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <keyboard_goto>
				OLED_print_char(letters[old_y * LINE_LENGTH + old_x]);
     d50:	f8 01       	movw	r30, r16
     d52:	ee 0f       	add	r30, r30
     d54:	ff 1f       	adc	r31, r31
     d56:	0e 0f       	add	r16, r30
     d58:	1f 1f       	adc	r17, r31
     d5a:	f8 01       	movw	r30, r16
     d5c:	ee 0f       	add	r30, r30
     d5e:	ff 1f       	adc	r31, r31
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	ee 0e       	add	r14, r30
     d66:	ff 1e       	adc	r15, r31
     d68:	e0 91 24 01 	lds	r30, 0x0124
     d6c:	f0 91 25 01 	lds	r31, 0x0125
     d70:	ee 0d       	add	r30, r14
     d72:	ff 1d       	adc	r31, r15
     d74:	80 81       	ld	r24, Z
     d76:	0e 94 ba 09 	call	0x1374	; 0x1374 <OLED_print_char>
     d7a:	2a c0       	rjmp	.+84     	; 0xdd0 <keyboard_run+0x20a>
			}

			//old item is in toolbar
			else {
				if (old_x < 2) {
     d7c:	32 e0       	ldi	r19, 0x02	; 2
     d7e:	e3 16       	cp	r14, r19
     d80:	f1 04       	cpc	r15, r1
     d82:	44 f4       	brge	.+16     	; 0xd94 <keyboard_run+0x1ce>
					old_x = 0;
					keyboard_goto(old_y, old_x);
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	72 2d       	mov	r23, r2
     d88:	c8 01       	movw	r24, r16
     d8a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <keyboard_goto>
					print_shift();
     d8e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <print_shift>
     d92:	1e c0       	rjmp	.+60     	; 0xdd0 <keyboard_run+0x20a>
				}
				else if (old_x < 8) {
     d94:	48 e0       	ldi	r20, 0x08	; 8
     d96:	e4 16       	cp	r14, r20
     d98:	f1 04       	cpc	r15, r1
     d9a:	44 f4       	brge	.+16     	; 0xdac <keyboard_run+0x1e6>
					old_x = 2; //start of spacebar
					keyboard_goto(old_y, old_x);
     d9c:	62 e0       	ldi	r22, 0x02	; 2
     d9e:	70 e0       	ldi	r23, 0x00	; 0
     da0:	c8 01       	movw	r24, r16
     da2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <keyboard_goto>
					print_spacebar();
     da6:	0e 94 9d 04 	call	0x93a	; 0x93a <print_spacebar>
     daa:	12 c0       	rjmp	.+36     	; 0xdd0 <keyboard_run+0x20a>
				}
				else if (old_x < 10) {
     dac:	8a e0       	ldi	r24, 0x0A	; 10
     dae:	e8 16       	cp	r14, r24
     db0:	f1 04       	cpc	r15, r1
     db2:	44 f4       	brge	.+16     	; 0xdc4 <keyboard_run+0x1fe>
					old_x = 8; //start of left arrow
					keyboard_goto(old_y, old_x);
     db4:	68 e0       	ldi	r22, 0x08	; 8
     db6:	73 2d       	mov	r23, r3
     db8:	c8 01       	movw	r24, r16
     dba:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <keyboard_goto>
					print_left_arrow();
     dbe:	0e 94 49 04 	call	0x892	; 0x892 <print_left_arrow>
     dc2:	06 c0       	rjmp	.+12     	; 0xdd0 <keyboard_run+0x20a>
				}
				else {
					old_x = 10; //start of right arrow
					keyboard_goto(old_y, old_x);
     dc4:	b3 01       	movw	r22, r6
     dc6:	c8 01       	movw	r24, r16
     dc8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <keyboard_goto>
					print_right_arrow();
     dcc:	0e 94 73 04 	call	0x8e6	; 0x8e6 <print_right_arrow>
				}
			}
			//selected item is a letter
			if (pos.y < 4) {
     dd0:	f6 01       	movw	r30, r12
     dd2:	80 81       	ld	r24, Z
     dd4:	91 81       	ldd	r25, Z+1	; 0x01
     dd6:	84 30       	cpi	r24, 0x04	; 4
     dd8:	91 05       	cpc	r25, r1
     dda:	14 f5       	brge	.+68     	; 0xe20 <keyboard_run+0x25a>
				keyboard_goto(pos.y,pos.x);
     ddc:	68 81       	ld	r22, Y
     dde:	79 81       	ldd	r23, Y+1	; 0x01
     de0:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <keyboard_goto>
				OLED_print_char_inverse(letters[pos.y * LINE_LENGTH + pos.x]);
     de4:	80 91 c0 03 	lds	r24, 0x03C0
     de8:	90 91 c1 03 	lds	r25, 0x03C1
     dec:	fc 01       	movw	r30, r24
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	8e 0f       	add	r24, r30
     df4:	9f 1f       	adc	r25, r31
     df6:	fc 01       	movw	r30, r24
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	20 91 be 03 	lds	r18, 0x03BE
     e04:	30 91 bf 03 	lds	r19, 0x03BF
     e08:	e2 0f       	add	r30, r18
     e0a:	f3 1f       	adc	r31, r19
     e0c:	80 91 24 01 	lds	r24, 0x0124
     e10:	90 91 25 01 	lds	r25, 0x0125
     e14:	e8 0f       	add	r30, r24
     e16:	f9 1f       	adc	r31, r25
     e18:	80 81       	ld	r24, Z
     e1a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <OLED_print_char_inverse>
     e1e:	2f c0       	rjmp	.+94     	; 0xe7e <keyboard_run+0x2b8>
			}

			//selected menu item is in toolbar
			else {
				if (pos.x < 2) {
     e20:	28 81       	ld	r18, Y
     e22:	39 81       	ldd	r19, Y+1	; 0x01
     e24:	22 30       	cpi	r18, 0x02	; 2
     e26:	31 05       	cpc	r19, r1
     e28:	4c f4       	brge	.+18     	; 0xe3c <keyboard_run+0x276>
					pos.x = 0;
     e2a:	19 82       	std	Y+1, r1	; 0x01
     e2c:	18 82       	st	Y, r1
					keyboard_goto(pos.y, pos.x);
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	72 2d       	mov	r23, r2
     e32:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <keyboard_goto>
					print_shift_inverse();
     e36:	0e 94 24 04 	call	0x848	; 0x848 <print_shift_inverse>
     e3a:	21 c0       	rjmp	.+66     	; 0xe7e <keyboard_run+0x2b8>
				}
				else if (pos.x < 8) {
     e3c:	28 30       	cpi	r18, 0x08	; 8
     e3e:	31 05       	cpc	r19, r1
     e40:	54 f4       	brge	.+20     	; 0xe56 <keyboard_run+0x290>
					pos.x = 2; //start of spacebar
     e42:	f2 e0       	ldi	r31, 0x02	; 2
     e44:	f8 83       	st	Y, r31
     e46:	19 82       	std	Y+1, r1	; 0x01
					keyboard_goto(pos.y, pos.x);
     e48:	62 e0       	ldi	r22, 0x02	; 2
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <keyboard_goto>
					print_spacebar_inverse();
     e50:	0e 94 bb 04 	call	0x976	; 0x976 <print_spacebar_inverse>
     e54:	14 c0       	rjmp	.+40     	; 0xe7e <keyboard_run+0x2b8>
				}
				else if (pos.x < 10) {
     e56:	2a 30       	cpi	r18, 0x0A	; 10
     e58:	31 05       	cpc	r19, r1
     e5a:	54 f4       	brge	.+20     	; 0xe70 <keyboard_run+0x2aa>
					pos.x = 8; //start of left arrow
     e5c:	28 e0       	ldi	r18, 0x08	; 8
     e5e:	28 83       	st	Y, r18
     e60:	39 82       	std	Y+1, r3	; 0x01
					keyboard_goto(pos.y, pos.x);
     e62:	68 e0       	ldi	r22, 0x08	; 8
     e64:	73 2d       	mov	r23, r3
     e66:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <keyboard_goto>
					print_left_arrow_inverse();
     e6a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <print_left_arrow_inverse>
     e6e:	07 c0       	rjmp	.+14     	; 0xe7e <keyboard_run+0x2b8>
				}
				else {
					pos.x = 10; //start of right arrow
     e70:	79 82       	std	Y+1, r7	; 0x01
     e72:	68 82       	st	Y, r6
					keyboard_goto(pos.y, pos.x);
     e74:	b3 01       	movw	r22, r6
     e76:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <keyboard_goto>
					print_right_arrow_inverse();
     e7a:	0e 94 88 04 	call	0x910	; 0x910 <print_right_arrow_inverse>
				}
			}
			old_x = pos.x;
     e7e:	e8 80       	ld	r14, Y
     e80:	f9 80       	ldd	r15, Y+1	; 0x01
			old_y = pos.y;
     e82:	f6 01       	movw	r30, r12
     e84:	00 81       	ld	r16, Z
     e86:	11 81       	ldd	r17, Z+1	; 0x01
		}

		//Add logic to handle the bottom taskbar
		if (old_y != pos.y || old_x != pos.x) {
			printf("old_y: %d, y: %d, old_x: %d, old_y %d\n", old_y, pos.y, old_x, pos.x);
			position_moved = 1;
     e88:	a4 2c       	mov	r10, r4
     e8a:	b5 2c       	mov	r11, r5
     e8c:	03 c0       	rjmp	.+6      	; 0xe94 <keyboard_run+0x2ce>
     e8e:	8c 01       	movw	r16, r24
     e90:	a1 2c       	mov	r10, r1
     e92:	b2 2c       	mov	r11, r2
			old_y = pos.y;
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	0e 94 46 03 	call	0x68c	; 0x68c <JOY_button_pressed>
     e9a:	89 2b       	or	r24, r25
     e9c:	09 f4       	brne	.+2      	; 0xea0 <keyboard_run+0x2da>
     e9e:	45 c0       	rjmp	.+138    	; 0xf2a <keyboard_run+0x364>
			button_pressed = 1;
			if (pos.y < 4) {
     ea0:	f6 01       	movw	r30, r12
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	84 30       	cpi	r24, 0x04	; 4
     ea8:	91 05       	cpc	r25, r1
     eaa:	6c f5       	brge	.+90     	; 0xf06 <keyboard_run+0x340>
				append(letters[pos.y * LINE_LENGTH + pos.x]);
     eac:	fc 01       	movw	r30, r24
     eae:	ee 0f       	add	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	8e 0f       	add	r24, r30
     eb4:	9f 1f       	adc	r25, r31
     eb6:	fc 01       	movw	r30, r24
     eb8:	ee 0f       	add	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	20 91 be 03 	lds	r18, 0x03BE
     ec4:	30 91 bf 03 	lds	r19, 0x03BF
     ec8:	e2 0f       	add	r30, r18
     eca:	f3 1f       	adc	r31, r19
     ecc:	80 91 24 01 	lds	r24, 0x0124
     ed0:	90 91 25 01 	lds	r25, 0x0125
     ed4:	e8 0f       	add	r30, r24
     ed6:	f9 1f       	adc	r31, r25
     ed8:	80 81       	ld	r24, Z
     eda:	0e 94 cd 05 	call	0xb9a	; 0xb9a <append>
				OLED_home();
     ede:	0e 94 13 0a 	call	0x1426	; 0x1426 <OLED_home>
				//printf("APPEND written string: %s", written_string);
				//replace with a print function that remembers which part is printed, used with < >
				fprintf(OLED, "%s", written_string);
     ee2:	66 e2       	ldi	r22, 0x26	; 38
     ee4:	71 e0       	ldi	r23, 0x01	; 1
     ee6:	80 91 22 01 	lds	r24, 0x0122
     eea:	90 91 23 01 	lds	r25, 0x0123
     eee:	0e 94 b9 0c 	call	0x1972	; 0x1972 <fputs>
				keyboard_goto(pos.y, pos.x);
     ef2:	68 81       	ld	r22, Y
     ef4:	79 81       	ldd	r23, Y+1	; 0x01
     ef6:	f6 01       	movw	r30, r12
     ef8:	80 81       	ld	r24, Z
     efa:	91 81       	ldd	r25, Z+1	; 0x01
     efc:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <keyboard_goto>
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
			button_pressed = 1;
     f00:	84 2d       	mov	r24, r4
     f02:	95 2d       	mov	r25, r5
     f04:	39 c0       	rjmp	.+114    	; 0xf78 <keyboard_run+0x3b2>
				//replace with a print function that remembers which part is printed, used with < >
				fprintf(OLED, "%s", written_string);
				keyboard_goto(pos.y, pos.x);
			}
			else {
				if(pos.x < 2){
     f06:	88 81       	ld	r24, Y
     f08:	99 81       	ldd	r25, Y+1	; 0x01
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	91 05       	cpc	r25, r1
     f0e:	2c f4       	brge	.+10     	; 0xf1a <keyboard_run+0x354>
					toggle_shift();
     f10:	0e 94 a6 05 	call	0xb4c	; 0xb4c <toggle_shift>
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
			button_pressed = 1;
     f14:	84 2d       	mov	r24, r4
     f16:	95 2d       	mov	r25, r5
     f18:	2f c0       	rjmp	.+94     	; 0xf78 <keyboard_run+0x3b2>
			}
			else {
				if(pos.x < 2){
					toggle_shift();
				}
				else if(pos.x < 8){
     f1a:	08 97       	sbiw	r24, 0x08	; 8
     f1c:	44 f5       	brge	.+80     	; 0xf6e <keyboard_run+0x3a8>
					append(32);
     f1e:	80 e2       	ldi	r24, 0x20	; 32
     f20:	0e 94 cd 05 	call	0xb9a	; 0xb9a <append>
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
			button_pressed = 1;
     f24:	84 2d       	mov	r24, r4
     f26:	95 2d       	mov	r25, r5
     f28:	27 c0       	rjmp	.+78     	; 0xf78 <keyboard_run+0x3b2>
				}
			}
		}

		//check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	0e 94 46 03 	call	0x68c	; 0x68c <JOY_button_pressed>
     f30:	89 2b       	or	r24, r25
     f32:	01 f1       	breq	.+64     	; 0xf74 <keyboard_run+0x3ae>
			button_pressed = 1;
			written_string[strlen(written_string) - 1] = 0;
     f34:	e0 91 22 01 	lds	r30, 0x0122
     f38:	f0 91 23 01 	lds	r31, 0x0123
     f3c:	01 90       	ld	r0, Z+
     f3e:	00 20       	and	r0, r0
     f40:	e9 f7       	brne	.-6      	; 0xf3c <keyboard_run+0x376>
     f42:	32 97       	sbiw	r30, 0x02	; 2
     f44:	10 82       	st	Z, r1
			OLED_home();
     f46:	0e 94 13 0a 	call	0x1426	; 0x1426 <OLED_home>
			//printf("REMOVE written string: %s", written_string);
			fprintf(OLED, "%s", written_string);
     f4a:	66 e2       	ldi	r22, 0x26	; 38
     f4c:	71 e0       	ldi	r23, 0x01	; 1
     f4e:	80 91 22 01 	lds	r24, 0x0122
     f52:	90 91 23 01 	lds	r25, 0x0123
     f56:	0e 94 b9 0c 	call	0x1972	; 0x1972 <fputs>
			keyboard_goto(pos.y, pos.x);
     f5a:	68 81       	ld	r22, Y
     f5c:	79 81       	ldd	r23, Y+1	; 0x01
     f5e:	f6 01       	movw	r30, r12
     f60:	80 81       	ld	r24, Z
     f62:	91 81       	ldd	r25, Z+1	; 0x01
     f64:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <keyboard_goto>
			}
		}

		//check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
			button_pressed = 1;
     f68:	84 2d       	mov	r24, r4
     f6a:	95 2d       	mov	r25, r5
     f6c:	05 c0       	rjmp	.+10     	; 0xf78 <keyboard_run+0x3b2>
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
			button_pressed = 1;
     f6e:	84 2d       	mov	r24, r4
     f70:	95 2d       	mov	r25, r5
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <keyboard_run+0x3b2>
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	92 2d       	mov	r25, r2
			//printf("REMOVE written string: %s", written_string);
			fprintf(OLED, "%s", written_string);
			keyboard_goto(pos.y, pos.x);
		}
		
		if(position_moved){
     f78:	ab 28       	or	r10, r11
     f7a:	49 f0       	breq	.+18     	; 0xf8e <keyboard_run+0x3c8>
     f7c:	ff ef       	ldi	r31, 0xFF	; 255
     f7e:	2f eb       	ldi	r18, 0xBF	; 191
     f80:	33 e0       	ldi	r19, 0x03	; 3
     f82:	f1 50       	subi	r31, 0x01	; 1
     f84:	20 40       	sbci	r18, 0x00	; 0
     f86:	30 40       	sbci	r19, 0x00	; 0
     f88:	e1 f7       	brne	.-8      	; 0xf82 <keyboard_run+0x3bc>
     f8a:	00 c0       	rjmp	.+0      	; 0xf8c <keyboard_run+0x3c6>
     f8c:	00 00       	nop
			position_moved = 0;
			_delay_ms(250);
		}
		if(button_pressed){
     f8e:	89 2b       	or	r24, r25
     f90:	49 f0       	breq	.+18     	; 0xfa4 <keyboard_run+0x3de>
     f92:	4f ef       	ldi	r20, 0xFF	; 255
     f94:	8f e7       	ldi	r24, 0x7F	; 127
     f96:	97 e0       	ldi	r25, 0x07	; 7
     f98:	41 50       	subi	r20, 0x01	; 1
     f9a:	80 40       	sbci	r24, 0x00	; 0
     f9c:	90 40       	sbci	r25, 0x00	; 0
     f9e:	e1 f7       	brne	.-8      	; 0xf98 <keyboard_run+0x3d2>
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <keyboard_run+0x3dc>
     fa2:	00 00       	nop
	int old_x=0;
	JOY_direction_t direction;
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	0e 94 46 03 	call	0x68c	; 0x68c <JOY_button_pressed>
     faa:	89 2b       	or	r24, r25
     fac:	09 f4       	brne	.+2      	; 0xfb0 <keyboard_run+0x3ea>
     fae:	45 ce       	rjmp	.-886    	; 0xc3a <keyboard_run+0x74>
		if(button_pressed){
			button_pressed = 0;
			_delay_ms(500);
		}
	}
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	df 90       	pop	r13
     fbe:	cf 90       	pop	r12
     fc0:	bf 90       	pop	r11
     fc2:	af 90       	pop	r10
     fc4:	9f 90       	pop	r9
     fc6:	8f 90       	pop	r8
     fc8:	7f 90       	pop	r7
     fca:	6f 90       	pop	r6
     fcc:	5f 90       	pop	r5
     fce:	4f 90       	pop	r4
     fd0:	3f 90       	pop	r3
     fd2:	2f 90       	pop	r2
     fd4:	08 95       	ret

00000fd6 <MCP2515_read>:
	}
	
	return 0;
}

char MCP2515_read(char address) {
     fd6:	cf 93       	push	r28
     fd8:	c8 2f       	mov	r28, r24
	SPI_select();
     fda:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <SPI_select>
	SPI_send(READ);
     fde:	83 e0       	ldi	r24, 0x03	; 3
     fe0:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <SPI_send>
	SPI_send(address);
     fe4:	8c 2f       	mov	r24, r28
     fe6:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <SPI_send>
	char data = SPI_read();
     fea:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <SPI_read>
     fee:	c8 2f       	mov	r28, r24
	SPI_deselect();
     ff0:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_deselect>
	return data;
	
	
}
     ff4:	8c 2f       	mov	r24, r28
     ff6:	cf 91       	pop	r28
     ff8:	08 95       	ret

00000ffa <MCP2515_bit_modify>:
	SPI_send(RTS_BASE+buffer_states);
	SPI_deselect();
}

//puts new_data in the selected reg_adress. the function assumes that you are allowed to change every bit in the register
void MCP2515_bit_modify(char reg_address, char masked_bits, char new_data) {
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	18 2f       	mov	r17, r24
    1002:	d6 2f       	mov	r29, r22
    1004:	c4 2f       	mov	r28, r20
	SPI_select();
    1006:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <SPI_select>
	SPI_send(BIT_MODIFY);
    100a:	85 e0       	ldi	r24, 0x05	; 5
    100c:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <SPI_send>
	SPI_send(reg_address);
    1010:	81 2f       	mov	r24, r17
    1012:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <SPI_send>
	SPI_send(masked_bits);
    1016:	8d 2f       	mov	r24, r29
    1018:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <SPI_send>
	SPI_send(new_data);
    101c:	8c 2f       	mov	r24, r28
    101e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <SPI_send>
	SPI_deselect();
    1022:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_deselect>
}
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	08 95       	ret

0000102e <test_function>:
volatile menu_entry* current_entry;
volatile menu_entry* selected_entry;


void test_function() {
	printf("\n\nHighscore clicked!\n\n");
    102e:	8a e0       	ldi	r24, 0x0A	; 10
    1030:	93 e0       	ldi	r25, 0x03	; 3
    1032:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <puts>
    1036:	08 95       	ret

00001038 <MENU_draw_current_menu>:
	current_entry = current_entry->parent_node;
	selected_entry = current_entry->child_node;
	MENU_draw_current_menu();
}

void MENU_draw_current_menu() {
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
	OLED_reset();
    1046:	0e 94 26 0a 	call	0x144c	; 0x144c <OLED_reset>
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
    104a:	e0 91 cc 03 	lds	r30, 0x03CC
    104e:	f0 91 cd 03 	lds	r31, 0x03CD
    1052:	c4 81       	ldd	r28, Z+4	; 0x04
    1054:	d5 81       	ldd	r29, Z+5	; 0x05
	
	while( temp_node != NULL){
    1056:	20 97       	sbiw	r28, 0x00	; 0
    1058:	61 f1       	breq	.+88     	; 0x10b2 <MENU_draw_current_menu+0x7a>
    105a:	d1 2c       	mov	r13, r1
		OLED_pos(output_row++, 0);
		if (temp_node == selected_entry) {
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
    105c:	0f 2e       	mov	r0, r31
    105e:	f0 e2       	ldi	r31, 0x20	; 32
    1060:	ef 2e       	mov	r14, r31
    1062:	f3 e0       	ldi	r31, 0x03	; 3
    1064:	ff 2e       	mov	r15, r31
    1066:	f0 2d       	mov	r31, r0
    1068:	04 e3       	ldi	r16, 0x34	; 52
    106a:	11 e0       	ldi	r17, 0x01	; 1
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
		OLED_pos(output_row++, 0);
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	8d 2d       	mov	r24, r13
    1070:	0e 94 fd 09 	call	0x13fa	; 0x13fa <OLED_pos>
		if (temp_node == selected_entry) {
    1074:	20 91 ca 03 	lds	r18, 0x03CA
    1078:	30 91 cb 03 	lds	r19, 0x03CB
    107c:	c2 17       	cp	r28, r18
    107e:	d3 07       	cpc	r29, r19
    1080:	11 f4       	brne	.+4      	; 0x1086 <MENU_draw_current_menu+0x4e>
			OLED_print_arrow();
    1082:	0e 94 bf 0a 	call	0x157e	; 0x157e <OLED_print_arrow>
		}
		fprintf(OLED, " %s", temp_node->name);
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	8f 93       	push	r24
    108a:	88 81       	ld	r24, Y
    108c:	8f 93       	push	r24
    108e:	ff 92       	push	r15
    1090:	ef 92       	push	r14
    1092:	1f 93       	push	r17
    1094:	0f 93       	push	r16
    1096:	0e 94 a7 0c 	call	0x194e	; 0x194e <fprintf>
		temp_node = temp_node -> next_sibling_node;
    109a:	0e 80       	ldd	r0, Y+6	; 0x06
    109c:	df 81       	ldd	r29, Y+7	; 0x07
    109e:	c0 2d       	mov	r28, r0
    10a0:	d3 94       	inc	r13
	OLED_reset();
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	20 97       	sbiw	r28, 0x00	; 0
    10b0:	e9 f6       	brne	.-70     	; 0x106c <MENU_draw_current_menu+0x34>
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	1f 91       	pop	r17
    10b8:	0f 91       	pop	r16
    10ba:	ff 90       	pop	r15
    10bc:	ef 90       	pop	r14
    10be:	df 90       	pop	r13
    10c0:	08 95       	ret

000010c2 <MENU_select_next>:
	MENU_draw_current_menu();
}


void MENU_select_next() {
	if (selected_entry -> next_sibling_node != NULL) {
    10c2:	e0 91 ca 03 	lds	r30, 0x03CA
    10c6:	f0 91 cb 03 	lds	r31, 0x03CB
    10ca:	86 81       	ldd	r24, Z+6	; 0x06
    10cc:	97 81       	ldd	r25, Z+7	; 0x07
    10ce:	89 2b       	or	r24, r25
    10d0:	41 f0       	breq	.+16     	; 0x10e2 <MENU_select_next+0x20>
		selected_entry = selected_entry -> next_sibling_node;
    10d2:	86 81       	ldd	r24, Z+6	; 0x06
    10d4:	97 81       	ldd	r25, Z+7	; 0x07
    10d6:	90 93 cb 03 	sts	0x03CB, r25
    10da:	80 93 ca 03 	sts	0x03CA, r24
		MENU_draw_current_menu();
    10de:	0e 94 1c 08 	call	0x1038	; 0x1038 <MENU_draw_current_menu>
    10e2:	08 95       	ret

000010e4 <MENU_select_prev>:
	}
}

void MENU_select_prev() {
	if (selected_entry -> prev_sibling_node != NULL) {
    10e4:	e0 91 ca 03 	lds	r30, 0x03CA
    10e8:	f0 91 cb 03 	lds	r31, 0x03CB
    10ec:	80 85       	ldd	r24, Z+8	; 0x08
    10ee:	91 85       	ldd	r25, Z+9	; 0x09
    10f0:	89 2b       	or	r24, r25
    10f2:	41 f0       	breq	.+16     	; 0x1104 <MENU_select_prev+0x20>
		selected_entry = selected_entry -> prev_sibling_node;
    10f4:	80 85       	ldd	r24, Z+8	; 0x08
    10f6:	91 85       	ldd	r25, Z+9	; 0x09
    10f8:	90 93 cb 03 	sts	0x03CB, r25
    10fc:	80 93 ca 03 	sts	0x03CA, r24
		MENU_draw_current_menu();
    1100:	0e 94 1c 08 	call	0x1038	; 0x1038 <MENU_draw_current_menu>
    1104:	08 95       	ret

00001106 <MENU_enter_selection>:
	}
}

void MENU_enter_selection() {
	if (selected_entry->function_ptr != NULL) {
    1106:	e0 91 ca 03 	lds	r30, 0x03CA
    110a:	f0 91 cb 03 	lds	r31, 0x03CB
    110e:	82 85       	ldd	r24, Z+10	; 0x0a
    1110:	93 85       	ldd	r25, Z+11	; 0x0b
    1112:	89 2b       	or	r24, r25
    1114:	61 f0       	breq	.+24     	; 0x112e <MENU_enter_selection+0x28>
		printf("HEI\n");
    1116:	84 e2       	ldi	r24, 0x24	; 36
    1118:	93 e0       	ldi	r25, 0x03	; 3
    111a:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <puts>
		selected_entry->function_ptr();
    111e:	e0 91 ca 03 	lds	r30, 0x03CA
    1122:	f0 91 cb 03 	lds	r31, 0x03CB
    1126:	02 84       	ldd	r0, Z+10	; 0x0a
    1128:	f3 85       	ldd	r31, Z+11	; 0x0b
    112a:	e0 2d       	mov	r30, r0
    112c:	09 95       	icall
	}
	
	if (selected_entry->child_node == NULL) return;
    112e:	e0 91 ca 03 	lds	r30, 0x03CA
    1132:	f0 91 cb 03 	lds	r31, 0x03CB
    1136:	84 81       	ldd	r24, Z+4	; 0x04
    1138:	95 81       	ldd	r25, Z+5	; 0x05
    113a:	89 2b       	or	r24, r25
    113c:	61 f0       	breq	.+24     	; 0x1156 <MENU_enter_selection+0x50>
	
	current_entry = selected_entry;
    113e:	f0 93 cd 03 	sts	0x03CD, r31
    1142:	e0 93 cc 03 	sts	0x03CC, r30
	selected_entry = current_entry->child_node;
    1146:	84 81       	ldd	r24, Z+4	; 0x04
    1148:	95 81       	ldd	r25, Z+5	; 0x05
    114a:	90 93 cb 03 	sts	0x03CB, r25
    114e:	80 93 ca 03 	sts	0x03CA, r24
	MENU_draw_current_menu();
    1152:	0e 94 1c 08 	call	0x1038	; 0x1038 <MENU_draw_current_menu>
    1156:	08 95       	ret

00001158 <MENU_go_back>:
}

void MENU_go_back() {
	if (current_entry->parent_node == NULL) return;
    1158:	e0 91 cc 03 	lds	r30, 0x03CC
    115c:	f0 91 cd 03 	lds	r31, 0x03CD
    1160:	82 81       	ldd	r24, Z+2	; 0x02
    1162:	93 81       	ldd	r25, Z+3	; 0x03
    1164:	89 2b       	or	r24, r25
    1166:	79 f0       	breq	.+30     	; 0x1186 <MENU_go_back+0x2e>
	
	current_entry = current_entry->parent_node;
    1168:	02 80       	ldd	r0, Z+2	; 0x02
    116a:	f3 81       	ldd	r31, Z+3	; 0x03
    116c:	e0 2d       	mov	r30, r0
    116e:	f0 93 cd 03 	sts	0x03CD, r31
    1172:	e0 93 cc 03 	sts	0x03CC, r30
	selected_entry = current_entry->child_node;
    1176:	84 81       	ldd	r24, Z+4	; 0x04
    1178:	95 81       	ldd	r25, Z+5	; 0x05
    117a:	90 93 cb 03 	sts	0x03CB, r25
    117e:	80 93 ca 03 	sts	0x03CA, r24
	MENU_draw_current_menu();
    1182:	0e 94 1c 08 	call	0x1038	; 0x1038 <MENU_draw_current_menu>
    1186:	08 95       	ret

00001188 <MENU_run>:
	_delay_ms(delay);
	MENU_select_prev();
}


void MENU_run() {
    1188:	cf 93       	push	r28
	bool change = false;
	if (JOY_getDirection() == DOWN) {
    118a:	0e 94 92 03 	call	0x724	; 0x724 <JOY_getDirection>
    118e:	83 30       	cpi	r24, 0x03	; 3
    1190:	21 f4       	brne	.+8      	; 0x119a <MENU_run+0x12>
		MENU_select_next();
    1192:	0e 94 61 08 	call	0x10c2	; 0x10c2 <MENU_select_next>
		change = true;
    1196:	c1 e0       	ldi	r28, 0x01	; 1
    1198:	09 c0       	rjmp	.+18     	; 0x11ac <MENU_run+0x24>
		} else if (JOY_getDirection() == UP) {
    119a:	0e 94 92 03 	call	0x724	; 0x724 <JOY_getDirection>
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	21 f4       	brne	.+8      	; 0x11aa <MENU_run+0x22>
		MENU_select_prev();
    11a2:	0e 94 72 08 	call	0x10e4	; 0x10e4 <MENU_select_prev>
		change = true;
    11a6:	c1 e0       	ldi	r28, 0x01	; 1
    11a8:	01 c0       	rjmp	.+2      	; 0x11ac <MENU_run+0x24>
	MENU_select_prev();
}


void MENU_run() {
	bool change = false;
    11aa:	c0 e0       	ldi	r28, 0x00	; 0
		} else if (JOY_getDirection() == UP) {
		MENU_select_prev();
		change = true;
	}
	
	if (JOY_button_pressed(JOY_BUTTON)) {
    11ac:	82 e0       	ldi	r24, 0x02	; 2
    11ae:	0e 94 46 03 	call	0x68c	; 0x68c <JOY_button_pressed>
    11b2:	89 2b       	or	r24, r25
    11b4:	19 f0       	breq	.+6      	; 0x11bc <MENU_run+0x34>
		MENU_enter_selection();
    11b6:	0e 94 83 08 	call	0x1106	; 0x1106 <MENU_enter_selection>
    11ba:	0a c0       	rjmp	.+20     	; 0x11d0 <MENU_run+0x48>
		change = true;
	}
	
	else if (JOY_button_pressed(LEFT_BUTTON)) {
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	0e 94 46 03 	call	0x68c	; 0x68c <JOY_button_pressed>
    11c2:	89 2b       	or	r24, r25
    11c4:	19 f0       	breq	.+6      	; 0x11cc <MENU_run+0x44>
		MENU_go_back();
    11c6:	0e 94 ac 08 	call	0x1158	; 0x1158 <MENU_go_back>
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <MENU_run+0x48>
		change = true;
	}
	
	// Make sure the selection doesn't move multiple places at once.
	if (change){
    11cc:	cc 23       	and	r28, r28
    11ce:	49 f0       	breq	.+18     	; 0x11e2 <MENU_run+0x5a>
    11d0:	22 e3       	ldi	r18, 0x32	; 50
    11d2:	83 ed       	ldi	r24, 0xD3	; 211
    11d4:	93 e0       	ldi	r25, 0x03	; 3
    11d6:	21 50       	subi	r18, 0x01	; 1
    11d8:	80 40       	sbci	r24, 0x00	; 0
    11da:	90 40       	sbci	r25, 0x00	; 0
    11dc:	e1 f7       	brne	.-8      	; 0x11d6 <MENU_run+0x4e>
    11de:	00 c0       	rjmp	.+0      	; 0x11e0 <MENU_run+0x58>
    11e0:	00 c0       	rjmp	.+0      	; 0x11e2 <MENU_run+0x5a>
		_delay_ms(255);
		change = false;
	}
}
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <add_entry>:



menu_entry* add_entry(menu_entry* parent_node, char* name, void* function_ptr){
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	ec 01       	movw	r28, r24
    11f4:	7b 01       	movw	r14, r22
    11f6:	8a 01       	movw	r16, r20
	
	// Create the new node
	menu_entry* new_entry = (menu_entry*) malloc(sizeof(menu_entry));
    11f8:	8c e0       	ldi	r24, 0x0C	; 12
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 35 0b 	call	0x166a	; 0x166a <malloc>
    1200:	dc 01       	movw	r26, r24
	new_entry->name = name;
    1202:	11 96       	adiw	r26, 0x01	; 1
    1204:	fc 92       	st	X, r15
    1206:	ee 92       	st	-X, r14
	new_entry->parent_node = parent_node;
    1208:	13 96       	adiw	r26, 0x03	; 3
    120a:	dc 93       	st	X, r29
    120c:	ce 93       	st	-X, r28
    120e:	12 97       	sbiw	r26, 0x02	; 2
	new_entry->child_node = NULL;  // A new node has no children
    1210:	15 96       	adiw	r26, 0x05	; 5
    1212:	1c 92       	st	X, r1
    1214:	1e 92       	st	-X, r1
    1216:	14 97       	sbiw	r26, 0x04	; 4
	new_entry->next_sibling_node = NULL;  // The new child is the last child
    1218:	17 96       	adiw	r26, 0x07	; 7
    121a:	1c 92       	st	X, r1
    121c:	1e 92       	st	-X, r1
    121e:	16 97       	sbiw	r26, 0x06	; 6
	new_entry->prev_sibling_node = NULL;
    1220:	19 96       	adiw	r26, 0x09	; 9
    1222:	1c 92       	st	X, r1
    1224:	1e 92       	st	-X, r1
    1226:	18 97       	sbiw	r26, 0x08	; 8
	new_entry->function_ptr = function_ptr;
    1228:	1b 96       	adiw	r26, 0x0b	; 11
    122a:	1c 93       	st	X, r17
    122c:	0e 93       	st	-X, r16
    122e:	1a 97       	sbiw	r26, 0x0a	; 10
	
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_entry;
    1230:	20 97       	sbiw	r28, 0x00	; 0
    1232:	a1 f0       	breq	.+40     	; 0x125c <add_entry+0x76>
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
    1234:	ec 81       	ldd	r30, Y+4	; 0x04
    1236:	fd 81       	ldd	r31, Y+5	; 0x05
    1238:	30 97       	sbiw	r30, 0x00	; 0
    123a:	19 f4       	brne	.+6      	; 0x1242 <add_entry+0x5c>
		parent_node->child_node = new_entry;
    123c:	9d 83       	std	Y+5, r25	; 0x05
    123e:	8c 83       	std	Y+4, r24	; 0x04
    1240:	0d c0       	rjmp	.+26     	; 0x125c <add_entry+0x76>
	else {
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
    1242:	26 81       	ldd	r18, Z+6	; 0x06
    1244:	37 81       	ldd	r19, Z+7	; 0x07
    1246:	21 15       	cp	r18, r1
    1248:	31 05       	cpc	r19, r1
    124a:	11 f0       	breq	.+4      	; 0x1250 <add_entry+0x6a>
			//printf("temp_node->next_sibling_node->name: %s\n", temp_node->next_sibling_node->name);
			temp_node = temp_node->next_sibling_node;
    124c:	f9 01       	movw	r30, r18
    124e:	f9 cf       	rjmp	.-14     	; 0x1242 <add_entry+0x5c>
		}
		
		// Bind the new node to the current last child to become the new last child.
		temp_node->next_sibling_node = new_entry;
    1250:	b7 83       	std	Z+7, r27	; 0x07
    1252:	a6 83       	std	Z+6, r26	; 0x06
		new_entry->prev_sibling_node = temp_node;
    1254:	19 96       	adiw	r26, 0x09	; 9
    1256:	fc 93       	st	X, r31
    1258:	ee 93       	st	-X, r30
    125a:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	// Parent/child/sibling bindings complete. Return the new node.
	return new_entry;
    125c:	cd 01       	movw	r24, r26
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	08 95       	ret

0000126c <MENU_init>:

void test_function() {
	printf("\n\nHighscore clicked!\n\n");
}

void MENU_init() {
    126c:	cf 92       	push	r12
    126e:	df 92       	push	r13
    1270:	ef 92       	push	r14
    1272:	ff 92       	push	r15
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
	menu_entry* main_menu = add_entry(NULL, "Main menu", NULL);
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	68 e2       	ldi	r22, 0x28	; 40
    1282:	73 e0       	ldi	r23, 0x03	; 3
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <add_entry>
    128c:	ec 01       	movw	r28, r24
	
	// Main menu
	menu_entry* play = add_entry(main_menu, "Play game", NULL);
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	62 e3       	ldi	r22, 0x32	; 50
    1294:	73 e0       	ldi	r23, 0x03	; 3
    1296:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <add_entry>
    129a:	6c 01       	movw	r12, r24
	menu_entry* highscore = add_entry(main_menu, "Highscore", test_function);
    129c:	47 e1       	ldi	r20, 0x17	; 23
    129e:	58 e0       	ldi	r21, 0x08	; 8
    12a0:	6c e3       	ldi	r22, 0x3C	; 60
    12a2:	73 e0       	ldi	r23, 0x03	; 3
    12a4:	ce 01       	movw	r24, r28
    12a6:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <add_entry>
	menu_entry* settings = add_entry(main_menu, "Settings", NULL);
    12aa:	40 e0       	ldi	r20, 0x00	; 0
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	66 e4       	ldi	r22, 0x46	; 70
    12b0:	73 e0       	ldi	r23, 0x03	; 3
    12b2:	ce 01       	movw	r24, r28
    12b4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <add_entry>
    12b8:	7c 01       	movw	r14, r24
	menu_entry* extras = add_entry(main_menu, "Extra features", NULL);
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	6b ea       	ldi	r22, 0xAB	; 171
    12c0:	73 e0       	ldi	r23, 0x03	; 3
    12c2:	ce 01       	movw	r24, r28
    12c4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <add_entry>
    12c8:	8c 01       	movw	r16, r24
	//menu_entry* yolo = add_entry(main_menu, "YOLO", NULL);
	
	
	// Sub-menu settings
	menu_entry* brightness = add_entry(settings, "Brightness", brightness_run);
    12ca:	42 e4       	ldi	r20, 0x42	; 66
    12cc:	52 e0       	ldi	r21, 0x02	; 2
    12ce:	6f e4       	ldi	r22, 0x4F	; 79
    12d0:	73 e0       	ldi	r23, 0x03	; 3
    12d2:	c7 01       	movw	r24, r14
    12d4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <add_entry>
	menu_entry* font = add_entry(settings, "Set font", NULL);
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	50 e0       	ldi	r21, 0x00	; 0
    12dc:	6a e5       	ldi	r22, 0x5A	; 90
    12de:	73 e0       	ldi	r23, 0x03	; 3
    12e0:	c7 01       	movw	r24, r14
    12e2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <add_entry>
	
	// Sub-menu extras
	menu_entry* keyboard = add_entry(extras, "Keyboard", keyboard_run);
    12e6:	43 ee       	ldi	r20, 0xE3	; 227
    12e8:	55 e0       	ldi	r21, 0x05	; 5
    12ea:	63 e6       	ldi	r22, 0x63	; 99
    12ec:	73 e0       	ldi	r23, 0x03	; 3
    12ee:	c8 01       	movw	r24, r16
    12f0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <add_entry>
	menu_entry* mandelbrot = add_entry(extras, "Mandelbrot", NULL);
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	50 e0       	ldi	r21, 0x00	; 0
    12f8:	6c e6       	ldi	r22, 0x6C	; 108
    12fa:	73 e0       	ldi	r23, 0x03	; 3
    12fc:	c8 01       	movw	r24, r16
    12fe:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <add_entry>
	menu_entry* pong = add_entry(extras, "Play pong", NULL);
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	67 e7       	ldi	r22, 0x77	; 119
    1308:	73 e0       	ldi	r23, 0x03	; 3
    130a:	c8 01       	movw	r24, r16
    130c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <add_entry>
	menu_entry* rcube = add_entry(extras, "rotating cube", NULL);
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	61 e8       	ldi	r22, 0x81	; 129
    1316:	73 e0       	ldi	r23, 0x03	; 3
    1318:	c8 01       	movw	r24, r16
    131a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <add_entry>
	
	current_entry = main_menu;
    131e:	d0 93 cd 03 	sts	0x03CD, r29
    1322:	c0 93 cc 03 	sts	0x03CC, r28
	selected_entry = play;
    1326:	d0 92 cb 03 	sts	0x03CB, r13
    132a:	c0 92 ca 03 	sts	0x03CA, r12
	MENU_draw_current_menu();
    132e:	0e 94 1c 08 	call	0x1038	; 0x1038 <MENU_draw_current_menu>
}
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	1f 91       	pop	r17
    1338:	0f 91       	pop	r16
    133a:	ff 90       	pop	r15
    133c:	ef 90       	pop	r14
    133e:	df 90       	pop	r13
    1340:	cf 90       	pop	r12
    1342:	08 95       	ret

00001344 <initialize>:
#include <stdio.h>
#include <stdbool.h>


void initialize(void){
	cli();
    1344:	f8 94       	cli
	OLED_reset();
    1346:	0e 94 26 0a 	call	0x144c	; 0x144c <OLED_reset>
	usart_init(MYUBRR);
    134a:	8f e1       	ldi	r24, 0x1F	; 31
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 00 0b 	call	0x1600	; 0x1600 <usart_init>
	SRAM_init();
    1352:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <SRAM_init>
	ADC_init();
    1356:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <ADC_init>
	JOY_init();
    135a:	0e 94 3e 03 	call	0x67c	; 0x67c <JOY_init>
	OLED_init();
    135e:	0e 94 32 0a 	call	0x1464	; 0x1464 <OLED_init>
	MENU_init();
    1362:	0e 94 36 09 	call	0x126c	; 0x126c <MENU_init>
	//CAN_init();
	sei();
    1366:	78 94       	sei
    1368:	08 95       	ret

0000136a <main>:
	//printf("1. EFGL: 0x%02x\n", MCP2515_read(MCP_EFLG));
	
}

int main(void) {
	initialize();
    136a:	0e 94 a2 09 	call	0x1344	; 0x1344 <initialize>
	while(1){
		MENU_run();
    136e:	0e 94 c4 08 	call	0x1188	; 0x1188 <MENU_run>
    1372:	fd cf       	rjmp	.-6      	; 0x136e <main+0x4>

00001374 <OLED_print_char>:
	write_cmd(0x81);
	write_cmd(lvl);
}

void OLED_print_char(char c){
	if (c == '\0') return;
    1374:	88 23       	and	r24, r24
    1376:	f9 f0       	breq	.+62     	; 0x13b6 <OLED_print_char+0x42>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
    1378:	e8 2f       	mov	r30, r24
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	b0 97       	sbiw	r30, 0x20	; 32
	for (int col = 0; col < FONT_SIZE; col++){
    137e:	80 91 42 01 	lds	r24, 0x0142
    1382:	88 23       	and	r24, r24
    1384:	c1 f0       	breq	.+48     	; 0x13b6 <OLED_print_char+0x42>
    1386:	ee 0f       	add	r30, r30
    1388:	ff 1f       	adc	r31, r31
    138a:	ee 0f       	add	r30, r30
    138c:	ff 1f       	adc	r31, r31
    138e:	ee 0f       	add	r30, r30
    1390:	ff 1f       	adc	r31, r31
    1392:	e0 59       	subi	r30, 0x90	; 144
    1394:	ff 4f       	sbci	r31, 0xFF	; 255
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
		write_data(pgm_read_byte(&font8[letter_index][col]));
    139a:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    139c:	a0 91 45 01 	lds	r26, 0x0145
    13a0:	b0 91 46 01 	lds	r27, 0x0146
    13a4:	2c 93       	st	X, r18

void OLED_print_char(char c){
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++){
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	31 96       	adiw	r30, 0x01	; 1
    13aa:	20 91 42 01 	lds	r18, 0x0142
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	82 17       	cp	r24, r18
    13b2:	93 07       	cpc	r25, r19
    13b4:	94 f3       	brlt	.-28     	; 0x139a <OLED_print_char+0x26>
    13b6:	08 95       	ret

000013b8 <write_data>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    13b8:	e0 91 45 01 	lds	r30, 0x0145
    13bc:	f0 91 46 01 	lds	r31, 0x0146
    13c0:	80 83       	st	Z, r24
    13c2:	08 95       	ret

000013c4 <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7){
    13c4:	88 30       	cpi	r24, 0x08	; 8
    13c6:	30 f4       	brcc	.+12     	; 0x13d4 <OLED_goto_line+0x10>
		return;
	}
	write_cmd(0xB0+line);
    13c8:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    13ca:	e0 91 43 01 	lds	r30, 0x0143
    13ce:	f0 91 44 01 	lds	r31, 0x0144
    13d2:	80 83       	st	Z, r24
    13d4:	08 95       	ret

000013d6 <OLED_goto_column>:
	}
	write_cmd(0xB0+line);
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
    13d6:	88 23       	and	r24, r24
    13d8:	7c f0       	brlt	.+30     	; 0x13f8 <OLED_goto_column+0x22>
		return;
	}
	write_cmd(0x00+column%16); //lower column register
    13da:	98 2f       	mov	r25, r24
    13dc:	9f 70       	andi	r25, 0x0F	; 15
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    13de:	e0 91 43 01 	lds	r30, 0x0143
    13e2:	f0 91 44 01 	lds	r31, 0x0144
    13e6:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
		return;
	}
	write_cmd(0x00+column%16); //lower column register
	write_cmd(0x10+column/16); //higher column register
    13e8:	82 95       	swap	r24
    13ea:	8f 70       	andi	r24, 0x0F	; 15
    13ec:	80 5f       	subi	r24, 0xF0	; 240
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    13ee:	e0 91 43 01 	lds	r30, 0x0143
    13f2:	f0 91 44 01 	lds	r31, 0x0144
    13f6:	80 83       	st	Z, r24
    13f8:	08 95       	ret

000013fa <OLED_pos>:
		write_data(0x00);
		
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
    13fa:	cf 93       	push	r28
    13fc:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
    13fe:	88 30       	cpi	r24, 0x08	; 8
    1400:	10 f4       	brcc	.+4      	; 0x1406 <OLED_pos+0xc>
    1402:	66 23       	and	r22, r22
    1404:	4c f4       	brge	.+18     	; 0x1418 <OLED_pos+0x1e>
		printf("Out of range in OLED_pos()");
    1406:	8f e8       	ldi	r24, 0x8F	; 143
    1408:	93 e0       	ldi	r25, 0x03	; 3
    140a:	9f 93       	push	r25
    140c:	8f 93       	push	r24
    140e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <printf>
		return; 
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	05 c0       	rjmp	.+10     	; 0x1422 <OLED_pos+0x28>
	}
	
	OLED_goto_line(line);
    1418:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <OLED_goto_line>
	OLED_goto_column(column);
    141c:	8c 2f       	mov	r24, r28
    141e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <OLED_goto_column>
}
    1422:	cf 91       	pop	r28
    1424:	08 95       	ret

00001426 <OLED_home>:




void OLED_home(){
	OLED_pos(0,0);
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <OLED_pos>
    142e:	08 95       	ret

00001430 <OLED_clear_line>:
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	0e 94 fd 09 	call	0x13fa	; 0x13fa <OLED_pos>
    1436:	80 e8       	ldi	r24, 0x80	; 128
    1438:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    143a:	e0 91 45 01 	lds	r30, 0x0145
    143e:	f0 91 46 01 	lds	r31, 0x0146
    1442:	10 82       	st	Z, r1
    1444:	01 97       	sbiw	r24, 0x01	; 1
	OLED_pos(0,0);
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	c1 f7       	brne	.-16     	; 0x143a <OLED_clear_line+0xa>
		write_data(0x00);
		
	}
}
    144a:	08 95       	ret

0000144c <OLED_reset>:
	
}



void OLED_reset() {
    144c:	cf 93       	push	r28
    144e:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
    1450:	8c 2f       	mov	r24, r28
    1452:	0e 94 18 0a 	call	0x1430	; 0x1430 <OLED_clear_line>
    1456:	cf 5f       	subi	r28, 0xFF	; 255
}



void OLED_reset() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
    1458:	c8 30       	cpi	r28, 0x08	; 8
    145a:	d1 f7       	brne	.-12     	; 0x1450 <OLED_reset+0x4>
		OLED_clear_line(page);
	}
	OLED_home();
    145c:	0e 94 13 0a 	call	0x1426	; 0x1426 <OLED_home>
}
    1460:	cf 91       	pop	r28
    1462:	08 95       	ret

00001464 <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	66 97       	sbiw	r28, 0x16	; 22
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
	
	
	const char addresses[] = {
    1478:	86 e1       	ldi	r24, 0x16	; 22
    147a:	e7 e4       	ldi	r30, 0x47	; 71
    147c:	f1 e0       	ldi	r31, 0x01	; 1
    147e:	de 01       	movw	r26, r28
    1480:	11 96       	adiw	r26, 0x01	; 1
    1482:	01 90       	ld	r0, Z+
    1484:	0d 92       	st	X+, r0
    1486:	8a 95       	dec	r24
    1488:	e1 f7       	brne	.-8      	; 0x1482 <OLED_init+0x1e>
    148a:	fe 01       	movw	r30, r28
    148c:	31 96       	adiw	r30, 0x01	; 1
    148e:	ce 01       	movw	r24, r28
    1490:	47 96       	adiw	r24, 0x17	; 23
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
		write_cmd(addresses[i]);
    1492:	21 91       	ld	r18, Z+
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    1494:	a0 91 43 01 	lds	r26, 0x0143
    1498:	b0 91 44 01 	lds	r27, 0x0144
    149c:	2c 93       	st	X, r18
		0xa6, //set normal display
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
    149e:	e8 17       	cp	r30, r24
    14a0:	f9 07       	cpc	r31, r25
    14a2:	b9 f7       	brne	.-18     	; 0x1492 <OLED_init+0x2e>
		write_cmd(addresses[i]);
	}
	
	OLED_reset();
    14a4:	0e 94 26 0a 	call	0x144c	; 0x144c <OLED_reset>
	
}
    14a8:	66 96       	adiw	r28, 0x16	; 22
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	08 95       	ret

000014ba <OLED_set_brightness>:
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    14ba:	e0 91 43 01 	lds	r30, 0x0143
    14be:	f0 91 44 01 	lds	r31, 0x0144
    14c2:	91 e8       	ldi	r25, 0x81	; 129
    14c4:	90 83       	st	Z, r25
    14c6:	e0 91 43 01 	lds	r30, 0x0143
    14ca:	f0 91 44 01 	lds	r31, 0x0144
    14ce:	80 83       	st	Z, r24
    14d0:	08 95       	ret

000014d2 <OLED_print_char_inverse>:
		write_data(pgm_read_byte(&font8[letter_index][col]));
	}
}

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
    14d2:	88 23       	and	r24, r24
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <OLED_print_char_inverse+0x6>
    14d6:	43 c0       	rjmp	.+134    	; 0x155e <OLED_print_char_inverse+0x8c>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++) {
		write_data(~pgm_read_byte(&font8[letter_index][col]));
    14d8:	88 3d       	cpi	r24, 0xD8	; 216
    14da:	d1 f0       	breq	.+52     	; 0x1510 <OLED_print_char_inverse+0x3e>
    14dc:	28 f4       	brcc	.+10     	; 0x14e8 <OLED_print_char_inverse+0x16>
    14de:	85 3c       	cpi	r24, 0xC5	; 197
    14e0:	d1 f0       	breq	.+52     	; 0x1516 <OLED_print_char_inverse+0x44>
    14e2:	86 3c       	cpi	r24, 0xC6	; 198
    14e4:	91 f0       	breq	.+36     	; 0x150a <OLED_print_char_inverse+0x38>
    14e6:	06 c0       	rjmp	.+12     	; 0x14f4 <OLED_print_char_inverse+0x22>
    14e8:	86 3e       	cpi	r24, 0xE6	; 230
    14ea:	c1 f0       	breq	.+48     	; 0x151c <OLED_print_char_inverse+0x4a>
    14ec:	88 3f       	cpi	r24, 0xF8	; 248
    14ee:	39 f0       	breq	.+14     	; 0x14fe <OLED_print_char_inverse+0x2c>
    14f0:	85 3e       	cpi	r24, 0xE5	; 229
    14f2:	41 f0       	breq	.+16     	; 0x1504 <OLED_print_char_inverse+0x32>
}

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
    14f4:	48 2f       	mov	r20, r24
    14f6:	50 e0       	ldi	r21, 0x00	; 0
    14f8:	40 52       	subi	r20, 0x20	; 32
    14fa:	51 09       	sbc	r21, r1
    14fc:	11 c0       	rjmp	.+34     	; 0x1520 <OLED_print_char_inverse+0x4e>
		write_data(~pgm_read_byte(&font8[letter_index][col]));
	}
}



    14fe:	40 e6       	ldi	r20, 0x60	; 96
    1500:	50 e0       	ldi	r21, 0x00	; 0
//for testing purposes
    1502:	0e c0       	rjmp	.+28     	; 0x1520 <OLED_print_char_inverse+0x4e>
void OLED_set_screen() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
    1504:	41 e6       	ldi	r20, 0x61	; 97
    1506:	50 e0       	ldi	r21, 0x00	; 0
		OLED_set_line(page);
    1508:	0b c0       	rjmp	.+22     	; 0x1520 <OLED_print_char_inverse+0x4e>
	}
	OLED_home();
    150a:	42 e6       	ldi	r20, 0x62	; 98
    150c:	50 e0       	ldi	r21, 0x00	; 0
}
    150e:	08 c0       	rjmp	.+16     	; 0x1520 <OLED_print_char_inverse+0x4e>

void OLED_set_line(uint8_t line) {
    1510:	43 e6       	ldi	r20, 0x63	; 99
    1512:	50 e0       	ldi	r21, 0x00	; 0
	OLED_pos(line,0);
    1514:	05 c0       	rjmp	.+10     	; 0x1520 <OLED_print_char_inverse+0x4e>
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
		write_data(0xFF);
    1516:	44 e6       	ldi	r20, 0x64	; 100
    1518:	50 e0       	ldi	r21, 0x00	; 0
		
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <OLED_print_char_inverse+0x4e>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++) {
		write_data(~pgm_read_byte(&font8[letter_index][col]));
	}
}
    151c:	4f e5       	ldi	r20, 0x5F	; 95
    151e:	50 e0       	ldi	r21, 0x00	; 0
		
	}
}

void OLED_test(){
	
    1520:	80 91 42 01 	lds	r24, 0x0142
    1524:	88 23       	and	r24, r24
    1526:	d9 f0       	breq	.+54     	; 0x155e <OLED_print_char_inverse+0x8c>
    1528:	44 0f       	add	r20, r20
    152a:	55 1f       	adc	r21, r21
    152c:	44 0f       	add	r20, r20
    152e:	55 1f       	adc	r21, r21
    1530:	44 0f       	add	r20, r20
    1532:	55 1f       	adc	r21, r21
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	40 59       	subi	r20, 0x90	; 144
    153a:	5f 4f       	sbci	r21, 0xFF	; 255
    153c:	fa 01       	movw	r30, r20
    153e:	e8 0f       	add	r30, r24
    1540:	f9 1f       	adc	r31, r25
	//test brightness
    1542:	e4 91       	lpm	r30, Z
    1544:	e0 95       	com	r30
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1546:	a0 91 45 01 	lds	r26, 0x0145
    154a:	b0 91 46 01 	lds	r27, 0x0146
    154e:	ec 93       	st	X, r30
		
	}
}

void OLED_test(){
	
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	20 91 42 01 	lds	r18, 0x0142
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	82 17       	cp	r24, r18
    155a:	93 07       	cpc	r25, r19
    155c:	7c f3       	brlt	.-34     	; 0x153c <OLED_print_char_inverse+0x6a>
    155e:	08 95       	ret

00001560 <OLED_set_line>:
	//
	//OLED_goto_line(5);
	//write_data(0xFF);
	//
	//OLED_pos(3,100);
	//write_data(0x55);
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	0e 94 fd 09 	call	0x13fa	; 0x13fa <OLED_pos>
    1566:	80 e8       	ldi	r24, 0x80	; 128
    1568:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    156a:	2f ef       	ldi	r18, 0xFF	; 255
    156c:	e0 91 45 01 	lds	r30, 0x0145
    1570:	f0 91 46 01 	lds	r31, 0x0146
    1574:	20 83       	st	Z, r18
    1576:	01 97       	sbiw	r24, 0x01	; 1
	//OLED_goto_line(5);
	//write_data(0xFF);
	//
	//OLED_pos(3,100);
	//write_data(0x55);
	
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	c1 f7       	brne	.-16     	; 0x156c <OLED_set_line+0xc>
	OLED_reset();
	//for (char c = 'a'; c <= 'z'; c++){
		//OLED_print_char(c);
	//}
    157c:	08 95       	ret

0000157e <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    157e:	e0 91 45 01 	lds	r30, 0x0145
    1582:	f0 91 46 01 	lds	r31, 0x0146
    1586:	88 e1       	ldi	r24, 0x18	; 24
    1588:	80 83       	st	Z, r24
    158a:	e0 91 45 01 	lds	r30, 0x0145
    158e:	f0 91 46 01 	lds	r31, 0x0146
    1592:	80 83       	st	Z, r24
    1594:	e0 91 45 01 	lds	r30, 0x0145
    1598:	f0 91 46 01 	lds	r31, 0x0146
    159c:	9e e7       	ldi	r25, 0x7E	; 126
    159e:	90 83       	st	Z, r25
    15a0:	e0 91 45 01 	lds	r30, 0x0145
    15a4:	f0 91 46 01 	lds	r31, 0x0146
    15a8:	9c e3       	ldi	r25, 0x3C	; 60
    15aa:	90 83       	st	Z, r25
    15ac:	e0 91 45 01 	lds	r30, 0x0145
    15b0:	f0 91 46 01 	lds	r31, 0x0146
    15b4:	80 83       	st	Z, r24
    15b6:	08 95       	ret

000015b8 <SPI_send>:
}


void SPI_send(uint8_t data){
	//Start transmission
	SPDR = data;		
    15b8:	8f b9       	out	0x0f, r24	; 15
	//wait for transmission complete SPSR: register with SPIF flag, SPIF: bit set to 1 when data is read
	loop_until_bit_is_set(SPSR, SPIF);
    15ba:	77 9b       	sbis	0x0e, 7	; 14
    15bc:	fe cf       	rjmp	.-4      	; 0x15ba <SPI_send+0x2>
}
    15be:	08 95       	ret

000015c0 <SPI_read>:


char SPI_read(){
	//must send a dummy bit to receive data
	SPI_send(0);
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <SPI_send>
	
	loop_until_bit_is_set(SPSR, SPIF);
    15c6:	77 9b       	sbis	0x0e, 7	; 14
    15c8:	fe cf       	rjmp	.-4      	; 0x15c6 <SPI_read+0x6>
	char data = SPDR;
    15ca:	8f b1       	in	r24, 0x0f	; 15
	return data;
	
}
    15cc:	08 95       	ret

000015ce <SPI_select>:
	//printf("SPI_TEST: %s\n\n", spi_read_result);
	
}

void SPI_select(){
	clear_bit(PORTB, SS);
    15ce:	c4 98       	cbi	0x18, 4	; 24
    15d0:	08 95       	ret

000015d2 <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
    15d2:	c4 9a       	sbi	0x18, 4	; 24
    15d4:	08 95       	ret

000015d6 <SRAM_init>:



void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
    15d6:	85 b7       	in	r24, 0x35	; 53
    15d8:	80 68       	ori	r24, 0x80	; 128
    15da:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
    15dc:	80 b7       	in	r24, 0x30	; 48
    15de:	80 62       	ori	r24, 0x20	; 32
    15e0:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
    15e2:	80 b7       	in	r24, 0x30	; 48
    15e4:	8f 7e       	andi	r24, 0xEF	; 239
    15e6:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
    15e8:	80 b7       	in	r24, 0x30	; 48
    15ea:	87 7f       	andi	r24, 0xF7	; 247
    15ec:	80 bf       	out	0x30, r24	; 48
    15ee:	08 95       	ret

000015f0 <usart_transmit_to_computer>:
}


void usart_transmit_to_computer(unsigned int data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
    15f0:	5d 9b       	sbis	0x0b, 5	; 11
    15f2:	fe cf       	rjmp	.-4      	; 0x15f0 <usart_transmit_to_computer>
	;
	
	/* Put data into buffer (sends the data) */
	UDR0 = data;
    15f4:	8c b9       	out	0x0c, r24	; 12
    15f6:	08 95       	ret

000015f8 <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
    15f8:	5f 9b       	sbis	0x0b, 7	; 11
    15fa:	fe cf       	rjmp	.-4      	; 0x15f8 <usart_receive_from_computer>
	;
	
	/* Get and return data from buffer */
	return UDR0;
    15fc:	8c b1       	in	r24, 0x0c	; 12
}
    15fe:	08 95       	ret

00001600 <usart_init>:
#include <stdio.h>


void usart_init(unsigned int ubbr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubbr>>8);
    1600:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
    1602:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    1604:	88 e1       	ldi	r24, 0x18	; 24
    1606:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1608:	8e e8       	ldi	r24, 0x8E	; 142
    160a:	80 bd       	out	0x20, r24	; 32
	
	
	/* Enable printf-thing */
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
    160c:	6c ef       	ldi	r22, 0xFC	; 252
    160e:	7a e0       	ldi	r23, 0x0A	; 10
    1610:	88 ef       	ldi	r24, 0xF8	; 248
    1612:	9a e0       	ldi	r25, 0x0A	; 10
    1614:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <fdevopen>
    1618:	08 95       	ret

0000161a <__divmodhi4>:
    161a:	97 fb       	bst	r25, 7
    161c:	07 2e       	mov	r0, r23
    161e:	16 f4       	brtc	.+4      	; 0x1624 <__divmodhi4+0xa>
    1620:	00 94       	com	r0
    1622:	07 d0       	rcall	.+14     	; 0x1632 <__divmodhi4_neg1>
    1624:	77 fd       	sbrc	r23, 7
    1626:	09 d0       	rcall	.+18     	; 0x163a <__divmodhi4_neg2>
    1628:	0e 94 21 0b 	call	0x1642	; 0x1642 <__udivmodhi4>
    162c:	07 fc       	sbrc	r0, 7
    162e:	05 d0       	rcall	.+10     	; 0x163a <__divmodhi4_neg2>
    1630:	3e f4       	brtc	.+14     	; 0x1640 <__divmodhi4_exit>

00001632 <__divmodhi4_neg1>:
    1632:	90 95       	com	r25
    1634:	81 95       	neg	r24
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	08 95       	ret

0000163a <__divmodhi4_neg2>:
    163a:	70 95       	com	r23
    163c:	61 95       	neg	r22
    163e:	7f 4f       	sbci	r23, 0xFF	; 255

00001640 <__divmodhi4_exit>:
    1640:	08 95       	ret

00001642 <__udivmodhi4>:
    1642:	aa 1b       	sub	r26, r26
    1644:	bb 1b       	sub	r27, r27
    1646:	51 e1       	ldi	r21, 0x11	; 17
    1648:	07 c0       	rjmp	.+14     	; 0x1658 <__udivmodhi4_ep>

0000164a <__udivmodhi4_loop>:
    164a:	aa 1f       	adc	r26, r26
    164c:	bb 1f       	adc	r27, r27
    164e:	a6 17       	cp	r26, r22
    1650:	b7 07       	cpc	r27, r23
    1652:	10 f0       	brcs	.+4      	; 0x1658 <__udivmodhi4_ep>
    1654:	a6 1b       	sub	r26, r22
    1656:	b7 0b       	sbc	r27, r23

00001658 <__udivmodhi4_ep>:
    1658:	88 1f       	adc	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	5a 95       	dec	r21
    165e:	a9 f7       	brne	.-22     	; 0x164a <__udivmodhi4_loop>
    1660:	80 95       	com	r24
    1662:	90 95       	com	r25
    1664:	bc 01       	movw	r22, r24
    1666:	cd 01       	movw	r24, r26
    1668:	08 95       	ret

0000166a <malloc>:
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	82 30       	cpi	r24, 0x02	; 2
    1670:	91 05       	cpc	r25, r1
    1672:	10 f4       	brcc	.+4      	; 0x1678 <malloc+0xe>
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	e0 91 d0 03 	lds	r30, 0x03D0
    167c:	f0 91 d1 03 	lds	r31, 0x03D1
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	a0 e0       	ldi	r26, 0x00	; 0
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	30 97       	sbiw	r30, 0x00	; 0
    168a:	39 f1       	breq	.+78     	; 0x16da <malloc+0x70>
    168c:	40 81       	ld	r20, Z
    168e:	51 81       	ldd	r21, Z+1	; 0x01
    1690:	48 17       	cp	r20, r24
    1692:	59 07       	cpc	r21, r25
    1694:	b8 f0       	brcs	.+46     	; 0x16c4 <malloc+0x5a>
    1696:	48 17       	cp	r20, r24
    1698:	59 07       	cpc	r21, r25
    169a:	71 f4       	brne	.+28     	; 0x16b8 <malloc+0x4e>
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	10 97       	sbiw	r26, 0x00	; 0
    16a2:	29 f0       	breq	.+10     	; 0x16ae <malloc+0x44>
    16a4:	13 96       	adiw	r26, 0x03	; 3
    16a6:	9c 93       	st	X, r25
    16a8:	8e 93       	st	-X, r24
    16aa:	12 97       	sbiw	r26, 0x02	; 2
    16ac:	2c c0       	rjmp	.+88     	; 0x1706 <malloc+0x9c>
    16ae:	90 93 d1 03 	sts	0x03D1, r25
    16b2:	80 93 d0 03 	sts	0x03D0, r24
    16b6:	27 c0       	rjmp	.+78     	; 0x1706 <malloc+0x9c>
    16b8:	21 15       	cp	r18, r1
    16ba:	31 05       	cpc	r19, r1
    16bc:	31 f0       	breq	.+12     	; 0x16ca <malloc+0x60>
    16be:	42 17       	cp	r20, r18
    16c0:	53 07       	cpc	r21, r19
    16c2:	18 f0       	brcs	.+6      	; 0x16ca <malloc+0x60>
    16c4:	a9 01       	movw	r20, r18
    16c6:	db 01       	movw	r26, r22
    16c8:	01 c0       	rjmp	.+2      	; 0x16cc <malloc+0x62>
    16ca:	ef 01       	movw	r28, r30
    16cc:	9a 01       	movw	r18, r20
    16ce:	bd 01       	movw	r22, r26
    16d0:	df 01       	movw	r26, r30
    16d2:	02 80       	ldd	r0, Z+2	; 0x02
    16d4:	f3 81       	ldd	r31, Z+3	; 0x03
    16d6:	e0 2d       	mov	r30, r0
    16d8:	d7 cf       	rjmp	.-82     	; 0x1688 <malloc+0x1e>
    16da:	21 15       	cp	r18, r1
    16dc:	31 05       	cpc	r19, r1
    16de:	f9 f0       	breq	.+62     	; 0x171e <malloc+0xb4>
    16e0:	28 1b       	sub	r18, r24
    16e2:	39 0b       	sbc	r19, r25
    16e4:	24 30       	cpi	r18, 0x04	; 4
    16e6:	31 05       	cpc	r19, r1
    16e8:	80 f4       	brcc	.+32     	; 0x170a <malloc+0xa0>
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	9b 81       	ldd	r25, Y+3	; 0x03
    16ee:	61 15       	cp	r22, r1
    16f0:	71 05       	cpc	r23, r1
    16f2:	21 f0       	breq	.+8      	; 0x16fc <malloc+0x92>
    16f4:	fb 01       	movw	r30, r22
    16f6:	93 83       	std	Z+3, r25	; 0x03
    16f8:	82 83       	std	Z+2, r24	; 0x02
    16fa:	04 c0       	rjmp	.+8      	; 0x1704 <malloc+0x9a>
    16fc:	90 93 d1 03 	sts	0x03D1, r25
    1700:	80 93 d0 03 	sts	0x03D0, r24
    1704:	fe 01       	movw	r30, r28
    1706:	32 96       	adiw	r30, 0x02	; 2
    1708:	44 c0       	rjmp	.+136    	; 0x1792 <malloc+0x128>
    170a:	fe 01       	movw	r30, r28
    170c:	e2 0f       	add	r30, r18
    170e:	f3 1f       	adc	r31, r19
    1710:	81 93       	st	Z+, r24
    1712:	91 93       	st	Z+, r25
    1714:	22 50       	subi	r18, 0x02	; 2
    1716:	31 09       	sbc	r19, r1
    1718:	39 83       	std	Y+1, r19	; 0x01
    171a:	28 83       	st	Y, r18
    171c:	3a c0       	rjmp	.+116    	; 0x1792 <malloc+0x128>
    171e:	20 91 ce 03 	lds	r18, 0x03CE
    1722:	30 91 cf 03 	lds	r19, 0x03CF
    1726:	23 2b       	or	r18, r19
    1728:	41 f4       	brne	.+16     	; 0x173a <malloc+0xd0>
    172a:	20 91 02 01 	lds	r18, 0x0102
    172e:	30 91 03 01 	lds	r19, 0x0103
    1732:	30 93 cf 03 	sts	0x03CF, r19
    1736:	20 93 ce 03 	sts	0x03CE, r18
    173a:	20 91 00 01 	lds	r18, 0x0100
    173e:	30 91 01 01 	lds	r19, 0x0101
    1742:	21 15       	cp	r18, r1
    1744:	31 05       	cpc	r19, r1
    1746:	41 f4       	brne	.+16     	; 0x1758 <malloc+0xee>
    1748:	2d b7       	in	r18, 0x3d	; 61
    174a:	3e b7       	in	r19, 0x3e	; 62
    174c:	40 91 04 01 	lds	r20, 0x0104
    1750:	50 91 05 01 	lds	r21, 0x0105
    1754:	24 1b       	sub	r18, r20
    1756:	35 0b       	sbc	r19, r21
    1758:	e0 91 ce 03 	lds	r30, 0x03CE
    175c:	f0 91 cf 03 	lds	r31, 0x03CF
    1760:	e2 17       	cp	r30, r18
    1762:	f3 07       	cpc	r31, r19
    1764:	a0 f4       	brcc	.+40     	; 0x178e <malloc+0x124>
    1766:	2e 1b       	sub	r18, r30
    1768:	3f 0b       	sbc	r19, r31
    176a:	28 17       	cp	r18, r24
    176c:	39 07       	cpc	r19, r25
    176e:	78 f0       	brcs	.+30     	; 0x178e <malloc+0x124>
    1770:	ac 01       	movw	r20, r24
    1772:	4e 5f       	subi	r20, 0xFE	; 254
    1774:	5f 4f       	sbci	r21, 0xFF	; 255
    1776:	24 17       	cp	r18, r20
    1778:	35 07       	cpc	r19, r21
    177a:	48 f0       	brcs	.+18     	; 0x178e <malloc+0x124>
    177c:	4e 0f       	add	r20, r30
    177e:	5f 1f       	adc	r21, r31
    1780:	50 93 cf 03 	sts	0x03CF, r21
    1784:	40 93 ce 03 	sts	0x03CE, r20
    1788:	81 93       	st	Z+, r24
    178a:	91 93       	st	Z+, r25
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <malloc+0x128>
    178e:	e0 e0       	ldi	r30, 0x00	; 0
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	cf 01       	movw	r24, r30
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <free>:
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	09 f4       	brne	.+2      	; 0x17a4 <free+0xa>
    17a2:	87 c0       	rjmp	.+270    	; 0x18b2 <free+0x118>
    17a4:	fc 01       	movw	r30, r24
    17a6:	32 97       	sbiw	r30, 0x02	; 2
    17a8:	13 82       	std	Z+3, r1	; 0x03
    17aa:	12 82       	std	Z+2, r1	; 0x02
    17ac:	c0 91 d0 03 	lds	r28, 0x03D0
    17b0:	d0 91 d1 03 	lds	r29, 0x03D1
    17b4:	20 97       	sbiw	r28, 0x00	; 0
    17b6:	81 f4       	brne	.+32     	; 0x17d8 <free+0x3e>
    17b8:	20 81       	ld	r18, Z
    17ba:	31 81       	ldd	r19, Z+1	; 0x01
    17bc:	28 0f       	add	r18, r24
    17be:	39 1f       	adc	r19, r25
    17c0:	80 91 ce 03 	lds	r24, 0x03CE
    17c4:	90 91 cf 03 	lds	r25, 0x03CF
    17c8:	82 17       	cp	r24, r18
    17ca:	93 07       	cpc	r25, r19
    17cc:	79 f5       	brne	.+94     	; 0x182c <free+0x92>
    17ce:	f0 93 cf 03 	sts	0x03CF, r31
    17d2:	e0 93 ce 03 	sts	0x03CE, r30
    17d6:	6d c0       	rjmp	.+218    	; 0x18b2 <free+0x118>
    17d8:	de 01       	movw	r26, r28
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	ae 17       	cp	r26, r30
    17e0:	bf 07       	cpc	r27, r31
    17e2:	50 f4       	brcc	.+20     	; 0x17f8 <free+0x5e>
    17e4:	12 96       	adiw	r26, 0x02	; 2
    17e6:	4d 91       	ld	r20, X+
    17e8:	5c 91       	ld	r21, X
    17ea:	13 97       	sbiw	r26, 0x03	; 3
    17ec:	9d 01       	movw	r18, r26
    17ee:	41 15       	cp	r20, r1
    17f0:	51 05       	cpc	r21, r1
    17f2:	09 f1       	breq	.+66     	; 0x1836 <free+0x9c>
    17f4:	da 01       	movw	r26, r20
    17f6:	f3 cf       	rjmp	.-26     	; 0x17de <free+0x44>
    17f8:	b3 83       	std	Z+3, r27	; 0x03
    17fa:	a2 83       	std	Z+2, r26	; 0x02
    17fc:	40 81       	ld	r20, Z
    17fe:	51 81       	ldd	r21, Z+1	; 0x01
    1800:	84 0f       	add	r24, r20
    1802:	95 1f       	adc	r25, r21
    1804:	8a 17       	cp	r24, r26
    1806:	9b 07       	cpc	r25, r27
    1808:	71 f4       	brne	.+28     	; 0x1826 <free+0x8c>
    180a:	8d 91       	ld	r24, X+
    180c:	9c 91       	ld	r25, X
    180e:	11 97       	sbiw	r26, 0x01	; 1
    1810:	84 0f       	add	r24, r20
    1812:	95 1f       	adc	r25, r21
    1814:	02 96       	adiw	r24, 0x02	; 2
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    181a:	12 96       	adiw	r26, 0x02	; 2
    181c:	8d 91       	ld	r24, X+
    181e:	9c 91       	ld	r25, X
    1820:	13 97       	sbiw	r26, 0x03	; 3
    1822:	93 83       	std	Z+3, r25	; 0x03
    1824:	82 83       	std	Z+2, r24	; 0x02
    1826:	21 15       	cp	r18, r1
    1828:	31 05       	cpc	r19, r1
    182a:	29 f4       	brne	.+10     	; 0x1836 <free+0x9c>
    182c:	f0 93 d1 03 	sts	0x03D1, r31
    1830:	e0 93 d0 03 	sts	0x03D0, r30
    1834:	3e c0       	rjmp	.+124    	; 0x18b2 <free+0x118>
    1836:	d9 01       	movw	r26, r18
    1838:	13 96       	adiw	r26, 0x03	; 3
    183a:	fc 93       	st	X, r31
    183c:	ee 93       	st	-X, r30
    183e:	12 97       	sbiw	r26, 0x02	; 2
    1840:	4d 91       	ld	r20, X+
    1842:	5d 91       	ld	r21, X+
    1844:	a4 0f       	add	r26, r20
    1846:	b5 1f       	adc	r27, r21
    1848:	ea 17       	cp	r30, r26
    184a:	fb 07       	cpc	r31, r27
    184c:	79 f4       	brne	.+30     	; 0x186c <free+0xd2>
    184e:	80 81       	ld	r24, Z
    1850:	91 81       	ldd	r25, Z+1	; 0x01
    1852:	84 0f       	add	r24, r20
    1854:	95 1f       	adc	r25, r21
    1856:	02 96       	adiw	r24, 0x02	; 2
    1858:	d9 01       	movw	r26, r18
    185a:	11 96       	adiw	r26, 0x01	; 1
    185c:	9c 93       	st	X, r25
    185e:	8e 93       	st	-X, r24
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	13 96       	adiw	r26, 0x03	; 3
    1866:	9c 93       	st	X, r25
    1868:	8e 93       	st	-X, r24
    186a:	12 97       	sbiw	r26, 0x02	; 2
    186c:	e0 e0       	ldi	r30, 0x00	; 0
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	9b 81       	ldd	r25, Y+3	; 0x03
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	19 f0       	breq	.+6      	; 0x187e <free+0xe4>
    1878:	fe 01       	movw	r30, r28
    187a:	ec 01       	movw	r28, r24
    187c:	f9 cf       	rjmp	.-14     	; 0x1870 <free+0xd6>
    187e:	ce 01       	movw	r24, r28
    1880:	02 96       	adiw	r24, 0x02	; 2
    1882:	28 81       	ld	r18, Y
    1884:	39 81       	ldd	r19, Y+1	; 0x01
    1886:	82 0f       	add	r24, r18
    1888:	93 1f       	adc	r25, r19
    188a:	20 91 ce 03 	lds	r18, 0x03CE
    188e:	30 91 cf 03 	lds	r19, 0x03CF
    1892:	28 17       	cp	r18, r24
    1894:	39 07       	cpc	r19, r25
    1896:	69 f4       	brne	.+26     	; 0x18b2 <free+0x118>
    1898:	30 97       	sbiw	r30, 0x00	; 0
    189a:	29 f4       	brne	.+10     	; 0x18a6 <free+0x10c>
    189c:	10 92 d1 03 	sts	0x03D1, r1
    18a0:	10 92 d0 03 	sts	0x03D0, r1
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <free+0x110>
    18a6:	13 82       	std	Z+3, r1	; 0x03
    18a8:	12 82       	std	Z+2, r1	; 0x02
    18aa:	d0 93 cf 03 	sts	0x03CF, r29
    18ae:	c0 93 ce 03 	sts	0x03CE, r28
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	08 95       	ret

000018b8 <fdevopen>:
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	ec 01       	movw	r28, r24
    18c2:	8b 01       	movw	r16, r22
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	31 f4       	brne	.+12     	; 0x18d4 <fdevopen+0x1c>
    18c8:	61 15       	cp	r22, r1
    18ca:	71 05       	cpc	r23, r1
    18cc:	19 f4       	brne	.+6      	; 0x18d4 <fdevopen+0x1c>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	38 c0       	rjmp	.+112    	; 0x1944 <fdevopen+0x8c>
    18d4:	6e e0       	ldi	r22, 0x0E	; 14
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <calloc>
    18e0:	fc 01       	movw	r30, r24
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	a1 f3       	breq	.-24     	; 0x18ce <fdevopen+0x16>
    18e6:	80 e8       	ldi	r24, 0x80	; 128
    18e8:	83 83       	std	Z+3, r24	; 0x03
    18ea:	01 15       	cp	r16, r1
    18ec:	11 05       	cpc	r17, r1
    18ee:	71 f0       	breq	.+28     	; 0x190c <fdevopen+0x54>
    18f0:	13 87       	std	Z+11, r17	; 0x0b
    18f2:	02 87       	std	Z+10, r16	; 0x0a
    18f4:	81 e8       	ldi	r24, 0x81	; 129
    18f6:	83 83       	std	Z+3, r24	; 0x03
    18f8:	80 91 d2 03 	lds	r24, 0x03D2
    18fc:	90 91 d3 03 	lds	r25, 0x03D3
    1900:	89 2b       	or	r24, r25
    1902:	21 f4       	brne	.+8      	; 0x190c <fdevopen+0x54>
    1904:	f0 93 d3 03 	sts	0x03D3, r31
    1908:	e0 93 d2 03 	sts	0x03D2, r30
    190c:	20 97       	sbiw	r28, 0x00	; 0
    190e:	c9 f0       	breq	.+50     	; 0x1942 <fdevopen+0x8a>
    1910:	d1 87       	std	Z+9, r29	; 0x09
    1912:	c0 87       	std	Z+8, r28	; 0x08
    1914:	83 81       	ldd	r24, Z+3	; 0x03
    1916:	82 60       	ori	r24, 0x02	; 2
    1918:	83 83       	std	Z+3, r24	; 0x03
    191a:	80 91 d4 03 	lds	r24, 0x03D4
    191e:	90 91 d5 03 	lds	r25, 0x03D5
    1922:	89 2b       	or	r24, r25
    1924:	71 f4       	brne	.+28     	; 0x1942 <fdevopen+0x8a>
    1926:	f0 93 d5 03 	sts	0x03D5, r31
    192a:	e0 93 d4 03 	sts	0x03D4, r30
    192e:	80 91 d6 03 	lds	r24, 0x03D6
    1932:	90 91 d7 03 	lds	r25, 0x03D7
    1936:	89 2b       	or	r24, r25
    1938:	21 f4       	brne	.+8      	; 0x1942 <fdevopen+0x8a>
    193a:	f0 93 d7 03 	sts	0x03D7, r31
    193e:	e0 93 d6 03 	sts	0x03D6, r30
    1942:	cf 01       	movw	r24, r30
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	08 95       	ret

0000194e <fprintf>:
    194e:	a0 e0       	ldi	r26, 0x00	; 0
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	ed ea       	ldi	r30, 0xAD	; 173
    1954:	fc e0       	ldi	r31, 0x0C	; 12
    1956:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__prologue_saves__+0x20>
    195a:	ae 01       	movw	r20, r28
    195c:	47 5f       	subi	r20, 0xF7	; 247
    195e:	5f 4f       	sbci	r21, 0xFF	; 255
    1960:	6f 81       	ldd	r22, Y+7	; 0x07
    1962:	78 85       	ldd	r23, Y+8	; 0x08
    1964:	8d 81       	ldd	r24, Y+5	; 0x05
    1966:	9e 81       	ldd	r25, Y+6	; 0x06
    1968:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <vfprintf>
    196c:	e2 e0       	ldi	r30, 0x02	; 2
    196e:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__epilogue_restores__+0x20>

00001972 <fputs>:
    1972:	ef 92       	push	r14
    1974:	ff 92       	push	r15
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	8b 01       	movw	r16, r22
    1980:	db 01       	movw	r26, r22
    1982:	13 96       	adiw	r26, 0x03	; 3
    1984:	2c 91       	ld	r18, X
    1986:	21 ff       	sbrs	r18, 1
    1988:	16 c0       	rjmp	.+44     	; 0x19b6 <fputs+0x44>
    198a:	ec 01       	movw	r28, r24
    198c:	e1 2c       	mov	r14, r1
    198e:	f1 2c       	mov	r15, r1
    1990:	89 91       	ld	r24, Y+
    1992:	88 23       	and	r24, r24
    1994:	71 f0       	breq	.+28     	; 0x19b2 <fputs+0x40>
    1996:	d8 01       	movw	r26, r16
    1998:	18 96       	adiw	r26, 0x08	; 8
    199a:	ed 91       	ld	r30, X+
    199c:	fc 91       	ld	r31, X
    199e:	19 97       	sbiw	r26, 0x09	; 9
    19a0:	b8 01       	movw	r22, r16
    19a2:	09 95       	icall
    19a4:	89 2b       	or	r24, r25
    19a6:	a1 f3       	breq	.-24     	; 0x1990 <fputs+0x1e>
    19a8:	ee 24       	eor	r14, r14
    19aa:	ea 94       	dec	r14
    19ac:	ff 24       	eor	r15, r15
    19ae:	fa 94       	dec	r15
    19b0:	ef cf       	rjmp	.-34     	; 0x1990 <fputs+0x1e>
    19b2:	c7 01       	movw	r24, r14
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <fputs+0x48>
    19b6:	8f ef       	ldi	r24, 0xFF	; 255
    19b8:	9f ef       	ldi	r25, 0xFF	; 255
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	e6 e0       	ldi	r30, 0x06	; 6
    19c0:	0c 94 e6 0f 	jmp	0x1fcc	; 0x1fcc <__epilogue_restores__+0x18>

000019c4 <printf>:
    19c4:	a0 e0       	ldi	r26, 0x00	; 0
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	e8 ee       	ldi	r30, 0xE8	; 232
    19ca:	fc e0       	ldi	r31, 0x0C	; 12
    19cc:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__prologue_saves__+0x20>
    19d0:	fe 01       	movw	r30, r28
    19d2:	35 96       	adiw	r30, 0x05	; 5
    19d4:	61 91       	ld	r22, Z+
    19d6:	71 91       	ld	r23, Z+
    19d8:	af 01       	movw	r20, r30
    19da:	80 91 d4 03 	lds	r24, 0x03D4
    19de:	90 91 d5 03 	lds	r25, 0x03D5
    19e2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <vfprintf>
    19e6:	e2 e0       	ldi	r30, 0x02	; 2
    19e8:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__epilogue_restores__+0x20>

000019ec <puts>:
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	e0 91 d4 03 	lds	r30, 0x03D4
    19f8:	f0 91 d5 03 	lds	r31, 0x03D5
    19fc:	23 81       	ldd	r18, Z+3	; 0x03
    19fe:	21 ff       	sbrs	r18, 1
    1a00:	1b c0       	rjmp	.+54     	; 0x1a38 <puts+0x4c>
    1a02:	ec 01       	movw	r28, r24
    1a04:	00 e0       	ldi	r16, 0x00	; 0
    1a06:	10 e0       	ldi	r17, 0x00	; 0
    1a08:	89 91       	ld	r24, Y+
    1a0a:	60 91 d4 03 	lds	r22, 0x03D4
    1a0e:	70 91 d5 03 	lds	r23, 0x03D5
    1a12:	db 01       	movw	r26, r22
    1a14:	18 96       	adiw	r26, 0x08	; 8
    1a16:	ed 91       	ld	r30, X+
    1a18:	fc 91       	ld	r31, X
    1a1a:	19 97       	sbiw	r26, 0x09	; 9
    1a1c:	88 23       	and	r24, r24
    1a1e:	31 f0       	breq	.+12     	; 0x1a2c <puts+0x40>
    1a20:	09 95       	icall
    1a22:	89 2b       	or	r24, r25
    1a24:	89 f3       	breq	.-30     	; 0x1a08 <puts+0x1c>
    1a26:	0f ef       	ldi	r16, 0xFF	; 255
    1a28:	1f ef       	ldi	r17, 0xFF	; 255
    1a2a:	ee cf       	rjmp	.-36     	; 0x1a08 <puts+0x1c>
    1a2c:	8a e0       	ldi	r24, 0x0A	; 10
    1a2e:	09 95       	icall
    1a30:	89 2b       	or	r24, r25
    1a32:	11 f4       	brne	.+4      	; 0x1a38 <puts+0x4c>
    1a34:	c8 01       	movw	r24, r16
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <puts+0x50>
    1a38:	8f ef       	ldi	r24, 0xFF	; 255
    1a3a:	9f ef       	ldi	r25, 0xFF	; 255
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	08 95       	ret

00001a46 <vfprintf>:
    1a46:	ac e0       	ldi	r26, 0x0C	; 12
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e9 e2       	ldi	r30, 0x29	; 41
    1a4c:	fd e0       	ldi	r31, 0x0D	; 13
    1a4e:	0c 94 be 0f 	jmp	0x1f7c	; 0x1f7c <__prologue_saves__>
    1a52:	7c 01       	movw	r14, r24
    1a54:	6b 01       	movw	r12, r22
    1a56:	8a 01       	movw	r16, r20
    1a58:	fc 01       	movw	r30, r24
    1a5a:	17 82       	std	Z+7, r1	; 0x07
    1a5c:	16 82       	std	Z+6, r1	; 0x06
    1a5e:	83 81       	ldd	r24, Z+3	; 0x03
    1a60:	81 ff       	sbrs	r24, 1
    1a62:	bd c1       	rjmp	.+890    	; 0x1dde <vfprintf+0x398>
    1a64:	ce 01       	movw	r24, r28
    1a66:	01 96       	adiw	r24, 0x01	; 1
    1a68:	4c 01       	movw	r8, r24
    1a6a:	f7 01       	movw	r30, r14
    1a6c:	93 81       	ldd	r25, Z+3	; 0x03
    1a6e:	f6 01       	movw	r30, r12
    1a70:	93 fd       	sbrc	r25, 3
    1a72:	85 91       	lpm	r24, Z+
    1a74:	93 ff       	sbrs	r25, 3
    1a76:	81 91       	ld	r24, Z+
    1a78:	6f 01       	movw	r12, r30
    1a7a:	88 23       	and	r24, r24
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <vfprintf+0x3a>
    1a7e:	ab c1       	rjmp	.+854    	; 0x1dd6 <vfprintf+0x390>
    1a80:	85 32       	cpi	r24, 0x25	; 37
    1a82:	39 f4       	brne	.+14     	; 0x1a92 <vfprintf+0x4c>
    1a84:	93 fd       	sbrc	r25, 3
    1a86:	85 91       	lpm	r24, Z+
    1a88:	93 ff       	sbrs	r25, 3
    1a8a:	81 91       	ld	r24, Z+
    1a8c:	6f 01       	movw	r12, r30
    1a8e:	85 32       	cpi	r24, 0x25	; 37
    1a90:	29 f4       	brne	.+10     	; 0x1a9c <vfprintf+0x56>
    1a92:	b7 01       	movw	r22, r14
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1a9a:	e7 cf       	rjmp	.-50     	; 0x1a6a <vfprintf+0x24>
    1a9c:	51 2c       	mov	r5, r1
    1a9e:	31 2c       	mov	r3, r1
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	20 32       	cpi	r18, 0x20	; 32
    1aa4:	a0 f4       	brcc	.+40     	; 0x1ace <vfprintf+0x88>
    1aa6:	8b 32       	cpi	r24, 0x2B	; 43
    1aa8:	69 f0       	breq	.+26     	; 0x1ac4 <vfprintf+0x7e>
    1aaa:	30 f4       	brcc	.+12     	; 0x1ab8 <vfprintf+0x72>
    1aac:	80 32       	cpi	r24, 0x20	; 32
    1aae:	59 f0       	breq	.+22     	; 0x1ac6 <vfprintf+0x80>
    1ab0:	83 32       	cpi	r24, 0x23	; 35
    1ab2:	69 f4       	brne	.+26     	; 0x1ace <vfprintf+0x88>
    1ab4:	20 61       	ori	r18, 0x10	; 16
    1ab6:	2c c0       	rjmp	.+88     	; 0x1b10 <vfprintf+0xca>
    1ab8:	8d 32       	cpi	r24, 0x2D	; 45
    1aba:	39 f0       	breq	.+14     	; 0x1aca <vfprintf+0x84>
    1abc:	80 33       	cpi	r24, 0x30	; 48
    1abe:	39 f4       	brne	.+14     	; 0x1ace <vfprintf+0x88>
    1ac0:	21 60       	ori	r18, 0x01	; 1
    1ac2:	26 c0       	rjmp	.+76     	; 0x1b10 <vfprintf+0xca>
    1ac4:	22 60       	ori	r18, 0x02	; 2
    1ac6:	24 60       	ori	r18, 0x04	; 4
    1ac8:	23 c0       	rjmp	.+70     	; 0x1b10 <vfprintf+0xca>
    1aca:	28 60       	ori	r18, 0x08	; 8
    1acc:	21 c0       	rjmp	.+66     	; 0x1b10 <vfprintf+0xca>
    1ace:	27 fd       	sbrc	r18, 7
    1ad0:	27 c0       	rjmp	.+78     	; 0x1b20 <vfprintf+0xda>
    1ad2:	30 ed       	ldi	r19, 0xD0	; 208
    1ad4:	38 0f       	add	r19, r24
    1ad6:	3a 30       	cpi	r19, 0x0A	; 10
    1ad8:	78 f4       	brcc	.+30     	; 0x1af8 <vfprintf+0xb2>
    1ada:	26 ff       	sbrs	r18, 6
    1adc:	06 c0       	rjmp	.+12     	; 0x1aea <vfprintf+0xa4>
    1ade:	fa e0       	ldi	r31, 0x0A	; 10
    1ae0:	5f 9e       	mul	r5, r31
    1ae2:	30 0d       	add	r19, r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	53 2e       	mov	r5, r19
    1ae8:	13 c0       	rjmp	.+38     	; 0x1b10 <vfprintf+0xca>
    1aea:	8a e0       	ldi	r24, 0x0A	; 10
    1aec:	38 9e       	mul	r3, r24
    1aee:	30 0d       	add	r19, r0
    1af0:	11 24       	eor	r1, r1
    1af2:	33 2e       	mov	r3, r19
    1af4:	20 62       	ori	r18, 0x20	; 32
    1af6:	0c c0       	rjmp	.+24     	; 0x1b10 <vfprintf+0xca>
    1af8:	8e 32       	cpi	r24, 0x2E	; 46
    1afa:	21 f4       	brne	.+8      	; 0x1b04 <vfprintf+0xbe>
    1afc:	26 fd       	sbrc	r18, 6
    1afe:	6b c1       	rjmp	.+726    	; 0x1dd6 <vfprintf+0x390>
    1b00:	20 64       	ori	r18, 0x40	; 64
    1b02:	06 c0       	rjmp	.+12     	; 0x1b10 <vfprintf+0xca>
    1b04:	8c 36       	cpi	r24, 0x6C	; 108
    1b06:	11 f4       	brne	.+4      	; 0x1b0c <vfprintf+0xc6>
    1b08:	20 68       	ori	r18, 0x80	; 128
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <vfprintf+0xca>
    1b0c:	88 36       	cpi	r24, 0x68	; 104
    1b0e:	41 f4       	brne	.+16     	; 0x1b20 <vfprintf+0xda>
    1b10:	f6 01       	movw	r30, r12
    1b12:	93 fd       	sbrc	r25, 3
    1b14:	85 91       	lpm	r24, Z+
    1b16:	93 ff       	sbrs	r25, 3
    1b18:	81 91       	ld	r24, Z+
    1b1a:	6f 01       	movw	r12, r30
    1b1c:	81 11       	cpse	r24, r1
    1b1e:	c1 cf       	rjmp	.-126    	; 0x1aa2 <vfprintf+0x5c>
    1b20:	98 2f       	mov	r25, r24
    1b22:	9f 7d       	andi	r25, 0xDF	; 223
    1b24:	95 54       	subi	r25, 0x45	; 69
    1b26:	93 30       	cpi	r25, 0x03	; 3
    1b28:	28 f4       	brcc	.+10     	; 0x1b34 <vfprintf+0xee>
    1b2a:	0c 5f       	subi	r16, 0xFC	; 252
    1b2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b2e:	ff e3       	ldi	r31, 0x3F	; 63
    1b30:	f9 83       	std	Y+1, r31	; 0x01
    1b32:	0d c0       	rjmp	.+26     	; 0x1b4e <vfprintf+0x108>
    1b34:	83 36       	cpi	r24, 0x63	; 99
    1b36:	31 f0       	breq	.+12     	; 0x1b44 <vfprintf+0xfe>
    1b38:	83 37       	cpi	r24, 0x73	; 115
    1b3a:	71 f0       	breq	.+28     	; 0x1b58 <vfprintf+0x112>
    1b3c:	83 35       	cpi	r24, 0x53	; 83
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <vfprintf+0xfc>
    1b40:	5b c0       	rjmp	.+182    	; 0x1bf8 <vfprintf+0x1b2>
    1b42:	22 c0       	rjmp	.+68     	; 0x1b88 <vfprintf+0x142>
    1b44:	f8 01       	movw	r30, r16
    1b46:	80 81       	ld	r24, Z
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	0e 5f       	subi	r16, 0xFE	; 254
    1b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4e:	44 24       	eor	r4, r4
    1b50:	43 94       	inc	r4
    1b52:	51 2c       	mov	r5, r1
    1b54:	54 01       	movw	r10, r8
    1b56:	15 c0       	rjmp	.+42     	; 0x1b82 <vfprintf+0x13c>
    1b58:	38 01       	movw	r6, r16
    1b5a:	f2 e0       	ldi	r31, 0x02	; 2
    1b5c:	6f 0e       	add	r6, r31
    1b5e:	71 1c       	adc	r7, r1
    1b60:	f8 01       	movw	r30, r16
    1b62:	a0 80       	ld	r10, Z
    1b64:	b1 80       	ldd	r11, Z+1	; 0x01
    1b66:	26 ff       	sbrs	r18, 6
    1b68:	03 c0       	rjmp	.+6      	; 0x1b70 <vfprintf+0x12a>
    1b6a:	65 2d       	mov	r22, r5
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <vfprintf+0x12e>
    1b70:	6f ef       	ldi	r22, 0xFF	; 255
    1b72:	7f ef       	ldi	r23, 0xFF	; 255
    1b74:	c5 01       	movw	r24, r10
    1b76:	2c 87       	std	Y+12, r18	; 0x0c
    1b78:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <strnlen>
    1b7c:	2c 01       	movw	r4, r24
    1b7e:	83 01       	movw	r16, r6
    1b80:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b82:	2f 77       	andi	r18, 0x7F	; 127
    1b84:	22 2e       	mov	r2, r18
    1b86:	17 c0       	rjmp	.+46     	; 0x1bb6 <vfprintf+0x170>
    1b88:	38 01       	movw	r6, r16
    1b8a:	f2 e0       	ldi	r31, 0x02	; 2
    1b8c:	6f 0e       	add	r6, r31
    1b8e:	71 1c       	adc	r7, r1
    1b90:	f8 01       	movw	r30, r16
    1b92:	a0 80       	ld	r10, Z
    1b94:	b1 80       	ldd	r11, Z+1	; 0x01
    1b96:	26 ff       	sbrs	r18, 6
    1b98:	03 c0       	rjmp	.+6      	; 0x1ba0 <vfprintf+0x15a>
    1b9a:	65 2d       	mov	r22, r5
    1b9c:	70 e0       	ldi	r23, 0x00	; 0
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <vfprintf+0x15e>
    1ba0:	6f ef       	ldi	r22, 0xFF	; 255
    1ba2:	7f ef       	ldi	r23, 0xFF	; 255
    1ba4:	c5 01       	movw	r24, r10
    1ba6:	2c 87       	std	Y+12, r18	; 0x0c
    1ba8:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <strnlen_P>
    1bac:	2c 01       	movw	r4, r24
    1bae:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bb0:	20 68       	ori	r18, 0x80	; 128
    1bb2:	22 2e       	mov	r2, r18
    1bb4:	83 01       	movw	r16, r6
    1bb6:	23 fc       	sbrc	r2, 3
    1bb8:	1b c0       	rjmp	.+54     	; 0x1bf0 <vfprintf+0x1aa>
    1bba:	83 2d       	mov	r24, r3
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	48 16       	cp	r4, r24
    1bc0:	59 06       	cpc	r5, r25
    1bc2:	b0 f4       	brcc	.+44     	; 0x1bf0 <vfprintf+0x1aa>
    1bc4:	b7 01       	movw	r22, r14
    1bc6:	80 e2       	ldi	r24, 0x20	; 32
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1bce:	3a 94       	dec	r3
    1bd0:	f4 cf       	rjmp	.-24     	; 0x1bba <vfprintf+0x174>
    1bd2:	f5 01       	movw	r30, r10
    1bd4:	27 fc       	sbrc	r2, 7
    1bd6:	85 91       	lpm	r24, Z+
    1bd8:	27 fe       	sbrs	r2, 7
    1bda:	81 91       	ld	r24, Z+
    1bdc:	5f 01       	movw	r10, r30
    1bde:	b7 01       	movw	r22, r14
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1be6:	31 10       	cpse	r3, r1
    1be8:	3a 94       	dec	r3
    1bea:	f1 e0       	ldi	r31, 0x01	; 1
    1bec:	4f 1a       	sub	r4, r31
    1bee:	51 08       	sbc	r5, r1
    1bf0:	41 14       	cp	r4, r1
    1bf2:	51 04       	cpc	r5, r1
    1bf4:	71 f7       	brne	.-36     	; 0x1bd2 <vfprintf+0x18c>
    1bf6:	e5 c0       	rjmp	.+458    	; 0x1dc2 <vfprintf+0x37c>
    1bf8:	84 36       	cpi	r24, 0x64	; 100
    1bfa:	11 f0       	breq	.+4      	; 0x1c00 <vfprintf+0x1ba>
    1bfc:	89 36       	cpi	r24, 0x69	; 105
    1bfe:	39 f5       	brne	.+78     	; 0x1c4e <vfprintf+0x208>
    1c00:	f8 01       	movw	r30, r16
    1c02:	27 ff       	sbrs	r18, 7
    1c04:	07 c0       	rjmp	.+14     	; 0x1c14 <vfprintf+0x1ce>
    1c06:	60 81       	ld	r22, Z
    1c08:	71 81       	ldd	r23, Z+1	; 0x01
    1c0a:	82 81       	ldd	r24, Z+2	; 0x02
    1c0c:	93 81       	ldd	r25, Z+3	; 0x03
    1c0e:	0c 5f       	subi	r16, 0xFC	; 252
    1c10:	1f 4f       	sbci	r17, 0xFF	; 255
    1c12:	08 c0       	rjmp	.+16     	; 0x1c24 <vfprintf+0x1de>
    1c14:	60 81       	ld	r22, Z
    1c16:	71 81       	ldd	r23, Z+1	; 0x01
    1c18:	88 27       	eor	r24, r24
    1c1a:	77 fd       	sbrc	r23, 7
    1c1c:	80 95       	com	r24
    1c1e:	98 2f       	mov	r25, r24
    1c20:	0e 5f       	subi	r16, 0xFE	; 254
    1c22:	1f 4f       	sbci	r17, 0xFF	; 255
    1c24:	2f 76       	andi	r18, 0x6F	; 111
    1c26:	b2 2e       	mov	r11, r18
    1c28:	97 ff       	sbrs	r25, 7
    1c2a:	09 c0       	rjmp	.+18     	; 0x1c3e <vfprintf+0x1f8>
    1c2c:	90 95       	com	r25
    1c2e:	80 95       	com	r24
    1c30:	70 95       	com	r23
    1c32:	61 95       	neg	r22
    1c34:	7f 4f       	sbci	r23, 0xFF	; 255
    1c36:	8f 4f       	sbci	r24, 0xFF	; 255
    1c38:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3a:	20 68       	ori	r18, 0x80	; 128
    1c3c:	b2 2e       	mov	r11, r18
    1c3e:	2a e0       	ldi	r18, 0x0A	; 10
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	a4 01       	movw	r20, r8
    1c44:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__ultoa_invert>
    1c48:	a8 2e       	mov	r10, r24
    1c4a:	a8 18       	sub	r10, r8
    1c4c:	44 c0       	rjmp	.+136    	; 0x1cd6 <vfprintf+0x290>
    1c4e:	85 37       	cpi	r24, 0x75	; 117
    1c50:	29 f4       	brne	.+10     	; 0x1c5c <vfprintf+0x216>
    1c52:	2f 7e       	andi	r18, 0xEF	; 239
    1c54:	b2 2e       	mov	r11, r18
    1c56:	2a e0       	ldi	r18, 0x0A	; 10
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	25 c0       	rjmp	.+74     	; 0x1ca6 <vfprintf+0x260>
    1c5c:	f2 2f       	mov	r31, r18
    1c5e:	f9 7f       	andi	r31, 0xF9	; 249
    1c60:	bf 2e       	mov	r11, r31
    1c62:	8f 36       	cpi	r24, 0x6F	; 111
    1c64:	c1 f0       	breq	.+48     	; 0x1c96 <vfprintf+0x250>
    1c66:	18 f4       	brcc	.+6      	; 0x1c6e <vfprintf+0x228>
    1c68:	88 35       	cpi	r24, 0x58	; 88
    1c6a:	79 f0       	breq	.+30     	; 0x1c8a <vfprintf+0x244>
    1c6c:	b4 c0       	rjmp	.+360    	; 0x1dd6 <vfprintf+0x390>
    1c6e:	80 37       	cpi	r24, 0x70	; 112
    1c70:	19 f0       	breq	.+6      	; 0x1c78 <vfprintf+0x232>
    1c72:	88 37       	cpi	r24, 0x78	; 120
    1c74:	21 f0       	breq	.+8      	; 0x1c7e <vfprintf+0x238>
    1c76:	af c0       	rjmp	.+350    	; 0x1dd6 <vfprintf+0x390>
    1c78:	2f 2f       	mov	r18, r31
    1c7a:	20 61       	ori	r18, 0x10	; 16
    1c7c:	b2 2e       	mov	r11, r18
    1c7e:	b4 fe       	sbrs	r11, 4
    1c80:	0d c0       	rjmp	.+26     	; 0x1c9c <vfprintf+0x256>
    1c82:	8b 2d       	mov	r24, r11
    1c84:	84 60       	ori	r24, 0x04	; 4
    1c86:	b8 2e       	mov	r11, r24
    1c88:	09 c0       	rjmp	.+18     	; 0x1c9c <vfprintf+0x256>
    1c8a:	24 ff       	sbrs	r18, 4
    1c8c:	0a c0       	rjmp	.+20     	; 0x1ca2 <vfprintf+0x25c>
    1c8e:	9f 2f       	mov	r25, r31
    1c90:	96 60       	ori	r25, 0x06	; 6
    1c92:	b9 2e       	mov	r11, r25
    1c94:	06 c0       	rjmp	.+12     	; 0x1ca2 <vfprintf+0x25c>
    1c96:	28 e0       	ldi	r18, 0x08	; 8
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	05 c0       	rjmp	.+10     	; 0x1ca6 <vfprintf+0x260>
    1c9c:	20 e1       	ldi	r18, 0x10	; 16
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <vfprintf+0x260>
    1ca2:	20 e1       	ldi	r18, 0x10	; 16
    1ca4:	32 e0       	ldi	r19, 0x02	; 2
    1ca6:	f8 01       	movw	r30, r16
    1ca8:	b7 fe       	sbrs	r11, 7
    1caa:	07 c0       	rjmp	.+14     	; 0x1cba <vfprintf+0x274>
    1cac:	60 81       	ld	r22, Z
    1cae:	71 81       	ldd	r23, Z+1	; 0x01
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	93 81       	ldd	r25, Z+3	; 0x03
    1cb4:	0c 5f       	subi	r16, 0xFC	; 252
    1cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb8:	06 c0       	rjmp	.+12     	; 0x1cc6 <vfprintf+0x280>
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 5f       	subi	r16, 0xFE	; 254
    1cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc6:	a4 01       	movw	r20, r8
    1cc8:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <__ultoa_invert>
    1ccc:	a8 2e       	mov	r10, r24
    1cce:	a8 18       	sub	r10, r8
    1cd0:	fb 2d       	mov	r31, r11
    1cd2:	ff 77       	andi	r31, 0x7F	; 127
    1cd4:	bf 2e       	mov	r11, r31
    1cd6:	b6 fe       	sbrs	r11, 6
    1cd8:	0b c0       	rjmp	.+22     	; 0x1cf0 <vfprintf+0x2aa>
    1cda:	2b 2d       	mov	r18, r11
    1cdc:	2e 7f       	andi	r18, 0xFE	; 254
    1cde:	a5 14       	cp	r10, r5
    1ce0:	50 f4       	brcc	.+20     	; 0x1cf6 <vfprintf+0x2b0>
    1ce2:	b4 fe       	sbrs	r11, 4
    1ce4:	0a c0       	rjmp	.+20     	; 0x1cfa <vfprintf+0x2b4>
    1ce6:	b2 fc       	sbrc	r11, 2
    1ce8:	08 c0       	rjmp	.+16     	; 0x1cfa <vfprintf+0x2b4>
    1cea:	2b 2d       	mov	r18, r11
    1cec:	2e 7e       	andi	r18, 0xEE	; 238
    1cee:	05 c0       	rjmp	.+10     	; 0x1cfa <vfprintf+0x2b4>
    1cf0:	7a 2c       	mov	r7, r10
    1cf2:	2b 2d       	mov	r18, r11
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <vfprintf+0x2b6>
    1cf6:	7a 2c       	mov	r7, r10
    1cf8:	01 c0       	rjmp	.+2      	; 0x1cfc <vfprintf+0x2b6>
    1cfa:	75 2c       	mov	r7, r5
    1cfc:	24 ff       	sbrs	r18, 4
    1cfe:	0d c0       	rjmp	.+26     	; 0x1d1a <vfprintf+0x2d4>
    1d00:	fe 01       	movw	r30, r28
    1d02:	ea 0d       	add	r30, r10
    1d04:	f1 1d       	adc	r31, r1
    1d06:	80 81       	ld	r24, Z
    1d08:	80 33       	cpi	r24, 0x30	; 48
    1d0a:	11 f4       	brne	.+4      	; 0x1d10 <vfprintf+0x2ca>
    1d0c:	29 7e       	andi	r18, 0xE9	; 233
    1d0e:	09 c0       	rjmp	.+18     	; 0x1d22 <vfprintf+0x2dc>
    1d10:	22 ff       	sbrs	r18, 2
    1d12:	06 c0       	rjmp	.+12     	; 0x1d20 <vfprintf+0x2da>
    1d14:	73 94       	inc	r7
    1d16:	73 94       	inc	r7
    1d18:	04 c0       	rjmp	.+8      	; 0x1d22 <vfprintf+0x2dc>
    1d1a:	82 2f       	mov	r24, r18
    1d1c:	86 78       	andi	r24, 0x86	; 134
    1d1e:	09 f0       	breq	.+2      	; 0x1d22 <vfprintf+0x2dc>
    1d20:	73 94       	inc	r7
    1d22:	23 fd       	sbrc	r18, 3
    1d24:	13 c0       	rjmp	.+38     	; 0x1d4c <vfprintf+0x306>
    1d26:	20 ff       	sbrs	r18, 0
    1d28:	06 c0       	rjmp	.+12     	; 0x1d36 <vfprintf+0x2f0>
    1d2a:	5a 2c       	mov	r5, r10
    1d2c:	73 14       	cp	r7, r3
    1d2e:	18 f4       	brcc	.+6      	; 0x1d36 <vfprintf+0x2f0>
    1d30:	53 0c       	add	r5, r3
    1d32:	57 18       	sub	r5, r7
    1d34:	73 2c       	mov	r7, r3
    1d36:	73 14       	cp	r7, r3
    1d38:	68 f4       	brcc	.+26     	; 0x1d54 <vfprintf+0x30e>
    1d3a:	b7 01       	movw	r22, r14
    1d3c:	80 e2       	ldi	r24, 0x20	; 32
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	2c 87       	std	Y+12, r18	; 0x0c
    1d42:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1d46:	73 94       	inc	r7
    1d48:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d4a:	f5 cf       	rjmp	.-22     	; 0x1d36 <vfprintf+0x2f0>
    1d4c:	73 14       	cp	r7, r3
    1d4e:	10 f4       	brcc	.+4      	; 0x1d54 <vfprintf+0x30e>
    1d50:	37 18       	sub	r3, r7
    1d52:	01 c0       	rjmp	.+2      	; 0x1d56 <vfprintf+0x310>
    1d54:	31 2c       	mov	r3, r1
    1d56:	24 ff       	sbrs	r18, 4
    1d58:	12 c0       	rjmp	.+36     	; 0x1d7e <vfprintf+0x338>
    1d5a:	b7 01       	movw	r22, r14
    1d5c:	80 e3       	ldi	r24, 0x30	; 48
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	2c 87       	std	Y+12, r18	; 0x0c
    1d62:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1d66:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d68:	22 ff       	sbrs	r18, 2
    1d6a:	17 c0       	rjmp	.+46     	; 0x1d9a <vfprintf+0x354>
    1d6c:	21 ff       	sbrs	r18, 1
    1d6e:	03 c0       	rjmp	.+6      	; 0x1d76 <vfprintf+0x330>
    1d70:	88 e5       	ldi	r24, 0x58	; 88
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <vfprintf+0x334>
    1d76:	88 e7       	ldi	r24, 0x78	; 120
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	b7 01       	movw	r22, r14
    1d7c:	0c c0       	rjmp	.+24     	; 0x1d96 <vfprintf+0x350>
    1d7e:	82 2f       	mov	r24, r18
    1d80:	86 78       	andi	r24, 0x86	; 134
    1d82:	59 f0       	breq	.+22     	; 0x1d9a <vfprintf+0x354>
    1d84:	21 fd       	sbrc	r18, 1
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <vfprintf+0x346>
    1d88:	80 e2       	ldi	r24, 0x20	; 32
    1d8a:	01 c0       	rjmp	.+2      	; 0x1d8e <vfprintf+0x348>
    1d8c:	8b e2       	ldi	r24, 0x2B	; 43
    1d8e:	27 fd       	sbrc	r18, 7
    1d90:	8d e2       	ldi	r24, 0x2D	; 45
    1d92:	b7 01       	movw	r22, r14
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1d9a:	a5 14       	cp	r10, r5
    1d9c:	38 f4       	brcc	.+14     	; 0x1dac <vfprintf+0x366>
    1d9e:	b7 01       	movw	r22, r14
    1da0:	80 e3       	ldi	r24, 0x30	; 48
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1da8:	5a 94       	dec	r5
    1daa:	f7 cf       	rjmp	.-18     	; 0x1d9a <vfprintf+0x354>
    1dac:	aa 94       	dec	r10
    1dae:	f4 01       	movw	r30, r8
    1db0:	ea 0d       	add	r30, r10
    1db2:	f1 1d       	adc	r31, r1
    1db4:	80 81       	ld	r24, Z
    1db6:	b7 01       	movw	r22, r14
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1dbe:	a1 10       	cpse	r10, r1
    1dc0:	f5 cf       	rjmp	.-22     	; 0x1dac <vfprintf+0x366>
    1dc2:	33 20       	and	r3, r3
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <vfprintf+0x382>
    1dc6:	51 ce       	rjmp	.-862    	; 0x1a6a <vfprintf+0x24>
    1dc8:	b7 01       	movw	r22, r14
    1dca:	80 e2       	ldi	r24, 0x20	; 32
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <fputc>
    1dd2:	3a 94       	dec	r3
    1dd4:	f6 cf       	rjmp	.-20     	; 0x1dc2 <vfprintf+0x37c>
    1dd6:	f7 01       	movw	r30, r14
    1dd8:	86 81       	ldd	r24, Z+6	; 0x06
    1dda:	97 81       	ldd	r25, Z+7	; 0x07
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <vfprintf+0x39c>
    1dde:	8f ef       	ldi	r24, 0xFF	; 255
    1de0:	9f ef       	ldi	r25, 0xFF	; 255
    1de2:	2c 96       	adiw	r28, 0x0c	; 12
    1de4:	e2 e1       	ldi	r30, 0x12	; 18
    1de6:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__epilogue_restores__>

00001dea <calloc>:
    1dea:	0f 93       	push	r16
    1dec:	1f 93       	push	r17
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	86 9f       	mul	r24, r22
    1df4:	80 01       	movw	r16, r0
    1df6:	87 9f       	mul	r24, r23
    1df8:	10 0d       	add	r17, r0
    1dfa:	96 9f       	mul	r25, r22
    1dfc:	10 0d       	add	r17, r0
    1dfe:	11 24       	eor	r1, r1
    1e00:	c8 01       	movw	r24, r16
    1e02:	0e 94 35 0b 	call	0x166a	; 0x166a <malloc>
    1e06:	ec 01       	movw	r28, r24
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	29 f0       	breq	.+10     	; 0x1e16 <calloc+0x2c>
    1e0c:	a8 01       	movw	r20, r16
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <memset>
    1e16:	ce 01       	movw	r24, r28
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	08 95       	ret

00001e22 <strnlen_P>:
    1e22:	fc 01       	movw	r30, r24
    1e24:	05 90       	lpm	r0, Z+
    1e26:	61 50       	subi	r22, 0x01	; 1
    1e28:	70 40       	sbci	r23, 0x00	; 0
    1e2a:	01 10       	cpse	r0, r1
    1e2c:	d8 f7       	brcc	.-10     	; 0x1e24 <strnlen_P+0x2>
    1e2e:	80 95       	com	r24
    1e30:	90 95       	com	r25
    1e32:	8e 0f       	add	r24, r30
    1e34:	9f 1f       	adc	r25, r31
    1e36:	08 95       	ret

00001e38 <memset>:
    1e38:	dc 01       	movw	r26, r24
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <memset+0x6>
    1e3c:	6d 93       	st	X+, r22
    1e3e:	41 50       	subi	r20, 0x01	; 1
    1e40:	50 40       	sbci	r21, 0x00	; 0
    1e42:	e0 f7       	brcc	.-8      	; 0x1e3c <memset+0x4>
    1e44:	08 95       	ret

00001e46 <strnlen>:
    1e46:	fc 01       	movw	r30, r24
    1e48:	61 50       	subi	r22, 0x01	; 1
    1e4a:	70 40       	sbci	r23, 0x00	; 0
    1e4c:	01 90       	ld	r0, Z+
    1e4e:	01 10       	cpse	r0, r1
    1e50:	d8 f7       	brcc	.-10     	; 0x1e48 <strnlen+0x2>
    1e52:	80 95       	com	r24
    1e54:	90 95       	com	r25
    1e56:	8e 0f       	add	r24, r30
    1e58:	9f 1f       	adc	r25, r31
    1e5a:	08 95       	ret

00001e5c <fputc>:
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	18 2f       	mov	r17, r24
    1e66:	09 2f       	mov	r16, r25
    1e68:	eb 01       	movw	r28, r22
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	81 fd       	sbrc	r24, 1
    1e6e:	03 c0       	rjmp	.+6      	; 0x1e76 <fputc+0x1a>
    1e70:	8f ef       	ldi	r24, 0xFF	; 255
    1e72:	9f ef       	ldi	r25, 0xFF	; 255
    1e74:	20 c0       	rjmp	.+64     	; 0x1eb6 <fputc+0x5a>
    1e76:	82 ff       	sbrs	r24, 2
    1e78:	10 c0       	rjmp	.+32     	; 0x1e9a <fputc+0x3e>
    1e7a:	4e 81       	ldd	r20, Y+6	; 0x06
    1e7c:	5f 81       	ldd	r21, Y+7	; 0x07
    1e7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e80:	3d 81       	ldd	r19, Y+5	; 0x05
    1e82:	42 17       	cp	r20, r18
    1e84:	53 07       	cpc	r21, r19
    1e86:	7c f4       	brge	.+30     	; 0x1ea6 <fputc+0x4a>
    1e88:	e8 81       	ld	r30, Y
    1e8a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e8c:	9f 01       	movw	r18, r30
    1e8e:	2f 5f       	subi	r18, 0xFF	; 255
    1e90:	3f 4f       	sbci	r19, 0xFF	; 255
    1e92:	39 83       	std	Y+1, r19	; 0x01
    1e94:	28 83       	st	Y, r18
    1e96:	10 83       	st	Z, r17
    1e98:	06 c0       	rjmp	.+12     	; 0x1ea6 <fputc+0x4a>
    1e9a:	e8 85       	ldd	r30, Y+8	; 0x08
    1e9c:	f9 85       	ldd	r31, Y+9	; 0x09
    1e9e:	81 2f       	mov	r24, r17
    1ea0:	09 95       	icall
    1ea2:	89 2b       	or	r24, r25
    1ea4:	29 f7       	brne	.-54     	; 0x1e70 <fputc+0x14>
    1ea6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ea8:	3f 81       	ldd	r19, Y+7	; 0x07
    1eaa:	2f 5f       	subi	r18, 0xFF	; 255
    1eac:	3f 4f       	sbci	r19, 0xFF	; 255
    1eae:	3f 83       	std	Y+7, r19	; 0x07
    1eb0:	2e 83       	std	Y+6, r18	; 0x06
    1eb2:	81 2f       	mov	r24, r17
    1eb4:	90 2f       	mov	r25, r16
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	1f 91       	pop	r17
    1ebc:	0f 91       	pop	r16
    1ebe:	08 95       	ret

00001ec0 <__ultoa_invert>:
    1ec0:	fa 01       	movw	r30, r20
    1ec2:	aa 27       	eor	r26, r26
    1ec4:	28 30       	cpi	r18, 0x08	; 8
    1ec6:	51 f1       	breq	.+84     	; 0x1f1c <__ultoa_invert+0x5c>
    1ec8:	20 31       	cpi	r18, 0x10	; 16
    1eca:	81 f1       	breq	.+96     	; 0x1f2c <__ultoa_invert+0x6c>
    1ecc:	e8 94       	clt
    1ece:	6f 93       	push	r22
    1ed0:	6e 7f       	andi	r22, 0xFE	; 254
    1ed2:	6e 5f       	subi	r22, 0xFE	; 254
    1ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eda:	af 4f       	sbci	r26, 0xFF	; 255
    1edc:	b1 e0       	ldi	r27, 0x01	; 1
    1ede:	3e d0       	rcall	.+124    	; 0x1f5c <__ultoa_invert+0x9c>
    1ee0:	b4 e0       	ldi	r27, 0x04	; 4
    1ee2:	3c d0       	rcall	.+120    	; 0x1f5c <__ultoa_invert+0x9c>
    1ee4:	67 0f       	add	r22, r23
    1ee6:	78 1f       	adc	r23, r24
    1ee8:	89 1f       	adc	r24, r25
    1eea:	9a 1f       	adc	r25, r26
    1eec:	a1 1d       	adc	r26, r1
    1eee:	68 0f       	add	r22, r24
    1ef0:	79 1f       	adc	r23, r25
    1ef2:	8a 1f       	adc	r24, r26
    1ef4:	91 1d       	adc	r25, r1
    1ef6:	a1 1d       	adc	r26, r1
    1ef8:	6a 0f       	add	r22, r26
    1efa:	71 1d       	adc	r23, r1
    1efc:	81 1d       	adc	r24, r1
    1efe:	91 1d       	adc	r25, r1
    1f00:	a1 1d       	adc	r26, r1
    1f02:	20 d0       	rcall	.+64     	; 0x1f44 <__ultoa_invert+0x84>
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <__ultoa_invert+0x48>
    1f06:	68 94       	set
    1f08:	3f 91       	pop	r19
    1f0a:	2a e0       	ldi	r18, 0x0A	; 10
    1f0c:	26 9f       	mul	r18, r22
    1f0e:	11 24       	eor	r1, r1
    1f10:	30 19       	sub	r19, r0
    1f12:	30 5d       	subi	r19, 0xD0	; 208
    1f14:	31 93       	st	Z+, r19
    1f16:	de f6       	brtc	.-74     	; 0x1ece <__ultoa_invert+0xe>
    1f18:	cf 01       	movw	r24, r30
    1f1a:	08 95       	ret
    1f1c:	46 2f       	mov	r20, r22
    1f1e:	47 70       	andi	r20, 0x07	; 7
    1f20:	40 5d       	subi	r20, 0xD0	; 208
    1f22:	41 93       	st	Z+, r20
    1f24:	b3 e0       	ldi	r27, 0x03	; 3
    1f26:	0f d0       	rcall	.+30     	; 0x1f46 <__ultoa_invert+0x86>
    1f28:	c9 f7       	brne	.-14     	; 0x1f1c <__ultoa_invert+0x5c>
    1f2a:	f6 cf       	rjmp	.-20     	; 0x1f18 <__ultoa_invert+0x58>
    1f2c:	46 2f       	mov	r20, r22
    1f2e:	4f 70       	andi	r20, 0x0F	; 15
    1f30:	40 5d       	subi	r20, 0xD0	; 208
    1f32:	4a 33       	cpi	r20, 0x3A	; 58
    1f34:	18 f0       	brcs	.+6      	; 0x1f3c <__ultoa_invert+0x7c>
    1f36:	49 5d       	subi	r20, 0xD9	; 217
    1f38:	31 fd       	sbrc	r19, 1
    1f3a:	40 52       	subi	r20, 0x20	; 32
    1f3c:	41 93       	st	Z+, r20
    1f3e:	02 d0       	rcall	.+4      	; 0x1f44 <__ultoa_invert+0x84>
    1f40:	a9 f7       	brne	.-22     	; 0x1f2c <__ultoa_invert+0x6c>
    1f42:	ea cf       	rjmp	.-44     	; 0x1f18 <__ultoa_invert+0x58>
    1f44:	b4 e0       	ldi	r27, 0x04	; 4
    1f46:	a6 95       	lsr	r26
    1f48:	97 95       	ror	r25
    1f4a:	87 95       	ror	r24
    1f4c:	77 95       	ror	r23
    1f4e:	67 95       	ror	r22
    1f50:	ba 95       	dec	r27
    1f52:	c9 f7       	brne	.-14     	; 0x1f46 <__ultoa_invert+0x86>
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	61 05       	cpc	r22, r1
    1f58:	71 05       	cpc	r23, r1
    1f5a:	08 95       	ret
    1f5c:	9b 01       	movw	r18, r22
    1f5e:	ac 01       	movw	r20, r24
    1f60:	0a 2e       	mov	r0, r26
    1f62:	06 94       	lsr	r0
    1f64:	57 95       	ror	r21
    1f66:	47 95       	ror	r20
    1f68:	37 95       	ror	r19
    1f6a:	27 95       	ror	r18
    1f6c:	ba 95       	dec	r27
    1f6e:	c9 f7       	brne	.-14     	; 0x1f62 <__ultoa_invert+0xa2>
    1f70:	62 0f       	add	r22, r18
    1f72:	73 1f       	adc	r23, r19
    1f74:	84 1f       	adc	r24, r20
    1f76:	95 1f       	adc	r25, r21
    1f78:	a0 1d       	adc	r26, r0
    1f7a:	08 95       	ret

00001f7c <__prologue_saves__>:
    1f7c:	2f 92       	push	r2
    1f7e:	3f 92       	push	r3
    1f80:	4f 92       	push	r4
    1f82:	5f 92       	push	r5
    1f84:	6f 92       	push	r6
    1f86:	7f 92       	push	r7
    1f88:	8f 92       	push	r8
    1f8a:	9f 92       	push	r9
    1f8c:	af 92       	push	r10
    1f8e:	bf 92       	push	r11
    1f90:	cf 92       	push	r12
    1f92:	df 92       	push	r13
    1f94:	ef 92       	push	r14
    1f96:	ff 92       	push	r15
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	ca 1b       	sub	r28, r26
    1fa6:	db 0b       	sbc	r29, r27
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	09 94       	ijmp

00001fb4 <__epilogue_restores__>:
    1fb4:	2a 88       	ldd	r2, Y+18	; 0x12
    1fb6:	39 88       	ldd	r3, Y+17	; 0x11
    1fb8:	48 88       	ldd	r4, Y+16	; 0x10
    1fba:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fbc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fbe:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fc0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fc2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fc4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fc6:	b9 84       	ldd	r11, Y+9	; 0x09
    1fc8:	c8 84       	ldd	r12, Y+8	; 0x08
    1fca:	df 80       	ldd	r13, Y+7	; 0x07
    1fcc:	ee 80       	ldd	r14, Y+6	; 0x06
    1fce:	fd 80       	ldd	r15, Y+5	; 0x05
    1fd0:	0c 81       	ldd	r16, Y+4	; 0x04
    1fd2:	1b 81       	ldd	r17, Y+3	; 0x03
    1fd4:	aa 81       	ldd	r26, Y+2	; 0x02
    1fd6:	b9 81       	ldd	r27, Y+1	; 0x01
    1fd8:	ce 0f       	add	r28, r30
    1fda:	d1 1d       	adc	r29, r1
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	ed 01       	movw	r28, r26
    1fe8:	08 95       	ret

00001fea <_exit>:
    1fea:	f8 94       	cli

00001fec <__stop_program>:
    1fec:	ff cf       	rjmp	.-2      	; 0x1fec <__stop_program>
