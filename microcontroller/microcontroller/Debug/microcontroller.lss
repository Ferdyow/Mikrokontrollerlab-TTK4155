
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b8  00800100  00001fe2  00002076  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fe2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002f  008003b8  008003b8  0000232e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000232e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003d0  00000000  00000000  0000238a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004826  00000000  00000000  0000275a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000019cc  00000000  00000000  00006f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001629  00000000  00000000  0000894c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000adc  00000000  00000000  00009f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b92  00000000  00000000  0000aa54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002587  00000000  00000000  0000b5e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000330  00000000  00000000  0000db6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	20 54       	subi	r18, 0x40	; 64
      92:	54 38       	cpi	r21, 0x84	; 132
      94:	54 54       	subi	r21, 0x44	; 68
      96:	58 00       	.word	0x0058	; ????
      98:	38 64       	ori	r19, 0x48	; 72
      9a:	54 54       	subi	r21, 0x44	; 68
      9c:	4c 38       	cpi	r20, 0x8C	; 140
      9e:	00 00       	nop
      a0:	20 50       	subi	r18, 0x00	; 0
      a2:	54 55       	subi	r21, 0x54	; 84
      a4:	54 78       	andi	r21, 0x84	; 132
      a6:	40 00       	.word	0x0040	; ????
      a8:	60 18       	sub	r6, r0
      aa:	16 11       	cpse	r17, r6
      ac:	7f 49       	sbci	r23, 0x9F	; 159
      ae:	49 00       	.word	0x0049	; ????
      b0:	5c 22       	and	r5, r28
      b2:	51 49       	sbci	r21, 0x91	; 145
      b4:	45 22       	and	r4, r21
      b6:	1d 00       	.word	0x001d	; ????
      b8:	60 30       	cpi	r22, 0x00	; 0
      ba:	28 25       	eor	r18, r8
      bc:	28 30       	cpi	r18, 0x08	; 8
      be:	60 00       	.word	0x0060	; ????
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <keyboard_run+0x1ba>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e2 ee       	ldi	r30, 0xE2	; 226
     37c:	ff e1       	ldi	r31, 0x1F	; 31
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 3b       	cpi	r26, 0xB8	; 184
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a8 eb       	ldi	r26, 0xB8	; 184
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a7 3e       	cpi	r26, 0xE7	; 231
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 a4 08 	call	0x1148	; 0x1148 <main>
     39e:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
     3a6:	30 98       	cbi	0x06, 0	; 6
     3a8:	08 95       	ret

000003aa <ADC_read>:
     3aa:	84 30       	cpi	r24, 0x04	; 4
     3ac:	40 f4       	brcc	.+16     	; 0x3be <ADC_read+0x14>
     3ae:	8c 5f       	subi	r24, 0xFC	; 252
     3b0:	80 93 00 14 	sts	0x1400, r24
     3b4:	28 99       	sbic	0x05, 0	; 5
     3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <ADC_read+0xa>
     3b8:	80 91 00 14 	lds	r24, 0x1400
     3bc:	08 95       	ret
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	08 95       	ret

000003c2 <brightness_init>:
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	0e 94 15 09 	call	0x122a	; 0x122a <OLED_reset>
     3ce:	8b e5       	ldi	r24, 0x5B	; 91
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	9f 93       	push	r25
     3d4:	8f 93       	push	r24
     3d6:	05 e6       	ldi	r16, 0x65	; 101
     3d8:	11 e0       	ldi	r17, 0x01	; 1
     3da:	1f 93       	push	r17
     3dc:	0f 93       	push	r16
     3de:	c6 e0       	ldi	r28, 0x06	; 6
     3e0:	d1 e0       	ldi	r29, 0x01	; 1
     3e2:	df 93       	push	r29
     3e4:	cf 93       	push	r28
     3e6:	0e 94 a1 0c 	call	0x1942	; 0x1942 <fprintf>
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <OLED_pos>
     3f2:	89 e6       	ldi	r24, 0x69	; 105
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	9f 93       	push	r25
     3f8:	8f 93       	push	r24
     3fa:	1f 93       	push	r17
     3fc:	0f 93       	push	r16
     3fe:	df 93       	push	r29
     400:	cf 93       	push	r28
     402:	0e 94 a1 0c 	call	0x1942	; 0x1942 <fprintf>
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <OLED_pos>
     40e:	89 e7       	ldi	r24, 0x79	; 121
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	9f 93       	push	r25
     414:	8f 93       	push	r24
     416:	1f 93       	push	r17
     418:	0f 93       	push	r16
     41a:	df 93       	push	r29
     41c:	cf 93       	push	r28
     41e:	0e 94 a1 0c 	call	0x1942	; 0x1942 <fprintf>
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <OLED_set_line>
     428:	85 e0       	ldi	r24, 0x05	; 5
     42a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <OLED_set_line>
     42e:	86 e0       	ldi	r24, 0x06	; 6
     430:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <OLED_set_line>
     434:	87 e0       	ldi	r24, 0x07	; 7
     436:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <OLED_set_line>
     43a:	8d b7       	in	r24, 0x3d	; 61
     43c:	9e b7       	in	r25, 0x3e	; 62
     43e:	42 96       	adiw	r24, 0x12	; 18
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	f8 94       	cli
     444:	9e bf       	out	0x3e, r25	; 62
     446:	0f be       	out	0x3f, r0	; 63
     448:	8d bf       	out	0x3d, r24	; 61
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	1f 91       	pop	r17
     450:	0f 91       	pop	r16
     452:	08 95       	ret

00000454 <brightness_run>:
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <brightness_init>
     45e:	c8 e8       	ldi	r28, 0x88	; 136
     460:	d1 e0       	ldi	r29, 0x01	; 1
     462:	10 c0       	rjmp	.+32     	; 0x484 <brightness_run+0x30>
     464:	0e 94 aa 03 	call	0x754	; 0x754 <SLI_getPosition>
     468:	16 2f       	mov	r17, r22
     46a:	7f 93       	push	r23
     46c:	6f 93       	push	r22
     46e:	df 93       	push	r29
     470:	cf 93       	push	r28
     472:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <printf>
     476:	81 2f       	mov	r24, r17
     478:	0e 94 4c 09 	call	0x1298	; 0x1298 <OLED_set_brightness>
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
     48a:	89 2b       	or	r24, r25
     48c:	59 f3       	breq	.-42     	; 0x464 <brightness_run+0x10>
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	08 95       	ret

00000496 <CAN_int_vect>:
     496:	cf 93       	push	r28
     498:	8c e2       	ldi	r24, 0x2C	; 44
     49a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <MCP2515_read>
     49e:	c8 2f       	mov	r28, r24
     4a0:	80 ff       	sbrs	r24, 0
     4a2:	0b c0       	rjmp	.+22     	; 0x4ba <CAN_int_vect+0x24>
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	61 e0       	ldi	r22, 0x01	; 1
     4a8:	8c e2       	ldi	r24, 0x2C	; 44
     4aa:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <MCP2515_bit_modify>
     4ae:	21 e0       	ldi	r18, 0x01	; 1
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	30 93 bb 03 	sts	0x03BB, r19
     4b6:	20 93 ba 03 	sts	0x03BA, r18
     4ba:	c1 ff       	sbrs	r28, 1
     4bc:	0b c0       	rjmp	.+22     	; 0x4d4 <CAN_int_vect+0x3e>
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	62 e0       	ldi	r22, 0x02	; 2
     4c2:	8c e2       	ldi	r24, 0x2C	; 44
     4c4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <MCP2515_bit_modify>
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	90 93 b9 03 	sts	0x03B9, r25
     4d0:	80 93 b8 03 	sts	0x03B8, r24
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <__vector_1>:
     4d8:	1f 92       	push	r1
     4da:	0f 92       	push	r0
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	0f 92       	push	r0
     4e0:	11 24       	eor	r1, r1
     4e2:	2f 93       	push	r18
     4e4:	3f 93       	push	r19
     4e6:	4f 93       	push	r20
     4e8:	5f 93       	push	r21
     4ea:	6f 93       	push	r22
     4ec:	7f 93       	push	r23
     4ee:	8f 93       	push	r24
     4f0:	9f 93       	push	r25
     4f2:	af 93       	push	r26
     4f4:	bf 93       	push	r27
     4f6:	ef 93       	push	r30
     4f8:	ff 93       	push	r31
     4fa:	0e 94 4b 02 	call	0x496	; 0x496 <CAN_int_vect>
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	bf 91       	pop	r27
     504:	af 91       	pop	r26
     506:	9f 91       	pop	r25
     508:	8f 91       	pop	r24
     50a:	7f 91       	pop	r23
     50c:	6f 91       	pop	r22
     50e:	5f 91       	pop	r21
     510:	4f 91       	pop	r20
     512:	3f 91       	pop	r19
     514:	2f 91       	pop	r18
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <JOY_calibrate>:
     520:	bf 92       	push	r11
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	10 92 c0 03 	sts	0x03C0, r1
     536:	10 92 c1 03 	sts	0x03C1, r1
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	80 93 c4 03 	sts	0x03C4, r24
     540:	80 93 c5 03 	sts	0x03C5, r24
     544:	0e 94 15 09 	call	0x122a	; 0x122a <OLED_reset>
     548:	83 ea       	ldi	r24, 0xA3	; 163
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <puts>
     550:	8d ec       	ldi	r24, 0xCD	; 205
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <puts>
     558:	82 ef       	ldi	r24, 0xF2	; 242
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	85 e6       	ldi	r24, 0x65	; 101
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	9f 93       	push	r25
     566:	8f 93       	push	r24
     568:	84 e1       	ldi	r24, 0x14	; 20
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	0e 94 a1 0c 	call	0x1942	; 0x1942 <fprintf>
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	04 ec       	ldi	r16, 0xC4	; 196
     582:	13 e0       	ldi	r17, 0x03	; 3
     584:	0f 2e       	mov	r0, r31
     586:	f0 ec       	ldi	r31, 0xC0	; 192
     588:	cf 2e       	mov	r12, r31
     58a:	f3 e0       	ldi	r31, 0x03	; 3
     58c:	df 2e       	mov	r13, r31
     58e:	f0 2d       	mov	r31, r0
     590:	c5 ec       	ldi	r28, 0xC5	; 197
     592:	d3 e0       	ldi	r29, 0x03	; 3
     594:	0f 2e       	mov	r0, r31
     596:	f1 ec       	ldi	r31, 0xC1	; 193
     598:	ef 2e       	mov	r14, r31
     59a:	f3 e0       	ldi	r31, 0x03	; 3
     59c:	ff 2e       	mov	r15, r31
     59e:	f0 2d       	mov	r31, r0
     5a0:	1c c0       	rjmp	.+56     	; 0x5da <JOY_calibrate+0xba>
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     5a8:	b8 2e       	mov	r11, r24
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     5b0:	f8 01       	movw	r30, r16
     5b2:	90 81       	ld	r25, Z
     5b4:	b9 16       	cp	r11, r25
     5b6:	10 f4       	brcc	.+4      	; 0x5bc <JOY_calibrate+0x9c>
     5b8:	b0 82       	st	Z, r11
     5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <JOY_calibrate+0xa6>
     5bc:	f6 01       	movw	r30, r12
     5be:	90 81       	ld	r25, Z
     5c0:	9b 15       	cp	r25, r11
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <JOY_calibrate+0xa6>
     5c4:	b0 82       	st	Z, r11
     5c6:	98 81       	ld	r25, Y
     5c8:	89 17       	cp	r24, r25
     5ca:	10 f4       	brcc	.+4      	; 0x5d0 <JOY_calibrate+0xb0>
     5cc:	88 83       	st	Y, r24
     5ce:	05 c0       	rjmp	.+10     	; 0x5da <JOY_calibrate+0xba>
     5d0:	f7 01       	movw	r30, r14
     5d2:	90 81       	ld	r25, Z
     5d4:	98 17       	cp	r25, r24
     5d6:	08 f4       	brcc	.+2      	; 0x5da <JOY_calibrate+0xba>
     5d8:	80 83       	st	Z, r24
     5da:	b2 99       	sbic	0x16, 2	; 22
     5dc:	e2 cf       	rjmp	.-60     	; 0x5a2 <JOY_calibrate+0x82>
     5de:	e0 91 c0 03 	lds	r30, 0x03C0
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	60 91 c4 03 	lds	r22, 0x03C4
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	9f 01       	movw	r18, r30
     5ec:	26 1b       	sub	r18, r22
     5ee:	37 0b       	sbc	r19, r23
     5f0:	c9 01       	movw	r24, r18
     5f2:	99 23       	and	r25, r25
     5f4:	0c f4       	brge	.+2      	; 0x5f8 <JOY_calibrate+0xd8>
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	95 95       	asr	r25
     5fa:	87 95       	ror	r24
     5fc:	80 93 c2 03 	sts	0x03C2, r24
     600:	40 91 c1 03 	lds	r20, 0x03C1
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	20 91 c5 03 	lds	r18, 0x03C5
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	da 01       	movw	r26, r20
     60e:	a2 1b       	sub	r26, r18
     610:	b3 0b       	sbc	r27, r19
     612:	cd 01       	movw	r24, r26
     614:	0a f4       	brpl	.+2      	; 0x618 <JOY_calibrate+0xf8>
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	95 95       	asr	r25
     61a:	87 95       	ror	r24
     61c:	80 93 c3 03 	sts	0x03C3, r24
     620:	6e 0f       	add	r22, r30
     622:	7f 1f       	adc	r23, r31
     624:	75 95       	asr	r23
     626:	67 95       	ror	r22
     628:	60 93 c6 03 	sts	0x03C6, r22
     62c:	24 0f       	add	r18, r20
     62e:	35 1f       	adc	r19, r21
     630:	35 95       	asr	r19
     632:	27 95       	ror	r18
     634:	20 93 c7 03 	sts	0x03C7, r18
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	df 90       	pop	r13
     646:	cf 90       	pop	r12
     648:	bf 90       	pop	r11
     64a:	08 95       	ret

0000064c <JOY_init>:
     64c:	c2 9a       	sbi	0x18, 2	; 24
     64e:	ba 98       	cbi	0x17, 2	; 23
     650:	80 b7       	in	r24, 0x30	; 48
     652:	8b 7f       	andi	r24, 0xFB	; 251
     654:	80 bf       	out	0x30, r24	; 48
     656:	0e 94 90 02 	call	0x520	; 0x520 <JOY_calibrate>
     65a:	08 95       	ret

0000065c <JOY_button_pressed>:
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	41 f0       	breq	.+16     	; 0x670 <JOY_button_pressed+0x14>
     660:	18 f0       	brcs	.+6      	; 0x668 <JOY_button_pressed+0xc>
     662:	82 30       	cpi	r24, 0x02	; 2
     664:	51 f0       	breq	.+20     	; 0x67a <JOY_button_pressed+0x1e>
     666:	11 c0       	rjmp	.+34     	; 0x68a <JOY_button_pressed+0x2e>
     668:	86 b3       	in	r24, 0x16	; 22
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	08 95       	ret
     670:	86 b3       	in	r24, 0x16	; 22
     672:	86 95       	lsr	r24
     674:	81 70       	andi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	08 95       	ret
     67a:	86 b3       	in	r24, 0x16	; 22
     67c:	86 95       	lsr	r24
     67e:	86 95       	lsr	r24
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	89 27       	eor	r24, r25
     684:	81 70       	andi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	08 95       	ret
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	08 95       	ret

00000690 <JOY_getPosition>:
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     69c:	28 2f       	mov	r18, r24
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	80 91 c6 03 	lds	r24, 0x03C6
     6a4:	28 1b       	sub	r18, r24
     6a6:	31 09       	sbc	r19, r1
     6a8:	14 e6       	ldi	r17, 0x64	; 100
     6aa:	12 9f       	mul	r17, r18
     6ac:	c0 01       	movw	r24, r0
     6ae:	13 9f       	mul	r17, r19
     6b0:	90 0d       	add	r25, r0
     6b2:	11 24       	eor	r1, r1
     6b4:	60 91 c2 03 	lds	r22, 0x03C2
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     6be:	eb 01       	movw	r28, r22
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     6c6:	28 2f       	mov	r18, r24
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	80 91 c7 03 	lds	r24, 0x03C7
     6ce:	28 1b       	sub	r18, r24
     6d0:	31 09       	sbc	r19, r1
     6d2:	12 9f       	mul	r17, r18
     6d4:	c0 01       	movw	r24, r0
     6d6:	13 9f       	mul	r17, r19
     6d8:	90 0d       	add	r25, r0
     6da:	11 24       	eor	r1, r1
     6dc:	60 91 c3 03 	lds	r22, 0x03C3
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     6e6:	9b 01       	movw	r18, r22
     6e8:	be 01       	movw	r22, r28
     6ea:	c9 01       	movw	r24, r18
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	08 95       	ret

000006f4 <JOY_getDirection>:
     6f4:	0e 94 48 03 	call	0x690	; 0x690 <JOY_getPosition>
     6f8:	fb 01       	movw	r30, r22
     6fa:	ac 01       	movw	r20, r24
     6fc:	9b 01       	movw	r18, r22
     6fe:	2c 5f       	subi	r18, 0xFC	; 252
     700:	3f 4f       	sbci	r19, 0xFF	; 255
     702:	29 30       	cpi	r18, 0x09	; 9
     704:	31 05       	cpc	r19, r1
     706:	30 f4       	brcc	.+12     	; 0x714 <JOY_getDirection+0x20>
     708:	9c 01       	movw	r18, r24
     70a:	2c 5f       	subi	r18, 0xFC	; 252
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	29 30       	cpi	r18, 0x09	; 9
     710:	31 05       	cpc	r19, r1
     712:	e0 f0       	brcs	.+56     	; 0x74c <JOY_getDirection+0x58>
     714:	db 01       	movw	r26, r22
     716:	ff 23       	and	r31, r31
     718:	24 f4       	brge	.+8      	; 0x722 <JOY_getDirection+0x2e>
     71a:	aa 27       	eor	r26, r26
     71c:	bb 27       	eor	r27, r27
     71e:	a6 1b       	sub	r26, r22
     720:	b7 0b       	sbc	r27, r23
     722:	9c 01       	movw	r18, r24
     724:	55 23       	and	r21, r21
     726:	24 f4       	brge	.+8      	; 0x730 <JOY_getDirection+0x3c>
     728:	22 27       	eor	r18, r18
     72a:	33 27       	eor	r19, r19
     72c:	28 1b       	sub	r18, r24
     72e:	39 0b       	sbc	r19, r25
     730:	2a 17       	cp	r18, r26
     732:	3b 07       	cpc	r19, r27
     734:	34 f4       	brge	.+12     	; 0x742 <JOY_getDirection+0x4e>
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	1e 16       	cp	r1, r30
     73a:	1f 06       	cpc	r1, r31
     73c:	54 f0       	brlt	.+20     	; 0x752 <JOY_getDirection+0x5e>
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	08 95       	ret
     742:	14 16       	cp	r1, r20
     744:	15 06       	cpc	r1, r21
     746:	24 f4       	brge	.+8      	; 0x750 <JOY_getDirection+0x5c>
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	08 95       	ret
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	08 95       	ret
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	08 95       	ret

00000754 <SLI_getPosition>:
     754:	cf 93       	push	r28
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     75c:	c8 2f       	mov	r28, r24
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     764:	28 2f       	mov	r18, r24
     766:	6c 2f       	mov	r22, r28
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	82 2f       	mov	r24, r18
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <append>:

/* HELPER FUNCTION		*/
/************************************/

void append(char c) {
	int len = strlen(written_string);
     772:	e8 ec       	ldi	r30, 0xC8	; 200
     774:	f3 e0       	ldi	r31, 0x03	; 3
     776:	01 90       	ld	r0, Z+
     778:	00 20       	and	r0, r0
     77a:	e9 f7       	brne	.-6      	; 0x776 <append+0x4>
	written_string[len] = c;
     77c:	31 97       	sbiw	r30, 0x01	; 1
     77e:	80 83       	st	Z, r24
	written_string[len + 1] = '\0';
     780:	11 82       	std	Z+1, r1	; 0x01
     782:	08 95       	ret

00000784 <keyboard_goto>:


}
// 5 lines x 16 columns
void keyboard_goto(int line, int column) {
	OLED_pos(line + 3, (column+2) * 8);
     784:	6e 5f       	subi	r22, 0xFE	; 254
     786:	7f 4f       	sbci	r23, 0xFF	; 255
     788:	66 0f       	add	r22, r22
     78a:	66 0f       	add	r22, r22
     78c:	66 0f       	add	r22, r22
     78e:	8d 5f       	subi	r24, 0xFD	; 253
     790:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <OLED_pos>
     794:	08 95       	ret

00000796 <keyboard_goto_line>:
}

void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	0e 94 c2 03 	call	0x784	; 0x784 <keyboard_goto>
     79e:	08 95       	ret

000007a0 <keyboard_init>:


/* FUNCTION IMPLEMENTATIONS			*/
/************************************/

void keyboard_init() {
     7a0:	ef 92       	push	r14
     7a2:	ff 92       	push	r15
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
	OLED_reset();
     7ac:	0e 94 15 09 	call	0x122a	; 0x122a <OLED_reset>
	letters = LETTERS_SMALL;
     7b0:	88 ed       	ldi	r24, 0xD8	; 216
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	90 93 23 01 	sts	0x0123, r25
     7b8:	80 93 22 01 	sts	0x0122, r24
	keyboard_goto_line(0);
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto_line>
	pos.x = 0;
     7c4:	10 92 bd 03 	sts	0x03BD, r1
     7c8:	10 92 bc 03 	sts	0x03BC, r1
	pos.y = 0;
     7cc:	10 92 bf 03 	sts	0x03BF, r1
     7d0:	10 92 be 03 	sts	0x03BE, r1
	strcpy(written_string, "\0");
     7d4:	10 92 c8 03 	sts	0x03C8, r1

	//The first letter is selected by default
	print_char(letters[0], INVERSE);
     7d8:	e0 91 22 01 	lds	r30, 0x0122
     7dc:	f0 91 23 01 	lds	r31, 0x0123
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	0e 94 ce 0a 	call	0x159c	; 0x159c <print_char>

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     7ea:	c1 e0       	ldi	r28, 0x01	; 1
     7ec:	d0 e0       	ldi	r29, 0x00	; 0
		if (i % LINE_LENGTH == 0) {
     7ee:	0c e0       	ldi	r16, 0x0C	; 12
     7f0:	10 e0       	ldi	r17, 0x00	; 0
			keyboard_goto_line(++pos.y);
     7f2:	0f 2e       	mov	r0, r31
     7f4:	fe eb       	ldi	r31, 0xBE	; 190
     7f6:	ef 2e       	mov	r14, r31
     7f8:	f3 e0       	ldi	r31, 0x03	; 3
     7fa:	ff 2e       	mov	r15, r31
     7fc:	f0 2d       	mov	r31, r0
     7fe:	0e c0       	rjmp	.+28     	; 0x81c <keyboard_init+0x7c>
	//The first letter is selected by default
	print_char(letters[0], INVERSE);

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0) {
     800:	ce 01       	movw	r24, r28
     802:	b8 01       	movw	r22, r16
     804:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     808:	89 2b       	or	r24, r25
     80a:	41 f4       	brne	.+16     	; 0x81c <keyboard_init+0x7c>
			keyboard_goto_line(++pos.y);
     80c:	f7 01       	movw	r30, r14
     80e:	80 81       	ld	r24, Z
     810:	91 81       	ldd	r25, Z+1	; 0x01
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	91 83       	std	Z+1, r25	; 0x01
     816:	80 83       	st	Z, r24
     818:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto_line>
		}
		print_char(letters[i], NORMAL);
     81c:	e0 91 22 01 	lds	r30, 0x0122
     820:	f0 91 23 01 	lds	r31, 0x0123
     824:	ec 0f       	add	r30, r28
     826:	fd 1f       	adc	r31, r29
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	0e 94 ce 0a 	call	0x159c	; 0x159c <print_char>

	//The first letter is selected by default
	print_char(letters[0], INVERSE);

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     832:	21 96       	adiw	r28, 0x01	; 1
     834:	c0 33       	cpi	r28, 0x30	; 48
     836:	d1 05       	cpc	r29, r1
     838:	19 f7       	brne	.-58     	; 0x800 <keyboard_init+0x60>
			keyboard_goto_line(++pos.y);
		}
		print_char(letters[i], NORMAL);
	}
	//print the tool buttons
	keyboard_goto_line(4);
     83a:	84 e0       	ldi	r24, 0x04	; 4
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto_line>
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	70 e0       	ldi	r23, 0x00	; 0
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 b3 0a 	call	0x1566	; 0x1566 <print_options_bar>

	//reset y-position
	pos.y = 0;
     856:	10 92 bf 03 	sts	0x03BF, r1
     85a:	10 92 be 03 	sts	0x03BE, r1

}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	08 95       	ret

0000086c <keyboard_print>:


void keyboard_print() {
     86c:	cf 92       	push	r12
     86e:	df 92       	push	r13
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
	keyboard_goto_line(0);
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto_line>
	pos.y = 0;
     884:	10 92 bf 03 	sts	0x03BF, r1
     888:	10 92 be 03 	sts	0x03BE, r1
     88c:	01 e0       	ldi	r16, 0x01	; 1
     88e:	10 e0       	ldi	r17, 0x00	; 0
     890:	c0 e0       	ldi	r28, 0x00	; 0
     892:	d0 e0       	ldi	r29, 0x00	; 0
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
     894:	0f 2e       	mov	r0, r31
     896:	fc e0       	ldi	r31, 0x0C	; 12
     898:	ef 2e       	mov	r14, r31
     89a:	f1 2c       	mov	r15, r1
     89c:	f0 2d       	mov	r31, r0
			keyboard_goto_line(++pos.y);
     89e:	0f 2e       	mov	r0, r31
     8a0:	fe eb       	ldi	r31, 0xBE	; 190
     8a2:	cf 2e       	mov	r12, r31
     8a4:	f3 e0       	ldi	r31, 0x03	; 3
     8a6:	df 2e       	mov	r13, r31
     8a8:	f0 2d       	mov	r31, r0
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <keyboard_print+0x46>
     8ac:	21 96       	adiw	r28, 0x01	; 1
     8ae:	0f 5f       	subi	r16, 0xFF	; 255
     8b0:	1f 4f       	sbci	r17, 0xFF	; 255
void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
     8b2:	ce 01       	movw	r24, r28
     8b4:	b7 01       	movw	r22, r14
     8b6:	0e 94 07 0b 	call	0x160e	; 0x160e <__divmodhi4>
     8ba:	89 2b       	or	r24, r25
     8bc:	51 f4       	brne	.+20     	; 0x8d2 <keyboard_print+0x66>
     8be:	20 97       	sbiw	r28, 0x00	; 0
     8c0:	29 f1       	breq	.+74     	; 0x90c <keyboard_print+0xa0>
			keyboard_goto_line(++pos.y);
     8c2:	f6 01       	movw	r30, r12
     8c4:	80 81       	ld	r24, Z
     8c6:	91 81       	ldd	r25, Z+1	; 0x01
     8c8:	01 96       	adiw	r24, 0x01	; 1
     8ca:	91 83       	std	Z+1, r25	; 0x01
     8cc:	80 83       	st	Z, r24
     8ce:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto_line>
		}
		print_char(letters[i], NORMAL);
     8d2:	e0 91 22 01 	lds	r30, 0x0122
     8d6:	f0 91 23 01 	lds	r31, 0x0123
     8da:	ec 0f       	add	r30, r28
     8dc:	fd 1f       	adc	r31, r29
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	0e 94 ce 0a 	call	0x159c	; 0x159c <print_char>

void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
     8e8:	00 33       	cpi	r16, 0x30	; 48
     8ea:	11 05       	cpc	r17, r1
     8ec:	fc f2       	brlt	.-66     	; 0x8ac <keyboard_print+0x40>
			keyboard_goto_line(++pos.y);
		}
		print_char(letters[i], NORMAL);
	}
	//print the tool buttons
	keyboard_goto_line(4);
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto_line>
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	50 e0       	ldi	r21, 0x00	; 0
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 b3 0a 	call	0x1566	; 0x1566 <print_options_bar>
     90a:	0c c0       	rjmp	.+24     	; 0x924 <keyboard_print+0xb8>
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
			keyboard_goto_line(++pos.y);
		}
		print_char(letters[i], NORMAL);
     90c:	e0 91 22 01 	lds	r30, 0x0122
     910:	f0 91 23 01 	lds	r31, 0x0123
     914:	ec 0f       	add	r30, r28
     916:	fd 1f       	adc	r31, r29
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	0e 94 ce 0a 	call	0x159c	; 0x159c <print_char>
     922:	c4 cf       	rjmp	.-120    	; 0x8ac <keyboard_print+0x40>
	//print the tool buttons
	keyboard_goto_line(4);
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);


}
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	1f 91       	pop	r17
     92a:	0f 91       	pop	r16
     92c:	ff 90       	pop	r15
     92e:	ef 90       	pop	r14
     930:	df 90       	pop	r13
     932:	cf 90       	pop	r12
     934:	08 95       	ret

00000936 <toggle_shift>:
void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
	}

void toggle_shift() {
	if (letters == LETTERS_SMALL) {
     936:	80 91 22 01 	lds	r24, 0x0122
     93a:	90 91 23 01 	lds	r25, 0x0123
     93e:	88 5d       	subi	r24, 0xD8	; 216
     940:	92 40       	sbci	r25, 0x02	; 2
     942:	39 f4       	brne	.+14     	; 0x952 <toggle_shift+0x1c>
		letters = LETTERS_BIG;
     944:	88 ea       	ldi	r24, 0xA8	; 168
     946:	92 e0       	ldi	r25, 0x02	; 2
     948:	90 93 23 01 	sts	0x0123, r25
     94c:	80 93 22 01 	sts	0x0122, r24
     950:	06 c0       	rjmp	.+12     	; 0x95e <toggle_shift+0x28>
	}
	else {
		letters = LETTERS_SMALL;
     952:	88 ed       	ldi	r24, 0xD8	; 216
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	90 93 23 01 	sts	0x0123, r25
     95a:	80 93 22 01 	sts	0x0122, r24
	}

	keyboard_print();
     95e:	0e 94 36 04 	call	0x86c	; 0x86c <keyboard_print>
	keyboard_goto_line(4);
     962:	84 e0       	ldi	r24, 0x04	; 4
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto_line>
	print_shift(INVERSE);
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <print_shift>
		
	pos.y = 4;
     972:	84 e0       	ldi	r24, 0x04	; 4
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	90 93 bf 03 	sts	0x03BF, r25
     97a:	80 93 be 03 	sts	0x03BE, r24
	pos.x = 0;
     97e:	10 92 bd 03 	sts	0x03BD, r1
     982:	10 92 bc 03 	sts	0x03BC, r1
     986:	08 95       	ret

00000988 <keyboard_run>:
}


void keyboard_run() {
     988:	2f 92       	push	r2
     98a:	3f 92       	push	r3
     98c:	4f 92       	push	r4
     98e:	5f 92       	push	r5
     990:	6f 92       	push	r6
     992:	7f 92       	push	r7
     994:	8f 92       	push	r8
     996:	9f 92       	push	r9
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
	//printf("RESTART\n");
	keyboard_init();
     9ac:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <keyboard_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b0:	2f ef       	ldi	r18, 0xFF	; 255
     9b2:	3f e7       	ldi	r19, 0x7F	; 127
     9b4:	47 e0       	ldi	r20, 0x07	; 7
     9b6:	21 50       	subi	r18, 0x01	; 1
     9b8:	30 40       	sbci	r19, 0x00	; 0
     9ba:	40 40       	sbci	r20, 0x00	; 0
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <keyboard_run+0x2e>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <keyboard_run+0x38>
     9c0:	00 00       	nop
	_delay_ms(500);
	int old_y=0;
	int old_x=0;
     9c2:	e1 2c       	mov	r14, r1
     9c4:	f1 2c       	mov	r15, r1

void keyboard_run() {
	//printf("RESTART\n");
	keyboard_init();
	_delay_ms(500);
	int old_y=0;
     9c6:	00 e0       	ldi	r16, 0x00	; 0
     9c8:	10 e0       	ldi	r17, 0x00	; 0
			old_y = pos.y--;
		}
		else if (direction == LEFT && pos.x > 0) {
			old_x = pos.x--;
		}
		else if (direction == RIGHT && pos.x < LINE_LENGTH-1) {
     9ca:	cc eb       	ldi	r28, 0xBC	; 188
     9cc:	d3 e0       	ldi	r29, 0x03	; 3
			
			if(pos.y == 4){
     9ce:	0f 2e       	mov	r0, r31
     9d0:	fe eb       	ldi	r31, 0xBE	; 190
     9d2:	cf 2e       	mov	r12, r31
     9d4:	f3 e0       	ldi	r31, 0x03	; 3
     9d6:	df 2e       	mov	r13, r31
     9d8:	f0 2d       	mov	r31, r0
					old_x = 2;
					pos.x = 8;
				}
				else if(pos.x < 10){
					old_x = 8;
					pos.x = 10;	
     9da:	0f 2e       	mov	r0, r31
     9dc:	fa e0       	ldi	r31, 0x0A	; 10
     9de:	6f 2e       	mov	r6, r31
     9e0:	71 2c       	mov	r7, r1
     9e2:	f0 2d       	mov	r31, r0
		}
		else if (direction == RIGHT && pos.x < LINE_LENGTH-1) {
			
			if(pos.y == 4){
				if (pos.x < 2){
					old_x = 0;
     9e4:	21 2c       	mov	r2, r1
     9e6:	31 2c       	mov	r3, r1
			}
		}

		//Add logic to handle the bottom taskbar
		if (old_y != pos.y || old_x != pos.x) {
			printf("old_y: %d, y: %d, old_x: %d, old_y %d\n", old_y, pos.y, old_x, pos.x);
     9e8:	0f 2e       	mov	r0, r31
     9ea:	f1 e8       	ldi	r31, 0x81	; 129
     9ec:	8f 2e       	mov	r8, r31
     9ee:	f2 e0       	ldi	r31, 0x02	; 2
     9f0:	9f 2e       	mov	r9, r31
     9f2:	f0 2d       	mov	r31, r0
			position_moved = 1;
     9f4:	44 24       	eor	r4, r4
     9f6:	43 94       	inc	r4
     9f8:	51 2c       	mov	r5, r1
	int old_x=0;
	JOY_direction_t direction;
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
     9fa:	c3 c1       	rjmp	.+902    	; 0xd82 <keyboard_run+0x3fa>
		//Check if we switch letter
		direction = JOY_getDirection();
     9fc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <JOY_getDirection>
		if (direction == NEUTRAL);
     a00:	84 30       	cpi	r24, 0x04	; 4
     a02:	09 f4       	brne	.+2      	; 0xa06 <keyboard_run+0x7e>
     a04:	5c c0       	rjmp	.+184    	; 0xabe <keyboard_run+0x136>
		else if (direction == DOWN && pos.y < 4) {
     a06:	83 30       	cpi	r24, 0x03	; 3
     a08:	61 f4       	brne	.+24     	; 0xa22 <keyboard_run+0x9a>
     a0a:	f6 01       	movw	r30, r12
     a0c:	20 81       	ld	r18, Z
     a0e:	31 81       	ldd	r19, Z+1	; 0x01
     a10:	24 30       	cpi	r18, 0x04	; 4
     a12:	31 05       	cpc	r19, r1
     a14:	24 f5       	brge	.+72     	; 0xa5e <keyboard_run+0xd6>
			old_y = pos.y++;
     a16:	c9 01       	movw	r24, r18
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	91 83       	std	Z+1, r25	; 0x01
     a1c:	80 83       	st	Z, r24
     a1e:	89 01       	movw	r16, r18
     a20:	4e c0       	rjmp	.+156    	; 0xabe <keyboard_run+0x136>
		}
		else if (direction == UP && pos.y > 0) {
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	71 f4       	brne	.+28     	; 0xa42 <keyboard_run+0xba>
     a26:	f6 01       	movw	r30, r12
     a28:	80 81       	ld	r24, Z
     a2a:	91 81       	ldd	r25, Z+1	; 0x01
     a2c:	18 16       	cp	r1, r24
     a2e:	19 06       	cpc	r1, r25
     a30:	0c f0       	brlt	.+2      	; 0xa34 <keyboard_run+0xac>
     a32:	45 c0       	rjmp	.+138    	; 0xabe <keyboard_run+0x136>
			old_y = pos.y--;
     a34:	9c 01       	movw	r18, r24
     a36:	21 50       	subi	r18, 0x01	; 1
     a38:	31 09       	sbc	r19, r1
     a3a:	31 83       	std	Z+1, r19	; 0x01
     a3c:	20 83       	st	Z, r18
     a3e:	8c 01       	movw	r16, r24
     a40:	3e c0       	rjmp	.+124    	; 0xabe <keyboard_run+0x136>
		}
		else if (direction == LEFT && pos.x > 0) {
     a42:	81 11       	cpse	r24, r1
     a44:	0c c0       	rjmp	.+24     	; 0xa5e <keyboard_run+0xd6>
     a46:	88 81       	ld	r24, Y
     a48:	99 81       	ldd	r25, Y+1	; 0x01
     a4a:	18 16       	cp	r1, r24
     a4c:	19 06       	cpc	r1, r25
     a4e:	bc f5       	brge	.+110    	; 0xabe <keyboard_run+0x136>
			old_x = pos.x--;
     a50:	9c 01       	movw	r18, r24
     a52:	21 50       	subi	r18, 0x01	; 1
     a54:	31 09       	sbc	r19, r1
     a56:	39 83       	std	Y+1, r19	; 0x01
     a58:	28 83       	st	Y, r18
     a5a:	7c 01       	movw	r14, r24
     a5c:	30 c0       	rjmp	.+96     	; 0xabe <keyboard_run+0x136>
		}
		else if (direction == RIGHT && pos.x < LINE_LENGTH-1) {
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	71 f5       	brne	.+92     	; 0xabe <keyboard_run+0x136>
     a62:	88 81       	ld	r24, Y
     a64:	99 81       	ldd	r25, Y+1	; 0x01
     a66:	8b 30       	cpi	r24, 0x0B	; 11
     a68:	91 05       	cpc	r25, r1
     a6a:	4c f5       	brge	.+82     	; 0xabe <keyboard_run+0x136>
			
			if(pos.y == 4){
     a6c:	f6 01       	movw	r30, r12
     a6e:	20 81       	ld	r18, Z
     a70:	31 81       	ldd	r19, Z+1	; 0x01
     a72:	24 30       	cpi	r18, 0x04	; 4
     a74:	31 05       	cpc	r19, r1
     a76:	e9 f4       	brne	.+58     	; 0xab2 <keyboard_run+0x12a>
				if (pos.x < 2){
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	91 05       	cpc	r25, r1
     a7c:	34 f4       	brge	.+12     	; 0xa8a <keyboard_run+0x102>
					old_x = 0;
					pos.x = 2;
     a7e:	f2 e0       	ldi	r31, 0x02	; 2
     a80:	f8 83       	st	Y, r31
     a82:	19 82       	std	Y+1, r1	; 0x01
		}
		else if (direction == RIGHT && pos.x < LINE_LENGTH-1) {
			
			if(pos.y == 4){
				if (pos.x < 2){
					old_x = 0;
     a84:	e2 2c       	mov	r14, r2
     a86:	f3 2c       	mov	r15, r3
     a88:	1a c0       	rjmp	.+52     	; 0xabe <keyboard_run+0x136>
					pos.x = 2;
				}
				 else if (pos.x < 8){
     a8a:	88 30       	cpi	r24, 0x08	; 8
     a8c:	91 05       	cpc	r25, r1
     a8e:	44 f4       	brge	.+16     	; 0xaa0 <keyboard_run+0x118>
					old_x = 2;
					pos.x = 8;
     a90:	28 e0       	ldi	r18, 0x08	; 8
     a92:	28 83       	st	Y, r18
     a94:	19 82       	std	Y+1, r1	; 0x01
				if (pos.x < 2){
					old_x = 0;
					pos.x = 2;
				}
				 else if (pos.x < 8){
					old_x = 2;
     a96:	68 94       	set
     a98:	ee 24       	eor	r14, r14
     a9a:	e1 f8       	bld	r14, 1
     a9c:	f1 2c       	mov	r15, r1
     a9e:	0f c0       	rjmp	.+30     	; 0xabe <keyboard_run+0x136>
					pos.x = 8;
				}
				else if(pos.x < 10){
     aa0:	0a 97       	sbiw	r24, 0x0a	; 10
     aa2:	6c f4       	brge	.+26     	; 0xabe <keyboard_run+0x136>
					old_x = 8;
					pos.x = 10;	
     aa4:	79 82       	std	Y+1, r7	; 0x01
     aa6:	68 82       	st	Y, r6
				 else if (pos.x < 8){
					old_x = 2;
					pos.x = 8;
				}
				else if(pos.x < 10){
					old_x = 8;
     aa8:	68 94       	set
     aaa:	ee 24       	eor	r14, r14
     aac:	e3 f8       	bld	r14, 3
     aae:	f1 2c       	mov	r15, r1
     ab0:	06 c0       	rjmp	.+12     	; 0xabe <keyboard_run+0x136>
					pos.x = 10;	
				}
			}
			else{
				old_x = pos.x++;
     ab2:	9c 01       	movw	r18, r24
     ab4:	2f 5f       	subi	r18, 0xFF	; 255
     ab6:	3f 4f       	sbci	r19, 0xFF	; 255
     ab8:	39 83       	std	Y+1, r19	; 0x01
     aba:	28 83       	st	Y, r18
     abc:	7c 01       	movw	r14, r24
			}
		}

		//Add logic to handle the bottom taskbar
		if (old_y != pos.y || old_x != pos.x) {
     abe:	f6 01       	movw	r30, r12
     ac0:	80 81       	ld	r24, Z
     ac2:	91 81       	ldd	r25, Z+1	; 0x01
     ac4:	80 17       	cp	r24, r16
     ac6:	91 07       	cpc	r25, r17
     ac8:	31 f4       	brne	.+12     	; 0xad6 <keyboard_run+0x14e>
     aca:	28 81       	ld	r18, Y
     acc:	39 81       	ldd	r19, Y+1	; 0x01
     ace:	2e 15       	cp	r18, r14
     ad0:	3f 05       	cpc	r19, r15
     ad2:	09 f4       	brne	.+2      	; 0xad6 <keyboard_run+0x14e>
     ad4:	d1 c0       	rjmp	.+418    	; 0xc78 <keyboard_run+0x2f0>
			printf("old_y: %d, y: %d, old_x: %d, old_y %d\n", old_y, pos.y, old_x, pos.x);
     ad6:	29 81       	ldd	r18, Y+1	; 0x01
     ad8:	2f 93       	push	r18
     ada:	28 81       	ld	r18, Y
     adc:	2f 93       	push	r18
     ade:	ff 92       	push	r15
     ae0:	ef 92       	push	r14
     ae2:	9f 93       	push	r25
     ae4:	8f 93       	push	r24
     ae6:	1f 93       	push	r17
     ae8:	0f 93       	push	r16
     aea:	9f 92       	push	r9
     aec:	8f 92       	push	r8
     aee:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <printf>
			position_moved = 1;
			//unselect the old letter and select the new one

			//old item is a letter
			if (old_y < 4) {
     af2:	2d b7       	in	r18, 0x3d	; 61
     af4:	3e b7       	in	r19, 0x3e	; 62
     af6:	26 5f       	subi	r18, 0xF6	; 246
     af8:	3f 4f       	sbci	r19, 0xFF	; 255
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	3e bf       	out	0x3e, r19	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	2d bf       	out	0x3d, r18	; 61
     b04:	04 30       	cpi	r16, 0x04	; 4
     b06:	11 05       	cpc	r17, r1
     b08:	e4 f4       	brge	.+56     	; 0xb42 <keyboard_run+0x1ba>
				keyboard_goto(old_y, old_x);
     b0a:	b7 01       	movw	r22, r14
     b0c:	c8 01       	movw	r24, r16
     b0e:	0e 94 c2 03 	call	0x784	; 0x784 <keyboard_goto>
				print_char(letters[old_y * LINE_LENGTH + old_x], NORMAL);
     b12:	f8 01       	movw	r30, r16
     b14:	ee 0f       	add	r30, r30
     b16:	ff 1f       	adc	r31, r31
     b18:	0e 0f       	add	r16, r30
     b1a:	1f 1f       	adc	r17, r31
     b1c:	f8 01       	movw	r30, r16
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	ee 0f       	add	r30, r30
     b24:	ff 1f       	adc	r31, r31
     b26:	ee 0e       	add	r14, r30
     b28:	ff 1e       	adc	r15, r31
     b2a:	e0 91 22 01 	lds	r30, 0x0122
     b2e:	f0 91 23 01 	lds	r31, 0x0123
     b32:	ee 0d       	add	r30, r14
     b34:	ff 1d       	adc	r31, r15
     b36:	62 2d       	mov	r22, r2
     b38:	73 2d       	mov	r23, r3
     b3a:	80 81       	ld	r24, Z
     b3c:	0e 94 ce 0a 	call	0x159c	; 0x159c <print_char>
     b40:	32 c0       	rjmp	.+100    	; 0xba6 <keyboard_run+0x21e>
			}

			//old item is in toolbar
			else {
				if (old_x < 2) {
     b42:	32 e0       	ldi	r19, 0x02	; 2
     b44:	e3 16       	cp	r14, r19
     b46:	f1 04       	cpc	r15, r1
     b48:	54 f4       	brge	.+20     	; 0xb5e <keyboard_run+0x1d6>
					old_x = 0;
					keyboard_goto(old_y, old_x);
     b4a:	62 2d       	mov	r22, r2
     b4c:	73 2d       	mov	r23, r3
     b4e:	c8 01       	movw	r24, r16
     b50:	0e 94 c2 03 	call	0x784	; 0x784 <keyboard_goto>
					print_shift(NORMAL);
     b54:	82 2d       	mov	r24, r2
     b56:	93 2d       	mov	r25, r3
     b58:	0e 94 d5 09 	call	0x13aa	; 0x13aa <print_shift>
     b5c:	24 c0       	rjmp	.+72     	; 0xba6 <keyboard_run+0x21e>
				}
				else if (old_x < 8) {
     b5e:	48 e0       	ldi	r20, 0x08	; 8
     b60:	e4 16       	cp	r14, r20
     b62:	f1 04       	cpc	r15, r1
     b64:	54 f4       	brge	.+20     	; 0xb7a <keyboard_run+0x1f2>
					old_x = 2; //start of spacebar
					keyboard_goto(old_y, old_x);
     b66:	62 e0       	ldi	r22, 0x02	; 2
     b68:	70 e0       	ldi	r23, 0x00	; 0
     b6a:	c8 01       	movw	r24, r16
     b6c:	0e 94 c2 03 	call	0x784	; 0x784 <keyboard_goto>
					print_spacebar(NORMAL);
     b70:	82 2d       	mov	r24, r2
     b72:	93 2d       	mov	r25, r3
     b74:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <print_spacebar>
     b78:	16 c0       	rjmp	.+44     	; 0xba6 <keyboard_run+0x21e>
				}
				else if (old_x < 10) {
     b7a:	8a e0       	ldi	r24, 0x0A	; 10
     b7c:	e8 16       	cp	r14, r24
     b7e:	f1 04       	cpc	r15, r1
     b80:	54 f4       	brge	.+20     	; 0xb96 <keyboard_run+0x20e>
					old_x = 8; //start of left arrow
					keyboard_goto(old_y, old_x);
     b82:	68 e0       	ldi	r22, 0x08	; 8
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	c8 01       	movw	r24, r16
     b88:	0e 94 c2 03 	call	0x784	; 0x784 <keyboard_goto>
					print_left_arrow(NORMAL);
     b8c:	82 2d       	mov	r24, r2
     b8e:	93 2d       	mov	r25, r3
     b90:	0e 94 21 0a 	call	0x1442	; 0x1442 <print_left_arrow>
     b94:	08 c0       	rjmp	.+16     	; 0xba6 <keyboard_run+0x21e>
				}
				else {
					old_x = 10; //start of right arrow
					keyboard_goto(old_y, old_x);
     b96:	b3 01       	movw	r22, r6
     b98:	c8 01       	movw	r24, r16
     b9a:	0e 94 c2 03 	call	0x784	; 0x784 <keyboard_goto>
					print_right_arrow(NORMAL);
     b9e:	82 2d       	mov	r24, r2
     ba0:	93 2d       	mov	r25, r3
     ba2:	0e 94 4d 0a 	call	0x149a	; 0x149a <print_right_arrow>
				}
			}
			//selected item is a letter
			if (pos.y < 4) {
     ba6:	f6 01       	movw	r30, r12
     ba8:	80 81       	ld	r24, Z
     baa:	91 81       	ldd	r25, Z+1	; 0x01
     bac:	84 30       	cpi	r24, 0x04	; 4
     bae:	91 05       	cpc	r25, r1
     bb0:	24 f5       	brge	.+72     	; 0xbfa <keyboard_run+0x272>
				keyboard_goto(pos.y,pos.x);
     bb2:	68 81       	ld	r22, Y
     bb4:	79 81       	ldd	r23, Y+1	; 0x01
     bb6:	0e 94 c2 03 	call	0x784	; 0x784 <keyboard_goto>
				print_char(letters[pos.y * LINE_LENGTH + pos.x], INVERSE);
     bba:	80 91 be 03 	lds	r24, 0x03BE
     bbe:	90 91 bf 03 	lds	r25, 0x03BF
     bc2:	fc 01       	movw	r30, r24
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	8e 0f       	add	r24, r30
     bca:	9f 1f       	adc	r25, r31
     bcc:	fc 01       	movw	r30, r24
     bce:	ee 0f       	add	r30, r30
     bd0:	ff 1f       	adc	r31, r31
     bd2:	ee 0f       	add	r30, r30
     bd4:	ff 1f       	adc	r31, r31
     bd6:	20 91 bc 03 	lds	r18, 0x03BC
     bda:	30 91 bd 03 	lds	r19, 0x03BD
     bde:	e2 0f       	add	r30, r18
     be0:	f3 1f       	adc	r31, r19
     be2:	80 91 22 01 	lds	r24, 0x0122
     be6:	90 91 23 01 	lds	r25, 0x0123
     bea:	e8 0f       	add	r30, r24
     bec:	f9 1f       	adc	r31, r25
     bee:	64 2d       	mov	r22, r4
     bf0:	75 2d       	mov	r23, r5
     bf2:	80 81       	ld	r24, Z
     bf4:	0e 94 ce 0a 	call	0x159c	; 0x159c <print_char>
     bf8:	37 c0       	rjmp	.+110    	; 0xc68 <keyboard_run+0x2e0>
			}

			//selected menu item is in toolbar
			else {
				if (pos.x < 2) {
     bfa:	28 81       	ld	r18, Y
     bfc:	39 81       	ldd	r19, Y+1	; 0x01
     bfe:	22 30       	cpi	r18, 0x02	; 2
     c00:	31 05       	cpc	r19, r1
     c02:	5c f4       	brge	.+22     	; 0xc1a <keyboard_run+0x292>
					pos.x = 0;
     c04:	19 82       	std	Y+1, r1	; 0x01
     c06:	18 82       	st	Y, r1
					keyboard_goto(pos.y, pos.x);
     c08:	62 2d       	mov	r22, r2
     c0a:	73 2d       	mov	r23, r3
     c0c:	0e 94 c2 03 	call	0x784	; 0x784 <keyboard_goto>
					print_shift(INVERSE);
     c10:	84 2d       	mov	r24, r4
     c12:	95 2d       	mov	r25, r5
     c14:	0e 94 d5 09 	call	0x13aa	; 0x13aa <print_shift>
     c18:	27 c0       	rjmp	.+78     	; 0xc68 <keyboard_run+0x2e0>
				}
				else if (pos.x < 8) {
     c1a:	28 30       	cpi	r18, 0x08	; 8
     c1c:	31 05       	cpc	r19, r1
     c1e:	64 f4       	brge	.+24     	; 0xc38 <keyboard_run+0x2b0>
					pos.x = 2; //start of spacebar
     c20:	f2 e0       	ldi	r31, 0x02	; 2
     c22:	f8 83       	st	Y, r31
     c24:	19 82       	std	Y+1, r1	; 0x01
					keyboard_goto(pos.y, pos.x);
     c26:	62 e0       	ldi	r22, 0x02	; 2
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	0e 94 c2 03 	call	0x784	; 0x784 <keyboard_goto>
					print_spacebar(INVERSE);
     c2e:	84 2d       	mov	r24, r4
     c30:	95 2d       	mov	r25, r5
     c32:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <print_spacebar>
     c36:	18 c0       	rjmp	.+48     	; 0xc68 <keyboard_run+0x2e0>
				}
				else if (pos.x < 10) {
     c38:	2a 30       	cpi	r18, 0x0A	; 10
     c3a:	31 05       	cpc	r19, r1
     c3c:	64 f4       	brge	.+24     	; 0xc56 <keyboard_run+0x2ce>
					pos.x = 8; //start of left arrow
     c3e:	28 e0       	ldi	r18, 0x08	; 8
     c40:	28 83       	st	Y, r18
     c42:	19 82       	std	Y+1, r1	; 0x01
					keyboard_goto(pos.y, pos.x);
     c44:	68 e0       	ldi	r22, 0x08	; 8
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	0e 94 c2 03 	call	0x784	; 0x784 <keyboard_goto>
					print_left_arrow(INVERSE);
     c4c:	84 2d       	mov	r24, r4
     c4e:	95 2d       	mov	r25, r5
     c50:	0e 94 21 0a 	call	0x1442	; 0x1442 <print_left_arrow>
     c54:	09 c0       	rjmp	.+18     	; 0xc68 <keyboard_run+0x2e0>
				}
				else {
					pos.x = 10; //start of right arrow
     c56:	79 82       	std	Y+1, r7	; 0x01
     c58:	68 82       	st	Y, r6
					keyboard_goto(pos.y, pos.x);
     c5a:	b3 01       	movw	r22, r6
     c5c:	0e 94 c2 03 	call	0x784	; 0x784 <keyboard_goto>
					print_right_arrow(INVERSE);
     c60:	84 2d       	mov	r24, r4
     c62:	95 2d       	mov	r25, r5
     c64:	0e 94 4d 0a 	call	0x149a	; 0x149a <print_right_arrow>
				}
			}
			old_x = pos.x;
     c68:	e8 80       	ld	r14, Y
     c6a:	f9 80       	ldd	r15, Y+1	; 0x01
			old_y = pos.y;
     c6c:	f6 01       	movw	r30, r12
     c6e:	00 81       	ld	r16, Z
     c70:	11 81       	ldd	r17, Z+1	; 0x01
		}

		//Add logic to handle the bottom taskbar
		if (old_y != pos.y || old_x != pos.x) {
			printf("old_y: %d, y: %d, old_x: %d, old_y %d\n", old_y, pos.y, old_x, pos.x);
			position_moved = 1;
     c72:	a4 2c       	mov	r10, r4
     c74:	b5 2c       	mov	r11, r5
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <keyboard_run+0x2f6>
     c78:	8c 01       	movw	r16, r24
     c7a:	a2 2c       	mov	r10, r2
     c7c:	b3 2c       	mov	r11, r3
			old_y = pos.y;
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
     c84:	89 2b       	or	r24, r25
     c86:	09 f4       	brne	.+2      	; 0xc8a <keyboard_run+0x302>
     c88:	43 c0       	rjmp	.+134    	; 0xd10 <keyboard_run+0x388>
			button_pressed = 1;
			if (pos.y < 4) {
     c8a:	f6 01       	movw	r30, r12
     c8c:	80 81       	ld	r24, Z
     c8e:	91 81       	ldd	r25, Z+1	; 0x01
     c90:	84 30       	cpi	r24, 0x04	; 4
     c92:	91 05       	cpc	r25, r1
     c94:	5c f5       	brge	.+86     	; 0xcec <keyboard_run+0x364>
				append(letters[pos.y * LINE_LENGTH + pos.x]);
     c96:	fc 01       	movw	r30, r24
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	8e 0f       	add	r24, r30
     c9e:	9f 1f       	adc	r25, r31
     ca0:	fc 01       	movw	r30, r24
     ca2:	ee 0f       	add	r30, r30
     ca4:	ff 1f       	adc	r31, r31
     ca6:	ee 0f       	add	r30, r30
     ca8:	ff 1f       	adc	r31, r31
     caa:	20 91 bc 03 	lds	r18, 0x03BC
     cae:	30 91 bd 03 	lds	r19, 0x03BD
     cb2:	e2 0f       	add	r30, r18
     cb4:	f3 1f       	adc	r31, r19
     cb6:	80 91 22 01 	lds	r24, 0x0122
     cba:	90 91 23 01 	lds	r25, 0x0123
     cbe:	e8 0f       	add	r30, r24
     cc0:	f9 1f       	adc	r31, r25
     cc2:	80 81       	ld	r24, Z
     cc4:	0e 94 b9 03 	call	0x772	; 0x772 <append>
				OLED_home();
     cc8:	0e 94 02 09 	call	0x1204	; 0x1204 <OLED_home>
				//printf("APPEND written string: %s", written_string);
				//replace with a print function that remembers which part is printed, used with < >
				fprintf(OLED, "%s", written_string);
     ccc:	64 e2       	ldi	r22, 0x24	; 36
     cce:	71 e0       	ldi	r23, 0x01	; 1
     cd0:	88 ec       	ldi	r24, 0xC8	; 200
     cd2:	93 e0       	ldi	r25, 0x03	; 3
     cd4:	0e 94 b3 0c 	call	0x1966	; 0x1966 <fputs>
				keyboard_goto(pos.y, pos.x);
     cd8:	68 81       	ld	r22, Y
     cda:	79 81       	ldd	r23, Y+1	; 0x01
     cdc:	f6 01       	movw	r30, r12
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	0e 94 c2 03 	call	0x784	; 0x784 <keyboard_goto>
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
			button_pressed = 1;
     ce6:	84 2d       	mov	r24, r4
     ce8:	95 2d       	mov	r25, r5
     cea:	35 c0       	rjmp	.+106    	; 0xd56 <keyboard_run+0x3ce>
				//replace with a print function that remembers which part is printed, used with < >
				fprintf(OLED, "%s", written_string);
				keyboard_goto(pos.y, pos.x);
			}
			else {
				if(pos.x < 2){
     cec:	88 81       	ld	r24, Y
     cee:	99 81       	ldd	r25, Y+1	; 0x01
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	91 05       	cpc	r25, r1
     cf4:	2c f4       	brge	.+10     	; 0xd00 <keyboard_run+0x378>
					toggle_shift();
     cf6:	0e 94 9b 04 	call	0x936	; 0x936 <toggle_shift>
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
			button_pressed = 1;
     cfa:	84 2d       	mov	r24, r4
     cfc:	95 2d       	mov	r25, r5
     cfe:	2b c0       	rjmp	.+86     	; 0xd56 <keyboard_run+0x3ce>
			}
			else {
				if(pos.x < 2){
					toggle_shift();
				}
				else if(pos.x < 8){
     d00:	08 97       	sbiw	r24, 0x08	; 8
     d02:	24 f5       	brge	.+72     	; 0xd4c <keyboard_run+0x3c4>
					append(32);
     d04:	80 e2       	ldi	r24, 0x20	; 32
     d06:	0e 94 b9 03 	call	0x772	; 0x772 <append>
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
			button_pressed = 1;
     d0a:	84 2d       	mov	r24, r4
     d0c:	95 2d       	mov	r25, r5
     d0e:	23 c0       	rjmp	.+70     	; 0xd56 <keyboard_run+0x3ce>
				}
			}
		}

		//check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
     d16:	89 2b       	or	r24, r25
     d18:	e1 f0       	breq	.+56     	; 0xd52 <keyboard_run+0x3ca>
			button_pressed = 1;
			written_string[strlen(written_string) - 1] = 0;
     d1a:	e8 ec       	ldi	r30, 0xC8	; 200
     d1c:	f3 e0       	ldi	r31, 0x03	; 3
     d1e:	01 90       	ld	r0, Z+
     d20:	00 20       	and	r0, r0
     d22:	e9 f7       	brne	.-6      	; 0xd1e <keyboard_run+0x396>
     d24:	32 97       	sbiw	r30, 0x02	; 2
     d26:	10 82       	st	Z, r1
			OLED_home();
     d28:	0e 94 02 09 	call	0x1204	; 0x1204 <OLED_home>
			//printf("REMOVE written string: %s", written_string);
			fprintf(OLED, "%s", written_string);
     d2c:	64 e2       	ldi	r22, 0x24	; 36
     d2e:	71 e0       	ldi	r23, 0x01	; 1
     d30:	88 ec       	ldi	r24, 0xC8	; 200
     d32:	93 e0       	ldi	r25, 0x03	; 3
     d34:	0e 94 b3 0c 	call	0x1966	; 0x1966 <fputs>
			keyboard_goto(pos.y, pos.x);
     d38:	68 81       	ld	r22, Y
     d3a:	79 81       	ldd	r23, Y+1	; 0x01
     d3c:	f6 01       	movw	r30, r12
     d3e:	80 81       	ld	r24, Z
     d40:	91 81       	ldd	r25, Z+1	; 0x01
     d42:	0e 94 c2 03 	call	0x784	; 0x784 <keyboard_goto>
			}
		}

		//check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
			button_pressed = 1;
     d46:	84 2d       	mov	r24, r4
     d48:	95 2d       	mov	r25, r5
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <keyboard_run+0x3ce>
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
			button_pressed = 1;
     d4c:	84 2d       	mov	r24, r4
     d4e:	95 2d       	mov	r25, r5
     d50:	02 c0       	rjmp	.+4      	; 0xd56 <keyboard_run+0x3ce>
     d52:	82 2d       	mov	r24, r2
     d54:	93 2d       	mov	r25, r3
			//printf("REMOVE written string: %s", written_string);
			fprintf(OLED, "%s", written_string);
			keyboard_goto(pos.y, pos.x);
		}
		
		if(position_moved){
     d56:	ab 28       	or	r10, r11
     d58:	49 f0       	breq	.+18     	; 0xd6c <keyboard_run+0x3e4>
     d5a:	ff ef       	ldi	r31, 0xFF	; 255
     d5c:	2f eb       	ldi	r18, 0xBF	; 191
     d5e:	33 e0       	ldi	r19, 0x03	; 3
     d60:	f1 50       	subi	r31, 0x01	; 1
     d62:	20 40       	sbci	r18, 0x00	; 0
     d64:	30 40       	sbci	r19, 0x00	; 0
     d66:	e1 f7       	brne	.-8      	; 0xd60 <keyboard_run+0x3d8>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <keyboard_run+0x3e2>
     d6a:	00 00       	nop
			position_moved = 0;
			_delay_ms(250);
		}
		if(button_pressed){
     d6c:	89 2b       	or	r24, r25
     d6e:	49 f0       	breq	.+18     	; 0xd82 <keyboard_run+0x3fa>
     d70:	4f ef       	ldi	r20, 0xFF	; 255
     d72:	8f e7       	ldi	r24, 0x7F	; 127
     d74:	97 e0       	ldi	r25, 0x07	; 7
     d76:	41 50       	subi	r20, 0x01	; 1
     d78:	80 40       	sbci	r24, 0x00	; 0
     d7a:	90 40       	sbci	r25, 0x00	; 0
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <keyboard_run+0x3ee>
     d7e:	00 c0       	rjmp	.+0      	; 0xd80 <keyboard_run+0x3f8>
     d80:	00 00       	nop
	int old_x=0;
	JOY_direction_t direction;
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
     d88:	89 2b       	or	r24, r25
     d8a:	09 f4       	brne	.+2      	; 0xd8e <keyboard_run+0x406>
     d8c:	37 ce       	rjmp	.-914    	; 0x9fc <keyboard_run+0x74>
		if(button_pressed){
			button_pressed = 0;
			_delay_ms(500);
		}
	}
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	df 90       	pop	r13
     d9c:	cf 90       	pop	r12
     d9e:	bf 90       	pop	r11
     da0:	af 90       	pop	r10
     da2:	9f 90       	pop	r9
     da4:	8f 90       	pop	r8
     da6:	7f 90       	pop	r7
     da8:	6f 90       	pop	r6
     daa:	5f 90       	pop	r5
     dac:	4f 90       	pop	r4
     dae:	3f 90       	pop	r3
     db0:	2f 90       	pop	r2
     db2:	08 95       	ret

00000db4 <MCP2515_read>:
     db4:	cf 93       	push	r28
     db6:	c8 2f       	mov	r28, r24
     db8:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <SPI_select>
     dbc:	83 e0       	ldi	r24, 0x03	; 3
     dbe:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <SPI_send>
     dc2:	8c 2f       	mov	r24, r28
     dc4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <SPI_send>
     dc8:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <SPI_read>
     dcc:	c8 2f       	mov	r28, r24
     dce:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <SPI_deselect>
     dd2:	8c 2f       	mov	r24, r28
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <MCP2515_bit_modify>:
     dd8:	1f 93       	push	r17
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	18 2f       	mov	r17, r24
     de0:	d6 2f       	mov	r29, r22
     de2:	c4 2f       	mov	r28, r20
     de4:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <SPI_select>
     de8:	85 e0       	ldi	r24, 0x05	; 5
     dea:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <SPI_send>
     dee:	81 2f       	mov	r24, r17
     df0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <SPI_send>
     df4:	8d 2f       	mov	r24, r29
     df6:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <SPI_send>
     dfa:	8c 2f       	mov	r24, r28
     dfc:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <SPI_send>
     e00:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <SPI_deselect>
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	08 95       	ret

00000e0c <test_function>:
     e0c:	88 e0       	ldi	r24, 0x08	; 8
     e0e:	93 e0       	ldi	r25, 0x03	; 3
     e10:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <puts>
     e14:	08 95       	ret

00000e16 <MENU_draw_current_menu>:
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	0e 94 15 09 	call	0x122a	; 0x122a <OLED_reset>
     e28:	e0 91 db 03 	lds	r30, 0x03DB
     e2c:	f0 91 dc 03 	lds	r31, 0x03DC
     e30:	c4 81       	ldd	r28, Z+4	; 0x04
     e32:	d5 81       	ldd	r29, Z+5	; 0x05
     e34:	20 97       	sbiw	r28, 0x00	; 0
     e36:	61 f1       	breq	.+88     	; 0xe90 <MENU_draw_current_menu+0x7a>
     e38:	d1 2c       	mov	r13, r1
     e3a:	0f 2e       	mov	r0, r31
     e3c:	fe e1       	ldi	r31, 0x1E	; 30
     e3e:	ef 2e       	mov	r14, r31
     e40:	f3 e0       	ldi	r31, 0x03	; 3
     e42:	ff 2e       	mov	r15, r31
     e44:	f0 2d       	mov	r31, r0
     e46:	02 e3       	ldi	r16, 0x32	; 50
     e48:	11 e0       	ldi	r17, 0x01	; 1
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	8d 2d       	mov	r24, r13
     e4e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <OLED_pos>
     e52:	20 91 d9 03 	lds	r18, 0x03D9
     e56:	30 91 da 03 	lds	r19, 0x03DA
     e5a:	c2 17       	cp	r28, r18
     e5c:	d3 07       	cpc	r29, r19
     e5e:	11 f4       	brne	.+4      	; 0xe64 <MENU_draw_current_menu+0x4e>
     e60:	0e 94 8a 09 	call	0x1314	; 0x1314 <OLED_print_arrow>
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	8f 93       	push	r24
     e68:	88 81       	ld	r24, Y
     e6a:	8f 93       	push	r24
     e6c:	ff 92       	push	r15
     e6e:	ef 92       	push	r14
     e70:	1f 93       	push	r17
     e72:	0f 93       	push	r16
     e74:	0e 94 a1 0c 	call	0x1942	; 0x1942 <fprintf>
     e78:	0e 80       	ldd	r0, Y+6	; 0x06
     e7a:	df 81       	ldd	r29, Y+7	; 0x07
     e7c:	c0 2d       	mov	r28, r0
     e7e:	d3 94       	inc	r13
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	20 97       	sbiw	r28, 0x00	; 0
     e8e:	e9 f6       	brne	.-70     	; 0xe4a <MENU_draw_current_menu+0x34>
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	08 95       	ret

00000ea0 <MENU_select_next>:
     ea0:	e0 91 d9 03 	lds	r30, 0x03D9
     ea4:	f0 91 da 03 	lds	r31, 0x03DA
     ea8:	86 81       	ldd	r24, Z+6	; 0x06
     eaa:	97 81       	ldd	r25, Z+7	; 0x07
     eac:	89 2b       	or	r24, r25
     eae:	41 f0       	breq	.+16     	; 0xec0 <MENU_select_next+0x20>
     eb0:	86 81       	ldd	r24, Z+6	; 0x06
     eb2:	97 81       	ldd	r25, Z+7	; 0x07
     eb4:	90 93 da 03 	sts	0x03DA, r25
     eb8:	80 93 d9 03 	sts	0x03D9, r24
     ebc:	0e 94 0b 07 	call	0xe16	; 0xe16 <MENU_draw_current_menu>
     ec0:	08 95       	ret

00000ec2 <MENU_select_prev>:
     ec2:	e0 91 d9 03 	lds	r30, 0x03D9
     ec6:	f0 91 da 03 	lds	r31, 0x03DA
     eca:	80 85       	ldd	r24, Z+8	; 0x08
     ecc:	91 85       	ldd	r25, Z+9	; 0x09
     ece:	89 2b       	or	r24, r25
     ed0:	41 f0       	breq	.+16     	; 0xee2 <MENU_select_prev+0x20>
     ed2:	80 85       	ldd	r24, Z+8	; 0x08
     ed4:	91 85       	ldd	r25, Z+9	; 0x09
     ed6:	90 93 da 03 	sts	0x03DA, r25
     eda:	80 93 d9 03 	sts	0x03D9, r24
     ede:	0e 94 0b 07 	call	0xe16	; 0xe16 <MENU_draw_current_menu>
     ee2:	08 95       	ret

00000ee4 <MENU_enter_selection>:
     ee4:	e0 91 d9 03 	lds	r30, 0x03D9
     ee8:	f0 91 da 03 	lds	r31, 0x03DA
     eec:	82 85       	ldd	r24, Z+10	; 0x0a
     eee:	93 85       	ldd	r25, Z+11	; 0x0b
     ef0:	89 2b       	or	r24, r25
     ef2:	61 f0       	breq	.+24     	; 0xf0c <MENU_enter_selection+0x28>
     ef4:	82 e2       	ldi	r24, 0x22	; 34
     ef6:	93 e0       	ldi	r25, 0x03	; 3
     ef8:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <puts>
     efc:	e0 91 d9 03 	lds	r30, 0x03D9
     f00:	f0 91 da 03 	lds	r31, 0x03DA
     f04:	02 84       	ldd	r0, Z+10	; 0x0a
     f06:	f3 85       	ldd	r31, Z+11	; 0x0b
     f08:	e0 2d       	mov	r30, r0
     f0a:	09 95       	icall
     f0c:	e0 91 d9 03 	lds	r30, 0x03D9
     f10:	f0 91 da 03 	lds	r31, 0x03DA
     f14:	84 81       	ldd	r24, Z+4	; 0x04
     f16:	95 81       	ldd	r25, Z+5	; 0x05
     f18:	89 2b       	or	r24, r25
     f1a:	61 f0       	breq	.+24     	; 0xf34 <MENU_enter_selection+0x50>
     f1c:	f0 93 dc 03 	sts	0x03DC, r31
     f20:	e0 93 db 03 	sts	0x03DB, r30
     f24:	84 81       	ldd	r24, Z+4	; 0x04
     f26:	95 81       	ldd	r25, Z+5	; 0x05
     f28:	90 93 da 03 	sts	0x03DA, r25
     f2c:	80 93 d9 03 	sts	0x03D9, r24
     f30:	0e 94 0b 07 	call	0xe16	; 0xe16 <MENU_draw_current_menu>
     f34:	08 95       	ret

00000f36 <MENU_go_back>:
     f36:	e0 91 db 03 	lds	r30, 0x03DB
     f3a:	f0 91 dc 03 	lds	r31, 0x03DC
     f3e:	82 81       	ldd	r24, Z+2	; 0x02
     f40:	93 81       	ldd	r25, Z+3	; 0x03
     f42:	89 2b       	or	r24, r25
     f44:	79 f0       	breq	.+30     	; 0xf64 <MENU_go_back+0x2e>
     f46:	02 80       	ldd	r0, Z+2	; 0x02
     f48:	f3 81       	ldd	r31, Z+3	; 0x03
     f4a:	e0 2d       	mov	r30, r0
     f4c:	f0 93 dc 03 	sts	0x03DC, r31
     f50:	e0 93 db 03 	sts	0x03DB, r30
     f54:	84 81       	ldd	r24, Z+4	; 0x04
     f56:	95 81       	ldd	r25, Z+5	; 0x05
     f58:	90 93 da 03 	sts	0x03DA, r25
     f5c:	80 93 d9 03 	sts	0x03D9, r24
     f60:	0e 94 0b 07 	call	0xe16	; 0xe16 <MENU_draw_current_menu>
     f64:	08 95       	ret

00000f66 <MENU_run>:
     f66:	cf 93       	push	r28
     f68:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <JOY_getDirection>
     f6c:	83 30       	cpi	r24, 0x03	; 3
     f6e:	21 f4       	brne	.+8      	; 0xf78 <MENU_run+0x12>
     f70:	0e 94 50 07 	call	0xea0	; 0xea0 <MENU_select_next>
     f74:	c1 e0       	ldi	r28, 0x01	; 1
     f76:	09 c0       	rjmp	.+18     	; 0xf8a <MENU_run+0x24>
     f78:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <JOY_getDirection>
     f7c:	82 30       	cpi	r24, 0x02	; 2
     f7e:	21 f4       	brne	.+8      	; 0xf88 <MENU_run+0x22>
     f80:	0e 94 61 07 	call	0xec2	; 0xec2 <MENU_select_prev>
     f84:	c1 e0       	ldi	r28, 0x01	; 1
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <MENU_run+0x24>
     f88:	c0 e0       	ldi	r28, 0x00	; 0
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
     f90:	89 2b       	or	r24, r25
     f92:	19 f0       	breq	.+6      	; 0xf9a <MENU_run+0x34>
     f94:	0e 94 72 07 	call	0xee4	; 0xee4 <MENU_enter_selection>
     f98:	0a c0       	rjmp	.+20     	; 0xfae <MENU_run+0x48>
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
     fa0:	89 2b       	or	r24, r25
     fa2:	19 f0       	breq	.+6      	; 0xfaa <MENU_run+0x44>
     fa4:	0e 94 9b 07 	call	0xf36	; 0xf36 <MENU_go_back>
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <MENU_run+0x48>
     faa:	cc 23       	and	r28, r28
     fac:	49 f0       	breq	.+18     	; 0xfc0 <MENU_run+0x5a>
     fae:	22 e3       	ldi	r18, 0x32	; 50
     fb0:	83 ed       	ldi	r24, 0xD3	; 211
     fb2:	93 e0       	ldi	r25, 0x03	; 3
     fb4:	21 50       	subi	r18, 0x01	; 1
     fb6:	80 40       	sbci	r24, 0x00	; 0
     fb8:	90 40       	sbci	r25, 0x00	; 0
     fba:	e1 f7       	brne	.-8      	; 0xfb4 <MENU_run+0x4e>
     fbc:	00 c0       	rjmp	.+0      	; 0xfbe <MENU_run+0x58>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <MENU_run+0x5a>
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <add_entry>:
     fc4:	ef 92       	push	r14
     fc6:	ff 92       	push	r15
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	ec 01       	movw	r28, r24
     fd2:	7b 01       	movw	r14, r22
     fd4:	8a 01       	movw	r16, r20
     fd6:	8c e0       	ldi	r24, 0x0C	; 12
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 2f 0b 	call	0x165e	; 0x165e <malloc>
     fde:	dc 01       	movw	r26, r24
     fe0:	11 96       	adiw	r26, 0x01	; 1
     fe2:	fc 92       	st	X, r15
     fe4:	ee 92       	st	-X, r14
     fe6:	13 96       	adiw	r26, 0x03	; 3
     fe8:	dc 93       	st	X, r29
     fea:	ce 93       	st	-X, r28
     fec:	12 97       	sbiw	r26, 0x02	; 2
     fee:	15 96       	adiw	r26, 0x05	; 5
     ff0:	1c 92       	st	X, r1
     ff2:	1e 92       	st	-X, r1
     ff4:	14 97       	sbiw	r26, 0x04	; 4
     ff6:	17 96       	adiw	r26, 0x07	; 7
     ff8:	1c 92       	st	X, r1
     ffa:	1e 92       	st	-X, r1
     ffc:	16 97       	sbiw	r26, 0x06	; 6
     ffe:	19 96       	adiw	r26, 0x09	; 9
    1000:	1c 92       	st	X, r1
    1002:	1e 92       	st	-X, r1
    1004:	18 97       	sbiw	r26, 0x08	; 8
    1006:	1b 96       	adiw	r26, 0x0b	; 11
    1008:	1c 93       	st	X, r17
    100a:	0e 93       	st	-X, r16
    100c:	1a 97       	sbiw	r26, 0x0a	; 10
    100e:	20 97       	sbiw	r28, 0x00	; 0
    1010:	a1 f0       	breq	.+40     	; 0x103a <add_entry+0x76>
    1012:	ec 81       	ldd	r30, Y+4	; 0x04
    1014:	fd 81       	ldd	r31, Y+5	; 0x05
    1016:	30 97       	sbiw	r30, 0x00	; 0
    1018:	19 f4       	brne	.+6      	; 0x1020 <add_entry+0x5c>
    101a:	9d 83       	std	Y+5, r25	; 0x05
    101c:	8c 83       	std	Y+4, r24	; 0x04
    101e:	0d c0       	rjmp	.+26     	; 0x103a <add_entry+0x76>
    1020:	26 81       	ldd	r18, Z+6	; 0x06
    1022:	37 81       	ldd	r19, Z+7	; 0x07
    1024:	21 15       	cp	r18, r1
    1026:	31 05       	cpc	r19, r1
    1028:	11 f0       	breq	.+4      	; 0x102e <add_entry+0x6a>
    102a:	f9 01       	movw	r30, r18
    102c:	f9 cf       	rjmp	.-14     	; 0x1020 <add_entry+0x5c>
    102e:	b7 83       	std	Z+7, r27	; 0x07
    1030:	a6 83       	std	Z+6, r26	; 0x06
    1032:	19 96       	adiw	r26, 0x09	; 9
    1034:	fc 93       	st	X, r31
    1036:	ee 93       	st	-X, r30
    1038:	18 97       	sbiw	r26, 0x08	; 8
    103a:	cd 01       	movw	r24, r26
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	ff 90       	pop	r15
    1046:	ef 90       	pop	r14
    1048:	08 95       	ret

0000104a <MENU_init>:
    104a:	cf 92       	push	r12
    104c:	df 92       	push	r13
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	66 e2       	ldi	r22, 0x26	; 38
    1060:	73 e0       	ldi	r23, 0x03	; 3
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <add_entry>
    106a:	ec 01       	movw	r28, r24
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	60 e3       	ldi	r22, 0x30	; 48
    1072:	73 e0       	ldi	r23, 0x03	; 3
    1074:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <add_entry>
    1078:	6c 01       	movw	r12, r24
    107a:	46 e0       	ldi	r20, 0x06	; 6
    107c:	57 e0       	ldi	r21, 0x07	; 7
    107e:	6a e3       	ldi	r22, 0x3A	; 58
    1080:	73 e0       	ldi	r23, 0x03	; 3
    1082:	ce 01       	movw	r24, r28
    1084:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <add_entry>
    1088:	40 e0       	ldi	r20, 0x00	; 0
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	64 e4       	ldi	r22, 0x44	; 68
    108e:	73 e0       	ldi	r23, 0x03	; 3
    1090:	ce 01       	movw	r24, r28
    1092:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <add_entry>
    1096:	7c 01       	movw	r14, r24
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	69 ea       	ldi	r22, 0xA9	; 169
    109e:	73 e0       	ldi	r23, 0x03	; 3
    10a0:	ce 01       	movw	r24, r28
    10a2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <add_entry>
    10a6:	8c 01       	movw	r16, r24
    10a8:	4a e2       	ldi	r20, 0x2A	; 42
    10aa:	52 e0       	ldi	r21, 0x02	; 2
    10ac:	6d e4       	ldi	r22, 0x4D	; 77
    10ae:	73 e0       	ldi	r23, 0x03	; 3
    10b0:	c7 01       	movw	r24, r14
    10b2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <add_entry>
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	68 e5       	ldi	r22, 0x58	; 88
    10bc:	73 e0       	ldi	r23, 0x03	; 3
    10be:	c7 01       	movw	r24, r14
    10c0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <add_entry>
    10c4:	44 ec       	ldi	r20, 0xC4	; 196
    10c6:	54 e0       	ldi	r21, 0x04	; 4
    10c8:	61 e6       	ldi	r22, 0x61	; 97
    10ca:	73 e0       	ldi	r23, 0x03	; 3
    10cc:	c8 01       	movw	r24, r16
    10ce:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <add_entry>
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	6a e6       	ldi	r22, 0x6A	; 106
    10d8:	73 e0       	ldi	r23, 0x03	; 3
    10da:	c8 01       	movw	r24, r16
    10dc:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <add_entry>
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	65 e7       	ldi	r22, 0x75	; 117
    10e6:	73 e0       	ldi	r23, 0x03	; 3
    10e8:	c8 01       	movw	r24, r16
    10ea:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <add_entry>
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	6f e7       	ldi	r22, 0x7F	; 127
    10f4:	73 e0       	ldi	r23, 0x03	; 3
    10f6:	c8 01       	movw	r24, r16
    10f8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <add_entry>
    10fc:	d0 93 dc 03 	sts	0x03DC, r29
    1100:	c0 93 db 03 	sts	0x03DB, r28
    1104:	d0 92 da 03 	sts	0x03DA, r13
    1108:	c0 92 d9 03 	sts	0x03D9, r12
    110c:	0e 94 0b 07 	call	0xe16	; 0xe16 <MENU_draw_current_menu>
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	ff 90       	pop	r15
    111a:	ef 90       	pop	r14
    111c:	df 90       	pop	r13
    111e:	cf 90       	pop	r12
    1120:	08 95       	ret

00001122 <initialize>:
    1122:	f8 94       	cli
    1124:	0e 94 15 09 	call	0x122a	; 0x122a <OLED_reset>
    1128:	8f e1       	ldi	r24, 0x1F	; 31
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <usart_init>
    1130:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <SRAM_init>
    1134:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
    1138:	0e 94 26 03 	call	0x64c	; 0x64c <JOY_init>
    113c:	0e 94 21 09 	call	0x1242	; 0x1242 <OLED_init>
    1140:	0e 94 25 08 	call	0x104a	; 0x104a <MENU_init>
    1144:	78 94       	sei
    1146:	08 95       	ret

00001148 <main>:
    1148:	0e 94 91 08 	call	0x1122	; 0x1122 <initialize>
    114c:	0e 94 b3 07 	call	0xf66	; 0xf66 <MENU_run>
    1150:	fd cf       	rjmp	.-6      	; 0x114c <main+0x4>

00001152 <OLED_print_char>:
	write_cmd(0x81);
	write_cmd(lvl);
}

void OLED_print_char(char c){
	if (c == '\0') return;
    1152:	88 23       	and	r24, r24
    1154:	f9 f0       	breq	.+62     	; 0x1194 <OLED_print_char+0x42>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
    1156:	e8 2f       	mov	r30, r24
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	b0 97       	sbiw	r30, 0x20	; 32
	for (int col = 0; col < FONT_SIZE; col++){
    115c:	80 91 40 01 	lds	r24, 0x0140
    1160:	88 23       	and	r24, r24
    1162:	c1 f0       	breq	.+48     	; 0x1194 <OLED_print_char+0x42>
    1164:	ee 0f       	add	r30, r30
    1166:	ff 1f       	adc	r31, r31
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	ee 0f       	add	r30, r30
    116e:	ff 1f       	adc	r31, r31
    1170:	e0 59       	subi	r30, 0x90	; 144
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	90 e0       	ldi	r25, 0x00	; 0
		write_data(pgm_read_byte(&font8[letter_index][col]));
    1178:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    117a:	a0 91 43 01 	lds	r26, 0x0143
    117e:	b0 91 44 01 	lds	r27, 0x0144
    1182:	2c 93       	st	X, r18

void OLED_print_char(char c){
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++){
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	31 96       	adiw	r30, 0x01	; 1
    1188:	20 91 40 01 	lds	r18, 0x0140
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	82 17       	cp	r24, r18
    1190:	93 07       	cpc	r25, r19
    1192:	94 f3       	brlt	.-28     	; 0x1178 <OLED_print_char+0x26>
    1194:	08 95       	ret

00001196 <write_data>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1196:	e0 91 43 01 	lds	r30, 0x0143
    119a:	f0 91 44 01 	lds	r31, 0x0144
    119e:	80 83       	st	Z, r24
    11a0:	08 95       	ret

000011a2 <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7){
    11a2:	88 30       	cpi	r24, 0x08	; 8
    11a4:	30 f4       	brcc	.+12     	; 0x11b2 <OLED_goto_line+0x10>
		return;
	}
	write_cmd(0xB0+line);
    11a6:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    11a8:	e0 91 41 01 	lds	r30, 0x0141
    11ac:	f0 91 42 01 	lds	r31, 0x0142
    11b0:	80 83       	st	Z, r24
    11b2:	08 95       	ret

000011b4 <OLED_goto_column>:
	}
	write_cmd(0xB0+line);
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
    11b4:	88 23       	and	r24, r24
    11b6:	7c f0       	brlt	.+30     	; 0x11d6 <OLED_goto_column+0x22>
		return;
	}
	write_cmd(0x00+column%16); //lower column register
    11b8:	98 2f       	mov	r25, r24
    11ba:	9f 70       	andi	r25, 0x0F	; 15
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    11bc:	e0 91 41 01 	lds	r30, 0x0141
    11c0:	f0 91 42 01 	lds	r31, 0x0142
    11c4:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
		return;
	}
	write_cmd(0x00+column%16); //lower column register
	write_cmd(0x10+column/16); //higher column register
    11c6:	82 95       	swap	r24
    11c8:	8f 70       	andi	r24, 0x0F	; 15
    11ca:	80 5f       	subi	r24, 0xF0	; 240
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    11cc:	e0 91 41 01 	lds	r30, 0x0141
    11d0:	f0 91 42 01 	lds	r31, 0x0142
    11d4:	80 83       	st	Z, r24
    11d6:	08 95       	ret

000011d8 <OLED_pos>:
		write_data(0x00);
		
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
    11d8:	cf 93       	push	r28
    11da:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
    11dc:	88 30       	cpi	r24, 0x08	; 8
    11de:	10 f4       	brcc	.+4      	; 0x11e4 <OLED_pos+0xc>
    11e0:	66 23       	and	r22, r22
    11e2:	4c f4       	brge	.+18     	; 0x11f6 <OLED_pos+0x1e>
		printf("Out of range in OLED_pos()");
    11e4:	8d e8       	ldi	r24, 0x8D	; 141
    11e6:	93 e0       	ldi	r25, 0x03	; 3
    11e8:	9f 93       	push	r25
    11ea:	8f 93       	push	r24
    11ec:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <printf>
		return; 
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <OLED_pos+0x28>
	}
	
	OLED_goto_line(line);
    11f6:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <OLED_goto_line>
	OLED_goto_column(column);
    11fa:	8c 2f       	mov	r24, r28
    11fc:	0e 94 da 08 	call	0x11b4	; 0x11b4 <OLED_goto_column>
}
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <OLED_home>:




void OLED_home(){
	OLED_pos(0,0);
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <OLED_pos>
    120c:	08 95       	ret

0000120e <OLED_clear_line>:
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <OLED_pos>
    1214:	80 e8       	ldi	r24, 0x80	; 128
    1216:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1218:	e0 91 43 01 	lds	r30, 0x0143
    121c:	f0 91 44 01 	lds	r31, 0x0144
    1220:	10 82       	st	Z, r1
    1222:	01 97       	sbiw	r24, 0x01	; 1
	OLED_pos(0,0);
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	c1 f7       	brne	.-16     	; 0x1218 <OLED_clear_line+0xa>
		write_data(0x00);
		
	}
}
    1228:	08 95       	ret

0000122a <OLED_reset>:
	
}



void OLED_reset() {
    122a:	cf 93       	push	r28
    122c:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
    122e:	8c 2f       	mov	r24, r28
    1230:	0e 94 07 09 	call	0x120e	; 0x120e <OLED_clear_line>
    1234:	cf 5f       	subi	r28, 0xFF	; 255
}



void OLED_reset() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
    1236:	c8 30       	cpi	r28, 0x08	; 8
    1238:	d1 f7       	brne	.-12     	; 0x122e <OLED_reset+0x4>
		OLED_clear_line(page);
	}
	OLED_home();
    123a:	0e 94 02 09 	call	0x1204	; 0x1204 <OLED_home>
}
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	66 97       	sbiw	r28, 0x16	; 22
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
	
	
	const char addresses[] = {
    1256:	86 e1       	ldi	r24, 0x16	; 22
    1258:	e5 e4       	ldi	r30, 0x45	; 69
    125a:	f1 e0       	ldi	r31, 0x01	; 1
    125c:	de 01       	movw	r26, r28
    125e:	11 96       	adiw	r26, 0x01	; 1
    1260:	01 90       	ld	r0, Z+
    1262:	0d 92       	st	X+, r0
    1264:	8a 95       	dec	r24
    1266:	e1 f7       	brne	.-8      	; 0x1260 <OLED_init+0x1e>
    1268:	fe 01       	movw	r30, r28
    126a:	31 96       	adiw	r30, 0x01	; 1
    126c:	ce 01       	movw	r24, r28
    126e:	47 96       	adiw	r24, 0x17	; 23
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
		write_cmd(addresses[i]);
    1270:	21 91       	ld	r18, Z+
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    1272:	a0 91 41 01 	lds	r26, 0x0141
    1276:	b0 91 42 01 	lds	r27, 0x0142
    127a:	2c 93       	st	X, r18
		0xa6, //set normal display
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
    127c:	e8 17       	cp	r30, r24
    127e:	f9 07       	cpc	r31, r25
    1280:	b9 f7       	brne	.-18     	; 0x1270 <OLED_init+0x2e>
		write_cmd(addresses[i]);
	}
	
	OLED_reset();
    1282:	0e 94 15 09 	call	0x122a	; 0x122a <OLED_reset>
	
}
    1286:	66 96       	adiw	r28, 0x16	; 22
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	df 91       	pop	r29
    1294:	cf 91       	pop	r28
    1296:	08 95       	ret

00001298 <OLED_set_brightness>:
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    1298:	e0 91 41 01 	lds	r30, 0x0141
    129c:	f0 91 42 01 	lds	r31, 0x0142
    12a0:	91 e8       	ldi	r25, 0x81	; 129
    12a2:	90 83       	st	Z, r25
    12a4:	e0 91 41 01 	lds	r30, 0x0141
    12a8:	f0 91 42 01 	lds	r31, 0x0142
    12ac:	80 83       	st	Z, r24
    12ae:	08 95       	ret

000012b0 <OLED_print_char_inverse>:
		write_data(pgm_read_byte(&font8[letter_index][col]));
	}
}

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
    12b0:	88 23       	and	r24, r24
    12b2:	01 f1       	breq	.+64     	; 0x12f4 <OLED_print_char_inverse+0x44>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
    12b4:	e8 2f       	mov	r30, r24
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	b0 97       	sbiw	r30, 0x20	; 32
	for (int col = 0; col < FONT_SIZE; col++) {
    12ba:	80 91 40 01 	lds	r24, 0x0140
    12be:	88 23       	and	r24, r24
    12c0:	c9 f0       	breq	.+50     	; 0x12f4 <OLED_print_char_inverse+0x44>
    12c2:	ee 0f       	add	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	ee 0f       	add	r30, r30
    12c8:	ff 1f       	adc	r31, r31
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	e0 59       	subi	r30, 0x90	; 144
    12d0:	ff 4f       	sbci	r31, 0xFF	; 255
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
		write_data(~pgm_read_byte(&font8[letter_index][col]));
    12d6:	24 91       	lpm	r18, Z
    12d8:	20 95       	com	r18
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    12da:	a0 91 43 01 	lds	r26, 0x0143
    12de:	b0 91 44 01 	lds	r27, 0x0144
    12e2:	2c 93       	st	X, r18

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++) {
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	31 96       	adiw	r30, 0x01	; 1
    12e8:	20 91 40 01 	lds	r18, 0x0140
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	82 17       	cp	r24, r18
    12f0:	93 07       	cpc	r25, r19
    12f2:	8c f3       	brlt	.-30     	; 0x12d6 <OLED_print_char_inverse+0x26>
    12f4:	08 95       	ret

000012f6 <OLED_set_line>:
	}
	OLED_home();
}

void OLED_set_line(uint8_t line) {
	OLED_pos(line,0);
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <OLED_pos>
    12fc:	80 e8       	ldi	r24, 0x80	; 128
    12fe:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1300:	2f ef       	ldi	r18, 0xFF	; 255
    1302:	e0 91 43 01 	lds	r30, 0x0143
    1306:	f0 91 44 01 	lds	r31, 0x0144
    130a:	20 83       	st	Z, r18
    130c:	01 97       	sbiw	r24, 0x01	; 1
	OLED_home();
}

void OLED_set_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	c1 f7       	brne	.-16     	; 0x1302 <OLED_set_line+0xc>
		write_data(0xFF);
		
	}
}
    1312:	08 95       	ret

00001314 <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1314:	e0 91 43 01 	lds	r30, 0x0143
    1318:	f0 91 44 01 	lds	r31, 0x0144
    131c:	88 e1       	ldi	r24, 0x18	; 24
    131e:	80 83       	st	Z, r24
    1320:	e0 91 43 01 	lds	r30, 0x0143
    1324:	f0 91 44 01 	lds	r31, 0x0144
    1328:	80 83       	st	Z, r24
    132a:	e0 91 43 01 	lds	r30, 0x0143
    132e:	f0 91 44 01 	lds	r31, 0x0144
    1332:	9e e7       	ldi	r25, 0x7E	; 126
    1334:	90 83       	st	Z, r25
    1336:	e0 91 43 01 	lds	r30, 0x0143
    133a:	f0 91 44 01 	lds	r31, 0x0144
    133e:	9c e3       	ldi	r25, 0x3C	; 60
    1340:	90 83       	st	Z, r25
    1342:	e0 91 43 01 	lds	r30, 0x0143
    1346:	f0 91 44 01 	lds	r31, 0x0144
    134a:	80 83       	st	Z, r24
    134c:	08 95       	ret

0000134e <print_blank>:
#include "OLED_driver.h"

#include <stdio.h>
#include <string.h>

void print_blank(int number) {
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
    1358:	18 16       	cp	r1, r24
    135a:	19 06       	cpc	r1, r25
    135c:	54 f4       	brge	.+20     	; 0x1372 <print_blank+0x24>
    135e:	c0 e0       	ldi	r28, 0x00	; 0
    1360:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0x00);
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>

#include <stdio.h>
#include <string.h>

void print_blank(int number) {
	for (int i = 0; i < number; i++) {
    136a:	21 96       	adiw	r28, 0x01	; 1
    136c:	c0 17       	cp	r28, r16
    136e:	d1 07       	cpc	r29, r17
    1370:	c1 f7       	brne	.-16     	; 0x1362 <print_blank+0x14>
		write_data(0x00);
	}
}
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	08 95       	ret

0000137c <print_fill>:

void print_fill(int number) {
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
    1386:	18 16       	cp	r1, r24
    1388:	19 06       	cpc	r1, r25
    138a:	54 f4       	brge	.+20     	; 0x13a0 <print_fill+0x24>
    138c:	c0 e0       	ldi	r28, 0x00	; 0
    138e:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0xFF);
    1390:	8f ef       	ldi	r24, 0xFF	; 255
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(0x00);
	}
}

void print_fill(int number) {
	for (int i = 0; i < number; i++) {
    1398:	21 96       	adiw	r28, 0x01	; 1
    139a:	c0 17       	cp	r28, r16
    139c:	d1 07       	cpc	r29, r17
    139e:	c1 f7       	brne	.-16     	; 0x1390 <print_fill+0x14>
		write_data(0xFF);
	}
}
    13a0:	df 91       	pop	r29
    13a2:	cf 91       	pop	r28
    13a4:	1f 91       	pop	r17
    13a6:	0f 91       	pop	r16
    13a8:	08 95       	ret

000013aa <print_shift>:

void print_shift(int inverse) {
	if (!inverse) {
    13aa:	89 2b       	or	r24, r25
    13ac:	29 f5       	brne	.+74     	; 0x13f8 <print_shift+0x4e>
		print_blank(4);
    13ae:	84 e0       	ldi	r24, 0x04	; 4
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0e 94 a7 09 	call	0x134e	; 0x134e <print_blank>
		//up-arrow
		write_data(0b00010000);
    13b6:	80 e1       	ldi	r24, 0x10	; 16
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(0b00011000);
    13be:	88 e1       	ldi	r24, 0x18	; 24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(0b00111100);
    13c6:	8c e3       	ldi	r24, 0x3C	; 60
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(0b00111110);
    13ce:	8e e3       	ldi	r24, 0x3E	; 62
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(0b00111100);
    13d6:	8c e3       	ldi	r24, 0x3C	; 60
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(0b00011000);
    13de:	88 e1       	ldi	r24, 0x18	; 24
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(0b00010000);
    13e6:	80 e1       	ldi	r24, 0x10	; 16
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>

		print_blank(5);
    13ee:	85 e0       	ldi	r24, 0x05	; 5
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	0e 94 a7 09 	call	0x134e	; 0x134e <print_blank>
    13f6:	08 95       	ret
	}
	else {
		print_fill(4);
    13f8:	84 e0       	ldi	r24, 0x04	; 4
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 be 09 	call	0x137c	; 0x137c <print_fill>
		//up-arrow
		write_data(~0b00010000);
    1400:	8f ee       	ldi	r24, 0xEF	; 239
    1402:	9f ef       	ldi	r25, 0xFF	; 255
    1404:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(~0b00011000);
    1408:	87 ee       	ldi	r24, 0xE7	; 231
    140a:	9f ef       	ldi	r25, 0xFF	; 255
    140c:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(~0b00111100);
    1410:	83 ec       	ldi	r24, 0xC3	; 195
    1412:	9f ef       	ldi	r25, 0xFF	; 255
    1414:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(~0b00111110);
    1418:	81 ec       	ldi	r24, 0xC1	; 193
    141a:	9f ef       	ldi	r25, 0xFF	; 255
    141c:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(~0b00111100);
    1420:	83 ec       	ldi	r24, 0xC3	; 195
    1422:	9f ef       	ldi	r25, 0xFF	; 255
    1424:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(~0b00011000);
    1428:	87 ee       	ldi	r24, 0xE7	; 231
    142a:	9f ef       	ldi	r25, 0xFF	; 255
    142c:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(~0b00010000);
    1430:	8f ee       	ldi	r24, 0xEF	; 239
    1432:	9f ef       	ldi	r25, 0xFF	; 255
    1434:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		print_fill(5);
    1438:	85 e0       	ldi	r24, 0x05	; 5
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 be 09 	call	0x137c	; 0x137c <print_fill>
    1440:	08 95       	ret

00001442 <print_left_arrow>:
	}
}

void print_left_arrow(int inverse) {
	if (!inverse) {
    1442:	89 2b       	or	r24, r25
    1444:	a9 f4       	brne	.+42     	; 0x1470 <print_left_arrow+0x2e>
		print_blank(6);
    1446:	86 e0       	ldi	r24, 0x06	; 6
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 a7 09 	call	0x134e	; 0x134e <print_blank>
		//left-arrow

		write_data(0b00010000);
    144e:	80 e1       	ldi	r24, 0x10	; 16
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(0b00111000);
    1456:	88 e3       	ldi	r24, 0x38	; 56
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(0b01111100);
    145e:	8c e7       	ldi	r24, 0x7C	; 124
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>

		print_blank(7);
    1466:	87 e0       	ldi	r24, 0x07	; 7
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 a7 09 	call	0x134e	; 0x134e <print_blank>
    146e:	08 95       	ret
	}
	else {
		print_fill(6);
    1470:	86 e0       	ldi	r24, 0x06	; 6
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 be 09 	call	0x137c	; 0x137c <print_fill>
		//left-arrow
		write_data(~0b00010000);
    1478:	8f ee       	ldi	r24, 0xEF	; 239
    147a:	9f ef       	ldi	r25, 0xFF	; 255
    147c:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(~0b00111000);
    1480:	87 ec       	ldi	r24, 0xC7	; 199
    1482:	9f ef       	ldi	r25, 0xFF	; 255
    1484:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(~0b01111100);
    1488:	83 e8       	ldi	r24, 0x83	; 131
    148a:	9f ef       	ldi	r25, 0xFF	; 255
    148c:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>

		print_fill(7);
    1490:	87 e0       	ldi	r24, 0x07	; 7
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 be 09 	call	0x137c	; 0x137c <print_fill>
    1498:	08 95       	ret

0000149a <print_right_arrow>:
	}
}


void print_right_arrow(int inverse) {
	if (!inverse) {
    149a:	89 2b       	or	r24, r25
    149c:	a9 f4       	brne	.+42     	; 0x14c8 <print_right_arrow+0x2e>
		print_blank(6);
    149e:	86 e0       	ldi	r24, 0x06	; 6
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	0e 94 a7 09 	call	0x134e	; 0x134e <print_blank>

		//right-arrow
		write_data(0b01111100);
    14a6:	8c e7       	ldi	r24, 0x7C	; 124
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(0b00111000);
    14ae:	88 e3       	ldi	r24, 0x38	; 56
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(0b00010000);
    14b6:	80 e1       	ldi	r24, 0x10	; 16
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>

		print_blank(7);
    14be:	87 e0       	ldi	r24, 0x07	; 7
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 a7 09 	call	0x134e	; 0x134e <print_blank>
    14c6:	08 95       	ret
	}
	else {
		print_fill(6);
    14c8:	86 e0       	ldi	r24, 0x06	; 6
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 be 09 	call	0x137c	; 0x137c <print_fill>

		//right-arrow
		write_data(~0b01111100);
    14d0:	83 e8       	ldi	r24, 0x83	; 131
    14d2:	9f ef       	ldi	r25, 0xFF	; 255
    14d4:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(~0b00111000);
    14d8:	87 ec       	ldi	r24, 0xC7	; 199
    14da:	9f ef       	ldi	r25, 0xFF	; 255
    14dc:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
		write_data(~0b00010000);
    14e0:	8f ee       	ldi	r24, 0xEF	; 239
    14e2:	9f ef       	ldi	r25, 0xFF	; 255
    14e4:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>

		print_fill(7);
    14e8:	87 e0       	ldi	r24, 0x07	; 7
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 be 09 	call	0x137c	; 0x137c <print_fill>
    14f0:	08 95       	ret

000014f2 <print_spacebar>:
	}
}


void print_spacebar(int inverse) {
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
	if (!inverse) {
    14f6:	89 2b       	or	r24, r25
    14f8:	d1 f4       	brne	.+52     	; 0x152e <print_spacebar+0x3c>
		print_blank(4);
    14fa:	84 e0       	ldi	r24, 0x04	; 4
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 a7 09 	call	0x134e	; 0x134e <print_blank>

		//spacebar
		write_data(0b00111000);
    1502:	88 e3       	ldi	r24, 0x38	; 56
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
    150a:	c7 e2       	ldi	r28, 0x27	; 39
    150c:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 39;i++) write_data(0b00100000);
    150e:	80 e2       	ldi	r24, 0x20	; 32
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
    1516:	21 97       	sbiw	r28, 0x01	; 1
    1518:	20 97       	sbiw	r28, 0x00	; 0
    151a:	c9 f7       	brne	.-14     	; 0x150e <print_spacebar+0x1c>
		write_data(0b00111000);
    151c:	88 e3       	ldi	r24, 0x38	; 56
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>

		print_blank(5);
    1524:	85 e0       	ldi	r24, 0x05	; 5
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 a7 09 	call	0x134e	; 0x134e <print_blank>
    152c:	19 c0       	rjmp	.+50     	; 0x1560 <print_spacebar+0x6e>
	}
	else {
		print_blank(4);
    152e:	84 e0       	ldi	r24, 0x04	; 4
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 a7 09 	call	0x134e	; 0x134e <print_blank>

		//spacebar
		write_data(~0b00111000);
    1536:	87 ec       	ldi	r24, 0xC7	; 199
    1538:	9f ef       	ldi	r25, 0xFF	; 255
    153a:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
    153e:	c7 e2       	ldi	r28, 0x27	; 39
    1540:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 39;i++) write_data(~0b00100000);
    1542:	8f ed       	ldi	r24, 0xDF	; 223
    1544:	9f ef       	ldi	r25, 0xFF	; 255
    1546:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>
    154a:	21 97       	sbiw	r28, 0x01	; 1
    154c:	20 97       	sbiw	r28, 0x00	; 0
    154e:	c9 f7       	brne	.-14     	; 0x1542 <print_spacebar+0x50>
		write_data(~0b00111000);
    1550:	87 ec       	ldi	r24, 0xC7	; 199
    1552:	9f ef       	ldi	r25, 0xFF	; 255
    1554:	0e 94 cb 08 	call	0x1196	; 0x1196 <write_data>

		print_blank(5);
    1558:	85 e0       	ldi	r24, 0x05	; 5
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 a7 09 	call	0x134e	; 0x134e <print_blank>
	}
}
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	08 95       	ret

00001566 <print_options_bar>:


void print_options_bar(int shift_inverse, int space_inverse, int left_inverse,  int right_inverse) {
    1566:	ef 92       	push	r14
    1568:	ff 92       	push	r15
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	7b 01       	movw	r14, r22
    1574:	8a 01       	movw	r16, r20
    1576:	e9 01       	movw	r28, r18
	print_shift(shift_inverse);
    1578:	0e 94 d5 09 	call	0x13aa	; 0x13aa <print_shift>
	print_spacebar(space_inverse);
    157c:	c7 01       	movw	r24, r14
    157e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <print_spacebar>
	print_left_arrow(left_inverse);
    1582:	c8 01       	movw	r24, r16
    1584:	0e 94 21 0a 	call	0x1442	; 0x1442 <print_left_arrow>
	print_right_arrow(right_inverse);
    1588:	ce 01       	movw	r24, r28
    158a:	0e 94 4d 0a 	call	0x149a	; 0x149a <print_right_arrow>
}
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	ff 90       	pop	r15
    1598:	ef 90       	pop	r14
    159a:	08 95       	ret

0000159c <print_char>:

void print_char(char c, int inverse) {
	if (!inverse) {
    159c:	67 2b       	or	r22, r23
    159e:	19 f4       	brne	.+6      	; 0x15a6 <print_char+0xa>
		OLED_print_char(c);
    15a0:	0e 94 a9 08 	call	0x1152	; 0x1152 <OLED_print_char>
    15a4:	08 95       	ret
	}
	else {
		OLED_print_char_inverse(c);
    15a6:	0e 94 58 09 	call	0x12b0	; 0x12b0 <OLED_print_char_inverse>
    15aa:	08 95       	ret

000015ac <SPI_send>:
    15ac:	8f b9       	out	0x0f, r24	; 15
    15ae:	77 9b       	sbis	0x0e, 7	; 14
    15b0:	fe cf       	rjmp	.-4      	; 0x15ae <SPI_send+0x2>
    15b2:	08 95       	ret

000015b4 <SPI_read>:
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <SPI_send>
    15ba:	77 9b       	sbis	0x0e, 7	; 14
    15bc:	fe cf       	rjmp	.-4      	; 0x15ba <SPI_read+0x6>
    15be:	8f b1       	in	r24, 0x0f	; 15
    15c0:	08 95       	ret

000015c2 <SPI_select>:
    15c2:	c4 98       	cbi	0x18, 4	; 24
    15c4:	08 95       	ret

000015c6 <SPI_deselect>:
    15c6:	c4 9a       	sbi	0x18, 4	; 24
    15c8:	08 95       	ret

000015ca <SRAM_init>:
    15ca:	85 b7       	in	r24, 0x35	; 53
    15cc:	80 68       	ori	r24, 0x80	; 128
    15ce:	85 bf       	out	0x35, r24	; 53
    15d0:	80 b7       	in	r24, 0x30	; 48
    15d2:	80 62       	ori	r24, 0x20	; 32
    15d4:	80 bf       	out	0x30, r24	; 48
    15d6:	80 b7       	in	r24, 0x30	; 48
    15d8:	8f 7e       	andi	r24, 0xEF	; 239
    15da:	80 bf       	out	0x30, r24	; 48
    15dc:	80 b7       	in	r24, 0x30	; 48
    15de:	87 7f       	andi	r24, 0xF7	; 247
    15e0:	80 bf       	out	0x30, r24	; 48
    15e2:	08 95       	ret

000015e4 <usart_transmit_to_computer>:
    15e4:	5d 9b       	sbis	0x0b, 5	; 11
    15e6:	fe cf       	rjmp	.-4      	; 0x15e4 <usart_transmit_to_computer>
    15e8:	8c b9       	out	0x0c, r24	; 12
    15ea:	08 95       	ret

000015ec <usart_receive_from_computer>:
    15ec:	5f 9b       	sbis	0x0b, 7	; 11
    15ee:	fe cf       	rjmp	.-4      	; 0x15ec <usart_receive_from_computer>
    15f0:	8c b1       	in	r24, 0x0c	; 12
    15f2:	08 95       	ret

000015f4 <usart_init>:
    15f4:	90 bd       	out	0x20, r25	; 32
    15f6:	89 b9       	out	0x09, r24	; 9
    15f8:	88 e1       	ldi	r24, 0x18	; 24
    15fa:	8a b9       	out	0x0a, r24	; 10
    15fc:	8e e8       	ldi	r24, 0x8E	; 142
    15fe:	80 bd       	out	0x20, r24	; 32
    1600:	66 ef       	ldi	r22, 0xF6	; 246
    1602:	7a e0       	ldi	r23, 0x0A	; 10
    1604:	82 ef       	ldi	r24, 0xF2	; 242
    1606:	9a e0       	ldi	r25, 0x0A	; 10
    1608:	0e 94 56 0c 	call	0x18ac	; 0x18ac <fdevopen>
    160c:	08 95       	ret

0000160e <__divmodhi4>:
    160e:	97 fb       	bst	r25, 7
    1610:	07 2e       	mov	r0, r23
    1612:	16 f4       	brtc	.+4      	; 0x1618 <__divmodhi4+0xa>
    1614:	00 94       	com	r0
    1616:	07 d0       	rcall	.+14     	; 0x1626 <__divmodhi4_neg1>
    1618:	77 fd       	sbrc	r23, 7
    161a:	09 d0       	rcall	.+18     	; 0x162e <__divmodhi4_neg2>
    161c:	0e 94 1b 0b 	call	0x1636	; 0x1636 <__udivmodhi4>
    1620:	07 fc       	sbrc	r0, 7
    1622:	05 d0       	rcall	.+10     	; 0x162e <__divmodhi4_neg2>
    1624:	3e f4       	brtc	.+14     	; 0x1634 <__divmodhi4_exit>

00001626 <__divmodhi4_neg1>:
    1626:	90 95       	com	r25
    1628:	81 95       	neg	r24
    162a:	9f 4f       	sbci	r25, 0xFF	; 255
    162c:	08 95       	ret

0000162e <__divmodhi4_neg2>:
    162e:	70 95       	com	r23
    1630:	61 95       	neg	r22
    1632:	7f 4f       	sbci	r23, 0xFF	; 255

00001634 <__divmodhi4_exit>:
    1634:	08 95       	ret

00001636 <__udivmodhi4>:
    1636:	aa 1b       	sub	r26, r26
    1638:	bb 1b       	sub	r27, r27
    163a:	51 e1       	ldi	r21, 0x11	; 17
    163c:	07 c0       	rjmp	.+14     	; 0x164c <__udivmodhi4_ep>

0000163e <__udivmodhi4_loop>:
    163e:	aa 1f       	adc	r26, r26
    1640:	bb 1f       	adc	r27, r27
    1642:	a6 17       	cp	r26, r22
    1644:	b7 07       	cpc	r27, r23
    1646:	10 f0       	brcs	.+4      	; 0x164c <__udivmodhi4_ep>
    1648:	a6 1b       	sub	r26, r22
    164a:	b7 0b       	sbc	r27, r23

0000164c <__udivmodhi4_ep>:
    164c:	88 1f       	adc	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	5a 95       	dec	r21
    1652:	a9 f7       	brne	.-22     	; 0x163e <__udivmodhi4_loop>
    1654:	80 95       	com	r24
    1656:	90 95       	com	r25
    1658:	bc 01       	movw	r22, r24
    165a:	cd 01       	movw	r24, r26
    165c:	08 95       	ret

0000165e <malloc>:
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	91 05       	cpc	r25, r1
    1666:	10 f4       	brcc	.+4      	; 0x166c <malloc+0xe>
    1668:	82 e0       	ldi	r24, 0x02	; 2
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	e0 91 df 03 	lds	r30, 0x03DF
    1670:	f0 91 e0 03 	lds	r31, 0x03E0
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	a0 e0       	ldi	r26, 0x00	; 0
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	30 97       	sbiw	r30, 0x00	; 0
    167e:	39 f1       	breq	.+78     	; 0x16ce <malloc+0x70>
    1680:	40 81       	ld	r20, Z
    1682:	51 81       	ldd	r21, Z+1	; 0x01
    1684:	48 17       	cp	r20, r24
    1686:	59 07       	cpc	r21, r25
    1688:	b8 f0       	brcs	.+46     	; 0x16b8 <malloc+0x5a>
    168a:	48 17       	cp	r20, r24
    168c:	59 07       	cpc	r21, r25
    168e:	71 f4       	brne	.+28     	; 0x16ac <malloc+0x4e>
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	93 81       	ldd	r25, Z+3	; 0x03
    1694:	10 97       	sbiw	r26, 0x00	; 0
    1696:	29 f0       	breq	.+10     	; 0x16a2 <malloc+0x44>
    1698:	13 96       	adiw	r26, 0x03	; 3
    169a:	9c 93       	st	X, r25
    169c:	8e 93       	st	-X, r24
    169e:	12 97       	sbiw	r26, 0x02	; 2
    16a0:	2c c0       	rjmp	.+88     	; 0x16fa <malloc+0x9c>
    16a2:	90 93 e0 03 	sts	0x03E0, r25
    16a6:	80 93 df 03 	sts	0x03DF, r24
    16aa:	27 c0       	rjmp	.+78     	; 0x16fa <malloc+0x9c>
    16ac:	21 15       	cp	r18, r1
    16ae:	31 05       	cpc	r19, r1
    16b0:	31 f0       	breq	.+12     	; 0x16be <malloc+0x60>
    16b2:	42 17       	cp	r20, r18
    16b4:	53 07       	cpc	r21, r19
    16b6:	18 f0       	brcs	.+6      	; 0x16be <malloc+0x60>
    16b8:	a9 01       	movw	r20, r18
    16ba:	db 01       	movw	r26, r22
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <malloc+0x62>
    16be:	ef 01       	movw	r28, r30
    16c0:	9a 01       	movw	r18, r20
    16c2:	bd 01       	movw	r22, r26
    16c4:	df 01       	movw	r26, r30
    16c6:	02 80       	ldd	r0, Z+2	; 0x02
    16c8:	f3 81       	ldd	r31, Z+3	; 0x03
    16ca:	e0 2d       	mov	r30, r0
    16cc:	d7 cf       	rjmp	.-82     	; 0x167c <malloc+0x1e>
    16ce:	21 15       	cp	r18, r1
    16d0:	31 05       	cpc	r19, r1
    16d2:	f9 f0       	breq	.+62     	; 0x1712 <malloc+0xb4>
    16d4:	28 1b       	sub	r18, r24
    16d6:	39 0b       	sbc	r19, r25
    16d8:	24 30       	cpi	r18, 0x04	; 4
    16da:	31 05       	cpc	r19, r1
    16dc:	80 f4       	brcc	.+32     	; 0x16fe <malloc+0xa0>
    16de:	8a 81       	ldd	r24, Y+2	; 0x02
    16e0:	9b 81       	ldd	r25, Y+3	; 0x03
    16e2:	61 15       	cp	r22, r1
    16e4:	71 05       	cpc	r23, r1
    16e6:	21 f0       	breq	.+8      	; 0x16f0 <malloc+0x92>
    16e8:	fb 01       	movw	r30, r22
    16ea:	93 83       	std	Z+3, r25	; 0x03
    16ec:	82 83       	std	Z+2, r24	; 0x02
    16ee:	04 c0       	rjmp	.+8      	; 0x16f8 <malloc+0x9a>
    16f0:	90 93 e0 03 	sts	0x03E0, r25
    16f4:	80 93 df 03 	sts	0x03DF, r24
    16f8:	fe 01       	movw	r30, r28
    16fa:	32 96       	adiw	r30, 0x02	; 2
    16fc:	44 c0       	rjmp	.+136    	; 0x1786 <malloc+0x128>
    16fe:	fe 01       	movw	r30, r28
    1700:	e2 0f       	add	r30, r18
    1702:	f3 1f       	adc	r31, r19
    1704:	81 93       	st	Z+, r24
    1706:	91 93       	st	Z+, r25
    1708:	22 50       	subi	r18, 0x02	; 2
    170a:	31 09       	sbc	r19, r1
    170c:	39 83       	std	Y+1, r19	; 0x01
    170e:	28 83       	st	Y, r18
    1710:	3a c0       	rjmp	.+116    	; 0x1786 <malloc+0x128>
    1712:	20 91 dd 03 	lds	r18, 0x03DD
    1716:	30 91 de 03 	lds	r19, 0x03DE
    171a:	23 2b       	or	r18, r19
    171c:	41 f4       	brne	.+16     	; 0x172e <malloc+0xd0>
    171e:	20 91 02 01 	lds	r18, 0x0102
    1722:	30 91 03 01 	lds	r19, 0x0103
    1726:	30 93 de 03 	sts	0x03DE, r19
    172a:	20 93 dd 03 	sts	0x03DD, r18
    172e:	20 91 00 01 	lds	r18, 0x0100
    1732:	30 91 01 01 	lds	r19, 0x0101
    1736:	21 15       	cp	r18, r1
    1738:	31 05       	cpc	r19, r1
    173a:	41 f4       	brne	.+16     	; 0x174c <malloc+0xee>
    173c:	2d b7       	in	r18, 0x3d	; 61
    173e:	3e b7       	in	r19, 0x3e	; 62
    1740:	40 91 04 01 	lds	r20, 0x0104
    1744:	50 91 05 01 	lds	r21, 0x0105
    1748:	24 1b       	sub	r18, r20
    174a:	35 0b       	sbc	r19, r21
    174c:	e0 91 dd 03 	lds	r30, 0x03DD
    1750:	f0 91 de 03 	lds	r31, 0x03DE
    1754:	e2 17       	cp	r30, r18
    1756:	f3 07       	cpc	r31, r19
    1758:	a0 f4       	brcc	.+40     	; 0x1782 <malloc+0x124>
    175a:	2e 1b       	sub	r18, r30
    175c:	3f 0b       	sbc	r19, r31
    175e:	28 17       	cp	r18, r24
    1760:	39 07       	cpc	r19, r25
    1762:	78 f0       	brcs	.+30     	; 0x1782 <malloc+0x124>
    1764:	ac 01       	movw	r20, r24
    1766:	4e 5f       	subi	r20, 0xFE	; 254
    1768:	5f 4f       	sbci	r21, 0xFF	; 255
    176a:	24 17       	cp	r18, r20
    176c:	35 07       	cpc	r19, r21
    176e:	48 f0       	brcs	.+18     	; 0x1782 <malloc+0x124>
    1770:	4e 0f       	add	r20, r30
    1772:	5f 1f       	adc	r21, r31
    1774:	50 93 de 03 	sts	0x03DE, r21
    1778:	40 93 dd 03 	sts	0x03DD, r20
    177c:	81 93       	st	Z+, r24
    177e:	91 93       	st	Z+, r25
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <malloc+0x128>
    1782:	e0 e0       	ldi	r30, 0x00	; 0
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	cf 01       	movw	r24, r30
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret

0000178e <free>:
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	09 f4       	brne	.+2      	; 0x1798 <free+0xa>
    1796:	87 c0       	rjmp	.+270    	; 0x18a6 <free+0x118>
    1798:	fc 01       	movw	r30, r24
    179a:	32 97       	sbiw	r30, 0x02	; 2
    179c:	13 82       	std	Z+3, r1	; 0x03
    179e:	12 82       	std	Z+2, r1	; 0x02
    17a0:	c0 91 df 03 	lds	r28, 0x03DF
    17a4:	d0 91 e0 03 	lds	r29, 0x03E0
    17a8:	20 97       	sbiw	r28, 0x00	; 0
    17aa:	81 f4       	brne	.+32     	; 0x17cc <free+0x3e>
    17ac:	20 81       	ld	r18, Z
    17ae:	31 81       	ldd	r19, Z+1	; 0x01
    17b0:	28 0f       	add	r18, r24
    17b2:	39 1f       	adc	r19, r25
    17b4:	80 91 dd 03 	lds	r24, 0x03DD
    17b8:	90 91 de 03 	lds	r25, 0x03DE
    17bc:	82 17       	cp	r24, r18
    17be:	93 07       	cpc	r25, r19
    17c0:	79 f5       	brne	.+94     	; 0x1820 <free+0x92>
    17c2:	f0 93 de 03 	sts	0x03DE, r31
    17c6:	e0 93 dd 03 	sts	0x03DD, r30
    17ca:	6d c0       	rjmp	.+218    	; 0x18a6 <free+0x118>
    17cc:	de 01       	movw	r26, r28
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	ae 17       	cp	r26, r30
    17d4:	bf 07       	cpc	r27, r31
    17d6:	50 f4       	brcc	.+20     	; 0x17ec <free+0x5e>
    17d8:	12 96       	adiw	r26, 0x02	; 2
    17da:	4d 91       	ld	r20, X+
    17dc:	5c 91       	ld	r21, X
    17de:	13 97       	sbiw	r26, 0x03	; 3
    17e0:	9d 01       	movw	r18, r26
    17e2:	41 15       	cp	r20, r1
    17e4:	51 05       	cpc	r21, r1
    17e6:	09 f1       	breq	.+66     	; 0x182a <free+0x9c>
    17e8:	da 01       	movw	r26, r20
    17ea:	f3 cf       	rjmp	.-26     	; 0x17d2 <free+0x44>
    17ec:	b3 83       	std	Z+3, r27	; 0x03
    17ee:	a2 83       	std	Z+2, r26	; 0x02
    17f0:	40 81       	ld	r20, Z
    17f2:	51 81       	ldd	r21, Z+1	; 0x01
    17f4:	84 0f       	add	r24, r20
    17f6:	95 1f       	adc	r25, r21
    17f8:	8a 17       	cp	r24, r26
    17fa:	9b 07       	cpc	r25, r27
    17fc:	71 f4       	brne	.+28     	; 0x181a <free+0x8c>
    17fe:	8d 91       	ld	r24, X+
    1800:	9c 91       	ld	r25, X
    1802:	11 97       	sbiw	r26, 0x01	; 1
    1804:	84 0f       	add	r24, r20
    1806:	95 1f       	adc	r25, r21
    1808:	02 96       	adiw	r24, 0x02	; 2
    180a:	91 83       	std	Z+1, r25	; 0x01
    180c:	80 83       	st	Z, r24
    180e:	12 96       	adiw	r26, 0x02	; 2
    1810:	8d 91       	ld	r24, X+
    1812:	9c 91       	ld	r25, X
    1814:	13 97       	sbiw	r26, 0x03	; 3
    1816:	93 83       	std	Z+3, r25	; 0x03
    1818:	82 83       	std	Z+2, r24	; 0x02
    181a:	21 15       	cp	r18, r1
    181c:	31 05       	cpc	r19, r1
    181e:	29 f4       	brne	.+10     	; 0x182a <free+0x9c>
    1820:	f0 93 e0 03 	sts	0x03E0, r31
    1824:	e0 93 df 03 	sts	0x03DF, r30
    1828:	3e c0       	rjmp	.+124    	; 0x18a6 <free+0x118>
    182a:	d9 01       	movw	r26, r18
    182c:	13 96       	adiw	r26, 0x03	; 3
    182e:	fc 93       	st	X, r31
    1830:	ee 93       	st	-X, r30
    1832:	12 97       	sbiw	r26, 0x02	; 2
    1834:	4d 91       	ld	r20, X+
    1836:	5d 91       	ld	r21, X+
    1838:	a4 0f       	add	r26, r20
    183a:	b5 1f       	adc	r27, r21
    183c:	ea 17       	cp	r30, r26
    183e:	fb 07       	cpc	r31, r27
    1840:	79 f4       	brne	.+30     	; 0x1860 <free+0xd2>
    1842:	80 81       	ld	r24, Z
    1844:	91 81       	ldd	r25, Z+1	; 0x01
    1846:	84 0f       	add	r24, r20
    1848:	95 1f       	adc	r25, r21
    184a:	02 96       	adiw	r24, 0x02	; 2
    184c:	d9 01       	movw	r26, r18
    184e:	11 96       	adiw	r26, 0x01	; 1
    1850:	9c 93       	st	X, r25
    1852:	8e 93       	st	-X, r24
    1854:	82 81       	ldd	r24, Z+2	; 0x02
    1856:	93 81       	ldd	r25, Z+3	; 0x03
    1858:	13 96       	adiw	r26, 0x03	; 3
    185a:	9c 93       	st	X, r25
    185c:	8e 93       	st	-X, r24
    185e:	12 97       	sbiw	r26, 0x02	; 2
    1860:	e0 e0       	ldi	r30, 0x00	; 0
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	9b 81       	ldd	r25, Y+3	; 0x03
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	19 f0       	breq	.+6      	; 0x1872 <free+0xe4>
    186c:	fe 01       	movw	r30, r28
    186e:	ec 01       	movw	r28, r24
    1870:	f9 cf       	rjmp	.-14     	; 0x1864 <free+0xd6>
    1872:	ce 01       	movw	r24, r28
    1874:	02 96       	adiw	r24, 0x02	; 2
    1876:	28 81       	ld	r18, Y
    1878:	39 81       	ldd	r19, Y+1	; 0x01
    187a:	82 0f       	add	r24, r18
    187c:	93 1f       	adc	r25, r19
    187e:	20 91 dd 03 	lds	r18, 0x03DD
    1882:	30 91 de 03 	lds	r19, 0x03DE
    1886:	28 17       	cp	r18, r24
    1888:	39 07       	cpc	r19, r25
    188a:	69 f4       	brne	.+26     	; 0x18a6 <free+0x118>
    188c:	30 97       	sbiw	r30, 0x00	; 0
    188e:	29 f4       	brne	.+10     	; 0x189a <free+0x10c>
    1890:	10 92 e0 03 	sts	0x03E0, r1
    1894:	10 92 df 03 	sts	0x03DF, r1
    1898:	02 c0       	rjmp	.+4      	; 0x189e <free+0x110>
    189a:	13 82       	std	Z+3, r1	; 0x03
    189c:	12 82       	std	Z+2, r1	; 0x02
    189e:	d0 93 de 03 	sts	0x03DE, r29
    18a2:	c0 93 dd 03 	sts	0x03DD, r28
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	08 95       	ret

000018ac <fdevopen>:
    18ac:	0f 93       	push	r16
    18ae:	1f 93       	push	r17
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	ec 01       	movw	r28, r24
    18b6:	8b 01       	movw	r16, r22
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	31 f4       	brne	.+12     	; 0x18c8 <fdevopen+0x1c>
    18bc:	61 15       	cp	r22, r1
    18be:	71 05       	cpc	r23, r1
    18c0:	19 f4       	brne	.+6      	; 0x18c8 <fdevopen+0x1c>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	38 c0       	rjmp	.+112    	; 0x1938 <fdevopen+0x8c>
    18c8:	6e e0       	ldi	r22, 0x0E	; 14
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <calloc>
    18d4:	fc 01       	movw	r30, r24
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	a1 f3       	breq	.-24     	; 0x18c2 <fdevopen+0x16>
    18da:	80 e8       	ldi	r24, 0x80	; 128
    18dc:	83 83       	std	Z+3, r24	; 0x03
    18de:	01 15       	cp	r16, r1
    18e0:	11 05       	cpc	r17, r1
    18e2:	71 f0       	breq	.+28     	; 0x1900 <fdevopen+0x54>
    18e4:	13 87       	std	Z+11, r17	; 0x0b
    18e6:	02 87       	std	Z+10, r16	; 0x0a
    18e8:	81 e8       	ldi	r24, 0x81	; 129
    18ea:	83 83       	std	Z+3, r24	; 0x03
    18ec:	80 91 e1 03 	lds	r24, 0x03E1
    18f0:	90 91 e2 03 	lds	r25, 0x03E2
    18f4:	89 2b       	or	r24, r25
    18f6:	21 f4       	brne	.+8      	; 0x1900 <fdevopen+0x54>
    18f8:	f0 93 e2 03 	sts	0x03E2, r31
    18fc:	e0 93 e1 03 	sts	0x03E1, r30
    1900:	20 97       	sbiw	r28, 0x00	; 0
    1902:	c9 f0       	breq	.+50     	; 0x1936 <fdevopen+0x8a>
    1904:	d1 87       	std	Z+9, r29	; 0x09
    1906:	c0 87       	std	Z+8, r28	; 0x08
    1908:	83 81       	ldd	r24, Z+3	; 0x03
    190a:	82 60       	ori	r24, 0x02	; 2
    190c:	83 83       	std	Z+3, r24	; 0x03
    190e:	80 91 e3 03 	lds	r24, 0x03E3
    1912:	90 91 e4 03 	lds	r25, 0x03E4
    1916:	89 2b       	or	r24, r25
    1918:	71 f4       	brne	.+28     	; 0x1936 <fdevopen+0x8a>
    191a:	f0 93 e4 03 	sts	0x03E4, r31
    191e:	e0 93 e3 03 	sts	0x03E3, r30
    1922:	80 91 e5 03 	lds	r24, 0x03E5
    1926:	90 91 e6 03 	lds	r25, 0x03E6
    192a:	89 2b       	or	r24, r25
    192c:	21 f4       	brne	.+8      	; 0x1936 <fdevopen+0x8a>
    192e:	f0 93 e6 03 	sts	0x03E6, r31
    1932:	e0 93 e5 03 	sts	0x03E5, r30
    1936:	cf 01       	movw	r24, r30
    1938:	df 91       	pop	r29
    193a:	cf 91       	pop	r28
    193c:	1f 91       	pop	r17
    193e:	0f 91       	pop	r16
    1940:	08 95       	ret

00001942 <fprintf>:
    1942:	a0 e0       	ldi	r26, 0x00	; 0
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e7 ea       	ldi	r30, 0xA7	; 167
    1948:	fc e0       	ldi	r31, 0x0C	; 12
    194a:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__prologue_saves__+0x20>
    194e:	ae 01       	movw	r20, r28
    1950:	47 5f       	subi	r20, 0xF7	; 247
    1952:	5f 4f       	sbci	r21, 0xFF	; 255
    1954:	6f 81       	ldd	r22, Y+7	; 0x07
    1956:	78 85       	ldd	r23, Y+8	; 0x08
    1958:	8d 81       	ldd	r24, Y+5	; 0x05
    195a:	9e 81       	ldd	r25, Y+6	; 0x06
    195c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <vfprintf>
    1960:	e2 e0       	ldi	r30, 0x02	; 2
    1962:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__epilogue_restores__+0x20>

00001966 <fputs>:
    1966:	ef 92       	push	r14
    1968:	ff 92       	push	r15
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	8b 01       	movw	r16, r22
    1974:	db 01       	movw	r26, r22
    1976:	13 96       	adiw	r26, 0x03	; 3
    1978:	2c 91       	ld	r18, X
    197a:	21 ff       	sbrs	r18, 1
    197c:	16 c0       	rjmp	.+44     	; 0x19aa <fputs+0x44>
    197e:	ec 01       	movw	r28, r24
    1980:	e1 2c       	mov	r14, r1
    1982:	f1 2c       	mov	r15, r1
    1984:	89 91       	ld	r24, Y+
    1986:	88 23       	and	r24, r24
    1988:	71 f0       	breq	.+28     	; 0x19a6 <fputs+0x40>
    198a:	d8 01       	movw	r26, r16
    198c:	18 96       	adiw	r26, 0x08	; 8
    198e:	ed 91       	ld	r30, X+
    1990:	fc 91       	ld	r31, X
    1992:	19 97       	sbiw	r26, 0x09	; 9
    1994:	b8 01       	movw	r22, r16
    1996:	09 95       	icall
    1998:	89 2b       	or	r24, r25
    199a:	a1 f3       	breq	.-24     	; 0x1984 <fputs+0x1e>
    199c:	ee 24       	eor	r14, r14
    199e:	ea 94       	dec	r14
    19a0:	ff 24       	eor	r15, r15
    19a2:	fa 94       	dec	r15
    19a4:	ef cf       	rjmp	.-34     	; 0x1984 <fputs+0x1e>
    19a6:	c7 01       	movw	r24, r14
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <fputs+0x48>
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	9f ef       	ldi	r25, 0xFF	; 255
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	e6 e0       	ldi	r30, 0x06	; 6
    19b4:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <__epilogue_restores__+0x18>

000019b8 <printf>:
    19b8:	a0 e0       	ldi	r26, 0x00	; 0
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e2 ee       	ldi	r30, 0xE2	; 226
    19be:	fc e0       	ldi	r31, 0x0C	; 12
    19c0:	0c 94 c8 0f 	jmp	0x1f90	; 0x1f90 <__prologue_saves__+0x20>
    19c4:	fe 01       	movw	r30, r28
    19c6:	35 96       	adiw	r30, 0x05	; 5
    19c8:	61 91       	ld	r22, Z+
    19ca:	71 91       	ld	r23, Z+
    19cc:	af 01       	movw	r20, r30
    19ce:	80 91 e3 03 	lds	r24, 0x03E3
    19d2:	90 91 e4 03 	lds	r25, 0x03E4
    19d6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <vfprintf>
    19da:	e2 e0       	ldi	r30, 0x02	; 2
    19dc:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <__epilogue_restores__+0x20>

000019e0 <puts>:
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	e0 91 e3 03 	lds	r30, 0x03E3
    19ec:	f0 91 e4 03 	lds	r31, 0x03E4
    19f0:	23 81       	ldd	r18, Z+3	; 0x03
    19f2:	21 ff       	sbrs	r18, 1
    19f4:	1b c0       	rjmp	.+54     	; 0x1a2c <puts+0x4c>
    19f6:	ec 01       	movw	r28, r24
    19f8:	00 e0       	ldi	r16, 0x00	; 0
    19fa:	10 e0       	ldi	r17, 0x00	; 0
    19fc:	89 91       	ld	r24, Y+
    19fe:	60 91 e3 03 	lds	r22, 0x03E3
    1a02:	70 91 e4 03 	lds	r23, 0x03E4
    1a06:	db 01       	movw	r26, r22
    1a08:	18 96       	adiw	r26, 0x08	; 8
    1a0a:	ed 91       	ld	r30, X+
    1a0c:	fc 91       	ld	r31, X
    1a0e:	19 97       	sbiw	r26, 0x09	; 9
    1a10:	88 23       	and	r24, r24
    1a12:	31 f0       	breq	.+12     	; 0x1a20 <puts+0x40>
    1a14:	09 95       	icall
    1a16:	89 2b       	or	r24, r25
    1a18:	89 f3       	breq	.-30     	; 0x19fc <puts+0x1c>
    1a1a:	0f ef       	ldi	r16, 0xFF	; 255
    1a1c:	1f ef       	ldi	r17, 0xFF	; 255
    1a1e:	ee cf       	rjmp	.-36     	; 0x19fc <puts+0x1c>
    1a20:	8a e0       	ldi	r24, 0x0A	; 10
    1a22:	09 95       	icall
    1a24:	89 2b       	or	r24, r25
    1a26:	11 f4       	brne	.+4      	; 0x1a2c <puts+0x4c>
    1a28:	c8 01       	movw	r24, r16
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <puts+0x50>
    1a2c:	8f ef       	ldi	r24, 0xFF	; 255
    1a2e:	9f ef       	ldi	r25, 0xFF	; 255
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	08 95       	ret

00001a3a <vfprintf>:
    1a3a:	ac e0       	ldi	r26, 0x0C	; 12
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e3 e2       	ldi	r30, 0x23	; 35
    1a40:	fd e0       	ldi	r31, 0x0D	; 13
    1a42:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__prologue_saves__>
    1a46:	7c 01       	movw	r14, r24
    1a48:	6b 01       	movw	r12, r22
    1a4a:	8a 01       	movw	r16, r20
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	17 82       	std	Z+7, r1	; 0x07
    1a50:	16 82       	std	Z+6, r1	; 0x06
    1a52:	83 81       	ldd	r24, Z+3	; 0x03
    1a54:	81 ff       	sbrs	r24, 1
    1a56:	bd c1       	rjmp	.+890    	; 0x1dd2 <vfprintf+0x398>
    1a58:	ce 01       	movw	r24, r28
    1a5a:	01 96       	adiw	r24, 0x01	; 1
    1a5c:	4c 01       	movw	r8, r24
    1a5e:	f7 01       	movw	r30, r14
    1a60:	93 81       	ldd	r25, Z+3	; 0x03
    1a62:	f6 01       	movw	r30, r12
    1a64:	93 fd       	sbrc	r25, 3
    1a66:	85 91       	lpm	r24, Z+
    1a68:	93 ff       	sbrs	r25, 3
    1a6a:	81 91       	ld	r24, Z+
    1a6c:	6f 01       	movw	r12, r30
    1a6e:	88 23       	and	r24, r24
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <vfprintf+0x3a>
    1a72:	ab c1       	rjmp	.+854    	; 0x1dca <vfprintf+0x390>
    1a74:	85 32       	cpi	r24, 0x25	; 37
    1a76:	39 f4       	brne	.+14     	; 0x1a86 <vfprintf+0x4c>
    1a78:	93 fd       	sbrc	r25, 3
    1a7a:	85 91       	lpm	r24, Z+
    1a7c:	93 ff       	sbrs	r25, 3
    1a7e:	81 91       	ld	r24, Z+
    1a80:	6f 01       	movw	r12, r30
    1a82:	85 32       	cpi	r24, 0x25	; 37
    1a84:	29 f4       	brne	.+10     	; 0x1a90 <vfprintf+0x56>
    1a86:	b7 01       	movw	r22, r14
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <fputc>
    1a8e:	e7 cf       	rjmp	.-50     	; 0x1a5e <vfprintf+0x24>
    1a90:	51 2c       	mov	r5, r1
    1a92:	31 2c       	mov	r3, r1
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	20 32       	cpi	r18, 0x20	; 32
    1a98:	a0 f4       	brcc	.+40     	; 0x1ac2 <vfprintf+0x88>
    1a9a:	8b 32       	cpi	r24, 0x2B	; 43
    1a9c:	69 f0       	breq	.+26     	; 0x1ab8 <vfprintf+0x7e>
    1a9e:	30 f4       	brcc	.+12     	; 0x1aac <vfprintf+0x72>
    1aa0:	80 32       	cpi	r24, 0x20	; 32
    1aa2:	59 f0       	breq	.+22     	; 0x1aba <vfprintf+0x80>
    1aa4:	83 32       	cpi	r24, 0x23	; 35
    1aa6:	69 f4       	brne	.+26     	; 0x1ac2 <vfprintf+0x88>
    1aa8:	20 61       	ori	r18, 0x10	; 16
    1aaa:	2c c0       	rjmp	.+88     	; 0x1b04 <vfprintf+0xca>
    1aac:	8d 32       	cpi	r24, 0x2D	; 45
    1aae:	39 f0       	breq	.+14     	; 0x1abe <vfprintf+0x84>
    1ab0:	80 33       	cpi	r24, 0x30	; 48
    1ab2:	39 f4       	brne	.+14     	; 0x1ac2 <vfprintf+0x88>
    1ab4:	21 60       	ori	r18, 0x01	; 1
    1ab6:	26 c0       	rjmp	.+76     	; 0x1b04 <vfprintf+0xca>
    1ab8:	22 60       	ori	r18, 0x02	; 2
    1aba:	24 60       	ori	r18, 0x04	; 4
    1abc:	23 c0       	rjmp	.+70     	; 0x1b04 <vfprintf+0xca>
    1abe:	28 60       	ori	r18, 0x08	; 8
    1ac0:	21 c0       	rjmp	.+66     	; 0x1b04 <vfprintf+0xca>
    1ac2:	27 fd       	sbrc	r18, 7
    1ac4:	27 c0       	rjmp	.+78     	; 0x1b14 <vfprintf+0xda>
    1ac6:	30 ed       	ldi	r19, 0xD0	; 208
    1ac8:	38 0f       	add	r19, r24
    1aca:	3a 30       	cpi	r19, 0x0A	; 10
    1acc:	78 f4       	brcc	.+30     	; 0x1aec <vfprintf+0xb2>
    1ace:	26 ff       	sbrs	r18, 6
    1ad0:	06 c0       	rjmp	.+12     	; 0x1ade <vfprintf+0xa4>
    1ad2:	fa e0       	ldi	r31, 0x0A	; 10
    1ad4:	5f 9e       	mul	r5, r31
    1ad6:	30 0d       	add	r19, r0
    1ad8:	11 24       	eor	r1, r1
    1ada:	53 2e       	mov	r5, r19
    1adc:	13 c0       	rjmp	.+38     	; 0x1b04 <vfprintf+0xca>
    1ade:	8a e0       	ldi	r24, 0x0A	; 10
    1ae0:	38 9e       	mul	r3, r24
    1ae2:	30 0d       	add	r19, r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	33 2e       	mov	r3, r19
    1ae8:	20 62       	ori	r18, 0x20	; 32
    1aea:	0c c0       	rjmp	.+24     	; 0x1b04 <vfprintf+0xca>
    1aec:	8e 32       	cpi	r24, 0x2E	; 46
    1aee:	21 f4       	brne	.+8      	; 0x1af8 <vfprintf+0xbe>
    1af0:	26 fd       	sbrc	r18, 6
    1af2:	6b c1       	rjmp	.+726    	; 0x1dca <vfprintf+0x390>
    1af4:	20 64       	ori	r18, 0x40	; 64
    1af6:	06 c0       	rjmp	.+12     	; 0x1b04 <vfprintf+0xca>
    1af8:	8c 36       	cpi	r24, 0x6C	; 108
    1afa:	11 f4       	brne	.+4      	; 0x1b00 <vfprintf+0xc6>
    1afc:	20 68       	ori	r18, 0x80	; 128
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <vfprintf+0xca>
    1b00:	88 36       	cpi	r24, 0x68	; 104
    1b02:	41 f4       	brne	.+16     	; 0x1b14 <vfprintf+0xda>
    1b04:	f6 01       	movw	r30, r12
    1b06:	93 fd       	sbrc	r25, 3
    1b08:	85 91       	lpm	r24, Z+
    1b0a:	93 ff       	sbrs	r25, 3
    1b0c:	81 91       	ld	r24, Z+
    1b0e:	6f 01       	movw	r12, r30
    1b10:	81 11       	cpse	r24, r1
    1b12:	c1 cf       	rjmp	.-126    	; 0x1a96 <vfprintf+0x5c>
    1b14:	98 2f       	mov	r25, r24
    1b16:	9f 7d       	andi	r25, 0xDF	; 223
    1b18:	95 54       	subi	r25, 0x45	; 69
    1b1a:	93 30       	cpi	r25, 0x03	; 3
    1b1c:	28 f4       	brcc	.+10     	; 0x1b28 <vfprintf+0xee>
    1b1e:	0c 5f       	subi	r16, 0xFC	; 252
    1b20:	1f 4f       	sbci	r17, 0xFF	; 255
    1b22:	ff e3       	ldi	r31, 0x3F	; 63
    1b24:	f9 83       	std	Y+1, r31	; 0x01
    1b26:	0d c0       	rjmp	.+26     	; 0x1b42 <vfprintf+0x108>
    1b28:	83 36       	cpi	r24, 0x63	; 99
    1b2a:	31 f0       	breq	.+12     	; 0x1b38 <vfprintf+0xfe>
    1b2c:	83 37       	cpi	r24, 0x73	; 115
    1b2e:	71 f0       	breq	.+28     	; 0x1b4c <vfprintf+0x112>
    1b30:	83 35       	cpi	r24, 0x53	; 83
    1b32:	09 f0       	breq	.+2      	; 0x1b36 <vfprintf+0xfc>
    1b34:	5b c0       	rjmp	.+182    	; 0x1bec <vfprintf+0x1b2>
    1b36:	22 c0       	rjmp	.+68     	; 0x1b7c <vfprintf+0x142>
    1b38:	f8 01       	movw	r30, r16
    1b3a:	80 81       	ld	r24, Z
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	0e 5f       	subi	r16, 0xFE	; 254
    1b40:	1f 4f       	sbci	r17, 0xFF	; 255
    1b42:	44 24       	eor	r4, r4
    1b44:	43 94       	inc	r4
    1b46:	51 2c       	mov	r5, r1
    1b48:	54 01       	movw	r10, r8
    1b4a:	15 c0       	rjmp	.+42     	; 0x1b76 <vfprintf+0x13c>
    1b4c:	38 01       	movw	r6, r16
    1b4e:	f2 e0       	ldi	r31, 0x02	; 2
    1b50:	6f 0e       	add	r6, r31
    1b52:	71 1c       	adc	r7, r1
    1b54:	f8 01       	movw	r30, r16
    1b56:	a0 80       	ld	r10, Z
    1b58:	b1 80       	ldd	r11, Z+1	; 0x01
    1b5a:	26 ff       	sbrs	r18, 6
    1b5c:	03 c0       	rjmp	.+6      	; 0x1b64 <vfprintf+0x12a>
    1b5e:	65 2d       	mov	r22, r5
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <vfprintf+0x12e>
    1b64:	6f ef       	ldi	r22, 0xFF	; 255
    1b66:	7f ef       	ldi	r23, 0xFF	; 255
    1b68:	c5 01       	movw	r24, r10
    1b6a:	2c 87       	std	Y+12, r18	; 0x0c
    1b6c:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <strnlen>
    1b70:	2c 01       	movw	r4, r24
    1b72:	83 01       	movw	r16, r6
    1b74:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b76:	2f 77       	andi	r18, 0x7F	; 127
    1b78:	22 2e       	mov	r2, r18
    1b7a:	17 c0       	rjmp	.+46     	; 0x1baa <vfprintf+0x170>
    1b7c:	38 01       	movw	r6, r16
    1b7e:	f2 e0       	ldi	r31, 0x02	; 2
    1b80:	6f 0e       	add	r6, r31
    1b82:	71 1c       	adc	r7, r1
    1b84:	f8 01       	movw	r30, r16
    1b86:	a0 80       	ld	r10, Z
    1b88:	b1 80       	ldd	r11, Z+1	; 0x01
    1b8a:	26 ff       	sbrs	r18, 6
    1b8c:	03 c0       	rjmp	.+6      	; 0x1b94 <vfprintf+0x15a>
    1b8e:	65 2d       	mov	r22, r5
    1b90:	70 e0       	ldi	r23, 0x00	; 0
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <vfprintf+0x15e>
    1b94:	6f ef       	ldi	r22, 0xFF	; 255
    1b96:	7f ef       	ldi	r23, 0xFF	; 255
    1b98:	c5 01       	movw	r24, r10
    1b9a:	2c 87       	std	Y+12, r18	; 0x0c
    1b9c:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <strnlen_P>
    1ba0:	2c 01       	movw	r4, r24
    1ba2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ba4:	20 68       	ori	r18, 0x80	; 128
    1ba6:	22 2e       	mov	r2, r18
    1ba8:	83 01       	movw	r16, r6
    1baa:	23 fc       	sbrc	r2, 3
    1bac:	1b c0       	rjmp	.+54     	; 0x1be4 <vfprintf+0x1aa>
    1bae:	83 2d       	mov	r24, r3
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	48 16       	cp	r4, r24
    1bb4:	59 06       	cpc	r5, r25
    1bb6:	b0 f4       	brcc	.+44     	; 0x1be4 <vfprintf+0x1aa>
    1bb8:	b7 01       	movw	r22, r14
    1bba:	80 e2       	ldi	r24, 0x20	; 32
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <fputc>
    1bc2:	3a 94       	dec	r3
    1bc4:	f4 cf       	rjmp	.-24     	; 0x1bae <vfprintf+0x174>
    1bc6:	f5 01       	movw	r30, r10
    1bc8:	27 fc       	sbrc	r2, 7
    1bca:	85 91       	lpm	r24, Z+
    1bcc:	27 fe       	sbrs	r2, 7
    1bce:	81 91       	ld	r24, Z+
    1bd0:	5f 01       	movw	r10, r30
    1bd2:	b7 01       	movw	r22, r14
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <fputc>
    1bda:	31 10       	cpse	r3, r1
    1bdc:	3a 94       	dec	r3
    1bde:	f1 e0       	ldi	r31, 0x01	; 1
    1be0:	4f 1a       	sub	r4, r31
    1be2:	51 08       	sbc	r5, r1
    1be4:	41 14       	cp	r4, r1
    1be6:	51 04       	cpc	r5, r1
    1be8:	71 f7       	brne	.-36     	; 0x1bc6 <vfprintf+0x18c>
    1bea:	e5 c0       	rjmp	.+458    	; 0x1db6 <vfprintf+0x37c>
    1bec:	84 36       	cpi	r24, 0x64	; 100
    1bee:	11 f0       	breq	.+4      	; 0x1bf4 <vfprintf+0x1ba>
    1bf0:	89 36       	cpi	r24, 0x69	; 105
    1bf2:	39 f5       	brne	.+78     	; 0x1c42 <vfprintf+0x208>
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	27 ff       	sbrs	r18, 7
    1bf8:	07 c0       	rjmp	.+14     	; 0x1c08 <vfprintf+0x1ce>
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	0c 5f       	subi	r16, 0xFC	; 252
    1c04:	1f 4f       	sbci	r17, 0xFF	; 255
    1c06:	08 c0       	rjmp	.+16     	; 0x1c18 <vfprintf+0x1de>
    1c08:	60 81       	ld	r22, Z
    1c0a:	71 81       	ldd	r23, Z+1	; 0x01
    1c0c:	88 27       	eor	r24, r24
    1c0e:	77 fd       	sbrc	r23, 7
    1c10:	80 95       	com	r24
    1c12:	98 2f       	mov	r25, r24
    1c14:	0e 5f       	subi	r16, 0xFE	; 254
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	2f 76       	andi	r18, 0x6F	; 111
    1c1a:	b2 2e       	mov	r11, r18
    1c1c:	97 ff       	sbrs	r25, 7
    1c1e:	09 c0       	rjmp	.+18     	; 0x1c32 <vfprintf+0x1f8>
    1c20:	90 95       	com	r25
    1c22:	80 95       	com	r24
    1c24:	70 95       	com	r23
    1c26:	61 95       	neg	r22
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2e:	20 68       	ori	r18, 0x80	; 128
    1c30:	b2 2e       	mov	r11, r18
    1c32:	2a e0       	ldi	r18, 0x0A	; 10
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	a4 01       	movw	r20, r8
    1c38:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__ultoa_invert>
    1c3c:	a8 2e       	mov	r10, r24
    1c3e:	a8 18       	sub	r10, r8
    1c40:	44 c0       	rjmp	.+136    	; 0x1cca <vfprintf+0x290>
    1c42:	85 37       	cpi	r24, 0x75	; 117
    1c44:	29 f4       	brne	.+10     	; 0x1c50 <vfprintf+0x216>
    1c46:	2f 7e       	andi	r18, 0xEF	; 239
    1c48:	b2 2e       	mov	r11, r18
    1c4a:	2a e0       	ldi	r18, 0x0A	; 10
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	25 c0       	rjmp	.+74     	; 0x1c9a <vfprintf+0x260>
    1c50:	f2 2f       	mov	r31, r18
    1c52:	f9 7f       	andi	r31, 0xF9	; 249
    1c54:	bf 2e       	mov	r11, r31
    1c56:	8f 36       	cpi	r24, 0x6F	; 111
    1c58:	c1 f0       	breq	.+48     	; 0x1c8a <vfprintf+0x250>
    1c5a:	18 f4       	brcc	.+6      	; 0x1c62 <vfprintf+0x228>
    1c5c:	88 35       	cpi	r24, 0x58	; 88
    1c5e:	79 f0       	breq	.+30     	; 0x1c7e <vfprintf+0x244>
    1c60:	b4 c0       	rjmp	.+360    	; 0x1dca <vfprintf+0x390>
    1c62:	80 37       	cpi	r24, 0x70	; 112
    1c64:	19 f0       	breq	.+6      	; 0x1c6c <vfprintf+0x232>
    1c66:	88 37       	cpi	r24, 0x78	; 120
    1c68:	21 f0       	breq	.+8      	; 0x1c72 <vfprintf+0x238>
    1c6a:	af c0       	rjmp	.+350    	; 0x1dca <vfprintf+0x390>
    1c6c:	2f 2f       	mov	r18, r31
    1c6e:	20 61       	ori	r18, 0x10	; 16
    1c70:	b2 2e       	mov	r11, r18
    1c72:	b4 fe       	sbrs	r11, 4
    1c74:	0d c0       	rjmp	.+26     	; 0x1c90 <vfprintf+0x256>
    1c76:	8b 2d       	mov	r24, r11
    1c78:	84 60       	ori	r24, 0x04	; 4
    1c7a:	b8 2e       	mov	r11, r24
    1c7c:	09 c0       	rjmp	.+18     	; 0x1c90 <vfprintf+0x256>
    1c7e:	24 ff       	sbrs	r18, 4
    1c80:	0a c0       	rjmp	.+20     	; 0x1c96 <vfprintf+0x25c>
    1c82:	9f 2f       	mov	r25, r31
    1c84:	96 60       	ori	r25, 0x06	; 6
    1c86:	b9 2e       	mov	r11, r25
    1c88:	06 c0       	rjmp	.+12     	; 0x1c96 <vfprintf+0x25c>
    1c8a:	28 e0       	ldi	r18, 0x08	; 8
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <vfprintf+0x260>
    1c90:	20 e1       	ldi	r18, 0x10	; 16
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <vfprintf+0x260>
    1c96:	20 e1       	ldi	r18, 0x10	; 16
    1c98:	32 e0       	ldi	r19, 0x02	; 2
    1c9a:	f8 01       	movw	r30, r16
    1c9c:	b7 fe       	sbrs	r11, 7
    1c9e:	07 c0       	rjmp	.+14     	; 0x1cae <vfprintf+0x274>
    1ca0:	60 81       	ld	r22, Z
    1ca2:	71 81       	ldd	r23, Z+1	; 0x01
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	93 81       	ldd	r25, Z+3	; 0x03
    1ca8:	0c 5f       	subi	r16, 0xFC	; 252
    1caa:	1f 4f       	sbci	r17, 0xFF	; 255
    1cac:	06 c0       	rjmp	.+12     	; 0x1cba <vfprintf+0x280>
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	0e 5f       	subi	r16, 0xFE	; 254
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	a4 01       	movw	r20, r8
    1cbc:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__ultoa_invert>
    1cc0:	a8 2e       	mov	r10, r24
    1cc2:	a8 18       	sub	r10, r8
    1cc4:	fb 2d       	mov	r31, r11
    1cc6:	ff 77       	andi	r31, 0x7F	; 127
    1cc8:	bf 2e       	mov	r11, r31
    1cca:	b6 fe       	sbrs	r11, 6
    1ccc:	0b c0       	rjmp	.+22     	; 0x1ce4 <vfprintf+0x2aa>
    1cce:	2b 2d       	mov	r18, r11
    1cd0:	2e 7f       	andi	r18, 0xFE	; 254
    1cd2:	a5 14       	cp	r10, r5
    1cd4:	50 f4       	brcc	.+20     	; 0x1cea <vfprintf+0x2b0>
    1cd6:	b4 fe       	sbrs	r11, 4
    1cd8:	0a c0       	rjmp	.+20     	; 0x1cee <vfprintf+0x2b4>
    1cda:	b2 fc       	sbrc	r11, 2
    1cdc:	08 c0       	rjmp	.+16     	; 0x1cee <vfprintf+0x2b4>
    1cde:	2b 2d       	mov	r18, r11
    1ce0:	2e 7e       	andi	r18, 0xEE	; 238
    1ce2:	05 c0       	rjmp	.+10     	; 0x1cee <vfprintf+0x2b4>
    1ce4:	7a 2c       	mov	r7, r10
    1ce6:	2b 2d       	mov	r18, r11
    1ce8:	03 c0       	rjmp	.+6      	; 0x1cf0 <vfprintf+0x2b6>
    1cea:	7a 2c       	mov	r7, r10
    1cec:	01 c0       	rjmp	.+2      	; 0x1cf0 <vfprintf+0x2b6>
    1cee:	75 2c       	mov	r7, r5
    1cf0:	24 ff       	sbrs	r18, 4
    1cf2:	0d c0       	rjmp	.+26     	; 0x1d0e <vfprintf+0x2d4>
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	ea 0d       	add	r30, r10
    1cf8:	f1 1d       	adc	r31, r1
    1cfa:	80 81       	ld	r24, Z
    1cfc:	80 33       	cpi	r24, 0x30	; 48
    1cfe:	11 f4       	brne	.+4      	; 0x1d04 <vfprintf+0x2ca>
    1d00:	29 7e       	andi	r18, 0xE9	; 233
    1d02:	09 c0       	rjmp	.+18     	; 0x1d16 <vfprintf+0x2dc>
    1d04:	22 ff       	sbrs	r18, 2
    1d06:	06 c0       	rjmp	.+12     	; 0x1d14 <vfprintf+0x2da>
    1d08:	73 94       	inc	r7
    1d0a:	73 94       	inc	r7
    1d0c:	04 c0       	rjmp	.+8      	; 0x1d16 <vfprintf+0x2dc>
    1d0e:	82 2f       	mov	r24, r18
    1d10:	86 78       	andi	r24, 0x86	; 134
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <vfprintf+0x2dc>
    1d14:	73 94       	inc	r7
    1d16:	23 fd       	sbrc	r18, 3
    1d18:	13 c0       	rjmp	.+38     	; 0x1d40 <vfprintf+0x306>
    1d1a:	20 ff       	sbrs	r18, 0
    1d1c:	06 c0       	rjmp	.+12     	; 0x1d2a <vfprintf+0x2f0>
    1d1e:	5a 2c       	mov	r5, r10
    1d20:	73 14       	cp	r7, r3
    1d22:	18 f4       	brcc	.+6      	; 0x1d2a <vfprintf+0x2f0>
    1d24:	53 0c       	add	r5, r3
    1d26:	57 18       	sub	r5, r7
    1d28:	73 2c       	mov	r7, r3
    1d2a:	73 14       	cp	r7, r3
    1d2c:	68 f4       	brcc	.+26     	; 0x1d48 <vfprintf+0x30e>
    1d2e:	b7 01       	movw	r22, r14
    1d30:	80 e2       	ldi	r24, 0x20	; 32
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	2c 87       	std	Y+12, r18	; 0x0c
    1d36:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <fputc>
    1d3a:	73 94       	inc	r7
    1d3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d3e:	f5 cf       	rjmp	.-22     	; 0x1d2a <vfprintf+0x2f0>
    1d40:	73 14       	cp	r7, r3
    1d42:	10 f4       	brcc	.+4      	; 0x1d48 <vfprintf+0x30e>
    1d44:	37 18       	sub	r3, r7
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <vfprintf+0x310>
    1d48:	31 2c       	mov	r3, r1
    1d4a:	24 ff       	sbrs	r18, 4
    1d4c:	12 c0       	rjmp	.+36     	; 0x1d72 <vfprintf+0x338>
    1d4e:	b7 01       	movw	r22, r14
    1d50:	80 e3       	ldi	r24, 0x30	; 48
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	2c 87       	std	Y+12, r18	; 0x0c
    1d56:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <fputc>
    1d5a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d5c:	22 ff       	sbrs	r18, 2
    1d5e:	17 c0       	rjmp	.+46     	; 0x1d8e <vfprintf+0x354>
    1d60:	21 ff       	sbrs	r18, 1
    1d62:	03 c0       	rjmp	.+6      	; 0x1d6a <vfprintf+0x330>
    1d64:	88 e5       	ldi	r24, 0x58	; 88
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <vfprintf+0x334>
    1d6a:	88 e7       	ldi	r24, 0x78	; 120
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	b7 01       	movw	r22, r14
    1d70:	0c c0       	rjmp	.+24     	; 0x1d8a <vfprintf+0x350>
    1d72:	82 2f       	mov	r24, r18
    1d74:	86 78       	andi	r24, 0x86	; 134
    1d76:	59 f0       	breq	.+22     	; 0x1d8e <vfprintf+0x354>
    1d78:	21 fd       	sbrc	r18, 1
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <vfprintf+0x346>
    1d7c:	80 e2       	ldi	r24, 0x20	; 32
    1d7e:	01 c0       	rjmp	.+2      	; 0x1d82 <vfprintf+0x348>
    1d80:	8b e2       	ldi	r24, 0x2B	; 43
    1d82:	27 fd       	sbrc	r18, 7
    1d84:	8d e2       	ldi	r24, 0x2D	; 45
    1d86:	b7 01       	movw	r22, r14
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <fputc>
    1d8e:	a5 14       	cp	r10, r5
    1d90:	38 f4       	brcc	.+14     	; 0x1da0 <vfprintf+0x366>
    1d92:	b7 01       	movw	r22, r14
    1d94:	80 e3       	ldi	r24, 0x30	; 48
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <fputc>
    1d9c:	5a 94       	dec	r5
    1d9e:	f7 cf       	rjmp	.-18     	; 0x1d8e <vfprintf+0x354>
    1da0:	aa 94       	dec	r10
    1da2:	f4 01       	movw	r30, r8
    1da4:	ea 0d       	add	r30, r10
    1da6:	f1 1d       	adc	r31, r1
    1da8:	80 81       	ld	r24, Z
    1daa:	b7 01       	movw	r22, r14
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <fputc>
    1db2:	a1 10       	cpse	r10, r1
    1db4:	f5 cf       	rjmp	.-22     	; 0x1da0 <vfprintf+0x366>
    1db6:	33 20       	and	r3, r3
    1db8:	09 f4       	brne	.+2      	; 0x1dbc <vfprintf+0x382>
    1dba:	51 ce       	rjmp	.-862    	; 0x1a5e <vfprintf+0x24>
    1dbc:	b7 01       	movw	r22, r14
    1dbe:	80 e2       	ldi	r24, 0x20	; 32
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <fputc>
    1dc6:	3a 94       	dec	r3
    1dc8:	f6 cf       	rjmp	.-20     	; 0x1db6 <vfprintf+0x37c>
    1dca:	f7 01       	movw	r30, r14
    1dcc:	86 81       	ldd	r24, Z+6	; 0x06
    1dce:	97 81       	ldd	r25, Z+7	; 0x07
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <vfprintf+0x39c>
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	9f ef       	ldi	r25, 0xFF	; 255
    1dd6:	2c 96       	adiw	r28, 0x0c	; 12
    1dd8:	e2 e1       	ldi	r30, 0x12	; 18
    1dda:	0c 94 d4 0f 	jmp	0x1fa8	; 0x1fa8 <__epilogue_restores__>

00001dde <calloc>:
    1dde:	0f 93       	push	r16
    1de0:	1f 93       	push	r17
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	86 9f       	mul	r24, r22
    1de8:	80 01       	movw	r16, r0
    1dea:	87 9f       	mul	r24, r23
    1dec:	10 0d       	add	r17, r0
    1dee:	96 9f       	mul	r25, r22
    1df0:	10 0d       	add	r17, r0
    1df2:	11 24       	eor	r1, r1
    1df4:	c8 01       	movw	r24, r16
    1df6:	0e 94 2f 0b 	call	0x165e	; 0x165e <malloc>
    1dfa:	ec 01       	movw	r28, r24
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	29 f0       	breq	.+10     	; 0x1e0a <calloc+0x2c>
    1e00:	a8 01       	movw	r20, r16
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <memset>
    1e0a:	ce 01       	movw	r24, r28
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	08 95       	ret

00001e16 <strnlen_P>:
    1e16:	fc 01       	movw	r30, r24
    1e18:	05 90       	lpm	r0, Z+
    1e1a:	61 50       	subi	r22, 0x01	; 1
    1e1c:	70 40       	sbci	r23, 0x00	; 0
    1e1e:	01 10       	cpse	r0, r1
    1e20:	d8 f7       	brcc	.-10     	; 0x1e18 <strnlen_P+0x2>
    1e22:	80 95       	com	r24
    1e24:	90 95       	com	r25
    1e26:	8e 0f       	add	r24, r30
    1e28:	9f 1f       	adc	r25, r31
    1e2a:	08 95       	ret

00001e2c <memset>:
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	01 c0       	rjmp	.+2      	; 0x1e32 <memset+0x6>
    1e30:	6d 93       	st	X+, r22
    1e32:	41 50       	subi	r20, 0x01	; 1
    1e34:	50 40       	sbci	r21, 0x00	; 0
    1e36:	e0 f7       	brcc	.-8      	; 0x1e30 <memset+0x4>
    1e38:	08 95       	ret

00001e3a <strnlen>:
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	61 50       	subi	r22, 0x01	; 1
    1e3e:	70 40       	sbci	r23, 0x00	; 0
    1e40:	01 90       	ld	r0, Z+
    1e42:	01 10       	cpse	r0, r1
    1e44:	d8 f7       	brcc	.-10     	; 0x1e3c <strnlen+0x2>
    1e46:	80 95       	com	r24
    1e48:	90 95       	com	r25
    1e4a:	8e 0f       	add	r24, r30
    1e4c:	9f 1f       	adc	r25, r31
    1e4e:	08 95       	ret

00001e50 <fputc>:
    1e50:	0f 93       	push	r16
    1e52:	1f 93       	push	r17
    1e54:	cf 93       	push	r28
    1e56:	df 93       	push	r29
    1e58:	18 2f       	mov	r17, r24
    1e5a:	09 2f       	mov	r16, r25
    1e5c:	eb 01       	movw	r28, r22
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	81 fd       	sbrc	r24, 1
    1e62:	03 c0       	rjmp	.+6      	; 0x1e6a <fputc+0x1a>
    1e64:	8f ef       	ldi	r24, 0xFF	; 255
    1e66:	9f ef       	ldi	r25, 0xFF	; 255
    1e68:	20 c0       	rjmp	.+64     	; 0x1eaa <fputc+0x5a>
    1e6a:	82 ff       	sbrs	r24, 2
    1e6c:	10 c0       	rjmp	.+32     	; 0x1e8e <fputc+0x3e>
    1e6e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e70:	5f 81       	ldd	r21, Y+7	; 0x07
    1e72:	2c 81       	ldd	r18, Y+4	; 0x04
    1e74:	3d 81       	ldd	r19, Y+5	; 0x05
    1e76:	42 17       	cp	r20, r18
    1e78:	53 07       	cpc	r21, r19
    1e7a:	7c f4       	brge	.+30     	; 0x1e9a <fputc+0x4a>
    1e7c:	e8 81       	ld	r30, Y
    1e7e:	f9 81       	ldd	r31, Y+1	; 0x01
    1e80:	9f 01       	movw	r18, r30
    1e82:	2f 5f       	subi	r18, 0xFF	; 255
    1e84:	3f 4f       	sbci	r19, 0xFF	; 255
    1e86:	39 83       	std	Y+1, r19	; 0x01
    1e88:	28 83       	st	Y, r18
    1e8a:	10 83       	st	Z, r17
    1e8c:	06 c0       	rjmp	.+12     	; 0x1e9a <fputc+0x4a>
    1e8e:	e8 85       	ldd	r30, Y+8	; 0x08
    1e90:	f9 85       	ldd	r31, Y+9	; 0x09
    1e92:	81 2f       	mov	r24, r17
    1e94:	09 95       	icall
    1e96:	89 2b       	or	r24, r25
    1e98:	29 f7       	brne	.-54     	; 0x1e64 <fputc+0x14>
    1e9a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e9c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea2:	3f 83       	std	Y+7, r19	; 0x07
    1ea4:	2e 83       	std	Y+6, r18	; 0x06
    1ea6:	81 2f       	mov	r24, r17
    1ea8:	90 2f       	mov	r25, r16
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	08 95       	ret

00001eb4 <__ultoa_invert>:
    1eb4:	fa 01       	movw	r30, r20
    1eb6:	aa 27       	eor	r26, r26
    1eb8:	28 30       	cpi	r18, 0x08	; 8
    1eba:	51 f1       	breq	.+84     	; 0x1f10 <__ultoa_invert+0x5c>
    1ebc:	20 31       	cpi	r18, 0x10	; 16
    1ebe:	81 f1       	breq	.+96     	; 0x1f20 <__ultoa_invert+0x6c>
    1ec0:	e8 94       	clt
    1ec2:	6f 93       	push	r22
    1ec4:	6e 7f       	andi	r22, 0xFE	; 254
    1ec6:	6e 5f       	subi	r22, 0xFE	; 254
    1ec8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eca:	8f 4f       	sbci	r24, 0xFF	; 255
    1ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ece:	af 4f       	sbci	r26, 0xFF	; 255
    1ed0:	b1 e0       	ldi	r27, 0x01	; 1
    1ed2:	3e d0       	rcall	.+124    	; 0x1f50 <__ultoa_invert+0x9c>
    1ed4:	b4 e0       	ldi	r27, 0x04	; 4
    1ed6:	3c d0       	rcall	.+120    	; 0x1f50 <__ultoa_invert+0x9c>
    1ed8:	67 0f       	add	r22, r23
    1eda:	78 1f       	adc	r23, r24
    1edc:	89 1f       	adc	r24, r25
    1ede:	9a 1f       	adc	r25, r26
    1ee0:	a1 1d       	adc	r26, r1
    1ee2:	68 0f       	add	r22, r24
    1ee4:	79 1f       	adc	r23, r25
    1ee6:	8a 1f       	adc	r24, r26
    1ee8:	91 1d       	adc	r25, r1
    1eea:	a1 1d       	adc	r26, r1
    1eec:	6a 0f       	add	r22, r26
    1eee:	71 1d       	adc	r23, r1
    1ef0:	81 1d       	adc	r24, r1
    1ef2:	91 1d       	adc	r25, r1
    1ef4:	a1 1d       	adc	r26, r1
    1ef6:	20 d0       	rcall	.+64     	; 0x1f38 <__ultoa_invert+0x84>
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <__ultoa_invert+0x48>
    1efa:	68 94       	set
    1efc:	3f 91       	pop	r19
    1efe:	2a e0       	ldi	r18, 0x0A	; 10
    1f00:	26 9f       	mul	r18, r22
    1f02:	11 24       	eor	r1, r1
    1f04:	30 19       	sub	r19, r0
    1f06:	30 5d       	subi	r19, 0xD0	; 208
    1f08:	31 93       	st	Z+, r19
    1f0a:	de f6       	brtc	.-74     	; 0x1ec2 <__ultoa_invert+0xe>
    1f0c:	cf 01       	movw	r24, r30
    1f0e:	08 95       	ret
    1f10:	46 2f       	mov	r20, r22
    1f12:	47 70       	andi	r20, 0x07	; 7
    1f14:	40 5d       	subi	r20, 0xD0	; 208
    1f16:	41 93       	st	Z+, r20
    1f18:	b3 e0       	ldi	r27, 0x03	; 3
    1f1a:	0f d0       	rcall	.+30     	; 0x1f3a <__ultoa_invert+0x86>
    1f1c:	c9 f7       	brne	.-14     	; 0x1f10 <__ultoa_invert+0x5c>
    1f1e:	f6 cf       	rjmp	.-20     	; 0x1f0c <__ultoa_invert+0x58>
    1f20:	46 2f       	mov	r20, r22
    1f22:	4f 70       	andi	r20, 0x0F	; 15
    1f24:	40 5d       	subi	r20, 0xD0	; 208
    1f26:	4a 33       	cpi	r20, 0x3A	; 58
    1f28:	18 f0       	brcs	.+6      	; 0x1f30 <__ultoa_invert+0x7c>
    1f2a:	49 5d       	subi	r20, 0xD9	; 217
    1f2c:	31 fd       	sbrc	r19, 1
    1f2e:	40 52       	subi	r20, 0x20	; 32
    1f30:	41 93       	st	Z+, r20
    1f32:	02 d0       	rcall	.+4      	; 0x1f38 <__ultoa_invert+0x84>
    1f34:	a9 f7       	brne	.-22     	; 0x1f20 <__ultoa_invert+0x6c>
    1f36:	ea cf       	rjmp	.-44     	; 0x1f0c <__ultoa_invert+0x58>
    1f38:	b4 e0       	ldi	r27, 0x04	; 4
    1f3a:	a6 95       	lsr	r26
    1f3c:	97 95       	ror	r25
    1f3e:	87 95       	ror	r24
    1f40:	77 95       	ror	r23
    1f42:	67 95       	ror	r22
    1f44:	ba 95       	dec	r27
    1f46:	c9 f7       	brne	.-14     	; 0x1f3a <__ultoa_invert+0x86>
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	61 05       	cpc	r22, r1
    1f4c:	71 05       	cpc	r23, r1
    1f4e:	08 95       	ret
    1f50:	9b 01       	movw	r18, r22
    1f52:	ac 01       	movw	r20, r24
    1f54:	0a 2e       	mov	r0, r26
    1f56:	06 94       	lsr	r0
    1f58:	57 95       	ror	r21
    1f5a:	47 95       	ror	r20
    1f5c:	37 95       	ror	r19
    1f5e:	27 95       	ror	r18
    1f60:	ba 95       	dec	r27
    1f62:	c9 f7       	brne	.-14     	; 0x1f56 <__ultoa_invert+0xa2>
    1f64:	62 0f       	add	r22, r18
    1f66:	73 1f       	adc	r23, r19
    1f68:	84 1f       	adc	r24, r20
    1f6a:	95 1f       	adc	r25, r21
    1f6c:	a0 1d       	adc	r26, r0
    1f6e:	08 95       	ret

00001f70 <__prologue_saves__>:
    1f70:	2f 92       	push	r2
    1f72:	3f 92       	push	r3
    1f74:	4f 92       	push	r4
    1f76:	5f 92       	push	r5
    1f78:	6f 92       	push	r6
    1f7a:	7f 92       	push	r7
    1f7c:	8f 92       	push	r8
    1f7e:	9f 92       	push	r9
    1f80:	af 92       	push	r10
    1f82:	bf 92       	push	r11
    1f84:	cf 92       	push	r12
    1f86:	df 92       	push	r13
    1f88:	ef 92       	push	r14
    1f8a:	ff 92       	push	r15
    1f8c:	0f 93       	push	r16
    1f8e:	1f 93       	push	r17
    1f90:	cf 93       	push	r28
    1f92:	df 93       	push	r29
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	ca 1b       	sub	r28, r26
    1f9a:	db 0b       	sbc	r29, r27
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	09 94       	ijmp

00001fa8 <__epilogue_restores__>:
    1fa8:	2a 88       	ldd	r2, Y+18	; 0x12
    1faa:	39 88       	ldd	r3, Y+17	; 0x11
    1fac:	48 88       	ldd	r4, Y+16	; 0x10
    1fae:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fb0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fb2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fb4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fb6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fb8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fba:	b9 84       	ldd	r11, Y+9	; 0x09
    1fbc:	c8 84       	ldd	r12, Y+8	; 0x08
    1fbe:	df 80       	ldd	r13, Y+7	; 0x07
    1fc0:	ee 80       	ldd	r14, Y+6	; 0x06
    1fc2:	fd 80       	ldd	r15, Y+5	; 0x05
    1fc4:	0c 81       	ldd	r16, Y+4	; 0x04
    1fc6:	1b 81       	ldd	r17, Y+3	; 0x03
    1fc8:	aa 81       	ldd	r26, Y+2	; 0x02
    1fca:	b9 81       	ldd	r27, Y+1	; 0x01
    1fcc:	ce 0f       	add	r28, r30
    1fce:	d1 1d       	adc	r29, r1
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	ed 01       	movw	r28, r26
    1fdc:	08 95       	ret

00001fde <_exit>:
    1fde:	f8 94       	cli

00001fe0 <__stop_program>:
    1fe0:	ff cf       	rjmp	.-2      	; 0x1fe0 <__stop_program>
