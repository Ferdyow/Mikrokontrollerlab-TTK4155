
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000164  00800100  00000fb8  0000104c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800264  00800264  000011b0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000290  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000028aa  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001150  00000000  00000000  00003d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dfd  00000000  00000000  00004e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000688  00000000  00000000  00005c94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000798  00000000  00000000  0000631c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001554  00000000  00000000  00006ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000218  00000000  00000000  00008008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 eb       	ldi	r30, 0xB8	; 184
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a4 36       	cpi	r26, 0x64	; 100
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a4 e6       	ldi	r26, 0x64	; 100
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	aa 37       	cpi	r26, 0x7A	; 122
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <main>
  a6:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
  ae:	30 98       	cbi	0x06, 0	; 6
  b0:	08 95       	ret

000000b2 <ADC_read>:
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
  b2:	84 30       	cpi	r24, 0x04	; 4
  b4:	40 f4       	brcc	.+16     	; 0xc6 <ADC_read+0x14>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
  b6:	8c 5f       	subi	r24, 0xFC	; 252
  b8:	80 93 00 14 	sts	0x1400, r24
	
	//wait 'til /INTR is low
	while(test_bit(PINE, PINE0));
  bc:	28 99       	sbic	0x05, 0	; 5
  be:	fe cf       	rjmp	.-4      	; 0xbc <ADC_read+0xa>
	//reset interrupt
	inter = 0;
	*/

	//return current value
	return *adc; 
  c0:	80 91 00 14 	lds	r24, 0x1400
  c4:	08 95       	ret
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
  c6:	80 e0       	ldi	r24, 0x00	; 0
	inter = 0;
	*/

	//return current value
	return *adc; 
  c8:	08 95       	ret

000000ca <CAN_int_vect>:
		;
	printf("After transmit complete\n");
	CAN_data_receive(&received_message);
	printf("\n\nSENT:\nlength: %d\nid: %d\n", my_message.length, my_message.id);
	for (uint8_t byte = 0; byte < my_message.length;byte++){
		printf("Data nr. %d: %x\n", byte, my_message.data[byte]);
  ca:	cf 93       	push	r28
  cc:	8c e2       	ldi	r24, 0x2C	; 44
  ce:	0e 94 bc 01 	call	0x378	; 0x378 <MCP2515_read>
  d2:	c8 2f       	mov	r28, r24
  d4:	80 ff       	sbrs	r24, 0
  d6:	0b c0       	rjmp	.+22     	; 0xee <CAN_int_vect+0x24>
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	8c e2       	ldi	r24, 0x2C	; 44
  de:	0e 94 ee 01 	call	0x3dc	; 0x3dc <MCP2515_bit_modify>
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	30 93 67 02 	sts	0x0267, r19
	while(!CAN_transmit_complete(0))
		;
	printf("After transmit complete\n");
	CAN_data_receive(&received_message);
	printf("\n\nSENT:\nlength: %d\nid: %d\n", my_message.length, my_message.id);
	for (uint8_t byte = 0; byte < my_message.length;byte++){
  ea:	20 93 66 02 	sts	0x0266, r18
  ee:	c1 ff       	sbrs	r28, 1
  f0:	0b c0       	rjmp	.+22     	; 0x108 <CAN_int_vect+0x3e>
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	62 e0       	ldi	r22, 0x02	; 2
  f6:	8c e2       	ldi	r24, 0x2C	; 44
  f8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <MCP2515_bit_modify>
		printf("Data nr. %d: %x\n", byte, my_message.data[byte]);
	}
	
	
	printf("\n\nRECEIVED:\n\nlength: %d\nid: %d\n", received_message.length, received_message.id);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 65 02 	sts	0x0265, r25
 104:	80 93 64 02 	sts	0x0264, r24
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <__vector_1>:
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
	for (uint8_t byte = 0; byte < received_message.length;byte++){
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
		printf("Data nr. %d: %x\n", byte, received_message.data[byte]);
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
 12e:	0e 94 65 00 	call	0xca	; 0xca <CAN_int_vect>
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	bf 91       	pop	r27
 138:	af 91       	pop	r26
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	7f 91       	pop	r23
 140:	6f 91       	pop	r22
 142:	5f 91       	pop	r21
 144:	4f 91       	pop	r20
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <CAN_init>:
		printf("Data nr. %d: %x\n", byte, my_message.data[byte]);
	}
	
	
	printf("\n\nRECEIVED:\n\nlength: %d\nid: %d\n", received_message.length, received_message.id);
	for (uint8_t byte = 0; byte < received_message.length;byte++){
 154:	0e 94 10 02 	call	0x420	; 0x420 <MCP2515_init>
 158:	4f ef       	ldi	r20, 0xFF	; 255
 15a:	64 e6       	ldi	r22, 0x64	; 100
 15c:	80 e6       	ldi	r24, 0x60	; 96
 15e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <MCP2515_bit_modify>
 162:	4f ef       	ldi	r20, 0xFF	; 255
 164:	60 e6       	ldi	r22, 0x60	; 96
 166:	80 e7       	ldi	r24, 0x70	; 112
		printf("Data nr. %d: %x\n", byte, received_message.data[byte]);
	}
	MCP2515_bit_modify(MCP_CANCTRL,0xE0, 0x00);
 168:	0e 94 ee 01 	call	0x3dc	; 0x3dc <MCP2515_bit_modify>
 16c:	43 e0       	ldi	r20, 0x03	; 3
 16e:	63 e0       	ldi	r22, 0x03	; 3
 170:	8b e2       	ldi	r24, 0x2B	; 43

	
	
	printf("ERROR FLAGS: %x\n", MCP2515_read(MCP_EFLG));
 172:	0e 94 ee 01 	call	0x3dc	; 0x3dc <MCP2515_bit_modify>
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	60 ee       	ldi	r22, 0xE0	; 224
 17a:	8f e0       	ldi	r24, 0x0F	; 15
 17c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <MCP2515_bit_modify>
 180:	08 95       	ret

00000182 <CAN_message_send>:
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28

	CAN_message_send(&my_message);
 188:	df 93       	push	r29
 18a:	ec 01       	movw	r28, r24
 18c:	08 81       	ld	r16, Y
 18e:	19 81       	ldd	r17, Y+1	; 0x01
		
	printf("\nCANSTAT after: %x\n", MCP2515_read(MCP_CANSTAT));
 190:	b8 01       	movw	r22, r16
 192:	76 95       	lsr	r23
 194:	67 95       	ror	r22
 196:	76 95       	lsr	r23
 198:	67 95       	ror	r22
 19a:	76 95       	lsr	r23
 19c:	67 95       	ror	r22
 19e:	81 e3       	ldi	r24, 0x31	; 49
 1a0:	0e 94 ce 01 	call	0x39c	; 0x39c <MCP2515_write>
 1a4:	60 2f       	mov	r22, r16
	printf("TXCTRL: %x\n", MCP2515_read(MCP_TXB0CTRL));
 1a6:	62 95       	swap	r22
 1a8:	66 0f       	add	r22, r22
 1aa:	60 7e       	andi	r22, 0xE0	; 224
 1ac:	82 e3       	ldi	r24, 0x32	; 50
 1ae:	0e 94 ce 01 	call	0x39c	; 0x39c <MCP2515_write>
 1b2:	6a 81       	ldd	r22, Y+2	; 0x02
 1b4:	85 e3       	ldi	r24, 0x35	; 53
 1b6:	0e 94 ce 01 	call	0x39c	; 0x39c <MCP2515_write>
 1ba:	8a 81       	ldd	r24, Y+2	; 0x02
	printf("ERROR FLAGS: %x\n", MCP2515_read(MCP_EFLG));
 1bc:	88 23       	and	r24, r24
 1be:	69 f0       	breq	.+26     	; 0x1da <CAN_message_send+0x58>
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	fe 01       	movw	r30, r28
 1c4:	e1 0f       	add	r30, r17
 1c6:	f1 1d       	adc	r31, r1
 1c8:	63 81       	ldd	r22, Z+3	; 0x03
 1ca:	86 e3       	ldi	r24, 0x36	; 54
 1cc:	81 0f       	add	r24, r17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	0e 94 ce 01 	call	0x39c	; 0x39c <MCP2515_write>
 1d2:	1f 5f       	subi	r17, 0xFF	; 255
 1d4:	8a 81       	ldd	r24, Y+2	; 0x02
 1d6:	18 17       	cp	r17, r24
 1d8:	a0 f3       	brcs	.-24     	; 0x1c2 <CAN_message_send+0x40>
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <MCP2515_request_to_send>
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <CAN_transmit_complete>:
	_delay_ms(500);

	
	
	/*CAN_error();*/
 1ea:	03 96       	adiw	r24, 0x03	; 3
 1ec:	82 95       	swap	r24
 1ee:	80 7f       	andi	r24, 0xF0	; 240
 1f0:	0e 94 bc 01 	call	0x378	; 0x378 <MCP2515_read>
 1f4:	83 fb       	bst	r24, 3
 1f6:	88 27       	eor	r24, r24
 1f8:	80 f9       	bld	r24, 0
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	89 27       	eor	r24, r25
 1fe:	08 95       	ret

00000200 <JOY_calibrate>:
	clear_bit(DDRB,PB2);
	clear_bit(SFIOR, PUD);
	JOY_calibrate();
}

void JOY_calibrate(){
 200:	bf 92       	push	r11
 202:	cf 92       	push	r12
 204:	df 92       	push	r13
 206:	ef 92       	push	r14
 208:	ff 92       	push	r15
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
	max.x = 0;
 212:	10 92 68 02 	sts	0x0268, r1
	max.y = 0;
 216:	10 92 69 02 	sts	0x0269, r1
	min.x = 255;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	80 93 6c 02 	sts	0x026C, r24
	min.y = 255;
 220:	80 93 6d 02 	sts	0x026D, r24
	uint8_t x;
	uint8_t y;
	OLED_reset();
 224:	0e 94 b3 02 	call	0x566	; 0x566 <OLED_reset>
	printf("\nMove the joystick to all extreme points.\n");
 228:	80 e2       	ldi	r24, 0x20	; 32
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <puts>
	printf("Press the joystick when you're done.\n");
 230:	8a e4       	ldi	r24, 0x4A	; 74
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 db 04 	call	0x9b6	; 0x9b6 <puts>
		// Read sensor values
		x = ADC_read(0);
		y = ADC_read(1);
		
		// Calibrate x
		if (min.x > x) min.x = x; 
 238:	0c e6       	ldi	r16, 0x6C	; 108
 23a:	12 e0       	ldi	r17, 0x02	; 2
		else if (max.x < x) max.x = x;
 23c:	0f 2e       	mov	r0, r31
 23e:	f8 e6       	ldi	r31, 0x68	; 104
 240:	cf 2e       	mov	r12, r31
 242:	f2 e0       	ldi	r31, 0x02	; 2
 244:	df 2e       	mov	r13, r31
 246:	f0 2d       	mov	r31, r0
		
		// Calibrate y
		if (min.y > y) min.y = y;
 248:	cd e6       	ldi	r28, 0x6D	; 109
 24a:	d2 e0       	ldi	r29, 0x02	; 2
		else if (max.y < y) max.y = y;		
 24c:	0f 2e       	mov	r0, r31
 24e:	f9 e6       	ldi	r31, 0x69	; 105
 250:	ef 2e       	mov	r14, r31
 252:	f2 e0       	ldi	r31, 0x02	; 2
 254:	ff 2e       	mov	r15, r31
 256:	f0 2d       	mov	r31, r0
	uint8_t y;
	OLED_reset();
	printf("\nMove the joystick to all extreme points.\n");
	printf("Press the joystick when you're done.\n");
	//check channels 
	while(test_bit(PINB,PINB2)){
 258:	1c c0       	rjmp	.+56     	; 0x292 <JOY_calibrate+0x92>
		// Read sensor values
		x = ADC_read(0);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_read>
 260:	b8 2e       	mov	r11, r24
		y = ADC_read(1);
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_read>
		
		// Calibrate x
		if (min.x > x) min.x = x; 
 268:	f8 01       	movw	r30, r16
 26a:	90 81       	ld	r25, Z
 26c:	b9 16       	cp	r11, r25
 26e:	10 f4       	brcc	.+4      	; 0x274 <JOY_calibrate+0x74>
 270:	b0 82       	st	Z, r11
 272:	05 c0       	rjmp	.+10     	; 0x27e <JOY_calibrate+0x7e>
		else if (max.x < x) max.x = x;
 274:	f6 01       	movw	r30, r12
 276:	90 81       	ld	r25, Z
 278:	9b 15       	cp	r25, r11
 27a:	08 f4       	brcc	.+2      	; 0x27e <JOY_calibrate+0x7e>
 27c:	b0 82       	st	Z, r11
		
		// Calibrate y
		if (min.y > y) min.y = y;
 27e:	98 81       	ld	r25, Y
 280:	89 17       	cp	r24, r25
 282:	10 f4       	brcc	.+4      	; 0x288 <JOY_calibrate+0x88>
 284:	88 83       	st	Y, r24
 286:	05 c0       	rjmp	.+10     	; 0x292 <JOY_calibrate+0x92>
		else if (max.y < y) max.y = y;		
 288:	f7 01       	movw	r30, r14
 28a:	90 81       	ld	r25, Z
 28c:	98 17       	cp	r25, r24
 28e:	08 f4       	brcc	.+2      	; 0x292 <JOY_calibrate+0x92>
 290:	80 83       	st	Z, r24
	uint8_t y;
	OLED_reset();
	printf("\nMove the joystick to all extreme points.\n");
	printf("Press the joystick when you're done.\n");
	//check channels 
	while(test_bit(PINB,PINB2)){
 292:	b2 99       	sbic	0x16, 2	; 22
 294:	e2 cf       	rjmp	.-60     	; 0x25a <JOY_calibrate+0x5a>
		if (min.y > y) min.y = y;
		else if (max.y < y) max.y = y;		
	}

	// Find distance from middle to edges (radius)
	rad.x = (max.x - min.x) / 2;
 296:	e0 91 68 02 	lds	r30, 0x0268
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	60 91 6c 02 	lds	r22, 0x026C
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	9f 01       	movw	r18, r30
 2a4:	26 1b       	sub	r18, r22
 2a6:	37 0b       	sbc	r19, r23
 2a8:	c9 01       	movw	r24, r18
 2aa:	99 23       	and	r25, r25
 2ac:	0c f4       	brge	.+2      	; 0x2b0 <JOY_calibrate+0xb0>
 2ae:	01 96       	adiw	r24, 0x01	; 1
 2b0:	95 95       	asr	r25
 2b2:	87 95       	ror	r24
 2b4:	80 93 6a 02 	sts	0x026A, r24
	rad.y = (max.y - min.y) / 2;
 2b8:	40 91 69 02 	lds	r20, 0x0269
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	20 91 6d 02 	lds	r18, 0x026D
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	da 01       	movw	r26, r20
 2c6:	a2 1b       	sub	r26, r18
 2c8:	b3 0b       	sbc	r27, r19
 2ca:	cd 01       	movw	r24, r26
 2cc:	0a f4       	brpl	.+2      	; 0x2d0 <JOY_calibrate+0xd0>
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	95 95       	asr	r25
 2d2:	87 95       	ror	r24
 2d4:	80 93 6b 02 	sts	0x026B, r24
	
	// Find mid point using edges.
	mid.x = (max.x + min.x) / 2;
 2d8:	6e 0f       	add	r22, r30
 2da:	7f 1f       	adc	r23, r31
 2dc:	75 95       	asr	r23
 2de:	67 95       	ror	r22
 2e0:	60 93 6e 02 	sts	0x026E, r22
	mid.y = (max.y + min.y) / 2;
 2e4:	24 0f       	add	r18, r20
 2e6:	35 1f       	adc	r19, r21
 2e8:	35 95       	asr	r19
 2ea:	27 95       	ror	r18
 2ec:	20 93 6f 02 	sts	0x026F, r18
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	ff 90       	pop	r15
 2fa:	ef 90       	pop	r14
 2fc:	df 90       	pop	r13
 2fe:	cf 90       	pop	r12
 300:	bf 90       	pop	r11
 302:	08 95       	ret

00000304 <JOY_init>:
	uint8_t y;
} max, min, rad, mid;

void JOY_init(){
	//set pull-up resistors on PORTB for JOY_button
	set_bit(PORTB,PB2);
 304:	c2 9a       	sbi	0x18, 2	; 24
	clear_bit(DDRB,PB2);
 306:	ba 98       	cbi	0x17, 2	; 23
	clear_bit(SFIOR, PUD);
 308:	80 b7       	in	r24, 0x30	; 48
 30a:	8b 7f       	andi	r24, 0xFB	; 251
 30c:	80 bf       	out	0x30, r24	; 48
	JOY_calibrate();
 30e:	0e 94 00 01 	call	0x200	; 0x200 <JOY_calibrate>
 312:	08 95       	ret

00000314 <JOY_getPosition>:
		break;
	}
	return false;
}

JOY_position_t JOY_getPosition() {
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
	JOY_position_t JOY_position;
	JOY_position.x = (100 * (ADC_read(X_COORD) - mid.x)) / rad.x;
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_read>
 320:	28 2f       	mov	r18, r24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	80 91 6e 02 	lds	r24, 0x026E
 328:	28 1b       	sub	r18, r24
 32a:	31 09       	sbc	r19, r1
 32c:	14 e6       	ldi	r17, 0x64	; 100
 32e:	12 9f       	mul	r17, r18
 330:	c0 01       	movw	r24, r0
 332:	13 9f       	mul	r17, r19
 334:	90 0d       	add	r25, r0
 336:	11 24       	eor	r1, r1
 338:	60 91 6a 02 	lds	r22, 0x026A
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodhi4>
 342:	eb 01       	movw	r28, r22
	JOY_position.y = (100 * (ADC_read(Y_COORD) - mid.y)) / rad.y;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_read>
 34a:	28 2f       	mov	r18, r24
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	80 91 6f 02 	lds	r24, 0x026F
 352:	28 1b       	sub	r18, r24
 354:	31 09       	sbc	r19, r1
 356:	12 9f       	mul	r17, r18
 358:	c0 01       	movw	r24, r0
 35a:	13 9f       	mul	r17, r19
 35c:	90 0d       	add	r25, r0
 35e:	11 24       	eor	r1, r1
 360:	60 91 6b 02 	lds	r22, 0x026B
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	0e 94 2d 03 	call	0x65a	; 0x65a <__divmodhi4>
 36a:	9b 01       	movw	r18, r22
	return JOY_position;
 36c:	be 01       	movw	r22, r28
 36e:	c9 01       	movw	r24, r18
}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	08 95       	ret

00000378 <MCP2515_read>:
	}
	
	return 0;
}

char MCP2515_read(char address) {
 378:	cf 93       	push	r28
 37a:	c8 2f       	mov	r28, r24
	SPI_select();
 37c:	0e 94 07 03 	call	0x60e	; 0x60e <SPI_select>
	SPI_send(READ);
 380:	83 e0       	ldi	r24, 0x03	; 3
 382:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <SPI_send>
	SPI_send(address);
 386:	8c 2f       	mov	r24, r28
 388:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <SPI_send>
	char data = SPI_read();
 38c:	0e 94 00 03 	call	0x600	; 0x600 <SPI_read>
 390:	c8 2f       	mov	r28, r24
	SPI_deselect();
 392:	0e 94 09 03 	call	0x612	; 0x612 <SPI_deselect>
	return data;
	
	
}
 396:	8c 2f       	mov	r24, r28
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <MCP2515_write>:

void MCP2515_write(char address, char data) {
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	d8 2f       	mov	r29, r24
 3a2:	c6 2f       	mov	r28, r22
	SPI_select();
 3a4:	0e 94 07 03 	call	0x60e	; 0x60e <SPI_select>
	SPI_send(WRITE);
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <SPI_send>
	SPI_send(address);
 3ae:	8d 2f       	mov	r24, r29
 3b0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <SPI_send>
	SPI_send(data);
 3b4:	8c 2f       	mov	r24, r28
 3b6:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <SPI_send>
	SPI_deselect();
 3ba:	0e 94 09 03 	call	0x612	; 0x612 <SPI_deselect>
}
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <MCP2515_request_to_send>:

//Buffer states: three bit, setting a 1 on the buffer initiates transmitting from it 
void MCP2515_request_to_send(uint8_t buffer_states) {
 3c4:	cf 93       	push	r28
 3c6:	c8 2f       	mov	r28, r24
	SPI_select();
 3c8:	0e 94 07 03 	call	0x60e	; 0x60e <SPI_select>
	SPI_send(RTS_BASE+buffer_states);
 3cc:	80 e8       	ldi	r24, 0x80	; 128
 3ce:	8c 0f       	add	r24, r28
 3d0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <SPI_send>
	SPI_deselect();
 3d4:	0e 94 09 03 	call	0x612	; 0x612 <SPI_deselect>
}
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <MCP2515_bit_modify>:

//puts new_data in the selected reg_adress. the function assumes that you are allowed to change every bit in the register
void MCP2515_bit_modify(char reg_address, char masked_bits, char new_data) {
 3dc:	1f 93       	push	r17
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	18 2f       	mov	r17, r24
 3e4:	d6 2f       	mov	r29, r22
 3e6:	c4 2f       	mov	r28, r20
	SPI_select();
 3e8:	0e 94 07 03 	call	0x60e	; 0x60e <SPI_select>
	SPI_send(BIT_MODIFY);
 3ec:	85 e0       	ldi	r24, 0x05	; 5
 3ee:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <SPI_send>
	SPI_send(reg_address);
 3f2:	81 2f       	mov	r24, r17
 3f4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <SPI_send>
	SPI_send(masked_bits);
 3f8:	8d 2f       	mov	r24, r29
 3fa:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <SPI_send>
	SPI_send(new_data);
 3fe:	8c 2f       	mov	r24, r28
 400:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <SPI_send>
	SPI_deselect();
 404:	0e 94 09 03 	call	0x612	; 0x612 <SPI_deselect>
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	08 95       	ret

00000410 <MCP2515_reset>:

void MCP2515_reset() {
	SPI_select();
 410:	0e 94 07 03 	call	0x60e	; 0x60e <SPI_select>
	SPI_send(RESET);
 414:	80 ec       	ldi	r24, 0xC0	; 192
 416:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <SPI_send>
	SPI_deselect();
 41a:	0e 94 09 03 	call	0x612	; 0x612 <SPI_deselect>
 41e:	08 95       	ret

00000420 <MCP2515_init>:
#define BIT_MODIFY 0x05
#define RTS_BASE 0x80


uint8_t MCP2515_init() {
	SPI_init();
 420:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <SPI_init>
	MCP2515_reset();
 424:	0e 94 08 02 	call	0x410	; 0x410 <MCP2515_reset>
	//check bit 7-5 of MCP_CANSTAT which signify the operation mode
	const uint8_t device_mode = MCP2515_read(MCP_CANSTAT) & MODE_MASK;
 428:	8e e0       	ldi	r24, 0x0E	; 14
 42a:	0e 94 bc 01 	call	0x378	; 0x378 <MCP2515_read>
 42e:	80 7e       	andi	r24, 0xE0	; 224
	if (device_mode != MODE_CONFIG) {
 430:	80 38       	cpi	r24, 0x80	; 128
 432:	31 f0       	breq	.+12     	; 0x440 <MCP2515_init+0x20>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
 434:	80 ef       	ldi	r24, 0xF0	; 240
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	0e 94 db 04 	call	0x9b6	; 0x9b6 <puts>
		return 1;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	08 95       	ret
	}
	
	return 0;
 440:	80 e0       	ldi	r24, 0x00	; 0
}
 442:	08 95       	ret

00000444 <initialize>:
#include <stdio.h>
#include <stdbool.h>


void initialize(void){
	cli();
 444:	f8 94       	cli
	OLED_reset();
 446:	0e 94 b3 02 	call	0x566	; 0x566 <OLED_reset>
	usart_init(MYUBRR);
 44a:	8f e1       	ldi	r24, 0x1F	; 31
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 20 03 	call	0x640	; 0x640 <usart_init>
	SRAM_init();
 452:	0e 94 0b 03 	call	0x616	; 0x616 <SRAM_init>
	ADC_init();
 456:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	JOY_init();
 45a:	0e 94 82 01 	call	0x304	; 0x304 <JOY_init>
	OLED_init();
 45e:	0e 94 bf 02 	call	0x57e	; 0x57e <OLED_init>
	//MENU_init();
	CAN_init();
 462:	0e 94 aa 00 	call	0x154	; 0x154 <CAN_init>
	sei();
 466:	78 94       	sei
 468:	08 95       	ret

0000046a <send_joystick_pos>:
	}
	
	
}

void send_joystick_pos(){
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	2b 97       	sbiw	r28, 0x0b	; 11
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	de bf       	out	0x3e, r29	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	cd bf       	out	0x3d, r28	; 61
	can_message msg;
	msg.id  = 0;
 47e:	1a 82       	std	Y+2, r1	; 0x02
 480:	19 82       	std	Y+1, r1	; 0x01
	msg.length = 2;
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	8b 83       	std	Y+3, r24	; 0x03
	JOY_position_t pos;
	
	pos = JOY_getPosition();
 486:	0e 94 8a 01 	call	0x314	; 0x314 <JOY_getPosition>
	msg.data[0] = pos.x;
 48a:	6c 83       	std	Y+4, r22	; 0x04
	msg.data[1] = pos.y;
 48c:	8d 83       	std	Y+5, r24	; 0x05
	printf("SENDING:\nx: %d\ty:%d\n\n", pos.x, pos.y);
 48e:	9f 93       	push	r25
 490:	8f 93       	push	r24
 492:	7f 93       	push	r23
 494:	6f 93       	push	r22
 496:	82 e2       	ldi	r24, 0x22	; 34
 498:	92 e0       	ldi	r25, 0x02	; 2
 49a:	9f 93       	push	r25
 49c:	8f 93       	push	r24
 49e:	0e 94 c7 04 	call	0x98e	; 0x98e <printf>
	CAN_message_send(&msg);
 4a2:	ce 01       	movw	r24, r28
 4a4:	01 96       	adiw	r24, 0x01	; 1
 4a6:	0e 94 c1 00 	call	0x182	; 0x182 <CAN_message_send>
	while(!CAN_transmit_complete(TB0))
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	0f 90       	pop	r0
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 f5 00 	call	0x1ea	; 0x1ea <CAN_transmit_complete>
 4be:	88 23       	and	r24, r24
 4c0:	d1 f3       	breq	.-12     	; 0x4b6 <send_joystick_pos+0x4c>
		;
	//printf("1. EFGL: 0x%02x\n", MCP2515_read(MCP_EFLG));
	
}
 4c2:	2b 96       	adiw	r28, 0x0b	; 11
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <main>:

int main(void) {
	initialize();
 4d4:	0e 94 22 02 	call	0x444	; 0x444 <initialize>
	while(1){
		//MENU_run();
		send_joystick_pos();
 4d8:	0e 94 35 02 	call	0x46a	; 0x46a <send_joystick_pos>
 4dc:	fd cf       	rjmp	.-6      	; 0x4d8 <main+0x4>

000004de <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7){
 4de:	88 30       	cpi	r24, 0x08	; 8
 4e0:	30 f4       	brcc	.+12     	; 0x4ee <OLED_goto_line+0x10>
		return;
	}
	write_cmd(0xB0+line);
 4e2:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
 4e4:	e0 91 06 01 	lds	r30, 0x0106
 4e8:	f0 91 07 01 	lds	r31, 0x0107
 4ec:	80 83       	st	Z, r24
 4ee:	08 95       	ret

000004f0 <OLED_goto_column>:
	}
	write_cmd(0xB0+line);
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
 4f0:	88 23       	and	r24, r24
 4f2:	7c f0       	brlt	.+30     	; 0x512 <__stack+0x13>
		return;
	}
	write_cmd(0x00+column%16); //lower column register
 4f4:	98 2f       	mov	r25, r24
 4f6:	9f 70       	andi	r25, 0x0F	; 15
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
 4f8:	e0 91 06 01 	lds	r30, 0x0106
 4fc:	f0 91 07 01 	lds	r31, 0x0107
 500:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
		return;
	}
	write_cmd(0x00+column%16); //lower column register
	write_cmd(0x10+column/16); //higher column register
 502:	82 95       	swap	r24
 504:	8f 70       	andi	r24, 0x0F	; 15
 506:	80 5f       	subi	r24, 0xF0	; 240
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
 508:	e0 91 06 01 	lds	r30, 0x0106
 50c:	f0 91 07 01 	lds	r31, 0x0107
 510:	80 83       	st	Z, r24
 512:	08 95       	ret

00000514 <OLED_pos>:
		write_data(0x00);
		
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
 514:	cf 93       	push	r28
 516:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
 518:	88 30       	cpi	r24, 0x08	; 8
 51a:	10 f4       	brcc	.+4      	; 0x520 <OLED_pos+0xc>
 51c:	66 23       	and	r22, r22
 51e:	4c f4       	brge	.+18     	; 0x532 <OLED_pos+0x1e>
		printf("Out of range in OLED_pos()");
 520:	88 e3       	ldi	r24, 0x38	; 56
 522:	92 e0       	ldi	r25, 0x02	; 2
 524:	9f 93       	push	r25
 526:	8f 93       	push	r24
 528:	0e 94 c7 04 	call	0x98e	; 0x98e <printf>
		return; 
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	05 c0       	rjmp	.+10     	; 0x53c <OLED_pos+0x28>
	}
	
	OLED_goto_line(line);
 532:	0e 94 6f 02 	call	0x4de	; 0x4de <OLED_goto_line>
	OLED_goto_column(column);
 536:	8c 2f       	mov	r24, r28
 538:	0e 94 78 02 	call	0x4f0	; 0x4f0 <OLED_goto_column>
}
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <OLED_home>:




void OLED_home(){
	OLED_pos(0,0);
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	0e 94 8a 02 	call	0x514	; 0x514 <OLED_pos>
 548:	08 95       	ret

0000054a <OLED_clear_line>:
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	0e 94 8a 02 	call	0x514	; 0x514 <OLED_pos>
 550:	80 e8       	ldi	r24, 0x80	; 128
 552:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
 554:	e0 91 08 01 	lds	r30, 0x0108
 558:	f0 91 09 01 	lds	r31, 0x0109
 55c:	10 82       	st	Z, r1
 55e:	01 97       	sbiw	r24, 0x01	; 1
	OLED_pos(0,0);
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
 560:	00 97       	sbiw	r24, 0x00	; 0
 562:	c1 f7       	brne	.-16     	; 0x554 <OLED_clear_line+0xa>
		write_data(0x00);
		
	}
}
 564:	08 95       	ret

00000566 <OLED_reset>:
	
}



void OLED_reset() {
 566:	cf 93       	push	r28
 568:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
 56a:	8c 2f       	mov	r24, r28
 56c:	0e 94 a5 02 	call	0x54a	; 0x54a <OLED_clear_line>
 570:	cf 5f       	subi	r28, 0xFF	; 255
}



void OLED_reset() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
 572:	c8 30       	cpi	r28, 0x08	; 8
 574:	d1 f7       	brne	.-12     	; 0x56a <OLED_reset+0x4>
		OLED_clear_line(page);
	}
	OLED_home();
 576:	0e 94 a0 02 	call	0x540	; 0x540 <OLED_home>
}
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
 586:	66 97       	sbiw	r28, 0x16	; 22
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	de bf       	out	0x3e, r29	; 62
 58e:	0f be       	out	0x3f, r0	; 63
 590:	cd bf       	out	0x3d, r28	; 61
	
	
	const char addresses[] = {
 592:	86 e1       	ldi	r24, 0x16	; 22
 594:	ea e0       	ldi	r30, 0x0A	; 10
 596:	f1 e0       	ldi	r31, 0x01	; 1
 598:	de 01       	movw	r26, r28
 59a:	11 96       	adiw	r26, 0x01	; 1
 59c:	01 90       	ld	r0, Z+
 59e:	0d 92       	st	X+, r0
 5a0:	8a 95       	dec	r24
 5a2:	e1 f7       	brne	.-8      	; 0x59c <OLED_init+0x1e>
 5a4:	fe 01       	movw	r30, r28
 5a6:	31 96       	adiw	r30, 0x01	; 1
 5a8:	ce 01       	movw	r24, r28
 5aa:	47 96       	adiw	r24, 0x17	; 23
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
		write_cmd(addresses[i]);
 5ac:	21 91       	ld	r18, Z+
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
 5ae:	a0 91 06 01 	lds	r26, 0x0106
 5b2:	b0 91 07 01 	lds	r27, 0x0107
 5b6:	2c 93       	st	X, r18
		0xa6, //set normal display
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
 5b8:	e8 17       	cp	r30, r24
 5ba:	f9 07       	cpc	r31, r25
 5bc:	b9 f7       	brne	.-18     	; 0x5ac <OLED_init+0x2e>
		write_cmd(addresses[i]);
	}
	
	OLED_reset();
 5be:	0e 94 b3 02 	call	0x566	; 0x566 <OLED_reset>
	
}
 5c2:	66 96       	adiw	r28, 0x16	; 22
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	cd bf       	out	0x3d, r28	; 61
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <SPI_init>:

void SPI_init(){
	//Configure interrupt0 on the ATmega162 for receiving interrupts from SPI
	//see page 160 in ATmega162
	//enable int0 on the ATmega162
	set_bit(GICR, INT0);
 5d4:	8b b7       	in	r24, 0x3b	; 59
 5d6:	80 64       	ori	r24, 0x40	; 64
 5d8:	8b bf       	out	0x3b, r24	; 59
	
	//interrupt when low
	clear_bit(MCUCR,ISC01);
 5da:	85 b7       	in	r24, 0x35	; 53
 5dc:	8d 7f       	andi	r24, 0xFD	; 253
 5de:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
 5e0:	85 b7       	in	r24, 0x35	; 53
 5e2:	8e 7f       	andi	r24, 0xFE	; 254
 5e4:	85 bf       	out	0x35, r24	; 53
	

	//set mosi, sck, ss as output, others as input
	set_bit(DDRB, MOSI);
 5e6:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
 5e8:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
 5ea:	bc 9a       	sbi	0x17, 4	; 23
	
	
	//set ATmega as master
	set_bit(SPCR, MSTR);
 5ec:	6c 9a       	sbi	0x0d, 4	; 13
	
	//enable SPI
	set_bit(SPCR, SPE);
 5ee:	6e 9a       	sbi	0x0d, 6	; 13
	
	//set clock to f_osc/16
	set_bit(SPCR, SPR0);
 5f0:	68 9a       	sbi	0x0d, 0	; 13
	clear_bit(SPCR,SPR1);
 5f2:	69 98       	cbi	0x0d, 1	; 13
	clear_bit(SPCR, SPI2X);
 5f4:	68 98       	cbi	0x0d, 0	; 13
 5f6:	08 95       	ret

000005f8 <SPI_send>:
}


void SPI_send(uint8_t data){
	//Start transmission
	SPDR = data;		
 5f8:	8f b9       	out	0x0f, r24	; 15
	//wait for transmission complete SPSR: register with SPIF flag, SPIF: bit set to 1 when data is read
	loop_until_bit_is_set(SPSR, SPIF);
 5fa:	77 9b       	sbis	0x0e, 7	; 14
 5fc:	fe cf       	rjmp	.-4      	; 0x5fa <SPI_send+0x2>
}
 5fe:	08 95       	ret

00000600 <SPI_read>:


char SPI_read(){
	//must send a dummy bit to receive data
	SPI_send(0);
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <SPI_send>
	
	loop_until_bit_is_set(SPSR, SPIF);
 606:	77 9b       	sbis	0x0e, 7	; 14
 608:	fe cf       	rjmp	.-4      	; 0x606 <SPI_read+0x6>
	char data = SPDR;
 60a:	8f b1       	in	r24, 0x0f	; 15
	return data;
	
}
 60c:	08 95       	ret

0000060e <SPI_select>:
	//printf("SPI_TEST: %s\n\n", spi_read_result);
	
}

void SPI_select(){
	clear_bit(PORTB, SS);
 60e:	c4 98       	cbi	0x18, 4	; 24
 610:	08 95       	ret

00000612 <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
 612:	c4 9a       	sbi	0x18, 4	; 24
 614:	08 95       	ret

00000616 <SRAM_init>:



void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
 616:	85 b7       	in	r24, 0x35	; 53
 618:	80 68       	ori	r24, 0x80	; 128
 61a:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
 61c:	80 b7       	in	r24, 0x30	; 48
 61e:	80 62       	ori	r24, 0x20	; 32
 620:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
 622:	80 b7       	in	r24, 0x30	; 48
 624:	8f 7e       	andi	r24, 0xEF	; 239
 626:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
 628:	80 b7       	in	r24, 0x30	; 48
 62a:	87 7f       	andi	r24, 0xF7	; 247
 62c:	80 bf       	out	0x30, r24	; 48
 62e:	08 95       	ret

00000630 <usart_transmit_to_computer>:
}


void usart_transmit_to_computer(unsigned int data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
 630:	5d 9b       	sbis	0x0b, 5	; 11
 632:	fe cf       	rjmp	.-4      	; 0x630 <usart_transmit_to_computer>
	;
	
	/* Put data into buffer (sends the data) */
	UDR0 = data;
 634:	8c b9       	out	0x0c, r24	; 12
 636:	08 95       	ret

00000638 <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
 638:	5f 9b       	sbis	0x0b, 7	; 11
 63a:	fe cf       	rjmp	.-4      	; 0x638 <usart_receive_from_computer>
	;
	
	/* Get and return data from buffer */
	return UDR0;
 63c:	8c b1       	in	r24, 0x0c	; 12
}
 63e:	08 95       	ret

00000640 <usart_init>:
#include <stdio.h>


void usart_init(unsigned int ubbr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubbr>>8);
 640:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
 642:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 644:	88 e1       	ldi	r24, 0x18	; 24
 646:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 648:	8e e8       	ldi	r24, 0x8E	; 142
 64a:	80 bd       	out	0x20, r24	; 32
	
	
	/* Enable printf-thing */
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
 64c:	6c e1       	ldi	r22, 0x1C	; 28
 64e:	73 e0       	ldi	r23, 0x03	; 3
 650:	88 e1       	ldi	r24, 0x18	; 24
 652:	93 e0       	ldi	r25, 0x03	; 3
 654:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <fdevopen>
 658:	08 95       	ret

0000065a <__divmodhi4>:
 65a:	97 fb       	bst	r25, 7
 65c:	07 2e       	mov	r0, r23
 65e:	16 f4       	brtc	.+4      	; 0x664 <__divmodhi4+0xa>
 660:	00 94       	com	r0
 662:	07 d0       	rcall	.+14     	; 0x672 <__divmodhi4_neg1>
 664:	77 fd       	sbrc	r23, 7
 666:	09 d0       	rcall	.+18     	; 0x67a <__divmodhi4_neg2>
 668:	0e 94 41 03 	call	0x682	; 0x682 <__udivmodhi4>
 66c:	07 fc       	sbrc	r0, 7
 66e:	05 d0       	rcall	.+10     	; 0x67a <__divmodhi4_neg2>
 670:	3e f4       	brtc	.+14     	; 0x680 <__divmodhi4_exit>

00000672 <__divmodhi4_neg1>:
 672:	90 95       	com	r25
 674:	81 95       	neg	r24
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	08 95       	ret

0000067a <__divmodhi4_neg2>:
 67a:	70 95       	com	r23
 67c:	61 95       	neg	r22
 67e:	7f 4f       	sbci	r23, 0xFF	; 255

00000680 <__divmodhi4_exit>:
 680:	08 95       	ret

00000682 <__udivmodhi4>:
 682:	aa 1b       	sub	r26, r26
 684:	bb 1b       	sub	r27, r27
 686:	51 e1       	ldi	r21, 0x11	; 17
 688:	07 c0       	rjmp	.+14     	; 0x698 <__udivmodhi4_ep>

0000068a <__udivmodhi4_loop>:
 68a:	aa 1f       	adc	r26, r26
 68c:	bb 1f       	adc	r27, r27
 68e:	a6 17       	cp	r26, r22
 690:	b7 07       	cpc	r27, r23
 692:	10 f0       	brcs	.+4      	; 0x698 <__udivmodhi4_ep>
 694:	a6 1b       	sub	r26, r22
 696:	b7 0b       	sbc	r27, r23

00000698 <__udivmodhi4_ep>:
 698:	88 1f       	adc	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	5a 95       	dec	r21
 69e:	a9 f7       	brne	.-22     	; 0x68a <__udivmodhi4_loop>
 6a0:	80 95       	com	r24
 6a2:	90 95       	com	r25
 6a4:	bc 01       	movw	r22, r24
 6a6:	cd 01       	movw	r24, r26
 6a8:	08 95       	ret

000006aa <malloc>:
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	82 30       	cpi	r24, 0x02	; 2
 6b0:	91 05       	cpc	r25, r1
 6b2:	10 f4       	brcc	.+4      	; 0x6b8 <malloc+0xe>
 6b4:	82 e0       	ldi	r24, 0x02	; 2
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	e0 91 72 02 	lds	r30, 0x0272
 6bc:	f0 91 73 02 	lds	r31, 0x0273
 6c0:	20 e0       	ldi	r18, 0x00	; 0
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	a0 e0       	ldi	r26, 0x00	; 0
 6c6:	b0 e0       	ldi	r27, 0x00	; 0
 6c8:	30 97       	sbiw	r30, 0x00	; 0
 6ca:	39 f1       	breq	.+78     	; 0x71a <malloc+0x70>
 6cc:	40 81       	ld	r20, Z
 6ce:	51 81       	ldd	r21, Z+1	; 0x01
 6d0:	48 17       	cp	r20, r24
 6d2:	59 07       	cpc	r21, r25
 6d4:	b8 f0       	brcs	.+46     	; 0x704 <malloc+0x5a>
 6d6:	48 17       	cp	r20, r24
 6d8:	59 07       	cpc	r21, r25
 6da:	71 f4       	brne	.+28     	; 0x6f8 <malloc+0x4e>
 6dc:	82 81       	ldd	r24, Z+2	; 0x02
 6de:	93 81       	ldd	r25, Z+3	; 0x03
 6e0:	10 97       	sbiw	r26, 0x00	; 0
 6e2:	29 f0       	breq	.+10     	; 0x6ee <malloc+0x44>
 6e4:	13 96       	adiw	r26, 0x03	; 3
 6e6:	9c 93       	st	X, r25
 6e8:	8e 93       	st	-X, r24
 6ea:	12 97       	sbiw	r26, 0x02	; 2
 6ec:	2c c0       	rjmp	.+88     	; 0x746 <malloc+0x9c>
 6ee:	90 93 73 02 	sts	0x0273, r25
 6f2:	80 93 72 02 	sts	0x0272, r24
 6f6:	27 c0       	rjmp	.+78     	; 0x746 <malloc+0x9c>
 6f8:	21 15       	cp	r18, r1
 6fa:	31 05       	cpc	r19, r1
 6fc:	31 f0       	breq	.+12     	; 0x70a <malloc+0x60>
 6fe:	42 17       	cp	r20, r18
 700:	53 07       	cpc	r21, r19
 702:	18 f0       	brcs	.+6      	; 0x70a <malloc+0x60>
 704:	a9 01       	movw	r20, r18
 706:	db 01       	movw	r26, r22
 708:	01 c0       	rjmp	.+2      	; 0x70c <malloc+0x62>
 70a:	ef 01       	movw	r28, r30
 70c:	9a 01       	movw	r18, r20
 70e:	bd 01       	movw	r22, r26
 710:	df 01       	movw	r26, r30
 712:	02 80       	ldd	r0, Z+2	; 0x02
 714:	f3 81       	ldd	r31, Z+3	; 0x03
 716:	e0 2d       	mov	r30, r0
 718:	d7 cf       	rjmp	.-82     	; 0x6c8 <malloc+0x1e>
 71a:	21 15       	cp	r18, r1
 71c:	31 05       	cpc	r19, r1
 71e:	f9 f0       	breq	.+62     	; 0x75e <malloc+0xb4>
 720:	28 1b       	sub	r18, r24
 722:	39 0b       	sbc	r19, r25
 724:	24 30       	cpi	r18, 0x04	; 4
 726:	31 05       	cpc	r19, r1
 728:	80 f4       	brcc	.+32     	; 0x74a <malloc+0xa0>
 72a:	8a 81       	ldd	r24, Y+2	; 0x02
 72c:	9b 81       	ldd	r25, Y+3	; 0x03
 72e:	61 15       	cp	r22, r1
 730:	71 05       	cpc	r23, r1
 732:	21 f0       	breq	.+8      	; 0x73c <malloc+0x92>
 734:	fb 01       	movw	r30, r22
 736:	93 83       	std	Z+3, r25	; 0x03
 738:	82 83       	std	Z+2, r24	; 0x02
 73a:	04 c0       	rjmp	.+8      	; 0x744 <malloc+0x9a>
 73c:	90 93 73 02 	sts	0x0273, r25
 740:	80 93 72 02 	sts	0x0272, r24
 744:	fe 01       	movw	r30, r28
 746:	32 96       	adiw	r30, 0x02	; 2
 748:	44 c0       	rjmp	.+136    	; 0x7d2 <malloc+0x128>
 74a:	fe 01       	movw	r30, r28
 74c:	e2 0f       	add	r30, r18
 74e:	f3 1f       	adc	r31, r19
 750:	81 93       	st	Z+, r24
 752:	91 93       	st	Z+, r25
 754:	22 50       	subi	r18, 0x02	; 2
 756:	31 09       	sbc	r19, r1
 758:	39 83       	std	Y+1, r19	; 0x01
 75a:	28 83       	st	Y, r18
 75c:	3a c0       	rjmp	.+116    	; 0x7d2 <malloc+0x128>
 75e:	20 91 70 02 	lds	r18, 0x0270
 762:	30 91 71 02 	lds	r19, 0x0271
 766:	23 2b       	or	r18, r19
 768:	41 f4       	brne	.+16     	; 0x77a <malloc+0xd0>
 76a:	20 91 02 01 	lds	r18, 0x0102
 76e:	30 91 03 01 	lds	r19, 0x0103
 772:	30 93 71 02 	sts	0x0271, r19
 776:	20 93 70 02 	sts	0x0270, r18
 77a:	20 91 00 01 	lds	r18, 0x0100
 77e:	30 91 01 01 	lds	r19, 0x0101
 782:	21 15       	cp	r18, r1
 784:	31 05       	cpc	r19, r1
 786:	41 f4       	brne	.+16     	; 0x798 <malloc+0xee>
 788:	2d b7       	in	r18, 0x3d	; 61
 78a:	3e b7       	in	r19, 0x3e	; 62
 78c:	40 91 04 01 	lds	r20, 0x0104
 790:	50 91 05 01 	lds	r21, 0x0105
 794:	24 1b       	sub	r18, r20
 796:	35 0b       	sbc	r19, r21
 798:	e0 91 70 02 	lds	r30, 0x0270
 79c:	f0 91 71 02 	lds	r31, 0x0271
 7a0:	e2 17       	cp	r30, r18
 7a2:	f3 07       	cpc	r31, r19
 7a4:	a0 f4       	brcc	.+40     	; 0x7ce <malloc+0x124>
 7a6:	2e 1b       	sub	r18, r30
 7a8:	3f 0b       	sbc	r19, r31
 7aa:	28 17       	cp	r18, r24
 7ac:	39 07       	cpc	r19, r25
 7ae:	78 f0       	brcs	.+30     	; 0x7ce <malloc+0x124>
 7b0:	ac 01       	movw	r20, r24
 7b2:	4e 5f       	subi	r20, 0xFE	; 254
 7b4:	5f 4f       	sbci	r21, 0xFF	; 255
 7b6:	24 17       	cp	r18, r20
 7b8:	35 07       	cpc	r19, r21
 7ba:	48 f0       	brcs	.+18     	; 0x7ce <malloc+0x124>
 7bc:	4e 0f       	add	r20, r30
 7be:	5f 1f       	adc	r21, r31
 7c0:	50 93 71 02 	sts	0x0271, r21
 7c4:	40 93 70 02 	sts	0x0270, r20
 7c8:	81 93       	st	Z+, r24
 7ca:	91 93       	st	Z+, r25
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <malloc+0x128>
 7ce:	e0 e0       	ldi	r30, 0x00	; 0
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	cf 01       	movw	r24, r30
 7d4:	df 91       	pop	r29
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <free>:
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	00 97       	sbiw	r24, 0x00	; 0
 7e0:	09 f4       	brne	.+2      	; 0x7e4 <free+0xa>
 7e2:	87 c0       	rjmp	.+270    	; 0x8f2 <free+0x118>
 7e4:	fc 01       	movw	r30, r24
 7e6:	32 97       	sbiw	r30, 0x02	; 2
 7e8:	13 82       	std	Z+3, r1	; 0x03
 7ea:	12 82       	std	Z+2, r1	; 0x02
 7ec:	c0 91 72 02 	lds	r28, 0x0272
 7f0:	d0 91 73 02 	lds	r29, 0x0273
 7f4:	20 97       	sbiw	r28, 0x00	; 0
 7f6:	81 f4       	brne	.+32     	; 0x818 <free+0x3e>
 7f8:	20 81       	ld	r18, Z
 7fa:	31 81       	ldd	r19, Z+1	; 0x01
 7fc:	28 0f       	add	r18, r24
 7fe:	39 1f       	adc	r19, r25
 800:	80 91 70 02 	lds	r24, 0x0270
 804:	90 91 71 02 	lds	r25, 0x0271
 808:	82 17       	cp	r24, r18
 80a:	93 07       	cpc	r25, r19
 80c:	79 f5       	brne	.+94     	; 0x86c <free+0x92>
 80e:	f0 93 71 02 	sts	0x0271, r31
 812:	e0 93 70 02 	sts	0x0270, r30
 816:	6d c0       	rjmp	.+218    	; 0x8f2 <free+0x118>
 818:	de 01       	movw	r26, r28
 81a:	20 e0       	ldi	r18, 0x00	; 0
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	ae 17       	cp	r26, r30
 820:	bf 07       	cpc	r27, r31
 822:	50 f4       	brcc	.+20     	; 0x838 <free+0x5e>
 824:	12 96       	adiw	r26, 0x02	; 2
 826:	4d 91       	ld	r20, X+
 828:	5c 91       	ld	r21, X
 82a:	13 97       	sbiw	r26, 0x03	; 3
 82c:	9d 01       	movw	r18, r26
 82e:	41 15       	cp	r20, r1
 830:	51 05       	cpc	r21, r1
 832:	09 f1       	breq	.+66     	; 0x876 <free+0x9c>
 834:	da 01       	movw	r26, r20
 836:	f3 cf       	rjmp	.-26     	; 0x81e <free+0x44>
 838:	b3 83       	std	Z+3, r27	; 0x03
 83a:	a2 83       	std	Z+2, r26	; 0x02
 83c:	40 81       	ld	r20, Z
 83e:	51 81       	ldd	r21, Z+1	; 0x01
 840:	84 0f       	add	r24, r20
 842:	95 1f       	adc	r25, r21
 844:	8a 17       	cp	r24, r26
 846:	9b 07       	cpc	r25, r27
 848:	71 f4       	brne	.+28     	; 0x866 <free+0x8c>
 84a:	8d 91       	ld	r24, X+
 84c:	9c 91       	ld	r25, X
 84e:	11 97       	sbiw	r26, 0x01	; 1
 850:	84 0f       	add	r24, r20
 852:	95 1f       	adc	r25, r21
 854:	02 96       	adiw	r24, 0x02	; 2
 856:	91 83       	std	Z+1, r25	; 0x01
 858:	80 83       	st	Z, r24
 85a:	12 96       	adiw	r26, 0x02	; 2
 85c:	8d 91       	ld	r24, X+
 85e:	9c 91       	ld	r25, X
 860:	13 97       	sbiw	r26, 0x03	; 3
 862:	93 83       	std	Z+3, r25	; 0x03
 864:	82 83       	std	Z+2, r24	; 0x02
 866:	21 15       	cp	r18, r1
 868:	31 05       	cpc	r19, r1
 86a:	29 f4       	brne	.+10     	; 0x876 <free+0x9c>
 86c:	f0 93 73 02 	sts	0x0273, r31
 870:	e0 93 72 02 	sts	0x0272, r30
 874:	3e c0       	rjmp	.+124    	; 0x8f2 <free+0x118>
 876:	d9 01       	movw	r26, r18
 878:	13 96       	adiw	r26, 0x03	; 3
 87a:	fc 93       	st	X, r31
 87c:	ee 93       	st	-X, r30
 87e:	12 97       	sbiw	r26, 0x02	; 2
 880:	4d 91       	ld	r20, X+
 882:	5d 91       	ld	r21, X+
 884:	a4 0f       	add	r26, r20
 886:	b5 1f       	adc	r27, r21
 888:	ea 17       	cp	r30, r26
 88a:	fb 07       	cpc	r31, r27
 88c:	79 f4       	brne	.+30     	; 0x8ac <free+0xd2>
 88e:	80 81       	ld	r24, Z
 890:	91 81       	ldd	r25, Z+1	; 0x01
 892:	84 0f       	add	r24, r20
 894:	95 1f       	adc	r25, r21
 896:	02 96       	adiw	r24, 0x02	; 2
 898:	d9 01       	movw	r26, r18
 89a:	11 96       	adiw	r26, 0x01	; 1
 89c:	9c 93       	st	X, r25
 89e:	8e 93       	st	-X, r24
 8a0:	82 81       	ldd	r24, Z+2	; 0x02
 8a2:	93 81       	ldd	r25, Z+3	; 0x03
 8a4:	13 96       	adiw	r26, 0x03	; 3
 8a6:	9c 93       	st	X, r25
 8a8:	8e 93       	st	-X, r24
 8aa:	12 97       	sbiw	r26, 0x02	; 2
 8ac:	e0 e0       	ldi	r30, 0x00	; 0
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	8a 81       	ldd	r24, Y+2	; 0x02
 8b2:	9b 81       	ldd	r25, Y+3	; 0x03
 8b4:	00 97       	sbiw	r24, 0x00	; 0
 8b6:	19 f0       	breq	.+6      	; 0x8be <free+0xe4>
 8b8:	fe 01       	movw	r30, r28
 8ba:	ec 01       	movw	r28, r24
 8bc:	f9 cf       	rjmp	.-14     	; 0x8b0 <free+0xd6>
 8be:	ce 01       	movw	r24, r28
 8c0:	02 96       	adiw	r24, 0x02	; 2
 8c2:	28 81       	ld	r18, Y
 8c4:	39 81       	ldd	r19, Y+1	; 0x01
 8c6:	82 0f       	add	r24, r18
 8c8:	93 1f       	adc	r25, r19
 8ca:	20 91 70 02 	lds	r18, 0x0270
 8ce:	30 91 71 02 	lds	r19, 0x0271
 8d2:	28 17       	cp	r18, r24
 8d4:	39 07       	cpc	r19, r25
 8d6:	69 f4       	brne	.+26     	; 0x8f2 <free+0x118>
 8d8:	30 97       	sbiw	r30, 0x00	; 0
 8da:	29 f4       	brne	.+10     	; 0x8e6 <free+0x10c>
 8dc:	10 92 73 02 	sts	0x0273, r1
 8e0:	10 92 72 02 	sts	0x0272, r1
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <free+0x110>
 8e6:	13 82       	std	Z+3, r1	; 0x03
 8e8:	12 82       	std	Z+2, r1	; 0x02
 8ea:	d0 93 71 02 	sts	0x0271, r29
 8ee:	c0 93 70 02 	sts	0x0270, r28
 8f2:	df 91       	pop	r29
 8f4:	cf 91       	pop	r28
 8f6:	08 95       	ret

000008f8 <fdevopen>:
 8f8:	0f 93       	push	r16
 8fa:	1f 93       	push	r17
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	ec 01       	movw	r28, r24
 902:	8b 01       	movw	r16, r22
 904:	00 97       	sbiw	r24, 0x00	; 0
 906:	31 f4       	brne	.+12     	; 0x914 <fdevopen+0x1c>
 908:	61 15       	cp	r22, r1
 90a:	71 05       	cpc	r23, r1
 90c:	19 f4       	brne	.+6      	; 0x914 <fdevopen+0x1c>
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	38 c0       	rjmp	.+112    	; 0x984 <fdevopen+0x8c>
 914:	6e e0       	ldi	r22, 0x0E	; 14
 916:	70 e0       	ldi	r23, 0x00	; 0
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <calloc>
 920:	fc 01       	movw	r30, r24
 922:	00 97       	sbiw	r24, 0x00	; 0
 924:	a1 f3       	breq	.-24     	; 0x90e <fdevopen+0x16>
 926:	80 e8       	ldi	r24, 0x80	; 128
 928:	83 83       	std	Z+3, r24	; 0x03
 92a:	01 15       	cp	r16, r1
 92c:	11 05       	cpc	r17, r1
 92e:	71 f0       	breq	.+28     	; 0x94c <fdevopen+0x54>
 930:	13 87       	std	Z+11, r17	; 0x0b
 932:	02 87       	std	Z+10, r16	; 0x0a
 934:	81 e8       	ldi	r24, 0x81	; 129
 936:	83 83       	std	Z+3, r24	; 0x03
 938:	80 91 74 02 	lds	r24, 0x0274
 93c:	90 91 75 02 	lds	r25, 0x0275
 940:	89 2b       	or	r24, r25
 942:	21 f4       	brne	.+8      	; 0x94c <fdevopen+0x54>
 944:	f0 93 75 02 	sts	0x0275, r31
 948:	e0 93 74 02 	sts	0x0274, r30
 94c:	20 97       	sbiw	r28, 0x00	; 0
 94e:	c9 f0       	breq	.+50     	; 0x982 <fdevopen+0x8a>
 950:	d1 87       	std	Z+9, r29	; 0x09
 952:	c0 87       	std	Z+8, r28	; 0x08
 954:	83 81       	ldd	r24, Z+3	; 0x03
 956:	82 60       	ori	r24, 0x02	; 2
 958:	83 83       	std	Z+3, r24	; 0x03
 95a:	80 91 76 02 	lds	r24, 0x0276
 95e:	90 91 77 02 	lds	r25, 0x0277
 962:	89 2b       	or	r24, r25
 964:	71 f4       	brne	.+28     	; 0x982 <fdevopen+0x8a>
 966:	f0 93 77 02 	sts	0x0277, r31
 96a:	e0 93 76 02 	sts	0x0276, r30
 96e:	80 91 78 02 	lds	r24, 0x0278
 972:	90 91 79 02 	lds	r25, 0x0279
 976:	89 2b       	or	r24, r25
 978:	21 f4       	brne	.+8      	; 0x982 <fdevopen+0x8a>
 97a:	f0 93 79 02 	sts	0x0279, r31
 97e:	e0 93 78 02 	sts	0x0278, r30
 982:	cf 01       	movw	r24, r30
 984:	df 91       	pop	r29
 986:	cf 91       	pop	r28
 988:	1f 91       	pop	r17
 98a:	0f 91       	pop	r16
 98c:	08 95       	ret

0000098e <printf>:
 98e:	a0 e0       	ldi	r26, 0x00	; 0
 990:	b0 e0       	ldi	r27, 0x00	; 0
 992:	ed ec       	ldi	r30, 0xCD	; 205
 994:	f4 e0       	ldi	r31, 0x04	; 4
 996:	0c 94 b3 07 	jmp	0xf66	; 0xf66 <__prologue_saves__+0x20>
 99a:	fe 01       	movw	r30, r28
 99c:	35 96       	adiw	r30, 0x05	; 5
 99e:	61 91       	ld	r22, Z+
 9a0:	71 91       	ld	r23, Z+
 9a2:	af 01       	movw	r20, r30
 9a4:	80 91 76 02 	lds	r24, 0x0276
 9a8:	90 91 77 02 	lds	r25, 0x0277
 9ac:	0e 94 08 05 	call	0xa10	; 0xa10 <vfprintf>
 9b0:	e2 e0       	ldi	r30, 0x02	; 2
 9b2:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <__epilogue_restores__+0x20>

000009b6 <puts>:
 9b6:	0f 93       	push	r16
 9b8:	1f 93       	push	r17
 9ba:	cf 93       	push	r28
 9bc:	df 93       	push	r29
 9be:	e0 91 76 02 	lds	r30, 0x0276
 9c2:	f0 91 77 02 	lds	r31, 0x0277
 9c6:	23 81       	ldd	r18, Z+3	; 0x03
 9c8:	21 ff       	sbrs	r18, 1
 9ca:	1b c0       	rjmp	.+54     	; 0xa02 <puts+0x4c>
 9cc:	ec 01       	movw	r28, r24
 9ce:	00 e0       	ldi	r16, 0x00	; 0
 9d0:	10 e0       	ldi	r17, 0x00	; 0
 9d2:	89 91       	ld	r24, Y+
 9d4:	60 91 76 02 	lds	r22, 0x0276
 9d8:	70 91 77 02 	lds	r23, 0x0277
 9dc:	db 01       	movw	r26, r22
 9de:	18 96       	adiw	r26, 0x08	; 8
 9e0:	ed 91       	ld	r30, X+
 9e2:	fc 91       	ld	r31, X
 9e4:	19 97       	sbiw	r26, 0x09	; 9
 9e6:	88 23       	and	r24, r24
 9e8:	31 f0       	breq	.+12     	; 0x9f6 <puts+0x40>
 9ea:	09 95       	icall
 9ec:	89 2b       	or	r24, r25
 9ee:	89 f3       	breq	.-30     	; 0x9d2 <puts+0x1c>
 9f0:	0f ef       	ldi	r16, 0xFF	; 255
 9f2:	1f ef       	ldi	r17, 0xFF	; 255
 9f4:	ee cf       	rjmp	.-36     	; 0x9d2 <puts+0x1c>
 9f6:	8a e0       	ldi	r24, 0x0A	; 10
 9f8:	09 95       	icall
 9fa:	89 2b       	or	r24, r25
 9fc:	11 f4       	brne	.+4      	; 0xa02 <puts+0x4c>
 9fe:	c8 01       	movw	r24, r16
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <puts+0x50>
 a02:	8f ef       	ldi	r24, 0xFF	; 255
 a04:	9f ef       	ldi	r25, 0xFF	; 255
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	1f 91       	pop	r17
 a0c:	0f 91       	pop	r16
 a0e:	08 95       	ret

00000a10 <vfprintf>:
 a10:	ac e0       	ldi	r26, 0x0C	; 12
 a12:	b0 e0       	ldi	r27, 0x00	; 0
 a14:	ee e0       	ldi	r30, 0x0E	; 14
 a16:	f5 e0       	ldi	r31, 0x05	; 5
 a18:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__prologue_saves__>
 a1c:	7c 01       	movw	r14, r24
 a1e:	6b 01       	movw	r12, r22
 a20:	8a 01       	movw	r16, r20
 a22:	fc 01       	movw	r30, r24
 a24:	17 82       	std	Z+7, r1	; 0x07
 a26:	16 82       	std	Z+6, r1	; 0x06
 a28:	83 81       	ldd	r24, Z+3	; 0x03
 a2a:	81 ff       	sbrs	r24, 1
 a2c:	bd c1       	rjmp	.+890    	; 0xda8 <vfprintf+0x398>
 a2e:	ce 01       	movw	r24, r28
 a30:	01 96       	adiw	r24, 0x01	; 1
 a32:	4c 01       	movw	r8, r24
 a34:	f7 01       	movw	r30, r14
 a36:	93 81       	ldd	r25, Z+3	; 0x03
 a38:	f6 01       	movw	r30, r12
 a3a:	93 fd       	sbrc	r25, 3
 a3c:	85 91       	lpm	r24, Z+
 a3e:	93 ff       	sbrs	r25, 3
 a40:	81 91       	ld	r24, Z+
 a42:	6f 01       	movw	r12, r30
 a44:	88 23       	and	r24, r24
 a46:	09 f4       	brne	.+2      	; 0xa4a <vfprintf+0x3a>
 a48:	ab c1       	rjmp	.+854    	; 0xda0 <vfprintf+0x390>
 a4a:	85 32       	cpi	r24, 0x25	; 37
 a4c:	39 f4       	brne	.+14     	; 0xa5c <vfprintf+0x4c>
 a4e:	93 fd       	sbrc	r25, 3
 a50:	85 91       	lpm	r24, Z+
 a52:	93 ff       	sbrs	r25, 3
 a54:	81 91       	ld	r24, Z+
 a56:	6f 01       	movw	r12, r30
 a58:	85 32       	cpi	r24, 0x25	; 37
 a5a:	29 f4       	brne	.+10     	; 0xa66 <vfprintf+0x56>
 a5c:	b7 01       	movw	r22, r14
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 a64:	e7 cf       	rjmp	.-50     	; 0xa34 <vfprintf+0x24>
 a66:	51 2c       	mov	r5, r1
 a68:	31 2c       	mov	r3, r1
 a6a:	20 e0       	ldi	r18, 0x00	; 0
 a6c:	20 32       	cpi	r18, 0x20	; 32
 a6e:	a0 f4       	brcc	.+40     	; 0xa98 <vfprintf+0x88>
 a70:	8b 32       	cpi	r24, 0x2B	; 43
 a72:	69 f0       	breq	.+26     	; 0xa8e <vfprintf+0x7e>
 a74:	30 f4       	brcc	.+12     	; 0xa82 <vfprintf+0x72>
 a76:	80 32       	cpi	r24, 0x20	; 32
 a78:	59 f0       	breq	.+22     	; 0xa90 <vfprintf+0x80>
 a7a:	83 32       	cpi	r24, 0x23	; 35
 a7c:	69 f4       	brne	.+26     	; 0xa98 <vfprintf+0x88>
 a7e:	20 61       	ori	r18, 0x10	; 16
 a80:	2c c0       	rjmp	.+88     	; 0xada <vfprintf+0xca>
 a82:	8d 32       	cpi	r24, 0x2D	; 45
 a84:	39 f0       	breq	.+14     	; 0xa94 <vfprintf+0x84>
 a86:	80 33       	cpi	r24, 0x30	; 48
 a88:	39 f4       	brne	.+14     	; 0xa98 <vfprintf+0x88>
 a8a:	21 60       	ori	r18, 0x01	; 1
 a8c:	26 c0       	rjmp	.+76     	; 0xada <vfprintf+0xca>
 a8e:	22 60       	ori	r18, 0x02	; 2
 a90:	24 60       	ori	r18, 0x04	; 4
 a92:	23 c0       	rjmp	.+70     	; 0xada <vfprintf+0xca>
 a94:	28 60       	ori	r18, 0x08	; 8
 a96:	21 c0       	rjmp	.+66     	; 0xada <vfprintf+0xca>
 a98:	27 fd       	sbrc	r18, 7
 a9a:	27 c0       	rjmp	.+78     	; 0xaea <vfprintf+0xda>
 a9c:	30 ed       	ldi	r19, 0xD0	; 208
 a9e:	38 0f       	add	r19, r24
 aa0:	3a 30       	cpi	r19, 0x0A	; 10
 aa2:	78 f4       	brcc	.+30     	; 0xac2 <vfprintf+0xb2>
 aa4:	26 ff       	sbrs	r18, 6
 aa6:	06 c0       	rjmp	.+12     	; 0xab4 <vfprintf+0xa4>
 aa8:	fa e0       	ldi	r31, 0x0A	; 10
 aaa:	5f 9e       	mul	r5, r31
 aac:	30 0d       	add	r19, r0
 aae:	11 24       	eor	r1, r1
 ab0:	53 2e       	mov	r5, r19
 ab2:	13 c0       	rjmp	.+38     	; 0xada <vfprintf+0xca>
 ab4:	8a e0       	ldi	r24, 0x0A	; 10
 ab6:	38 9e       	mul	r3, r24
 ab8:	30 0d       	add	r19, r0
 aba:	11 24       	eor	r1, r1
 abc:	33 2e       	mov	r3, r19
 abe:	20 62       	ori	r18, 0x20	; 32
 ac0:	0c c0       	rjmp	.+24     	; 0xada <vfprintf+0xca>
 ac2:	8e 32       	cpi	r24, 0x2E	; 46
 ac4:	21 f4       	brne	.+8      	; 0xace <vfprintf+0xbe>
 ac6:	26 fd       	sbrc	r18, 6
 ac8:	6b c1       	rjmp	.+726    	; 0xda0 <vfprintf+0x390>
 aca:	20 64       	ori	r18, 0x40	; 64
 acc:	06 c0       	rjmp	.+12     	; 0xada <vfprintf+0xca>
 ace:	8c 36       	cpi	r24, 0x6C	; 108
 ad0:	11 f4       	brne	.+4      	; 0xad6 <vfprintf+0xc6>
 ad2:	20 68       	ori	r18, 0x80	; 128
 ad4:	02 c0       	rjmp	.+4      	; 0xada <vfprintf+0xca>
 ad6:	88 36       	cpi	r24, 0x68	; 104
 ad8:	41 f4       	brne	.+16     	; 0xaea <vfprintf+0xda>
 ada:	f6 01       	movw	r30, r12
 adc:	93 fd       	sbrc	r25, 3
 ade:	85 91       	lpm	r24, Z+
 ae0:	93 ff       	sbrs	r25, 3
 ae2:	81 91       	ld	r24, Z+
 ae4:	6f 01       	movw	r12, r30
 ae6:	81 11       	cpse	r24, r1
 ae8:	c1 cf       	rjmp	.-126    	; 0xa6c <vfprintf+0x5c>
 aea:	98 2f       	mov	r25, r24
 aec:	9f 7d       	andi	r25, 0xDF	; 223
 aee:	95 54       	subi	r25, 0x45	; 69
 af0:	93 30       	cpi	r25, 0x03	; 3
 af2:	28 f4       	brcc	.+10     	; 0xafe <vfprintf+0xee>
 af4:	0c 5f       	subi	r16, 0xFC	; 252
 af6:	1f 4f       	sbci	r17, 0xFF	; 255
 af8:	ff e3       	ldi	r31, 0x3F	; 63
 afa:	f9 83       	std	Y+1, r31	; 0x01
 afc:	0d c0       	rjmp	.+26     	; 0xb18 <vfprintf+0x108>
 afe:	83 36       	cpi	r24, 0x63	; 99
 b00:	31 f0       	breq	.+12     	; 0xb0e <vfprintf+0xfe>
 b02:	83 37       	cpi	r24, 0x73	; 115
 b04:	71 f0       	breq	.+28     	; 0xb22 <vfprintf+0x112>
 b06:	83 35       	cpi	r24, 0x53	; 83
 b08:	09 f0       	breq	.+2      	; 0xb0c <vfprintf+0xfc>
 b0a:	5b c0       	rjmp	.+182    	; 0xbc2 <vfprintf+0x1b2>
 b0c:	22 c0       	rjmp	.+68     	; 0xb52 <vfprintf+0x142>
 b0e:	f8 01       	movw	r30, r16
 b10:	80 81       	ld	r24, Z
 b12:	89 83       	std	Y+1, r24	; 0x01
 b14:	0e 5f       	subi	r16, 0xFE	; 254
 b16:	1f 4f       	sbci	r17, 0xFF	; 255
 b18:	44 24       	eor	r4, r4
 b1a:	43 94       	inc	r4
 b1c:	51 2c       	mov	r5, r1
 b1e:	54 01       	movw	r10, r8
 b20:	15 c0       	rjmp	.+42     	; 0xb4c <vfprintf+0x13c>
 b22:	38 01       	movw	r6, r16
 b24:	f2 e0       	ldi	r31, 0x02	; 2
 b26:	6f 0e       	add	r6, r31
 b28:	71 1c       	adc	r7, r1
 b2a:	f8 01       	movw	r30, r16
 b2c:	a0 80       	ld	r10, Z
 b2e:	b1 80       	ldd	r11, Z+1	; 0x01
 b30:	26 ff       	sbrs	r18, 6
 b32:	03 c0       	rjmp	.+6      	; 0xb3a <vfprintf+0x12a>
 b34:	65 2d       	mov	r22, r5
 b36:	70 e0       	ldi	r23, 0x00	; 0
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <vfprintf+0x12e>
 b3a:	6f ef       	ldi	r22, 0xFF	; 255
 b3c:	7f ef       	ldi	r23, 0xFF	; 255
 b3e:	c5 01       	movw	r24, r10
 b40:	2c 87       	std	Y+12, r18	; 0x0c
 b42:	0e 94 08 07 	call	0xe10	; 0xe10 <strnlen>
 b46:	2c 01       	movw	r4, r24
 b48:	83 01       	movw	r16, r6
 b4a:	2c 85       	ldd	r18, Y+12	; 0x0c
 b4c:	2f 77       	andi	r18, 0x7F	; 127
 b4e:	22 2e       	mov	r2, r18
 b50:	17 c0       	rjmp	.+46     	; 0xb80 <vfprintf+0x170>
 b52:	38 01       	movw	r6, r16
 b54:	f2 e0       	ldi	r31, 0x02	; 2
 b56:	6f 0e       	add	r6, r31
 b58:	71 1c       	adc	r7, r1
 b5a:	f8 01       	movw	r30, r16
 b5c:	a0 80       	ld	r10, Z
 b5e:	b1 80       	ldd	r11, Z+1	; 0x01
 b60:	26 ff       	sbrs	r18, 6
 b62:	03 c0       	rjmp	.+6      	; 0xb6a <vfprintf+0x15a>
 b64:	65 2d       	mov	r22, r5
 b66:	70 e0       	ldi	r23, 0x00	; 0
 b68:	02 c0       	rjmp	.+4      	; 0xb6e <vfprintf+0x15e>
 b6a:	6f ef       	ldi	r22, 0xFF	; 255
 b6c:	7f ef       	ldi	r23, 0xFF	; 255
 b6e:	c5 01       	movw	r24, r10
 b70:	2c 87       	std	Y+12, r18	; 0x0c
 b72:	0e 94 f6 06 	call	0xdec	; 0xdec <strnlen_P>
 b76:	2c 01       	movw	r4, r24
 b78:	2c 85       	ldd	r18, Y+12	; 0x0c
 b7a:	20 68       	ori	r18, 0x80	; 128
 b7c:	22 2e       	mov	r2, r18
 b7e:	83 01       	movw	r16, r6
 b80:	23 fc       	sbrc	r2, 3
 b82:	1b c0       	rjmp	.+54     	; 0xbba <vfprintf+0x1aa>
 b84:	83 2d       	mov	r24, r3
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	48 16       	cp	r4, r24
 b8a:	59 06       	cpc	r5, r25
 b8c:	b0 f4       	brcc	.+44     	; 0xbba <vfprintf+0x1aa>
 b8e:	b7 01       	movw	r22, r14
 b90:	80 e2       	ldi	r24, 0x20	; 32
 b92:	90 e0       	ldi	r25, 0x00	; 0
 b94:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 b98:	3a 94       	dec	r3
 b9a:	f4 cf       	rjmp	.-24     	; 0xb84 <vfprintf+0x174>
 b9c:	f5 01       	movw	r30, r10
 b9e:	27 fc       	sbrc	r2, 7
 ba0:	85 91       	lpm	r24, Z+
 ba2:	27 fe       	sbrs	r2, 7
 ba4:	81 91       	ld	r24, Z+
 ba6:	5f 01       	movw	r10, r30
 ba8:	b7 01       	movw	r22, r14
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 bb0:	31 10       	cpse	r3, r1
 bb2:	3a 94       	dec	r3
 bb4:	f1 e0       	ldi	r31, 0x01	; 1
 bb6:	4f 1a       	sub	r4, r31
 bb8:	51 08       	sbc	r5, r1
 bba:	41 14       	cp	r4, r1
 bbc:	51 04       	cpc	r5, r1
 bbe:	71 f7       	brne	.-36     	; 0xb9c <vfprintf+0x18c>
 bc0:	e5 c0       	rjmp	.+458    	; 0xd8c <vfprintf+0x37c>
 bc2:	84 36       	cpi	r24, 0x64	; 100
 bc4:	11 f0       	breq	.+4      	; 0xbca <vfprintf+0x1ba>
 bc6:	89 36       	cpi	r24, 0x69	; 105
 bc8:	39 f5       	brne	.+78     	; 0xc18 <vfprintf+0x208>
 bca:	f8 01       	movw	r30, r16
 bcc:	27 ff       	sbrs	r18, 7
 bce:	07 c0       	rjmp	.+14     	; 0xbde <vfprintf+0x1ce>
 bd0:	60 81       	ld	r22, Z
 bd2:	71 81       	ldd	r23, Z+1	; 0x01
 bd4:	82 81       	ldd	r24, Z+2	; 0x02
 bd6:	93 81       	ldd	r25, Z+3	; 0x03
 bd8:	0c 5f       	subi	r16, 0xFC	; 252
 bda:	1f 4f       	sbci	r17, 0xFF	; 255
 bdc:	08 c0       	rjmp	.+16     	; 0xbee <vfprintf+0x1de>
 bde:	60 81       	ld	r22, Z
 be0:	71 81       	ldd	r23, Z+1	; 0x01
 be2:	88 27       	eor	r24, r24
 be4:	77 fd       	sbrc	r23, 7
 be6:	80 95       	com	r24
 be8:	98 2f       	mov	r25, r24
 bea:	0e 5f       	subi	r16, 0xFE	; 254
 bec:	1f 4f       	sbci	r17, 0xFF	; 255
 bee:	2f 76       	andi	r18, 0x6F	; 111
 bf0:	b2 2e       	mov	r11, r18
 bf2:	97 ff       	sbrs	r25, 7
 bf4:	09 c0       	rjmp	.+18     	; 0xc08 <vfprintf+0x1f8>
 bf6:	90 95       	com	r25
 bf8:	80 95       	com	r24
 bfa:	70 95       	com	r23
 bfc:	61 95       	neg	r22
 bfe:	7f 4f       	sbci	r23, 0xFF	; 255
 c00:	8f 4f       	sbci	r24, 0xFF	; 255
 c02:	9f 4f       	sbci	r25, 0xFF	; 255
 c04:	20 68       	ori	r18, 0x80	; 128
 c06:	b2 2e       	mov	r11, r18
 c08:	2a e0       	ldi	r18, 0x0A	; 10
 c0a:	30 e0       	ldi	r19, 0x00	; 0
 c0c:	a4 01       	movw	r20, r8
 c0e:	0e 94 45 07 	call	0xe8a	; 0xe8a <__ultoa_invert>
 c12:	a8 2e       	mov	r10, r24
 c14:	a8 18       	sub	r10, r8
 c16:	44 c0       	rjmp	.+136    	; 0xca0 <vfprintf+0x290>
 c18:	85 37       	cpi	r24, 0x75	; 117
 c1a:	29 f4       	brne	.+10     	; 0xc26 <vfprintf+0x216>
 c1c:	2f 7e       	andi	r18, 0xEF	; 239
 c1e:	b2 2e       	mov	r11, r18
 c20:	2a e0       	ldi	r18, 0x0A	; 10
 c22:	30 e0       	ldi	r19, 0x00	; 0
 c24:	25 c0       	rjmp	.+74     	; 0xc70 <vfprintf+0x260>
 c26:	f2 2f       	mov	r31, r18
 c28:	f9 7f       	andi	r31, 0xF9	; 249
 c2a:	bf 2e       	mov	r11, r31
 c2c:	8f 36       	cpi	r24, 0x6F	; 111
 c2e:	c1 f0       	breq	.+48     	; 0xc60 <vfprintf+0x250>
 c30:	18 f4       	brcc	.+6      	; 0xc38 <vfprintf+0x228>
 c32:	88 35       	cpi	r24, 0x58	; 88
 c34:	79 f0       	breq	.+30     	; 0xc54 <vfprintf+0x244>
 c36:	b4 c0       	rjmp	.+360    	; 0xda0 <vfprintf+0x390>
 c38:	80 37       	cpi	r24, 0x70	; 112
 c3a:	19 f0       	breq	.+6      	; 0xc42 <vfprintf+0x232>
 c3c:	88 37       	cpi	r24, 0x78	; 120
 c3e:	21 f0       	breq	.+8      	; 0xc48 <vfprintf+0x238>
 c40:	af c0       	rjmp	.+350    	; 0xda0 <vfprintf+0x390>
 c42:	2f 2f       	mov	r18, r31
 c44:	20 61       	ori	r18, 0x10	; 16
 c46:	b2 2e       	mov	r11, r18
 c48:	b4 fe       	sbrs	r11, 4
 c4a:	0d c0       	rjmp	.+26     	; 0xc66 <vfprintf+0x256>
 c4c:	8b 2d       	mov	r24, r11
 c4e:	84 60       	ori	r24, 0x04	; 4
 c50:	b8 2e       	mov	r11, r24
 c52:	09 c0       	rjmp	.+18     	; 0xc66 <vfprintf+0x256>
 c54:	24 ff       	sbrs	r18, 4
 c56:	0a c0       	rjmp	.+20     	; 0xc6c <vfprintf+0x25c>
 c58:	9f 2f       	mov	r25, r31
 c5a:	96 60       	ori	r25, 0x06	; 6
 c5c:	b9 2e       	mov	r11, r25
 c5e:	06 c0       	rjmp	.+12     	; 0xc6c <vfprintf+0x25c>
 c60:	28 e0       	ldi	r18, 0x08	; 8
 c62:	30 e0       	ldi	r19, 0x00	; 0
 c64:	05 c0       	rjmp	.+10     	; 0xc70 <vfprintf+0x260>
 c66:	20 e1       	ldi	r18, 0x10	; 16
 c68:	30 e0       	ldi	r19, 0x00	; 0
 c6a:	02 c0       	rjmp	.+4      	; 0xc70 <vfprintf+0x260>
 c6c:	20 e1       	ldi	r18, 0x10	; 16
 c6e:	32 e0       	ldi	r19, 0x02	; 2
 c70:	f8 01       	movw	r30, r16
 c72:	b7 fe       	sbrs	r11, 7
 c74:	07 c0       	rjmp	.+14     	; 0xc84 <vfprintf+0x274>
 c76:	60 81       	ld	r22, Z
 c78:	71 81       	ldd	r23, Z+1	; 0x01
 c7a:	82 81       	ldd	r24, Z+2	; 0x02
 c7c:	93 81       	ldd	r25, Z+3	; 0x03
 c7e:	0c 5f       	subi	r16, 0xFC	; 252
 c80:	1f 4f       	sbci	r17, 0xFF	; 255
 c82:	06 c0       	rjmp	.+12     	; 0xc90 <vfprintf+0x280>
 c84:	60 81       	ld	r22, Z
 c86:	71 81       	ldd	r23, Z+1	; 0x01
 c88:	80 e0       	ldi	r24, 0x00	; 0
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	0e 5f       	subi	r16, 0xFE	; 254
 c8e:	1f 4f       	sbci	r17, 0xFF	; 255
 c90:	a4 01       	movw	r20, r8
 c92:	0e 94 45 07 	call	0xe8a	; 0xe8a <__ultoa_invert>
 c96:	a8 2e       	mov	r10, r24
 c98:	a8 18       	sub	r10, r8
 c9a:	fb 2d       	mov	r31, r11
 c9c:	ff 77       	andi	r31, 0x7F	; 127
 c9e:	bf 2e       	mov	r11, r31
 ca0:	b6 fe       	sbrs	r11, 6
 ca2:	0b c0       	rjmp	.+22     	; 0xcba <vfprintf+0x2aa>
 ca4:	2b 2d       	mov	r18, r11
 ca6:	2e 7f       	andi	r18, 0xFE	; 254
 ca8:	a5 14       	cp	r10, r5
 caa:	50 f4       	brcc	.+20     	; 0xcc0 <vfprintf+0x2b0>
 cac:	b4 fe       	sbrs	r11, 4
 cae:	0a c0       	rjmp	.+20     	; 0xcc4 <vfprintf+0x2b4>
 cb0:	b2 fc       	sbrc	r11, 2
 cb2:	08 c0       	rjmp	.+16     	; 0xcc4 <vfprintf+0x2b4>
 cb4:	2b 2d       	mov	r18, r11
 cb6:	2e 7e       	andi	r18, 0xEE	; 238
 cb8:	05 c0       	rjmp	.+10     	; 0xcc4 <vfprintf+0x2b4>
 cba:	7a 2c       	mov	r7, r10
 cbc:	2b 2d       	mov	r18, r11
 cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <vfprintf+0x2b6>
 cc0:	7a 2c       	mov	r7, r10
 cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <vfprintf+0x2b6>
 cc4:	75 2c       	mov	r7, r5
 cc6:	24 ff       	sbrs	r18, 4
 cc8:	0d c0       	rjmp	.+26     	; 0xce4 <vfprintf+0x2d4>
 cca:	fe 01       	movw	r30, r28
 ccc:	ea 0d       	add	r30, r10
 cce:	f1 1d       	adc	r31, r1
 cd0:	80 81       	ld	r24, Z
 cd2:	80 33       	cpi	r24, 0x30	; 48
 cd4:	11 f4       	brne	.+4      	; 0xcda <vfprintf+0x2ca>
 cd6:	29 7e       	andi	r18, 0xE9	; 233
 cd8:	09 c0       	rjmp	.+18     	; 0xcec <vfprintf+0x2dc>
 cda:	22 ff       	sbrs	r18, 2
 cdc:	06 c0       	rjmp	.+12     	; 0xcea <vfprintf+0x2da>
 cde:	73 94       	inc	r7
 ce0:	73 94       	inc	r7
 ce2:	04 c0       	rjmp	.+8      	; 0xcec <vfprintf+0x2dc>
 ce4:	82 2f       	mov	r24, r18
 ce6:	86 78       	andi	r24, 0x86	; 134
 ce8:	09 f0       	breq	.+2      	; 0xcec <vfprintf+0x2dc>
 cea:	73 94       	inc	r7
 cec:	23 fd       	sbrc	r18, 3
 cee:	13 c0       	rjmp	.+38     	; 0xd16 <vfprintf+0x306>
 cf0:	20 ff       	sbrs	r18, 0
 cf2:	06 c0       	rjmp	.+12     	; 0xd00 <vfprintf+0x2f0>
 cf4:	5a 2c       	mov	r5, r10
 cf6:	73 14       	cp	r7, r3
 cf8:	18 f4       	brcc	.+6      	; 0xd00 <vfprintf+0x2f0>
 cfa:	53 0c       	add	r5, r3
 cfc:	57 18       	sub	r5, r7
 cfe:	73 2c       	mov	r7, r3
 d00:	73 14       	cp	r7, r3
 d02:	68 f4       	brcc	.+26     	; 0xd1e <vfprintf+0x30e>
 d04:	b7 01       	movw	r22, r14
 d06:	80 e2       	ldi	r24, 0x20	; 32
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	2c 87       	std	Y+12, r18	; 0x0c
 d0c:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 d10:	73 94       	inc	r7
 d12:	2c 85       	ldd	r18, Y+12	; 0x0c
 d14:	f5 cf       	rjmp	.-22     	; 0xd00 <vfprintf+0x2f0>
 d16:	73 14       	cp	r7, r3
 d18:	10 f4       	brcc	.+4      	; 0xd1e <vfprintf+0x30e>
 d1a:	37 18       	sub	r3, r7
 d1c:	01 c0       	rjmp	.+2      	; 0xd20 <vfprintf+0x310>
 d1e:	31 2c       	mov	r3, r1
 d20:	24 ff       	sbrs	r18, 4
 d22:	12 c0       	rjmp	.+36     	; 0xd48 <vfprintf+0x338>
 d24:	b7 01       	movw	r22, r14
 d26:	80 e3       	ldi	r24, 0x30	; 48
 d28:	90 e0       	ldi	r25, 0x00	; 0
 d2a:	2c 87       	std	Y+12, r18	; 0x0c
 d2c:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 d30:	2c 85       	ldd	r18, Y+12	; 0x0c
 d32:	22 ff       	sbrs	r18, 2
 d34:	17 c0       	rjmp	.+46     	; 0xd64 <vfprintf+0x354>
 d36:	21 ff       	sbrs	r18, 1
 d38:	03 c0       	rjmp	.+6      	; 0xd40 <vfprintf+0x330>
 d3a:	88 e5       	ldi	r24, 0x58	; 88
 d3c:	90 e0       	ldi	r25, 0x00	; 0
 d3e:	02 c0       	rjmp	.+4      	; 0xd44 <vfprintf+0x334>
 d40:	88 e7       	ldi	r24, 0x78	; 120
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	b7 01       	movw	r22, r14
 d46:	0c c0       	rjmp	.+24     	; 0xd60 <vfprintf+0x350>
 d48:	82 2f       	mov	r24, r18
 d4a:	86 78       	andi	r24, 0x86	; 134
 d4c:	59 f0       	breq	.+22     	; 0xd64 <vfprintf+0x354>
 d4e:	21 fd       	sbrc	r18, 1
 d50:	02 c0       	rjmp	.+4      	; 0xd56 <vfprintf+0x346>
 d52:	80 e2       	ldi	r24, 0x20	; 32
 d54:	01 c0       	rjmp	.+2      	; 0xd58 <vfprintf+0x348>
 d56:	8b e2       	ldi	r24, 0x2B	; 43
 d58:	27 fd       	sbrc	r18, 7
 d5a:	8d e2       	ldi	r24, 0x2D	; 45
 d5c:	b7 01       	movw	r22, r14
 d5e:	90 e0       	ldi	r25, 0x00	; 0
 d60:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 d64:	a5 14       	cp	r10, r5
 d66:	38 f4       	brcc	.+14     	; 0xd76 <vfprintf+0x366>
 d68:	b7 01       	movw	r22, r14
 d6a:	80 e3       	ldi	r24, 0x30	; 48
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 d72:	5a 94       	dec	r5
 d74:	f7 cf       	rjmp	.-18     	; 0xd64 <vfprintf+0x354>
 d76:	aa 94       	dec	r10
 d78:	f4 01       	movw	r30, r8
 d7a:	ea 0d       	add	r30, r10
 d7c:	f1 1d       	adc	r31, r1
 d7e:	80 81       	ld	r24, Z
 d80:	b7 01       	movw	r22, r14
 d82:	90 e0       	ldi	r25, 0x00	; 0
 d84:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 d88:	a1 10       	cpse	r10, r1
 d8a:	f5 cf       	rjmp	.-22     	; 0xd76 <vfprintf+0x366>
 d8c:	33 20       	and	r3, r3
 d8e:	09 f4       	brne	.+2      	; 0xd92 <vfprintf+0x382>
 d90:	51 ce       	rjmp	.-862    	; 0xa34 <vfprintf+0x24>
 d92:	b7 01       	movw	r22, r14
 d94:	80 e2       	ldi	r24, 0x20	; 32
 d96:	90 e0       	ldi	r25, 0x00	; 0
 d98:	0e 94 13 07 	call	0xe26	; 0xe26 <fputc>
 d9c:	3a 94       	dec	r3
 d9e:	f6 cf       	rjmp	.-20     	; 0xd8c <vfprintf+0x37c>
 da0:	f7 01       	movw	r30, r14
 da2:	86 81       	ldd	r24, Z+6	; 0x06
 da4:	97 81       	ldd	r25, Z+7	; 0x07
 da6:	02 c0       	rjmp	.+4      	; 0xdac <vfprintf+0x39c>
 da8:	8f ef       	ldi	r24, 0xFF	; 255
 daa:	9f ef       	ldi	r25, 0xFF	; 255
 dac:	2c 96       	adiw	r28, 0x0c	; 12
 dae:	e2 e1       	ldi	r30, 0x12	; 18
 db0:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__epilogue_restores__>

00000db4 <calloc>:
 db4:	0f 93       	push	r16
 db6:	1f 93       	push	r17
 db8:	cf 93       	push	r28
 dba:	df 93       	push	r29
 dbc:	86 9f       	mul	r24, r22
 dbe:	80 01       	movw	r16, r0
 dc0:	87 9f       	mul	r24, r23
 dc2:	10 0d       	add	r17, r0
 dc4:	96 9f       	mul	r25, r22
 dc6:	10 0d       	add	r17, r0
 dc8:	11 24       	eor	r1, r1
 dca:	c8 01       	movw	r24, r16
 dcc:	0e 94 55 03 	call	0x6aa	; 0x6aa <malloc>
 dd0:	ec 01       	movw	r28, r24
 dd2:	00 97       	sbiw	r24, 0x00	; 0
 dd4:	29 f0       	breq	.+10     	; 0xde0 <calloc+0x2c>
 dd6:	a8 01       	movw	r20, r16
 dd8:	60 e0       	ldi	r22, 0x00	; 0
 dda:	70 e0       	ldi	r23, 0x00	; 0
 ddc:	0e 94 01 07 	call	0xe02	; 0xe02 <memset>
 de0:	ce 01       	movw	r24, r28
 de2:	df 91       	pop	r29
 de4:	cf 91       	pop	r28
 de6:	1f 91       	pop	r17
 de8:	0f 91       	pop	r16
 dea:	08 95       	ret

00000dec <strnlen_P>:
 dec:	fc 01       	movw	r30, r24
 dee:	05 90       	lpm	r0, Z+
 df0:	61 50       	subi	r22, 0x01	; 1
 df2:	70 40       	sbci	r23, 0x00	; 0
 df4:	01 10       	cpse	r0, r1
 df6:	d8 f7       	brcc	.-10     	; 0xdee <strnlen_P+0x2>
 df8:	80 95       	com	r24
 dfa:	90 95       	com	r25
 dfc:	8e 0f       	add	r24, r30
 dfe:	9f 1f       	adc	r25, r31
 e00:	08 95       	ret

00000e02 <memset>:
 e02:	dc 01       	movw	r26, r24
 e04:	01 c0       	rjmp	.+2      	; 0xe08 <memset+0x6>
 e06:	6d 93       	st	X+, r22
 e08:	41 50       	subi	r20, 0x01	; 1
 e0a:	50 40       	sbci	r21, 0x00	; 0
 e0c:	e0 f7       	brcc	.-8      	; 0xe06 <memset+0x4>
 e0e:	08 95       	ret

00000e10 <strnlen>:
 e10:	fc 01       	movw	r30, r24
 e12:	61 50       	subi	r22, 0x01	; 1
 e14:	70 40       	sbci	r23, 0x00	; 0
 e16:	01 90       	ld	r0, Z+
 e18:	01 10       	cpse	r0, r1
 e1a:	d8 f7       	brcc	.-10     	; 0xe12 <strnlen+0x2>
 e1c:	80 95       	com	r24
 e1e:	90 95       	com	r25
 e20:	8e 0f       	add	r24, r30
 e22:	9f 1f       	adc	r25, r31
 e24:	08 95       	ret

00000e26 <fputc>:
 e26:	0f 93       	push	r16
 e28:	1f 93       	push	r17
 e2a:	cf 93       	push	r28
 e2c:	df 93       	push	r29
 e2e:	18 2f       	mov	r17, r24
 e30:	09 2f       	mov	r16, r25
 e32:	eb 01       	movw	r28, r22
 e34:	8b 81       	ldd	r24, Y+3	; 0x03
 e36:	81 fd       	sbrc	r24, 1
 e38:	03 c0       	rjmp	.+6      	; 0xe40 <fputc+0x1a>
 e3a:	8f ef       	ldi	r24, 0xFF	; 255
 e3c:	9f ef       	ldi	r25, 0xFF	; 255
 e3e:	20 c0       	rjmp	.+64     	; 0xe80 <fputc+0x5a>
 e40:	82 ff       	sbrs	r24, 2
 e42:	10 c0       	rjmp	.+32     	; 0xe64 <fputc+0x3e>
 e44:	4e 81       	ldd	r20, Y+6	; 0x06
 e46:	5f 81       	ldd	r21, Y+7	; 0x07
 e48:	2c 81       	ldd	r18, Y+4	; 0x04
 e4a:	3d 81       	ldd	r19, Y+5	; 0x05
 e4c:	42 17       	cp	r20, r18
 e4e:	53 07       	cpc	r21, r19
 e50:	7c f4       	brge	.+30     	; 0xe70 <fputc+0x4a>
 e52:	e8 81       	ld	r30, Y
 e54:	f9 81       	ldd	r31, Y+1	; 0x01
 e56:	9f 01       	movw	r18, r30
 e58:	2f 5f       	subi	r18, 0xFF	; 255
 e5a:	3f 4f       	sbci	r19, 0xFF	; 255
 e5c:	39 83       	std	Y+1, r19	; 0x01
 e5e:	28 83       	st	Y, r18
 e60:	10 83       	st	Z, r17
 e62:	06 c0       	rjmp	.+12     	; 0xe70 <fputc+0x4a>
 e64:	e8 85       	ldd	r30, Y+8	; 0x08
 e66:	f9 85       	ldd	r31, Y+9	; 0x09
 e68:	81 2f       	mov	r24, r17
 e6a:	09 95       	icall
 e6c:	89 2b       	or	r24, r25
 e6e:	29 f7       	brne	.-54     	; 0xe3a <fputc+0x14>
 e70:	2e 81       	ldd	r18, Y+6	; 0x06
 e72:	3f 81       	ldd	r19, Y+7	; 0x07
 e74:	2f 5f       	subi	r18, 0xFF	; 255
 e76:	3f 4f       	sbci	r19, 0xFF	; 255
 e78:	3f 83       	std	Y+7, r19	; 0x07
 e7a:	2e 83       	std	Y+6, r18	; 0x06
 e7c:	81 2f       	mov	r24, r17
 e7e:	90 2f       	mov	r25, r16
 e80:	df 91       	pop	r29
 e82:	cf 91       	pop	r28
 e84:	1f 91       	pop	r17
 e86:	0f 91       	pop	r16
 e88:	08 95       	ret

00000e8a <__ultoa_invert>:
 e8a:	fa 01       	movw	r30, r20
 e8c:	aa 27       	eor	r26, r26
 e8e:	28 30       	cpi	r18, 0x08	; 8
 e90:	51 f1       	breq	.+84     	; 0xee6 <__ultoa_invert+0x5c>
 e92:	20 31       	cpi	r18, 0x10	; 16
 e94:	81 f1       	breq	.+96     	; 0xef6 <__ultoa_invert+0x6c>
 e96:	e8 94       	clt
 e98:	6f 93       	push	r22
 e9a:	6e 7f       	andi	r22, 0xFE	; 254
 e9c:	6e 5f       	subi	r22, 0xFE	; 254
 e9e:	7f 4f       	sbci	r23, 0xFF	; 255
 ea0:	8f 4f       	sbci	r24, 0xFF	; 255
 ea2:	9f 4f       	sbci	r25, 0xFF	; 255
 ea4:	af 4f       	sbci	r26, 0xFF	; 255
 ea6:	b1 e0       	ldi	r27, 0x01	; 1
 ea8:	3e d0       	rcall	.+124    	; 0xf26 <__ultoa_invert+0x9c>
 eaa:	b4 e0       	ldi	r27, 0x04	; 4
 eac:	3c d0       	rcall	.+120    	; 0xf26 <__ultoa_invert+0x9c>
 eae:	67 0f       	add	r22, r23
 eb0:	78 1f       	adc	r23, r24
 eb2:	89 1f       	adc	r24, r25
 eb4:	9a 1f       	adc	r25, r26
 eb6:	a1 1d       	adc	r26, r1
 eb8:	68 0f       	add	r22, r24
 eba:	79 1f       	adc	r23, r25
 ebc:	8a 1f       	adc	r24, r26
 ebe:	91 1d       	adc	r25, r1
 ec0:	a1 1d       	adc	r26, r1
 ec2:	6a 0f       	add	r22, r26
 ec4:	71 1d       	adc	r23, r1
 ec6:	81 1d       	adc	r24, r1
 ec8:	91 1d       	adc	r25, r1
 eca:	a1 1d       	adc	r26, r1
 ecc:	20 d0       	rcall	.+64     	; 0xf0e <__ultoa_invert+0x84>
 ece:	09 f4       	brne	.+2      	; 0xed2 <__ultoa_invert+0x48>
 ed0:	68 94       	set
 ed2:	3f 91       	pop	r19
 ed4:	2a e0       	ldi	r18, 0x0A	; 10
 ed6:	26 9f       	mul	r18, r22
 ed8:	11 24       	eor	r1, r1
 eda:	30 19       	sub	r19, r0
 edc:	30 5d       	subi	r19, 0xD0	; 208
 ede:	31 93       	st	Z+, r19
 ee0:	de f6       	brtc	.-74     	; 0xe98 <__ultoa_invert+0xe>
 ee2:	cf 01       	movw	r24, r30
 ee4:	08 95       	ret
 ee6:	46 2f       	mov	r20, r22
 ee8:	47 70       	andi	r20, 0x07	; 7
 eea:	40 5d       	subi	r20, 0xD0	; 208
 eec:	41 93       	st	Z+, r20
 eee:	b3 e0       	ldi	r27, 0x03	; 3
 ef0:	0f d0       	rcall	.+30     	; 0xf10 <__ultoa_invert+0x86>
 ef2:	c9 f7       	brne	.-14     	; 0xee6 <__ultoa_invert+0x5c>
 ef4:	f6 cf       	rjmp	.-20     	; 0xee2 <__ultoa_invert+0x58>
 ef6:	46 2f       	mov	r20, r22
 ef8:	4f 70       	andi	r20, 0x0F	; 15
 efa:	40 5d       	subi	r20, 0xD0	; 208
 efc:	4a 33       	cpi	r20, 0x3A	; 58
 efe:	18 f0       	brcs	.+6      	; 0xf06 <__ultoa_invert+0x7c>
 f00:	49 5d       	subi	r20, 0xD9	; 217
 f02:	31 fd       	sbrc	r19, 1
 f04:	40 52       	subi	r20, 0x20	; 32
 f06:	41 93       	st	Z+, r20
 f08:	02 d0       	rcall	.+4      	; 0xf0e <__ultoa_invert+0x84>
 f0a:	a9 f7       	brne	.-22     	; 0xef6 <__ultoa_invert+0x6c>
 f0c:	ea cf       	rjmp	.-44     	; 0xee2 <__ultoa_invert+0x58>
 f0e:	b4 e0       	ldi	r27, 0x04	; 4
 f10:	a6 95       	lsr	r26
 f12:	97 95       	ror	r25
 f14:	87 95       	ror	r24
 f16:	77 95       	ror	r23
 f18:	67 95       	ror	r22
 f1a:	ba 95       	dec	r27
 f1c:	c9 f7       	brne	.-14     	; 0xf10 <__ultoa_invert+0x86>
 f1e:	00 97       	sbiw	r24, 0x00	; 0
 f20:	61 05       	cpc	r22, r1
 f22:	71 05       	cpc	r23, r1
 f24:	08 95       	ret
 f26:	9b 01       	movw	r18, r22
 f28:	ac 01       	movw	r20, r24
 f2a:	0a 2e       	mov	r0, r26
 f2c:	06 94       	lsr	r0
 f2e:	57 95       	ror	r21
 f30:	47 95       	ror	r20
 f32:	37 95       	ror	r19
 f34:	27 95       	ror	r18
 f36:	ba 95       	dec	r27
 f38:	c9 f7       	brne	.-14     	; 0xf2c <__ultoa_invert+0xa2>
 f3a:	62 0f       	add	r22, r18
 f3c:	73 1f       	adc	r23, r19
 f3e:	84 1f       	adc	r24, r20
 f40:	95 1f       	adc	r25, r21
 f42:	a0 1d       	adc	r26, r0
 f44:	08 95       	ret

00000f46 <__prologue_saves__>:
 f46:	2f 92       	push	r2
 f48:	3f 92       	push	r3
 f4a:	4f 92       	push	r4
 f4c:	5f 92       	push	r5
 f4e:	6f 92       	push	r6
 f50:	7f 92       	push	r7
 f52:	8f 92       	push	r8
 f54:	9f 92       	push	r9
 f56:	af 92       	push	r10
 f58:	bf 92       	push	r11
 f5a:	cf 92       	push	r12
 f5c:	df 92       	push	r13
 f5e:	ef 92       	push	r14
 f60:	ff 92       	push	r15
 f62:	0f 93       	push	r16
 f64:	1f 93       	push	r17
 f66:	cf 93       	push	r28
 f68:	df 93       	push	r29
 f6a:	cd b7       	in	r28, 0x3d	; 61
 f6c:	de b7       	in	r29, 0x3e	; 62
 f6e:	ca 1b       	sub	r28, r26
 f70:	db 0b       	sbc	r29, r27
 f72:	0f b6       	in	r0, 0x3f	; 63
 f74:	f8 94       	cli
 f76:	de bf       	out	0x3e, r29	; 62
 f78:	0f be       	out	0x3f, r0	; 63
 f7a:	cd bf       	out	0x3d, r28	; 61
 f7c:	09 94       	ijmp

00000f7e <__epilogue_restores__>:
 f7e:	2a 88       	ldd	r2, Y+18	; 0x12
 f80:	39 88       	ldd	r3, Y+17	; 0x11
 f82:	48 88       	ldd	r4, Y+16	; 0x10
 f84:	5f 84       	ldd	r5, Y+15	; 0x0f
 f86:	6e 84       	ldd	r6, Y+14	; 0x0e
 f88:	7d 84       	ldd	r7, Y+13	; 0x0d
 f8a:	8c 84       	ldd	r8, Y+12	; 0x0c
 f8c:	9b 84       	ldd	r9, Y+11	; 0x0b
 f8e:	aa 84       	ldd	r10, Y+10	; 0x0a
 f90:	b9 84       	ldd	r11, Y+9	; 0x09
 f92:	c8 84       	ldd	r12, Y+8	; 0x08
 f94:	df 80       	ldd	r13, Y+7	; 0x07
 f96:	ee 80       	ldd	r14, Y+6	; 0x06
 f98:	fd 80       	ldd	r15, Y+5	; 0x05
 f9a:	0c 81       	ldd	r16, Y+4	; 0x04
 f9c:	1b 81       	ldd	r17, Y+3	; 0x03
 f9e:	aa 81       	ldd	r26, Y+2	; 0x02
 fa0:	b9 81       	ldd	r27, Y+1	; 0x01
 fa2:	ce 0f       	add	r28, r30
 fa4:	d1 1d       	adc	r29, r1
 fa6:	0f b6       	in	r0, 0x3f	; 63
 fa8:	f8 94       	cli
 faa:	de bf       	out	0x3e, r29	; 62
 fac:	0f be       	out	0x3f, r0	; 63
 fae:	cd bf       	out	0x3d, r28	; 61
 fb0:	ed 01       	movw	r28, r26
 fb2:	08 95       	ret

00000fb4 <_exit>:
 fb4:	f8 94       	cli

00000fb6 <__stop_program>:
 fb6:	ff cf       	rjmp	.-2      	; 0xfb6 <__stop_program>
