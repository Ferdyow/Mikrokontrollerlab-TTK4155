
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000027c  00800100  00002478  0000250c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  0080037c  0080037c  00002788  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002788  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000428  00000000  00000000  000027e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004caa  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001bf2  00000000  00000000  000078b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001775  00000000  00000000  000094a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b98  00000000  00000000  0000ac20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c98  00000000  00000000  0000b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002a9a  00000000  00000000  0000c450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000360  00000000  00000000  0000eeea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__ctors_end>
       4:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_1>
       8:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
       c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      10:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      14:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      18:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      1c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      20:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      24:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      28:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      2c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      30:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      34:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      38:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      3c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      40:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      44:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      48:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      4c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      50:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      54:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      58:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      5c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      60:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      64:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      68:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      6c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>

00000070 <LETTERS_BIG>:
      70:	30 31 32 33 34 35 36 37 38 39 21 3f 51 57 45 52     0123456789!?QWER
      80:	54 59 55 49 4f 50 29 2b 41 53 44 46 47 48 4a 4b     TYUIOP)+ASDFGHJK
      90:	4c 28 27 2d 5a 58 43 56 42 4e 4d 2c 2e 3b 3a 23     L('-ZXCVBNM,.;:#

000000a0 <LETTERS_SMALL>:
      a0:	30 31 32 33 34 35 36 37 38 39 21 3f 71 77 65 72     0123456789!?qwer
      b0:	74 79 75 69 6f 70 26 2b 61 73 64 66 67 68 6a 6b     tyuiop&+asdfghjk
      c0:	6c 25 24 2d 7a 78 63 76 62 6e 6d 2c 2e 3b 3a 23     l%$-zxcvbnm,.;:#

000000d0 <font8>:
	...
      d8:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
      e8:	14 7f 7f 14 7f 7f 14 00 20 54 54 38 54 54 58 00     ........ TT8TTX.
      f8:	38 64 54 54 4c 38 00 00 20 50 54 55 54 78 40 00     8dTTL8.. PTUTx@.
     108:	60 18 16 11 7f 49 49 00 5c 22 51 49 45 22 1d 00     `....II.\"QIE"..
     118:	60 30 28 25 28 30 60 00 08 2a 3e 1c 1c 3e 2a 08     `0(%(0`..*>..>*.
     128:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     138:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     148:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     158:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     168:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     178:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     188:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     198:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1a8:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1b8:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1c8:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1d8:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     1e8:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     1f8:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     208:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     218:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     228:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     238:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     248:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     258:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     268:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     278:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     288:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     298:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2a8:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2b8:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2c8:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2d8:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     2e8:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     2f8:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     308:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     318:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     328:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     338:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     348:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     358:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     368:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     378:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     388:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     398:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3a8:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3b8:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

000003c8 <__ctors_end>:
     3c8:	11 24       	eor	r1, r1
     3ca:	1f be       	out	0x3f, r1	; 63
     3cc:	cf ef       	ldi	r28, 0xFF	; 255
     3ce:	d4 e0       	ldi	r29, 0x04	; 4
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	cd bf       	out	0x3d, r28	; 61

000003d4 <__do_copy_data>:
     3d4:	13 e0       	ldi	r17, 0x03	; 3
     3d6:	a0 e0       	ldi	r26, 0x00	; 0
     3d8:	b1 e0       	ldi	r27, 0x01	; 1
     3da:	e8 e7       	ldi	r30, 0x78	; 120
     3dc:	f4 e2       	ldi	r31, 0x24	; 36
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <__do_copy_data+0x10>
     3e0:	05 90       	lpm	r0, Z+
     3e2:	0d 92       	st	X+, r0
     3e4:	ac 37       	cpi	r26, 0x7C	; 124
     3e6:	b1 07       	cpc	r27, r17
     3e8:	d9 f7       	brne	.-10     	; 0x3e0 <__do_copy_data+0xc>

000003ea <__do_clear_bss>:
     3ea:	23 e0       	ldi	r18, 0x03	; 3
     3ec:	ac e7       	ldi	r26, 0x7C	; 124
     3ee:	b3 e0       	ldi	r27, 0x03	; 3
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <.do_clear_bss_start>

000003f2 <.do_clear_bss_loop>:
     3f2:	1d 92       	st	X+, r1

000003f4 <.do_clear_bss_start>:
     3f4:	ae 3c       	cpi	r26, 0xCE	; 206
     3f6:	b2 07       	cpc	r27, r18
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <.do_clear_bss_loop>
     3fa:	0e 94 c8 0a 	call	0x1590	; 0x1590 <main>
     3fe:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <_exit>

00000402 <__bad_interrupt>:
     402:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000406 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
     406:	30 98       	cbi	0x06, 0	; 6
     408:	08 95       	ret

0000040a <ADC_read>:
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     40a:	84 30       	cpi	r24, 0x04	; 4
     40c:	40 f4       	brcc	.+16     	; 0x41e <ADC_read+0x14>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
     40e:	8c 5f       	subi	r24, 0xFC	; 252
     410:	80 93 00 14 	sts	0x1400, r24
	
	//wait 'til /INTR is low
	while(test_bit(PINE, PINE0));
     414:	28 99       	sbic	0x05, 0	; 5
     416:	fe cf       	rjmp	.-4      	; 0x414 <ADC_read+0xa>
	//reset interrupt
	inter = 0;
	*/

	//return current value
	return *adc; 
     418:	80 91 00 14 	lds	r24, 0x1400
     41c:	08 95       	ret
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     41e:	80 e0       	ldi	r24, 0x00	; 0
	inter = 0;
	*/

	//return current value
	return *adc; 
     420:	08 95       	ret

00000422 <brightness_init>:
#include "joy.h"
#include "OLED_driver.h"
#include "defines.h"


brightness_init() {
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
	OLED_reset();
     42a:	0e 94 2d 0b 	call	0x165a	; 0x165a <OLED_reset>
	fprintf(OLED, "%s ", "l_slider:");
     42e:	89 e6       	ldi	r24, 0x69	; 105
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	9f 93       	push	r25
     434:	8f 93       	push	r24
     436:	03 e7       	ldi	r16, 0x73	; 115
     438:	11 e0       	ldi	r17, 0x01	; 1
     43a:	1f 93       	push	r17
     43c:	0f 93       	push	r16
     43e:	c6 e0       	ldi	r28, 0x06	; 6
     440:	d1 e0       	ldi	r29, 0x01	; 1
     442:	df 93       	push	r29
     444:	cf 93       	push	r28
     446:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <fprintf>
	OLED_pos(1,0);
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <OLED_pos>
	fprintf(OLED, "%s ", "sets brightness");
     452:	87 e7       	ldi	r24, 0x77	; 119
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	9f 93       	push	r25
     458:	8f 93       	push	r24
     45a:	1f 93       	push	r17
     45c:	0f 93       	push	r16
     45e:	df 93       	push	r29
     460:	cf 93       	push	r28
     462:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <fprintf>
	OLED_pos(2,0);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <OLED_pos>
	fprintf(OLED, "%s ", "l_button: back");
     46e:	87 e8       	ldi	r24, 0x87	; 135
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	9f 93       	push	r25
     474:	8f 93       	push	r24
     476:	1f 93       	push	r17
     478:	0f 93       	push	r16
     47a:	df 93       	push	r29
     47c:	cf 93       	push	r28
     47e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <fprintf>
	for (int line = 4; line < 8; line++) {
		OLED_set_line(line);
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	0e 94 b4 0b 	call	0x1768	; 0x1768 <OLED_set_line>
     488:	85 e0       	ldi	r24, 0x05	; 5
     48a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <OLED_set_line>
     48e:	86 e0       	ldi	r24, 0x06	; 6
     490:	0e 94 b4 0b 	call	0x1768	; 0x1768 <OLED_set_line>
     494:	87 e0       	ldi	r24, 0x07	; 7
     496:	0e 94 b4 0b 	call	0x1768	; 0x1768 <OLED_set_line>
     49a:	8d b7       	in	r24, 0x3d	; 61
     49c:	9e b7       	in	r25, 0x3e	; 62
     49e:	42 96       	adiw	r24, 0x12	; 18
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	9e bf       	out	0x3e, r25	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	8d bf       	out	0x3d, r24	; 61
	}
	
}
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	08 95       	ret

000004b4 <brightness_run>:

brightness_run() {
	brightness_init();
     4b4:	0e 94 11 02 	call	0x422	; 0x422 <brightness_init>
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <brightness_run+0xe>
		slider_position = SLI_getPosition();
     4ba:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <SLI_getPosition>
		//printf("slider_position (left) %d\n", slider_position.left);
		OLED_set_brightness(slider_position.right); 
     4be:	0e 94 8d 0b 	call	0x171a	; 0x171a <OLED_set_brightness>
}

brightness_run() {
	brightness_init();
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <JOY_button_pressed>
     4c8:	89 2b       	or	r24, r25
     4ca:	b9 f3       	breq	.-18     	; 0x4ba <brightness_run+0x6>
		slider_position = SLI_getPosition();
		//printf("slider_position (left) %d\n", slider_position.left);
		OLED_set_brightness(slider_position.right); 
	}
     4cc:	08 95       	ret

000004ce <CAN_int_vect>:
ISR(INT0_vect){
	CAN_int_vect();
}


void CAN_int_vect() {
     4ce:	cf 93       	push	r28
	uint8_t int_flags = MCP2515_read(MCP_CANINTF);
     4d0:	8c e2       	ldi	r24, 0x2C	; 44
     4d2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <MCP2515_read>
     4d6:	c8 2f       	mov	r28, r24
	if(int_flags & MCP_RX0IF){
     4d8:	80 ff       	sbrs	r24, 0
     4da:	0b c0       	rjmp	.+22     	; 0x4f2 <CAN_int_vect+0x24>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     4dc:	40 e0       	ldi	r20, 0x00	; 0
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	8c e2       	ldi	r24, 0x2C	; 44
     4e2:	0e 94 0f 09 	call	0x121e	; 0x121e <MCP2515_bit_modify>
		flag_RX0 = 1;
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	30 e0       	ldi	r19, 0x00	; 0
     4ea:	30 93 7f 03 	sts	0x037F, r19
     4ee:	20 93 7e 03 	sts	0x037E, r18
	}
			
	if(int_flags & MCP_RX1IF){
     4f2:	c1 ff       	sbrs	r28, 1
     4f4:	0b c0       	rjmp	.+22     	; 0x50c <__stack+0xd>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	62 e0       	ldi	r22, 0x02	; 2
     4fa:	8c e2       	ldi	r24, 0x2C	; 44
     4fc:	0e 94 0f 09 	call	0x121e	; 0x121e <MCP2515_bit_modify>
		flag_RX1 = 1;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	90 93 7d 03 	sts	0x037D, r25
     508:	80 93 7c 03 	sts	0x037C, r24
	}
			
	
	
}
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <__vector_1>:

volatile int flag_RX0 = 0;
volatile int flag_RX1 = 0;

//interrupt service routine
ISR(INT0_vect){
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	2f 93       	push	r18
     51c:	3f 93       	push	r19
     51e:	4f 93       	push	r20
     520:	5f 93       	push	r21
     522:	6f 93       	push	r22
     524:	7f 93       	push	r23
     526:	8f 93       	push	r24
     528:	9f 93       	push	r25
     52a:	af 93       	push	r26
     52c:	bf 93       	push	r27
     52e:	ef 93       	push	r30
     530:	ff 93       	push	r31
	CAN_int_vect();
     532:	0e 94 67 02 	call	0x4ce	; 0x4ce <CAN_int_vect>
}
     536:	ff 91       	pop	r31
     538:	ef 91       	pop	r30
     53a:	bf 91       	pop	r27
     53c:	af 91       	pop	r26
     53e:	9f 91       	pop	r25
     540:	8f 91       	pop	r24
     542:	7f 91       	pop	r23
     544:	6f 91       	pop	r22
     546:	5f 91       	pop	r21
     548:	4f 91       	pop	r20
     54a:	3f 91       	pop	r19
     54c:	2f 91       	pop	r18
     54e:	0f 90       	pop	r0
     550:	0f be       	out	0x3f, r0	; 63
     552:	0f 90       	pop	r0
     554:	1f 90       	pop	r1
     556:	18 95       	reti

00000558 <CAN_init>:
//hex to binary is left as an exercise to the reader :)
void CAN_init() {
	
	//enable external interrupt on ATmega162
	//enable interrupt on MCP2515
	MCP2515_init();
     558:	0e 94 31 09 	call	0x1262	; 0x1262 <MCP2515_init>
	
	//enable rollover: message will rollover to RX1 if RX0 is full
	//also sets filter for RXB0 to only accept all transmission
	MCP2515_bit_modify(MCP_RXB0CTRL, 0x64, 0xFF);  //0b 0010 0100
     55c:	4f ef       	ldi	r20, 0xFF	; 255
     55e:	64 e6       	ldi	r22, 0x64	; 100
     560:	80 e6       	ldi	r24, 0x60	; 96
     562:	0e 94 0f 09 	call	0x121e	; 0x121e <MCP2515_bit_modify>

	
	//set filter for RXB1 to accept all transmission
	MCP2515_bit_modify(MCP_RXB1CTRL, 0x60, 0xFF);
     566:	4f ef       	ldi	r20, 0xFF	; 255
     568:	60 e6       	ldi	r22, 0x60	; 96
     56a:	80 e7       	ldi	r24, 0x70	; 112
     56c:	0e 94 0f 09 	call	0x121e	; 0x121e <MCP2515_bit_modify>
	

	//CANINTE contains the interrupt enable bits for each individual interrupt
	//CANINTF cointains the interrupt flags for each interrupt source. this should be cleared by a bit_modify
	
	MCP2515_bit_modify(MCP_CANINTE,0x03, 0x03);
     570:	43 e0       	ldi	r20, 0x03	; 3
     572:	63 e0       	ldi	r22, 0x03	; 3
     574:	8b e2       	ldi	r24, 0x2B	; 43
     576:	0e 94 0f 09 	call	0x121e	; 0x121e <MCP2515_bit_modify>
	//interrupts for RX1, RX0 enabled
	
	//set loopback mode: 0x40
	//later use normal mode 0x00
	MCP2515_bit_modify(MCP_CANCTRL,0xE0, 0x00);
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	60 ee       	ldi	r22, 0xE0	; 224
     57e:	8f e0       	ldi	r24, 0x0F	; 15
     580:	0e 94 0f 09 	call	0x121e	; 0x121e <MCP2515_bit_modify>
     584:	08 95       	ret

00000586 <CAN_message_send>:
	
	

}

void CAN_message_send(can_message* msg) {
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	ec 01       	movw	r28, r24
	//transmit is done using the TX registers, have to check which transmit_buffer_register we are writing from 
	uint8_t buffer_numb = 0; //Not sure how this logic is done yet


	//transmit the correct ID
	uint8_t id_high = msg->id / 8;
     590:	08 81       	ld	r16, Y
     592:	19 81       	ldd	r17, Y+1	; 0x01
     594:	b8 01       	movw	r22, r16
     596:	76 95       	lsr	r23
     598:	67 95       	ror	r22
     59a:	76 95       	lsr	r23
     59c:	67 95       	ror	r22
     59e:	76 95       	lsr	r23
     5a0:	67 95       	ror	r22
	uint8_t id_low = msg->id % 8;

	MCP2515_write(MCP_TXB0SIDH + BUFFER_LENGTH * buffer_numb, id_high);
     5a2:	81 e3       	ldi	r24, 0x31	; 49
     5a4:	0e 94 ef 08 	call	0x11de	; 0x11de <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL + BUFFER_LENGTH * buffer_numb, (id_low << 5));
     5a8:	60 2f       	mov	r22, r16
     5aa:	62 95       	swap	r22
     5ac:	66 0f       	add	r22, r22
     5ae:	60 7e       	andi	r22, 0xE0	; 224
     5b0:	82 e3       	ldi	r24, 0x32	; 50
     5b2:	0e 94 ef 08 	call	0x11de	; 0x11de <MCP2515_write>
	//resten av TXB0SIDL er 0 siden vi har standard identifier

	//transmit the data length
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);
     5b6:	6a 81       	ldd	r22, Y+2	; 0x02
     5b8:	85 e3       	ldi	r24, 0x35	; 53
     5ba:	0e 94 ef 08 	call	0x11de	; 0x11de <MCP2515_write>

	//transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	88 23       	and	r24, r24
     5c2:	69 f0       	breq	.+26     	; 0x5de <CAN_message_send+0x58>
     5c4:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
     5c6:	fe 01       	movw	r30, r28
     5c8:	e1 0f       	add	r30, r17
     5ca:	f1 1d       	adc	r31, r1
     5cc:	63 81       	ldd	r22, Z+3	; 0x03
     5ce:	86 e3       	ldi	r24, 0x36	; 54
     5d0:	81 0f       	add	r24, r17
     5d2:	0e 94 ef 08 	call	0x11de	; 0x11de <MCP2515_write>

	//transmit the data length
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);

	//transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     5d6:	1f 5f       	subi	r17, 0xFF	; 255
     5d8:	8a 81       	ldd	r24, Y+2	; 0x02
     5da:	18 17       	cp	r17, r24
     5dc:	a0 f3       	brcs	.-24     	; 0x5c6 <CAN_message_send+0x40>
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
	}
	
	uint8_t buffer_states = (uint8_t)(1 << buffer_numb);
	MCP2515_request_to_send(buffer_states);
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	0e 94 03 09 	call	0x1206	; 0x1206 <MCP2515_request_to_send>
	
	
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret

000005ee <CAN_transmit_complete>:
	
}


bool CAN_transmit_complete(int transmit_buffer_numb) {
	const int address = MCP_TXB0CTRL + BUFFER_LENGTH * transmit_buffer_numb;
     5ee:	03 96       	adiw	r24, 0x03	; 3
	
	//printf("CANSTAT: 0x%02x\n", MCP2515_read(MCP_CANSTAT));
	
	//printf("TXB0CTRL: 0x%02x\n", MCP2515_read(address));
	
	if(MCP2515_read(address) & MCP_TXREQ){
     5f0:	82 95       	swap	r24
     5f2:	80 7f       	andi	r24, 0xF0	; 240
     5f4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <MCP2515_read>
     5f8:	83 fb       	bst	r24, 3
     5fa:	88 27       	eor	r24, r24
     5fc:	80 f9       	bld	r24, 0
		return false;
	}
	
	return true; 
}
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	89 27       	eor	r24, r25
     602:	08 95       	ret

00000604 <send_control_input>:
	while(!JOY_button_pressed(LEFT_BUTTON)){
		send_control_input();
	}
}

void send_control_input(void) {
     604:	ff 92       	push	r15
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	2b 97       	sbiw	r28, 0x0b	; 11
     614:	0f b6       	in	r0, 0x3f	; 63
     616:	f8 94       	cli
     618:	de bf       	out	0x3e, r29	; 62
     61a:	0f be       	out	0x3f, r0	; 63
     61c:	cd bf       	out	0x3d, r28	; 61
	can_message control_input;
	control_input.id = 0;
     61e:	1a 82       	std	Y+2, r1	; 0x02
     620:	19 82       	std	Y+1, r1	; 0x01
	control_input.length = 5;
     622:	85 e0       	ldi	r24, 0x05	; 5
     624:	8b 83       	std	Y+3, r24	; 0x03
	
	JOY_position_t joy_position = JOY_getPosition();
     626:	0e 94 84 04 	call	0x908	; 0x908 <JOY_getPosition>
	control_input.data[JOYSTICK_X] = joy_position.x;
     62a:	6c 83       	std	Y+4, r22	; 0x04
	control_input.data[JOYSTICK_Y] = joy_position.y;
     62c:	8d 83       	std	Y+5, r24	; 0x05
	
	SLI_position_t sli_position = SLI_getPosition();
     62e:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <SLI_getPosition>
	control_input.data[SLIDER_LEFT] = sli_position.left;
     632:	6e 83       	std	Y+6, r22	; 0x06
	control_input.data[SLIDER_RIGHT] = sli_position.right;
     634:	8f 83       	std	Y+7, r24	; 0x07
	
	int joy_button = JOY_button_pressed(JOY_BUTTON) << JOY_BUTTON;
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <JOY_button_pressed>
     63c:	8c 01       	movw	r16, r24
	int left_button = JOY_button_pressed(LEFT_BUTTON) << LEFT_BUTTON;
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <JOY_button_pressed>
     644:	f8 2e       	mov	r15, r24
	int right_button = JOY_button_pressed(RIGHT_BUTTON) << RIGHT_BUTTON;
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <JOY_button_pressed>
	
	SLI_position_t sli_position = SLI_getPosition();
	control_input.data[SLIDER_LEFT] = sli_position.left;
	control_input.data[SLIDER_RIGHT] = sli_position.right;
	
	int joy_button = JOY_button_pressed(JOY_BUTTON) << JOY_BUTTON;
     64c:	00 0f       	add	r16, r16
     64e:	11 1f       	adc	r17, r17
     650:	00 0f       	add	r16, r16
     652:	11 1f       	adc	r17, r17
	int left_button = JOY_button_pressed(LEFT_BUTTON) << LEFT_BUTTON;
	int right_button = JOY_button_pressed(RIGHT_BUTTON) << RIGHT_BUTTON;
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
	control_input.data[BUTTONS] = joy_button | left_button | right_button;
     658:	08 2b       	or	r16, r24
     65a:	f0 2a       	or	r15, r16
     65c:	f8 86       	std	Y+8, r15	; 0x08
	
	CAN_message_send(&control_input);
     65e:	ce 01       	movw	r24, r28
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	0e 94 c3 02 	call	0x586	; 0x586 <CAN_message_send>
	while(!CAN_transmit_complete(TB0))
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <CAN_transmit_complete>
     66e:	88 23       	and	r24, r24
     670:	d1 f3       	breq	.-12     	; 0x666 <send_control_input+0x62>
	;
     672:	2b 96       	adiw	r28, 0x0b	; 11
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	08 95       	ret

0000068a <game_play>:
#include "joy.h"
#include "defines.h"

#include <util/delay.h>

void game_play() {
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
	OLED_reset();
     692:	0e 94 2d 0b 	call	0x165a	; 0x165a <OLED_reset>
	fprintf(OLED, "%s \n", "lButton: quit");
     696:	86 e9       	ldi	r24, 0x96	; 150
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
     69e:	04 ea       	ldi	r16, 0xA4	; 164
     6a0:	11 e0       	ldi	r17, 0x01	; 1
     6a2:	1f 93       	push	r17
     6a4:	0f 93       	push	r16
     6a6:	c4 e1       	ldi	r28, 0x14	; 20
     6a8:	d1 e0       	ldi	r29, 0x01	; 1
     6aa:	df 93       	push	r29
     6ac:	cf 93       	push	r28
     6ae:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <fprintf>
	fprintf(OLED, "%s \n", "jButton: shoot");
     6b2:	89 ea       	ldi	r24, 0xA9	; 169
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	9f 93       	push	r25
     6b8:	8f 93       	push	r24
     6ba:	1f 93       	push	r17
     6bc:	0f 93       	push	r16
     6be:	df 93       	push	r29
     6c0:	cf 93       	push	r28
     6c2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <fprintf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6c6:	8f e3       	ldi	r24, 0x3F	; 63
     6c8:	9d e0       	ldi	r25, 0x0D	; 13
     6ca:	23 e0       	ldi	r18, 0x03	; 3
     6cc:	81 50       	subi	r24, 0x01	; 1
     6ce:	90 40       	sbci	r25, 0x00	; 0
     6d0:	20 40       	sbci	r18, 0x00	; 0
     6d2:	e1 f7       	brne	.-8      	; 0x6cc <game_play+0x42>
     6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <game_play+0x4c>
     6d6:	00 00       	nop
     6d8:	8d b7       	in	r24, 0x3d	; 61
     6da:	9e b7       	in	r25, 0x3e	; 62
     6dc:	0c 96       	adiw	r24, 0x0c	; 12
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	9e bf       	out	0x3e, r25	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	8d bf       	out	0x3d, r24	; 61
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <game_play+0x64>
	//fprintf(OLED, "%s ", "r_slider: angle\n");
	//fprintf(OLED, "%s ", "x-axis: move\n");
	_delay_ms(1000);
	while(!JOY_button_pressed(LEFT_BUTTON)){
		send_control_input();
     6ea:	0e 94 02 03 	call	0x604	; 0x604 <send_control_input>
	fprintf(OLED, "%s \n", "lButton: quit");
	fprintf(OLED, "%s \n", "jButton: shoot");
	//fprintf(OLED, "%s ", "r_slider: angle\n");
	//fprintf(OLED, "%s ", "x-axis: move\n");
	_delay_ms(1000);
	while(!JOY_button_pressed(LEFT_BUTTON)){
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <JOY_button_pressed>
     6f4:	89 2b       	or	r24, r25
     6f6:	c9 f3       	breq	.-14     	; 0x6ea <game_play+0x60>
		send_control_input();
	}
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	08 95       	ret

00000702 <JOY_print_calibration_status>:
	clear_bit(DDRB,PB2);
	clear_bit(SFIOR, PUD);
	JOY_calibrate(calibraton_mode);
}

void JOY_print_calibration_status() {
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
	OLED_reset();
     706:	0e 94 2d 0b 	call	0x165a	; 0x165a <OLED_reset>
	fprintf(OLED, "%s\n", "Calibrate JOY");
     70a:	88 eb       	ldi	r24, 0xB8	; 184
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	87 e0       	ldi	r24, 0x07	; 7
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	c2 e2       	ldi	r28, 0x22	; 34
     71c:	d1 e0       	ldi	r29, 0x01	; 1
     71e:	df 93       	push	r29
     720:	cf 93       	push	r28
     722:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <fprintf>
	fprintf(OLED, "x_max: %6d\n", max.x);
     726:	80 91 90 03 	lds	r24, 0x0390
     72a:	1f 92       	push	r1
     72c:	8f 93       	push	r24
     72e:	86 ec       	ldi	r24, 0xC6	; 198
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	9f 93       	push	r25
     734:	8f 93       	push	r24
     736:	df 93       	push	r29
     738:	cf 93       	push	r28
     73a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <fprintf>
	fprintf(OLED, "x_min: %6d\n", min.x);
     73e:	80 91 94 03 	lds	r24, 0x0394
     742:	1f 92       	push	r1
     744:	8f 93       	push	r24
     746:	82 ed       	ldi	r24, 0xD2	; 210
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	9f 93       	push	r25
     74c:	8f 93       	push	r24
     74e:	df 93       	push	r29
     750:	cf 93       	push	r28
     752:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <fprintf>
	fprintf(OLED, "y_max: %6d\n", max.y);
     756:	80 91 91 03 	lds	r24, 0x0391
     75a:	1f 92       	push	r1
     75c:	8f 93       	push	r24
     75e:	8e ed       	ldi	r24, 0xDE	; 222
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	9f 93       	push	r25
     764:	8f 93       	push	r24
     766:	df 93       	push	r29
     768:	cf 93       	push	r28
     76a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <fprintf>
	fprintf(OLED, "y_min: %6d\n", min.y);
     76e:	80 91 95 03 	lds	r24, 0x0395
     772:	1f 92       	push	r1
     774:	8f 93       	push	r24
     776:	8a ee       	ldi	r24, 0xEA	; 234
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	9f 93       	push	r25
     77c:	8f 93       	push	r24
     77e:	df 93       	push	r29
     780:	cf 93       	push	r28
     782:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <fprintf>
	fprintf(OLED, "\n%s\n", "Click when done");
     786:	86 ef       	ldi	r24, 0xF6	; 246
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	9f 93       	push	r25
     78c:	8f 93       	push	r24
     78e:	86 e0       	ldi	r24, 0x06	; 6
     790:	92 e0       	ldi	r25, 0x02	; 2
     792:	9f 93       	push	r25
     794:	8f 93       	push	r24
     796:	df 93       	push	r29
     798:	cf 93       	push	r28
     79a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <fprintf>
     79e:	8d b7       	in	r24, 0x3d	; 61
     7a0:	9e b7       	in	r25, 0x3e	; 62
     7a2:	84 96       	adiw	r24, 0x24	; 36
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	9e bf       	out	0x3e, r25	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	8d bf       	out	0x3d, r24	; 61
}
     7ae:	df 91       	pop	r29
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <JOY_calibrate>:

void JOY_calibrate(int calibraton_mode){
     7b4:	bf 92       	push	r11
     7b6:	cf 92       	push	r12
     7b8:	df 92       	push	r13
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
	max.x = JOY_DEFAULT_MAX_X;
     7c6:	2f ef       	ldi	r18, 0xFF	; 255
     7c8:	20 93 90 03 	sts	0x0390, r18
	max.y = JOY_DEFAULT_MAX_Y;
     7cc:	20 93 91 03 	sts	0x0391, r18
	min.x = JOY_DEFAULT_MIN_X;
     7d0:	10 92 94 03 	sts	0x0394, r1
	min.y = JOY_DEFAULT_MIN_Y;
     7d4:	10 92 95 03 	sts	0x0395, r1
	
	if (calibraton_mode == CALIBRATION_MANUAL) {
     7d8:	01 97       	sbiw	r24, 0x01	; 1
     7da:	e9 f5       	brne	.+122    	; 0x856 <JOY_calibrate+0xa2>
		// Loop while joystick button is not pressed.
		while(test_bit(PINB,PINB2)) {
     7dc:	b2 9b       	sbis	0x16, 2	; 22
     7de:	3b c0       	rjmp	.+118    	; 0x856 <JOY_calibrate+0xa2>
			// Read sensor values
			uint8_t x = ADC_read(X_COORD);
			uint8_t y = ADC_read(Y_COORD);
			
			// Find max and min values for x and y:
			max.x = MAX(x, max.x);
     7e0:	0f 2e       	mov	r0, r31
     7e2:	f0 e9       	ldi	r31, 0x90	; 144
     7e4:	cf 2e       	mov	r12, r31
     7e6:	f3 e0       	ldi	r31, 0x03	; 3
     7e8:	df 2e       	mov	r13, r31
     7ea:	f0 2d       	mov	r31, r0
			max.y = MAX(y, max.y);
     7ec:	0f 2e       	mov	r0, r31
     7ee:	f1 e9       	ldi	r31, 0x91	; 145
     7f0:	ef 2e       	mov	r14, r31
     7f2:	f3 e0       	ldi	r31, 0x03	; 3
     7f4:	ff 2e       	mov	r15, r31
     7f6:	f0 2d       	mov	r31, r0
			min.x = MIN(x, min.x);
     7f8:	04 e9       	ldi	r16, 0x94	; 148
     7fa:	13 e0       	ldi	r17, 0x03	; 3
			min.y = MIN(y, min.y);
     7fc:	c5 e9       	ldi	r28, 0x95	; 149
     7fe:	d3 e0       	ldi	r29, 0x03	; 3
	
	if (calibraton_mode == CALIBRATION_MANUAL) {
		// Loop while joystick button is not pressed.
		while(test_bit(PINB,PINB2)) {
			// Read sensor values
			uint8_t x = ADC_read(X_COORD);
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     806:	b8 2e       	mov	r11, r24
			uint8_t y = ADC_read(Y_COORD);
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
			
			// Find max and min values for x and y:
			max.x = MAX(x, max.x);
     80e:	f6 01       	movw	r30, r12
     810:	20 81       	ld	r18, Z
     812:	9b 2d       	mov	r25, r11
     814:	b2 16       	cp	r11, r18
     816:	08 f4       	brcc	.+2      	; 0x81a <JOY_calibrate+0x66>
     818:	92 2f       	mov	r25, r18
     81a:	f6 01       	movw	r30, r12
     81c:	90 83       	st	Z, r25
			max.y = MAX(y, max.y);
     81e:	f7 01       	movw	r30, r14
     820:	20 81       	ld	r18, Z
     822:	98 2f       	mov	r25, r24
     824:	82 17       	cp	r24, r18
     826:	08 f4       	brcc	.+2      	; 0x82a <JOY_calibrate+0x76>
     828:	92 2f       	mov	r25, r18
     82a:	f7 01       	movw	r30, r14
     82c:	90 83       	st	Z, r25
			min.x = MIN(x, min.x);
     82e:	f8 01       	movw	r30, r16
     830:	90 81       	ld	r25, Z
     832:	9b 15       	cp	r25, r11
     834:	08 f4       	brcc	.+2      	; 0x838 <JOY_calibrate+0x84>
     836:	b9 2e       	mov	r11, r25
     838:	f8 01       	movw	r30, r16
     83a:	b0 82       	st	Z, r11
			min.y = MIN(y, min.y);
     83c:	98 81       	ld	r25, Y
     83e:	98 17       	cp	r25, r24
     840:	08 f4       	brcc	.+2      	; 0x844 <JOY_calibrate+0x90>
     842:	89 2f       	mov	r24, r25
     844:	88 83       	st	Y, r24
			
			JOY_print_calibration_status();
     846:	0e 94 81 03 	call	0x702	; 0x702 <JOY_print_calibration_status>
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 ef       	ldi	r25, 0xF0	; 240
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <JOY_calibrate+0x9a>
	min.x = JOY_DEFAULT_MIN_X;
	min.y = JOY_DEFAULT_MIN_Y;
	
	if (calibraton_mode == CALIBRATION_MANUAL) {
		// Loop while joystick button is not pressed.
		while(test_bit(PINB,PINB2)) {
     852:	b2 99       	sbic	0x16, 2	; 22
     854:	d5 cf       	rjmp	.-86     	; 0x800 <JOY_calibrate+0x4c>
			_delay_ms(50);
		}
	}
	
	// Find distance from middle to edges (radius)
	rad.x = (max.x - min.x) / 2;
     856:	e0 91 90 03 	lds	r30, 0x0390
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	60 91 94 03 	lds	r22, 0x0394
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	9f 01       	movw	r18, r30
     864:	26 1b       	sub	r18, r22
     866:	37 0b       	sbc	r19, r23
     868:	c9 01       	movw	r24, r18
     86a:	99 23       	and	r25, r25
     86c:	0c f4       	brge	.+2      	; 0x870 <JOY_calibrate+0xbc>
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	95 95       	asr	r25
     872:	87 95       	ror	r24
     874:	80 93 92 03 	sts	0x0392, r24
	rad.y = (max.y - min.y) / 2;
     878:	40 91 91 03 	lds	r20, 0x0391
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	20 91 95 03 	lds	r18, 0x0395
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	da 01       	movw	r26, r20
     886:	a2 1b       	sub	r26, r18
     888:	b3 0b       	sbc	r27, r19
     88a:	cd 01       	movw	r24, r26
     88c:	0a f4       	brpl	.+2      	; 0x890 <JOY_calibrate+0xdc>
     88e:	01 96       	adiw	r24, 0x01	; 1
     890:	95 95       	asr	r25
     892:	87 95       	ror	r24
     894:	80 93 93 03 	sts	0x0393, r24
		
	// Find mid point using edges.
	mid.x = (max.x + min.x) / 2;
     898:	6e 0f       	add	r22, r30
     89a:	7f 1f       	adc	r23, r31
     89c:	75 95       	asr	r23
     89e:	67 95       	ror	r22
     8a0:	60 93 96 03 	sts	0x0396, r22
	mid.y = (max.y + min.y) / 2;
     8a4:	24 0f       	add	r18, r20
     8a6:	35 1f       	adc	r19, r21
     8a8:	35 95       	asr	r19
     8aa:	27 95       	ror	r18
     8ac:	20 93 97 03 	sts	0x0397, r18
}
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	cf 90       	pop	r12
     8c0:	bf 90       	pop	r11
     8c2:	08 95       	ret

000008c4 <JOY_init>:
	uint8_t y;
} max, min, rad, mid;

void JOY_init(int calibraton_mode){
	//set pull-up resistors on PORTB for JOY_button
	set_bit(PORTB,PB2);
     8c4:	c2 9a       	sbi	0x18, 2	; 24
	clear_bit(DDRB,PB2);
     8c6:	ba 98       	cbi	0x17, 2	; 23
	clear_bit(SFIOR, PUD);
     8c8:	20 b7       	in	r18, 0x30	; 48
     8ca:	2b 7f       	andi	r18, 0xFB	; 251
     8cc:	20 bf       	out	0x30, r18	; 48
	JOY_calibrate(calibraton_mode);
     8ce:	0e 94 da 03 	call	0x7b4	; 0x7b4 <JOY_calibrate>
     8d2:	08 95       	ret

000008d4 <JOY_button_pressed>:
	mid.x = (max.x + min.x) / 2;
	mid.y = (max.y + min.y) / 2;
}

int JOY_button_pressed(button b) {
	switch (b) {
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	41 f0       	breq	.+16     	; 0x8e8 <JOY_button_pressed+0x14>
     8d8:	18 f0       	brcs	.+6      	; 0x8e0 <JOY_button_pressed+0xc>
     8da:	82 30       	cpi	r24, 0x02	; 2
     8dc:	51 f0       	breq	.+20     	; 0x8f2 <JOY_button_pressed+0x1e>
     8de:	11 c0       	rjmp	.+34     	; 0x902 <JOY_button_pressed+0x2e>
	case LEFT_BUTTON:
		if (test_bit(PINB, PINB0)) return 1;
     8e0:	86 b3       	in	r24, 0x16	; 22
     8e2:	81 70       	andi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	08 95       	ret
		break;
	case RIGHT_BUTTON:
		if (test_bit(PINB, PINB1)) return 1;
     8e8:	86 b3       	in	r24, 0x16	; 22
}

int JOY_button_pressed(button b) {
	switch (b) {
	case LEFT_BUTTON:
		if (test_bit(PINB, PINB0)) return 1;
     8ea:	86 95       	lsr	r24
     8ec:	81 70       	andi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	08 95       	ret
		break;
	case RIGHT_BUTTON:
		if (test_bit(PINB, PINB1)) return 1;
		break;
	case JOY_BUTTON:
		if (!test_bit(PINB, PINB2)) return 1;
     8f2:	86 b3       	in	r24, 0x16	; 22
     8f4:	86 95       	lsr	r24
     8f6:	86 95       	lsr	r24
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	89 27       	eor	r24, r25
}

int JOY_button_pressed(button b) {
	switch (b) {
	case LEFT_BUTTON:
		if (test_bit(PINB, PINB0)) return 1;
     8fc:	81 70       	andi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	08 95       	ret
		break;
	case JOY_BUTTON:
		if (!test_bit(PINB, PINB2)) return 1;
		break;
	}
	return 0;
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
}
     906:	08 95       	ret

00000908 <JOY_getPosition>:

JOY_position_t JOY_getPosition() {
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
	JOY_position_t JOY_position;
	JOY_position.x = (100 * (ADC_read(X_COORD) - mid.x)) / rad.x;
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     916:	28 2f       	mov	r18, r24
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	80 91 96 03 	lds	r24, 0x0396
     91e:	28 1b       	sub	r18, r24
     920:	31 09       	sbc	r19, r1
     922:	c4 e6       	ldi	r28, 0x64	; 100
     924:	c2 9f       	mul	r28, r18
     926:	c0 01       	movw	r24, r0
     928:	c3 9f       	mul	r28, r19
     92a:	90 0d       	add	r25, r0
     92c:	11 24       	eor	r1, r1
     92e:	60 91 92 03 	lds	r22, 0x0392
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__divmodhi4>
     938:	06 2f       	mov	r16, r22
     93a:	17 2f       	mov	r17, r23
	JOY_position.y = (100 * (ADC_read(Y_COORD) - mid.y)) / rad.y;
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     942:	28 2f       	mov	r18, r24
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	80 91 97 03 	lds	r24, 0x0397
     94a:	28 1b       	sub	r18, r24
     94c:	31 09       	sbc	r19, r1
     94e:	c2 9f       	mul	r28, r18
     950:	c0 01       	movw	r24, r0
     952:	c3 9f       	mul	r28, r19
     954:	90 0d       	add	r25, r0
     956:	11 24       	eor	r1, r1
     958:	60 91 93 03 	lds	r22, 0x0393
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__divmodhi4>
     962:	d6 2f       	mov	r29, r22
     964:	c7 2f       	mov	r28, r23
	printf("x: %d, y: %d\n", JOY_position.x, JOY_position.y);
     966:	7f 93       	push	r23
     968:	6f 93       	push	r22
     96a:	1f 93       	push	r17
     96c:	0f 93       	push	r16
     96e:	8b e0       	ldi	r24, 0x0B	; 11
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	9f 93       	push	r25
     974:	8f 93       	push	r24
     976:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <printf>
	return JOY_position;
     97a:	60 2f       	mov	r22, r16
     97c:	71 2f       	mov	r23, r17
     97e:	8d 2f       	mov	r24, r29
     980:	9c 2f       	mov	r25, r28
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
}
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	08 95       	ret

00000998 <JOY_getDirection>:

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
     998:	0e 94 84 04 	call	0x908	; 0x908 <JOY_getPosition>
     99c:	fb 01       	movw	r30, r22
     99e:	ac 01       	movw	r20, r24
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     9a0:	9b 01       	movw	r18, r22
     9a2:	2c 5f       	subi	r18, 0xFC	; 252
     9a4:	3f 4f       	sbci	r19, 0xFF	; 255
     9a6:	29 30       	cpi	r18, 0x09	; 9
     9a8:	31 05       	cpc	r19, r1
     9aa:	30 f4       	brcc	.+12     	; 0x9b8 <JOY_getDirection+0x20>
     9ac:	9c 01       	movw	r18, r24
     9ae:	2c 5f       	subi	r18, 0xFC	; 252
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	29 30       	cpi	r18, 0x09	; 9
     9b4:	31 05       	cpc	r19, r1
     9b6:	e0 f0       	brcs	.+56     	; 0x9f0 <JOY_getDirection+0x58>

	// The x-coordinate is dominating
	else if (abs(position.x) > abs(position.y)) {
     9b8:	db 01       	movw	r26, r22
     9ba:	ff 23       	and	r31, r31
     9bc:	24 f4       	brge	.+8      	; 0x9c6 <JOY_getDirection+0x2e>
     9be:	aa 27       	eor	r26, r26
     9c0:	bb 27       	eor	r27, r27
     9c2:	a6 1b       	sub	r26, r22
     9c4:	b7 0b       	sbc	r27, r23
     9c6:	9c 01       	movw	r18, r24
     9c8:	55 23       	and	r21, r21
     9ca:	24 f4       	brge	.+8      	; 0x9d4 <JOY_getDirection+0x3c>
     9cc:	22 27       	eor	r18, r18
     9ce:	33 27       	eor	r19, r19
     9d0:	28 1b       	sub	r18, r24
     9d2:	39 0b       	sbc	r19, r25
     9d4:	2a 17       	cp	r18, r26
     9d6:	3b 07       	cpc	r19, r27
     9d8:	34 f4       	brge	.+12     	; 0x9e6 <JOY_getDirection+0x4e>
		// Positive x => RIGHT
		if (position.x > 0) return RIGHT;
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	1e 16       	cp	r1, r30
     9de:	1f 06       	cpc	r1, r31
     9e0:	54 f0       	brlt	.+20     	; 0x9f6 <JOY_getDirection+0x5e>
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	08 95       	ret
		else return LEFT;

	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
     9e6:	14 16       	cp	r1, r20
     9e8:	15 06       	cpc	r1, r21
     9ea:	24 f4       	brge	.+8      	; 0x9f4 <JOY_getDirection+0x5c>
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	08 95       	ret

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     9f0:	84 e0       	ldi	r24, 0x04	; 4
     9f2:	08 95       	ret
	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
		// Negative y => DOWN
		else return DOWN;
     9f4:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     9f6:	08 95       	ret

000009f8 <SLI_getPosition>:

SLI_position_t SLI_getPosition() {
     9f8:	cf 93       	push	r28
	SLI_position_t pos;
	pos.left = ADC_read(LEFT_CH);
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     a00:	c8 2f       	mov	r28, r24
	pos.right = ADC_read(RIGHT_CH);
     a02:	83 e0       	ldi	r24, 0x03	; 3
     a04:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     a08:	28 2f       	mov	r18, r24
	return pos;
     a0a:	6c 2f       	mov	r22, r28
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	82 2f       	mov	r24, r18
     a10:	90 e0       	ldi	r25, 0x00	; 0
}
     a12:	cf 91       	pop	r28
     a14:	08 95       	ret

00000a16 <append_char>:


/* PRINT STRING FUNCTION   */

void append_char(char c) {
	int len = strlen(written_string);
     a16:	e8 e9       	ldi	r30, 0x98	; 152
     a18:	f3 e0       	ldi	r31, 0x03	; 3
     a1a:	01 90       	ld	r0, Z+
     a1c:	00 20       	and	r0, r0
     a1e:	e9 f7       	brne	.-6      	; 0xa1a <append_char+0x4>
     a20:	31 97       	sbiw	r30, 0x01	; 1
     a22:	e8 59       	subi	r30, 0x98	; 152
     a24:	f3 40       	sbci	r31, 0x03	; 3
	if (len < MAX_STRING_SIZE){
     a26:	e8 32       	cpi	r30, 0x28	; 40
     a28:	f1 05       	cpc	r31, r1
     a2a:	6c f4       	brge	.+26     	; 0xa46 <append_char+0x30>
		written_string[len] = c;
     a2c:	e8 56       	subi	r30, 0x68	; 104
     a2e:	fc 4f       	sbci	r31, 0xFC	; 252
     a30:	80 83       	st	Z, r24
		written_string[len + 1] = '\0';
     a32:	11 82       	std	Z+1, r1	; 0x01
		string_position++;
     a34:	80 91 8a 03 	lds	r24, 0x038A
     a38:	90 91 8b 03 	lds	r25, 0x038B
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	90 93 8b 03 	sts	0x038B, r25
     a42:	80 93 8a 03 	sts	0x038A, r24
     a46:	08 95       	ret

00000a48 <remove_last_char>:
	
	keyboard_goto(pos.y, pos.x);
}

void remove_last_char() {
	if (strlen(written_string) > 0){
     a48:	80 91 98 03 	lds	r24, 0x0398
     a4c:	88 23       	and	r24, r24
     a4e:	39 f0       	breq	.+14     	; 0xa5e <remove_last_char+0x16>
		written_string[strlen(written_string) - 1] = '\0';
     a50:	e8 e9       	ldi	r30, 0x98	; 152
     a52:	f3 e0       	ldi	r31, 0x03	; 3
     a54:	01 90       	ld	r0, Z+
     a56:	00 20       	and	r0, r0
     a58:	e9 f7       	brne	.-6      	; 0xa54 <remove_last_char+0xc>
     a5a:	32 97       	sbiw	r30, 0x02	; 2
     a5c:	10 82       	st	Z, r1
     a5e:	08 95       	ret

00000a60 <keyboard_goto>:

}

// 5 lines x 16 columns
void keyboard_goto(int line, int column) {
	OLED_pos(line + 3, (column+2) * 8);
     a60:	6e 5f       	subi	r22, 0xFE	; 254
     a62:	7f 4f       	sbci	r23, 0xFF	; 255
     a64:	66 0f       	add	r22, r22
     a66:	66 0f       	add	r22, r22
     a68:	66 0f       	add	r22, r22
     a6a:	8d 5f       	subi	r24, 0xFD	; 253
     a6c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <OLED_pos>
     a70:	08 95       	ret

00000a72 <print_string>:
		string_position++;
	}

}

void print_string() {
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
	OLED_reset_cursor();
     a76:	0e 94 10 0b 	call	0x1620	; 0x1620 <OLED_reset_cursor>
	//char print_string[16];
	//memcpy(print_string, written_string[strlen(written_string)-string_position], 16);
	//fprintf(OLED, "%s", print_string);
	fprintf(OLED, "%s", written_string);
     a7a:	62 e3       	ldi	r22, 0x32	; 50
     a7c:	71 e0       	ldi	r23, 0x01	; 1
     a7e:	88 e9       	ldi	r24, 0x98	; 152
     a80:	93 e0       	ldi	r25, 0x03	; 3
     a82:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <fputs>
	for (int i = strlen(written_string); i < 16; i++){
     a86:	c8 e9       	ldi	r28, 0x98	; 152
     a88:	d3 e0       	ldi	r29, 0x03	; 3
     a8a:	09 90       	ld	r0, Y+
     a8c:	00 20       	and	r0, r0
     a8e:	e9 f7       	brne	.-6      	; 0xa8a <print_string+0x18>
     a90:	21 97       	sbiw	r28, 0x01	; 1
     a92:	c8 59       	subi	r28, 0x98	; 152
     a94:	d3 40       	sbci	r29, 0x03	; 3
     a96:	c0 31       	cpi	r28, 0x10	; 16
     a98:	d1 05       	cpc	r29, r1
     a9a:	54 f4       	brge	.+20     	; 0xab0 <print_string+0x3e>
		fprintf(OLED, " ");
     a9c:	62 e3       	ldi	r22, 0x32	; 50
     a9e:	71 e0       	ldi	r23, 0x01	; 1
     aa0:	80 e2       	ldi	r24, 0x20	; 32
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <fputc>
	OLED_reset_cursor();
	//char print_string[16];
	//memcpy(print_string, written_string[strlen(written_string)-string_position], 16);
	//fprintf(OLED, "%s", print_string);
	fprintf(OLED, "%s", written_string);
	for (int i = strlen(written_string); i < 16; i++){
     aa8:	21 96       	adiw	r28, 0x01	; 1
     aaa:	c0 31       	cpi	r28, 0x10	; 16
     aac:	d1 05       	cpc	r29, r1
     aae:	b1 f7       	brne	.-20     	; 0xa9c <print_string+0x2a>
		fprintf(OLED, " ");
	}
	
	//set block at current pointer position
	int pointer = MIN(strlen(written_string)%16,15)*8;
     ab0:	e8 e9       	ldi	r30, 0x98	; 152
     ab2:	f3 e0       	ldi	r31, 0x03	; 3
     ab4:	01 90       	ld	r0, Z+
     ab6:	00 20       	and	r0, r0
     ab8:	e9 f7       	brne	.-6      	; 0xab4 <print_string+0x42>
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	e8 59       	subi	r30, 0x98	; 152
     abe:	f3 40       	sbci	r31, 0x03	; 3
     ac0:	ef 70       	andi	r30, 0x0F	; 15
     ac2:	ff 27       	eor	r31, r31
     ac4:	bf 01       	movw	r22, r30
     ac6:	66 0f       	add	r22, r22
     ac8:	77 1f       	adc	r23, r23
     aca:	66 0f       	add	r22, r22
     acc:	77 1f       	adc	r23, r23
     ace:	66 0f       	add	r22, r22
     ad0:	77 1f       	adc	r23, r23
	OLED_pos(0, pointer);
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <OLED_pos>
	print_fill(8);
     ad8:	88 e0       	ldi	r24, 0x08	; 8
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <print_fill>
	
	blinking_pos_on = 0;
     ae0:	10 92 89 03 	sts	0x0389, r1
     ae4:	10 92 88 03 	sts	0x0388, r1
	
	keyboard_goto(pos.y, pos.x);
     ae8:	60 91 84 03 	lds	r22, 0x0384
     aec:	70 91 85 03 	lds	r23, 0x0385
     af0:	80 91 86 03 	lds	r24, 0x0386
     af4:	90 91 87 03 	lds	r25, 0x0387
     af8:	0e 94 30 05 	call	0xa60	; 0xa60 <keyboard_goto>
}
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	08 95       	ret

00000b02 <keyboard_goto_line>:
void keyboard_goto(int line, int column) {
	OLED_pos(line + 3, (column+2) * 8);
}

void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	0e 94 30 05 	call	0xa60	; 0xa60 <keyboard_goto>
     b0a:	08 95       	ret

00000b0c <keyboard_init>:
}

/* FUNCTION IMPLEMENTATIONS			*/
/************************************/

void keyboard_init() {
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
	OLED_reset();
     b18:	0e 94 2d 0b 	call	0x165a	; 0x165a <OLED_reset>
	print_string();
     b1c:	0e 94 39 05 	call	0xa72	; 0xa72 <print_string>
	letters = (char*)LETTERS_SMALL;
     b20:	80 ea       	ldi	r24, 0xA0	; 160
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	90 93 31 01 	sts	0x0131, r25
     b28:	80 93 30 01 	sts	0x0130, r24
	keyboard_goto_line(0);
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 81 05 	call	0xb02	; 0xb02 <keyboard_goto_line>
	pos.x = 0;
     b34:	10 92 85 03 	sts	0x0385, r1
     b38:	10 92 84 03 	sts	0x0384, r1
	pos.y = 0;
     b3c:	10 92 87 03 	sts	0x0387, r1
     b40:	10 92 86 03 	sts	0x0386, r1
	strcpy(written_string, "\0");
     b44:	10 92 98 03 	sts	0x0398, r1

	//The first letter is selected by default
	print_char(pgm_read_byte(&letters[0]), INVERSE);
     b48:	e0 91 30 01 	lds	r30, 0x0130
     b4c:	f0 91 31 01 	lds	r31, 0x0131
     b50:	84 91       	lpm	r24, Z
     b52:	61 e0       	ldi	r22, 0x01	; 1
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <print_char>

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     b5a:	c1 e0       	ldi	r28, 0x01	; 1
     b5c:	d0 e0       	ldi	r29, 0x00	; 0
		if (i % LINE_LENGTH == 0) {
     b5e:	0c e0       	ldi	r16, 0x0C	; 12
     b60:	10 e0       	ldi	r17, 0x00	; 0
			keyboard_goto_line(++pos.y);
     b62:	0f 2e       	mov	r0, r31
     b64:	f6 e8       	ldi	r31, 0x86	; 134
     b66:	ef 2e       	mov	r14, r31
     b68:	f3 e0       	ldi	r31, 0x03	; 3
     b6a:	ff 2e       	mov	r15, r31
     b6c:	f0 2d       	mov	r31, r0
     b6e:	0e c0       	rjmp	.+28     	; 0xb8c <keyboard_init+0x80>
	//The first letter is selected by default
	print_char(pgm_read_byte(&letters[0]), INVERSE);

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0) {
     b70:	ce 01       	movw	r24, r28
     b72:	b8 01       	movw	r22, r16
     b74:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__divmodhi4>
     b78:	89 2b       	or	r24, r25
     b7a:	41 f4       	brne	.+16     	; 0xb8c <keyboard_init+0x80>
			keyboard_goto_line(++pos.y);
     b7c:	f7 01       	movw	r30, r14
     b7e:	80 81       	ld	r24, Z
     b80:	91 81       	ldd	r25, Z+1	; 0x01
     b82:	01 96       	adiw	r24, 0x01	; 1
     b84:	91 83       	std	Z+1, r25	; 0x01
     b86:	80 83       	st	Z, r24
     b88:	0e 94 81 05 	call	0xb02	; 0xb02 <keyboard_goto_line>
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
     b8c:	e0 91 30 01 	lds	r30, 0x0130
     b90:	f0 91 31 01 	lds	r31, 0x0131
     b94:	ec 0f       	add	r30, r28
     b96:	fd 1f       	adc	r31, r29
     b98:	84 91       	lpm	r24, Z
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <print_char>

	//The first letter is selected by default
	print_char(pgm_read_byte(&letters[0]), INVERSE);

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     ba2:	21 96       	adiw	r28, 0x01	; 1
     ba4:	c0 33       	cpi	r28, 0x30	; 48
     ba6:	d1 05       	cpc	r29, r1
     ba8:	19 f7       	brne	.-58     	; 0xb70 <keyboard_init+0x64>
			keyboard_goto_line(++pos.y);
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
	}
	//print the tool buttons
	keyboard_goto_line(4);
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 81 05 	call	0xb02	; 0xb02 <keyboard_goto_line>
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <print_options_bar>

	//reset y-position
	pos.y = 0;
     bc6:	10 92 87 03 	sts	0x0387, r1
     bca:	10 92 86 03 	sts	0x0386, r1
     bce:	ff ef       	ldi	r31, 0xFF	; 255
     bd0:	2f e7       	ldi	r18, 0x7F	; 127
     bd2:	87 e0       	ldi	r24, 0x07	; 7
     bd4:	f1 50       	subi	r31, 0x01	; 1
     bd6:	20 40       	sbci	r18, 0x00	; 0
     bd8:	80 40       	sbci	r24, 0x00	; 0
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <keyboard_init+0xc8>
     bdc:	00 c0       	rjmp	.+0      	; 0xbde <keyboard_init+0xd2>
     bde:	00 00       	nop

	//ignore button pressed right away
	_delay_ms(500);

}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	08 95       	ret

00000bee <keyboard_print>:


void keyboard_print() {
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
	keyboard_goto_line(0);
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 81 05 	call	0xb02	; 0xb02 <keyboard_goto_line>
	pos.y = 0;
     c02:	10 92 87 03 	sts	0x0387, r1
     c06:	10 92 86 03 	sts	0x0386, r1
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
     c0a:	c0 e0       	ldi	r28, 0x00	; 0
     c0c:	d0 e0       	ldi	r29, 0x00	; 0
		if (i % LINE_LENGTH == 0 && i != 0) {
     c0e:	0c e0       	ldi	r16, 0x0C	; 12
     c10:	10 e0       	ldi	r17, 0x00	; 0
			keyboard_goto_line(++pos.y);
     c12:	0f 2e       	mov	r0, r31
     c14:	f6 e8       	ldi	r31, 0x86	; 134
     c16:	ef 2e       	mov	r14, r31
     c18:	f3 e0       	ldi	r31, 0x03	; 3
     c1a:	ff 2e       	mov	r15, r31
     c1c:	f0 2d       	mov	r31, r0
     c1e:	10 c0       	rjmp	.+32     	; 0xc40 <keyboard_print+0x52>
void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
     c20:	ce 01       	movw	r24, r28
     c22:	b8 01       	movw	r22, r16
     c24:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <__divmodhi4>
     c28:	89 2b       	or	r24, r25
     c2a:	51 f4       	brne	.+20     	; 0xc40 <keyboard_print+0x52>
     c2c:	20 97       	sbiw	r28, 0x00	; 0
     c2e:	41 f0       	breq	.+16     	; 0xc40 <keyboard_print+0x52>
			keyboard_goto_line(++pos.y);
     c30:	f7 01       	movw	r30, r14
     c32:	80 81       	ld	r24, Z
     c34:	91 81       	ldd	r25, Z+1	; 0x01
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	91 83       	std	Z+1, r25	; 0x01
     c3a:	80 83       	st	Z, r24
     c3c:	0e 94 81 05 	call	0xb02	; 0xb02 <keyboard_goto_line>
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
     c40:	e0 91 30 01 	lds	r30, 0x0130
     c44:	f0 91 31 01 	lds	r31, 0x0131
     c48:	ec 0f       	add	r30, r28
     c4a:	fd 1f       	adc	r31, r29
     c4c:	84 91       	lpm	r24, Z
     c4e:	60 e0       	ldi	r22, 0x00	; 0
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <print_char>

void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
     c56:	21 96       	adiw	r28, 0x01	; 1
     c58:	c0 33       	cpi	r28, 0x30	; 48
     c5a:	d1 05       	cpc	r29, r1
     c5c:	09 f7       	brne	.-62     	; 0xc20 <keyboard_print+0x32>
			keyboard_goto_line(++pos.y);
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
	}
	//print the tool buttons
	keyboard_goto_line(4);
     c5e:	84 e0       	ldi	r24, 0x04	; 4
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 81 05 	call	0xb02	; 0xb02 <keyboard_goto_line>
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <print_options_bar>


}
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	08 95       	ret

00000c88 <toggle_shift>:
void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
	}

void toggle_shift() {
	if (letters == LETTERS_SMALL) {
     c88:	80 91 30 01 	lds	r24, 0x0130
     c8c:	90 91 31 01 	lds	r25, 0x0131
     c90:	80 5a       	subi	r24, 0xA0	; 160
     c92:	90 40       	sbci	r25, 0x00	; 0
     c94:	39 f4       	brne	.+14     	; 0xca4 <toggle_shift+0x1c>
		letters = (char*)LETTERS_BIG;
     c96:	80 e7       	ldi	r24, 0x70	; 112
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	90 93 31 01 	sts	0x0131, r25
     c9e:	80 93 30 01 	sts	0x0130, r24
     ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <toggle_shift+0x28>
	}
	else {
		letters = (char*)LETTERS_SMALL;
     ca4:	80 ea       	ldi	r24, 0xA0	; 160
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	90 93 31 01 	sts	0x0131, r25
     cac:	80 93 30 01 	sts	0x0130, r24
	}

	keyboard_print();
     cb0:	0e 94 f7 05 	call	0xbee	; 0xbee <keyboard_print>
	keyboard_goto_line(4);
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 81 05 	call	0xb02	; 0xb02 <keyboard_goto_line>
	print_shift(INVERSE);
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 0e 0c 	call	0x181c	; 0x181c <print_shift>
		
	pos.y = 4;
     cc4:	84 e0       	ldi	r24, 0x04	; 4
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	90 93 87 03 	sts	0x0387, r25
     ccc:	80 93 86 03 	sts	0x0386, r24
	pos.x = 0;
     cd0:	10 92 85 03 	sts	0x0385, r1
     cd4:	10 92 84 03 	sts	0x0384, r1
     cd8:	08 95       	ret

00000cda <keyboard_register_position_change>:
}

void keyboard_register_position_change(JOY_direction_t direction) {
	if (direction == NEUTRAL);
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	09 f4       	brne	.+2      	; 0xce0 <keyboard_register_position_change+0x6>
     cde:	8a c0       	rjmp	.+276    	; 0xdf4 <keyboard_register_position_change+0x11a>
	else if (direction == DOWN && pos.y < 4) {
     ce0:	83 30       	cpi	r24, 0x03	; 3
     ce2:	91 f4       	brne	.+36     	; 0xd08 <keyboard_register_position_change+0x2e>
     ce4:	20 91 86 03 	lds	r18, 0x0386
     ce8:	30 91 87 03 	lds	r19, 0x0387
     cec:	24 30       	cpi	r18, 0x04	; 4
     cee:	31 05       	cpc	r19, r1
     cf0:	bc f5       	brge	.+110    	; 0xd60 <keyboard_register_position_change+0x86>
		prev_pos.y = pos.y++;
     cf2:	c9 01       	movw	r24, r18
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	90 93 87 03 	sts	0x0387, r25
     cfa:	80 93 86 03 	sts	0x0386, r24
     cfe:	30 93 83 03 	sts	0x0383, r19
     d02:	20 93 82 03 	sts	0x0382, r18
     d06:	08 95       	ret
	}
	else if (direction == UP && pos.y > 0) {
     d08:	82 30       	cpi	r24, 0x02	; 2
     d0a:	a1 f4       	brne	.+40     	; 0xd34 <keyboard_register_position_change+0x5a>
     d0c:	80 91 86 03 	lds	r24, 0x0386
     d10:	90 91 87 03 	lds	r25, 0x0387
     d14:	18 16       	cp	r1, r24
     d16:	19 06       	cpc	r1, r25
     d18:	0c f0       	brlt	.+2      	; 0xd1c <keyboard_register_position_change+0x42>
     d1a:	6c c0       	rjmp	.+216    	; 0xdf4 <keyboard_register_position_change+0x11a>
		prev_pos.y = pos.y--;
     d1c:	9c 01       	movw	r18, r24
     d1e:	21 50       	subi	r18, 0x01	; 1
     d20:	31 09       	sbc	r19, r1
     d22:	30 93 87 03 	sts	0x0387, r19
     d26:	20 93 86 03 	sts	0x0386, r18
     d2a:	90 93 83 03 	sts	0x0383, r25
     d2e:	80 93 82 03 	sts	0x0382, r24
     d32:	08 95       	ret
	}
	else if (direction == LEFT && pos.x > 0) {
     d34:	81 11       	cpse	r24, r1
     d36:	14 c0       	rjmp	.+40     	; 0xd60 <keyboard_register_position_change+0x86>
     d38:	80 91 84 03 	lds	r24, 0x0384
     d3c:	90 91 85 03 	lds	r25, 0x0385
     d40:	18 16       	cp	r1, r24
     d42:	19 06       	cpc	r1, r25
     d44:	0c f0       	brlt	.+2      	; 0xd48 <keyboard_register_position_change+0x6e>
     d46:	56 c0       	rjmp	.+172    	; 0xdf4 <keyboard_register_position_change+0x11a>
		prev_pos.x = pos.x--;
     d48:	9c 01       	movw	r18, r24
     d4a:	21 50       	subi	r18, 0x01	; 1
     d4c:	31 09       	sbc	r19, r1
     d4e:	30 93 85 03 	sts	0x0385, r19
     d52:	20 93 84 03 	sts	0x0384, r18
     d56:	90 93 81 03 	sts	0x0381, r25
     d5a:	80 93 80 03 	sts	0x0380, r24
     d5e:	08 95       	ret
	}
	else if (direction == RIGHT && pos.x < LINE_LENGTH - 1) {
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	09 f0       	breq	.+2      	; 0xd66 <keyboard_register_position_change+0x8c>
     d64:	47 c0       	rjmp	.+142    	; 0xdf4 <keyboard_register_position_change+0x11a>
     d66:	80 91 84 03 	lds	r24, 0x0384
     d6a:	90 91 85 03 	lds	r25, 0x0385
     d6e:	8b 30       	cpi	r24, 0x0B	; 11
     d70:	91 05       	cpc	r25, r1
     d72:	0c f0       	brlt	.+2      	; 0xd76 <keyboard_register_position_change+0x9c>
     d74:	3f c0       	rjmp	.+126    	; 0xdf4 <keyboard_register_position_change+0x11a>

		if (pos.y == 4) {
     d76:	20 91 86 03 	lds	r18, 0x0386
     d7a:	30 91 87 03 	lds	r19, 0x0387
     d7e:	24 30       	cpi	r18, 0x04	; 4
     d80:	31 05       	cpc	r19, r1
     d82:	69 f5       	brne	.+90     	; 0xdde <keyboard_register_position_change+0x104>
			if (pos.x < 2) {
     d84:	82 30       	cpi	r24, 0x02	; 2
     d86:	91 05       	cpc	r25, r1
     d88:	5c f4       	brge	.+22     	; 0xda0 <keyboard_register_position_change+0xc6>
				prev_pos.x = 0;
     d8a:	10 92 81 03 	sts	0x0381, r1
     d8e:	10 92 80 03 	sts	0x0380, r1
				pos.x = 2;
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	90 93 85 03 	sts	0x0385, r25
     d9a:	80 93 84 03 	sts	0x0384, r24
     d9e:	08 95       	ret
			}
			else if (pos.x < 8) {
     da0:	88 30       	cpi	r24, 0x08	; 8
     da2:	91 05       	cpc	r25, r1
     da4:	6c f4       	brge	.+26     	; 0xdc0 <keyboard_register_position_change+0xe6>
				prev_pos.x = 2;
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	90 93 81 03 	sts	0x0381, r25
     dae:	80 93 80 03 	sts	0x0380, r24
				pos.x = 8;
     db2:	88 e0       	ldi	r24, 0x08	; 8
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	90 93 85 03 	sts	0x0385, r25
     dba:	80 93 84 03 	sts	0x0384, r24
     dbe:	08 95       	ret
			}
			else if (pos.x < 10) {
     dc0:	0a 97       	sbiw	r24, 0x0a	; 10
     dc2:	c4 f4       	brge	.+48     	; 0xdf4 <keyboard_register_position_change+0x11a>
				prev_pos.x = 8;
     dc4:	88 e0       	ldi	r24, 0x08	; 8
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	90 93 81 03 	sts	0x0381, r25
     dcc:	80 93 80 03 	sts	0x0380, r24
				pos.x = 10;
     dd0:	8a e0       	ldi	r24, 0x0A	; 10
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	90 93 85 03 	sts	0x0385, r25
     dd8:	80 93 84 03 	sts	0x0384, r24
     ddc:	08 95       	ret
			}
		}
		else {
			prev_pos.x = pos.x++;
     dde:	9c 01       	movw	r18, r24
     de0:	2f 5f       	subi	r18, 0xFF	; 255
     de2:	3f 4f       	sbci	r19, 0xFF	; 255
     de4:	30 93 85 03 	sts	0x0385, r19
     de8:	20 93 84 03 	sts	0x0384, r18
     dec:	90 93 81 03 	sts	0x0381, r25
     df0:	80 93 80 03 	sts	0x0380, r24
     df4:	08 95       	ret

00000df6 <keyboard_unselect_prev>:
		}
	}
}


void keyboard_unselect_prev() {
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
	//old item is a letter
	if (prev_pos.y < 4) {
     dfa:	80 91 82 03 	lds	r24, 0x0382
     dfe:	90 91 83 03 	lds	r25, 0x0383
     e02:	84 30       	cpi	r24, 0x04	; 4
     e04:	91 05       	cpc	r25, r1
     e06:	24 f5       	brge	.+72     	; 0xe50 <keyboard_unselect_prev+0x5a>
		keyboard_goto(prev_pos.y, prev_pos.x);
     e08:	c0 e8       	ldi	r28, 0x80	; 128
     e0a:	d3 e0       	ldi	r29, 0x03	; 3
     e0c:	68 81       	ld	r22, Y
     e0e:	79 81       	ldd	r23, Y+1	; 0x01
     e10:	0e 94 30 05 	call	0xa60	; 0xa60 <keyboard_goto>
		print_char(pgm_read_byte(&letters[prev_pos.y * LINE_LENGTH + prev_pos.x]), NORMAL);
     e14:	80 91 82 03 	lds	r24, 0x0382
     e18:	90 91 83 03 	lds	r25, 0x0383
     e1c:	fc 01       	movw	r30, r24
     e1e:	ee 0f       	add	r30, r30
     e20:	ff 1f       	adc	r31, r31
     e22:	8e 0f       	add	r24, r30
     e24:	9f 1f       	adc	r25, r31
     e26:	fc 01       	movw	r30, r24
     e28:	ee 0f       	add	r30, r30
     e2a:	ff 1f       	adc	r31, r31
     e2c:	ee 0f       	add	r30, r30
     e2e:	ff 1f       	adc	r31, r31
     e30:	28 81       	ld	r18, Y
     e32:	39 81       	ldd	r19, Y+1	; 0x01
     e34:	e2 0f       	add	r30, r18
     e36:	f3 1f       	adc	r31, r19
     e38:	80 91 30 01 	lds	r24, 0x0130
     e3c:	90 91 31 01 	lds	r25, 0x0131
     e40:	e8 0f       	add	r30, r24
     e42:	f9 1f       	adc	r31, r25
     e44:	84 91       	lpm	r24, Z
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	70 e0       	ldi	r23, 0x00	; 0
     e4a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <print_char>
     e4e:	46 c0       	rjmp	.+140    	; 0xedc <keyboard_unselect_prev+0xe6>
	}

	//old item is in toolbar
	else {
		if (prev_pos.x < 2) {
     e50:	20 91 80 03 	lds	r18, 0x0380
     e54:	30 91 81 03 	lds	r19, 0x0381
     e58:	22 30       	cpi	r18, 0x02	; 2
     e5a:	31 05       	cpc	r19, r1
     e5c:	6c f4       	brge	.+26     	; 0xe78 <keyboard_unselect_prev+0x82>
			prev_pos.x = 0;
     e5e:	10 92 81 03 	sts	0x0381, r1
     e62:	10 92 80 03 	sts	0x0380, r1
			keyboard_goto(prev_pos.y, prev_pos.x);
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	0e 94 30 05 	call	0xa60	; 0xa60 <keyboard_goto>
			print_shift(NORMAL);
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 0e 0c 	call	0x181c	; 0x181c <print_shift>
     e76:	32 c0       	rjmp	.+100    	; 0xedc <keyboard_unselect_prev+0xe6>
		}
		else if (prev_pos.x < 8) {
     e78:	28 30       	cpi	r18, 0x08	; 8
     e7a:	31 05       	cpc	r19, r1
     e7c:	7c f4       	brge	.+30     	; 0xe9c <keyboard_unselect_prev+0xa6>
			prev_pos.x = 2; //start of spacebar
     e7e:	22 e0       	ldi	r18, 0x02	; 2
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	30 93 81 03 	sts	0x0381, r19
     e86:	20 93 80 03 	sts	0x0380, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
     e8a:	62 e0       	ldi	r22, 0x02	; 2
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	0e 94 30 05 	call	0xa60	; 0xa60 <keyboard_goto>
			print_spacebar(NORMAL);
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 b2 0c 	call	0x1964	; 0x1964 <print_spacebar>
     e9a:	20 c0       	rjmp	.+64     	; 0xedc <keyboard_unselect_prev+0xe6>
		}
		else if (prev_pos.x < 10) {
     e9c:	2a 30       	cpi	r18, 0x0A	; 10
     e9e:	31 05       	cpc	r19, r1
     ea0:	7c f4       	brge	.+30     	; 0xec0 <keyboard_unselect_prev+0xca>
			prev_pos.x = 8; //start of left arrow
     ea2:	28 e0       	ldi	r18, 0x08	; 8
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	30 93 81 03 	sts	0x0381, r19
     eaa:	20 93 80 03 	sts	0x0380, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
     eae:	68 e0       	ldi	r22, 0x08	; 8
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	0e 94 30 05 	call	0xa60	; 0xa60 <keyboard_goto>
			print_left_arrow(NORMAL);
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <print_left_arrow>
     ebe:	0e c0       	rjmp	.+28     	; 0xedc <keyboard_unselect_prev+0xe6>
		}
		else {
			prev_pos.x = 10; //start of right arrow
     ec0:	2a e0       	ldi	r18, 0x0A	; 10
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	30 93 81 03 	sts	0x0381, r19
     ec8:	20 93 80 03 	sts	0x0380, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
     ecc:	6a e0       	ldi	r22, 0x0A	; 10
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	0e 94 30 05 	call	0xa60	; 0xa60 <keyboard_goto>
			print_right_arrow(NORMAL);
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 86 0c 	call	0x190c	; 0x190c <print_right_arrow>
		}
	}
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	08 95       	ret

00000ee2 <keyboard_select_curr>:

void keyboard_select_curr() {
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
	//selected item is a letter
	if (pos.y < 4) {
     ee6:	80 91 86 03 	lds	r24, 0x0386
     eea:	90 91 87 03 	lds	r25, 0x0387
     eee:	84 30       	cpi	r24, 0x04	; 4
     ef0:	91 05       	cpc	r25, r1
     ef2:	24 f5       	brge	.+72     	; 0xf3c <keyboard_select_curr+0x5a>
		keyboard_goto(pos.y, pos.x);
     ef4:	c4 e8       	ldi	r28, 0x84	; 132
     ef6:	d3 e0       	ldi	r29, 0x03	; 3
     ef8:	68 81       	ld	r22, Y
     efa:	79 81       	ldd	r23, Y+1	; 0x01
     efc:	0e 94 30 05 	call	0xa60	; 0xa60 <keyboard_goto>
		print_char(pgm_read_byte(&letters[pos.y * LINE_LENGTH + pos.x]), INVERSE);
     f00:	80 91 86 03 	lds	r24, 0x0386
     f04:	90 91 87 03 	lds	r25, 0x0387
     f08:	fc 01       	movw	r30, r24
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	8e 0f       	add	r24, r30
     f10:	9f 1f       	adc	r25, r31
     f12:	fc 01       	movw	r30, r24
     f14:	ee 0f       	add	r30, r30
     f16:	ff 1f       	adc	r31, r31
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	28 81       	ld	r18, Y
     f1e:	39 81       	ldd	r19, Y+1	; 0x01
     f20:	e2 0f       	add	r30, r18
     f22:	f3 1f       	adc	r31, r19
     f24:	80 91 30 01 	lds	r24, 0x0130
     f28:	90 91 31 01 	lds	r25, 0x0131
     f2c:	e8 0f       	add	r30, r24
     f2e:	f9 1f       	adc	r31, r25
     f30:	84 91       	lpm	r24, Z
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <print_char>
     f3a:	46 c0       	rjmp	.+140    	; 0xfc8 <keyboard_select_curr+0xe6>
	}

	//selected menu item is in toolbar
	else {
		if (pos.x < 2) {
     f3c:	20 91 84 03 	lds	r18, 0x0384
     f40:	30 91 85 03 	lds	r19, 0x0385
     f44:	22 30       	cpi	r18, 0x02	; 2
     f46:	31 05       	cpc	r19, r1
     f48:	6c f4       	brge	.+26     	; 0xf64 <keyboard_select_curr+0x82>
			pos.x = 0;
     f4a:	10 92 85 03 	sts	0x0385, r1
     f4e:	10 92 84 03 	sts	0x0384, r1
			keyboard_goto(pos.y, pos.x);
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	0e 94 30 05 	call	0xa60	; 0xa60 <keyboard_goto>
			print_shift(INVERSE);
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 0e 0c 	call	0x181c	; 0x181c <print_shift>
     f62:	32 c0       	rjmp	.+100    	; 0xfc8 <keyboard_select_curr+0xe6>
		}
		else if (pos.x < 8) {
     f64:	28 30       	cpi	r18, 0x08	; 8
     f66:	31 05       	cpc	r19, r1
     f68:	7c f4       	brge	.+30     	; 0xf88 <keyboard_select_curr+0xa6>
			pos.x = 2; //start of spacebar
     f6a:	22 e0       	ldi	r18, 0x02	; 2
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	30 93 85 03 	sts	0x0385, r19
     f72:	20 93 84 03 	sts	0x0384, r18
			keyboard_goto(pos.y, pos.x);
     f76:	62 e0       	ldi	r22, 0x02	; 2
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	0e 94 30 05 	call	0xa60	; 0xa60 <keyboard_goto>
			print_spacebar(INVERSE);
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 b2 0c 	call	0x1964	; 0x1964 <print_spacebar>
     f86:	20 c0       	rjmp	.+64     	; 0xfc8 <keyboard_select_curr+0xe6>
		}
		else if (pos.x < 10) {
     f88:	2a 30       	cpi	r18, 0x0A	; 10
     f8a:	31 05       	cpc	r19, r1
     f8c:	7c f4       	brge	.+30     	; 0xfac <keyboard_select_curr+0xca>
			pos.x = 8; //start of left arrow
     f8e:	28 e0       	ldi	r18, 0x08	; 8
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	30 93 85 03 	sts	0x0385, r19
     f96:	20 93 84 03 	sts	0x0384, r18
			keyboard_goto(pos.y, pos.x);
     f9a:	68 e0       	ldi	r22, 0x08	; 8
     f9c:	70 e0       	ldi	r23, 0x00	; 0
     f9e:	0e 94 30 05 	call	0xa60	; 0xa60 <keyboard_goto>
			print_left_arrow(INVERSE);
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <print_left_arrow>
     faa:	0e c0       	rjmp	.+28     	; 0xfc8 <keyboard_select_curr+0xe6>
		}
		else {
			pos.x = 10; //start of right arrow
     fac:	2a e0       	ldi	r18, 0x0A	; 10
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	30 93 85 03 	sts	0x0385, r19
     fb4:	20 93 84 03 	sts	0x0384, r18
			keyboard_goto(pos.y, pos.x);
     fb8:	6a e0       	ldi	r22, 0x0A	; 10
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	0e 94 30 05 	call	0xa60	; 0xa60 <keyboard_goto>
			print_right_arrow(INVERSE);
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 86 0c 	call	0x190c	; 0x190c <print_right_arrow>
		}
	}
}
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <keyboard_item_pressed>:


void keyboard_item_pressed() {
	if (pos.y < 4) {
     fce:	80 91 86 03 	lds	r24, 0x0386
     fd2:	90 91 87 03 	lds	r25, 0x0387
     fd6:	84 30       	cpi	r24, 0x04	; 4
     fd8:	91 05       	cpc	r25, r1
     fda:	e4 f4       	brge	.+56     	; 0x1014 <keyboard_item_pressed+0x46>
		append_char(pgm_read_byte(&letters[pos.y * LINE_LENGTH + pos.x]));
     fdc:	fc 01       	movw	r30, r24
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	8e 0f       	add	r24, r30
     fe4:	9f 1f       	adc	r25, r31
     fe6:	fc 01       	movw	r30, r24
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	20 91 84 03 	lds	r18, 0x0384
     ff4:	30 91 85 03 	lds	r19, 0x0385
     ff8:	e2 0f       	add	r30, r18
     ffa:	f3 1f       	adc	r31, r19
     ffc:	80 91 30 01 	lds	r24, 0x0130
    1000:	90 91 31 01 	lds	r25, 0x0131
    1004:	e8 0f       	add	r30, r24
    1006:	f9 1f       	adc	r31, r25
    1008:	84 91       	lpm	r24, Z
    100a:	0e 94 0b 05 	call	0xa16	; 0xa16 <append_char>
		//printf("APPEND written string: %s", written_string);
		//replace with a print function that remembers which part is printed, used with < >
		print_string();
    100e:	0e 94 39 05 	call	0xa72	; 0xa72 <print_string>
    1012:	08 95       	ret
	}
	else {
		if (pos.x < 2) {
    1014:	80 91 84 03 	lds	r24, 0x0384
    1018:	90 91 85 03 	lds	r25, 0x0385
    101c:	82 30       	cpi	r24, 0x02	; 2
    101e:	91 05       	cpc	r25, r1
    1020:	1c f4       	brge	.+6      	; 0x1028 <keyboard_item_pressed+0x5a>
			toggle_shift();
    1022:	0e 94 44 06 	call	0xc88	; 0xc88 <toggle_shift>
    1026:	08 95       	ret
		}
		else if (pos.x < 8) {
    1028:	88 30       	cpi	r24, 0x08	; 8
    102a:	91 05       	cpc	r25, r1
    102c:	34 f4       	brge	.+12     	; 0x103a <keyboard_item_pressed+0x6c>
			append_char(32);
    102e:	80 e2       	ldi	r24, 0x20	; 32
    1030:	0e 94 0b 05 	call	0xa16	; 0xa16 <append_char>
			print_string();
    1034:	0e 94 39 05 	call	0xa72	; 0xa72 <print_string>
    1038:	08 95       	ret
		}
		
		//last two probably not working
		else if (pos.x < 10 && string_position > 0) {
    103a:	8a 30       	cpi	r24, 0x0A	; 10
    103c:	91 05       	cpc	r25, r1
    103e:	74 f4       	brge	.+28     	; 0x105c <keyboard_item_pressed+0x8e>
    1040:	20 91 8a 03 	lds	r18, 0x038A
    1044:	30 91 8b 03 	lds	r19, 0x038B
    1048:	12 16       	cp	r1, r18
    104a:	13 06       	cpc	r1, r19
    104c:	3c f4       	brge	.+14     	; 0x105c <keyboard_item_pressed+0x8e>
			string_position--;
    104e:	21 50       	subi	r18, 0x01	; 1
    1050:	31 09       	sbc	r19, r1
    1052:	30 93 8b 03 	sts	0x038B, r19
    1056:	20 93 8a 03 	sts	0x038A, r18
    105a:	08 95       	ret
		}
		else if (pos.x < 12 && string_position < strlen(written_string)) {
    105c:	0c 97       	sbiw	r24, 0x0c	; 12
    105e:	a4 f4       	brge	.+40     	; 0x1088 <keyboard_item_pressed+0xba>
    1060:	80 91 8a 03 	lds	r24, 0x038A
    1064:	90 91 8b 03 	lds	r25, 0x038B
    1068:	e8 e9       	ldi	r30, 0x98	; 152
    106a:	f3 e0       	ldi	r31, 0x03	; 3
    106c:	01 90       	ld	r0, Z+
    106e:	00 20       	and	r0, r0
    1070:	e9 f7       	brne	.-6      	; 0x106c <keyboard_item_pressed+0x9e>
    1072:	31 97       	sbiw	r30, 0x01	; 1
    1074:	e8 59       	subi	r30, 0x98	; 152
    1076:	f3 40       	sbci	r31, 0x03	; 3
    1078:	8e 17       	cp	r24, r30
    107a:	9f 07       	cpc	r25, r31
    107c:	28 f4       	brcc	.+10     	; 0x1088 <keyboard_item_pressed+0xba>
			string_position++;
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	90 93 8b 03 	sts	0x038B, r25
    1084:	80 93 8a 03 	sts	0x038A, r24
    1088:	08 95       	ret

0000108a <keyboard_run>:
	}
}



void keyboard_run() {
    108a:	6f 92       	push	r6
    108c:	7f 92       	push	r7
    108e:	8f 92       	push	r8
    1090:	9f 92       	push	r9
    1092:	af 92       	push	r10
    1094:	bf 92       	push	r11
    1096:	cf 92       	push	r12
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
	keyboard_init();
    10a6:	0e 94 86 05 	call	0xb0c	; 0xb0c <keyboard_init>
	while (!JOY_button_pressed(LEFT_BUTTON)) {
		//Check if we switch letter
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
    10aa:	0f 2e       	mov	r0, r31
    10ac:	f2 e8       	ldi	r31, 0x82	; 130
    10ae:	ef 2e       	mov	r14, r31
    10b0:	f3 e0       	ldi	r31, 0x03	; 3
    10b2:	ff 2e       	mov	r15, r31
    10b4:	f0 2d       	mov	r31, r0
    10b6:	06 e8       	ldi	r16, 0x86	; 134
    10b8:	13 e0       	ldi	r17, 0x03	; 3
			//unselect the old letter and select the new one
			keyboard_unselect_prev();
			keyboard_select_curr();

			//Reset position
			prev_pos.x = pos.x;
    10ba:	0f 2e       	mov	r0, r31
    10bc:	f0 e8       	ldi	r31, 0x80	; 128
    10be:	af 2e       	mov	r10, r31
    10c0:	f3 e0       	ldi	r31, 0x03	; 3
    10c2:	bf 2e       	mov	r11, r31
    10c4:	f0 2d       	mov	r31, r0
    10c6:	0f 2e       	mov	r0, r31
    10c8:	f4 e8       	ldi	r31, 0x84	; 132
    10ca:	cf 2e       	mov	r12, r31
    10cc:	f3 e0       	ldi	r31, 0x03	; 3
    10ce:	df 2e       	mov	r13, r31
    10d0:	f0 2d       	mov	r31, r0
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
			//printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
			position_moved = 1;
    10d2:	88 24       	eor	r8, r8
    10d4:	83 94       	inc	r8
    10d6:	91 2c       	mov	r9, r1
    10d8:	61 2c       	mov	r6, r1
    10da:	71 2c       	mov	r7, r1

	//detect changes
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
    10dc:	59 c0       	rjmp	.+178    	; 0x1190 <keyboard_run+0x106>
		//Check if we switch letter
		direction = JOY_getDirection();
    10de:	0e 94 cc 04 	call	0x998	; 0x998 <JOY_getDirection>
		keyboard_register_position_change(direction);
    10e2:	0e 94 6d 06 	call	0xcda	; 0xcda <keyboard_register_position_change>
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
    10e6:	f7 01       	movw	r30, r14
    10e8:	20 81       	ld	r18, Z
    10ea:	31 81       	ldd	r19, Z+1	; 0x01
    10ec:	f8 01       	movw	r30, r16
    10ee:	80 81       	ld	r24, Z
    10f0:	91 81       	ldd	r25, Z+1	; 0x01
    10f2:	28 17       	cp	r18, r24
    10f4:	39 07       	cpc	r19, r25
    10f6:	49 f4       	brne	.+18     	; 0x110a <keyboard_run+0x80>
    10f8:	f5 01       	movw	r30, r10
    10fa:	20 81       	ld	r18, Z
    10fc:	31 81       	ldd	r19, Z+1	; 0x01
    10fe:	f6 01       	movw	r30, r12
    1100:	80 81       	ld	r24, Z
    1102:	91 81       	ldd	r25, Z+1	; 0x01
    1104:	28 17       	cp	r18, r24
    1106:	39 07       	cpc	r19, r25
    1108:	99 f0       	breq	.+38     	; 0x1130 <keyboard_run+0xa6>
			//printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
			position_moved = 1;
			//unselect the old letter and select the new one
			keyboard_unselect_prev();
    110a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <keyboard_unselect_prev>
			keyboard_select_curr();
    110e:	0e 94 71 07 	call	0xee2	; 0xee2 <keyboard_select_curr>

			//Reset position
			prev_pos.x = pos.x;
    1112:	f6 01       	movw	r30, r12
    1114:	80 81       	ld	r24, Z
    1116:	91 81       	ldd	r25, Z+1	; 0x01
    1118:	f5 01       	movw	r30, r10
    111a:	91 83       	std	Z+1, r25	; 0x01
    111c:	80 83       	st	Z, r24
			prev_pos.y = pos.y;
    111e:	f8 01       	movw	r30, r16
    1120:	80 81       	ld	r24, Z
    1122:	91 81       	ldd	r25, Z+1	; 0x01
    1124:	f7 01       	movw	r30, r14
    1126:	91 83       	std	Z+1, r25	; 0x01
    1128:	80 83       	st	Z, r24
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
			//printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
			position_moved = 1;
    112a:	c8 2d       	mov	r28, r8
    112c:	d9 2d       	mov	r29, r9
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <keyboard_run+0xaa>
    1130:	c6 2d       	mov	r28, r6
    1132:	d7 2d       	mov	r29, r7
			prev_pos.y = pos.y;
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <JOY_button_pressed>
    113a:	89 2b       	or	r24, r25
    113c:	29 f0       	breq	.+10     	; 0x1148 <keyboard_run+0xbe>
			button_pressed = 1;
			keyboard_item_pressed();
    113e:	0e 94 e7 07 	call	0xfce	; 0xfce <keyboard_item_pressed>
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
			button_pressed = 1;
    1142:	88 2d       	mov	r24, r8
    1144:	99 2d       	mov	r25, r9
    1146:	0e c0       	rjmp	.+28     	; 0x1164 <keyboard_run+0xda>
			keyboard_item_pressed();
			
		}
		//check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <JOY_button_pressed>
    114e:	89 2b       	or	r24, r25
    1150:	39 f0       	breq	.+14     	; 0x1160 <keyboard_run+0xd6>
			button_pressed = 1;
			//not working
			remove_last_char();
    1152:	0e 94 24 05 	call	0xa48	; 0xa48 <remove_last_char>
			//printf("REMOVE written string: %s", written_string);
			print_string();
    1156:	0e 94 39 05 	call	0xa72	; 0xa72 <print_string>
			keyboard_item_pressed();
			
		}
		//check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
			button_pressed = 1;
    115a:	88 2d       	mov	r24, r8
    115c:	99 2d       	mov	r25, r9
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <keyboard_run+0xda>
    1160:	86 2d       	mov	r24, r6
    1162:	97 2d       	mov	r25, r7
			//OLED_pos(0, pointer);
			//print_blank(8);
			//blinking_pos_on = 1;
		//}
		
		if(position_moved){
    1164:	cd 2b       	or	r28, r29
    1166:	49 f0       	breq	.+18     	; 0x117a <keyboard_run+0xf0>
    1168:	ef ef       	ldi	r30, 0xFF	; 255
    116a:	ff eb       	ldi	r31, 0xBF	; 191
    116c:	23 e0       	ldi	r18, 0x03	; 3
    116e:	e1 50       	subi	r30, 0x01	; 1
    1170:	f0 40       	sbci	r31, 0x00	; 0
    1172:	20 40       	sbci	r18, 0x00	; 0
    1174:	e1 f7       	brne	.-8      	; 0x116e <keyboard_run+0xe4>
    1176:	00 c0       	rjmp	.+0      	; 0x1178 <keyboard_run+0xee>
    1178:	00 00       	nop
			position_moved = 0;
			_delay_ms(250);
		}
		if(button_pressed){
    117a:	89 2b       	or	r24, r25
    117c:	49 f0       	breq	.+18     	; 0x1190 <keyboard_run+0x106>
    117e:	3f ef       	ldi	r19, 0xFF	; 255
    1180:	4f e7       	ldi	r20, 0x7F	; 127
    1182:	87 e0       	ldi	r24, 0x07	; 7
    1184:	31 50       	subi	r19, 0x01	; 1
    1186:	40 40       	sbci	r20, 0x00	; 0
    1188:	80 40       	sbci	r24, 0x00	; 0
    118a:	e1 f7       	brne	.-8      	; 0x1184 <keyboard_run+0xfa>
    118c:	00 c0       	rjmp	.+0      	; 0x118e <keyboard_run+0x104>
    118e:	00 00       	nop

	//detect changes
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <JOY_button_pressed>
    1196:	89 2b       	or	r24, r25
    1198:	09 f4       	brne	.+2      	; 0x119c <keyboard_run+0x112>
    119a:	a1 cf       	rjmp	.-190    	; 0x10de <keyboard_run+0x54>
		if(button_pressed){
			button_pressed = 0;
			_delay_ms(500);
		}
	}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	ef 90       	pop	r14
    11a8:	df 90       	pop	r13
    11aa:	cf 90       	pop	r12
    11ac:	bf 90       	pop	r11
    11ae:	af 90       	pop	r10
    11b0:	9f 90       	pop	r9
    11b2:	8f 90       	pop	r8
    11b4:	7f 90       	pop	r7
    11b6:	6f 90       	pop	r6
    11b8:	08 95       	ret

000011ba <MCP2515_read>:
	}
	
	return 0;
}

char MCP2515_read(char address) {
    11ba:	cf 93       	push	r28
    11bc:	c8 2f       	mov	r28, r24
	SPI_select();
    11be:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <SPI_select>
	SPI_send(READ);
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <SPI_send>
	SPI_send(address);
    11c8:	8c 2f       	mov	r24, r28
    11ca:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <SPI_send>
	char data = SPI_read();
    11ce:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <SPI_read>
    11d2:	c8 2f       	mov	r28, r24
	SPI_deselect();
    11d4:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <SPI_deselect>
	return data;
	
	
}
    11d8:	8c 2f       	mov	r24, r28
    11da:	cf 91       	pop	r28
    11dc:	08 95       	ret

000011de <MCP2515_write>:

void MCP2515_write(char address, char data) {
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	d8 2f       	mov	r29, r24
    11e4:	c6 2f       	mov	r28, r22
	SPI_select();
    11e6:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <SPI_select>
	SPI_send(WRITE);
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <SPI_send>
	SPI_send(address);
    11f0:	8d 2f       	mov	r24, r29
    11f2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <SPI_send>
	SPI_send(data);
    11f6:	8c 2f       	mov	r24, r28
    11f8:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <SPI_send>
	SPI_deselect();
    11fc:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <SPI_deselect>
}
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	08 95       	ret

00001206 <MCP2515_request_to_send>:

//Buffer states: three bit, setting a 1 on the buffer initiates transmitting from it 
void MCP2515_request_to_send(uint8_t buffer_states) {
    1206:	cf 93       	push	r28
    1208:	c8 2f       	mov	r28, r24
	SPI_select();
    120a:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <SPI_select>
	SPI_send(RTS_BASE+buffer_states);
    120e:	80 e8       	ldi	r24, 0x80	; 128
    1210:	8c 0f       	add	r24, r28
    1212:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <SPI_send>
	SPI_deselect();
    1216:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <SPI_deselect>
}
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <MCP2515_bit_modify>:

//puts new_data in the selected reg_adress. the function assumes that you are allowed to change every bit in the register
void MCP2515_bit_modify(char reg_address, char masked_bits, char new_data) {
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	18 2f       	mov	r17, r24
    1226:	d6 2f       	mov	r29, r22
    1228:	c4 2f       	mov	r28, r20
	SPI_select();
    122a:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <SPI_select>
	SPI_send(BIT_MODIFY);
    122e:	85 e0       	ldi	r24, 0x05	; 5
    1230:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <SPI_send>
	SPI_send(reg_address);
    1234:	81 2f       	mov	r24, r17
    1236:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <SPI_send>
	SPI_send(masked_bits);
    123a:	8d 2f       	mov	r24, r29
    123c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <SPI_send>
	SPI_send(new_data);
    1240:	8c 2f       	mov	r24, r28
    1242:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <SPI_send>
	SPI_deselect();
    1246:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <SPI_deselect>
}
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	1f 91       	pop	r17
    1250:	08 95       	ret

00001252 <MCP2515_reset>:

void MCP2515_reset() {
	SPI_select();
    1252:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <SPI_select>
	SPI_send(RESET);
    1256:	80 ec       	ldi	r24, 0xC0	; 192
    1258:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <SPI_send>
	SPI_deselect();
    125c:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <SPI_deselect>
    1260:	08 95       	ret

00001262 <MCP2515_init>:
#define BIT_MODIFY 0x05
#define RTS_BASE 0x80


uint8_t MCP2515_init() {
	SPI_init();
    1262:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <SPI_init>
	MCP2515_reset();
    1266:	0e 94 29 09 	call	0x1252	; 0x1252 <MCP2515_reset>
	//check bit 7-5 of MCP_CANSTAT which signify the operation mode
	const uint8_t device_mode = MCP2515_read(MCP_CANSTAT) & MODE_MASK;
    126a:	8e e0       	ldi	r24, 0x0E	; 14
    126c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <MCP2515_read>
    1270:	80 7e       	andi	r24, 0xE0	; 224
	if (device_mode != MODE_CONFIG) {
    1272:	80 38       	cpi	r24, 0x80	; 128
    1274:	31 f0       	breq	.+12     	; 0x1282 <MCP2515_init+0x20>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
    1276:	8c e9       	ldi	r24, 0x9C	; 156
    1278:	92 e0       	ldi	r25, 0x02	; 2
    127a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <puts>
		return 1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	08 95       	ret
	}
	
	return 0;
    1282:	80 e0       	ldi	r24, 0x00	; 0
}
    1284:	08 95       	ret

00001286 <test_function>:
volatile menu_entry* current_entry;
volatile menu_entry* selected_entry;


void test_function() {
	printf("\n\nHighscore clicked!\n\n");
    1286:	8e ec       	ldi	r24, 0xCE	; 206
    1288:	92 e0       	ldi	r25, 0x02	; 2
    128a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <puts>
    128e:	08 95       	ret

00001290 <MENU_draw_current_menu>:
	current_entry = current_entry->parent_node;
	selected_entry = current_entry->child_node;
	MENU_draw_current_menu();
}

void MENU_draw_current_menu() {
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
	OLED_reset();
    129e:	0e 94 2d 0b 	call	0x165a	; 0x165a <OLED_reset>
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
    12a2:	e0 91 c2 03 	lds	r30, 0x03C2
    12a6:	f0 91 c3 03 	lds	r31, 0x03C3
    12aa:	c4 81       	ldd	r28, Z+4	; 0x04
    12ac:	d5 81       	ldd	r29, Z+5	; 0x05
	
	while( temp_node != NULL){
    12ae:	20 97       	sbiw	r28, 0x00	; 0
    12b0:	61 f1       	breq	.+88     	; 0x130a <MENU_draw_current_menu+0x7a>
    12b2:	d1 2c       	mov	r13, r1
		OLED_pos(output_row++, 0);
		if (temp_node == selected_entry) {
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
    12b4:	0f 2e       	mov	r0, r31
    12b6:	f4 ee       	ldi	r31, 0xE4	; 228
    12b8:	ef 2e       	mov	r14, r31
    12ba:	f2 e0       	ldi	r31, 0x02	; 2
    12bc:	ff 2e       	mov	r15, r31
    12be:	f0 2d       	mov	r31, r0
    12c0:	00 e4       	ldi	r16, 0x40	; 64
    12c2:	11 e0       	ldi	r17, 0x01	; 1
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
		OLED_pos(output_row++, 0);
    12c4:	60 e0       	ldi	r22, 0x00	; 0
    12c6:	8d 2d       	mov	r24, r13
    12c8:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <OLED_pos>
		if (temp_node == selected_entry) {
    12cc:	20 91 c0 03 	lds	r18, 0x03C0
    12d0:	30 91 c1 03 	lds	r19, 0x03C1
    12d4:	c2 17       	cp	r28, r18
    12d6:	d3 07       	cpc	r29, r19
    12d8:	11 f4       	brne	.+4      	; 0x12de <MENU_draw_current_menu+0x4e>
			OLED_print_arrow();
    12da:	0e 94 c3 0b 	call	0x1786	; 0x1786 <OLED_print_arrow>
		}
		fprintf(OLED, " %s", temp_node->name);
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	8f 93       	push	r24
    12e2:	88 81       	ld	r24, Y
    12e4:	8f 93       	push	r24
    12e6:	ff 92       	push	r15
    12e8:	ef 92       	push	r14
    12ea:	1f 93       	push	r17
    12ec:	0f 93       	push	r16
    12ee:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <fprintf>
		temp_node = temp_node -> next_sibling_node;
    12f2:	0e 80       	ldd	r0, Y+6	; 0x06
    12f4:	df 81       	ldd	r29, Y+7	; 0x07
    12f6:	c0 2d       	mov	r28, r0
    12f8:	d3 94       	inc	r13
	OLED_reset();
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	20 97       	sbiw	r28, 0x00	; 0
    1308:	e9 f6       	brne	.-70     	; 0x12c4 <MENU_draw_current_menu+0x34>
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	df 90       	pop	r13
    1318:	08 95       	ret

0000131a <MENU_select_next>:
	MENU_draw_current_menu();
}


void MENU_select_next() {
	if (selected_entry -> next_sibling_node != NULL) {
    131a:	e0 91 c0 03 	lds	r30, 0x03C0
    131e:	f0 91 c1 03 	lds	r31, 0x03C1
    1322:	86 81       	ldd	r24, Z+6	; 0x06
    1324:	97 81       	ldd	r25, Z+7	; 0x07
    1326:	89 2b       	or	r24, r25
    1328:	41 f0       	breq	.+16     	; 0x133a <MENU_select_next+0x20>
		selected_entry = selected_entry -> next_sibling_node;
    132a:	86 81       	ldd	r24, Z+6	; 0x06
    132c:	97 81       	ldd	r25, Z+7	; 0x07
    132e:	90 93 c1 03 	sts	0x03C1, r25
    1332:	80 93 c0 03 	sts	0x03C0, r24
		MENU_draw_current_menu();
    1336:	0e 94 48 09 	call	0x1290	; 0x1290 <MENU_draw_current_menu>
    133a:	08 95       	ret

0000133c <MENU_select_prev>:
	}
}

void MENU_select_prev() {
	if (selected_entry -> prev_sibling_node != NULL) {
    133c:	e0 91 c0 03 	lds	r30, 0x03C0
    1340:	f0 91 c1 03 	lds	r31, 0x03C1
    1344:	80 85       	ldd	r24, Z+8	; 0x08
    1346:	91 85       	ldd	r25, Z+9	; 0x09
    1348:	89 2b       	or	r24, r25
    134a:	41 f0       	breq	.+16     	; 0x135c <MENU_select_prev+0x20>
		selected_entry = selected_entry -> prev_sibling_node;
    134c:	80 85       	ldd	r24, Z+8	; 0x08
    134e:	91 85       	ldd	r25, Z+9	; 0x09
    1350:	90 93 c1 03 	sts	0x03C1, r25
    1354:	80 93 c0 03 	sts	0x03C0, r24
		MENU_draw_current_menu();
    1358:	0e 94 48 09 	call	0x1290	; 0x1290 <MENU_draw_current_menu>
    135c:	08 95       	ret

0000135e <MENU_enter_selection>:
	}
}

void MENU_enter_selection() {
	if (selected_entry->function_ptr != NULL) {
    135e:	e0 91 c0 03 	lds	r30, 0x03C0
    1362:	f0 91 c1 03 	lds	r31, 0x03C1
    1366:	82 85       	ldd	r24, Z+10	; 0x0a
    1368:	93 85       	ldd	r25, Z+11	; 0x0b
    136a:	89 2b       	or	r24, r25
    136c:	31 f0       	breq	.+12     	; 0x137a <MENU_enter_selection+0x1c>
		selected_entry->function_ptr();
    136e:	02 84       	ldd	r0, Z+10	; 0x0a
    1370:	f3 85       	ldd	r31, Z+11	; 0x0b
    1372:	e0 2d       	mov	r30, r0
    1374:	09 95       	icall
		MENU_draw_current_menu();
    1376:	0e 94 48 09 	call	0x1290	; 0x1290 <MENU_draw_current_menu>
	}
	
	if (selected_entry->child_node == NULL) return;
    137a:	e0 91 c0 03 	lds	r30, 0x03C0
    137e:	f0 91 c1 03 	lds	r31, 0x03C1
    1382:	84 81       	ldd	r24, Z+4	; 0x04
    1384:	95 81       	ldd	r25, Z+5	; 0x05
    1386:	89 2b       	or	r24, r25
    1388:	61 f0       	breq	.+24     	; 0x13a2 <MENU_enter_selection+0x44>
	
	current_entry = selected_entry;
    138a:	f0 93 c3 03 	sts	0x03C3, r31
    138e:	e0 93 c2 03 	sts	0x03C2, r30
	selected_entry = current_entry->child_node;
    1392:	84 81       	ldd	r24, Z+4	; 0x04
    1394:	95 81       	ldd	r25, Z+5	; 0x05
    1396:	90 93 c1 03 	sts	0x03C1, r25
    139a:	80 93 c0 03 	sts	0x03C0, r24
	MENU_draw_current_menu();
    139e:	0e 94 48 09 	call	0x1290	; 0x1290 <MENU_draw_current_menu>
    13a2:	08 95       	ret

000013a4 <MENU_go_back>:
}

void MENU_go_back() {
	if (current_entry->parent_node == NULL) return;
    13a4:	e0 91 c2 03 	lds	r30, 0x03C2
    13a8:	f0 91 c3 03 	lds	r31, 0x03C3
    13ac:	82 81       	ldd	r24, Z+2	; 0x02
    13ae:	93 81       	ldd	r25, Z+3	; 0x03
    13b0:	89 2b       	or	r24, r25
    13b2:	79 f0       	breq	.+30     	; 0x13d2 <MENU_go_back+0x2e>
	
	current_entry = current_entry->parent_node;
    13b4:	02 80       	ldd	r0, Z+2	; 0x02
    13b6:	f3 81       	ldd	r31, Z+3	; 0x03
    13b8:	e0 2d       	mov	r30, r0
    13ba:	f0 93 c3 03 	sts	0x03C3, r31
    13be:	e0 93 c2 03 	sts	0x03C2, r30
	selected_entry = current_entry->child_node;
    13c2:	84 81       	ldd	r24, Z+4	; 0x04
    13c4:	95 81       	ldd	r25, Z+5	; 0x05
    13c6:	90 93 c1 03 	sts	0x03C1, r25
    13ca:	80 93 c0 03 	sts	0x03C0, r24
	MENU_draw_current_menu();
    13ce:	0e 94 48 09 	call	0x1290	; 0x1290 <MENU_draw_current_menu>
    13d2:	08 95       	ret

000013d4 <MENU_run>:





void MENU_run() {
    13d4:	cf 93       	push	r28
	bool change = false;
	if (JOY_getDirection() == DOWN) {
    13d6:	0e 94 cc 04 	call	0x998	; 0x998 <JOY_getDirection>
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	21 f4       	brne	.+8      	; 0x13e6 <MENU_run+0x12>
		MENU_select_next();
    13de:	0e 94 8d 09 	call	0x131a	; 0x131a <MENU_select_next>
		change = true;
    13e2:	c1 e0       	ldi	r28, 0x01	; 1
    13e4:	09 c0       	rjmp	.+18     	; 0x13f8 <MENU_run+0x24>
		} else if (JOY_getDirection() == UP) {
    13e6:	0e 94 cc 04 	call	0x998	; 0x998 <JOY_getDirection>
    13ea:	82 30       	cpi	r24, 0x02	; 2
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <MENU_run+0x22>
		MENU_select_prev();
    13ee:	0e 94 9e 09 	call	0x133c	; 0x133c <MENU_select_prev>
		change = true;
    13f2:	c1 e0       	ldi	r28, 0x01	; 1
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <MENU_run+0x24>




void MENU_run() {
	bool change = false;
    13f6:	c0 e0       	ldi	r28, 0x00	; 0
		} else if (JOY_getDirection() == UP) {
		MENU_select_prev();
		change = true;
	}
	
	if (JOY_button_pressed(JOY_BUTTON)) {
    13f8:	82 e0       	ldi	r24, 0x02	; 2
    13fa:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <JOY_button_pressed>
    13fe:	89 2b       	or	r24, r25
    1400:	19 f0       	breq	.+6      	; 0x1408 <MENU_run+0x34>
		MENU_enter_selection();
    1402:	0e 94 af 09 	call	0x135e	; 0x135e <MENU_enter_selection>
    1406:	0a c0       	rjmp	.+20     	; 0x141c <MENU_run+0x48>
		change = true;
	}
	
	else if (JOY_button_pressed(LEFT_BUTTON)) {
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <JOY_button_pressed>
    140e:	89 2b       	or	r24, r25
    1410:	19 f0       	breq	.+6      	; 0x1418 <MENU_run+0x44>
		MENU_go_back();
    1412:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <MENU_go_back>
    1416:	02 c0       	rjmp	.+4      	; 0x141c <MENU_run+0x48>
		change = true;
	}
	
	// Make sure the selection doesn't move multiple places at once.
	if (change){
    1418:	cc 23       	and	r28, r28
    141a:	49 f0       	breq	.+18     	; 0x142e <MENU_run+0x5a>
    141c:	22 e3       	ldi	r18, 0x32	; 50
    141e:	83 ed       	ldi	r24, 0xD3	; 211
    1420:	93 e0       	ldi	r25, 0x03	; 3
    1422:	21 50       	subi	r18, 0x01	; 1
    1424:	80 40       	sbci	r24, 0x00	; 0
    1426:	90 40       	sbci	r25, 0x00	; 0
    1428:	e1 f7       	brne	.-8      	; 0x1422 <MENU_run+0x4e>
    142a:	00 c0       	rjmp	.+0      	; 0x142c <MENU_run+0x58>
    142c:	00 c0       	rjmp	.+0      	; 0x142e <MENU_run+0x5a>
		_delay_ms(255);
		change = false;
	}

}
    142e:	cf 91       	pop	r28
    1430:	08 95       	ret

00001432 <add_entry>:


menu_entry* add_entry(menu_entry* parent_node, char* name, void* function_ptr){
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	ec 01       	movw	r28, r24
    1440:	7b 01       	movw	r14, r22
    1442:	8a 01       	movw	r16, r20
	
	// Create the new node
	menu_entry* new_entry = (menu_entry*) malloc(sizeof(menu_entry));
    1444:	8c e0       	ldi	r24, 0x0C	; 12
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <malloc>
    144c:	dc 01       	movw	r26, r24
	new_entry->name = name;
    144e:	11 96       	adiw	r26, 0x01	; 1
    1450:	fc 92       	st	X, r15
    1452:	ee 92       	st	-X, r14
	new_entry->parent_node = parent_node;
    1454:	13 96       	adiw	r26, 0x03	; 3
    1456:	dc 93       	st	X, r29
    1458:	ce 93       	st	-X, r28
    145a:	12 97       	sbiw	r26, 0x02	; 2
	new_entry->child_node = NULL;  // A new node has no children
    145c:	15 96       	adiw	r26, 0x05	; 5
    145e:	1c 92       	st	X, r1
    1460:	1e 92       	st	-X, r1
    1462:	14 97       	sbiw	r26, 0x04	; 4
	new_entry->next_sibling_node = NULL;  // The new child is the last child
    1464:	17 96       	adiw	r26, 0x07	; 7
    1466:	1c 92       	st	X, r1
    1468:	1e 92       	st	-X, r1
    146a:	16 97       	sbiw	r26, 0x06	; 6
	new_entry->prev_sibling_node = NULL;
    146c:	19 96       	adiw	r26, 0x09	; 9
    146e:	1c 92       	st	X, r1
    1470:	1e 92       	st	-X, r1
    1472:	18 97       	sbiw	r26, 0x08	; 8
	new_entry->function_ptr = function_ptr;
    1474:	1b 96       	adiw	r26, 0x0b	; 11
    1476:	1c 93       	st	X, r17
    1478:	0e 93       	st	-X, r16
    147a:	1a 97       	sbiw	r26, 0x0a	; 10
	
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_entry;
    147c:	20 97       	sbiw	r28, 0x00	; 0
    147e:	a1 f0       	breq	.+40     	; 0x14a8 <add_entry+0x76>
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
    1480:	ec 81       	ldd	r30, Y+4	; 0x04
    1482:	fd 81       	ldd	r31, Y+5	; 0x05
    1484:	30 97       	sbiw	r30, 0x00	; 0
    1486:	19 f4       	brne	.+6      	; 0x148e <add_entry+0x5c>
		parent_node->child_node = new_entry;
    1488:	9d 83       	std	Y+5, r25	; 0x05
    148a:	8c 83       	std	Y+4, r24	; 0x04
    148c:	0d c0       	rjmp	.+26     	; 0x14a8 <add_entry+0x76>
	else {
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
    148e:	26 81       	ldd	r18, Z+6	; 0x06
    1490:	37 81       	ldd	r19, Z+7	; 0x07
    1492:	21 15       	cp	r18, r1
    1494:	31 05       	cpc	r19, r1
    1496:	11 f0       	breq	.+4      	; 0x149c <add_entry+0x6a>
			//printf("temp_node->next_sibling_node->name: %s\n", temp_node->next_sibling_node->name);
			temp_node = temp_node->next_sibling_node;
    1498:	f9 01       	movw	r30, r18
    149a:	f9 cf       	rjmp	.-14     	; 0x148e <add_entry+0x5c>
		}
		
		// Bind the new node to the current last child to become the new last child.
		temp_node->next_sibling_node = new_entry;
    149c:	b7 83       	std	Z+7, r27	; 0x07
    149e:	a6 83       	std	Z+6, r26	; 0x06
		new_entry->prev_sibling_node = temp_node;
    14a0:	19 96       	adiw	r26, 0x09	; 9
    14a2:	fc 93       	st	X, r31
    14a4:	ee 93       	st	-X, r30
    14a6:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	// Parent/child/sibling bindings complete. Return the new node.
	return new_entry;
}
    14a8:	cd 01       	movw	r24, r26
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	ff 90       	pop	r15
    14b4:	ef 90       	pop	r14
    14b6:	08 95       	ret

000014b8 <MENU_init>:

void test_function() {
	printf("\n\nHighscore clicked!\n\n");
}

void MENU_init() {
    14b8:	cf 92       	push	r12
    14ba:	df 92       	push	r13
    14bc:	ef 92       	push	r14
    14be:	ff 92       	push	r15
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
	menu_entry* main_menu = add_entry(NULL, "Main menu", NULL);
    14c8:	40 e0       	ldi	r20, 0x00	; 0
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	68 ee       	ldi	r22, 0xE8	; 232
    14ce:	72 e0       	ldi	r23, 0x02	; 2
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 19 0a 	call	0x1432	; 0x1432 <add_entry>
    14d8:	ec 01       	movw	r28, r24
	
	// Main menu
	menu_entry* play = add_entry(main_menu, "Play game", game_play);
    14da:	45 e4       	ldi	r20, 0x45	; 69
    14dc:	53 e0       	ldi	r21, 0x03	; 3
    14de:	62 ef       	ldi	r22, 0xF2	; 242
    14e0:	72 e0       	ldi	r23, 0x02	; 2
    14e2:	0e 94 19 0a 	call	0x1432	; 0x1432 <add_entry>
    14e6:	7c 01       	movw	r14, r24
	add_entry(main_menu, "Highscore", test_function);
    14e8:	43 e4       	ldi	r20, 0x43	; 67
    14ea:	59 e0       	ldi	r21, 0x09	; 9
    14ec:	6c ef       	ldi	r22, 0xFC	; 252
    14ee:	72 e0       	ldi	r23, 0x02	; 2
    14f0:	ce 01       	movw	r24, r28
    14f2:	0e 94 19 0a 	call	0x1432	; 0x1432 <add_entry>
	menu_entry* settings = add_entry(main_menu, "Settings", NULL);
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	50 e0       	ldi	r21, 0x00	; 0
    14fa:	66 e0       	ldi	r22, 0x06	; 6
    14fc:	73 e0       	ldi	r23, 0x03	; 3
    14fe:	ce 01       	movw	r24, r28
    1500:	0e 94 19 0a 	call	0x1432	; 0x1432 <add_entry>
    1504:	6c 01       	movw	r12, r24
	menu_entry* extras = add_entry(main_menu, "Extra features", NULL);
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	6d e6       	ldi	r22, 0x6D	; 109
    150c:	73 e0       	ldi	r23, 0x03	; 3
    150e:	ce 01       	movw	r24, r28
    1510:	0e 94 19 0a 	call	0x1432	; 0x1432 <add_entry>
    1514:	8c 01       	movw	r16, r24
	
	
	// Sub-menu settings
	menu_entry* brightness = add_entry(settings, "Brightness", brightness_run);
    1516:	4a e5       	ldi	r20, 0x5A	; 90
    1518:	52 e0       	ldi	r21, 0x02	; 2
    151a:	6f e0       	ldi	r22, 0x0F	; 15
    151c:	73 e0       	ldi	r23, 0x03	; 3
    151e:	c6 01       	movw	r24, r12
    1520:	0e 94 19 0a 	call	0x1432	; 0x1432 <add_entry>
	//menu_entry* font = add_entry(settings, "Set font", NULL);
	
	// Sub-menu extras
	menu_entry* keyboard = add_entry(extras, "Keyboard", keyboard_run);
    1524:	45 e4       	ldi	r20, 0x45	; 69
    1526:	58 e0       	ldi	r21, 0x08	; 8
    1528:	6a e1       	ldi	r22, 0x1A	; 26
    152a:	73 e0       	ldi	r23, 0x03	; 3
    152c:	c8 01       	movw	r24, r16
    152e:	0e 94 19 0a 	call	0x1432	; 0x1432 <add_entry>
	//menu_entry* mandelbrot = add_entry(extras, "Mandelbrot", NULL);
	menu_entry* pong = add_entry(extras, "Play pong", NULL);
    1532:	40 e0       	ldi	r20, 0x00	; 0
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	63 e2       	ldi	r22, 0x23	; 35
    1538:	73 e0       	ldi	r23, 0x03	; 3
    153a:	c8 01       	movw	r24, r16
    153c:	0e 94 19 0a 	call	0x1432	; 0x1432 <add_entry>
	//menu_entry* rcube = add_entry(extras, "rotating cube", NULL);
	
	current_entry = main_menu;
    1540:	d0 93 c3 03 	sts	0x03C3, r29
    1544:	c0 93 c2 03 	sts	0x03C2, r28
	selected_entry = play;
    1548:	f0 92 c1 03 	sts	0x03C1, r15
    154c:	e0 92 c0 03 	sts	0x03C0, r14
	MENU_draw_current_menu();
    1550:	0e 94 48 09 	call	0x1290	; 0x1290 <MENU_draw_current_menu>
}
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	df 90       	pop	r13
    1562:	cf 90       	pop	r12
    1564:	08 95       	ret

00001566 <initialize>:
#include <stdbool.h>

void send_control_input(void);

void initialize(void){
	cli();
    1566:	f8 94       	cli
	usart_init(MYUBRR);
    1568:	8f e1       	ldi	r24, 0x1F	; 31
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <usart_init>
	SRAM_init();
    1570:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <SRAM_init>
	ADC_init();
    1574:	0e 94 03 02 	call	0x406	; 0x406 <ADC_init>
	JOY_init(CALIBRATION_DEFAULT);
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <JOY_init>
	OLED_init();
    1580:	0e 94 32 0b 	call	0x1664	; 0x1664 <OLED_init>
	MENU_init();
    1584:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <MENU_init>
	CAN_init();
    1588:	0e 94 ac 02 	call	0x558	; 0x558 <CAN_init>
	sei();
    158c:	78 94       	sei
    158e:	08 95       	ret

00001590 <main>:
}



int main(void) {
	initialize();
    1590:	0e 94 b3 0a 	call	0x1566	; 0x1566 <initialize>
	printf("Initialization of Node 1 complete!\n\n");
    1594:	8d e2       	ldi	r24, 0x2D	; 45
    1596:	93 e0       	ldi	r25, 0x03	; 3
    1598:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <puts>
	while(1) {
		MENU_run();
    159c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <MENU_run>
    15a0:	fd cf       	rjmp	.-6      	; 0x159c <main+0xc>

000015a2 <write_data>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    15a2:	e0 91 50 01 	lds	r30, 0x0150
    15a6:	f0 91 51 01 	lds	r31, 0x0151
    15aa:	80 83       	st	Z, r24
    15ac:	08 95       	ret

000015ae <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7) 
    15ae:	88 30       	cpi	r24, 0x08	; 8
    15b0:	60 f4       	brcc	.+24     	; 0x15ca <OLED_goto_line+0x1c>
		return;
	
	write_cmd(0xB0 + line);
    15b2:	90 eb       	ldi	r25, 0xB0	; 176
    15b4:	98 0f       	add	r25, r24

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    15b6:	e0 91 4e 01 	lds	r30, 0x014E
    15ba:	f0 91 4f 01 	lds	r31, 0x014F
    15be:	90 83       	st	Z, r25
void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7) 
		return;
	
	write_cmd(0xB0 + line);
	current_line = line;
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	90 93 8f 03 	sts	0x038F, r25
    15c6:	80 93 8e 03 	sts	0x038E, r24
    15ca:	08 95       	ret

000015cc <OLED_goto_column>:
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127) 
    15cc:	88 23       	and	r24, r24
    15ce:	ac f0       	brlt	.+42     	; 0x15fa <OLED_goto_column+0x2e>
		return;
	
	write_cmd(0x00 + column%16); // Lower column register
    15d0:	98 2f       	mov	r25, r24
    15d2:	9f 70       	andi	r25, 0x0F	; 15

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    15d4:	e0 91 4e 01 	lds	r30, 0x014E
    15d8:	f0 91 4f 01 	lds	r31, 0x014F
    15dc:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127) 
		return;
	
	write_cmd(0x00 + column%16); // Lower column register
	write_cmd(0x10 + column/16); // Higher column register
    15de:	98 2f       	mov	r25, r24
    15e0:	92 95       	swap	r25
    15e2:	9f 70       	andi	r25, 0x0F	; 15
    15e4:	90 5f       	subi	r25, 0xF0	; 240

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    15e6:	e0 91 4e 01 	lds	r30, 0x014E
    15ea:	f0 91 4f 01 	lds	r31, 0x014F
    15ee:	90 83       	st	Z, r25
	if (column < 0 || column > 127) 
		return;
	
	write_cmd(0x00 + column%16); // Lower column register
	write_cmd(0x10 + column/16); // Higher column register
	current_column = column;
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	90 93 8d 03 	sts	0x038D, r25
    15f6:	80 93 8c 03 	sts	0x038C, r24
    15fa:	08 95       	ret

000015fc <OLED_pos>:
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
		write_data(0x00);
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
    15fc:	cf 93       	push	r28
    15fe:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
    1600:	88 30       	cpi	r24, 0x08	; 8
    1602:	10 f4       	brcc	.+4      	; 0x1608 <OLED_pos+0xc>
    1604:	66 23       	and	r22, r22
    1606:	2c f4       	brge	.+10     	; 0x1612 <OLED_pos+0x16>
		printf("Out of range in OLED_pos()\n");
    1608:	81 e5       	ldi	r24, 0x51	; 81
    160a:	93 e0       	ldi	r25, 0x03	; 3
    160c:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <puts>
		return; 
    1610:	05 c0       	rjmp	.+10     	; 0x161c <OLED_pos+0x20>
	}
	
	OLED_goto_line(line);
    1612:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <OLED_goto_line>
	OLED_goto_column(column);
    1616:	8c 2f       	mov	r24, r28
    1618:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <OLED_goto_column>
}
    161c:	cf 91       	pop	r28
    161e:	08 95       	ret

00001620 <OLED_reset_cursor>:
	OLED_clear_screen();
	OLED_reset_cursor();
}

void OLED_reset_cursor(){
	OLED_pos(0,0);
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <OLED_pos>
    1628:	08 95       	ret

0000162a <OLED_clear_line>:
		OLED_clear_line(page);
	}
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line, 0);
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <OLED_pos>
    1630:	80 e8       	ldi	r24, 0x80	; 128
    1632:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1634:	e0 91 50 01 	lds	r30, 0x0150
    1638:	f0 91 51 01 	lds	r31, 0x0151
    163c:	10 82       	st	Z, r1
    163e:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line, 0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	c1 f7       	brne	.-16     	; 0x1634 <OLED_clear_line+0xa>
		write_data(0x00);
	}
}
    1644:	08 95       	ret

00001646 <OLED_clear_screen>:

void OLED_reset_cursor(){
	OLED_pos(0,0);
}

void OLED_clear_screen() {
    1646:	cf 93       	push	r28
    1648:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
    164a:	8c 2f       	mov	r24, r28
    164c:	0e 94 15 0b 	call	0x162a	; 0x162a <OLED_clear_line>
    1650:	cf 5f       	subi	r28, 0xFF	; 255
void OLED_reset_cursor(){
	OLED_pos(0,0);
}

void OLED_clear_screen() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
    1652:	c8 30       	cpi	r28, 0x08	; 8
    1654:	d1 f7       	brne	.-12     	; 0x164a <OLED_clear_screen+0x4>
		OLED_clear_line(page);
	}
}
    1656:	cf 91       	pop	r28
    1658:	08 95       	ret

0000165a <OLED_reset>:
	}
	OLED_reset();
}

void OLED_reset() {
	OLED_clear_screen();
    165a:	0e 94 23 0b 	call	0x1646	; 0x1646 <OLED_clear_screen>
	OLED_reset_cursor();
    165e:	0e 94 10 0b 	call	0x1620	; 0x1620 <OLED_reset_cursor>
    1662:	08 95       	ret

00001664 <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	67 97       	sbiw	r28, 0x17	; 23
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
	const char commands[] = {
    1678:	87 e1       	ldi	r24, 0x17	; 23
    167a:	e2 e5       	ldi	r30, 0x52	; 82
    167c:	f1 e0       	ldi	r31, 0x01	; 1
    167e:	de 01       	movw	r26, r28
    1680:	11 96       	adiw	r26, 0x01	; 1
    1682:	01 90       	ld	r0, Z+
    1684:	0d 92       	st	X+, r0
    1686:	8a 95       	dec	r24
    1688:	e1 f7       	brne	.-8      	; 0x1682 <OLED_init+0x1e>
    168a:	fe 01       	movw	r30, r28
    168c:	31 96       	adiw	r30, 0x01	; 1
    168e:	ce 01       	movw	r24, r28
    1690:	48 96       	adiw	r24, 0x18	; 24
		0xAF  // Display on
	};
	
	const int command_count = sizeof(commands)/sizeof(commands[0]);
	for (int i = 0; i < command_count; i++) {
		write_cmd(commands[i]);
    1692:	21 91       	ld	r18, Z+

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    1694:	a0 91 4e 01 	lds	r26, 0x014E
    1698:	b0 91 4f 01 	lds	r27, 0x014F
    169c:	2c 93       	st	X, r18
		0xA6, // Set normal display
		0xAF  // Display on
	};
	
	const int command_count = sizeof(commands)/sizeof(commands[0]);
	for (int i = 0; i < command_count; i++) {
    169e:	e8 17       	cp	r30, r24
    16a0:	f9 07       	cpc	r31, r25
    16a2:	b9 f7       	brne	.-18     	; 0x1692 <OLED_init+0x2e>
		write_cmd(commands[i]);
	}
	OLED_reset();
    16a4:	0e 94 2d 0b 	call	0x165a	; 0x165a <OLED_reset>
}
    16a8:	67 96       	adiw	r28, 0x17	; 23
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <OLED_print_char>:

void OLED_print_char(char character){
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = character - ascii_starting_point;
	
	switch (character) {
    16ba:	8a 30       	cpi	r24, 0x0A	; 10
    16bc:	29 f0       	breq	.+10     	; 0x16c8 <OLED_print_char+0xe>
    16be:	8d 30       	cpi	r24, 0x0D	; 13
    16c0:	61 f0       	breq	.+24     	; 0x16da <OLED_print_char+0x20>
    16c2:	81 11       	cpse	r24, r1
    16c4:	12 c0       	rjmp	.+36     	; 0x16ea <OLED_print_char+0x30>
    16c6:	08 95       	ret
		case '\0'  :
		break;
		
		case '\n'  :  
		// Reset cursor and move it to the next line
		OLED_pos(current_line + 1, 0);  
    16c8:	80 91 8e 03 	lds	r24, 0x038E
    16cc:	90 91 8f 03 	lds	r25, 0x038F
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <OLED_pos>
		break;
    16d8:	08 95       	ret
		
		case '\r'  :  
		// Reset cursor to start of current line
		OLED_pos(current_line, 0);  
    16da:	80 91 8e 03 	lds	r24, 0x038E
    16de:	90 91 8f 03 	lds	r25, 0x038F
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <OLED_pos>
		break;
    16e8:	08 95       	ret
    16ea:	e8 2f       	mov	r30, r24
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	ee 0f       	add	r30, r30
    16f0:	ff 1f       	adc	r31, r31
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	ee 0f       	add	r30, r30
    16f8:	ff 1f       	adc	r31, r31
    16fa:	e0 53       	subi	r30, 0x30	; 48
    16fc:	f0 40       	sbci	r31, 0x00	; 0

void OLED_print_char(char character){
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = character - ascii_starting_point;
	
	switch (character) {
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
		break;
		
		default :
		// Print character using the included fonts
		for (int col = 0; col < FONT_SIZE; col++){
			write_data(pgm_read_byte(&font8[letter_index][col]));
    1702:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1704:	a0 91 50 01 	lds	r26, 0x0150
    1708:	b0 91 51 01 	lds	r27, 0x0151
    170c:	2c 93       	st	X, r18
		OLED_pos(current_line, 0);  
		break;
		
		default :
		// Print character using the included fonts
		for (int col = 0; col < FONT_SIZE; col++){
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	31 96       	adiw	r30, 0x01	; 1
    1712:	88 30       	cpi	r24, 0x08	; 8
    1714:	91 05       	cpc	r25, r1
    1716:	a9 f7       	brne	.-22     	; 0x1702 <OLED_print_char+0x48>
    1718:	08 95       	ret

0000171a <OLED_set_brightness>:

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    171a:	e0 91 4e 01 	lds	r30, 0x014E
    171e:	f0 91 4f 01 	lds	r31, 0x014F
    1722:	91 e8       	ldi	r25, 0x81	; 129
    1724:	90 83       	st	Z, r25
    1726:	e0 91 4e 01 	lds	r30, 0x014E
    172a:	f0 91 4f 01 	lds	r31, 0x014F
    172e:	80 83       	st	Z, r24
    1730:	08 95       	ret

00001732 <OLED_print_char_inverse>:
		}
	}
}

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
    1732:	88 23       	and	r24, r24
    1734:	c1 f0       	breq	.+48     	; 0x1766 <OLED_print_char_inverse+0x34>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
    1736:	e8 2f       	mov	r30, r24
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	ee 0f       	add	r30, r30
    173c:	ff 1f       	adc	r31, r31
    173e:	ee 0f       	add	r30, r30
    1740:	ff 1f       	adc	r31, r31
    1742:	ee 0f       	add	r30, r30
    1744:	ff 1f       	adc	r31, r31
    1746:	e0 53       	subi	r30, 0x30	; 48
    1748:	f0 40       	sbci	r31, 0x00	; 0
	for (int col = 0; col < FONT_SIZE; col++) {
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
		write_data(~pgm_read_byte(&font8[letter_index][col]));
    174e:	24 91       	lpm	r18, Z
    1750:	20 95       	com	r18
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1752:	a0 91 50 01 	lds	r26, 0x0150
    1756:	b0 91 51 01 	lds	r27, 0x0151
    175a:	2c 93       	st	X, r18

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++) {
    175c:	01 96       	adiw	r24, 0x01	; 1
    175e:	31 96       	adiw	r30, 0x01	; 1
    1760:	88 30       	cpi	r24, 0x08	; 8
    1762:	91 05       	cpc	r25, r1
    1764:	a1 f7       	brne	.-24     	; 0x174e <OLED_print_char_inverse+0x1c>
    1766:	08 95       	ret

00001768 <OLED_set_line>:
	}
	OLED_reset_cursor();
}

void OLED_set_line(uint8_t line) {
	OLED_pos(line,0);
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <OLED_pos>
    176e:	80 e8       	ldi	r24, 0x80	; 128
    1770:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1772:	2f ef       	ldi	r18, 0xFF	; 255
    1774:	e0 91 50 01 	lds	r30, 0x0150
    1778:	f0 91 51 01 	lds	r31, 0x0151
    177c:	20 83       	st	Z, r18
    177e:	01 97       	sbiw	r24, 0x01	; 1
	OLED_reset_cursor();
}

void OLED_set_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	c1 f7       	brne	.-16     	; 0x1774 <OLED_set_line+0xc>
		write_data(0xFF);
	}
}
    1784:	08 95       	ret

00001786 <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1786:	e0 91 50 01 	lds	r30, 0x0150
    178a:	f0 91 51 01 	lds	r31, 0x0151
    178e:	88 e1       	ldi	r24, 0x18	; 24
    1790:	80 83       	st	Z, r24
    1792:	e0 91 50 01 	lds	r30, 0x0150
    1796:	f0 91 51 01 	lds	r31, 0x0151
    179a:	80 83       	st	Z, r24
    179c:	e0 91 50 01 	lds	r30, 0x0150
    17a0:	f0 91 51 01 	lds	r31, 0x0151
    17a4:	9e e7       	ldi	r25, 0x7E	; 126
    17a6:	90 83       	st	Z, r25
    17a8:	e0 91 50 01 	lds	r30, 0x0150
    17ac:	f0 91 51 01 	lds	r31, 0x0151
    17b0:	9c e3       	ldi	r25, 0x3C	; 60
    17b2:	90 83       	st	Z, r25
    17b4:	e0 91 50 01 	lds	r30, 0x0150
    17b8:	f0 91 51 01 	lds	r31, 0x0151
    17bc:	80 83       	st	Z, r24
    17be:	08 95       	ret

000017c0 <print_blank>:
#include "OLED_driver.h"

#include <stdio.h>
#include <string.h>

void print_blank(int number) {
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
    17ca:	18 16       	cp	r1, r24
    17cc:	19 06       	cpc	r1, r25
    17ce:	54 f4       	brge	.+20     	; 0x17e4 <print_blank+0x24>
    17d0:	c0 e0       	ldi	r28, 0x00	; 0
    17d2:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0x00);
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>

#include <stdio.h>
#include <string.h>

void print_blank(int number) {
	for (int i = 0; i < number; i++) {
    17dc:	21 96       	adiw	r28, 0x01	; 1
    17de:	c0 17       	cp	r28, r16
    17e0:	d1 07       	cpc	r29, r17
    17e2:	c1 f7       	brne	.-16     	; 0x17d4 <print_blank+0x14>
		write_data(0x00);
	}
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	08 95       	ret

000017ee <print_fill>:

void print_fill(int number) {
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
    17f8:	18 16       	cp	r1, r24
    17fa:	19 06       	cpc	r1, r25
    17fc:	54 f4       	brge	.+20     	; 0x1812 <print_fill+0x24>
    17fe:	c0 e0       	ldi	r28, 0x00	; 0
    1800:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0xFF);
    1802:	8f ef       	ldi	r24, 0xFF	; 255
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(0x00);
	}
}

void print_fill(int number) {
	for (int i = 0; i < number; i++) {
    180a:	21 96       	adiw	r28, 0x01	; 1
    180c:	c0 17       	cp	r28, r16
    180e:	d1 07       	cpc	r29, r17
    1810:	c1 f7       	brne	.-16     	; 0x1802 <print_fill+0x14>
		write_data(0xFF);
	}
}
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	08 95       	ret

0000181c <print_shift>:

void print_shift(int inverse) {
	if (!inverse) {
    181c:	89 2b       	or	r24, r25
    181e:	29 f5       	brne	.+74     	; 0x186a <print_shift+0x4e>
		print_blank(4);
    1820:	84 e0       	ldi	r24, 0x04	; 4
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <print_blank>
		//up-arrow
		write_data(0b00010000);
    1828:	80 e1       	ldi	r24, 0x10	; 16
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(0b00011000);
    1830:	88 e1       	ldi	r24, 0x18	; 24
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(0b00111100);
    1838:	8c e3       	ldi	r24, 0x3C	; 60
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(0b00111110);
    1840:	8e e3       	ldi	r24, 0x3E	; 62
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(0b00111100);
    1848:	8c e3       	ldi	r24, 0x3C	; 60
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(0b00011000);
    1850:	88 e1       	ldi	r24, 0x18	; 24
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(0b00010000);
    1858:	80 e1       	ldi	r24, 0x10	; 16
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>

		print_blank(5);
    1860:	85 e0       	ldi	r24, 0x05	; 5
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <print_blank>
    1868:	08 95       	ret
	}
	else {
		print_fill(4);
    186a:	84 e0       	ldi	r24, 0x04	; 4
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <print_fill>
		//up-arrow
		write_data(~0b00010000);
    1872:	8f ee       	ldi	r24, 0xEF	; 239
    1874:	9f ef       	ldi	r25, 0xFF	; 255
    1876:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(~0b00011000);
    187a:	87 ee       	ldi	r24, 0xE7	; 231
    187c:	9f ef       	ldi	r25, 0xFF	; 255
    187e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(~0b00111100);
    1882:	83 ec       	ldi	r24, 0xC3	; 195
    1884:	9f ef       	ldi	r25, 0xFF	; 255
    1886:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(~0b00111110);
    188a:	81 ec       	ldi	r24, 0xC1	; 193
    188c:	9f ef       	ldi	r25, 0xFF	; 255
    188e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(~0b00111100);
    1892:	83 ec       	ldi	r24, 0xC3	; 195
    1894:	9f ef       	ldi	r25, 0xFF	; 255
    1896:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(~0b00011000);
    189a:	87 ee       	ldi	r24, 0xE7	; 231
    189c:	9f ef       	ldi	r25, 0xFF	; 255
    189e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(~0b00010000);
    18a2:	8f ee       	ldi	r24, 0xEF	; 239
    18a4:	9f ef       	ldi	r25, 0xFF	; 255
    18a6:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		print_fill(5);
    18aa:	85 e0       	ldi	r24, 0x05	; 5
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <print_fill>
    18b2:	08 95       	ret

000018b4 <print_left_arrow>:
	}
}

void print_left_arrow(int inverse) {
	if (!inverse) {
    18b4:	89 2b       	or	r24, r25
    18b6:	a9 f4       	brne	.+42     	; 0x18e2 <print_left_arrow+0x2e>
		print_blank(6);
    18b8:	86 e0       	ldi	r24, 0x06	; 6
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <print_blank>
		//left-arrow

		write_data(0b00010000);
    18c0:	80 e1       	ldi	r24, 0x10	; 16
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(0b00111000);
    18c8:	88 e3       	ldi	r24, 0x38	; 56
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(0b01111100);
    18d0:	8c e7       	ldi	r24, 0x7C	; 124
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>

		print_blank(7);
    18d8:	87 e0       	ldi	r24, 0x07	; 7
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <print_blank>
    18e0:	08 95       	ret
	}
	else {
		print_fill(6);
    18e2:	86 e0       	ldi	r24, 0x06	; 6
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <print_fill>
		//left-arrow
		write_data(~0b00010000);
    18ea:	8f ee       	ldi	r24, 0xEF	; 239
    18ec:	9f ef       	ldi	r25, 0xFF	; 255
    18ee:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(~0b00111000);
    18f2:	87 ec       	ldi	r24, 0xC7	; 199
    18f4:	9f ef       	ldi	r25, 0xFF	; 255
    18f6:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(~0b01111100);
    18fa:	83 e8       	ldi	r24, 0x83	; 131
    18fc:	9f ef       	ldi	r25, 0xFF	; 255
    18fe:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>

		print_fill(7);
    1902:	87 e0       	ldi	r24, 0x07	; 7
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <print_fill>
    190a:	08 95       	ret

0000190c <print_right_arrow>:
	}
}


void print_right_arrow(int inverse) {
	if (!inverse) {
    190c:	89 2b       	or	r24, r25
    190e:	a9 f4       	brne	.+42     	; 0x193a <print_right_arrow+0x2e>
		print_blank(6);
    1910:	86 e0       	ldi	r24, 0x06	; 6
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <print_blank>

		//right-arrow
		write_data(0b01111100);
    1918:	8c e7       	ldi	r24, 0x7C	; 124
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(0b00111000);
    1920:	88 e3       	ldi	r24, 0x38	; 56
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(0b00010000);
    1928:	80 e1       	ldi	r24, 0x10	; 16
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>

		print_blank(7);
    1930:	87 e0       	ldi	r24, 0x07	; 7
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <print_blank>
    1938:	08 95       	ret
	}
	else {
		print_fill(6);
    193a:	86 e0       	ldi	r24, 0x06	; 6
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <print_fill>

		//right-arrow
		write_data(~0b01111100);
    1942:	83 e8       	ldi	r24, 0x83	; 131
    1944:	9f ef       	ldi	r25, 0xFF	; 255
    1946:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(~0b00111000);
    194a:	87 ec       	ldi	r24, 0xC7	; 199
    194c:	9f ef       	ldi	r25, 0xFF	; 255
    194e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
		write_data(~0b00010000);
    1952:	8f ee       	ldi	r24, 0xEF	; 239
    1954:	9f ef       	ldi	r25, 0xFF	; 255
    1956:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>

		print_fill(7);
    195a:	87 e0       	ldi	r24, 0x07	; 7
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <print_fill>
    1962:	08 95       	ret

00001964 <print_spacebar>:
	}
}


void print_spacebar(int inverse) {
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
	if (!inverse) {
    1968:	89 2b       	or	r24, r25
    196a:	d1 f4       	brne	.+52     	; 0x19a0 <print_spacebar+0x3c>
		print_blank(4);
    196c:	84 e0       	ldi	r24, 0x04	; 4
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <print_blank>

		//spacebar
		write_data(0b00111000);
    1974:	88 e3       	ldi	r24, 0x38	; 56
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
    197c:	c7 e2       	ldi	r28, 0x27	; 39
    197e:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 39;i++) write_data(0b00100000);
    1980:	80 e2       	ldi	r24, 0x20	; 32
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
    1988:	21 97       	sbiw	r28, 0x01	; 1
    198a:	20 97       	sbiw	r28, 0x00	; 0
    198c:	c9 f7       	brne	.-14     	; 0x1980 <print_spacebar+0x1c>
		write_data(0b00111000);
    198e:	88 e3       	ldi	r24, 0x38	; 56
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>

		print_blank(5);
    1996:	85 e0       	ldi	r24, 0x05	; 5
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <print_blank>
    199e:	19 c0       	rjmp	.+50     	; 0x19d2 <print_spacebar+0x6e>
	}
	else {
		print_blank(4);
    19a0:	84 e0       	ldi	r24, 0x04	; 4
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <print_blank>

		//spacebar
		write_data(~0b00111000);
    19a8:	87 ec       	ldi	r24, 0xC7	; 199
    19aa:	9f ef       	ldi	r25, 0xFF	; 255
    19ac:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
    19b0:	c7 e2       	ldi	r28, 0x27	; 39
    19b2:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 39;i++) write_data(~0b00100000);
    19b4:	8f ed       	ldi	r24, 0xDF	; 223
    19b6:	9f ef       	ldi	r25, 0xFF	; 255
    19b8:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>
    19bc:	21 97       	sbiw	r28, 0x01	; 1
    19be:	20 97       	sbiw	r28, 0x00	; 0
    19c0:	c9 f7       	brne	.-14     	; 0x19b4 <print_spacebar+0x50>
		write_data(~0b00111000);
    19c2:	87 ec       	ldi	r24, 0xC7	; 199
    19c4:	9f ef       	ldi	r25, 0xFF	; 255
    19c6:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <write_data>

		print_blank(5);
    19ca:	85 e0       	ldi	r24, 0x05	; 5
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <print_blank>
	}
}
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	08 95       	ret

000019d8 <print_options_bar>:


void print_options_bar(int shift_inverse, int space_inverse, int left_inverse,  int right_inverse) {
    19d8:	ef 92       	push	r14
    19da:	ff 92       	push	r15
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	7b 01       	movw	r14, r22
    19e6:	8a 01       	movw	r16, r20
    19e8:	e9 01       	movw	r28, r18
	print_shift(shift_inverse);
    19ea:	0e 94 0e 0c 	call	0x181c	; 0x181c <print_shift>
	print_spacebar(space_inverse);
    19ee:	c7 01       	movw	r24, r14
    19f0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <print_spacebar>
	print_left_arrow(left_inverse);
    19f4:	c8 01       	movw	r24, r16
    19f6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <print_left_arrow>
	print_right_arrow(right_inverse);
    19fa:	ce 01       	movw	r24, r28
    19fc:	0e 94 86 0c 	call	0x190c	; 0x190c <print_right_arrow>
}
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	ff 90       	pop	r15
    1a0a:	ef 90       	pop	r14
    1a0c:	08 95       	ret

00001a0e <print_char>:

void print_char(char c, int inverse) {
	if (!inverse) {
    1a0e:	67 2b       	or	r22, r23
    1a10:	19 f4       	brne	.+6      	; 0x1a18 <print_char+0xa>
		OLED_print_char(c);
    1a12:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <OLED_print_char>
    1a16:	08 95       	ret
	}
	else {
		OLED_print_char_inverse(c);
    1a18:	0e 94 99 0b 	call	0x1732	; 0x1732 <OLED_print_char_inverse>
    1a1c:	08 95       	ret

00001a1e <SPI_init>:

void SPI_init(){
	//Configure interrupt0 on the ATmega162 for receiving interrupts from SPI
	//see page 160 in ATmega162
	//enable int0 on the ATmega162
	set_bit(GICR, INT0);
    1a1e:	8b b7       	in	r24, 0x3b	; 59
    1a20:	80 64       	ori	r24, 0x40	; 64
    1a22:	8b bf       	out	0x3b, r24	; 59
	
	//interrupt when low
	clear_bit(MCUCR,ISC01);
    1a24:	85 b7       	in	r24, 0x35	; 53
    1a26:	8d 7f       	andi	r24, 0xFD	; 253
    1a28:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
    1a2a:	85 b7       	in	r24, 0x35	; 53
    1a2c:	8e 7f       	andi	r24, 0xFE	; 254
    1a2e:	85 bf       	out	0x35, r24	; 53
	

	//set mosi, sck, ss as output, others as input
	set_bit(DDRB, MOSI);
    1a30:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
    1a32:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
    1a34:	bc 9a       	sbi	0x17, 4	; 23
	
	
	//set ATmega as master
	set_bit(SPCR, MSTR);
    1a36:	6c 9a       	sbi	0x0d, 4	; 13
	
	//enable SPI
	set_bit(SPCR, SPE);
    1a38:	6e 9a       	sbi	0x0d, 6	; 13
	
	//set clock to f_osc/16
	set_bit(SPCR, SPR0);
    1a3a:	68 9a       	sbi	0x0d, 0	; 13
	clear_bit(SPCR,SPR1);
    1a3c:	69 98       	cbi	0x0d, 1	; 13
	clear_bit(SPCR, SPI2X);
    1a3e:	68 98       	cbi	0x0d, 0	; 13
    1a40:	08 95       	ret

00001a42 <SPI_send>:
}


void SPI_send(uint8_t data){
	//Start transmission
	SPDR = data;		
    1a42:	8f b9       	out	0x0f, r24	; 15
	//wait for transmission complete SPSR: register with SPIF flag, SPIF: bit set to 1 when data is read
	loop_until_bit_is_set(SPSR, SPIF);
    1a44:	77 9b       	sbis	0x0e, 7	; 14
    1a46:	fe cf       	rjmp	.-4      	; 0x1a44 <SPI_send+0x2>
}
    1a48:	08 95       	ret

00001a4a <SPI_read>:


char SPI_read(){
	//must send a dummy bit to receive data
	SPI_send(0);
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <SPI_send>
	
	loop_until_bit_is_set(SPSR, SPIF);
    1a50:	77 9b       	sbis	0x0e, 7	; 14
    1a52:	fe cf       	rjmp	.-4      	; 0x1a50 <SPI_read+0x6>
	char data = SPDR;
    1a54:	8f b1       	in	r24, 0x0f	; 15
	return data;
	
}
    1a56:	08 95       	ret

00001a58 <SPI_select>:
	//printf("SPI_TEST: %s\n\n", spi_read_result);
	
}

void SPI_select(){
	clear_bit(PORTB, SS);
    1a58:	c4 98       	cbi	0x18, 4	; 24
    1a5a:	08 95       	ret

00001a5c <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
    1a5c:	c4 9a       	sbi	0x18, 4	; 24
    1a5e:	08 95       	ret

00001a60 <SRAM_init>:
#include <stdio.h>


void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
    1a60:	85 b7       	in	r24, 0x35	; 53
    1a62:	80 68       	ori	r24, 0x80	; 128
    1a64:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
    1a66:	80 b7       	in	r24, 0x30	; 48
    1a68:	80 62       	ori	r24, 0x20	; 32
    1a6a:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
    1a6c:	80 b7       	in	r24, 0x30	; 48
    1a6e:	8f 7e       	andi	r24, 0xEF	; 239
    1a70:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
    1a72:	80 b7       	in	r24, 0x30	; 48
    1a74:	87 7f       	andi	r24, 0xF7	; 247
    1a76:	80 bf       	out	0x30, r24	; 48
    1a78:	08 95       	ret

00001a7a <usart_transmit_to_computer>:
}


void usart_transmit_to_computer(unsigned int data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
    1a7a:	5d 9b       	sbis	0x0b, 5	; 11
    1a7c:	fe cf       	rjmp	.-4      	; 0x1a7a <usart_transmit_to_computer>
	;
	
	/* Put data into buffer (sends the data) */
	UDR0 = data;
    1a7e:	8c b9       	out	0x0c, r24	; 12
    1a80:	08 95       	ret

00001a82 <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
    1a82:	5f 9b       	sbis	0x0b, 7	; 11
    1a84:	fe cf       	rjmp	.-4      	; 0x1a82 <usart_receive_from_computer>
	;
	
	/* Get and return data from buffer */
	return UDR0;
    1a86:	8c b1       	in	r24, 0x0c	; 12
}
    1a88:	08 95       	ret

00001a8a <usart_init>:
#include <stdio.h>


void usart_init(unsigned int ubbr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubbr>>8);
    1a8a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
    1a8c:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    1a8e:	88 e1       	ldi	r24, 0x18	; 24
    1a90:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1a92:	8e e8       	ldi	r24, 0x8E	; 142
    1a94:	80 bd       	out	0x20, r24	; 32
	
	
	/* Enable printf-thing */
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
    1a96:	61 e4       	ldi	r22, 0x41	; 65
    1a98:	7d e0       	ldi	r23, 0x0D	; 13
    1a9a:	8d e3       	ldi	r24, 0x3D	; 61
    1a9c:	9d e0       	ldi	r25, 0x0D	; 13
    1a9e:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <fdevopen>
    1aa2:	08 95       	ret

00001aa4 <__divmodhi4>:
    1aa4:	97 fb       	bst	r25, 7
    1aa6:	07 2e       	mov	r0, r23
    1aa8:	16 f4       	brtc	.+4      	; 0x1aae <__divmodhi4+0xa>
    1aaa:	00 94       	com	r0
    1aac:	07 d0       	rcall	.+14     	; 0x1abc <__divmodhi4_neg1>
    1aae:	77 fd       	sbrc	r23, 7
    1ab0:	09 d0       	rcall	.+18     	; 0x1ac4 <__divmodhi4_neg2>
    1ab2:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__udivmodhi4>
    1ab6:	07 fc       	sbrc	r0, 7
    1ab8:	05 d0       	rcall	.+10     	; 0x1ac4 <__divmodhi4_neg2>
    1aba:	3e f4       	brtc	.+14     	; 0x1aca <__divmodhi4_exit>

00001abc <__divmodhi4_neg1>:
    1abc:	90 95       	com	r25
    1abe:	81 95       	neg	r24
    1ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac2:	08 95       	ret

00001ac4 <__divmodhi4_neg2>:
    1ac4:	70 95       	com	r23
    1ac6:	61 95       	neg	r22
    1ac8:	7f 4f       	sbci	r23, 0xFF	; 255

00001aca <__divmodhi4_exit>:
    1aca:	08 95       	ret

00001acc <__udivmodhi4>:
    1acc:	aa 1b       	sub	r26, r26
    1ace:	bb 1b       	sub	r27, r27
    1ad0:	51 e1       	ldi	r21, 0x11	; 17
    1ad2:	07 c0       	rjmp	.+14     	; 0x1ae2 <__udivmodhi4_ep>

00001ad4 <__udivmodhi4_loop>:
    1ad4:	aa 1f       	adc	r26, r26
    1ad6:	bb 1f       	adc	r27, r27
    1ad8:	a6 17       	cp	r26, r22
    1ada:	b7 07       	cpc	r27, r23
    1adc:	10 f0       	brcs	.+4      	; 0x1ae2 <__udivmodhi4_ep>
    1ade:	a6 1b       	sub	r26, r22
    1ae0:	b7 0b       	sbc	r27, r23

00001ae2 <__udivmodhi4_ep>:
    1ae2:	88 1f       	adc	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	5a 95       	dec	r21
    1ae8:	a9 f7       	brne	.-22     	; 0x1ad4 <__udivmodhi4_loop>
    1aea:	80 95       	com	r24
    1aec:	90 95       	com	r25
    1aee:	bc 01       	movw	r22, r24
    1af0:	cd 01       	movw	r24, r26
    1af2:	08 95       	ret

00001af4 <malloc>:
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	82 30       	cpi	r24, 0x02	; 2
    1afa:	91 05       	cpc	r25, r1
    1afc:	10 f4       	brcc	.+4      	; 0x1b02 <malloc+0xe>
    1afe:	82 e0       	ldi	r24, 0x02	; 2
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	e0 91 c6 03 	lds	r30, 0x03C6
    1b06:	f0 91 c7 03 	lds	r31, 0x03C7
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	a0 e0       	ldi	r26, 0x00	; 0
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	30 97       	sbiw	r30, 0x00	; 0
    1b14:	39 f1       	breq	.+78     	; 0x1b64 <malloc+0x70>
    1b16:	40 81       	ld	r20, Z
    1b18:	51 81       	ldd	r21, Z+1	; 0x01
    1b1a:	48 17       	cp	r20, r24
    1b1c:	59 07       	cpc	r21, r25
    1b1e:	b8 f0       	brcs	.+46     	; 0x1b4e <malloc+0x5a>
    1b20:	48 17       	cp	r20, r24
    1b22:	59 07       	cpc	r21, r25
    1b24:	71 f4       	brne	.+28     	; 0x1b42 <malloc+0x4e>
    1b26:	82 81       	ldd	r24, Z+2	; 0x02
    1b28:	93 81       	ldd	r25, Z+3	; 0x03
    1b2a:	10 97       	sbiw	r26, 0x00	; 0
    1b2c:	29 f0       	breq	.+10     	; 0x1b38 <malloc+0x44>
    1b2e:	13 96       	adiw	r26, 0x03	; 3
    1b30:	9c 93       	st	X, r25
    1b32:	8e 93       	st	-X, r24
    1b34:	12 97       	sbiw	r26, 0x02	; 2
    1b36:	2c c0       	rjmp	.+88     	; 0x1b90 <malloc+0x9c>
    1b38:	90 93 c7 03 	sts	0x03C7, r25
    1b3c:	80 93 c6 03 	sts	0x03C6, r24
    1b40:	27 c0       	rjmp	.+78     	; 0x1b90 <malloc+0x9c>
    1b42:	21 15       	cp	r18, r1
    1b44:	31 05       	cpc	r19, r1
    1b46:	31 f0       	breq	.+12     	; 0x1b54 <malloc+0x60>
    1b48:	42 17       	cp	r20, r18
    1b4a:	53 07       	cpc	r21, r19
    1b4c:	18 f0       	brcs	.+6      	; 0x1b54 <malloc+0x60>
    1b4e:	a9 01       	movw	r20, r18
    1b50:	db 01       	movw	r26, r22
    1b52:	01 c0       	rjmp	.+2      	; 0x1b56 <malloc+0x62>
    1b54:	ef 01       	movw	r28, r30
    1b56:	9a 01       	movw	r18, r20
    1b58:	bd 01       	movw	r22, r26
    1b5a:	df 01       	movw	r26, r30
    1b5c:	02 80       	ldd	r0, Z+2	; 0x02
    1b5e:	f3 81       	ldd	r31, Z+3	; 0x03
    1b60:	e0 2d       	mov	r30, r0
    1b62:	d7 cf       	rjmp	.-82     	; 0x1b12 <malloc+0x1e>
    1b64:	21 15       	cp	r18, r1
    1b66:	31 05       	cpc	r19, r1
    1b68:	f9 f0       	breq	.+62     	; 0x1ba8 <malloc+0xb4>
    1b6a:	28 1b       	sub	r18, r24
    1b6c:	39 0b       	sbc	r19, r25
    1b6e:	24 30       	cpi	r18, 0x04	; 4
    1b70:	31 05       	cpc	r19, r1
    1b72:	80 f4       	brcc	.+32     	; 0x1b94 <malloc+0xa0>
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	9b 81       	ldd	r25, Y+3	; 0x03
    1b78:	61 15       	cp	r22, r1
    1b7a:	71 05       	cpc	r23, r1
    1b7c:	21 f0       	breq	.+8      	; 0x1b86 <malloc+0x92>
    1b7e:	fb 01       	movw	r30, r22
    1b80:	93 83       	std	Z+3, r25	; 0x03
    1b82:	82 83       	std	Z+2, r24	; 0x02
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <malloc+0x9a>
    1b86:	90 93 c7 03 	sts	0x03C7, r25
    1b8a:	80 93 c6 03 	sts	0x03C6, r24
    1b8e:	fe 01       	movw	r30, r28
    1b90:	32 96       	adiw	r30, 0x02	; 2
    1b92:	44 c0       	rjmp	.+136    	; 0x1c1c <malloc+0x128>
    1b94:	fe 01       	movw	r30, r28
    1b96:	e2 0f       	add	r30, r18
    1b98:	f3 1f       	adc	r31, r19
    1b9a:	81 93       	st	Z+, r24
    1b9c:	91 93       	st	Z+, r25
    1b9e:	22 50       	subi	r18, 0x02	; 2
    1ba0:	31 09       	sbc	r19, r1
    1ba2:	39 83       	std	Y+1, r19	; 0x01
    1ba4:	28 83       	st	Y, r18
    1ba6:	3a c0       	rjmp	.+116    	; 0x1c1c <malloc+0x128>
    1ba8:	20 91 c4 03 	lds	r18, 0x03C4
    1bac:	30 91 c5 03 	lds	r19, 0x03C5
    1bb0:	23 2b       	or	r18, r19
    1bb2:	41 f4       	brne	.+16     	; 0x1bc4 <malloc+0xd0>
    1bb4:	20 91 02 01 	lds	r18, 0x0102
    1bb8:	30 91 03 01 	lds	r19, 0x0103
    1bbc:	30 93 c5 03 	sts	0x03C5, r19
    1bc0:	20 93 c4 03 	sts	0x03C4, r18
    1bc4:	20 91 00 01 	lds	r18, 0x0100
    1bc8:	30 91 01 01 	lds	r19, 0x0101
    1bcc:	21 15       	cp	r18, r1
    1bce:	31 05       	cpc	r19, r1
    1bd0:	41 f4       	brne	.+16     	; 0x1be2 <malloc+0xee>
    1bd2:	2d b7       	in	r18, 0x3d	; 61
    1bd4:	3e b7       	in	r19, 0x3e	; 62
    1bd6:	40 91 04 01 	lds	r20, 0x0104
    1bda:	50 91 05 01 	lds	r21, 0x0105
    1bde:	24 1b       	sub	r18, r20
    1be0:	35 0b       	sbc	r19, r21
    1be2:	e0 91 c4 03 	lds	r30, 0x03C4
    1be6:	f0 91 c5 03 	lds	r31, 0x03C5
    1bea:	e2 17       	cp	r30, r18
    1bec:	f3 07       	cpc	r31, r19
    1bee:	a0 f4       	brcc	.+40     	; 0x1c18 <malloc+0x124>
    1bf0:	2e 1b       	sub	r18, r30
    1bf2:	3f 0b       	sbc	r19, r31
    1bf4:	28 17       	cp	r18, r24
    1bf6:	39 07       	cpc	r19, r25
    1bf8:	78 f0       	brcs	.+30     	; 0x1c18 <malloc+0x124>
    1bfa:	ac 01       	movw	r20, r24
    1bfc:	4e 5f       	subi	r20, 0xFE	; 254
    1bfe:	5f 4f       	sbci	r21, 0xFF	; 255
    1c00:	24 17       	cp	r18, r20
    1c02:	35 07       	cpc	r19, r21
    1c04:	48 f0       	brcs	.+18     	; 0x1c18 <malloc+0x124>
    1c06:	4e 0f       	add	r20, r30
    1c08:	5f 1f       	adc	r21, r31
    1c0a:	50 93 c5 03 	sts	0x03C5, r21
    1c0e:	40 93 c4 03 	sts	0x03C4, r20
    1c12:	81 93       	st	Z+, r24
    1c14:	91 93       	st	Z+, r25
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <malloc+0x128>
    1c18:	e0 e0       	ldi	r30, 0x00	; 0
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	cf 01       	movw	r24, r30
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	08 95       	ret

00001c24 <free>:
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <free+0xa>
    1c2c:	87 c0       	rjmp	.+270    	; 0x1d3c <free+0x118>
    1c2e:	fc 01       	movw	r30, r24
    1c30:	32 97       	sbiw	r30, 0x02	; 2
    1c32:	13 82       	std	Z+3, r1	; 0x03
    1c34:	12 82       	std	Z+2, r1	; 0x02
    1c36:	c0 91 c6 03 	lds	r28, 0x03C6
    1c3a:	d0 91 c7 03 	lds	r29, 0x03C7
    1c3e:	20 97       	sbiw	r28, 0x00	; 0
    1c40:	81 f4       	brne	.+32     	; 0x1c62 <free+0x3e>
    1c42:	20 81       	ld	r18, Z
    1c44:	31 81       	ldd	r19, Z+1	; 0x01
    1c46:	28 0f       	add	r18, r24
    1c48:	39 1f       	adc	r19, r25
    1c4a:	80 91 c4 03 	lds	r24, 0x03C4
    1c4e:	90 91 c5 03 	lds	r25, 0x03C5
    1c52:	82 17       	cp	r24, r18
    1c54:	93 07       	cpc	r25, r19
    1c56:	79 f5       	brne	.+94     	; 0x1cb6 <free+0x92>
    1c58:	f0 93 c5 03 	sts	0x03C5, r31
    1c5c:	e0 93 c4 03 	sts	0x03C4, r30
    1c60:	6d c0       	rjmp	.+218    	; 0x1d3c <free+0x118>
    1c62:	de 01       	movw	r26, r28
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	ae 17       	cp	r26, r30
    1c6a:	bf 07       	cpc	r27, r31
    1c6c:	50 f4       	brcc	.+20     	; 0x1c82 <free+0x5e>
    1c6e:	12 96       	adiw	r26, 0x02	; 2
    1c70:	4d 91       	ld	r20, X+
    1c72:	5c 91       	ld	r21, X
    1c74:	13 97       	sbiw	r26, 0x03	; 3
    1c76:	9d 01       	movw	r18, r26
    1c78:	41 15       	cp	r20, r1
    1c7a:	51 05       	cpc	r21, r1
    1c7c:	09 f1       	breq	.+66     	; 0x1cc0 <free+0x9c>
    1c7e:	da 01       	movw	r26, r20
    1c80:	f3 cf       	rjmp	.-26     	; 0x1c68 <free+0x44>
    1c82:	b3 83       	std	Z+3, r27	; 0x03
    1c84:	a2 83       	std	Z+2, r26	; 0x02
    1c86:	40 81       	ld	r20, Z
    1c88:	51 81       	ldd	r21, Z+1	; 0x01
    1c8a:	84 0f       	add	r24, r20
    1c8c:	95 1f       	adc	r25, r21
    1c8e:	8a 17       	cp	r24, r26
    1c90:	9b 07       	cpc	r25, r27
    1c92:	71 f4       	brne	.+28     	; 0x1cb0 <free+0x8c>
    1c94:	8d 91       	ld	r24, X+
    1c96:	9c 91       	ld	r25, X
    1c98:	11 97       	sbiw	r26, 0x01	; 1
    1c9a:	84 0f       	add	r24, r20
    1c9c:	95 1f       	adc	r25, r21
    1c9e:	02 96       	adiw	r24, 0x02	; 2
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	80 83       	st	Z, r24
    1ca4:	12 96       	adiw	r26, 0x02	; 2
    1ca6:	8d 91       	ld	r24, X+
    1ca8:	9c 91       	ld	r25, X
    1caa:	13 97       	sbiw	r26, 0x03	; 3
    1cac:	93 83       	std	Z+3, r25	; 0x03
    1cae:	82 83       	std	Z+2, r24	; 0x02
    1cb0:	21 15       	cp	r18, r1
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	29 f4       	brne	.+10     	; 0x1cc0 <free+0x9c>
    1cb6:	f0 93 c7 03 	sts	0x03C7, r31
    1cba:	e0 93 c6 03 	sts	0x03C6, r30
    1cbe:	3e c0       	rjmp	.+124    	; 0x1d3c <free+0x118>
    1cc0:	d9 01       	movw	r26, r18
    1cc2:	13 96       	adiw	r26, 0x03	; 3
    1cc4:	fc 93       	st	X, r31
    1cc6:	ee 93       	st	-X, r30
    1cc8:	12 97       	sbiw	r26, 0x02	; 2
    1cca:	4d 91       	ld	r20, X+
    1ccc:	5d 91       	ld	r21, X+
    1cce:	a4 0f       	add	r26, r20
    1cd0:	b5 1f       	adc	r27, r21
    1cd2:	ea 17       	cp	r30, r26
    1cd4:	fb 07       	cpc	r31, r27
    1cd6:	79 f4       	brne	.+30     	; 0x1cf6 <free+0xd2>
    1cd8:	80 81       	ld	r24, Z
    1cda:	91 81       	ldd	r25, Z+1	; 0x01
    1cdc:	84 0f       	add	r24, r20
    1cde:	95 1f       	adc	r25, r21
    1ce0:	02 96       	adiw	r24, 0x02	; 2
    1ce2:	d9 01       	movw	r26, r18
    1ce4:	11 96       	adiw	r26, 0x01	; 1
    1ce6:	9c 93       	st	X, r25
    1ce8:	8e 93       	st	-X, r24
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	13 96       	adiw	r26, 0x03	; 3
    1cf0:	9c 93       	st	X, r25
    1cf2:	8e 93       	st	-X, r24
    1cf4:	12 97       	sbiw	r26, 0x02	; 2
    1cf6:	e0 e0       	ldi	r30, 0x00	; 0
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	19 f0       	breq	.+6      	; 0x1d08 <free+0xe4>
    1d02:	fe 01       	movw	r30, r28
    1d04:	ec 01       	movw	r28, r24
    1d06:	f9 cf       	rjmp	.-14     	; 0x1cfa <free+0xd6>
    1d08:	ce 01       	movw	r24, r28
    1d0a:	02 96       	adiw	r24, 0x02	; 2
    1d0c:	28 81       	ld	r18, Y
    1d0e:	39 81       	ldd	r19, Y+1	; 0x01
    1d10:	82 0f       	add	r24, r18
    1d12:	93 1f       	adc	r25, r19
    1d14:	20 91 c4 03 	lds	r18, 0x03C4
    1d18:	30 91 c5 03 	lds	r19, 0x03C5
    1d1c:	28 17       	cp	r18, r24
    1d1e:	39 07       	cpc	r19, r25
    1d20:	69 f4       	brne	.+26     	; 0x1d3c <free+0x118>
    1d22:	30 97       	sbiw	r30, 0x00	; 0
    1d24:	29 f4       	brne	.+10     	; 0x1d30 <free+0x10c>
    1d26:	10 92 c7 03 	sts	0x03C7, r1
    1d2a:	10 92 c6 03 	sts	0x03C6, r1
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <free+0x110>
    1d30:	13 82       	std	Z+3, r1	; 0x03
    1d32:	12 82       	std	Z+2, r1	; 0x02
    1d34:	d0 93 c5 03 	sts	0x03C5, r29
    1d38:	c0 93 c4 03 	sts	0x03C4, r28
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <fdevopen>:
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	ec 01       	movw	r28, r24
    1d4c:	8b 01       	movw	r16, r22
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	31 f4       	brne	.+12     	; 0x1d5e <fdevopen+0x1c>
    1d52:	61 15       	cp	r22, r1
    1d54:	71 05       	cpc	r23, r1
    1d56:	19 f4       	brne	.+6      	; 0x1d5e <fdevopen+0x1c>
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	38 c0       	rjmp	.+112    	; 0x1dce <fdevopen+0x8c>
    1d5e:	6e e0       	ldi	r22, 0x0E	; 14
    1d60:	70 e0       	ldi	r23, 0x00	; 0
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <calloc>
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	00 97       	sbiw	r24, 0x00	; 0
    1d6e:	a1 f3       	breq	.-24     	; 0x1d58 <fdevopen+0x16>
    1d70:	80 e8       	ldi	r24, 0x80	; 128
    1d72:	83 83       	std	Z+3, r24	; 0x03
    1d74:	01 15       	cp	r16, r1
    1d76:	11 05       	cpc	r17, r1
    1d78:	71 f0       	breq	.+28     	; 0x1d96 <fdevopen+0x54>
    1d7a:	13 87       	std	Z+11, r17	; 0x0b
    1d7c:	02 87       	std	Z+10, r16	; 0x0a
    1d7e:	81 e8       	ldi	r24, 0x81	; 129
    1d80:	83 83       	std	Z+3, r24	; 0x03
    1d82:	80 91 c8 03 	lds	r24, 0x03C8
    1d86:	90 91 c9 03 	lds	r25, 0x03C9
    1d8a:	89 2b       	or	r24, r25
    1d8c:	21 f4       	brne	.+8      	; 0x1d96 <fdevopen+0x54>
    1d8e:	f0 93 c9 03 	sts	0x03C9, r31
    1d92:	e0 93 c8 03 	sts	0x03C8, r30
    1d96:	20 97       	sbiw	r28, 0x00	; 0
    1d98:	c9 f0       	breq	.+50     	; 0x1dcc <fdevopen+0x8a>
    1d9a:	d1 87       	std	Z+9, r29	; 0x09
    1d9c:	c0 87       	std	Z+8, r28	; 0x08
    1d9e:	83 81       	ldd	r24, Z+3	; 0x03
    1da0:	82 60       	ori	r24, 0x02	; 2
    1da2:	83 83       	std	Z+3, r24	; 0x03
    1da4:	80 91 ca 03 	lds	r24, 0x03CA
    1da8:	90 91 cb 03 	lds	r25, 0x03CB
    1dac:	89 2b       	or	r24, r25
    1dae:	71 f4       	brne	.+28     	; 0x1dcc <fdevopen+0x8a>
    1db0:	f0 93 cb 03 	sts	0x03CB, r31
    1db4:	e0 93 ca 03 	sts	0x03CA, r30
    1db8:	80 91 cc 03 	lds	r24, 0x03CC
    1dbc:	90 91 cd 03 	lds	r25, 0x03CD
    1dc0:	89 2b       	or	r24, r25
    1dc2:	21 f4       	brne	.+8      	; 0x1dcc <fdevopen+0x8a>
    1dc4:	f0 93 cd 03 	sts	0x03CD, r31
    1dc8:	e0 93 cc 03 	sts	0x03CC, r30
    1dcc:	cf 01       	movw	r24, r30
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	08 95       	ret

00001dd8 <fprintf>:
    1dd8:	a0 e0       	ldi	r26, 0x00	; 0
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e2 ef       	ldi	r30, 0xF2	; 242
    1dde:	fe e0       	ldi	r31, 0x0E	; 14
    1de0:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__prologue_saves__+0x20>
    1de4:	ae 01       	movw	r20, r28
    1de6:	47 5f       	subi	r20, 0xF7	; 247
    1de8:	5f 4f       	sbci	r21, 0xFF	; 255
    1dea:	6f 81       	ldd	r22, Y+7	; 0x07
    1dec:	78 85       	ldd	r23, Y+8	; 0x08
    1dee:	8d 81       	ldd	r24, Y+5	; 0x05
    1df0:	9e 81       	ldd	r25, Y+6	; 0x06
    1df2:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <vfprintf>
    1df6:	e2 e0       	ldi	r30, 0x02	; 2
    1df8:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__+0x20>

00001dfc <fputc>:
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	18 2f       	mov	r17, r24
    1e06:	09 2f       	mov	r16, r25
    1e08:	eb 01       	movw	r28, r22
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	81 fd       	sbrc	r24, 1
    1e0e:	03 c0       	rjmp	.+6      	; 0x1e16 <fputc+0x1a>
    1e10:	8f ef       	ldi	r24, 0xFF	; 255
    1e12:	9f ef       	ldi	r25, 0xFF	; 255
    1e14:	20 c0       	rjmp	.+64     	; 0x1e56 <fputc+0x5a>
    1e16:	82 ff       	sbrs	r24, 2
    1e18:	10 c0       	rjmp	.+32     	; 0x1e3a <fputc+0x3e>
    1e1a:	4e 81       	ldd	r20, Y+6	; 0x06
    1e1c:	5f 81       	ldd	r21, Y+7	; 0x07
    1e1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e20:	3d 81       	ldd	r19, Y+5	; 0x05
    1e22:	42 17       	cp	r20, r18
    1e24:	53 07       	cpc	r21, r19
    1e26:	7c f4       	brge	.+30     	; 0x1e46 <fputc+0x4a>
    1e28:	e8 81       	ld	r30, Y
    1e2a:	f9 81       	ldd	r31, Y+1	; 0x01
    1e2c:	9f 01       	movw	r18, r30
    1e2e:	2f 5f       	subi	r18, 0xFF	; 255
    1e30:	3f 4f       	sbci	r19, 0xFF	; 255
    1e32:	39 83       	std	Y+1, r19	; 0x01
    1e34:	28 83       	st	Y, r18
    1e36:	10 83       	st	Z, r17
    1e38:	06 c0       	rjmp	.+12     	; 0x1e46 <fputc+0x4a>
    1e3a:	e8 85       	ldd	r30, Y+8	; 0x08
    1e3c:	f9 85       	ldd	r31, Y+9	; 0x09
    1e3e:	81 2f       	mov	r24, r17
    1e40:	09 95       	icall
    1e42:	89 2b       	or	r24, r25
    1e44:	29 f7       	brne	.-54     	; 0x1e10 <fputc+0x14>
    1e46:	2e 81       	ldd	r18, Y+6	; 0x06
    1e48:	3f 81       	ldd	r19, Y+7	; 0x07
    1e4a:	2f 5f       	subi	r18, 0xFF	; 255
    1e4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4e:	3f 83       	std	Y+7, r19	; 0x07
    1e50:	2e 83       	std	Y+6, r18	; 0x06
    1e52:	81 2f       	mov	r24, r17
    1e54:	90 2f       	mov	r25, r16
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	08 95       	ret

00001e60 <fputs>:
    1e60:	ef 92       	push	r14
    1e62:	ff 92       	push	r15
    1e64:	0f 93       	push	r16
    1e66:	1f 93       	push	r17
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	8b 01       	movw	r16, r22
    1e6e:	db 01       	movw	r26, r22
    1e70:	13 96       	adiw	r26, 0x03	; 3
    1e72:	2c 91       	ld	r18, X
    1e74:	21 ff       	sbrs	r18, 1
    1e76:	16 c0       	rjmp	.+44     	; 0x1ea4 <fputs+0x44>
    1e78:	ec 01       	movw	r28, r24
    1e7a:	e1 2c       	mov	r14, r1
    1e7c:	f1 2c       	mov	r15, r1
    1e7e:	89 91       	ld	r24, Y+
    1e80:	88 23       	and	r24, r24
    1e82:	71 f0       	breq	.+28     	; 0x1ea0 <fputs+0x40>
    1e84:	d8 01       	movw	r26, r16
    1e86:	18 96       	adiw	r26, 0x08	; 8
    1e88:	ed 91       	ld	r30, X+
    1e8a:	fc 91       	ld	r31, X
    1e8c:	19 97       	sbiw	r26, 0x09	; 9
    1e8e:	b8 01       	movw	r22, r16
    1e90:	09 95       	icall
    1e92:	89 2b       	or	r24, r25
    1e94:	a1 f3       	breq	.-24     	; 0x1e7e <fputs+0x1e>
    1e96:	ee 24       	eor	r14, r14
    1e98:	ea 94       	dec	r14
    1e9a:	ff 24       	eor	r15, r15
    1e9c:	fa 94       	dec	r15
    1e9e:	ef cf       	rjmp	.-34     	; 0x1e7e <fputs+0x1e>
    1ea0:	c7 01       	movw	r24, r14
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <fputs+0x48>
    1ea4:	8f ef       	ldi	r24, 0xFF	; 255
    1ea6:	9f ef       	ldi	r25, 0xFF	; 255
    1ea8:	cd b7       	in	r28, 0x3d	; 61
    1eaa:	de b7       	in	r29, 0x3e	; 62
    1eac:	e6 e0       	ldi	r30, 0x06	; 6
    1eae:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

00001eb2 <printf>:
    1eb2:	a0 e0       	ldi	r26, 0x00	; 0
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	ef e5       	ldi	r30, 0x5F	; 95
    1eb8:	ff e0       	ldi	r31, 0x0F	; 15
    1eba:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__prologue_saves__+0x20>
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	35 96       	adiw	r30, 0x05	; 5
    1ec2:	61 91       	ld	r22, Z+
    1ec4:	71 91       	ld	r23, Z+
    1ec6:	af 01       	movw	r20, r30
    1ec8:	80 91 ca 03 	lds	r24, 0x03CA
    1ecc:	90 91 cb 03 	lds	r25, 0x03CB
    1ed0:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <vfprintf>
    1ed4:	e2 e0       	ldi	r30, 0x02	; 2
    1ed6:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__+0x20>

00001eda <puts>:
    1eda:	0f 93       	push	r16
    1edc:	1f 93       	push	r17
    1ede:	cf 93       	push	r28
    1ee0:	df 93       	push	r29
    1ee2:	e0 91 ca 03 	lds	r30, 0x03CA
    1ee6:	f0 91 cb 03 	lds	r31, 0x03CB
    1eea:	23 81       	ldd	r18, Z+3	; 0x03
    1eec:	21 ff       	sbrs	r18, 1
    1eee:	1b c0       	rjmp	.+54     	; 0x1f26 <puts+0x4c>
    1ef0:	ec 01       	movw	r28, r24
    1ef2:	00 e0       	ldi	r16, 0x00	; 0
    1ef4:	10 e0       	ldi	r17, 0x00	; 0
    1ef6:	89 91       	ld	r24, Y+
    1ef8:	60 91 ca 03 	lds	r22, 0x03CA
    1efc:	70 91 cb 03 	lds	r23, 0x03CB
    1f00:	db 01       	movw	r26, r22
    1f02:	18 96       	adiw	r26, 0x08	; 8
    1f04:	ed 91       	ld	r30, X+
    1f06:	fc 91       	ld	r31, X
    1f08:	19 97       	sbiw	r26, 0x09	; 9
    1f0a:	88 23       	and	r24, r24
    1f0c:	31 f0       	breq	.+12     	; 0x1f1a <puts+0x40>
    1f0e:	09 95       	icall
    1f10:	89 2b       	or	r24, r25
    1f12:	89 f3       	breq	.-30     	; 0x1ef6 <puts+0x1c>
    1f14:	0f ef       	ldi	r16, 0xFF	; 255
    1f16:	1f ef       	ldi	r17, 0xFF	; 255
    1f18:	ee cf       	rjmp	.-36     	; 0x1ef6 <puts+0x1c>
    1f1a:	8a e0       	ldi	r24, 0x0A	; 10
    1f1c:	09 95       	icall
    1f1e:	89 2b       	or	r24, r25
    1f20:	11 f4       	brne	.+4      	; 0x1f26 <puts+0x4c>
    1f22:	c8 01       	movw	r24, r16
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <puts+0x50>
    1f26:	8f ef       	ldi	r24, 0xFF	; 255
    1f28:	9f ef       	ldi	r25, 0xFF	; 255
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	08 95       	ret

00001f34 <vfprintf>:
    1f34:	ac e0       	ldi	r26, 0x0C	; 12
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e0 ea       	ldi	r30, 0xA0	; 160
    1f3a:	ff e0       	ldi	r31, 0x0F	; 15
    1f3c:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__>
    1f40:	7c 01       	movw	r14, r24
    1f42:	6b 01       	movw	r12, r22
    1f44:	8a 01       	movw	r16, r20
    1f46:	fc 01       	movw	r30, r24
    1f48:	17 82       	std	Z+7, r1	; 0x07
    1f4a:	16 82       	std	Z+6, r1	; 0x06
    1f4c:	83 81       	ldd	r24, Z+3	; 0x03
    1f4e:	81 ff       	sbrs	r24, 1
    1f50:	bd c1       	rjmp	.+890    	; 0x22cc <vfprintf+0x398>
    1f52:	ce 01       	movw	r24, r28
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	4c 01       	movw	r8, r24
    1f58:	f7 01       	movw	r30, r14
    1f5a:	93 81       	ldd	r25, Z+3	; 0x03
    1f5c:	f6 01       	movw	r30, r12
    1f5e:	93 fd       	sbrc	r25, 3
    1f60:	85 91       	lpm	r24, Z+
    1f62:	93 ff       	sbrs	r25, 3
    1f64:	81 91       	ld	r24, Z+
    1f66:	6f 01       	movw	r12, r30
    1f68:	88 23       	and	r24, r24
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <vfprintf+0x3a>
    1f6c:	ab c1       	rjmp	.+854    	; 0x22c4 <vfprintf+0x390>
    1f6e:	85 32       	cpi	r24, 0x25	; 37
    1f70:	39 f4       	brne	.+14     	; 0x1f80 <vfprintf+0x4c>
    1f72:	93 fd       	sbrc	r25, 3
    1f74:	85 91       	lpm	r24, Z+
    1f76:	93 ff       	sbrs	r25, 3
    1f78:	81 91       	ld	r24, Z+
    1f7a:	6f 01       	movw	r12, r30
    1f7c:	85 32       	cpi	r24, 0x25	; 37
    1f7e:	29 f4       	brne	.+10     	; 0x1f8a <vfprintf+0x56>
    1f80:	b7 01       	movw	r22, r14
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <fputc>
    1f88:	e7 cf       	rjmp	.-50     	; 0x1f58 <vfprintf+0x24>
    1f8a:	51 2c       	mov	r5, r1
    1f8c:	31 2c       	mov	r3, r1
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	20 32       	cpi	r18, 0x20	; 32
    1f92:	a0 f4       	brcc	.+40     	; 0x1fbc <vfprintf+0x88>
    1f94:	8b 32       	cpi	r24, 0x2B	; 43
    1f96:	69 f0       	breq	.+26     	; 0x1fb2 <vfprintf+0x7e>
    1f98:	30 f4       	brcc	.+12     	; 0x1fa6 <vfprintf+0x72>
    1f9a:	80 32       	cpi	r24, 0x20	; 32
    1f9c:	59 f0       	breq	.+22     	; 0x1fb4 <vfprintf+0x80>
    1f9e:	83 32       	cpi	r24, 0x23	; 35
    1fa0:	69 f4       	brne	.+26     	; 0x1fbc <vfprintf+0x88>
    1fa2:	20 61       	ori	r18, 0x10	; 16
    1fa4:	2c c0       	rjmp	.+88     	; 0x1ffe <vfprintf+0xca>
    1fa6:	8d 32       	cpi	r24, 0x2D	; 45
    1fa8:	39 f0       	breq	.+14     	; 0x1fb8 <vfprintf+0x84>
    1faa:	80 33       	cpi	r24, 0x30	; 48
    1fac:	39 f4       	brne	.+14     	; 0x1fbc <vfprintf+0x88>
    1fae:	21 60       	ori	r18, 0x01	; 1
    1fb0:	26 c0       	rjmp	.+76     	; 0x1ffe <vfprintf+0xca>
    1fb2:	22 60       	ori	r18, 0x02	; 2
    1fb4:	24 60       	ori	r18, 0x04	; 4
    1fb6:	23 c0       	rjmp	.+70     	; 0x1ffe <vfprintf+0xca>
    1fb8:	28 60       	ori	r18, 0x08	; 8
    1fba:	21 c0       	rjmp	.+66     	; 0x1ffe <vfprintf+0xca>
    1fbc:	27 fd       	sbrc	r18, 7
    1fbe:	27 c0       	rjmp	.+78     	; 0x200e <vfprintf+0xda>
    1fc0:	30 ed       	ldi	r19, 0xD0	; 208
    1fc2:	38 0f       	add	r19, r24
    1fc4:	3a 30       	cpi	r19, 0x0A	; 10
    1fc6:	78 f4       	brcc	.+30     	; 0x1fe6 <vfprintf+0xb2>
    1fc8:	26 ff       	sbrs	r18, 6
    1fca:	06 c0       	rjmp	.+12     	; 0x1fd8 <vfprintf+0xa4>
    1fcc:	fa e0       	ldi	r31, 0x0A	; 10
    1fce:	5f 9e       	mul	r5, r31
    1fd0:	30 0d       	add	r19, r0
    1fd2:	11 24       	eor	r1, r1
    1fd4:	53 2e       	mov	r5, r19
    1fd6:	13 c0       	rjmp	.+38     	; 0x1ffe <vfprintf+0xca>
    1fd8:	8a e0       	ldi	r24, 0x0A	; 10
    1fda:	38 9e       	mul	r3, r24
    1fdc:	30 0d       	add	r19, r0
    1fde:	11 24       	eor	r1, r1
    1fe0:	33 2e       	mov	r3, r19
    1fe2:	20 62       	ori	r18, 0x20	; 32
    1fe4:	0c c0       	rjmp	.+24     	; 0x1ffe <vfprintf+0xca>
    1fe6:	8e 32       	cpi	r24, 0x2E	; 46
    1fe8:	21 f4       	brne	.+8      	; 0x1ff2 <vfprintf+0xbe>
    1fea:	26 fd       	sbrc	r18, 6
    1fec:	6b c1       	rjmp	.+726    	; 0x22c4 <vfprintf+0x390>
    1fee:	20 64       	ori	r18, 0x40	; 64
    1ff0:	06 c0       	rjmp	.+12     	; 0x1ffe <vfprintf+0xca>
    1ff2:	8c 36       	cpi	r24, 0x6C	; 108
    1ff4:	11 f4       	brne	.+4      	; 0x1ffa <vfprintf+0xc6>
    1ff6:	20 68       	ori	r18, 0x80	; 128
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <vfprintf+0xca>
    1ffa:	88 36       	cpi	r24, 0x68	; 104
    1ffc:	41 f4       	brne	.+16     	; 0x200e <vfprintf+0xda>
    1ffe:	f6 01       	movw	r30, r12
    2000:	93 fd       	sbrc	r25, 3
    2002:	85 91       	lpm	r24, Z+
    2004:	93 ff       	sbrs	r25, 3
    2006:	81 91       	ld	r24, Z+
    2008:	6f 01       	movw	r12, r30
    200a:	81 11       	cpse	r24, r1
    200c:	c1 cf       	rjmp	.-126    	; 0x1f90 <vfprintf+0x5c>
    200e:	98 2f       	mov	r25, r24
    2010:	9f 7d       	andi	r25, 0xDF	; 223
    2012:	95 54       	subi	r25, 0x45	; 69
    2014:	93 30       	cpi	r25, 0x03	; 3
    2016:	28 f4       	brcc	.+10     	; 0x2022 <vfprintf+0xee>
    2018:	0c 5f       	subi	r16, 0xFC	; 252
    201a:	1f 4f       	sbci	r17, 0xFF	; 255
    201c:	ff e3       	ldi	r31, 0x3F	; 63
    201e:	f9 83       	std	Y+1, r31	; 0x01
    2020:	0d c0       	rjmp	.+26     	; 0x203c <vfprintf+0x108>
    2022:	83 36       	cpi	r24, 0x63	; 99
    2024:	31 f0       	breq	.+12     	; 0x2032 <vfprintf+0xfe>
    2026:	83 37       	cpi	r24, 0x73	; 115
    2028:	71 f0       	breq	.+28     	; 0x2046 <vfprintf+0x112>
    202a:	83 35       	cpi	r24, 0x53	; 83
    202c:	09 f0       	breq	.+2      	; 0x2030 <vfprintf+0xfc>
    202e:	5b c0       	rjmp	.+182    	; 0x20e6 <vfprintf+0x1b2>
    2030:	22 c0       	rjmp	.+68     	; 0x2076 <vfprintf+0x142>
    2032:	f8 01       	movw	r30, r16
    2034:	80 81       	ld	r24, Z
    2036:	89 83       	std	Y+1, r24	; 0x01
    2038:	0e 5f       	subi	r16, 0xFE	; 254
    203a:	1f 4f       	sbci	r17, 0xFF	; 255
    203c:	44 24       	eor	r4, r4
    203e:	43 94       	inc	r4
    2040:	51 2c       	mov	r5, r1
    2042:	54 01       	movw	r10, r8
    2044:	15 c0       	rjmp	.+42     	; 0x2070 <vfprintf+0x13c>
    2046:	38 01       	movw	r6, r16
    2048:	f2 e0       	ldi	r31, 0x02	; 2
    204a:	6f 0e       	add	r6, r31
    204c:	71 1c       	adc	r7, r1
    204e:	f8 01       	movw	r30, r16
    2050:	a0 80       	ld	r10, Z
    2052:	b1 80       	ldd	r11, Z+1	; 0x01
    2054:	26 ff       	sbrs	r18, 6
    2056:	03 c0       	rjmp	.+6      	; 0x205e <vfprintf+0x12a>
    2058:	65 2d       	mov	r22, r5
    205a:	70 e0       	ldi	r23, 0x00	; 0
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <vfprintf+0x12e>
    205e:	6f ef       	ldi	r22, 0xFF	; 255
    2060:	7f ef       	ldi	r23, 0xFF	; 255
    2062:	c5 01       	movw	r24, r10
    2064:	2c 87       	std	Y+12, r18	; 0x0c
    2066:	0e 94 9a 11 	call	0x2334	; 0x2334 <strnlen>
    206a:	2c 01       	movw	r4, r24
    206c:	83 01       	movw	r16, r6
    206e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2070:	2f 77       	andi	r18, 0x7F	; 127
    2072:	22 2e       	mov	r2, r18
    2074:	17 c0       	rjmp	.+46     	; 0x20a4 <vfprintf+0x170>
    2076:	38 01       	movw	r6, r16
    2078:	f2 e0       	ldi	r31, 0x02	; 2
    207a:	6f 0e       	add	r6, r31
    207c:	71 1c       	adc	r7, r1
    207e:	f8 01       	movw	r30, r16
    2080:	a0 80       	ld	r10, Z
    2082:	b1 80       	ldd	r11, Z+1	; 0x01
    2084:	26 ff       	sbrs	r18, 6
    2086:	03 c0       	rjmp	.+6      	; 0x208e <vfprintf+0x15a>
    2088:	65 2d       	mov	r22, r5
    208a:	70 e0       	ldi	r23, 0x00	; 0
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <vfprintf+0x15e>
    208e:	6f ef       	ldi	r22, 0xFF	; 255
    2090:	7f ef       	ldi	r23, 0xFF	; 255
    2092:	c5 01       	movw	r24, r10
    2094:	2c 87       	std	Y+12, r18	; 0x0c
    2096:	0e 94 88 11 	call	0x2310	; 0x2310 <strnlen_P>
    209a:	2c 01       	movw	r4, r24
    209c:	2c 85       	ldd	r18, Y+12	; 0x0c
    209e:	20 68       	ori	r18, 0x80	; 128
    20a0:	22 2e       	mov	r2, r18
    20a2:	83 01       	movw	r16, r6
    20a4:	23 fc       	sbrc	r2, 3
    20a6:	1b c0       	rjmp	.+54     	; 0x20de <vfprintf+0x1aa>
    20a8:	83 2d       	mov	r24, r3
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	48 16       	cp	r4, r24
    20ae:	59 06       	cpc	r5, r25
    20b0:	b0 f4       	brcc	.+44     	; 0x20de <vfprintf+0x1aa>
    20b2:	b7 01       	movw	r22, r14
    20b4:	80 e2       	ldi	r24, 0x20	; 32
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <fputc>
    20bc:	3a 94       	dec	r3
    20be:	f4 cf       	rjmp	.-24     	; 0x20a8 <vfprintf+0x174>
    20c0:	f5 01       	movw	r30, r10
    20c2:	27 fc       	sbrc	r2, 7
    20c4:	85 91       	lpm	r24, Z+
    20c6:	27 fe       	sbrs	r2, 7
    20c8:	81 91       	ld	r24, Z+
    20ca:	5f 01       	movw	r10, r30
    20cc:	b7 01       	movw	r22, r14
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <fputc>
    20d4:	31 10       	cpse	r3, r1
    20d6:	3a 94       	dec	r3
    20d8:	f1 e0       	ldi	r31, 0x01	; 1
    20da:	4f 1a       	sub	r4, r31
    20dc:	51 08       	sbc	r5, r1
    20de:	41 14       	cp	r4, r1
    20e0:	51 04       	cpc	r5, r1
    20e2:	71 f7       	brne	.-36     	; 0x20c0 <vfprintf+0x18c>
    20e4:	e5 c0       	rjmp	.+458    	; 0x22b0 <vfprintf+0x37c>
    20e6:	84 36       	cpi	r24, 0x64	; 100
    20e8:	11 f0       	breq	.+4      	; 0x20ee <vfprintf+0x1ba>
    20ea:	89 36       	cpi	r24, 0x69	; 105
    20ec:	39 f5       	brne	.+78     	; 0x213c <vfprintf+0x208>
    20ee:	f8 01       	movw	r30, r16
    20f0:	27 ff       	sbrs	r18, 7
    20f2:	07 c0       	rjmp	.+14     	; 0x2102 <vfprintf+0x1ce>
    20f4:	60 81       	ld	r22, Z
    20f6:	71 81       	ldd	r23, Z+1	; 0x01
    20f8:	82 81       	ldd	r24, Z+2	; 0x02
    20fa:	93 81       	ldd	r25, Z+3	; 0x03
    20fc:	0c 5f       	subi	r16, 0xFC	; 252
    20fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2100:	08 c0       	rjmp	.+16     	; 0x2112 <vfprintf+0x1de>
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	88 27       	eor	r24, r24
    2108:	77 fd       	sbrc	r23, 7
    210a:	80 95       	com	r24
    210c:	98 2f       	mov	r25, r24
    210e:	0e 5f       	subi	r16, 0xFE	; 254
    2110:	1f 4f       	sbci	r17, 0xFF	; 255
    2112:	2f 76       	andi	r18, 0x6F	; 111
    2114:	b2 2e       	mov	r11, r18
    2116:	97 ff       	sbrs	r25, 7
    2118:	09 c0       	rjmp	.+18     	; 0x212c <vfprintf+0x1f8>
    211a:	90 95       	com	r25
    211c:	80 95       	com	r24
    211e:	70 95       	com	r23
    2120:	61 95       	neg	r22
    2122:	7f 4f       	sbci	r23, 0xFF	; 255
    2124:	8f 4f       	sbci	r24, 0xFF	; 255
    2126:	9f 4f       	sbci	r25, 0xFF	; 255
    2128:	20 68       	ori	r18, 0x80	; 128
    212a:	b2 2e       	mov	r11, r18
    212c:	2a e0       	ldi	r18, 0x0A	; 10
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	a4 01       	movw	r20, r8
    2132:	0e 94 a5 11 	call	0x234a	; 0x234a <__ultoa_invert>
    2136:	a8 2e       	mov	r10, r24
    2138:	a8 18       	sub	r10, r8
    213a:	44 c0       	rjmp	.+136    	; 0x21c4 <vfprintf+0x290>
    213c:	85 37       	cpi	r24, 0x75	; 117
    213e:	29 f4       	brne	.+10     	; 0x214a <vfprintf+0x216>
    2140:	2f 7e       	andi	r18, 0xEF	; 239
    2142:	b2 2e       	mov	r11, r18
    2144:	2a e0       	ldi	r18, 0x0A	; 10
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	25 c0       	rjmp	.+74     	; 0x2194 <vfprintf+0x260>
    214a:	f2 2f       	mov	r31, r18
    214c:	f9 7f       	andi	r31, 0xF9	; 249
    214e:	bf 2e       	mov	r11, r31
    2150:	8f 36       	cpi	r24, 0x6F	; 111
    2152:	c1 f0       	breq	.+48     	; 0x2184 <vfprintf+0x250>
    2154:	18 f4       	brcc	.+6      	; 0x215c <vfprintf+0x228>
    2156:	88 35       	cpi	r24, 0x58	; 88
    2158:	79 f0       	breq	.+30     	; 0x2178 <vfprintf+0x244>
    215a:	b4 c0       	rjmp	.+360    	; 0x22c4 <vfprintf+0x390>
    215c:	80 37       	cpi	r24, 0x70	; 112
    215e:	19 f0       	breq	.+6      	; 0x2166 <vfprintf+0x232>
    2160:	88 37       	cpi	r24, 0x78	; 120
    2162:	21 f0       	breq	.+8      	; 0x216c <vfprintf+0x238>
    2164:	af c0       	rjmp	.+350    	; 0x22c4 <vfprintf+0x390>
    2166:	2f 2f       	mov	r18, r31
    2168:	20 61       	ori	r18, 0x10	; 16
    216a:	b2 2e       	mov	r11, r18
    216c:	b4 fe       	sbrs	r11, 4
    216e:	0d c0       	rjmp	.+26     	; 0x218a <vfprintf+0x256>
    2170:	8b 2d       	mov	r24, r11
    2172:	84 60       	ori	r24, 0x04	; 4
    2174:	b8 2e       	mov	r11, r24
    2176:	09 c0       	rjmp	.+18     	; 0x218a <vfprintf+0x256>
    2178:	24 ff       	sbrs	r18, 4
    217a:	0a c0       	rjmp	.+20     	; 0x2190 <vfprintf+0x25c>
    217c:	9f 2f       	mov	r25, r31
    217e:	96 60       	ori	r25, 0x06	; 6
    2180:	b9 2e       	mov	r11, r25
    2182:	06 c0       	rjmp	.+12     	; 0x2190 <vfprintf+0x25c>
    2184:	28 e0       	ldi	r18, 0x08	; 8
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	05 c0       	rjmp	.+10     	; 0x2194 <vfprintf+0x260>
    218a:	20 e1       	ldi	r18, 0x10	; 16
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <vfprintf+0x260>
    2190:	20 e1       	ldi	r18, 0x10	; 16
    2192:	32 e0       	ldi	r19, 0x02	; 2
    2194:	f8 01       	movw	r30, r16
    2196:	b7 fe       	sbrs	r11, 7
    2198:	07 c0       	rjmp	.+14     	; 0x21a8 <vfprintf+0x274>
    219a:	60 81       	ld	r22, Z
    219c:	71 81       	ldd	r23, Z+1	; 0x01
    219e:	82 81       	ldd	r24, Z+2	; 0x02
    21a0:	93 81       	ldd	r25, Z+3	; 0x03
    21a2:	0c 5f       	subi	r16, 0xFC	; 252
    21a4:	1f 4f       	sbci	r17, 0xFF	; 255
    21a6:	06 c0       	rjmp	.+12     	; 0x21b4 <vfprintf+0x280>
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	0e 5f       	subi	r16, 0xFE	; 254
    21b2:	1f 4f       	sbci	r17, 0xFF	; 255
    21b4:	a4 01       	movw	r20, r8
    21b6:	0e 94 a5 11 	call	0x234a	; 0x234a <__ultoa_invert>
    21ba:	a8 2e       	mov	r10, r24
    21bc:	a8 18       	sub	r10, r8
    21be:	fb 2d       	mov	r31, r11
    21c0:	ff 77       	andi	r31, 0x7F	; 127
    21c2:	bf 2e       	mov	r11, r31
    21c4:	b6 fe       	sbrs	r11, 6
    21c6:	0b c0       	rjmp	.+22     	; 0x21de <vfprintf+0x2aa>
    21c8:	2b 2d       	mov	r18, r11
    21ca:	2e 7f       	andi	r18, 0xFE	; 254
    21cc:	a5 14       	cp	r10, r5
    21ce:	50 f4       	brcc	.+20     	; 0x21e4 <vfprintf+0x2b0>
    21d0:	b4 fe       	sbrs	r11, 4
    21d2:	0a c0       	rjmp	.+20     	; 0x21e8 <vfprintf+0x2b4>
    21d4:	b2 fc       	sbrc	r11, 2
    21d6:	08 c0       	rjmp	.+16     	; 0x21e8 <vfprintf+0x2b4>
    21d8:	2b 2d       	mov	r18, r11
    21da:	2e 7e       	andi	r18, 0xEE	; 238
    21dc:	05 c0       	rjmp	.+10     	; 0x21e8 <vfprintf+0x2b4>
    21de:	7a 2c       	mov	r7, r10
    21e0:	2b 2d       	mov	r18, r11
    21e2:	03 c0       	rjmp	.+6      	; 0x21ea <vfprintf+0x2b6>
    21e4:	7a 2c       	mov	r7, r10
    21e6:	01 c0       	rjmp	.+2      	; 0x21ea <vfprintf+0x2b6>
    21e8:	75 2c       	mov	r7, r5
    21ea:	24 ff       	sbrs	r18, 4
    21ec:	0d c0       	rjmp	.+26     	; 0x2208 <vfprintf+0x2d4>
    21ee:	fe 01       	movw	r30, r28
    21f0:	ea 0d       	add	r30, r10
    21f2:	f1 1d       	adc	r31, r1
    21f4:	80 81       	ld	r24, Z
    21f6:	80 33       	cpi	r24, 0x30	; 48
    21f8:	11 f4       	brne	.+4      	; 0x21fe <vfprintf+0x2ca>
    21fa:	29 7e       	andi	r18, 0xE9	; 233
    21fc:	09 c0       	rjmp	.+18     	; 0x2210 <vfprintf+0x2dc>
    21fe:	22 ff       	sbrs	r18, 2
    2200:	06 c0       	rjmp	.+12     	; 0x220e <vfprintf+0x2da>
    2202:	73 94       	inc	r7
    2204:	73 94       	inc	r7
    2206:	04 c0       	rjmp	.+8      	; 0x2210 <vfprintf+0x2dc>
    2208:	82 2f       	mov	r24, r18
    220a:	86 78       	andi	r24, 0x86	; 134
    220c:	09 f0       	breq	.+2      	; 0x2210 <vfprintf+0x2dc>
    220e:	73 94       	inc	r7
    2210:	23 fd       	sbrc	r18, 3
    2212:	13 c0       	rjmp	.+38     	; 0x223a <vfprintf+0x306>
    2214:	20 ff       	sbrs	r18, 0
    2216:	06 c0       	rjmp	.+12     	; 0x2224 <vfprintf+0x2f0>
    2218:	5a 2c       	mov	r5, r10
    221a:	73 14       	cp	r7, r3
    221c:	18 f4       	brcc	.+6      	; 0x2224 <vfprintf+0x2f0>
    221e:	53 0c       	add	r5, r3
    2220:	57 18       	sub	r5, r7
    2222:	73 2c       	mov	r7, r3
    2224:	73 14       	cp	r7, r3
    2226:	68 f4       	brcc	.+26     	; 0x2242 <vfprintf+0x30e>
    2228:	b7 01       	movw	r22, r14
    222a:	80 e2       	ldi	r24, 0x20	; 32
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	2c 87       	std	Y+12, r18	; 0x0c
    2230:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <fputc>
    2234:	73 94       	inc	r7
    2236:	2c 85       	ldd	r18, Y+12	; 0x0c
    2238:	f5 cf       	rjmp	.-22     	; 0x2224 <vfprintf+0x2f0>
    223a:	73 14       	cp	r7, r3
    223c:	10 f4       	brcc	.+4      	; 0x2242 <vfprintf+0x30e>
    223e:	37 18       	sub	r3, r7
    2240:	01 c0       	rjmp	.+2      	; 0x2244 <vfprintf+0x310>
    2242:	31 2c       	mov	r3, r1
    2244:	24 ff       	sbrs	r18, 4
    2246:	12 c0       	rjmp	.+36     	; 0x226c <vfprintf+0x338>
    2248:	b7 01       	movw	r22, r14
    224a:	80 e3       	ldi	r24, 0x30	; 48
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	2c 87       	std	Y+12, r18	; 0x0c
    2250:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <fputc>
    2254:	2c 85       	ldd	r18, Y+12	; 0x0c
    2256:	22 ff       	sbrs	r18, 2
    2258:	17 c0       	rjmp	.+46     	; 0x2288 <vfprintf+0x354>
    225a:	21 ff       	sbrs	r18, 1
    225c:	03 c0       	rjmp	.+6      	; 0x2264 <vfprintf+0x330>
    225e:	88 e5       	ldi	r24, 0x58	; 88
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <vfprintf+0x334>
    2264:	88 e7       	ldi	r24, 0x78	; 120
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	b7 01       	movw	r22, r14
    226a:	0c c0       	rjmp	.+24     	; 0x2284 <vfprintf+0x350>
    226c:	82 2f       	mov	r24, r18
    226e:	86 78       	andi	r24, 0x86	; 134
    2270:	59 f0       	breq	.+22     	; 0x2288 <vfprintf+0x354>
    2272:	21 fd       	sbrc	r18, 1
    2274:	02 c0       	rjmp	.+4      	; 0x227a <vfprintf+0x346>
    2276:	80 e2       	ldi	r24, 0x20	; 32
    2278:	01 c0       	rjmp	.+2      	; 0x227c <vfprintf+0x348>
    227a:	8b e2       	ldi	r24, 0x2B	; 43
    227c:	27 fd       	sbrc	r18, 7
    227e:	8d e2       	ldi	r24, 0x2D	; 45
    2280:	b7 01       	movw	r22, r14
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <fputc>
    2288:	a5 14       	cp	r10, r5
    228a:	38 f4       	brcc	.+14     	; 0x229a <vfprintf+0x366>
    228c:	b7 01       	movw	r22, r14
    228e:	80 e3       	ldi	r24, 0x30	; 48
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <fputc>
    2296:	5a 94       	dec	r5
    2298:	f7 cf       	rjmp	.-18     	; 0x2288 <vfprintf+0x354>
    229a:	aa 94       	dec	r10
    229c:	f4 01       	movw	r30, r8
    229e:	ea 0d       	add	r30, r10
    22a0:	f1 1d       	adc	r31, r1
    22a2:	80 81       	ld	r24, Z
    22a4:	b7 01       	movw	r22, r14
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <fputc>
    22ac:	a1 10       	cpse	r10, r1
    22ae:	f5 cf       	rjmp	.-22     	; 0x229a <vfprintf+0x366>
    22b0:	33 20       	and	r3, r3
    22b2:	09 f4       	brne	.+2      	; 0x22b6 <vfprintf+0x382>
    22b4:	51 ce       	rjmp	.-862    	; 0x1f58 <vfprintf+0x24>
    22b6:	b7 01       	movw	r22, r14
    22b8:	80 e2       	ldi	r24, 0x20	; 32
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <fputc>
    22c0:	3a 94       	dec	r3
    22c2:	f6 cf       	rjmp	.-20     	; 0x22b0 <vfprintf+0x37c>
    22c4:	f7 01       	movw	r30, r14
    22c6:	86 81       	ldd	r24, Z+6	; 0x06
    22c8:	97 81       	ldd	r25, Z+7	; 0x07
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <vfprintf+0x39c>
    22cc:	8f ef       	ldi	r24, 0xFF	; 255
    22ce:	9f ef       	ldi	r25, 0xFF	; 255
    22d0:	2c 96       	adiw	r28, 0x0c	; 12
    22d2:	e2 e1       	ldi	r30, 0x12	; 18
    22d4:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__>

000022d8 <calloc>:
    22d8:	0f 93       	push	r16
    22da:	1f 93       	push	r17
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
    22e0:	86 9f       	mul	r24, r22
    22e2:	80 01       	movw	r16, r0
    22e4:	87 9f       	mul	r24, r23
    22e6:	10 0d       	add	r17, r0
    22e8:	96 9f       	mul	r25, r22
    22ea:	10 0d       	add	r17, r0
    22ec:	11 24       	eor	r1, r1
    22ee:	c8 01       	movw	r24, r16
    22f0:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <malloc>
    22f4:	ec 01       	movw	r28, r24
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	29 f0       	breq	.+10     	; 0x2304 <calloc+0x2c>
    22fa:	a8 01       	movw	r20, r16
    22fc:	60 e0       	ldi	r22, 0x00	; 0
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	0e 94 93 11 	call	0x2326	; 0x2326 <memset>
    2304:	ce 01       	movw	r24, r28
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	1f 91       	pop	r17
    230c:	0f 91       	pop	r16
    230e:	08 95       	ret

00002310 <strnlen_P>:
    2310:	fc 01       	movw	r30, r24
    2312:	05 90       	lpm	r0, Z+
    2314:	61 50       	subi	r22, 0x01	; 1
    2316:	70 40       	sbci	r23, 0x00	; 0
    2318:	01 10       	cpse	r0, r1
    231a:	d8 f7       	brcc	.-10     	; 0x2312 <strnlen_P+0x2>
    231c:	80 95       	com	r24
    231e:	90 95       	com	r25
    2320:	8e 0f       	add	r24, r30
    2322:	9f 1f       	adc	r25, r31
    2324:	08 95       	ret

00002326 <memset>:
    2326:	dc 01       	movw	r26, r24
    2328:	01 c0       	rjmp	.+2      	; 0x232c <memset+0x6>
    232a:	6d 93       	st	X+, r22
    232c:	41 50       	subi	r20, 0x01	; 1
    232e:	50 40       	sbci	r21, 0x00	; 0
    2330:	e0 f7       	brcc	.-8      	; 0x232a <memset+0x4>
    2332:	08 95       	ret

00002334 <strnlen>:
    2334:	fc 01       	movw	r30, r24
    2336:	61 50       	subi	r22, 0x01	; 1
    2338:	70 40       	sbci	r23, 0x00	; 0
    233a:	01 90       	ld	r0, Z+
    233c:	01 10       	cpse	r0, r1
    233e:	d8 f7       	brcc	.-10     	; 0x2336 <strnlen+0x2>
    2340:	80 95       	com	r24
    2342:	90 95       	com	r25
    2344:	8e 0f       	add	r24, r30
    2346:	9f 1f       	adc	r25, r31
    2348:	08 95       	ret

0000234a <__ultoa_invert>:
    234a:	fa 01       	movw	r30, r20
    234c:	aa 27       	eor	r26, r26
    234e:	28 30       	cpi	r18, 0x08	; 8
    2350:	51 f1       	breq	.+84     	; 0x23a6 <__ultoa_invert+0x5c>
    2352:	20 31       	cpi	r18, 0x10	; 16
    2354:	81 f1       	breq	.+96     	; 0x23b6 <__ultoa_invert+0x6c>
    2356:	e8 94       	clt
    2358:	6f 93       	push	r22
    235a:	6e 7f       	andi	r22, 0xFE	; 254
    235c:	6e 5f       	subi	r22, 0xFE	; 254
    235e:	7f 4f       	sbci	r23, 0xFF	; 255
    2360:	8f 4f       	sbci	r24, 0xFF	; 255
    2362:	9f 4f       	sbci	r25, 0xFF	; 255
    2364:	af 4f       	sbci	r26, 0xFF	; 255
    2366:	b1 e0       	ldi	r27, 0x01	; 1
    2368:	3e d0       	rcall	.+124    	; 0x23e6 <__ultoa_invert+0x9c>
    236a:	b4 e0       	ldi	r27, 0x04	; 4
    236c:	3c d0       	rcall	.+120    	; 0x23e6 <__ultoa_invert+0x9c>
    236e:	67 0f       	add	r22, r23
    2370:	78 1f       	adc	r23, r24
    2372:	89 1f       	adc	r24, r25
    2374:	9a 1f       	adc	r25, r26
    2376:	a1 1d       	adc	r26, r1
    2378:	68 0f       	add	r22, r24
    237a:	79 1f       	adc	r23, r25
    237c:	8a 1f       	adc	r24, r26
    237e:	91 1d       	adc	r25, r1
    2380:	a1 1d       	adc	r26, r1
    2382:	6a 0f       	add	r22, r26
    2384:	71 1d       	adc	r23, r1
    2386:	81 1d       	adc	r24, r1
    2388:	91 1d       	adc	r25, r1
    238a:	a1 1d       	adc	r26, r1
    238c:	20 d0       	rcall	.+64     	; 0x23ce <__ultoa_invert+0x84>
    238e:	09 f4       	brne	.+2      	; 0x2392 <__ultoa_invert+0x48>
    2390:	68 94       	set
    2392:	3f 91       	pop	r19
    2394:	2a e0       	ldi	r18, 0x0A	; 10
    2396:	26 9f       	mul	r18, r22
    2398:	11 24       	eor	r1, r1
    239a:	30 19       	sub	r19, r0
    239c:	30 5d       	subi	r19, 0xD0	; 208
    239e:	31 93       	st	Z+, r19
    23a0:	de f6       	brtc	.-74     	; 0x2358 <__ultoa_invert+0xe>
    23a2:	cf 01       	movw	r24, r30
    23a4:	08 95       	ret
    23a6:	46 2f       	mov	r20, r22
    23a8:	47 70       	andi	r20, 0x07	; 7
    23aa:	40 5d       	subi	r20, 0xD0	; 208
    23ac:	41 93       	st	Z+, r20
    23ae:	b3 e0       	ldi	r27, 0x03	; 3
    23b0:	0f d0       	rcall	.+30     	; 0x23d0 <__ultoa_invert+0x86>
    23b2:	c9 f7       	brne	.-14     	; 0x23a6 <__ultoa_invert+0x5c>
    23b4:	f6 cf       	rjmp	.-20     	; 0x23a2 <__ultoa_invert+0x58>
    23b6:	46 2f       	mov	r20, r22
    23b8:	4f 70       	andi	r20, 0x0F	; 15
    23ba:	40 5d       	subi	r20, 0xD0	; 208
    23bc:	4a 33       	cpi	r20, 0x3A	; 58
    23be:	18 f0       	brcs	.+6      	; 0x23c6 <__ultoa_invert+0x7c>
    23c0:	49 5d       	subi	r20, 0xD9	; 217
    23c2:	31 fd       	sbrc	r19, 1
    23c4:	40 52       	subi	r20, 0x20	; 32
    23c6:	41 93       	st	Z+, r20
    23c8:	02 d0       	rcall	.+4      	; 0x23ce <__ultoa_invert+0x84>
    23ca:	a9 f7       	brne	.-22     	; 0x23b6 <__ultoa_invert+0x6c>
    23cc:	ea cf       	rjmp	.-44     	; 0x23a2 <__ultoa_invert+0x58>
    23ce:	b4 e0       	ldi	r27, 0x04	; 4
    23d0:	a6 95       	lsr	r26
    23d2:	97 95       	ror	r25
    23d4:	87 95       	ror	r24
    23d6:	77 95       	ror	r23
    23d8:	67 95       	ror	r22
    23da:	ba 95       	dec	r27
    23dc:	c9 f7       	brne	.-14     	; 0x23d0 <__ultoa_invert+0x86>
    23de:	00 97       	sbiw	r24, 0x00	; 0
    23e0:	61 05       	cpc	r22, r1
    23e2:	71 05       	cpc	r23, r1
    23e4:	08 95       	ret
    23e6:	9b 01       	movw	r18, r22
    23e8:	ac 01       	movw	r20, r24
    23ea:	0a 2e       	mov	r0, r26
    23ec:	06 94       	lsr	r0
    23ee:	57 95       	ror	r21
    23f0:	47 95       	ror	r20
    23f2:	37 95       	ror	r19
    23f4:	27 95       	ror	r18
    23f6:	ba 95       	dec	r27
    23f8:	c9 f7       	brne	.-14     	; 0x23ec <__ultoa_invert+0xa2>
    23fa:	62 0f       	add	r22, r18
    23fc:	73 1f       	adc	r23, r19
    23fe:	84 1f       	adc	r24, r20
    2400:	95 1f       	adc	r25, r21
    2402:	a0 1d       	adc	r26, r0
    2404:	08 95       	ret

00002406 <__prologue_saves__>:
    2406:	2f 92       	push	r2
    2408:	3f 92       	push	r3
    240a:	4f 92       	push	r4
    240c:	5f 92       	push	r5
    240e:	6f 92       	push	r6
    2410:	7f 92       	push	r7
    2412:	8f 92       	push	r8
    2414:	9f 92       	push	r9
    2416:	af 92       	push	r10
    2418:	bf 92       	push	r11
    241a:	cf 92       	push	r12
    241c:	df 92       	push	r13
    241e:	ef 92       	push	r14
    2420:	ff 92       	push	r15
    2422:	0f 93       	push	r16
    2424:	1f 93       	push	r17
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	ca 1b       	sub	r28, r26
    2430:	db 0b       	sbc	r29, r27
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	09 94       	ijmp

0000243e <__epilogue_restores__>:
    243e:	2a 88       	ldd	r2, Y+18	; 0x12
    2440:	39 88       	ldd	r3, Y+17	; 0x11
    2442:	48 88       	ldd	r4, Y+16	; 0x10
    2444:	5f 84       	ldd	r5, Y+15	; 0x0f
    2446:	6e 84       	ldd	r6, Y+14	; 0x0e
    2448:	7d 84       	ldd	r7, Y+13	; 0x0d
    244a:	8c 84       	ldd	r8, Y+12	; 0x0c
    244c:	9b 84       	ldd	r9, Y+11	; 0x0b
    244e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2450:	b9 84       	ldd	r11, Y+9	; 0x09
    2452:	c8 84       	ldd	r12, Y+8	; 0x08
    2454:	df 80       	ldd	r13, Y+7	; 0x07
    2456:	ee 80       	ldd	r14, Y+6	; 0x06
    2458:	fd 80       	ldd	r15, Y+5	; 0x05
    245a:	0c 81       	ldd	r16, Y+4	; 0x04
    245c:	1b 81       	ldd	r17, Y+3	; 0x03
    245e:	aa 81       	ldd	r26, Y+2	; 0x02
    2460:	b9 81       	ldd	r27, Y+1	; 0x01
    2462:	ce 0f       	add	r28, r30
    2464:	d1 1d       	adc	r29, r1
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	cd bf       	out	0x3d, r28	; 61
    2470:	ed 01       	movw	r28, r26
    2472:	08 95       	ret

00002474 <_exit>:
    2474:	f8 94       	cli

00002476 <__stop_program>:
    2476:	ff cf       	rjmp	.-2      	; 0x2476 <__stop_program>
