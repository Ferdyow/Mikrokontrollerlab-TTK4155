
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000158  00800100  000013b8  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800258  00800258  000015a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a0  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a11  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010e8  00000000  00000000  000042b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000deb  00000000  00000000  00005399  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000062c  00000000  00000000  00006184  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000088e  00000000  00000000  000067b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001410  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000228  00000000  00000000  0000844e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <malloc+0xbc>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 eb       	ldi	r30, 0xB8	; 184
     37c:	f3 e1       	ldi	r31, 0x13	; 19
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 35       	cpi	r26, 0x58	; 88
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a8 e5       	ldi	r26, 0x58	; 88
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a6 36       	cpi	r26, 0x66	; 102
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 3b 03 	call	0x676	; 0x676 <main>
     39e:	0c 94 da 09 	jmp	0x13b4	; 0x13b4 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
     3a6:	30 98       	cbi	0x06, 0	; 6
     3a8:	08 95       	ret

000003aa <CAN_init>:
#define TB1 1
#define TB2 2

void CAN_init() {
	
	MCP2515_init();
     3aa:	0e 94 16 03 	call	0x62c	; 0x62c <MCP2515_init>
	//set loopback mode: 0x40
	//later use normal mode 0x00
	MCP2515_write(MCP_CANCTRL, 0x40);
     3ae:	60 e4       	ldi	r22, 0x40	; 64
     3b0:	8f e0       	ldi	r24, 0x0F	; 15
     3b2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>
		
	
	
	//enable rollover: message will rollover to RX1 if RX0 is full
	//also sets filter for RXB0 to only accept standard transmission
	MCP2515_write(MCP_RXB0CTRL, 0x24);  //0b 0010 0100
     3b6:	64 e2       	ldi	r22, 0x24	; 36
     3b8:	80 e6       	ldi	r24, 0x60	; 96
     3ba:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>

	
	//set filter for RXB1 to accept standard transmission
	MCP2515_write(MCP_RXB1CTRL, 0x20);
     3be:	60 e2       	ldi	r22, 0x20	; 32
     3c0:	80 e7       	ldi	r24, 0x70	; 112
     3c2:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>
	

	//CANINTE contains the interrupt enable bits for each individual interrupt
	//CANINTF cointains the interrupt flags for each interrupt source. this should be cleared by a bit_modify
	
	MCP2515_write(MCP_CANINTE, 0x1F);
     3c6:	6f e1       	ldi	r22, 0x1F	; 31
     3c8:	8b e2       	ldi	r24, 0x2B	; 43
     3ca:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>
     3ce:	08 95       	ret

000003d0 <CAN_message_send>:
	
	

}

void CAN_message_send(can_message* msg) {
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	ec 01       	movw	r28, r24
	//transmit is done using the TX registers, have to check which transmit_buffer_register we are writing from 
	uint8_t buffer_numb = 0; //Not sure how this logic is done yet


	//transmit the correct ID
	uint8_t id_high = msg->id / 8;
     3da:	08 81       	ld	r16, Y
     3dc:	19 81       	ldd	r17, Y+1	; 0x01
     3de:	b8 01       	movw	r22, r16
     3e0:	76 95       	lsr	r23
     3e2:	67 95       	ror	r22
     3e4:	76 95       	lsr	r23
     3e6:	67 95       	ror	r22
     3e8:	76 95       	lsr	r23
     3ea:	67 95       	ror	r22
	uint8_t id_low = msg->id % 8;

	MCP2515_write(MCP_TXB0SIDH + BUFFER_LENGTH * buffer_numb, id_high);
     3ec:	81 e3       	ldi	r24, 0x31	; 49
     3ee:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL + BUFFER_LENGTH * buffer_numb, (id_low << 5));
     3f2:	60 2f       	mov	r22, r16
     3f4:	62 95       	swap	r22
     3f6:	66 0f       	add	r22, r22
     3f8:	60 7e       	andi	r22, 0xE0	; 224
     3fa:	82 e3       	ldi	r24, 0x32	; 50
     3fc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>
	//resten av TXB0SIDL er 0 siden vi har standard identifier

	//transmit the data length
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);
     400:	6a 81       	ldd	r22, Y+2	; 0x02
     402:	85 e3       	ldi	r24, 0x35	; 53
     404:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>

	//transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     408:	8a 81       	ldd	r24, Y+2	; 0x02
     40a:	88 23       	and	r24, r24
     40c:	69 f0       	breq	.+26     	; 0x428 <CAN_message_send+0x58>
     40e:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
     410:	fe 01       	movw	r30, r28
     412:	e1 0f       	add	r30, r17
     414:	f1 1d       	adc	r31, r1
     416:	63 81       	ldd	r22, Z+3	; 0x03
     418:	86 e3       	ldi	r24, 0x36	; 54
     41a:	81 0f       	add	r24, r17
     41c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <MCP2515_write>

	//transmit the data length
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);

	//transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     420:	1f 5f       	subi	r17, 0xFF	; 255
     422:	8a 81       	ldd	r24, Y+2	; 0x02
     424:	18 17       	cp	r17, r24
     426:	a0 f3       	brcs	.-24     	; 0x410 <CAN_message_send+0x40>
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
	}
	
	uint8_t buffer_states = (uint8_t)(1 << buffer_numb);
	printf("buffer_states: %d\n", buffer_states);
     428:	1f 92       	push	r1
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	8f 93       	push	r24
     42e:	8f e2       	ldi	r24, 0x2F	; 47
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	9f 93       	push	r25
     434:	8f 93       	push	r24
     436:	0e 94 c7 06 	call	0xd8e	; 0xd8e <printf>
	MCP2515_request_to_send(buffer_states);
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0e 94 02 03 	call	0x604	; 0x604 <MCP2515_request_to_send>
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
	
	
}
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	1f 91       	pop	r17
     44e:	0f 91       	pop	r16
     450:	08 95       	ret

00000452 <CAN_transmit_complete>:
		}
	}
	return -1;
}

bool CAN_transmit_complete(int transmit_buffer_numb) {
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	ec 01       	movw	r28, r24
	//if transmission is complete TXREQ is cleared
	//transmit buffer can be TX2, TX1, TX0
	uint8_t interrupt_flags = MCP2515_read(MCP_CANINTF); //0bxxx 1/0 xxx
     458:	8c e2       	ldi	r24, 0x2C	; 44
     45a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>

	//identify the bits that are supposed to be zero
	uint8_t filter = 0x00 + (1 << (transmit_buffer_numb + 2)); //0b 0000 1 000
     45e:	22 96       	adiw	r28, 0x02	; 2
     460:	21 e0       	ldi	r18, 0x01	; 1
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	a9 01       	movw	r20, r18
     466:	02 c0       	rjmp	.+4      	; 0x46c <CAN_transmit_complete+0x1a>
     468:	44 0f       	add	r20, r20
     46a:	55 1f       	adc	r21, r21
     46c:	ca 95       	dec	r28
     46e:	e2 f7       	brpl	.-8      	; 0x468 <CAN_transmit_complete+0x16>
     470:	ea 01       	movw	r28, r20

	//check if they are 1 or not
	if ((interrupt_flags | filter) != 0) {
     472:	c8 2b       	or	r28, r24
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	09 f4       	brne	.+2      	; 0x47a <CAN_transmit_complete+0x28>
     478:	80 e0       	ldi	r24, 0x00	; 0
	
	return false; 



}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <CAN_data_receive>:


void CAN_data_receive(int receive_buffer_numb, can_message* received_msg){
     480:	df 92       	push	r13
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	7c 01       	movw	r14, r24
     490:	8b 01       	movw	r16, r22
	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_numb);
     492:	c8 2f       	mov	r28, r24
     494:	c2 95       	swap	r28
     496:	c0 7f       	andi	r28, 0xF0	; 240
     498:	81 e6       	ldi	r24, 0x61	; 97
     49a:	8c 0f       	add	r24, r28
     49c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
     4a0:	d8 2f       	mov	r29, r24
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_numb);
     4a2:	82 e6       	ldi	r24, 0x62	; 98
     4a4:	8c 0f       	add	r24, r28
     4a6:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
	/*
		id_low:	    X XXXX LLL
		id_high: HHHH HHHH
		id:		 HHHH HHHH LLL
	*/
	received_msg->id = (id_high << 3) + id_low; 
     4aa:	2d 2f       	mov	r18, r29
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	22 0f       	add	r18, r18
     4b0:	33 1f       	adc	r19, r19
     4b2:	22 0f       	add	r18, r18
     4b4:	33 1f       	adc	r19, r19
     4b6:	22 0f       	add	r18, r18
     4b8:	33 1f       	adc	r19, r19
void CAN_data_receive(int receive_buffer_numb, can_message* received_msg){
	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_numb);
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_numb);
	
	//only want the last 3 bits
	id_low = id_low >> 5;
     4ba:	82 95       	swap	r24
     4bc:	86 95       	lsr	r24
     4be:	87 70       	andi	r24, 0x07	; 7
	/*
		id_low:	    X XXXX LLL
		id_high: HHHH HHHH
		id:		 HHHH HHHH LLL
	*/
	received_msg->id = (id_high << 3) + id_low; 
     4c0:	28 0f       	add	r18, r24
     4c2:	31 1d       	adc	r19, r1
     4c4:	f8 01       	movw	r30, r16
     4c6:	31 83       	std	Z+1, r19	; 0x01
     4c8:	20 83       	st	Z, r18
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_numb) % (1<<3));
     4ca:	85 e6       	ldi	r24, 0x65	; 101
     4cc:	8c 0f       	add	r24, r28
     4ce:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
     4d2:	87 70       	andi	r24, 0x07	; 7
     4d4:	f8 01       	movw	r30, r16
     4d6:	82 83       	std	Z+2, r24	; 0x02
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     4d8:	88 23       	and	r24, r24
     4da:	c9 f0       	breq	.+50     	; 0x50e <__stack+0xf>
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_numb;
     4dc:	ee 0c       	add	r14, r14
     4de:	ff 1c       	adc	r15, r15
     4e0:	ee 0c       	add	r14, r14
     4e2:	ff 1c       	adc	r15, r15
     4e4:	ee 0c       	add	r14, r14
     4e6:	ff 1c       	adc	r15, r15
     4e8:	ee 0c       	add	r14, r14
     4ea:	ff 1c       	adc	r15, r15
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_numb) % (1<<3));
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     4ec:	d1 2c       	mov	r13, r1
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_numb;
     4ee:	cd 2d       	mov	r28, r13
     4f0:	d0 e0       	ldi	r29, 0x00	; 0
     4f2:	ce 01       	movw	r24, r28
     4f4:	8a 59       	subi	r24, 0x9A	; 154
     4f6:	9f 4f       	sbci	r25, 0xFF	; 255
		received_msg->data[byte] = MCP2515_read(address);
     4f8:	8e 0d       	add	r24, r14
     4fa:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
     4fe:	c0 0f       	add	r28, r16
     500:	d1 1f       	adc	r29, r17
     502:	8b 83       	std	Y+3, r24	; 0x03
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_numb) % (1<<3));
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     504:	d3 94       	inc	r13
     506:	f8 01       	movw	r30, r16
     508:	82 81       	ldd	r24, Z+2	; 0x02
     50a:	d8 16       	cp	r13, r24
     50c:	80 f3       	brcs	.-32     	; 0x4ee <CAN_data_receive+0x6e>
	}
	
	
	
	
}
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	df 90       	pop	r13
     51c:	08 95       	ret

0000051e <CAN_test>:

void CAN_int_vect() {
	
}

void CAN_test(){
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	66 97       	sbiw	r28, 0x16	; 22
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	de bf       	out	0x3e, r29	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	cd bf       	out	0x3d, r28	; 61
	while(!CAN_transmit_complete(TB0)){}
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 29 02 	call	0x452	; 0x452 <CAN_transmit_complete>
     540:	88 23       	and	r24, r24
     542:	d1 f3       	breq	.-12     	; 0x538 <CAN_test+0x1a>
	
	can_message my_message;
	can_message received_message;
	my_message.id = 3;
     544:	83 e0       	ldi	r24, 0x03	; 3
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	9a 83       	std	Y+2, r25	; 0x02
     54a:	89 83       	std	Y+1, r24	; 0x01
	my_message.length = 3;
     54c:	8b 83       	std	Y+3, r24	; 0x03
	my_message.data[0] = 0x00;
     54e:	1c 82       	std	Y+4, r1	; 0x04
	my_message.data[1] = 0x00;
     550:	1d 82       	std	Y+5, r1	; 0x05
	my_message.data[2] = 0x00;
     552:	1e 82       	std	Y+6, r1	; 0x06
	
	CAN_message_send(&my_message);
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <CAN_message_send>
	CAN_data_receive(0, &received_message);
     55c:	be 01       	movw	r22, r28
     55e:	64 5f       	subi	r22, 0xF4	; 244
     560:	7f 4f       	sbci	r23, 0xFF	; 255
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 40 02 	call	0x480	; 0x480 <CAN_data_receive>
	//printf("length of received message: %s\n",received_message.length);
	for (uint8_t byte = 0; byte < received_message.length;byte++){
     56a:	8e 85       	ldd	r24, Y+14	; 0x0e
     56c:	88 23       	and	r24, r24
     56e:	c1 f0       	breq	.+48     	; 0x5a0 <CAN_test+0x82>
     570:	f1 2c       	mov	r15, r1
		printf("%d", received_message.data[byte]);
     572:	02 e4       	ldi	r16, 0x42	; 66
     574:	11 e0       	ldi	r17, 0x01	; 1
     576:	ef e0       	ldi	r30, 0x0F	; 15
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	ec 0f       	add	r30, r28
     57c:	fd 1f       	adc	r31, r29
     57e:	ef 0d       	add	r30, r15
     580:	f1 1d       	adc	r31, r1
     582:	80 81       	ld	r24, Z
     584:	1f 92       	push	r1
     586:	8f 93       	push	r24
     588:	1f 93       	push	r17
     58a:	0f 93       	push	r16
     58c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <printf>
	my_message.data[2] = 0x00;
	
	CAN_message_send(&my_message);
	CAN_data_receive(0, &received_message);
	//printf("length of received message: %s\n",received_message.length);
	for (uint8_t byte = 0; byte < received_message.length;byte++){
     590:	f3 94       	inc	r15
     592:	0f 90       	pop	r0
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	8e 85       	ldd	r24, Y+14	; 0x0e
     59c:	f8 16       	cp	r15, r24
     59e:	58 f3       	brcs	.-42     	; 0x576 <CAN_test+0x58>
		printf("%d", received_message.data[byte]);
	}
     5a0:	66 96       	adiw	r28, 0x16	; 22
     5a2:	0f b6       	in	r0, 0x3f	; 63
     5a4:	f8 94       	cli
     5a6:	de bf       	out	0x3e, r29	; 62
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	cd bf       	out	0x3d, r28	; 61
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	08 95       	ret

000005b8 <MCP2515_read>:
	}
	
	return 0;
}

char MCP2515_read(char address) {
     5b8:	cf 93       	push	r28
     5ba:	c8 2f       	mov	r28, r24
	SPI_select();
     5bc:	0e 94 1d 05 	call	0xa3a	; 0xa3a <SPI_select>
	SPI_send(READ);
     5c0:	83 e0       	ldi	r24, 0x03	; 3
     5c2:	0e 94 05 05 	call	0xa0a	; 0xa0a <SPI_send>
	SPI_send(address);
     5c6:	8c 2f       	mov	r24, r28
     5c8:	0e 94 05 05 	call	0xa0a	; 0xa0a <SPI_send>
	char data = SPI_read();
     5cc:	0e 94 16 05 	call	0xa2c	; 0xa2c <SPI_read>
     5d0:	c8 2f       	mov	r28, r24
	SPI_deselect();
     5d2:	0e 94 1f 05 	call	0xa3e	; 0xa3e <SPI_deselect>
	return data;
	
	
}
     5d6:	8c 2f       	mov	r24, r28
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <MCP2515_write>:

void MCP2515_write(char address, char data) {
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	d8 2f       	mov	r29, r24
     5e2:	c6 2f       	mov	r28, r22
	SPI_select();
     5e4:	0e 94 1d 05 	call	0xa3a	; 0xa3a <SPI_select>
	SPI_send(WRITE);
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	0e 94 05 05 	call	0xa0a	; 0xa0a <SPI_send>
	SPI_send(address);
     5ee:	8d 2f       	mov	r24, r29
     5f0:	0e 94 05 05 	call	0xa0a	; 0xa0a <SPI_send>
	SPI_send(data);
     5f4:	8c 2f       	mov	r24, r28
     5f6:	0e 94 05 05 	call	0xa0a	; 0xa0a <SPI_send>
	SPI_deselect();
     5fa:	0e 94 1f 05 	call	0xa3e	; 0xa3e <SPI_deselect>
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <MCP2515_request_to_send>:

//Buffer states: three bit, setting a 1 on the buffer initiates transmitting from it 
void MCP2515_request_to_send(uint8_t buffer_states) {
     604:	cf 93       	push	r28
     606:	c8 2f       	mov	r28, r24
	SPI_select();
     608:	0e 94 1d 05 	call	0xa3a	; 0xa3a <SPI_select>

	SPI_send(RTS_BASE+buffer_states);
     60c:	80 e8       	ldi	r24, 0x80	; 128
     60e:	8c 0f       	add	r24, r28
     610:	0e 94 05 05 	call	0xa0a	; 0xa0a <SPI_send>
	
	SPI_deselect();
     614:	0e 94 1f 05 	call	0xa3e	; 0xa3e <SPI_deselect>
}
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <MCP2515_reset>:
	SPI_send(new_data);
	SPI_deselect();
}

void MCP2515_reset() {
	SPI_select();
     61c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <SPI_select>
	SPI_send(RESET);
     620:	80 ec       	ldi	r24, 0xC0	; 192
     622:	0e 94 05 05 	call	0xa0a	; 0xa0a <SPI_send>
	SPI_deselect();
     626:	0e 94 1f 05 	call	0xa3e	; 0xa3e <SPI_deselect>
     62a:	08 95       	ret

0000062c <MCP2515_init>:
#define BIT_MODIFY 0x05
#define RTS_BASE 0x80


uint8_t MCP2515_init() {
	SPI_init();
     62c:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <SPI_init>
	MCP2515_reset();
     630:	0e 94 0e 03 	call	0x61c	; 0x61c <MCP2515_reset>
	//check bit 7-5 of MCP_CANSTAT which signify the operation mode
	const uint8_t device_mode = MCP2515_read(MCP_CANSTAT) & MODE_MASK;
     634:	8e e0       	ldi	r24, 0x0E	; 14
     636:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP2515_read>
     63a:	80 7e       	andi	r24, 0xE0	; 224
	//printf("%d\n", device_mode);
	if (device_mode != MODE_CONFIG) {
     63c:	80 38       	cpi	r24, 0x80	; 128
     63e:	31 f0       	breq	.+12     	; 0x64c <MCP2515_init+0x20>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
     640:	85 e4       	ldi	r24, 0x45	; 69
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 db 06 	call	0xdb6	; 0xdb6 <puts>
		return 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	08 95       	ret
	}
	
	return 0;
     64c:	80 e0       	ldi	r24, 0x00	; 0
}
     64e:	08 95       	ret

00000650 <initialize>:
#include <stdio.h>
#include <stdbool.h>


void initialize(void){
	cli();
     650:	f8 94       	cli
	OLED_reset();
     652:	0e 94 a6 03 	call	0x74c	; 0x74c <OLED_reset>
	usart_init(MYUBRR);
     656:	8f e1       	ldi	r24, 0x1F	; 31
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 36 05 	call	0xa6c	; 0xa6c <usart_init>
	SRAM_init();
     65e:	0e 94 21 05 	call	0xa42	; 0xa42 <SRAM_init>
	ADC_init();
     662:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	//JOY_init();
	OLED_init();
     666:	0e 94 b2 03 	call	0x764	; 0x764 <OLED_init>
	MENU_init();
     66a:	0e 94 87 04 	call	0x90e	; 0x90e <MENU_init>
	CAN_init();
     66e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <CAN_init>
	sei();
     672:	78 94       	sei
     674:	08 95       	ret

00000676 <main>:
}



int main(void) {
	initialize(); 	
     676:	0e 94 28 03 	call	0x650	; 0x650 <initialize>
	// JOY_test();
	// OLED_test();
	//MENU_test();
	//SPI_test();
	
	CAN_test();
     67a:	0e 94 8f 02 	call	0x51e	; 0x51e <CAN_test>
     67e:	ff cf       	rjmp	.-2      	; 0x67e <main+0x8>

00000680 <OLED_print_char>:
	write_cmd(0x81);
	write_cmd(lvl);
}

void OLED_print_char(char c){
	if (c == '\0') return;
     680:	88 23       	and	r24, r24
     682:	f9 f0       	breq	.+62     	; 0x6c2 <OLED_print_char+0x42>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
     684:	e8 2f       	mov	r30, r24
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	b0 97       	sbiw	r30, 0x20	; 32
	for (int col = 0; col < FONT_SIZE; col++){
     68a:	80 91 06 01 	lds	r24, 0x0106
     68e:	88 23       	and	r24, r24
     690:	c1 f0       	breq	.+48     	; 0x6c2 <OLED_print_char+0x42>
     692:	ee 0f       	add	r30, r30
     694:	ff 1f       	adc	r31, r31
     696:	ee 0f       	add	r30, r30
     698:	ff 1f       	adc	r31, r31
     69a:	ee 0f       	add	r30, r30
     69c:	ff 1f       	adc	r31, r31
     69e:	e0 59       	subi	r30, 0x90	; 144
     6a0:	ff 4f       	sbci	r31, 0xFF	; 255
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
		write_data(pgm_read_byte(&font8[letter_index][col]));
     6a6:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     6a8:	a0 91 09 01 	lds	r26, 0x0109
     6ac:	b0 91 0a 01 	lds	r27, 0x010A
     6b0:	2c 93       	st	X, r18

void OLED_print_char(char c){
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++){
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	31 96       	adiw	r30, 0x01	; 1
     6b6:	20 91 06 01 	lds	r18, 0x0106
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	82 17       	cp	r24, r18
     6be:	93 07       	cpc	r25, r19
     6c0:	94 f3       	brlt	.-28     	; 0x6a6 <OLED_print_char+0x26>
     6c2:	08 95       	ret

000006c4 <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7){
     6c4:	88 30       	cpi	r24, 0x08	; 8
     6c6:	30 f4       	brcc	.+12     	; 0x6d4 <OLED_goto_line+0x10>
		return;
	}
	write_cmd(0xB0+line);
     6c8:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     6ca:	e0 91 07 01 	lds	r30, 0x0107
     6ce:	f0 91 08 01 	lds	r31, 0x0108
     6d2:	80 83       	st	Z, r24
     6d4:	08 95       	ret

000006d6 <OLED_goto_column>:
	}
	write_cmd(0xB0+line);
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
     6d6:	88 23       	and	r24, r24
     6d8:	7c f0       	brlt	.+30     	; 0x6f8 <OLED_goto_column+0x22>
		return;
	}
	write_cmd(0x00+column%16); //lower column register
     6da:	98 2f       	mov	r25, r24
     6dc:	9f 70       	andi	r25, 0x0F	; 15
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     6de:	e0 91 07 01 	lds	r30, 0x0107
     6e2:	f0 91 08 01 	lds	r31, 0x0108
     6e6:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
		return;
	}
	write_cmd(0x00+column%16); //lower column register
	write_cmd(0x10+column/16); //higher column register
     6e8:	82 95       	swap	r24
     6ea:	8f 70       	andi	r24, 0x0F	; 15
     6ec:	80 5f       	subi	r24, 0xF0	; 240
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     6ee:	e0 91 07 01 	lds	r30, 0x0107
     6f2:	f0 91 08 01 	lds	r31, 0x0108
     6f6:	80 83       	st	Z, r24
     6f8:	08 95       	ret

000006fa <OLED_pos>:
		write_data(0x00);
		
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
     6fa:	cf 93       	push	r28
     6fc:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
     6fe:	88 30       	cpi	r24, 0x08	; 8
     700:	10 f4       	brcc	.+4      	; 0x706 <OLED_pos+0xc>
     702:	66 23       	and	r22, r22
     704:	4c f4       	brge	.+18     	; 0x718 <OLED_pos+0x1e>
		printf("Out of range in OLED_pos()");
     706:	87 e7       	ldi	r24, 0x77	; 119
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	9f 93       	push	r25
     70c:	8f 93       	push	r24
     70e:	0e 94 c7 06 	call	0xd8e	; 0xd8e <printf>
		return; 
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	05 c0       	rjmp	.+10     	; 0x722 <OLED_pos+0x28>
	}
	
	OLED_goto_line(line);
     718:	0e 94 62 03 	call	0x6c4	; 0x6c4 <OLED_goto_line>
	OLED_goto_column(column);
     71c:	8c 2f       	mov	r24, r28
     71e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <OLED_goto_column>
}
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <OLED_home>:




void OLED_home(){
	OLED_pos(0,0);
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <OLED_pos>
     72e:	08 95       	ret

00000730 <OLED_clear_line>:
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	0e 94 7d 03 	call	0x6fa	; 0x6fa <OLED_pos>
     736:	80 e8       	ldi	r24, 0x80	; 128
     738:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     73a:	e0 91 09 01 	lds	r30, 0x0109
     73e:	f0 91 0a 01 	lds	r31, 0x010A
     742:	10 82       	st	Z, r1
     744:	01 97       	sbiw	r24, 0x01	; 1
	OLED_pos(0,0);
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
     746:	00 97       	sbiw	r24, 0x00	; 0
     748:	c1 f7       	brne	.-16     	; 0x73a <OLED_clear_line+0xa>
		write_data(0x00);
		
	}
}
     74a:	08 95       	ret

0000074c <OLED_reset>:
	
}



void OLED_reset() {
     74c:	cf 93       	push	r28
     74e:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
     750:	8c 2f       	mov	r24, r28
     752:	0e 94 98 03 	call	0x730	; 0x730 <OLED_clear_line>
     756:	cf 5f       	subi	r28, 0xFF	; 255
}



void OLED_reset() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
     758:	c8 30       	cpi	r28, 0x08	; 8
     75a:	d1 f7       	brne	.-12     	; 0x750 <OLED_reset+0x4>
		OLED_clear_line(page);
	}
	OLED_home();
     75c:	0e 94 93 03 	call	0x726	; 0x726 <OLED_home>
}
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	66 97       	sbiw	r28, 0x16	; 22
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
	
	
	const char addresses[] = {
     778:	86 e1       	ldi	r24, 0x16	; 22
     77a:	e9 e1       	ldi	r30, 0x19	; 25
     77c:	f1 e0       	ldi	r31, 0x01	; 1
     77e:	de 01       	movw	r26, r28
     780:	11 96       	adiw	r26, 0x01	; 1
     782:	01 90       	ld	r0, Z+
     784:	0d 92       	st	X+, r0
     786:	8a 95       	dec	r24
     788:	e1 f7       	brne	.-8      	; 0x782 <OLED_init+0x1e>
     78a:	fe 01       	movw	r30, r28
     78c:	31 96       	adiw	r30, 0x01	; 1
     78e:	ce 01       	movw	r24, r28
     790:	47 96       	adiw	r24, 0x17	; 23
		0xaf //display on
	};
	
	const addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
		write_cmd(addresses[i]);
     792:	21 91       	ld	r18, Z+
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     794:	a0 91 07 01 	lds	r26, 0x0107
     798:	b0 91 08 01 	lds	r27, 0x0108
     79c:	2c 93       	st	X, r18
		0xa6, //set normal display
		0xaf //display on
	};
	
	const addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
     79e:	e8 17       	cp	r30, r24
     7a0:	f9 07       	cpc	r31, r25
     7a2:	b9 f7       	brne	.-18     	; 0x792 <OLED_init+0x2e>
		write_cmd(addresses[i]);
	}
	
	OLED_reset();
     7a4:	0e 94 a6 03 	call	0x74c	; 0x74c <OLED_reset>
	
}
     7a8:	66 96       	adiw	r28, 0x16	; 22
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     7ba:	e0 91 09 01 	lds	r30, 0x0109
     7be:	f0 91 0a 01 	lds	r31, 0x010A
     7c2:	88 e1       	ldi	r24, 0x18	; 24
     7c4:	80 83       	st	Z, r24
     7c6:	e0 91 09 01 	lds	r30, 0x0109
     7ca:	f0 91 0a 01 	lds	r31, 0x010A
     7ce:	80 83       	st	Z, r24
     7d0:	e0 91 09 01 	lds	r30, 0x0109
     7d4:	f0 91 0a 01 	lds	r31, 0x010A
     7d8:	9e e7       	ldi	r25, 0x7E	; 126
     7da:	90 83       	st	Z, r25
     7dc:	e0 91 09 01 	lds	r30, 0x0109
     7e0:	f0 91 0a 01 	lds	r31, 0x010A
     7e4:	9c e3       	ldi	r25, 0x3C	; 60
     7e6:	90 83       	st	Z, r25
     7e8:	e0 91 09 01 	lds	r30, 0x0109
     7ec:	f0 91 0a 01 	lds	r31, 0x010A
     7f0:	80 83       	st	Z, r24
     7f2:	08 95       	ret

000007f4 <test_function>:
volatile menu_entry* current_entry;
volatile menu_entry* selected_entry;


void test_function() {
	printf("\n\nHighscore clicked!\n\n");
     7f4:	82 ea       	ldi	r24, 0xA2	; 162
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <puts>
     7fc:	08 95       	ret

000007fe <MENU_draw_current_menu>:
	current_entry = current_entry->parent_node;
	selected_entry = current_entry->child_node;
	MENU_draw_current_menu();
}

void MENU_draw_current_menu() {
     7fe:	df 92       	push	r13
     800:	ef 92       	push	r14
     802:	ff 92       	push	r15
     804:	0f 93       	push	r16
     806:	1f 93       	push	r17
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
	OLED_reset();
     80c:	0e 94 a6 03 	call	0x74c	; 0x74c <OLED_reset>
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
     810:	e0 91 5a 02 	lds	r30, 0x025A
     814:	f0 91 5b 02 	lds	r31, 0x025B
     818:	c4 81       	ldd	r28, Z+4	; 0x04
     81a:	d5 81       	ldd	r29, Z+5	; 0x05
	
	while( temp_node != NULL){
     81c:	20 97       	sbiw	r28, 0x00	; 0
     81e:	61 f1       	breq	.+88     	; 0x878 <MENU_draw_current_menu+0x7a>
     820:	d1 2c       	mov	r13, r1
		OLED_pos(output_row++, 0);
		if (temp_node == selected_entry) {
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
     822:	0f 2e       	mov	r0, r31
     824:	f8 eb       	ldi	r31, 0xB8	; 184
     826:	ef 2e       	mov	r14, r31
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	ff 2e       	mov	r15, r31
     82c:	f0 2d       	mov	r31, r0
     82e:	0b e0       	ldi	r16, 0x0B	; 11
     830:	11 e0       	ldi	r17, 0x01	; 1
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
		OLED_pos(output_row++, 0);
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	8d 2d       	mov	r24, r13
     836:	0e 94 7d 03 	call	0x6fa	; 0x6fa <OLED_pos>
		if (temp_node == selected_entry) {
     83a:	20 91 58 02 	lds	r18, 0x0258
     83e:	30 91 59 02 	lds	r19, 0x0259
     842:	c2 17       	cp	r28, r18
     844:	d3 07       	cpc	r29, r19
     846:	11 f4       	brne	.+4      	; 0x84c <MENU_draw_current_menu+0x4e>
			OLED_print_arrow();
     848:	0e 94 dd 03 	call	0x7ba	; 0x7ba <OLED_print_arrow>
		}
		fprintf(OLED, " %s", temp_node->name);
     84c:	89 81       	ldd	r24, Y+1	; 0x01
     84e:	8f 93       	push	r24
     850:	88 81       	ld	r24, Y
     852:	8f 93       	push	r24
     854:	ff 92       	push	r15
     856:	ef 92       	push	r14
     858:	1f 93       	push	r17
     85a:	0f 93       	push	r16
     85c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <fprintf>
		temp_node = temp_node -> next_sibling_node;
     860:	0e 80       	ldd	r0, Y+6	; 0x06
     862:	df 81       	ldd	r29, Y+7	; 0x07
     864:	c0 2d       	mov	r28, r0
     866:	d3 94       	inc	r13
	OLED_reset();
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	20 97       	sbiw	r28, 0x00	; 0
     876:	e9 f6       	brne	.-70     	; 0x832 <MENU_draw_current_menu+0x34>
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	df 90       	pop	r13
     886:	08 95       	ret

00000888 <add_entry>:
	}
}



menu_entry* add_entry(menu_entry* parent_node, char* name, void* function_ptr){
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	ec 01       	movw	r28, r24
     896:	7b 01       	movw	r14, r22
     898:	8a 01       	movw	r16, r20
	
	// Create the new node
	menu_entry* new_entry = (menu_entry*) malloc(sizeof(menu_entry));
     89a:	8c e0       	ldi	r24, 0x0C	; 12
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	0e 94 43 05 	call	0xa86	; 0xa86 <malloc>
     8a2:	dc 01       	movw	r26, r24
	new_entry->name = name;
     8a4:	11 96       	adiw	r26, 0x01	; 1
     8a6:	fc 92       	st	X, r15
     8a8:	ee 92       	st	-X, r14
	new_entry->parent_node = parent_node;
     8aa:	13 96       	adiw	r26, 0x03	; 3
     8ac:	dc 93       	st	X, r29
     8ae:	ce 93       	st	-X, r28
     8b0:	12 97       	sbiw	r26, 0x02	; 2
	new_entry->child_node = NULL;  // A new node has no children
     8b2:	15 96       	adiw	r26, 0x05	; 5
     8b4:	1c 92       	st	X, r1
     8b6:	1e 92       	st	-X, r1
     8b8:	14 97       	sbiw	r26, 0x04	; 4
	new_entry->next_sibling_node = NULL;  // The new child is the last child
     8ba:	17 96       	adiw	r26, 0x07	; 7
     8bc:	1c 92       	st	X, r1
     8be:	1e 92       	st	-X, r1
     8c0:	16 97       	sbiw	r26, 0x06	; 6
	new_entry->prev_sibling_node = NULL;
     8c2:	19 96       	adiw	r26, 0x09	; 9
     8c4:	1c 92       	st	X, r1
     8c6:	1e 92       	st	-X, r1
     8c8:	18 97       	sbiw	r26, 0x08	; 8
	new_entry->function_ptr = function_ptr;
     8ca:	1b 96       	adiw	r26, 0x0b	; 11
     8cc:	1c 93       	st	X, r17
     8ce:	0e 93       	st	-X, r16
     8d0:	1a 97       	sbiw	r26, 0x0a	; 10
	
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_entry;
     8d2:	20 97       	sbiw	r28, 0x00	; 0
     8d4:	a1 f0       	breq	.+40     	; 0x8fe <add_entry+0x76>
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
     8d6:	ec 81       	ldd	r30, Y+4	; 0x04
     8d8:	fd 81       	ldd	r31, Y+5	; 0x05
     8da:	30 97       	sbiw	r30, 0x00	; 0
     8dc:	19 f4       	brne	.+6      	; 0x8e4 <add_entry+0x5c>
		parent_node->child_node = new_entry;
     8de:	9d 83       	std	Y+5, r25	; 0x05
     8e0:	8c 83       	std	Y+4, r24	; 0x04
     8e2:	0d c0       	rjmp	.+26     	; 0x8fe <add_entry+0x76>
	else {
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
     8e4:	26 81       	ldd	r18, Z+6	; 0x06
     8e6:	37 81       	ldd	r19, Z+7	; 0x07
     8e8:	21 15       	cp	r18, r1
     8ea:	31 05       	cpc	r19, r1
     8ec:	11 f0       	breq	.+4      	; 0x8f2 <add_entry+0x6a>
			temp_node = temp_node->next_sibling_node;
     8ee:	f9 01       	movw	r30, r18
     8f0:	f9 cf       	rjmp	.-14     	; 0x8e4 <add_entry+0x5c>
		}
		
		// Bind the new node to the current last child to become the new last child.
		temp_node->next_sibling_node = new_entry;
     8f2:	b7 83       	std	Z+7, r27	; 0x07
     8f4:	a6 83       	std	Z+6, r26	; 0x06
		new_entry->prev_sibling_node = temp_node;
     8f6:	19 96       	adiw	r26, 0x09	; 9
     8f8:	fc 93       	st	X, r31
     8fa:	ee 93       	st	-X, r30
     8fc:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	// Parent/child/sibling bindings complete. Return the new node.
	return new_entry;
     8fe:	cd 01       	movw	r24, r26
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	08 95       	ret

0000090e <MENU_init>:

void test_function() {
	printf("\n\nHighscore clicked!\n\n");
}

void MENU_init() {
     90e:	cf 92       	push	r12
     910:	df 92       	push	r13
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
	menu_entry* main_menu = add_entry(NULL, "Main menu", NULL);
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	6c eb       	ldi	r22, 0xBC	; 188
     924:	71 e0       	ldi	r23, 0x01	; 1
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 44 04 	call	0x888	; 0x888 <add_entry>
     92e:	ec 01       	movw	r28, r24
	
	// Main menu
	menu_entry* play = add_entry(main_menu, "Play game", NULL);
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	66 ec       	ldi	r22, 0xC6	; 198
     936:	71 e0       	ldi	r23, 0x01	; 1
     938:	0e 94 44 04 	call	0x888	; 0x888 <add_entry>
     93c:	6c 01       	movw	r12, r24
	menu_entry* highscore = add_entry(main_menu, "Highscore", test_function);
     93e:	4a ef       	ldi	r20, 0xFA	; 250
     940:	53 e0       	ldi	r21, 0x03	; 3
     942:	60 ed       	ldi	r22, 0xD0	; 208
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	ce 01       	movw	r24, r28
     948:	0e 94 44 04 	call	0x888	; 0x888 <add_entry>
	menu_entry* settings = add_entry(main_menu, "Settings", NULL);
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	6a ed       	ldi	r22, 0xDA	; 218
     952:	71 e0       	ldi	r23, 0x01	; 1
     954:	ce 01       	movw	r24, r28
     956:	0e 94 44 04 	call	0x888	; 0x888 <add_entry>
     95a:	7c 01       	movw	r14, r24
	menu_entry* extras = add_entry(main_menu, "Extra features", NULL);
     95c:	40 e0       	ldi	r20, 0x00	; 0
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	63 e9       	ldi	r22, 0x93	; 147
     962:	71 e0       	ldi	r23, 0x01	; 1
     964:	ce 01       	movw	r24, r28
     966:	0e 94 44 04 	call	0x888	; 0x888 <add_entry>
     96a:	8c 01       	movw	r16, r24
	
	// Sub-menu settings
	menu_entry* brightness = add_entry(settings, "Brightness", NULL);
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	63 ee       	ldi	r22, 0xE3	; 227
     972:	71 e0       	ldi	r23, 0x01	; 1
     974:	c7 01       	movw	r24, r14
     976:	0e 94 44 04 	call	0x888	; 0x888 <add_entry>
	menu_entry* font = add_entry(settings, "Set font", NULL);
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	6e ee       	ldi	r22, 0xEE	; 238
     980:	71 e0       	ldi	r23, 0x01	; 1
     982:	c7 01       	movw	r24, r14
     984:	0e 94 44 04 	call	0x888	; 0x888 <add_entry>
	
	// Sub-menu extras
	menu_entry* keyboard = add_entry(extras, "Keyboard", NULL);
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	67 ef       	ldi	r22, 0xF7	; 247
     98e:	71 e0       	ldi	r23, 0x01	; 1
     990:	c8 01       	movw	r24, r16
     992:	0e 94 44 04 	call	0x888	; 0x888 <add_entry>
	menu_entry* mandelbrot = add_entry(extras, "Mandelbrot", NULL);
     996:	40 e0       	ldi	r20, 0x00	; 0
     998:	50 e0       	ldi	r21, 0x00	; 0
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	72 e0       	ldi	r23, 0x02	; 2
     99e:	c8 01       	movw	r24, r16
     9a0:	0e 94 44 04 	call	0x888	; 0x888 <add_entry>
	menu_entry* pong = add_entry(extras, "Play pong", NULL);
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	6b e0       	ldi	r22, 0x0B	; 11
     9aa:	72 e0       	ldi	r23, 0x02	; 2
     9ac:	c8 01       	movw	r24, r16
     9ae:	0e 94 44 04 	call	0x888	; 0x888 <add_entry>
	menu_entry* rcube = add_entry(extras, "rotating cube", NULL);
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	65 e1       	ldi	r22, 0x15	; 21
     9b8:	72 e0       	ldi	r23, 0x02	; 2
     9ba:	c8 01       	movw	r24, r16
     9bc:	0e 94 44 04 	call	0x888	; 0x888 <add_entry>
	
	current_entry = main_menu;
     9c0:	d0 93 5b 02 	sts	0x025B, r29
     9c4:	c0 93 5a 02 	sts	0x025A, r28
	selected_entry = play;
     9c8:	d0 92 59 02 	sts	0x0259, r13
     9cc:	c0 92 58 02 	sts	0x0258, r12
	MENU_draw_current_menu();
     9d0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <MENU_draw_current_menu>
}
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	ff 90       	pop	r15
     9de:	ef 90       	pop	r14
     9e0:	df 90       	pop	r13
     9e2:	cf 90       	pop	r12
     9e4:	08 95       	ret

000009e6 <SPI_init>:

void SPI_init(){
	//Configure interrupt0 on the ATmega162 for receiving interrupts from SPI
	//see page 160 in ATmega162
	//enable int0 on the ATmega162
	set_bit(GICR, INT0);
     9e6:	8b b7       	in	r24, 0x3b	; 59
     9e8:	80 64       	ori	r24, 0x40	; 64
     9ea:	8b bf       	out	0x3b, r24	; 59
	
	//interrupt when low
	clear_bit(MCUCR,ISC01);
     9ec:	85 b7       	in	r24, 0x35	; 53
     9ee:	8d 7f       	andi	r24, 0xFD	; 253
     9f0:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     9f2:	85 b7       	in	r24, 0x35	; 53
     9f4:	8e 7f       	andi	r24, 0xFE	; 254
     9f6:	85 bf       	out	0x35, r24	; 53
	

	//set mosi, sck, ss as output, others as input
	set_bit(DDRB, MOSI);
     9f8:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
     9fa:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
     9fc:	bc 9a       	sbi	0x17, 4	; 23
	
	
	//set ATmega as master
	set_bit(SPCR, MSTR);
     9fe:	6c 9a       	sbi	0x0d, 4	; 13
	
	//enable SPI
	set_bit(SPCR, SPE);
     a00:	6e 9a       	sbi	0x0d, 6	; 13
	
	//set clock to f_osc/16
	set_bit(SPCR, SPR0);
     a02:	68 9a       	sbi	0x0d, 0	; 13
	clear_bit(SPCR,SPR1);
     a04:	69 98       	cbi	0x0d, 1	; 13
	clear_bit(SPCR, SPI2X);
     a06:	68 98       	cbi	0x0d, 0	; 13
     a08:	08 95       	ret

00000a0a <SPI_send>:
	
}


void SPI_send(uint8_t data){
	if (data == 0x81) {
     a0a:	81 38       	cpi	r24, 0x81	; 129
     a0c:	59 f4       	brne	.+22     	; 0xa24 <SPI_send+0x1a>
		//Start transmission
		printf("Before SPDR (in SPI_send)\n\n");
     a0e:	83 e2       	ldi	r24, 0x23	; 35
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	0e 94 db 06 	call	0xdb6	; 0xdb6 <puts>
		SPDR = 0x81;
     a16:	81 e8       	ldi	r24, 0x81	; 129
     a18:	8f b9       	out	0x0f, r24	; 15
		printf("After SPDR (in SPI_send)\n\n");
     a1a:	8e e3       	ldi	r24, 0x3E	; 62
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <puts>
     a22:	08 95       	ret
		
	} else {
		//Start transmission
		SPDR = data;
     a24:	8f b9       	out	0x0f, r24	; 15
			
		//wait for transmission complete SPSR: register with SPIF flag, SPIF: bit set to 1 when data is read
		loop_until_bit_is_set(SPSR, SPIF);
     a26:	77 9b       	sbis	0x0e, 7	; 14
     a28:	fe cf       	rjmp	.-4      	; 0xa26 <SPI_send+0x1c>
     a2a:	08 95       	ret

00000a2c <SPI_read>:
}


char SPI_read(){
	//must send a dummy bit to receive data
	SPI_send(0);
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 05 05 	call	0xa0a	; 0xa0a <SPI_send>
	
	loop_until_bit_is_set(SPSR, SPIF);
     a32:	77 9b       	sbis	0x0e, 7	; 14
     a34:	fe cf       	rjmp	.-4      	; 0xa32 <SPI_read+0x6>
	char data = SPDR;
     a36:	8f b1       	in	r24, 0x0f	; 15
	return data;
	
}
     a38:	08 95       	ret

00000a3a <SPI_select>:
	//printf("SPI_TEST: %s\n\n", spi_read_result);
	
}

void SPI_select(){
	clear_bit(PORTB, SS);
     a3a:	c4 98       	cbi	0x18, 4	; 24
     a3c:	08 95       	ret

00000a3e <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
     a3e:	c4 9a       	sbi	0x18, 4	; 24
     a40:	08 95       	ret

00000a42 <SRAM_init>:



void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
     a42:	85 b7       	in	r24, 0x35	; 53
     a44:	80 68       	ori	r24, 0x80	; 128
     a46:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
     a48:	80 b7       	in	r24, 0x30	; 48
     a4a:	80 62       	ori	r24, 0x20	; 32
     a4c:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
     a4e:	80 b7       	in	r24, 0x30	; 48
     a50:	8f 7e       	andi	r24, 0xEF	; 239
     a52:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
     a54:	80 b7       	in	r24, 0x30	; 48
     a56:	87 7f       	andi	r24, 0xF7	; 247
     a58:	80 bf       	out	0x30, r24	; 48
     a5a:	08 95       	ret

00000a5c <usart_transmit_to_computer>:
}


void usart_transmit_to_computer(unsigned int data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
     a5c:	5d 9b       	sbis	0x0b, 5	; 11
     a5e:	fe cf       	rjmp	.-4      	; 0xa5c <usart_transmit_to_computer>
	;
	
	/* Put data into buffer (sends the data) */
	UDR0 = data;
     a60:	8c b9       	out	0x0c, r24	; 12
     a62:	08 95       	ret

00000a64 <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
     a64:	5f 9b       	sbis	0x0b, 7	; 11
     a66:	fe cf       	rjmp	.-4      	; 0xa64 <usart_receive_from_computer>
	;
	
	/* Get and return data from buffer */
	return UDR0;
     a68:	8c b1       	in	r24, 0x0c	; 12
}
     a6a:	08 95       	ret

00000a6c <usart_init>:
#include <avr/io.h>


void usart_init(unsigned int ubbr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubbr>>8);
     a6c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
     a6e:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     a70:	88 e1       	ldi	r24, 0x18	; 24
     a72:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     a74:	8e e8       	ldi	r24, 0x8E	; 142
     a76:	80 bd       	out	0x20, r24	; 32
	
	
	/* Enable printf-thing */
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
     a78:	62 e3       	ldi	r22, 0x32	; 50
     a7a:	75 e0       	ldi	r23, 0x05	; 5
     a7c:	8e e2       	ldi	r24, 0x2E	; 46
     a7e:	95 e0       	ldi	r25, 0x05	; 5
     a80:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fdevopen>
     a84:	08 95       	ret

00000a86 <malloc>:
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	82 30       	cpi	r24, 0x02	; 2
     a8c:	91 05       	cpc	r25, r1
     a8e:	10 f4       	brcc	.+4      	; 0xa94 <malloc+0xe>
     a90:	82 e0       	ldi	r24, 0x02	; 2
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	e0 91 5e 02 	lds	r30, 0x025E
     a98:	f0 91 5f 02 	lds	r31, 0x025F
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	a0 e0       	ldi	r26, 0x00	; 0
     aa2:	b0 e0       	ldi	r27, 0x00	; 0
     aa4:	30 97       	sbiw	r30, 0x00	; 0
     aa6:	39 f1       	breq	.+78     	; 0xaf6 <malloc+0x70>
     aa8:	40 81       	ld	r20, Z
     aaa:	51 81       	ldd	r21, Z+1	; 0x01
     aac:	48 17       	cp	r20, r24
     aae:	59 07       	cpc	r21, r25
     ab0:	b8 f0       	brcs	.+46     	; 0xae0 <malloc+0x5a>
     ab2:	48 17       	cp	r20, r24
     ab4:	59 07       	cpc	r21, r25
     ab6:	71 f4       	brne	.+28     	; 0xad4 <malloc+0x4e>
     ab8:	82 81       	ldd	r24, Z+2	; 0x02
     aba:	93 81       	ldd	r25, Z+3	; 0x03
     abc:	10 97       	sbiw	r26, 0x00	; 0
     abe:	29 f0       	breq	.+10     	; 0xaca <malloc+0x44>
     ac0:	13 96       	adiw	r26, 0x03	; 3
     ac2:	9c 93       	st	X, r25
     ac4:	8e 93       	st	-X, r24
     ac6:	12 97       	sbiw	r26, 0x02	; 2
     ac8:	2c c0       	rjmp	.+88     	; 0xb22 <malloc+0x9c>
     aca:	90 93 5f 02 	sts	0x025F, r25
     ace:	80 93 5e 02 	sts	0x025E, r24
     ad2:	27 c0       	rjmp	.+78     	; 0xb22 <malloc+0x9c>
     ad4:	21 15       	cp	r18, r1
     ad6:	31 05       	cpc	r19, r1
     ad8:	31 f0       	breq	.+12     	; 0xae6 <malloc+0x60>
     ada:	42 17       	cp	r20, r18
     adc:	53 07       	cpc	r21, r19
     ade:	18 f0       	brcs	.+6      	; 0xae6 <malloc+0x60>
     ae0:	a9 01       	movw	r20, r18
     ae2:	db 01       	movw	r26, r22
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <malloc+0x62>
     ae6:	ef 01       	movw	r28, r30
     ae8:	9a 01       	movw	r18, r20
     aea:	bd 01       	movw	r22, r26
     aec:	df 01       	movw	r26, r30
     aee:	02 80       	ldd	r0, Z+2	; 0x02
     af0:	f3 81       	ldd	r31, Z+3	; 0x03
     af2:	e0 2d       	mov	r30, r0
     af4:	d7 cf       	rjmp	.-82     	; 0xaa4 <malloc+0x1e>
     af6:	21 15       	cp	r18, r1
     af8:	31 05       	cpc	r19, r1
     afa:	f9 f0       	breq	.+62     	; 0xb3a <malloc+0xb4>
     afc:	28 1b       	sub	r18, r24
     afe:	39 0b       	sbc	r19, r25
     b00:	24 30       	cpi	r18, 0x04	; 4
     b02:	31 05       	cpc	r19, r1
     b04:	80 f4       	brcc	.+32     	; 0xb26 <malloc+0xa0>
     b06:	8a 81       	ldd	r24, Y+2	; 0x02
     b08:	9b 81       	ldd	r25, Y+3	; 0x03
     b0a:	61 15       	cp	r22, r1
     b0c:	71 05       	cpc	r23, r1
     b0e:	21 f0       	breq	.+8      	; 0xb18 <malloc+0x92>
     b10:	fb 01       	movw	r30, r22
     b12:	93 83       	std	Z+3, r25	; 0x03
     b14:	82 83       	std	Z+2, r24	; 0x02
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <malloc+0x9a>
     b18:	90 93 5f 02 	sts	0x025F, r25
     b1c:	80 93 5e 02 	sts	0x025E, r24
     b20:	fe 01       	movw	r30, r28
     b22:	32 96       	adiw	r30, 0x02	; 2
     b24:	44 c0       	rjmp	.+136    	; 0xbae <malloc+0x128>
     b26:	fe 01       	movw	r30, r28
     b28:	e2 0f       	add	r30, r18
     b2a:	f3 1f       	adc	r31, r19
     b2c:	81 93       	st	Z+, r24
     b2e:	91 93       	st	Z+, r25
     b30:	22 50       	subi	r18, 0x02	; 2
     b32:	31 09       	sbc	r19, r1
     b34:	39 83       	std	Y+1, r19	; 0x01
     b36:	28 83       	st	Y, r18
     b38:	3a c0       	rjmp	.+116    	; 0xbae <malloc+0x128>
     b3a:	20 91 5c 02 	lds	r18, 0x025C
     b3e:	30 91 5d 02 	lds	r19, 0x025D
     b42:	23 2b       	or	r18, r19
     b44:	41 f4       	brne	.+16     	; 0xb56 <malloc+0xd0>
     b46:	20 91 02 01 	lds	r18, 0x0102
     b4a:	30 91 03 01 	lds	r19, 0x0103
     b4e:	30 93 5d 02 	sts	0x025D, r19
     b52:	20 93 5c 02 	sts	0x025C, r18
     b56:	20 91 00 01 	lds	r18, 0x0100
     b5a:	30 91 01 01 	lds	r19, 0x0101
     b5e:	21 15       	cp	r18, r1
     b60:	31 05       	cpc	r19, r1
     b62:	41 f4       	brne	.+16     	; 0xb74 <malloc+0xee>
     b64:	2d b7       	in	r18, 0x3d	; 61
     b66:	3e b7       	in	r19, 0x3e	; 62
     b68:	40 91 04 01 	lds	r20, 0x0104
     b6c:	50 91 05 01 	lds	r21, 0x0105
     b70:	24 1b       	sub	r18, r20
     b72:	35 0b       	sbc	r19, r21
     b74:	e0 91 5c 02 	lds	r30, 0x025C
     b78:	f0 91 5d 02 	lds	r31, 0x025D
     b7c:	e2 17       	cp	r30, r18
     b7e:	f3 07       	cpc	r31, r19
     b80:	a0 f4       	brcc	.+40     	; 0xbaa <malloc+0x124>
     b82:	2e 1b       	sub	r18, r30
     b84:	3f 0b       	sbc	r19, r31
     b86:	28 17       	cp	r18, r24
     b88:	39 07       	cpc	r19, r25
     b8a:	78 f0       	brcs	.+30     	; 0xbaa <malloc+0x124>
     b8c:	ac 01       	movw	r20, r24
     b8e:	4e 5f       	subi	r20, 0xFE	; 254
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	24 17       	cp	r18, r20
     b94:	35 07       	cpc	r19, r21
     b96:	48 f0       	brcs	.+18     	; 0xbaa <malloc+0x124>
     b98:	4e 0f       	add	r20, r30
     b9a:	5f 1f       	adc	r21, r31
     b9c:	50 93 5d 02 	sts	0x025D, r21
     ba0:	40 93 5c 02 	sts	0x025C, r20
     ba4:	81 93       	st	Z+, r24
     ba6:	91 93       	st	Z+, r25
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <malloc+0x128>
     baa:	e0 e0       	ldi	r30, 0x00	; 0
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	cf 01       	movw	r24, r30
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <free>:
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <free+0xa>
     bbe:	87 c0       	rjmp	.+270    	; 0xcce <free+0x118>
     bc0:	fc 01       	movw	r30, r24
     bc2:	32 97       	sbiw	r30, 0x02	; 2
     bc4:	13 82       	std	Z+3, r1	; 0x03
     bc6:	12 82       	std	Z+2, r1	; 0x02
     bc8:	c0 91 5e 02 	lds	r28, 0x025E
     bcc:	d0 91 5f 02 	lds	r29, 0x025F
     bd0:	20 97       	sbiw	r28, 0x00	; 0
     bd2:	81 f4       	brne	.+32     	; 0xbf4 <free+0x3e>
     bd4:	20 81       	ld	r18, Z
     bd6:	31 81       	ldd	r19, Z+1	; 0x01
     bd8:	28 0f       	add	r18, r24
     bda:	39 1f       	adc	r19, r25
     bdc:	80 91 5c 02 	lds	r24, 0x025C
     be0:	90 91 5d 02 	lds	r25, 0x025D
     be4:	82 17       	cp	r24, r18
     be6:	93 07       	cpc	r25, r19
     be8:	79 f5       	brne	.+94     	; 0xc48 <free+0x92>
     bea:	f0 93 5d 02 	sts	0x025D, r31
     bee:	e0 93 5c 02 	sts	0x025C, r30
     bf2:	6d c0       	rjmp	.+218    	; 0xcce <free+0x118>
     bf4:	de 01       	movw	r26, r28
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	ae 17       	cp	r26, r30
     bfc:	bf 07       	cpc	r27, r31
     bfe:	50 f4       	brcc	.+20     	; 0xc14 <free+0x5e>
     c00:	12 96       	adiw	r26, 0x02	; 2
     c02:	4d 91       	ld	r20, X+
     c04:	5c 91       	ld	r21, X
     c06:	13 97       	sbiw	r26, 0x03	; 3
     c08:	9d 01       	movw	r18, r26
     c0a:	41 15       	cp	r20, r1
     c0c:	51 05       	cpc	r21, r1
     c0e:	09 f1       	breq	.+66     	; 0xc52 <free+0x9c>
     c10:	da 01       	movw	r26, r20
     c12:	f3 cf       	rjmp	.-26     	; 0xbfa <free+0x44>
     c14:	b3 83       	std	Z+3, r27	; 0x03
     c16:	a2 83       	std	Z+2, r26	; 0x02
     c18:	40 81       	ld	r20, Z
     c1a:	51 81       	ldd	r21, Z+1	; 0x01
     c1c:	84 0f       	add	r24, r20
     c1e:	95 1f       	adc	r25, r21
     c20:	8a 17       	cp	r24, r26
     c22:	9b 07       	cpc	r25, r27
     c24:	71 f4       	brne	.+28     	; 0xc42 <free+0x8c>
     c26:	8d 91       	ld	r24, X+
     c28:	9c 91       	ld	r25, X
     c2a:	11 97       	sbiw	r26, 0x01	; 1
     c2c:	84 0f       	add	r24, r20
     c2e:	95 1f       	adc	r25, r21
     c30:	02 96       	adiw	r24, 0x02	; 2
     c32:	91 83       	std	Z+1, r25	; 0x01
     c34:	80 83       	st	Z, r24
     c36:	12 96       	adiw	r26, 0x02	; 2
     c38:	8d 91       	ld	r24, X+
     c3a:	9c 91       	ld	r25, X
     c3c:	13 97       	sbiw	r26, 0x03	; 3
     c3e:	93 83       	std	Z+3, r25	; 0x03
     c40:	82 83       	std	Z+2, r24	; 0x02
     c42:	21 15       	cp	r18, r1
     c44:	31 05       	cpc	r19, r1
     c46:	29 f4       	brne	.+10     	; 0xc52 <free+0x9c>
     c48:	f0 93 5f 02 	sts	0x025F, r31
     c4c:	e0 93 5e 02 	sts	0x025E, r30
     c50:	3e c0       	rjmp	.+124    	; 0xcce <free+0x118>
     c52:	d9 01       	movw	r26, r18
     c54:	13 96       	adiw	r26, 0x03	; 3
     c56:	fc 93       	st	X, r31
     c58:	ee 93       	st	-X, r30
     c5a:	12 97       	sbiw	r26, 0x02	; 2
     c5c:	4d 91       	ld	r20, X+
     c5e:	5d 91       	ld	r21, X+
     c60:	a4 0f       	add	r26, r20
     c62:	b5 1f       	adc	r27, r21
     c64:	ea 17       	cp	r30, r26
     c66:	fb 07       	cpc	r31, r27
     c68:	79 f4       	brne	.+30     	; 0xc88 <free+0xd2>
     c6a:	80 81       	ld	r24, Z
     c6c:	91 81       	ldd	r25, Z+1	; 0x01
     c6e:	84 0f       	add	r24, r20
     c70:	95 1f       	adc	r25, r21
     c72:	02 96       	adiw	r24, 0x02	; 2
     c74:	d9 01       	movw	r26, r18
     c76:	11 96       	adiw	r26, 0x01	; 1
     c78:	9c 93       	st	X, r25
     c7a:	8e 93       	st	-X, r24
     c7c:	82 81       	ldd	r24, Z+2	; 0x02
     c7e:	93 81       	ldd	r25, Z+3	; 0x03
     c80:	13 96       	adiw	r26, 0x03	; 3
     c82:	9c 93       	st	X, r25
     c84:	8e 93       	st	-X, r24
     c86:	12 97       	sbiw	r26, 0x02	; 2
     c88:	e0 e0       	ldi	r30, 0x00	; 0
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	8a 81       	ldd	r24, Y+2	; 0x02
     c8e:	9b 81       	ldd	r25, Y+3	; 0x03
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	19 f0       	breq	.+6      	; 0xc9a <free+0xe4>
     c94:	fe 01       	movw	r30, r28
     c96:	ec 01       	movw	r28, r24
     c98:	f9 cf       	rjmp	.-14     	; 0xc8c <free+0xd6>
     c9a:	ce 01       	movw	r24, r28
     c9c:	02 96       	adiw	r24, 0x02	; 2
     c9e:	28 81       	ld	r18, Y
     ca0:	39 81       	ldd	r19, Y+1	; 0x01
     ca2:	82 0f       	add	r24, r18
     ca4:	93 1f       	adc	r25, r19
     ca6:	20 91 5c 02 	lds	r18, 0x025C
     caa:	30 91 5d 02 	lds	r19, 0x025D
     cae:	28 17       	cp	r18, r24
     cb0:	39 07       	cpc	r19, r25
     cb2:	69 f4       	brne	.+26     	; 0xcce <free+0x118>
     cb4:	30 97       	sbiw	r30, 0x00	; 0
     cb6:	29 f4       	brne	.+10     	; 0xcc2 <free+0x10c>
     cb8:	10 92 5f 02 	sts	0x025F, r1
     cbc:	10 92 5e 02 	sts	0x025E, r1
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <free+0x110>
     cc2:	13 82       	std	Z+3, r1	; 0x03
     cc4:	12 82       	std	Z+2, r1	; 0x02
     cc6:	d0 93 5d 02 	sts	0x025D, r29
     cca:	c0 93 5c 02 	sts	0x025C, r28
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <fdevopen>:
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	ec 01       	movw	r28, r24
     cde:	8b 01       	movw	r16, r22
     ce0:	00 97       	sbiw	r24, 0x00	; 0
     ce2:	31 f4       	brne	.+12     	; 0xcf0 <fdevopen+0x1c>
     ce4:	61 15       	cp	r22, r1
     ce6:	71 05       	cpc	r23, r1
     ce8:	19 f4       	brne	.+6      	; 0xcf0 <fdevopen+0x1c>
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	38 c0       	rjmp	.+112    	; 0xd60 <fdevopen+0x8c>
     cf0:	6e e0       	ldi	r22, 0x0E	; 14
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 da 08 	call	0x11b4	; 0x11b4 <calloc>
     cfc:	fc 01       	movw	r30, r24
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	a1 f3       	breq	.-24     	; 0xcea <fdevopen+0x16>
     d02:	80 e8       	ldi	r24, 0x80	; 128
     d04:	83 83       	std	Z+3, r24	; 0x03
     d06:	01 15       	cp	r16, r1
     d08:	11 05       	cpc	r17, r1
     d0a:	71 f0       	breq	.+28     	; 0xd28 <fdevopen+0x54>
     d0c:	13 87       	std	Z+11, r17	; 0x0b
     d0e:	02 87       	std	Z+10, r16	; 0x0a
     d10:	81 e8       	ldi	r24, 0x81	; 129
     d12:	83 83       	std	Z+3, r24	; 0x03
     d14:	80 91 60 02 	lds	r24, 0x0260
     d18:	90 91 61 02 	lds	r25, 0x0261
     d1c:	89 2b       	or	r24, r25
     d1e:	21 f4       	brne	.+8      	; 0xd28 <fdevopen+0x54>
     d20:	f0 93 61 02 	sts	0x0261, r31
     d24:	e0 93 60 02 	sts	0x0260, r30
     d28:	20 97       	sbiw	r28, 0x00	; 0
     d2a:	c9 f0       	breq	.+50     	; 0xd5e <fdevopen+0x8a>
     d2c:	d1 87       	std	Z+9, r29	; 0x09
     d2e:	c0 87       	std	Z+8, r28	; 0x08
     d30:	83 81       	ldd	r24, Z+3	; 0x03
     d32:	82 60       	ori	r24, 0x02	; 2
     d34:	83 83       	std	Z+3, r24	; 0x03
     d36:	80 91 62 02 	lds	r24, 0x0262
     d3a:	90 91 63 02 	lds	r25, 0x0263
     d3e:	89 2b       	or	r24, r25
     d40:	71 f4       	brne	.+28     	; 0xd5e <fdevopen+0x8a>
     d42:	f0 93 63 02 	sts	0x0263, r31
     d46:	e0 93 62 02 	sts	0x0262, r30
     d4a:	80 91 64 02 	lds	r24, 0x0264
     d4e:	90 91 65 02 	lds	r25, 0x0265
     d52:	89 2b       	or	r24, r25
     d54:	21 f4       	brne	.+8      	; 0xd5e <fdevopen+0x8a>
     d56:	f0 93 65 02 	sts	0x0265, r31
     d5a:	e0 93 64 02 	sts	0x0264, r30
     d5e:	cf 01       	movw	r24, r30
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	08 95       	ret

00000d6a <fprintf>:
     d6a:	a0 e0       	ldi	r26, 0x00	; 0
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	eb eb       	ldi	r30, 0xBB	; 187
     d70:	f6 e0       	ldi	r31, 0x06	; 6
     d72:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__prologue_saves__+0x20>
     d76:	ae 01       	movw	r20, r28
     d78:	47 5f       	subi	r20, 0xF7	; 247
     d7a:	5f 4f       	sbci	r21, 0xFF	; 255
     d7c:	6f 81       	ldd	r22, Y+7	; 0x07
     d7e:	78 85       	ldd	r23, Y+8	; 0x08
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	0e 94 08 07 	call	0xe10	; 0xe10 <vfprintf>
     d88:	e2 e0       	ldi	r30, 0x02	; 2
     d8a:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__epilogue_restores__+0x20>

00000d8e <printf>:
     d8e:	a0 e0       	ldi	r26, 0x00	; 0
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ed ec       	ldi	r30, 0xCD	; 205
     d94:	f6 e0       	ldi	r31, 0x06	; 6
     d96:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__prologue_saves__+0x20>
     d9a:	fe 01       	movw	r30, r28
     d9c:	35 96       	adiw	r30, 0x05	; 5
     d9e:	61 91       	ld	r22, Z+
     da0:	71 91       	ld	r23, Z+
     da2:	af 01       	movw	r20, r30
     da4:	80 91 62 02 	lds	r24, 0x0262
     da8:	90 91 63 02 	lds	r25, 0x0263
     dac:	0e 94 08 07 	call	0xe10	; 0xe10 <vfprintf>
     db0:	e2 e0       	ldi	r30, 0x02	; 2
     db2:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__epilogue_restores__+0x20>

00000db6 <puts>:
     db6:	0f 93       	push	r16
     db8:	1f 93       	push	r17
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	e0 91 62 02 	lds	r30, 0x0262
     dc2:	f0 91 63 02 	lds	r31, 0x0263
     dc6:	23 81       	ldd	r18, Z+3	; 0x03
     dc8:	21 ff       	sbrs	r18, 1
     dca:	1b c0       	rjmp	.+54     	; 0xe02 <puts+0x4c>
     dcc:	ec 01       	movw	r28, r24
     dce:	00 e0       	ldi	r16, 0x00	; 0
     dd0:	10 e0       	ldi	r17, 0x00	; 0
     dd2:	89 91       	ld	r24, Y+
     dd4:	60 91 62 02 	lds	r22, 0x0262
     dd8:	70 91 63 02 	lds	r23, 0x0263
     ddc:	db 01       	movw	r26, r22
     dde:	18 96       	adiw	r26, 0x08	; 8
     de0:	ed 91       	ld	r30, X+
     de2:	fc 91       	ld	r31, X
     de4:	19 97       	sbiw	r26, 0x09	; 9
     de6:	88 23       	and	r24, r24
     de8:	31 f0       	breq	.+12     	; 0xdf6 <puts+0x40>
     dea:	09 95       	icall
     dec:	89 2b       	or	r24, r25
     dee:	89 f3       	breq	.-30     	; 0xdd2 <puts+0x1c>
     df0:	0f ef       	ldi	r16, 0xFF	; 255
     df2:	1f ef       	ldi	r17, 0xFF	; 255
     df4:	ee cf       	rjmp	.-36     	; 0xdd2 <puts+0x1c>
     df6:	8a e0       	ldi	r24, 0x0A	; 10
     df8:	09 95       	icall
     dfa:	89 2b       	or	r24, r25
     dfc:	11 f4       	brne	.+4      	; 0xe02 <puts+0x4c>
     dfe:	c8 01       	movw	r24, r16
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <puts+0x50>
     e02:	8f ef       	ldi	r24, 0xFF	; 255
     e04:	9f ef       	ldi	r25, 0xFF	; 255
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	1f 91       	pop	r17
     e0c:	0f 91       	pop	r16
     e0e:	08 95       	ret

00000e10 <vfprintf>:
     e10:	ac e0       	ldi	r26, 0x0C	; 12
     e12:	b0 e0       	ldi	r27, 0x00	; 0
     e14:	ee e0       	ldi	r30, 0x0E	; 14
     e16:	f7 e0       	ldi	r31, 0x07	; 7
     e18:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__prologue_saves__>
     e1c:	7c 01       	movw	r14, r24
     e1e:	6b 01       	movw	r12, r22
     e20:	8a 01       	movw	r16, r20
     e22:	fc 01       	movw	r30, r24
     e24:	17 82       	std	Z+7, r1	; 0x07
     e26:	16 82       	std	Z+6, r1	; 0x06
     e28:	83 81       	ldd	r24, Z+3	; 0x03
     e2a:	81 ff       	sbrs	r24, 1
     e2c:	bd c1       	rjmp	.+890    	; 0x11a8 <vfprintf+0x398>
     e2e:	ce 01       	movw	r24, r28
     e30:	01 96       	adiw	r24, 0x01	; 1
     e32:	4c 01       	movw	r8, r24
     e34:	f7 01       	movw	r30, r14
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	f6 01       	movw	r30, r12
     e3a:	93 fd       	sbrc	r25, 3
     e3c:	85 91       	lpm	r24, Z+
     e3e:	93 ff       	sbrs	r25, 3
     e40:	81 91       	ld	r24, Z+
     e42:	6f 01       	movw	r12, r30
     e44:	88 23       	and	r24, r24
     e46:	09 f4       	brne	.+2      	; 0xe4a <vfprintf+0x3a>
     e48:	ab c1       	rjmp	.+854    	; 0x11a0 <vfprintf+0x390>
     e4a:	85 32       	cpi	r24, 0x25	; 37
     e4c:	39 f4       	brne	.+14     	; 0xe5c <vfprintf+0x4c>
     e4e:	93 fd       	sbrc	r25, 3
     e50:	85 91       	lpm	r24, Z+
     e52:	93 ff       	sbrs	r25, 3
     e54:	81 91       	ld	r24, Z+
     e56:	6f 01       	movw	r12, r30
     e58:	85 32       	cpi	r24, 0x25	; 37
     e5a:	29 f4       	brne	.+10     	; 0xe66 <vfprintf+0x56>
     e5c:	b7 01       	movw	r22, r14
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     e64:	e7 cf       	rjmp	.-50     	; 0xe34 <vfprintf+0x24>
     e66:	51 2c       	mov	r5, r1
     e68:	31 2c       	mov	r3, r1
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	20 32       	cpi	r18, 0x20	; 32
     e6e:	a0 f4       	brcc	.+40     	; 0xe98 <vfprintf+0x88>
     e70:	8b 32       	cpi	r24, 0x2B	; 43
     e72:	69 f0       	breq	.+26     	; 0xe8e <vfprintf+0x7e>
     e74:	30 f4       	brcc	.+12     	; 0xe82 <vfprintf+0x72>
     e76:	80 32       	cpi	r24, 0x20	; 32
     e78:	59 f0       	breq	.+22     	; 0xe90 <vfprintf+0x80>
     e7a:	83 32       	cpi	r24, 0x23	; 35
     e7c:	69 f4       	brne	.+26     	; 0xe98 <vfprintf+0x88>
     e7e:	20 61       	ori	r18, 0x10	; 16
     e80:	2c c0       	rjmp	.+88     	; 0xeda <vfprintf+0xca>
     e82:	8d 32       	cpi	r24, 0x2D	; 45
     e84:	39 f0       	breq	.+14     	; 0xe94 <vfprintf+0x84>
     e86:	80 33       	cpi	r24, 0x30	; 48
     e88:	39 f4       	brne	.+14     	; 0xe98 <vfprintf+0x88>
     e8a:	21 60       	ori	r18, 0x01	; 1
     e8c:	26 c0       	rjmp	.+76     	; 0xeda <vfprintf+0xca>
     e8e:	22 60       	ori	r18, 0x02	; 2
     e90:	24 60       	ori	r18, 0x04	; 4
     e92:	23 c0       	rjmp	.+70     	; 0xeda <vfprintf+0xca>
     e94:	28 60       	ori	r18, 0x08	; 8
     e96:	21 c0       	rjmp	.+66     	; 0xeda <vfprintf+0xca>
     e98:	27 fd       	sbrc	r18, 7
     e9a:	27 c0       	rjmp	.+78     	; 0xeea <vfprintf+0xda>
     e9c:	30 ed       	ldi	r19, 0xD0	; 208
     e9e:	38 0f       	add	r19, r24
     ea0:	3a 30       	cpi	r19, 0x0A	; 10
     ea2:	78 f4       	brcc	.+30     	; 0xec2 <vfprintf+0xb2>
     ea4:	26 ff       	sbrs	r18, 6
     ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <vfprintf+0xa4>
     ea8:	fa e0       	ldi	r31, 0x0A	; 10
     eaa:	5f 9e       	mul	r5, r31
     eac:	30 0d       	add	r19, r0
     eae:	11 24       	eor	r1, r1
     eb0:	53 2e       	mov	r5, r19
     eb2:	13 c0       	rjmp	.+38     	; 0xeda <vfprintf+0xca>
     eb4:	8a e0       	ldi	r24, 0x0A	; 10
     eb6:	38 9e       	mul	r3, r24
     eb8:	30 0d       	add	r19, r0
     eba:	11 24       	eor	r1, r1
     ebc:	33 2e       	mov	r3, r19
     ebe:	20 62       	ori	r18, 0x20	; 32
     ec0:	0c c0       	rjmp	.+24     	; 0xeda <vfprintf+0xca>
     ec2:	8e 32       	cpi	r24, 0x2E	; 46
     ec4:	21 f4       	brne	.+8      	; 0xece <vfprintf+0xbe>
     ec6:	26 fd       	sbrc	r18, 6
     ec8:	6b c1       	rjmp	.+726    	; 0x11a0 <vfprintf+0x390>
     eca:	20 64       	ori	r18, 0x40	; 64
     ecc:	06 c0       	rjmp	.+12     	; 0xeda <vfprintf+0xca>
     ece:	8c 36       	cpi	r24, 0x6C	; 108
     ed0:	11 f4       	brne	.+4      	; 0xed6 <vfprintf+0xc6>
     ed2:	20 68       	ori	r18, 0x80	; 128
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <vfprintf+0xca>
     ed6:	88 36       	cpi	r24, 0x68	; 104
     ed8:	41 f4       	brne	.+16     	; 0xeea <vfprintf+0xda>
     eda:	f6 01       	movw	r30, r12
     edc:	93 fd       	sbrc	r25, 3
     ede:	85 91       	lpm	r24, Z+
     ee0:	93 ff       	sbrs	r25, 3
     ee2:	81 91       	ld	r24, Z+
     ee4:	6f 01       	movw	r12, r30
     ee6:	81 11       	cpse	r24, r1
     ee8:	c1 cf       	rjmp	.-126    	; 0xe6c <vfprintf+0x5c>
     eea:	98 2f       	mov	r25, r24
     eec:	9f 7d       	andi	r25, 0xDF	; 223
     eee:	95 54       	subi	r25, 0x45	; 69
     ef0:	93 30       	cpi	r25, 0x03	; 3
     ef2:	28 f4       	brcc	.+10     	; 0xefe <vfprintf+0xee>
     ef4:	0c 5f       	subi	r16, 0xFC	; 252
     ef6:	1f 4f       	sbci	r17, 0xFF	; 255
     ef8:	ff e3       	ldi	r31, 0x3F	; 63
     efa:	f9 83       	std	Y+1, r31	; 0x01
     efc:	0d c0       	rjmp	.+26     	; 0xf18 <vfprintf+0x108>
     efe:	83 36       	cpi	r24, 0x63	; 99
     f00:	31 f0       	breq	.+12     	; 0xf0e <vfprintf+0xfe>
     f02:	83 37       	cpi	r24, 0x73	; 115
     f04:	71 f0       	breq	.+28     	; 0xf22 <vfprintf+0x112>
     f06:	83 35       	cpi	r24, 0x53	; 83
     f08:	09 f0       	breq	.+2      	; 0xf0c <vfprintf+0xfc>
     f0a:	5b c0       	rjmp	.+182    	; 0xfc2 <vfprintf+0x1b2>
     f0c:	22 c0       	rjmp	.+68     	; 0xf52 <vfprintf+0x142>
     f0e:	f8 01       	movw	r30, r16
     f10:	80 81       	ld	r24, Z
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	0e 5f       	subi	r16, 0xFE	; 254
     f16:	1f 4f       	sbci	r17, 0xFF	; 255
     f18:	44 24       	eor	r4, r4
     f1a:	43 94       	inc	r4
     f1c:	51 2c       	mov	r5, r1
     f1e:	54 01       	movw	r10, r8
     f20:	15 c0       	rjmp	.+42     	; 0xf4c <vfprintf+0x13c>
     f22:	38 01       	movw	r6, r16
     f24:	f2 e0       	ldi	r31, 0x02	; 2
     f26:	6f 0e       	add	r6, r31
     f28:	71 1c       	adc	r7, r1
     f2a:	f8 01       	movw	r30, r16
     f2c:	a0 80       	ld	r10, Z
     f2e:	b1 80       	ldd	r11, Z+1	; 0x01
     f30:	26 ff       	sbrs	r18, 6
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <vfprintf+0x12a>
     f34:	65 2d       	mov	r22, r5
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <vfprintf+0x12e>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	c5 01       	movw	r24, r10
     f40:	2c 87       	std	Y+12, r18	; 0x0c
     f42:	0e 94 08 09 	call	0x1210	; 0x1210 <strnlen>
     f46:	2c 01       	movw	r4, r24
     f48:	83 01       	movw	r16, r6
     f4a:	2c 85       	ldd	r18, Y+12	; 0x0c
     f4c:	2f 77       	andi	r18, 0x7F	; 127
     f4e:	22 2e       	mov	r2, r18
     f50:	17 c0       	rjmp	.+46     	; 0xf80 <vfprintf+0x170>
     f52:	38 01       	movw	r6, r16
     f54:	f2 e0       	ldi	r31, 0x02	; 2
     f56:	6f 0e       	add	r6, r31
     f58:	71 1c       	adc	r7, r1
     f5a:	f8 01       	movw	r30, r16
     f5c:	a0 80       	ld	r10, Z
     f5e:	b1 80       	ldd	r11, Z+1	; 0x01
     f60:	26 ff       	sbrs	r18, 6
     f62:	03 c0       	rjmp	.+6      	; 0xf6a <vfprintf+0x15a>
     f64:	65 2d       	mov	r22, r5
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <vfprintf+0x15e>
     f6a:	6f ef       	ldi	r22, 0xFF	; 255
     f6c:	7f ef       	ldi	r23, 0xFF	; 255
     f6e:	c5 01       	movw	r24, r10
     f70:	2c 87       	std	Y+12, r18	; 0x0c
     f72:	0e 94 f6 08 	call	0x11ec	; 0x11ec <strnlen_P>
     f76:	2c 01       	movw	r4, r24
     f78:	2c 85       	ldd	r18, Y+12	; 0x0c
     f7a:	20 68       	ori	r18, 0x80	; 128
     f7c:	22 2e       	mov	r2, r18
     f7e:	83 01       	movw	r16, r6
     f80:	23 fc       	sbrc	r2, 3
     f82:	1b c0       	rjmp	.+54     	; 0xfba <vfprintf+0x1aa>
     f84:	83 2d       	mov	r24, r3
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	48 16       	cp	r4, r24
     f8a:	59 06       	cpc	r5, r25
     f8c:	b0 f4       	brcc	.+44     	; 0xfba <vfprintf+0x1aa>
     f8e:	b7 01       	movw	r22, r14
     f90:	80 e2       	ldi	r24, 0x20	; 32
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     f98:	3a 94       	dec	r3
     f9a:	f4 cf       	rjmp	.-24     	; 0xf84 <vfprintf+0x174>
     f9c:	f5 01       	movw	r30, r10
     f9e:	27 fc       	sbrc	r2, 7
     fa0:	85 91       	lpm	r24, Z+
     fa2:	27 fe       	sbrs	r2, 7
     fa4:	81 91       	ld	r24, Z+
     fa6:	5f 01       	movw	r10, r30
     fa8:	b7 01       	movw	r22, r14
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
     fb0:	31 10       	cpse	r3, r1
     fb2:	3a 94       	dec	r3
     fb4:	f1 e0       	ldi	r31, 0x01	; 1
     fb6:	4f 1a       	sub	r4, r31
     fb8:	51 08       	sbc	r5, r1
     fba:	41 14       	cp	r4, r1
     fbc:	51 04       	cpc	r5, r1
     fbe:	71 f7       	brne	.-36     	; 0xf9c <vfprintf+0x18c>
     fc0:	e5 c0       	rjmp	.+458    	; 0x118c <vfprintf+0x37c>
     fc2:	84 36       	cpi	r24, 0x64	; 100
     fc4:	11 f0       	breq	.+4      	; 0xfca <vfprintf+0x1ba>
     fc6:	89 36       	cpi	r24, 0x69	; 105
     fc8:	39 f5       	brne	.+78     	; 0x1018 <vfprintf+0x208>
     fca:	f8 01       	movw	r30, r16
     fcc:	27 ff       	sbrs	r18, 7
     fce:	07 c0       	rjmp	.+14     	; 0xfde <vfprintf+0x1ce>
     fd0:	60 81       	ld	r22, Z
     fd2:	71 81       	ldd	r23, Z+1	; 0x01
     fd4:	82 81       	ldd	r24, Z+2	; 0x02
     fd6:	93 81       	ldd	r25, Z+3	; 0x03
     fd8:	0c 5f       	subi	r16, 0xFC	; 252
     fda:	1f 4f       	sbci	r17, 0xFF	; 255
     fdc:	08 c0       	rjmp	.+16     	; 0xfee <vfprintf+0x1de>
     fde:	60 81       	ld	r22, Z
     fe0:	71 81       	ldd	r23, Z+1	; 0x01
     fe2:	88 27       	eor	r24, r24
     fe4:	77 fd       	sbrc	r23, 7
     fe6:	80 95       	com	r24
     fe8:	98 2f       	mov	r25, r24
     fea:	0e 5f       	subi	r16, 0xFE	; 254
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	2f 76       	andi	r18, 0x6F	; 111
     ff0:	b2 2e       	mov	r11, r18
     ff2:	97 ff       	sbrs	r25, 7
     ff4:	09 c0       	rjmp	.+18     	; 0x1008 <vfprintf+0x1f8>
     ff6:	90 95       	com	r25
     ff8:	80 95       	com	r24
     ffa:	70 95       	com	r23
     ffc:	61 95       	neg	r22
     ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    1000:	8f 4f       	sbci	r24, 0xFF	; 255
    1002:	9f 4f       	sbci	r25, 0xFF	; 255
    1004:	20 68       	ori	r18, 0x80	; 128
    1006:	b2 2e       	mov	r11, r18
    1008:	2a e0       	ldi	r18, 0x0A	; 10
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	a4 01       	movw	r20, r8
    100e:	0e 94 45 09 	call	0x128a	; 0x128a <__ultoa_invert>
    1012:	a8 2e       	mov	r10, r24
    1014:	a8 18       	sub	r10, r8
    1016:	44 c0       	rjmp	.+136    	; 0x10a0 <vfprintf+0x290>
    1018:	85 37       	cpi	r24, 0x75	; 117
    101a:	29 f4       	brne	.+10     	; 0x1026 <vfprintf+0x216>
    101c:	2f 7e       	andi	r18, 0xEF	; 239
    101e:	b2 2e       	mov	r11, r18
    1020:	2a e0       	ldi	r18, 0x0A	; 10
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	25 c0       	rjmp	.+74     	; 0x1070 <vfprintf+0x260>
    1026:	f2 2f       	mov	r31, r18
    1028:	f9 7f       	andi	r31, 0xF9	; 249
    102a:	bf 2e       	mov	r11, r31
    102c:	8f 36       	cpi	r24, 0x6F	; 111
    102e:	c1 f0       	breq	.+48     	; 0x1060 <vfprintf+0x250>
    1030:	18 f4       	brcc	.+6      	; 0x1038 <vfprintf+0x228>
    1032:	88 35       	cpi	r24, 0x58	; 88
    1034:	79 f0       	breq	.+30     	; 0x1054 <vfprintf+0x244>
    1036:	b4 c0       	rjmp	.+360    	; 0x11a0 <vfprintf+0x390>
    1038:	80 37       	cpi	r24, 0x70	; 112
    103a:	19 f0       	breq	.+6      	; 0x1042 <vfprintf+0x232>
    103c:	88 37       	cpi	r24, 0x78	; 120
    103e:	21 f0       	breq	.+8      	; 0x1048 <vfprintf+0x238>
    1040:	af c0       	rjmp	.+350    	; 0x11a0 <vfprintf+0x390>
    1042:	2f 2f       	mov	r18, r31
    1044:	20 61       	ori	r18, 0x10	; 16
    1046:	b2 2e       	mov	r11, r18
    1048:	b4 fe       	sbrs	r11, 4
    104a:	0d c0       	rjmp	.+26     	; 0x1066 <vfprintf+0x256>
    104c:	8b 2d       	mov	r24, r11
    104e:	84 60       	ori	r24, 0x04	; 4
    1050:	b8 2e       	mov	r11, r24
    1052:	09 c0       	rjmp	.+18     	; 0x1066 <vfprintf+0x256>
    1054:	24 ff       	sbrs	r18, 4
    1056:	0a c0       	rjmp	.+20     	; 0x106c <vfprintf+0x25c>
    1058:	9f 2f       	mov	r25, r31
    105a:	96 60       	ori	r25, 0x06	; 6
    105c:	b9 2e       	mov	r11, r25
    105e:	06 c0       	rjmp	.+12     	; 0x106c <vfprintf+0x25c>
    1060:	28 e0       	ldi	r18, 0x08	; 8
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	05 c0       	rjmp	.+10     	; 0x1070 <vfprintf+0x260>
    1066:	20 e1       	ldi	r18, 0x10	; 16
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <vfprintf+0x260>
    106c:	20 e1       	ldi	r18, 0x10	; 16
    106e:	32 e0       	ldi	r19, 0x02	; 2
    1070:	f8 01       	movw	r30, r16
    1072:	b7 fe       	sbrs	r11, 7
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <vfprintf+0x274>
    1076:	60 81       	ld	r22, Z
    1078:	71 81       	ldd	r23, Z+1	; 0x01
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	0c 5f       	subi	r16, 0xFC	; 252
    1080:	1f 4f       	sbci	r17, 0xFF	; 255
    1082:	06 c0       	rjmp	.+12     	; 0x1090 <vfprintf+0x280>
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 5f       	subi	r16, 0xFE	; 254
    108e:	1f 4f       	sbci	r17, 0xFF	; 255
    1090:	a4 01       	movw	r20, r8
    1092:	0e 94 45 09 	call	0x128a	; 0x128a <__ultoa_invert>
    1096:	a8 2e       	mov	r10, r24
    1098:	a8 18       	sub	r10, r8
    109a:	fb 2d       	mov	r31, r11
    109c:	ff 77       	andi	r31, 0x7F	; 127
    109e:	bf 2e       	mov	r11, r31
    10a0:	b6 fe       	sbrs	r11, 6
    10a2:	0b c0       	rjmp	.+22     	; 0x10ba <vfprintf+0x2aa>
    10a4:	2b 2d       	mov	r18, r11
    10a6:	2e 7f       	andi	r18, 0xFE	; 254
    10a8:	a5 14       	cp	r10, r5
    10aa:	50 f4       	brcc	.+20     	; 0x10c0 <vfprintf+0x2b0>
    10ac:	b4 fe       	sbrs	r11, 4
    10ae:	0a c0       	rjmp	.+20     	; 0x10c4 <vfprintf+0x2b4>
    10b0:	b2 fc       	sbrc	r11, 2
    10b2:	08 c0       	rjmp	.+16     	; 0x10c4 <vfprintf+0x2b4>
    10b4:	2b 2d       	mov	r18, r11
    10b6:	2e 7e       	andi	r18, 0xEE	; 238
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <vfprintf+0x2b4>
    10ba:	7a 2c       	mov	r7, r10
    10bc:	2b 2d       	mov	r18, r11
    10be:	03 c0       	rjmp	.+6      	; 0x10c6 <vfprintf+0x2b6>
    10c0:	7a 2c       	mov	r7, r10
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <vfprintf+0x2b6>
    10c4:	75 2c       	mov	r7, r5
    10c6:	24 ff       	sbrs	r18, 4
    10c8:	0d c0       	rjmp	.+26     	; 0x10e4 <vfprintf+0x2d4>
    10ca:	fe 01       	movw	r30, r28
    10cc:	ea 0d       	add	r30, r10
    10ce:	f1 1d       	adc	r31, r1
    10d0:	80 81       	ld	r24, Z
    10d2:	80 33       	cpi	r24, 0x30	; 48
    10d4:	11 f4       	brne	.+4      	; 0x10da <vfprintf+0x2ca>
    10d6:	29 7e       	andi	r18, 0xE9	; 233
    10d8:	09 c0       	rjmp	.+18     	; 0x10ec <vfprintf+0x2dc>
    10da:	22 ff       	sbrs	r18, 2
    10dc:	06 c0       	rjmp	.+12     	; 0x10ea <vfprintf+0x2da>
    10de:	73 94       	inc	r7
    10e0:	73 94       	inc	r7
    10e2:	04 c0       	rjmp	.+8      	; 0x10ec <vfprintf+0x2dc>
    10e4:	82 2f       	mov	r24, r18
    10e6:	86 78       	andi	r24, 0x86	; 134
    10e8:	09 f0       	breq	.+2      	; 0x10ec <vfprintf+0x2dc>
    10ea:	73 94       	inc	r7
    10ec:	23 fd       	sbrc	r18, 3
    10ee:	13 c0       	rjmp	.+38     	; 0x1116 <vfprintf+0x306>
    10f0:	20 ff       	sbrs	r18, 0
    10f2:	06 c0       	rjmp	.+12     	; 0x1100 <vfprintf+0x2f0>
    10f4:	5a 2c       	mov	r5, r10
    10f6:	73 14       	cp	r7, r3
    10f8:	18 f4       	brcc	.+6      	; 0x1100 <vfprintf+0x2f0>
    10fa:	53 0c       	add	r5, r3
    10fc:	57 18       	sub	r5, r7
    10fe:	73 2c       	mov	r7, r3
    1100:	73 14       	cp	r7, r3
    1102:	68 f4       	brcc	.+26     	; 0x111e <vfprintf+0x30e>
    1104:	b7 01       	movw	r22, r14
    1106:	80 e2       	ldi	r24, 0x20	; 32
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	2c 87       	std	Y+12, r18	; 0x0c
    110c:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
    1110:	73 94       	inc	r7
    1112:	2c 85       	ldd	r18, Y+12	; 0x0c
    1114:	f5 cf       	rjmp	.-22     	; 0x1100 <vfprintf+0x2f0>
    1116:	73 14       	cp	r7, r3
    1118:	10 f4       	brcc	.+4      	; 0x111e <vfprintf+0x30e>
    111a:	37 18       	sub	r3, r7
    111c:	01 c0       	rjmp	.+2      	; 0x1120 <vfprintf+0x310>
    111e:	31 2c       	mov	r3, r1
    1120:	24 ff       	sbrs	r18, 4
    1122:	12 c0       	rjmp	.+36     	; 0x1148 <vfprintf+0x338>
    1124:	b7 01       	movw	r22, r14
    1126:	80 e3       	ldi	r24, 0x30	; 48
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	2c 87       	std	Y+12, r18	; 0x0c
    112c:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
    1130:	2c 85       	ldd	r18, Y+12	; 0x0c
    1132:	22 ff       	sbrs	r18, 2
    1134:	17 c0       	rjmp	.+46     	; 0x1164 <vfprintf+0x354>
    1136:	21 ff       	sbrs	r18, 1
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <vfprintf+0x330>
    113a:	88 e5       	ldi	r24, 0x58	; 88
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <vfprintf+0x334>
    1140:	88 e7       	ldi	r24, 0x78	; 120
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	b7 01       	movw	r22, r14
    1146:	0c c0       	rjmp	.+24     	; 0x1160 <vfprintf+0x350>
    1148:	82 2f       	mov	r24, r18
    114a:	86 78       	andi	r24, 0x86	; 134
    114c:	59 f0       	breq	.+22     	; 0x1164 <vfprintf+0x354>
    114e:	21 fd       	sbrc	r18, 1
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <vfprintf+0x346>
    1152:	80 e2       	ldi	r24, 0x20	; 32
    1154:	01 c0       	rjmp	.+2      	; 0x1158 <vfprintf+0x348>
    1156:	8b e2       	ldi	r24, 0x2B	; 43
    1158:	27 fd       	sbrc	r18, 7
    115a:	8d e2       	ldi	r24, 0x2D	; 45
    115c:	b7 01       	movw	r22, r14
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
    1164:	a5 14       	cp	r10, r5
    1166:	38 f4       	brcc	.+14     	; 0x1176 <vfprintf+0x366>
    1168:	b7 01       	movw	r22, r14
    116a:	80 e3       	ldi	r24, 0x30	; 48
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
    1172:	5a 94       	dec	r5
    1174:	f7 cf       	rjmp	.-18     	; 0x1164 <vfprintf+0x354>
    1176:	aa 94       	dec	r10
    1178:	f4 01       	movw	r30, r8
    117a:	ea 0d       	add	r30, r10
    117c:	f1 1d       	adc	r31, r1
    117e:	80 81       	ld	r24, Z
    1180:	b7 01       	movw	r22, r14
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
    1188:	a1 10       	cpse	r10, r1
    118a:	f5 cf       	rjmp	.-22     	; 0x1176 <vfprintf+0x366>
    118c:	33 20       	and	r3, r3
    118e:	09 f4       	brne	.+2      	; 0x1192 <vfprintf+0x382>
    1190:	51 ce       	rjmp	.-862    	; 0xe34 <vfprintf+0x24>
    1192:	b7 01       	movw	r22, r14
    1194:	80 e2       	ldi	r24, 0x20	; 32
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 13 09 	call	0x1226	; 0x1226 <fputc>
    119c:	3a 94       	dec	r3
    119e:	f6 cf       	rjmp	.-20     	; 0x118c <vfprintf+0x37c>
    11a0:	f7 01       	movw	r30, r14
    11a2:	86 81       	ldd	r24, Z+6	; 0x06
    11a4:	97 81       	ldd	r25, Z+7	; 0x07
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <vfprintf+0x39c>
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
    11aa:	9f ef       	ldi	r25, 0xFF	; 255
    11ac:	2c 96       	adiw	r28, 0x0c	; 12
    11ae:	e2 e1       	ldi	r30, 0x12	; 18
    11b0:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__epilogue_restores__>

000011b4 <calloc>:
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	cf 93       	push	r28
    11ba:	df 93       	push	r29
    11bc:	86 9f       	mul	r24, r22
    11be:	80 01       	movw	r16, r0
    11c0:	87 9f       	mul	r24, r23
    11c2:	10 0d       	add	r17, r0
    11c4:	96 9f       	mul	r25, r22
    11c6:	10 0d       	add	r17, r0
    11c8:	11 24       	eor	r1, r1
    11ca:	c8 01       	movw	r24, r16
    11cc:	0e 94 43 05 	call	0xa86	; 0xa86 <malloc>
    11d0:	ec 01       	movw	r28, r24
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	29 f0       	breq	.+10     	; 0x11e0 <calloc+0x2c>
    11d6:	a8 01       	movw	r20, r16
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	0e 94 01 09 	call	0x1202	; 0x1202 <memset>
    11e0:	ce 01       	movw	r24, r28
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	08 95       	ret

000011ec <strnlen_P>:
    11ec:	fc 01       	movw	r30, r24
    11ee:	05 90       	lpm	r0, Z+
    11f0:	61 50       	subi	r22, 0x01	; 1
    11f2:	70 40       	sbci	r23, 0x00	; 0
    11f4:	01 10       	cpse	r0, r1
    11f6:	d8 f7       	brcc	.-10     	; 0x11ee <strnlen_P+0x2>
    11f8:	80 95       	com	r24
    11fa:	90 95       	com	r25
    11fc:	8e 0f       	add	r24, r30
    11fe:	9f 1f       	adc	r25, r31
    1200:	08 95       	ret

00001202 <memset>:
    1202:	dc 01       	movw	r26, r24
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <memset+0x6>
    1206:	6d 93       	st	X+, r22
    1208:	41 50       	subi	r20, 0x01	; 1
    120a:	50 40       	sbci	r21, 0x00	; 0
    120c:	e0 f7       	brcc	.-8      	; 0x1206 <memset+0x4>
    120e:	08 95       	ret

00001210 <strnlen>:
    1210:	fc 01       	movw	r30, r24
    1212:	61 50       	subi	r22, 0x01	; 1
    1214:	70 40       	sbci	r23, 0x00	; 0
    1216:	01 90       	ld	r0, Z+
    1218:	01 10       	cpse	r0, r1
    121a:	d8 f7       	brcc	.-10     	; 0x1212 <strnlen+0x2>
    121c:	80 95       	com	r24
    121e:	90 95       	com	r25
    1220:	8e 0f       	add	r24, r30
    1222:	9f 1f       	adc	r25, r31
    1224:	08 95       	ret

00001226 <fputc>:
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	18 2f       	mov	r17, r24
    1230:	09 2f       	mov	r16, r25
    1232:	eb 01       	movw	r28, r22
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	81 fd       	sbrc	r24, 1
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <fputc+0x1a>
    123a:	8f ef       	ldi	r24, 0xFF	; 255
    123c:	9f ef       	ldi	r25, 0xFF	; 255
    123e:	20 c0       	rjmp	.+64     	; 0x1280 <fputc+0x5a>
    1240:	82 ff       	sbrs	r24, 2
    1242:	10 c0       	rjmp	.+32     	; 0x1264 <fputc+0x3e>
    1244:	4e 81       	ldd	r20, Y+6	; 0x06
    1246:	5f 81       	ldd	r21, Y+7	; 0x07
    1248:	2c 81       	ldd	r18, Y+4	; 0x04
    124a:	3d 81       	ldd	r19, Y+5	; 0x05
    124c:	42 17       	cp	r20, r18
    124e:	53 07       	cpc	r21, r19
    1250:	7c f4       	brge	.+30     	; 0x1270 <fputc+0x4a>
    1252:	e8 81       	ld	r30, Y
    1254:	f9 81       	ldd	r31, Y+1	; 0x01
    1256:	9f 01       	movw	r18, r30
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
    125c:	39 83       	std	Y+1, r19	; 0x01
    125e:	28 83       	st	Y, r18
    1260:	10 83       	st	Z, r17
    1262:	06 c0       	rjmp	.+12     	; 0x1270 <fputc+0x4a>
    1264:	e8 85       	ldd	r30, Y+8	; 0x08
    1266:	f9 85       	ldd	r31, Y+9	; 0x09
    1268:	81 2f       	mov	r24, r17
    126a:	09 95       	icall
    126c:	89 2b       	or	r24, r25
    126e:	29 f7       	brne	.-54     	; 0x123a <fputc+0x14>
    1270:	2e 81       	ldd	r18, Y+6	; 0x06
    1272:	3f 81       	ldd	r19, Y+7	; 0x07
    1274:	2f 5f       	subi	r18, 0xFF	; 255
    1276:	3f 4f       	sbci	r19, 0xFF	; 255
    1278:	3f 83       	std	Y+7, r19	; 0x07
    127a:	2e 83       	std	Y+6, r18	; 0x06
    127c:	81 2f       	mov	r24, r17
    127e:	90 2f       	mov	r25, r16
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	08 95       	ret

0000128a <__ultoa_invert>:
    128a:	fa 01       	movw	r30, r20
    128c:	aa 27       	eor	r26, r26
    128e:	28 30       	cpi	r18, 0x08	; 8
    1290:	51 f1       	breq	.+84     	; 0x12e6 <__ultoa_invert+0x5c>
    1292:	20 31       	cpi	r18, 0x10	; 16
    1294:	81 f1       	breq	.+96     	; 0x12f6 <__ultoa_invert+0x6c>
    1296:	e8 94       	clt
    1298:	6f 93       	push	r22
    129a:	6e 7f       	andi	r22, 0xFE	; 254
    129c:	6e 5f       	subi	r22, 0xFE	; 254
    129e:	7f 4f       	sbci	r23, 0xFF	; 255
    12a0:	8f 4f       	sbci	r24, 0xFF	; 255
    12a2:	9f 4f       	sbci	r25, 0xFF	; 255
    12a4:	af 4f       	sbci	r26, 0xFF	; 255
    12a6:	b1 e0       	ldi	r27, 0x01	; 1
    12a8:	3e d0       	rcall	.+124    	; 0x1326 <__ultoa_invert+0x9c>
    12aa:	b4 e0       	ldi	r27, 0x04	; 4
    12ac:	3c d0       	rcall	.+120    	; 0x1326 <__ultoa_invert+0x9c>
    12ae:	67 0f       	add	r22, r23
    12b0:	78 1f       	adc	r23, r24
    12b2:	89 1f       	adc	r24, r25
    12b4:	9a 1f       	adc	r25, r26
    12b6:	a1 1d       	adc	r26, r1
    12b8:	68 0f       	add	r22, r24
    12ba:	79 1f       	adc	r23, r25
    12bc:	8a 1f       	adc	r24, r26
    12be:	91 1d       	adc	r25, r1
    12c0:	a1 1d       	adc	r26, r1
    12c2:	6a 0f       	add	r22, r26
    12c4:	71 1d       	adc	r23, r1
    12c6:	81 1d       	adc	r24, r1
    12c8:	91 1d       	adc	r25, r1
    12ca:	a1 1d       	adc	r26, r1
    12cc:	20 d0       	rcall	.+64     	; 0x130e <__ultoa_invert+0x84>
    12ce:	09 f4       	brne	.+2      	; 0x12d2 <__ultoa_invert+0x48>
    12d0:	68 94       	set
    12d2:	3f 91       	pop	r19
    12d4:	2a e0       	ldi	r18, 0x0A	; 10
    12d6:	26 9f       	mul	r18, r22
    12d8:	11 24       	eor	r1, r1
    12da:	30 19       	sub	r19, r0
    12dc:	30 5d       	subi	r19, 0xD0	; 208
    12de:	31 93       	st	Z+, r19
    12e0:	de f6       	brtc	.-74     	; 0x1298 <__ultoa_invert+0xe>
    12e2:	cf 01       	movw	r24, r30
    12e4:	08 95       	ret
    12e6:	46 2f       	mov	r20, r22
    12e8:	47 70       	andi	r20, 0x07	; 7
    12ea:	40 5d       	subi	r20, 0xD0	; 208
    12ec:	41 93       	st	Z+, r20
    12ee:	b3 e0       	ldi	r27, 0x03	; 3
    12f0:	0f d0       	rcall	.+30     	; 0x1310 <__ultoa_invert+0x86>
    12f2:	c9 f7       	brne	.-14     	; 0x12e6 <__ultoa_invert+0x5c>
    12f4:	f6 cf       	rjmp	.-20     	; 0x12e2 <__ultoa_invert+0x58>
    12f6:	46 2f       	mov	r20, r22
    12f8:	4f 70       	andi	r20, 0x0F	; 15
    12fa:	40 5d       	subi	r20, 0xD0	; 208
    12fc:	4a 33       	cpi	r20, 0x3A	; 58
    12fe:	18 f0       	brcs	.+6      	; 0x1306 <__ultoa_invert+0x7c>
    1300:	49 5d       	subi	r20, 0xD9	; 217
    1302:	31 fd       	sbrc	r19, 1
    1304:	40 52       	subi	r20, 0x20	; 32
    1306:	41 93       	st	Z+, r20
    1308:	02 d0       	rcall	.+4      	; 0x130e <__ultoa_invert+0x84>
    130a:	a9 f7       	brne	.-22     	; 0x12f6 <__ultoa_invert+0x6c>
    130c:	ea cf       	rjmp	.-44     	; 0x12e2 <__ultoa_invert+0x58>
    130e:	b4 e0       	ldi	r27, 0x04	; 4
    1310:	a6 95       	lsr	r26
    1312:	97 95       	ror	r25
    1314:	87 95       	ror	r24
    1316:	77 95       	ror	r23
    1318:	67 95       	ror	r22
    131a:	ba 95       	dec	r27
    131c:	c9 f7       	brne	.-14     	; 0x1310 <__ultoa_invert+0x86>
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	61 05       	cpc	r22, r1
    1322:	71 05       	cpc	r23, r1
    1324:	08 95       	ret
    1326:	9b 01       	movw	r18, r22
    1328:	ac 01       	movw	r20, r24
    132a:	0a 2e       	mov	r0, r26
    132c:	06 94       	lsr	r0
    132e:	57 95       	ror	r21
    1330:	47 95       	ror	r20
    1332:	37 95       	ror	r19
    1334:	27 95       	ror	r18
    1336:	ba 95       	dec	r27
    1338:	c9 f7       	brne	.-14     	; 0x132c <__ultoa_invert+0xa2>
    133a:	62 0f       	add	r22, r18
    133c:	73 1f       	adc	r23, r19
    133e:	84 1f       	adc	r24, r20
    1340:	95 1f       	adc	r25, r21
    1342:	a0 1d       	adc	r26, r0
    1344:	08 95       	ret

00001346 <__prologue_saves__>:
    1346:	2f 92       	push	r2
    1348:	3f 92       	push	r3
    134a:	4f 92       	push	r4
    134c:	5f 92       	push	r5
    134e:	6f 92       	push	r6
    1350:	7f 92       	push	r7
    1352:	8f 92       	push	r8
    1354:	9f 92       	push	r9
    1356:	af 92       	push	r10
    1358:	bf 92       	push	r11
    135a:	cf 92       	push	r12
    135c:	df 92       	push	r13
    135e:	ef 92       	push	r14
    1360:	ff 92       	push	r15
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	ca 1b       	sub	r28, r26
    1370:	db 0b       	sbc	r29, r27
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	de bf       	out	0x3e, r29	; 62
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	cd bf       	out	0x3d, r28	; 61
    137c:	09 94       	ijmp

0000137e <__epilogue_restores__>:
    137e:	2a 88       	ldd	r2, Y+18	; 0x12
    1380:	39 88       	ldd	r3, Y+17	; 0x11
    1382:	48 88       	ldd	r4, Y+16	; 0x10
    1384:	5f 84       	ldd	r5, Y+15	; 0x0f
    1386:	6e 84       	ldd	r6, Y+14	; 0x0e
    1388:	7d 84       	ldd	r7, Y+13	; 0x0d
    138a:	8c 84       	ldd	r8, Y+12	; 0x0c
    138c:	9b 84       	ldd	r9, Y+11	; 0x0b
    138e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1390:	b9 84       	ldd	r11, Y+9	; 0x09
    1392:	c8 84       	ldd	r12, Y+8	; 0x08
    1394:	df 80       	ldd	r13, Y+7	; 0x07
    1396:	ee 80       	ldd	r14, Y+6	; 0x06
    1398:	fd 80       	ldd	r15, Y+5	; 0x05
    139a:	0c 81       	ldd	r16, Y+4	; 0x04
    139c:	1b 81       	ldd	r17, Y+3	; 0x03
    139e:	aa 81       	ldd	r26, Y+2	; 0x02
    13a0:	b9 81       	ldd	r27, Y+1	; 0x01
    13a2:	ce 0f       	add	r28, r30
    13a4:	d1 1d       	adc	r29, r1
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	ed 01       	movw	r28, r26
    13b2:	08 95       	ret

000013b4 <_exit>:
    13b4:	f8 94       	cli

000013b6 <__stop_program>:
    13b6:	ff cf       	rjmp	.-2      	; 0x13b6 <__stop_program>
