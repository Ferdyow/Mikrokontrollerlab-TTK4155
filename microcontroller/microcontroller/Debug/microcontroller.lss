
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000216  00800100  000016b6  0000174a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800316  00800316  00001960  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001960  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000308  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003636  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001494  00000000  00000000  000052fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011cf  00000000  00000000  0000678e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000087c  00000000  00000000  00007960  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000aa5  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d46  00000000  00000000  00008c81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000268  00000000  00000000  0000a9c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 02 02 	jmp	0x404	; 0x404 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <OLED_goto_column+0x24>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 eb       	ldi	r30, 0xB6	; 182
     37c:	f6 e1       	ldi	r31, 0x16	; 22
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a6 31       	cpi	r26, 0x16	; 22
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a6 e1       	ldi	r26, 0x16	; 22
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 33       	cpi	r26, 0x34	; 52
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 77 05 	call	0xaee	; 0xaee <main>
     39e:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
     3a6:	30 98       	cbi	0x06, 0	; 6
     3a8:	08 95       	ret

000003aa <ADC_read>:
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3aa:	84 30       	cpi	r24, 0x04	; 4
     3ac:	40 f4       	brcc	.+16     	; 0x3be <ADC_read+0x14>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
     3ae:	8c 5f       	subi	r24, 0xFC	; 252
     3b0:	80 93 00 14 	sts	0x1400, r24
	
	//wait 'til /INTR is low
	while(test_bit(PINE, PINE0));
     3b4:	28 99       	sbic	0x05, 0	; 5
     3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <ADC_read+0xa>
	//reset interrupt
	inter = 0;
	*/

	//return current value
	return *adc; 
     3b8:	80 91 00 14 	lds	r24, 0x1400
     3bc:	08 95       	ret
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3be:	80 e0       	ldi	r24, 0x00	; 0
	inter = 0;
	*/

	//return current value
	return *adc; 
     3c0:	08 95       	ret

000003c2 <CAN_int_vect>:
     3c2:	cf 93       	push	r28
     3c4:	8c e2       	ldi	r24, 0x2C	; 44
     3c6:	0e 94 c0 03 	call	0x780	; 0x780 <MCP2515_read>
     3ca:	c8 2f       	mov	r28, r24
     3cc:	80 ff       	sbrs	r24, 0
     3ce:	0b c0       	rjmp	.+22     	; 0x3e6 <CAN_int_vect+0x24>
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	8c e2       	ldi	r24, 0x2C	; 44
     3d6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <MCP2515_bit_modify>
     3da:	21 e0       	ldi	r18, 0x01	; 1
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	30 93 19 03 	sts	0x0319, r19
     3e2:	20 93 18 03 	sts	0x0318, r18
     3e6:	c1 ff       	sbrs	r28, 1
     3e8:	0b c0       	rjmp	.+22     	; 0x400 <CAN_int_vect+0x3e>
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	8c e2       	ldi	r24, 0x2C	; 44
     3f0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <MCP2515_bit_modify>
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	90 93 17 03 	sts	0x0317, r25
     3fc:	80 93 16 03 	sts	0x0316, r24
     400:	cf 91       	pop	r28
     402:	08 95       	ret

00000404 <__vector_1>:
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	2f 93       	push	r18
     410:	3f 93       	push	r19
     412:	4f 93       	push	r20
     414:	5f 93       	push	r21
     416:	6f 93       	push	r22
     418:	7f 93       	push	r23
     41a:	8f 93       	push	r24
     41c:	9f 93       	push	r25
     41e:	af 93       	push	r26
     420:	bf 93       	push	r27
     422:	ef 93       	push	r30
     424:	ff 93       	push	r31
     426:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <CAN_int_vect>
     42a:	ff 91       	pop	r31
     42c:	ef 91       	pop	r30
     42e:	bf 91       	pop	r27
     430:	af 91       	pop	r26
     432:	9f 91       	pop	r25
     434:	8f 91       	pop	r24
     436:	7f 91       	pop	r23
     438:	6f 91       	pop	r22
     43a:	5f 91       	pop	r21
     43c:	4f 91       	pop	r20
     43e:	3f 91       	pop	r19
     440:	2f 91       	pop	r18
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <CAN_init>:
     44c:	0e 94 14 04 	call	0x828	; 0x828 <MCP2515_init>
     450:	4f ef       	ldi	r20, 0xFF	; 255
     452:	64 e6       	ldi	r22, 0x64	; 100
     454:	80 e6       	ldi	r24, 0x60	; 96
     456:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <MCP2515_bit_modify>
     45a:	4f ef       	ldi	r20, 0xFF	; 255
     45c:	60 e6       	ldi	r22, 0x60	; 96
     45e:	80 e7       	ldi	r24, 0x70	; 112
     460:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <MCP2515_bit_modify>
     464:	43 e0       	ldi	r20, 0x03	; 3
     466:	63 e0       	ldi	r22, 0x03	; 3
     468:	8b e2       	ldi	r24, 0x2B	; 43
     46a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <MCP2515_bit_modify>
     46e:	40 e0       	ldi	r20, 0x00	; 0
     470:	60 ee       	ldi	r22, 0xE0	; 224
     472:	8f e0       	ldi	r24, 0x0F	; 15
     474:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <MCP2515_bit_modify>
     478:	08 95       	ret

0000047a <CAN_message_send>:
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	ec 01       	movw	r28, r24
     484:	08 81       	ld	r16, Y
     486:	19 81       	ldd	r17, Y+1	; 0x01
     488:	b8 01       	movw	r22, r16
     48a:	76 95       	lsr	r23
     48c:	67 95       	ror	r22
     48e:	76 95       	lsr	r23
     490:	67 95       	ror	r22
     492:	76 95       	lsr	r23
     494:	67 95       	ror	r22
     496:	81 e3       	ldi	r24, 0x31	; 49
     498:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <MCP2515_write>
     49c:	60 2f       	mov	r22, r16
     49e:	62 95       	swap	r22
     4a0:	66 0f       	add	r22, r22
     4a2:	60 7e       	andi	r22, 0xE0	; 224
     4a4:	82 e3       	ldi	r24, 0x32	; 50
     4a6:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <MCP2515_write>
     4aa:	6a 81       	ldd	r22, Y+2	; 0x02
     4ac:	85 e3       	ldi	r24, 0x35	; 53
     4ae:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <MCP2515_write>
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	88 23       	and	r24, r24
     4b6:	69 f0       	breq	.+26     	; 0x4d2 <CAN_message_send+0x58>
     4b8:	10 e0       	ldi	r17, 0x00	; 0
     4ba:	fe 01       	movw	r30, r28
     4bc:	e1 0f       	add	r30, r17
     4be:	f1 1d       	adc	r31, r1
     4c0:	63 81       	ldd	r22, Z+3	; 0x03
     4c2:	86 e3       	ldi	r24, 0x36	; 54
     4c4:	81 0f       	add	r24, r17
     4c6:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <MCP2515_write>
     4ca:	1f 5f       	subi	r17, 0xFF	; 255
     4cc:	8a 81       	ldd	r24, Y+2	; 0x02
     4ce:	18 17       	cp	r17, r24
     4d0:	a0 f3       	brcs	.-24     	; 0x4ba <CAN_message_send+0x40>
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	0e 94 e6 03 	call	0x7cc	; 0x7cc <MCP2515_request_to_send>
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	08 95       	ret

000004e2 <CAN_transmit_complete>:
     4e2:	03 96       	adiw	r24, 0x03	; 3
     4e4:	82 95       	swap	r24
     4e6:	80 7f       	andi	r24, 0xF0	; 240
     4e8:	0e 94 c0 03 	call	0x780	; 0x780 <MCP2515_read>
     4ec:	83 fb       	bst	r24, 3
     4ee:	88 27       	eor	r24, r24
     4f0:	80 f9       	bld	r24, 0
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	89 27       	eor	r24, r25
     4f6:	08 95       	ret

000004f8 <JOY_print_calibration_status>:
	clear_bit(DDRB,PB2);
	clear_bit(SFIOR, PUD);
	JOY_calibrate(calibraton_mode);
}

void JOY_print_calibration_status() {
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
	OLED_reset();
     4fc:	0e 94 da 05 	call	0xbb4	; 0xbb4 <OLED_reset>
	fprintf(OLED, "%s\n", "Calibrate JOY");
     500:	8d e3       	ldi	r24, 0x3D	; 61
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	9f 93       	push	r25
     506:	8f 93       	push	r24
     508:	8c e8       	ldi	r24, 0x8C	; 140
     50a:	91 e0       	ldi	r25, 0x01	; 1
     50c:	9f 93       	push	r25
     50e:	8f 93       	push	r24
     510:	c6 e0       	ldi	r28, 0x06	; 6
     512:	d1 e0       	ldi	r29, 0x01	; 1
     514:	df 93       	push	r29
     516:	cf 93       	push	r28
     518:	0e 94 34 08 	call	0x1068	; 0x1068 <fprintf>
	fprintf(OLED, "x_max: %6d\n", max.x);
     51c:	80 91 1e 03 	lds	r24, 0x031E
     520:	1f 92       	push	r1
     522:	8f 93       	push	r24
     524:	8b e4       	ldi	r24, 0x4B	; 75
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	9f 93       	push	r25
     52a:	8f 93       	push	r24
     52c:	df 93       	push	r29
     52e:	cf 93       	push	r28
     530:	0e 94 34 08 	call	0x1068	; 0x1068 <fprintf>
	fprintf(OLED, "x_min: %6d\n", min.x);
     534:	80 91 22 03 	lds	r24, 0x0322
     538:	1f 92       	push	r1
     53a:	8f 93       	push	r24
     53c:	87 e5       	ldi	r24, 0x57	; 87
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	9f 93       	push	r25
     542:	8f 93       	push	r24
     544:	df 93       	push	r29
     546:	cf 93       	push	r28
     548:	0e 94 34 08 	call	0x1068	; 0x1068 <fprintf>
	fprintf(OLED, "y_max: %6d\n", max.y);
     54c:	80 91 1f 03 	lds	r24, 0x031F
     550:	1f 92       	push	r1
     552:	8f 93       	push	r24
     554:	83 e6       	ldi	r24, 0x63	; 99
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	9f 93       	push	r25
     55a:	8f 93       	push	r24
     55c:	df 93       	push	r29
     55e:	cf 93       	push	r28
     560:	0e 94 34 08 	call	0x1068	; 0x1068 <fprintf>
	fprintf(OLED, "y_min: %6d\n", min.y);
     564:	80 91 23 03 	lds	r24, 0x0323
     568:	1f 92       	push	r1
     56a:	8f 93       	push	r24
     56c:	8f e6       	ldi	r24, 0x6F	; 111
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	9f 93       	push	r25
     572:	8f 93       	push	r24
     574:	df 93       	push	r29
     576:	cf 93       	push	r28
     578:	0e 94 34 08 	call	0x1068	; 0x1068 <fprintf>
	fprintf(OLED, "\n%s\n", "Click when done");
     57c:	8b e7       	ldi	r24, 0x7B	; 123
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	9f 93       	push	r25
     582:	8f 93       	push	r24
     584:	8b e8       	ldi	r24, 0x8B	; 139
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	9f 93       	push	r25
     58a:	8f 93       	push	r24
     58c:	df 93       	push	r29
     58e:	cf 93       	push	r28
     590:	0e 94 34 08 	call	0x1068	; 0x1068 <fprintf>
     594:	8d b7       	in	r24, 0x3d	; 61
     596:	9e b7       	in	r25, 0x3e	; 62
     598:	84 96       	adiw	r24, 0x24	; 36
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	9e bf       	out	0x3e, r25	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	8d bf       	out	0x3d, r24	; 61
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <JOY_calibrate>:

void JOY_calibrate(int calibraton_mode){
     5aa:	bf 92       	push	r11
     5ac:	cf 92       	push	r12
     5ae:	df 92       	push	r13
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
	max.x = JOY_DEFAULT_MAX_X;
     5bc:	2f ef       	ldi	r18, 0xFF	; 255
     5be:	20 93 1e 03 	sts	0x031E, r18
	max.y = JOY_DEFAULT_MAX_Y;
     5c2:	20 93 1f 03 	sts	0x031F, r18
	min.x = JOY_DEFAULT_MIN_X;
     5c6:	10 92 22 03 	sts	0x0322, r1
	min.y = JOY_DEFAULT_MIN_Y;
     5ca:	10 92 23 03 	sts	0x0323, r1
	
	if (calibraton_mode == CALIBRATION_MANUAL) {
     5ce:	01 97       	sbiw	r24, 0x01	; 1
     5d0:	e9 f5       	brne	.+122    	; 0x64c <JOY_calibrate+0xa2>
		// Loop while joystick button is not pressed.
		while(test_bit(PINB,PINB2)) {
     5d2:	b2 9b       	sbis	0x16, 2	; 22
     5d4:	3b c0       	rjmp	.+118    	; 0x64c <JOY_calibrate+0xa2>
			// Read sensor values
			uint8_t x = ADC_read(X_COORD);
			uint8_t y = ADC_read(Y_COORD);
			
			// Find max and min values for x and y:
			max.x = MAX(x, max.x);
     5d6:	0f 2e       	mov	r0, r31
     5d8:	fe e1       	ldi	r31, 0x1E	; 30
     5da:	cf 2e       	mov	r12, r31
     5dc:	f3 e0       	ldi	r31, 0x03	; 3
     5de:	df 2e       	mov	r13, r31
     5e0:	f0 2d       	mov	r31, r0
			max.y = MAX(y, max.y);
     5e2:	0f 2e       	mov	r0, r31
     5e4:	ff e1       	ldi	r31, 0x1F	; 31
     5e6:	ef 2e       	mov	r14, r31
     5e8:	f3 e0       	ldi	r31, 0x03	; 3
     5ea:	ff 2e       	mov	r15, r31
     5ec:	f0 2d       	mov	r31, r0
			min.x = MIN(x, min.x);
     5ee:	02 e2       	ldi	r16, 0x22	; 34
     5f0:	13 e0       	ldi	r17, 0x03	; 3
			min.y = MIN(y, min.y);
     5f2:	c3 e2       	ldi	r28, 0x23	; 35
     5f4:	d3 e0       	ldi	r29, 0x03	; 3
	
	if (calibraton_mode == CALIBRATION_MANUAL) {
		// Loop while joystick button is not pressed.
		while(test_bit(PINB,PINB2)) {
			// Read sensor values
			uint8_t x = ADC_read(X_COORD);
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     5fc:	b8 2e       	mov	r11, r24
			uint8_t y = ADC_read(Y_COORD);
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
			
			// Find max and min values for x and y:
			max.x = MAX(x, max.x);
     604:	f6 01       	movw	r30, r12
     606:	20 81       	ld	r18, Z
     608:	9b 2d       	mov	r25, r11
     60a:	b2 16       	cp	r11, r18
     60c:	08 f4       	brcc	.+2      	; 0x610 <JOY_calibrate+0x66>
     60e:	92 2f       	mov	r25, r18
     610:	f6 01       	movw	r30, r12
     612:	90 83       	st	Z, r25
			max.y = MAX(y, max.y);
     614:	f7 01       	movw	r30, r14
     616:	20 81       	ld	r18, Z
     618:	98 2f       	mov	r25, r24
     61a:	82 17       	cp	r24, r18
     61c:	08 f4       	brcc	.+2      	; 0x620 <JOY_calibrate+0x76>
     61e:	92 2f       	mov	r25, r18
     620:	f7 01       	movw	r30, r14
     622:	90 83       	st	Z, r25
			min.x = MIN(x, min.x);
     624:	f8 01       	movw	r30, r16
     626:	90 81       	ld	r25, Z
     628:	9b 15       	cp	r25, r11
     62a:	08 f4       	brcc	.+2      	; 0x62e <JOY_calibrate+0x84>
     62c:	b9 2e       	mov	r11, r25
     62e:	f8 01       	movw	r30, r16
     630:	b0 82       	st	Z, r11
			min.y = MIN(y, min.y);
     632:	98 81       	ld	r25, Y
     634:	98 17       	cp	r25, r24
     636:	08 f4       	brcc	.+2      	; 0x63a <JOY_calibrate+0x90>
     638:	89 2f       	mov	r24, r25
     63a:	88 83       	st	Y, r24
			
			JOY_print_calibration_status();
     63c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <JOY_print_calibration_status>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	90 ef       	ldi	r25, 0xF0	; 240
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <JOY_calibrate+0x9a>
	min.x = JOY_DEFAULT_MIN_X;
	min.y = JOY_DEFAULT_MIN_Y;
	
	if (calibraton_mode == CALIBRATION_MANUAL) {
		// Loop while joystick button is not pressed.
		while(test_bit(PINB,PINB2)) {
     648:	b2 99       	sbic	0x16, 2	; 22
     64a:	d5 cf       	rjmp	.-86     	; 0x5f6 <JOY_calibrate+0x4c>
			_delay_ms(50);
		}
	}
	
	// Find distance from middle to edges (radius)
	rad.x = (max.x - min.x) / 2;
     64c:	e0 91 1e 03 	lds	r30, 0x031E
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	60 91 22 03 	lds	r22, 0x0322
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	9f 01       	movw	r18, r30
     65a:	26 1b       	sub	r18, r22
     65c:	37 0b       	sbc	r19, r23
     65e:	c9 01       	movw	r24, r18
     660:	99 23       	and	r25, r25
     662:	0c f4       	brge	.+2      	; 0x666 <JOY_calibrate+0xbc>
     664:	01 96       	adiw	r24, 0x01	; 1
     666:	95 95       	asr	r25
     668:	87 95       	ror	r24
     66a:	80 93 20 03 	sts	0x0320, r24
	rad.y = (max.y - min.y) / 2;
     66e:	40 91 1f 03 	lds	r20, 0x031F
     672:	50 e0       	ldi	r21, 0x00	; 0
     674:	20 91 23 03 	lds	r18, 0x0323
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	da 01       	movw	r26, r20
     67c:	a2 1b       	sub	r26, r18
     67e:	b3 0b       	sbc	r27, r19
     680:	cd 01       	movw	r24, r26
     682:	0a f4       	brpl	.+2      	; 0x686 <JOY_calibrate+0xdc>
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	95 95       	asr	r25
     688:	87 95       	ror	r24
     68a:	80 93 21 03 	sts	0x0321, r24
		
	// Find mid point using edges.
	mid.x = (max.x + min.x) / 2;
     68e:	6e 0f       	add	r22, r30
     690:	7f 1f       	adc	r23, r31
     692:	75 95       	asr	r23
     694:	67 95       	ror	r22
     696:	60 93 24 03 	sts	0x0324, r22
	mid.y = (max.y + min.y) / 2;
     69a:	24 0f       	add	r18, r20
     69c:	35 1f       	adc	r19, r21
     69e:	35 95       	asr	r19
     6a0:	27 95       	ror	r18
     6a2:	20 93 25 03 	sts	0x0325, r18
}
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	df 90       	pop	r13
     6b4:	cf 90       	pop	r12
     6b6:	bf 90       	pop	r11
     6b8:	08 95       	ret

000006ba <JOY_init>:
	uint8_t y;
} max, min, rad, mid;

void JOY_init(int calibraton_mode){
	//set pull-up resistors on PORTB for JOY_button
	set_bit(PORTB,PB2);
     6ba:	c2 9a       	sbi	0x18, 2	; 24
	clear_bit(DDRB,PB2);
     6bc:	ba 98       	cbi	0x17, 2	; 23
	clear_bit(SFIOR, PUD);
     6be:	20 b7       	in	r18, 0x30	; 48
     6c0:	2b 7f       	andi	r18, 0xFB	; 251
     6c2:	20 bf       	out	0x30, r18	; 48
	JOY_calibrate(calibraton_mode);
     6c4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <JOY_calibrate>
     6c8:	08 95       	ret

000006ca <JOY_button_pressed>:
	mid.x = (max.x + min.x) / 2;
	mid.y = (max.y + min.y) / 2;
}

int JOY_button_pressed(button b) {
	switch (b) {
     6ca:	81 30       	cpi	r24, 0x01	; 1
     6cc:	41 f0       	breq	.+16     	; 0x6de <JOY_button_pressed+0x14>
     6ce:	18 f0       	brcs	.+6      	; 0x6d6 <JOY_button_pressed+0xc>
     6d0:	82 30       	cpi	r24, 0x02	; 2
     6d2:	51 f0       	breq	.+20     	; 0x6e8 <JOY_button_pressed+0x1e>
     6d4:	11 c0       	rjmp	.+34     	; 0x6f8 <JOY_button_pressed+0x2e>
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     6d6:	86 b3       	in	r24, 0x16	; 22
     6d8:	81 70       	andi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return 1;
     6de:	86 b3       	in	r24, 0x16	; 22
}

int JOY_button_pressed(button b) {
	switch (b) {
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     6e0:	86 95       	lsr	r24
     6e2:	81 70       	andi	r24, 0x01	; 1
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return 1;
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return 1;
     6e8:	86 b3       	in	r24, 0x16	; 22
     6ea:	86 95       	lsr	r24
     6ec:	86 95       	lsr	r24
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	89 27       	eor	r24, r25
}

int JOY_button_pressed(button b) {
	switch (b) {
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     6f2:	81 70       	andi	r24, 0x01	; 1
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	08 95       	ret
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return 1;
		break;
	}
	return 0;
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
}
     6fc:	08 95       	ret

000006fe <JOY_getPosition>:

JOY_position_t JOY_getPosition() {
     6fe:	1f 93       	push	r17
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
	JOY_position_t JOY_position;
	JOY_position.x = (100 * (ADC_read(X_COORD) - mid.x)) / rad.x;
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     70a:	28 2f       	mov	r18, r24
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	80 91 24 03 	lds	r24, 0x0324
     712:	28 1b       	sub	r18, r24
     714:	31 09       	sbc	r19, r1
     716:	14 e6       	ldi	r17, 0x64	; 100
     718:	12 9f       	mul	r17, r18
     71a:	c0 01       	movw	r24, r0
     71c:	13 9f       	mul	r17, r19
     71e:	90 0d       	add	r25, r0
     720:	11 24       	eor	r1, r1
     722:	60 91 20 03 	lds	r22, 0x0320
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	0e 94 9a 06 	call	0xd34	; 0xd34 <__divmodhi4>
     72c:	eb 01       	movw	r28, r22
	JOY_position.y = (100 * (ADC_read(Y_COORD) - mid.y)) / rad.y;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     734:	28 2f       	mov	r18, r24
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	80 91 25 03 	lds	r24, 0x0325
     73c:	28 1b       	sub	r18, r24
     73e:	31 09       	sbc	r19, r1
     740:	12 9f       	mul	r17, r18
     742:	c0 01       	movw	r24, r0
     744:	13 9f       	mul	r17, r19
     746:	90 0d       	add	r25, r0
     748:	11 24       	eor	r1, r1
     74a:	60 91 21 03 	lds	r22, 0x0321
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	0e 94 9a 06 	call	0xd34	; 0xd34 <__divmodhi4>
     754:	9b 01       	movw	r18, r22
	return JOY_position;
     756:	be 01       	movw	r22, r28
     758:	c9 01       	movw	r24, r18
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	08 95       	ret

00000762 <SLI_getPosition>:
		// Negative y => DOWN
		else return DOWN;
	}
}

SLI_position_t SLI_getPosition() {
     762:	cf 93       	push	r28
	SLI_position_t pos;
	pos.left = ADC_read(LEFT_CH);
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     76a:	c8 2f       	mov	r28, r24
	pos.right = ADC_read(RIGHT_CH);
     76c:	83 e0       	ldi	r24, 0x03	; 3
     76e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     772:	28 2f       	mov	r18, r24
	return pos;
     774:	6c 2f       	mov	r22, r28
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	82 2f       	mov	r24, r18
     77a:	90 e0       	ldi	r25, 0x00	; 0
}
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <MCP2515_read>:
     780:	cf 93       	push	r28
     782:	c8 2f       	mov	r28, r24
     784:	0e 94 74 06 	call	0xce8	; 0xce8 <SPI_select>
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_send>
     78e:	8c 2f       	mov	r24, r28
     790:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_send>
     794:	0e 94 6d 06 	call	0xcda	; 0xcda <SPI_read>
     798:	c8 2f       	mov	r28, r24
     79a:	0e 94 76 06 	call	0xcec	; 0xcec <SPI_deselect>
     79e:	8c 2f       	mov	r24, r28
     7a0:	cf 91       	pop	r28
     7a2:	08 95       	ret

000007a4 <MCP2515_write>:
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	d8 2f       	mov	r29, r24
     7aa:	c6 2f       	mov	r28, r22
     7ac:	0e 94 74 06 	call	0xce8	; 0xce8 <SPI_select>
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_send>
     7b6:	8d 2f       	mov	r24, r29
     7b8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_send>
     7bc:	8c 2f       	mov	r24, r28
     7be:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_send>
     7c2:	0e 94 76 06 	call	0xcec	; 0xcec <SPI_deselect>
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <MCP2515_request_to_send>:
     7cc:	cf 93       	push	r28
     7ce:	c8 2f       	mov	r28, r24
     7d0:	0e 94 74 06 	call	0xce8	; 0xce8 <SPI_select>
     7d4:	80 e8       	ldi	r24, 0x80	; 128
     7d6:	8c 0f       	add	r24, r28
     7d8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_send>
     7dc:	0e 94 76 06 	call	0xcec	; 0xcec <SPI_deselect>
     7e0:	cf 91       	pop	r28
     7e2:	08 95       	ret

000007e4 <MCP2515_bit_modify>:
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	18 2f       	mov	r17, r24
     7ec:	d6 2f       	mov	r29, r22
     7ee:	c4 2f       	mov	r28, r20
     7f0:	0e 94 74 06 	call	0xce8	; 0xce8 <SPI_select>
     7f4:	85 e0       	ldi	r24, 0x05	; 5
     7f6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_send>
     7fa:	81 2f       	mov	r24, r17
     7fc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_send>
     800:	8d 2f       	mov	r24, r29
     802:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_send>
     806:	8c 2f       	mov	r24, r28
     808:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_send>
     80c:	0e 94 76 06 	call	0xcec	; 0xcec <SPI_deselect>
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	08 95       	ret

00000818 <MCP2515_reset>:
     818:	0e 94 74 06 	call	0xce8	; 0xce8 <SPI_select>
     81c:	80 ec       	ldi	r24, 0xC0	; 192
     81e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_send>
     822:	0e 94 76 06 	call	0xcec	; 0xcec <SPI_deselect>
     826:	08 95       	ret

00000828 <MCP2515_init>:
     828:	0e 94 57 06 	call	0xcae	; 0xcae <SPI_init>
     82c:	0e 94 0c 04 	call	0x818	; 0x818 <MCP2515_reset>
     830:	8e e0       	ldi	r24, 0x0E	; 14
     832:	0e 94 c0 03 	call	0x780	; 0x780 <MCP2515_read>
     836:	80 7e       	andi	r24, 0xE0	; 224
     838:	80 38       	cpi	r24, 0x80	; 128
     83a:	31 f0       	breq	.+12     	; 0x848 <MCP2515_init+0x20>
     83c:	83 e1       	ldi	r24, 0x13	; 19
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <puts>
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	08 95       	ret
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	08 95       	ret

0000084c <test_function>:
volatile menu_entry* current_entry;
volatile menu_entry* selected_entry;


void test_function() {
	printf("\n\nHighscore clicked!\n\n");
     84c:	85 e4       	ldi	r24, 0x45	; 69
     84e:	92 e0       	ldi	r25, 0x02	; 2
     850:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <puts>
     854:	08 95       	ret

00000856 <MENU_draw_current_menu>:
	current_entry = current_entry->parent_node;
	selected_entry = current_entry->child_node;
	MENU_draw_current_menu();
}

void MENU_draw_current_menu() {
     856:	df 92       	push	r13
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
	OLED_reset();
     864:	0e 94 da 05 	call	0xbb4	; 0xbb4 <OLED_reset>
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
     868:	e0 91 28 03 	lds	r30, 0x0328
     86c:	f0 91 29 03 	lds	r31, 0x0329
     870:	c4 81       	ldd	r28, Z+4	; 0x04
     872:	d5 81       	ldd	r29, Z+5	; 0x05
	
	while( temp_node != NULL){
     874:	20 97       	sbiw	r28, 0x00	; 0
     876:	61 f1       	breq	.+88     	; 0x8d0 <MENU_draw_current_menu+0x7a>
     878:	d1 2c       	mov	r13, r1
		OLED_pos(output_row++, 0);
		if (temp_node == selected_entry) {
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
     87a:	0f 2e       	mov	r0, r31
     87c:	fb e5       	ldi	r31, 0x5B	; 91
     87e:	ef 2e       	mov	r14, r31
     880:	f2 e0       	ldi	r31, 0x02	; 2
     882:	ff 2e       	mov	r15, r31
     884:	f0 2d       	mov	r31, r0
     886:	04 e1       	ldi	r16, 0x14	; 20
     888:	11 e0       	ldi	r17, 0x01	; 1
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
		OLED_pos(output_row++, 0);
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	8d 2d       	mov	r24, r13
     88e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <OLED_pos>
		if (temp_node == selected_entry) {
     892:	20 91 26 03 	lds	r18, 0x0326
     896:	30 91 27 03 	lds	r19, 0x0327
     89a:	c2 17       	cp	r28, r18
     89c:	d3 07       	cpc	r29, r19
     89e:	11 f4       	brne	.+4      	; 0x8a4 <MENU_draw_current_menu+0x4e>
			OLED_print_arrow();
     8a0:	0e 94 3a 06 	call	0xc74	; 0xc74 <OLED_print_arrow>
		}
		fprintf(OLED, " %s", temp_node->name);
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	8f 93       	push	r24
     8a8:	88 81       	ld	r24, Y
     8aa:	8f 93       	push	r24
     8ac:	ff 92       	push	r15
     8ae:	ef 92       	push	r14
     8b0:	1f 93       	push	r17
     8b2:	0f 93       	push	r16
     8b4:	0e 94 34 08 	call	0x1068	; 0x1068 <fprintf>
		temp_node = temp_node -> next_sibling_node;
     8b8:	0e 80       	ldd	r0, Y+6	; 0x06
     8ba:	df 81       	ldd	r29, Y+7	; 0x07
     8bc:	c0 2d       	mov	r28, r0
     8be:	d3 94       	inc	r13
	OLED_reset();
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	20 97       	sbiw	r28, 0x00	; 0
     8ce:	e9 f6       	brne	.-70     	; 0x88a <MENU_draw_current_menu+0x34>
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	df 90       	pop	r13
     8de:	08 95       	ret

000008e0 <add_entry>:
	}
}



menu_entry* add_entry(menu_entry* parent_node, char* name, void* function_ptr){
     8e0:	ef 92       	push	r14
     8e2:	ff 92       	push	r15
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	ec 01       	movw	r28, r24
     8ee:	7b 01       	movw	r14, r22
     8f0:	8a 01       	movw	r16, r20
	
	// Create the new node
	menu_entry* new_entry = (menu_entry*) malloc(sizeof(menu_entry));
     8f2:	8c e0       	ldi	r24, 0x0C	; 12
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 c2 06 	call	0xd84	; 0xd84 <malloc>
     8fa:	dc 01       	movw	r26, r24
	new_entry->name = name;
     8fc:	11 96       	adiw	r26, 0x01	; 1
     8fe:	fc 92       	st	X, r15
     900:	ee 92       	st	-X, r14
	new_entry->parent_node = parent_node;
     902:	13 96       	adiw	r26, 0x03	; 3
     904:	dc 93       	st	X, r29
     906:	ce 93       	st	-X, r28
     908:	12 97       	sbiw	r26, 0x02	; 2
	new_entry->child_node = NULL;  // A new node has no children
     90a:	15 96       	adiw	r26, 0x05	; 5
     90c:	1c 92       	st	X, r1
     90e:	1e 92       	st	-X, r1
     910:	14 97       	sbiw	r26, 0x04	; 4
	new_entry->next_sibling_node = NULL;  // The new child is the last child
     912:	17 96       	adiw	r26, 0x07	; 7
     914:	1c 92       	st	X, r1
     916:	1e 92       	st	-X, r1
     918:	16 97       	sbiw	r26, 0x06	; 6
	new_entry->prev_sibling_node = NULL;
     91a:	19 96       	adiw	r26, 0x09	; 9
     91c:	1c 92       	st	X, r1
     91e:	1e 92       	st	-X, r1
     920:	18 97       	sbiw	r26, 0x08	; 8
	new_entry->function_ptr = function_ptr;
     922:	1b 96       	adiw	r26, 0x0b	; 11
     924:	1c 93       	st	X, r17
     926:	0e 93       	st	-X, r16
     928:	1a 97       	sbiw	r26, 0x0a	; 10
	
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_entry;
     92a:	20 97       	sbiw	r28, 0x00	; 0
     92c:	a1 f0       	breq	.+40     	; 0x956 <add_entry+0x76>
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
     92e:	ec 81       	ldd	r30, Y+4	; 0x04
     930:	fd 81       	ldd	r31, Y+5	; 0x05
     932:	30 97       	sbiw	r30, 0x00	; 0
     934:	19 f4       	brne	.+6      	; 0x93c <add_entry+0x5c>
		parent_node->child_node = new_entry;
     936:	9d 83       	std	Y+5, r25	; 0x05
     938:	8c 83       	std	Y+4, r24	; 0x04
     93a:	0d c0       	rjmp	.+26     	; 0x956 <add_entry+0x76>
	else {
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
     93c:	26 81       	ldd	r18, Z+6	; 0x06
     93e:	37 81       	ldd	r19, Z+7	; 0x07
     940:	21 15       	cp	r18, r1
     942:	31 05       	cpc	r19, r1
     944:	11 f0       	breq	.+4      	; 0x94a <add_entry+0x6a>
			//printf("temp_node->next_sibling_node->name: %s\n", temp_node->next_sibling_node->name);
			temp_node = temp_node->next_sibling_node;
     946:	f9 01       	movw	r30, r18
     948:	f9 cf       	rjmp	.-14     	; 0x93c <add_entry+0x5c>
		}
		
		// Bind the new node to the current last child to become the new last child.
		temp_node->next_sibling_node = new_entry;
     94a:	b7 83       	std	Z+7, r27	; 0x07
     94c:	a6 83       	std	Z+6, r26	; 0x06
		new_entry->prev_sibling_node = temp_node;
     94e:	19 96       	adiw	r26, 0x09	; 9
     950:	fc 93       	st	X, r31
     952:	ee 93       	st	-X, r30
     954:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	// Parent/child/sibling bindings complete. Return the new node.
	return new_entry;
     956:	cd 01       	movw	r24, r26
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	ff 90       	pop	r15
     962:	ef 90       	pop	r14
     964:	08 95       	ret

00000966 <MENU_init>:

void test_function() {
	printf("\n\nHighscore clicked!\n\n");
}

void MENU_init() {
     966:	cf 92       	push	r12
     968:	df 92       	push	r13
     96a:	ef 92       	push	r14
     96c:	ff 92       	push	r15
     96e:	0f 93       	push	r16
     970:	1f 93       	push	r17
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
	menu_entry* main_menu = add_entry(NULL, "Main menu", NULL);
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	6f e5       	ldi	r22, 0x5F	; 95
     97c:	72 e0       	ldi	r23, 0x02	; 2
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 70 04 	call	0x8e0	; 0x8e0 <add_entry>
     986:	ec 01       	movw	r28, r24
	
	// Main menu
	menu_entry* play = add_entry(main_menu, "Play game", NULL);
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	69 e6       	ldi	r22, 0x69	; 105
     98e:	72 e0       	ldi	r23, 0x02	; 2
     990:	0e 94 70 04 	call	0x8e0	; 0x8e0 <add_entry>
     994:	6c 01       	movw	r12, r24
	add_entry(main_menu, "Highscore", test_function);
     996:	46 e2       	ldi	r20, 0x26	; 38
     998:	54 e0       	ldi	r21, 0x04	; 4
     99a:	63 e7       	ldi	r22, 0x73	; 115
     99c:	72 e0       	ldi	r23, 0x02	; 2
     99e:	ce 01       	movw	r24, r28
     9a0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <add_entry>
	menu_entry* settings = add_entry(main_menu, "Settings", NULL);
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	6d e7       	ldi	r22, 0x7D	; 125
     9aa:	72 e0       	ldi	r23, 0x02	; 2
     9ac:	ce 01       	movw	r24, r28
     9ae:	0e 94 70 04 	call	0x8e0	; 0x8e0 <add_entry>
     9b2:	7c 01       	movw	r14, r24
	menu_entry* extras = add_entry(main_menu, "Extra features", NULL);
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	66 e0       	ldi	r22, 0x06	; 6
     9ba:	73 e0       	ldi	r23, 0x03	; 3
     9bc:	ce 01       	movw	r24, r28
     9be:	0e 94 70 04 	call	0x8e0	; 0x8e0 <add_entry>
     9c2:	8c 01       	movw	r16, r24
	
	
	// Sub-menu settings
	add_entry(settings, "Brightness", NULL);
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	66 e8       	ldi	r22, 0x86	; 134
     9ca:	72 e0       	ldi	r23, 0x02	; 2
     9cc:	c7 01       	movw	r24, r14
     9ce:	0e 94 70 04 	call	0x8e0	; 0x8e0 <add_entry>
	add_entry(settings, "Set font", NULL);
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	61 e9       	ldi	r22, 0x91	; 145
     9d8:	72 e0       	ldi	r23, 0x02	; 2
     9da:	c7 01       	movw	r24, r14
     9dc:	0e 94 70 04 	call	0x8e0	; 0x8e0 <add_entry>
	
	// Sub-menu extras
	add_entry(extras, "Keyboard", NULL);
     9e0:	40 e0       	ldi	r20, 0x00	; 0
     9e2:	50 e0       	ldi	r21, 0x00	; 0
     9e4:	6a e9       	ldi	r22, 0x9A	; 154
     9e6:	72 e0       	ldi	r23, 0x02	; 2
     9e8:	c8 01       	movw	r24, r16
     9ea:	0e 94 70 04 	call	0x8e0	; 0x8e0 <add_entry>
	add_entry(extras, "Mandelbrot", NULL);
     9ee:	40 e0       	ldi	r20, 0x00	; 0
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	63 ea       	ldi	r22, 0xA3	; 163
     9f4:	72 e0       	ldi	r23, 0x02	; 2
     9f6:	c8 01       	movw	r24, r16
     9f8:	0e 94 70 04 	call	0x8e0	; 0x8e0 <add_entry>
	add_entry(extras, "Play pong", NULL);
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	6e ea       	ldi	r22, 0xAE	; 174
     a02:	72 e0       	ldi	r23, 0x02	; 2
     a04:	c8 01       	movw	r24, r16
     a06:	0e 94 70 04 	call	0x8e0	; 0x8e0 <add_entry>
	add_entry(extras, "rotating cube", NULL);
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	68 eb       	ldi	r22, 0xB8	; 184
     a10:	72 e0       	ldi	r23, 0x02	; 2
     a12:	c8 01       	movw	r24, r16
     a14:	0e 94 70 04 	call	0x8e0	; 0x8e0 <add_entry>
	
	current_entry = main_menu;
     a18:	d0 93 29 03 	sts	0x0329, r29
     a1c:	c0 93 28 03 	sts	0x0328, r28
	selected_entry = play;
     a20:	d0 92 27 03 	sts	0x0327, r13
     a24:	c0 92 26 03 	sts	0x0326, r12
	MENU_draw_current_menu();
     a28:	0e 94 2b 04 	call	0x856	; 0x856 <MENU_draw_current_menu>
}
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	1f 91       	pop	r17
     a32:	0f 91       	pop	r16
     a34:	ff 90       	pop	r15
     a36:	ef 90       	pop	r14
     a38:	df 90       	pop	r13
     a3a:	cf 90       	pop	r12
     a3c:	08 95       	ret

00000a3e <initialize>:
#include <stdbool.h>

void send_control_input(void);

void initialize(void){
	cli();
     a3e:	f8 94       	cli
	usart_init(MYUBRR);
     a40:	8f e1       	ldi	r24, 0x1F	; 31
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 8d 06 	call	0xd1a	; 0xd1a <usart_init>
	SRAM_init();
     a48:	0e 94 78 06 	call	0xcf0	; 0xcf0 <SRAM_init>
	ADC_init();
     a4c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	JOY_init(CALIBRATION_DEFAULT);
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 5d 03 	call	0x6ba	; 0x6ba <JOY_init>
	OLED_init();
     a58:	0e 94 df 05 	call	0xbbe	; 0xbbe <OLED_init>
	MENU_init();
     a5c:	0e 94 b3 04 	call	0x966	; 0x966 <MENU_init>
	CAN_init();
     a60:	0e 94 26 02 	call	0x44c	; 0x44c <CAN_init>
	sei();
     a64:	78 94       	sei
     a66:	08 95       	ret

00000a68 <send_control_input>:
	}
	
	
}

void send_control_input(void) {
     a68:	ff 92       	push	r15
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	2b 97       	sbiw	r28, 0x0b	; 11
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	cd bf       	out	0x3d, r28	; 61
	can_message control_input;
	control_input.id = 0;
     a82:	1a 82       	std	Y+2, r1	; 0x02
     a84:	19 82       	std	Y+1, r1	; 0x01
	control_input.length = 5;
     a86:	85 e0       	ldi	r24, 0x05	; 5
     a88:	8b 83       	std	Y+3, r24	; 0x03
	
	JOY_position_t joy_position = JOY_getPosition();
     a8a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <JOY_getPosition>
	control_input.data[JOYSTICK_X] = joy_position.x;
     a8e:	6c 83       	std	Y+4, r22	; 0x04
	control_input.data[JOYSTICK_Y] = joy_position.y;
     a90:	8d 83       	std	Y+5, r24	; 0x05
	
	SLI_position_t sli_position = SLI_getPosition();
     a92:	0e 94 b1 03 	call	0x762	; 0x762 <SLI_getPosition>
	control_input.data[SLIDER_LEFT] = sli_position.left;
     a96:	6e 83       	std	Y+6, r22	; 0x06
	control_input.data[SLIDER_RIGHT] = sli_position.right;
     a98:	8f 83       	std	Y+7, r24	; 0x07
	
	int joy_button = JOY_button_pressed(JOY_BUTTON) << JOY_BUTTON;
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	0e 94 65 03 	call	0x6ca	; 0x6ca <JOY_button_pressed>
     aa0:	8c 01       	movw	r16, r24
	int left_button = JOY_button_pressed(LEFT_BUTTON) << LEFT_BUTTON;
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	0e 94 65 03 	call	0x6ca	; 0x6ca <JOY_button_pressed>
     aa8:	f8 2e       	mov	r15, r24
	int right_button = JOY_button_pressed(RIGHT_BUTTON) << RIGHT_BUTTON;
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	0e 94 65 03 	call	0x6ca	; 0x6ca <JOY_button_pressed>
	
	SLI_position_t sli_position = SLI_getPosition();
	control_input.data[SLIDER_LEFT] = sli_position.left;
	control_input.data[SLIDER_RIGHT] = sli_position.right;
	
	int joy_button = JOY_button_pressed(JOY_BUTTON) << JOY_BUTTON;
     ab0:	00 0f       	add	r16, r16
     ab2:	11 1f       	adc	r17, r17
     ab4:	00 0f       	add	r16, r16
     ab6:	11 1f       	adc	r17, r17
	int left_button = JOY_button_pressed(LEFT_BUTTON) << LEFT_BUTTON;
	int right_button = JOY_button_pressed(RIGHT_BUTTON) << RIGHT_BUTTON;
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
	control_input.data[BUTTONS] = joy_button | left_button | right_button;
     abc:	08 2b       	or	r16, r24
     abe:	f0 2a       	or	r15, r16
     ac0:	f8 86       	std	Y+8, r15	; 0x08
	
	CAN_message_send(&control_input);
     ac2:	ce 01       	movw	r24, r28
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	0e 94 3d 02 	call	0x47a	; 0x47a <CAN_message_send>
	
	while(!CAN_transmit_complete(TB0))
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CAN_transmit_complete>
     ad2:	88 23       	and	r24, r24
     ad4:	d1 f3       	breq	.-12     	; 0xaca <send_control_input+0x62>
		;
}
     ad6:	2b 96       	adiw	r28, 0x0b	; 11
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	08 95       	ret

00000aee <main>:

int main(void) {
	initialize();
     aee:	0e 94 1f 05 	call	0xa3e	; 0xa3e <initialize>
	printf("Initialization of Node 1 complete!\n\n");
     af2:	86 ec       	ldi	r24, 0xC6	; 198
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <puts>
	while(1) {
		send_control_input();
     afa:	0e 94 34 05 	call	0xa68	; 0xa68 <send_control_input>
     afe:	fd cf       	rjmp	.-6      	; 0xafa <main+0xc>

00000b00 <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7) 
     b00:	88 30       	cpi	r24, 0x08	; 8
     b02:	60 f4       	brcc	.+24     	; 0xb1c <OLED_goto_line+0x1c>
		return;
	
	write_cmd(0xB0 + line);
     b04:	90 eb       	ldi	r25, 0xB0	; 176
     b06:	98 0f       	add	r25, r24

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     b08:	e0 91 22 01 	lds	r30, 0x0122
     b0c:	f0 91 23 01 	lds	r31, 0x0123
     b10:	90 83       	st	Z, r25
void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7) 
		return;
	
	write_cmd(0xB0 + line);
	current_line = line;
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	90 93 1d 03 	sts	0x031D, r25
     b18:	80 93 1c 03 	sts	0x031C, r24
     b1c:	08 95       	ret

00000b1e <OLED_goto_column>:
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127) 
     b1e:	88 23       	and	r24, r24
     b20:	ac f0       	brlt	.+42     	; 0xb4c <OLED_goto_column+0x2e>
		return;
	
	write_cmd(0x00 + column%16); // Lower column register
     b22:	98 2f       	mov	r25, r24
     b24:	9f 70       	andi	r25, 0x0F	; 15

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     b26:	e0 91 22 01 	lds	r30, 0x0122
     b2a:	f0 91 23 01 	lds	r31, 0x0123
     b2e:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127) 
		return;
	
	write_cmd(0x00 + column%16); // Lower column register
	write_cmd(0x10 + column/16); // Higher column register
     b30:	98 2f       	mov	r25, r24
     b32:	92 95       	swap	r25
     b34:	9f 70       	andi	r25, 0x0F	; 15
     b36:	90 5f       	subi	r25, 0xF0	; 240

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     b38:	e0 91 22 01 	lds	r30, 0x0122
     b3c:	f0 91 23 01 	lds	r31, 0x0123
     b40:	90 83       	st	Z, r25
	if (column < 0 || column > 127) 
		return;
	
	write_cmd(0x00 + column%16); // Lower column register
	write_cmd(0x10 + column/16); // Higher column register
	current_column = column;
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	90 93 1b 03 	sts	0x031B, r25
     b48:	80 93 1a 03 	sts	0x031A, r24
     b4c:	08 95       	ret

00000b4e <OLED_pos>:
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
		write_data(0x00);
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
     b4e:	cf 93       	push	r28
     b50:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
     b52:	88 30       	cpi	r24, 0x08	; 8
     b54:	10 f4       	brcc	.+4      	; 0xb5a <OLED_pos+0xc>
     b56:	66 23       	and	r22, r22
     b58:	4c f4       	brge	.+18     	; 0xb6c <OLED_pos+0x1e>
		printf("Out of range in OLED_pos()");
     b5a:	8a ee       	ldi	r24, 0xEA	; 234
     b5c:	92 e0       	ldi	r25, 0x02	; 2
     b5e:	9f 93       	push	r25
     b60:	8f 93       	push	r24
     b62:	0e 94 46 08 	call	0x108c	; 0x108c <printf>
		return; 
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	05 c0       	rjmp	.+10     	; 0xb76 <OLED_pos+0x28>
	}
	
	OLED_goto_line(line);
     b6c:	0e 94 80 05 	call	0xb00	; 0xb00 <OLED_goto_line>
	OLED_goto_column(column);
     b70:	8c 2f       	mov	r24, r28
     b72:	0e 94 8f 05 	call	0xb1e	; 0xb1e <OLED_goto_column>
}
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <OLED_reset_cursor>:
	OLED_clear_screen();
	OLED_reset_cursor();
}

void OLED_reset_cursor(){
	OLED_pos(0,0);
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <OLED_pos>
     b82:	08 95       	ret

00000b84 <OLED_clear_line>:
		OLED_clear_line(page);
	}
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line, 0);
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	0e 94 a7 05 	call	0xb4e	; 0xb4e <OLED_pos>
     b8a:	80 e8       	ldi	r24, 0x80	; 128
     b8c:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     b8e:	e0 91 24 01 	lds	r30, 0x0124
     b92:	f0 91 25 01 	lds	r31, 0x0125
     b96:	10 82       	st	Z, r1
     b98:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line, 0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	c1 f7       	brne	.-16     	; 0xb8e <OLED_clear_line+0xa>
		write_data(0x00);
	}
}
     b9e:	08 95       	ret

00000ba0 <OLED_clear_screen>:

void OLED_reset_cursor(){
	OLED_pos(0,0);
}

void OLED_clear_screen() {
     ba0:	cf 93       	push	r28
     ba2:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
     ba4:	8c 2f       	mov	r24, r28
     ba6:	0e 94 c2 05 	call	0xb84	; 0xb84 <OLED_clear_line>
     baa:	cf 5f       	subi	r28, 0xFF	; 255
void OLED_reset_cursor(){
	OLED_pos(0,0);
}

void OLED_clear_screen() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
     bac:	c8 30       	cpi	r28, 0x08	; 8
     bae:	d1 f7       	brne	.-12     	; 0xba4 <OLED_clear_screen+0x4>
		OLED_clear_line(page);
	}
}
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <OLED_reset>:
	}
	OLED_reset();
}

void OLED_reset() {
	OLED_clear_screen();
     bb4:	0e 94 d0 05 	call	0xba0	; 0xba0 <OLED_clear_screen>
	OLED_reset_cursor();
     bb8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <OLED_reset_cursor>
     bbc:	08 95       	ret

00000bbe <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	67 97       	sbiw	r28, 0x17	; 23
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
	const char commands[] = {
     bd2:	87 e1       	ldi	r24, 0x17	; 23
     bd4:	e6 e2       	ldi	r30, 0x26	; 38
     bd6:	f1 e0       	ldi	r31, 0x01	; 1
     bd8:	de 01       	movw	r26, r28
     bda:	11 96       	adiw	r26, 0x01	; 1
     bdc:	01 90       	ld	r0, Z+
     bde:	0d 92       	st	X+, r0
     be0:	8a 95       	dec	r24
     be2:	e1 f7       	brne	.-8      	; 0xbdc <OLED_init+0x1e>
     be4:	fe 01       	movw	r30, r28
     be6:	31 96       	adiw	r30, 0x01	; 1
     be8:	ce 01       	movw	r24, r28
     bea:	48 96       	adiw	r24, 0x18	; 24
		0xAF  // Display on
	};
	
	const int command_count = sizeof(commands)/sizeof(commands[0]);
	for (int i = 0; i < command_count; i++) {
		write_cmd(commands[i]);
     bec:	21 91       	ld	r18, Z+

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     bee:	a0 91 22 01 	lds	r26, 0x0122
     bf2:	b0 91 23 01 	lds	r27, 0x0123
     bf6:	2c 93       	st	X, r18
		0xA6, // Set normal display
		0xAF  // Display on
	};
	
	const int command_count = sizeof(commands)/sizeof(commands[0]);
	for (int i = 0; i < command_count; i++) {
     bf8:	e8 17       	cp	r30, r24
     bfa:	f9 07       	cpc	r31, r25
     bfc:	b9 f7       	brne	.-18     	; 0xbec <OLED_init+0x2e>
		write_cmd(commands[i]);
	}
	OLED_reset();
     bfe:	0e 94 da 05 	call	0xbb4	; 0xbb4 <OLED_reset>
}
     c02:	67 96       	adiw	r28, 0x17	; 23
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <OLED_print_char>:

void OLED_print_char(char character){
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = character - ascii_starting_point;
	
	switch (character) {
     c14:	8a 30       	cpi	r24, 0x0A	; 10
     c16:	29 f0       	breq	.+10     	; 0xc22 <OLED_print_char+0xe>
     c18:	8d 30       	cpi	r24, 0x0D	; 13
     c1a:	61 f0       	breq	.+24     	; 0xc34 <OLED_print_char+0x20>
     c1c:	81 11       	cpse	r24, r1
     c1e:	12 c0       	rjmp	.+36     	; 0xc44 <OLED_print_char+0x30>
     c20:	08 95       	ret
		case '\0'  :
		break;
		
		case '\n'  :  
		// Reset cursor and move it to the next line
		OLED_pos(current_line + 1, 0);  
     c22:	80 91 1c 03 	lds	r24, 0x031C
     c26:	90 91 1d 03 	lds	r25, 0x031D
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	8f 5f       	subi	r24, 0xFF	; 255
     c2e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <OLED_pos>
		break;
     c32:	08 95       	ret
		
		case '\r'  :  
		// Reset cursor to start of current line
		OLED_pos(current_line, 0);  
     c34:	80 91 1c 03 	lds	r24, 0x031C
     c38:	90 91 1d 03 	lds	r25, 0x031D
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	0e 94 a7 05 	call	0xb4e	; 0xb4e <OLED_pos>
		break;
     c42:	08 95       	ret
     c44:	e8 2f       	mov	r30, r24
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	e0 59       	subi	r30, 0x90	; 144
     c56:	f0 40       	sbci	r31, 0x00	; 0

void OLED_print_char(char character){
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = character - ascii_starting_point;
	
	switch (character) {
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	90 e0       	ldi	r25, 0x00	; 0
		break;
		
		default :
		// Print character using the included fonts
		for (int col = 0; col < FONT_SIZE; col++){
			write_data(pgm_read_byte(&font8[letter_index][col]));
     c5c:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     c5e:	a0 91 24 01 	lds	r26, 0x0124
     c62:	b0 91 25 01 	lds	r27, 0x0125
     c66:	2c 93       	st	X, r18
		OLED_pos(current_line, 0);  
		break;
		
		default :
		// Print character using the included fonts
		for (int col = 0; col < FONT_SIZE; col++){
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	31 96       	adiw	r30, 0x01	; 1
     c6c:	88 30       	cpi	r24, 0x08	; 8
     c6e:	91 05       	cpc	r25, r1
     c70:	a9 f7       	brne	.-22     	; 0xc5c <OLED_print_char+0x48>
     c72:	08 95       	ret

00000c74 <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     c74:	e0 91 24 01 	lds	r30, 0x0124
     c78:	f0 91 25 01 	lds	r31, 0x0125
     c7c:	88 e1       	ldi	r24, 0x18	; 24
     c7e:	80 83       	st	Z, r24
     c80:	e0 91 24 01 	lds	r30, 0x0124
     c84:	f0 91 25 01 	lds	r31, 0x0125
     c88:	80 83       	st	Z, r24
     c8a:	e0 91 24 01 	lds	r30, 0x0124
     c8e:	f0 91 25 01 	lds	r31, 0x0125
     c92:	9e e7       	ldi	r25, 0x7E	; 126
     c94:	90 83       	st	Z, r25
     c96:	e0 91 24 01 	lds	r30, 0x0124
     c9a:	f0 91 25 01 	lds	r31, 0x0125
     c9e:	9c e3       	ldi	r25, 0x3C	; 60
     ca0:	90 83       	st	Z, r25
     ca2:	e0 91 24 01 	lds	r30, 0x0124
     ca6:	f0 91 25 01 	lds	r31, 0x0125
     caa:	80 83       	st	Z, r24
     cac:	08 95       	ret

00000cae <SPI_init>:

void SPI_init(){
	//Configure interrupt0 on the ATmega162 for receiving interrupts from SPI
	//see page 160 in ATmega162
	//enable int0 on the ATmega162
	set_bit(GICR, INT0);
     cae:	8b b7       	in	r24, 0x3b	; 59
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8b bf       	out	0x3b, r24	; 59
	
	//interrupt when low
	clear_bit(MCUCR,ISC01);
     cb4:	85 b7       	in	r24, 0x35	; 53
     cb6:	8d 7f       	andi	r24, 0xFD	; 253
     cb8:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     cba:	85 b7       	in	r24, 0x35	; 53
     cbc:	8e 7f       	andi	r24, 0xFE	; 254
     cbe:	85 bf       	out	0x35, r24	; 53
	

	//set mosi, sck, ss as output, others as input
	set_bit(DDRB, MOSI);
     cc0:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
     cc2:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
     cc4:	bc 9a       	sbi	0x17, 4	; 23
	
	
	//set ATmega as master
	set_bit(SPCR, MSTR);
     cc6:	6c 9a       	sbi	0x0d, 4	; 13
	
	//enable SPI
	set_bit(SPCR, SPE);
     cc8:	6e 9a       	sbi	0x0d, 6	; 13
	
	//set clock to f_osc/16
	set_bit(SPCR, SPR0);
     cca:	68 9a       	sbi	0x0d, 0	; 13
	clear_bit(SPCR,SPR1);
     ccc:	69 98       	cbi	0x0d, 1	; 13
	clear_bit(SPCR, SPI2X);
     cce:	68 98       	cbi	0x0d, 0	; 13
     cd0:	08 95       	ret

00000cd2 <SPI_send>:
}


void SPI_send(uint8_t data){
	//Start transmission
	SPDR = data;		
     cd2:	8f b9       	out	0x0f, r24	; 15
	//wait for transmission complete SPSR: register with SPIF flag, SPIF: bit set to 1 when data is read
	loop_until_bit_is_set(SPSR, SPIF);
     cd4:	77 9b       	sbis	0x0e, 7	; 14
     cd6:	fe cf       	rjmp	.-4      	; 0xcd4 <SPI_send+0x2>
}
     cd8:	08 95       	ret

00000cda <SPI_read>:


char SPI_read(){
	//must send a dummy bit to receive data
	SPI_send(0);
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <SPI_send>
	
	loop_until_bit_is_set(SPSR, SPIF);
     ce0:	77 9b       	sbis	0x0e, 7	; 14
     ce2:	fe cf       	rjmp	.-4      	; 0xce0 <SPI_read+0x6>
	char data = SPDR;
     ce4:	8f b1       	in	r24, 0x0f	; 15
	return data;
	
}
     ce6:	08 95       	ret

00000ce8 <SPI_select>:
	//printf("SPI_TEST: %s\n\n", spi_read_result);
	
}

void SPI_select(){
	clear_bit(PORTB, SS);
     ce8:	c4 98       	cbi	0x18, 4	; 24
     cea:	08 95       	ret

00000cec <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
     cec:	c4 9a       	sbi	0x18, 4	; 24
     cee:	08 95       	ret

00000cf0 <SRAM_init>:
#include <stdio.h>


void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
     cf0:	85 b7       	in	r24, 0x35	; 53
     cf2:	80 68       	ori	r24, 0x80	; 128
     cf4:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
     cf6:	80 b7       	in	r24, 0x30	; 48
     cf8:	80 62       	ori	r24, 0x20	; 32
     cfa:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
     cfc:	80 b7       	in	r24, 0x30	; 48
     cfe:	8f 7e       	andi	r24, 0xEF	; 239
     d00:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
     d02:	80 b7       	in	r24, 0x30	; 48
     d04:	87 7f       	andi	r24, 0xF7	; 247
     d06:	80 bf       	out	0x30, r24	; 48
     d08:	08 95       	ret

00000d0a <usart_transmit_to_computer>:
     d0a:	5d 9b       	sbis	0x0b, 5	; 11
     d0c:	fe cf       	rjmp	.-4      	; 0xd0a <usart_transmit_to_computer>
     d0e:	8c b9       	out	0x0c, r24	; 12
     d10:	08 95       	ret

00000d12 <usart_receive_from_computer>:
     d12:	5f 9b       	sbis	0x0b, 7	; 11
     d14:	fe cf       	rjmp	.-4      	; 0xd12 <usart_receive_from_computer>
     d16:	8c b1       	in	r24, 0x0c	; 12
     d18:	08 95       	ret

00000d1a <usart_init>:
     d1a:	90 bd       	out	0x20, r25	; 32
     d1c:	89 b9       	out	0x09, r24	; 9
     d1e:	88 e1       	ldi	r24, 0x18	; 24
     d20:	8a b9       	out	0x0a, r24	; 10
     d22:	8e e8       	ldi	r24, 0x8E	; 142
     d24:	80 bd       	out	0x20, r24	; 32
     d26:	69 e8       	ldi	r22, 0x89	; 137
     d28:	76 e0       	ldi	r23, 0x06	; 6
     d2a:	85 e8       	ldi	r24, 0x85	; 133
     d2c:	96 e0       	ldi	r25, 0x06	; 6
     d2e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <fdevopen>
     d32:	08 95       	ret

00000d34 <__divmodhi4>:
     d34:	97 fb       	bst	r25, 7
     d36:	07 2e       	mov	r0, r23
     d38:	16 f4       	brtc	.+4      	; 0xd3e <__divmodhi4+0xa>
     d3a:	00 94       	com	r0
     d3c:	07 d0       	rcall	.+14     	; 0xd4c <__divmodhi4_neg1>
     d3e:	77 fd       	sbrc	r23, 7
     d40:	09 d0       	rcall	.+18     	; 0xd54 <__divmodhi4_neg2>
     d42:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__udivmodhi4>
     d46:	07 fc       	sbrc	r0, 7
     d48:	05 d0       	rcall	.+10     	; 0xd54 <__divmodhi4_neg2>
     d4a:	3e f4       	brtc	.+14     	; 0xd5a <__divmodhi4_exit>

00000d4c <__divmodhi4_neg1>:
     d4c:	90 95       	com	r25
     d4e:	81 95       	neg	r24
     d50:	9f 4f       	sbci	r25, 0xFF	; 255
     d52:	08 95       	ret

00000d54 <__divmodhi4_neg2>:
     d54:	70 95       	com	r23
     d56:	61 95       	neg	r22
     d58:	7f 4f       	sbci	r23, 0xFF	; 255

00000d5a <__divmodhi4_exit>:
     d5a:	08 95       	ret

00000d5c <__udivmodhi4>:
     d5c:	aa 1b       	sub	r26, r26
     d5e:	bb 1b       	sub	r27, r27
     d60:	51 e1       	ldi	r21, 0x11	; 17
     d62:	07 c0       	rjmp	.+14     	; 0xd72 <__udivmodhi4_ep>

00000d64 <__udivmodhi4_loop>:
     d64:	aa 1f       	adc	r26, r26
     d66:	bb 1f       	adc	r27, r27
     d68:	a6 17       	cp	r26, r22
     d6a:	b7 07       	cpc	r27, r23
     d6c:	10 f0       	brcs	.+4      	; 0xd72 <__udivmodhi4_ep>
     d6e:	a6 1b       	sub	r26, r22
     d70:	b7 0b       	sbc	r27, r23

00000d72 <__udivmodhi4_ep>:
     d72:	88 1f       	adc	r24, r24
     d74:	99 1f       	adc	r25, r25
     d76:	5a 95       	dec	r21
     d78:	a9 f7       	brne	.-22     	; 0xd64 <__udivmodhi4_loop>
     d7a:	80 95       	com	r24
     d7c:	90 95       	com	r25
     d7e:	bc 01       	movw	r22, r24
     d80:	cd 01       	movw	r24, r26
     d82:	08 95       	ret

00000d84 <malloc>:
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	91 05       	cpc	r25, r1
     d8c:	10 f4       	brcc	.+4      	; 0xd92 <malloc+0xe>
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	e0 91 2c 03 	lds	r30, 0x032C
     d96:	f0 91 2d 03 	lds	r31, 0x032D
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	a0 e0       	ldi	r26, 0x00	; 0
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	30 97       	sbiw	r30, 0x00	; 0
     da4:	39 f1       	breq	.+78     	; 0xdf4 <malloc+0x70>
     da6:	40 81       	ld	r20, Z
     da8:	51 81       	ldd	r21, Z+1	; 0x01
     daa:	48 17       	cp	r20, r24
     dac:	59 07       	cpc	r21, r25
     dae:	b8 f0       	brcs	.+46     	; 0xdde <malloc+0x5a>
     db0:	48 17       	cp	r20, r24
     db2:	59 07       	cpc	r21, r25
     db4:	71 f4       	brne	.+28     	; 0xdd2 <malloc+0x4e>
     db6:	82 81       	ldd	r24, Z+2	; 0x02
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	10 97       	sbiw	r26, 0x00	; 0
     dbc:	29 f0       	breq	.+10     	; 0xdc8 <malloc+0x44>
     dbe:	13 96       	adiw	r26, 0x03	; 3
     dc0:	9c 93       	st	X, r25
     dc2:	8e 93       	st	-X, r24
     dc4:	12 97       	sbiw	r26, 0x02	; 2
     dc6:	2c c0       	rjmp	.+88     	; 0xe20 <malloc+0x9c>
     dc8:	90 93 2d 03 	sts	0x032D, r25
     dcc:	80 93 2c 03 	sts	0x032C, r24
     dd0:	27 c0       	rjmp	.+78     	; 0xe20 <malloc+0x9c>
     dd2:	21 15       	cp	r18, r1
     dd4:	31 05       	cpc	r19, r1
     dd6:	31 f0       	breq	.+12     	; 0xde4 <malloc+0x60>
     dd8:	42 17       	cp	r20, r18
     dda:	53 07       	cpc	r21, r19
     ddc:	18 f0       	brcs	.+6      	; 0xde4 <malloc+0x60>
     dde:	a9 01       	movw	r20, r18
     de0:	db 01       	movw	r26, r22
     de2:	01 c0       	rjmp	.+2      	; 0xde6 <malloc+0x62>
     de4:	ef 01       	movw	r28, r30
     de6:	9a 01       	movw	r18, r20
     de8:	bd 01       	movw	r22, r26
     dea:	df 01       	movw	r26, r30
     dec:	02 80       	ldd	r0, Z+2	; 0x02
     dee:	f3 81       	ldd	r31, Z+3	; 0x03
     df0:	e0 2d       	mov	r30, r0
     df2:	d7 cf       	rjmp	.-82     	; 0xda2 <malloc+0x1e>
     df4:	21 15       	cp	r18, r1
     df6:	31 05       	cpc	r19, r1
     df8:	f9 f0       	breq	.+62     	; 0xe38 <malloc+0xb4>
     dfa:	28 1b       	sub	r18, r24
     dfc:	39 0b       	sbc	r19, r25
     dfe:	24 30       	cpi	r18, 0x04	; 4
     e00:	31 05       	cpc	r19, r1
     e02:	80 f4       	brcc	.+32     	; 0xe24 <malloc+0xa0>
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	9b 81       	ldd	r25, Y+3	; 0x03
     e08:	61 15       	cp	r22, r1
     e0a:	71 05       	cpc	r23, r1
     e0c:	21 f0       	breq	.+8      	; 0xe16 <malloc+0x92>
     e0e:	fb 01       	movw	r30, r22
     e10:	93 83       	std	Z+3, r25	; 0x03
     e12:	82 83       	std	Z+2, r24	; 0x02
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <malloc+0x9a>
     e16:	90 93 2d 03 	sts	0x032D, r25
     e1a:	80 93 2c 03 	sts	0x032C, r24
     e1e:	fe 01       	movw	r30, r28
     e20:	32 96       	adiw	r30, 0x02	; 2
     e22:	44 c0       	rjmp	.+136    	; 0xeac <malloc+0x128>
     e24:	fe 01       	movw	r30, r28
     e26:	e2 0f       	add	r30, r18
     e28:	f3 1f       	adc	r31, r19
     e2a:	81 93       	st	Z+, r24
     e2c:	91 93       	st	Z+, r25
     e2e:	22 50       	subi	r18, 0x02	; 2
     e30:	31 09       	sbc	r19, r1
     e32:	39 83       	std	Y+1, r19	; 0x01
     e34:	28 83       	st	Y, r18
     e36:	3a c0       	rjmp	.+116    	; 0xeac <malloc+0x128>
     e38:	20 91 2a 03 	lds	r18, 0x032A
     e3c:	30 91 2b 03 	lds	r19, 0x032B
     e40:	23 2b       	or	r18, r19
     e42:	41 f4       	brne	.+16     	; 0xe54 <malloc+0xd0>
     e44:	20 91 02 01 	lds	r18, 0x0102
     e48:	30 91 03 01 	lds	r19, 0x0103
     e4c:	30 93 2b 03 	sts	0x032B, r19
     e50:	20 93 2a 03 	sts	0x032A, r18
     e54:	20 91 00 01 	lds	r18, 0x0100
     e58:	30 91 01 01 	lds	r19, 0x0101
     e5c:	21 15       	cp	r18, r1
     e5e:	31 05       	cpc	r19, r1
     e60:	41 f4       	brne	.+16     	; 0xe72 <malloc+0xee>
     e62:	2d b7       	in	r18, 0x3d	; 61
     e64:	3e b7       	in	r19, 0x3e	; 62
     e66:	40 91 04 01 	lds	r20, 0x0104
     e6a:	50 91 05 01 	lds	r21, 0x0105
     e6e:	24 1b       	sub	r18, r20
     e70:	35 0b       	sbc	r19, r21
     e72:	e0 91 2a 03 	lds	r30, 0x032A
     e76:	f0 91 2b 03 	lds	r31, 0x032B
     e7a:	e2 17       	cp	r30, r18
     e7c:	f3 07       	cpc	r31, r19
     e7e:	a0 f4       	brcc	.+40     	; 0xea8 <malloc+0x124>
     e80:	2e 1b       	sub	r18, r30
     e82:	3f 0b       	sbc	r19, r31
     e84:	28 17       	cp	r18, r24
     e86:	39 07       	cpc	r19, r25
     e88:	78 f0       	brcs	.+30     	; 0xea8 <malloc+0x124>
     e8a:	ac 01       	movw	r20, r24
     e8c:	4e 5f       	subi	r20, 0xFE	; 254
     e8e:	5f 4f       	sbci	r21, 0xFF	; 255
     e90:	24 17       	cp	r18, r20
     e92:	35 07       	cpc	r19, r21
     e94:	48 f0       	brcs	.+18     	; 0xea8 <malloc+0x124>
     e96:	4e 0f       	add	r20, r30
     e98:	5f 1f       	adc	r21, r31
     e9a:	50 93 2b 03 	sts	0x032B, r21
     e9e:	40 93 2a 03 	sts	0x032A, r20
     ea2:	81 93       	st	Z+, r24
     ea4:	91 93       	st	Z+, r25
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <malloc+0x128>
     ea8:	e0 e0       	ldi	r30, 0x00	; 0
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	cf 01       	movw	r24, r30
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	08 95       	ret

00000eb4 <free>:
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	09 f4       	brne	.+2      	; 0xebe <free+0xa>
     ebc:	87 c0       	rjmp	.+270    	; 0xfcc <free+0x118>
     ebe:	fc 01       	movw	r30, r24
     ec0:	32 97       	sbiw	r30, 0x02	; 2
     ec2:	13 82       	std	Z+3, r1	; 0x03
     ec4:	12 82       	std	Z+2, r1	; 0x02
     ec6:	c0 91 2c 03 	lds	r28, 0x032C
     eca:	d0 91 2d 03 	lds	r29, 0x032D
     ece:	20 97       	sbiw	r28, 0x00	; 0
     ed0:	81 f4       	brne	.+32     	; 0xef2 <free+0x3e>
     ed2:	20 81       	ld	r18, Z
     ed4:	31 81       	ldd	r19, Z+1	; 0x01
     ed6:	28 0f       	add	r18, r24
     ed8:	39 1f       	adc	r19, r25
     eda:	80 91 2a 03 	lds	r24, 0x032A
     ede:	90 91 2b 03 	lds	r25, 0x032B
     ee2:	82 17       	cp	r24, r18
     ee4:	93 07       	cpc	r25, r19
     ee6:	79 f5       	brne	.+94     	; 0xf46 <free+0x92>
     ee8:	f0 93 2b 03 	sts	0x032B, r31
     eec:	e0 93 2a 03 	sts	0x032A, r30
     ef0:	6d c0       	rjmp	.+218    	; 0xfcc <free+0x118>
     ef2:	de 01       	movw	r26, r28
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	ae 17       	cp	r26, r30
     efa:	bf 07       	cpc	r27, r31
     efc:	50 f4       	brcc	.+20     	; 0xf12 <free+0x5e>
     efe:	12 96       	adiw	r26, 0x02	; 2
     f00:	4d 91       	ld	r20, X+
     f02:	5c 91       	ld	r21, X
     f04:	13 97       	sbiw	r26, 0x03	; 3
     f06:	9d 01       	movw	r18, r26
     f08:	41 15       	cp	r20, r1
     f0a:	51 05       	cpc	r21, r1
     f0c:	09 f1       	breq	.+66     	; 0xf50 <free+0x9c>
     f0e:	da 01       	movw	r26, r20
     f10:	f3 cf       	rjmp	.-26     	; 0xef8 <free+0x44>
     f12:	b3 83       	std	Z+3, r27	; 0x03
     f14:	a2 83       	std	Z+2, r26	; 0x02
     f16:	40 81       	ld	r20, Z
     f18:	51 81       	ldd	r21, Z+1	; 0x01
     f1a:	84 0f       	add	r24, r20
     f1c:	95 1f       	adc	r25, r21
     f1e:	8a 17       	cp	r24, r26
     f20:	9b 07       	cpc	r25, r27
     f22:	71 f4       	brne	.+28     	; 0xf40 <free+0x8c>
     f24:	8d 91       	ld	r24, X+
     f26:	9c 91       	ld	r25, X
     f28:	11 97       	sbiw	r26, 0x01	; 1
     f2a:	84 0f       	add	r24, r20
     f2c:	95 1f       	adc	r25, r21
     f2e:	02 96       	adiw	r24, 0x02	; 2
     f30:	91 83       	std	Z+1, r25	; 0x01
     f32:	80 83       	st	Z, r24
     f34:	12 96       	adiw	r26, 0x02	; 2
     f36:	8d 91       	ld	r24, X+
     f38:	9c 91       	ld	r25, X
     f3a:	13 97       	sbiw	r26, 0x03	; 3
     f3c:	93 83       	std	Z+3, r25	; 0x03
     f3e:	82 83       	std	Z+2, r24	; 0x02
     f40:	21 15       	cp	r18, r1
     f42:	31 05       	cpc	r19, r1
     f44:	29 f4       	brne	.+10     	; 0xf50 <free+0x9c>
     f46:	f0 93 2d 03 	sts	0x032D, r31
     f4a:	e0 93 2c 03 	sts	0x032C, r30
     f4e:	3e c0       	rjmp	.+124    	; 0xfcc <free+0x118>
     f50:	d9 01       	movw	r26, r18
     f52:	13 96       	adiw	r26, 0x03	; 3
     f54:	fc 93       	st	X, r31
     f56:	ee 93       	st	-X, r30
     f58:	12 97       	sbiw	r26, 0x02	; 2
     f5a:	4d 91       	ld	r20, X+
     f5c:	5d 91       	ld	r21, X+
     f5e:	a4 0f       	add	r26, r20
     f60:	b5 1f       	adc	r27, r21
     f62:	ea 17       	cp	r30, r26
     f64:	fb 07       	cpc	r31, r27
     f66:	79 f4       	brne	.+30     	; 0xf86 <free+0xd2>
     f68:	80 81       	ld	r24, Z
     f6a:	91 81       	ldd	r25, Z+1	; 0x01
     f6c:	84 0f       	add	r24, r20
     f6e:	95 1f       	adc	r25, r21
     f70:	02 96       	adiw	r24, 0x02	; 2
     f72:	d9 01       	movw	r26, r18
     f74:	11 96       	adiw	r26, 0x01	; 1
     f76:	9c 93       	st	X, r25
     f78:	8e 93       	st	-X, r24
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	93 81       	ldd	r25, Z+3	; 0x03
     f7e:	13 96       	adiw	r26, 0x03	; 3
     f80:	9c 93       	st	X, r25
     f82:	8e 93       	st	-X, r24
     f84:	12 97       	sbiw	r26, 0x02	; 2
     f86:	e0 e0       	ldi	r30, 0x00	; 0
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	19 f0       	breq	.+6      	; 0xf98 <free+0xe4>
     f92:	fe 01       	movw	r30, r28
     f94:	ec 01       	movw	r28, r24
     f96:	f9 cf       	rjmp	.-14     	; 0xf8a <free+0xd6>
     f98:	ce 01       	movw	r24, r28
     f9a:	02 96       	adiw	r24, 0x02	; 2
     f9c:	28 81       	ld	r18, Y
     f9e:	39 81       	ldd	r19, Y+1	; 0x01
     fa0:	82 0f       	add	r24, r18
     fa2:	93 1f       	adc	r25, r19
     fa4:	20 91 2a 03 	lds	r18, 0x032A
     fa8:	30 91 2b 03 	lds	r19, 0x032B
     fac:	28 17       	cp	r18, r24
     fae:	39 07       	cpc	r19, r25
     fb0:	69 f4       	brne	.+26     	; 0xfcc <free+0x118>
     fb2:	30 97       	sbiw	r30, 0x00	; 0
     fb4:	29 f4       	brne	.+10     	; 0xfc0 <free+0x10c>
     fb6:	10 92 2d 03 	sts	0x032D, r1
     fba:	10 92 2c 03 	sts	0x032C, r1
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <free+0x110>
     fc0:	13 82       	std	Z+3, r1	; 0x03
     fc2:	12 82       	std	Z+2, r1	; 0x02
     fc4:	d0 93 2b 03 	sts	0x032B, r29
     fc8:	c0 93 2a 03 	sts	0x032A, r28
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <fdevopen>:
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	ec 01       	movw	r28, r24
     fdc:	8b 01       	movw	r16, r22
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	31 f4       	brne	.+12     	; 0xfee <fdevopen+0x1c>
     fe2:	61 15       	cp	r22, r1
     fe4:	71 05       	cpc	r23, r1
     fe6:	19 f4       	brne	.+6      	; 0xfee <fdevopen+0x1c>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	38 c0       	rjmp	.+112    	; 0x105e <fdevopen+0x8c>
     fee:	6e e0       	ldi	r22, 0x0E	; 14
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <calloc>
     ffa:	fc 01       	movw	r30, r24
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	a1 f3       	breq	.-24     	; 0xfe8 <fdevopen+0x16>
    1000:	80 e8       	ldi	r24, 0x80	; 128
    1002:	83 83       	std	Z+3, r24	; 0x03
    1004:	01 15       	cp	r16, r1
    1006:	11 05       	cpc	r17, r1
    1008:	71 f0       	breq	.+28     	; 0x1026 <fdevopen+0x54>
    100a:	13 87       	std	Z+11, r17	; 0x0b
    100c:	02 87       	std	Z+10, r16	; 0x0a
    100e:	81 e8       	ldi	r24, 0x81	; 129
    1010:	83 83       	std	Z+3, r24	; 0x03
    1012:	80 91 2e 03 	lds	r24, 0x032E
    1016:	90 91 2f 03 	lds	r25, 0x032F
    101a:	89 2b       	or	r24, r25
    101c:	21 f4       	brne	.+8      	; 0x1026 <fdevopen+0x54>
    101e:	f0 93 2f 03 	sts	0x032F, r31
    1022:	e0 93 2e 03 	sts	0x032E, r30
    1026:	20 97       	sbiw	r28, 0x00	; 0
    1028:	c9 f0       	breq	.+50     	; 0x105c <fdevopen+0x8a>
    102a:	d1 87       	std	Z+9, r29	; 0x09
    102c:	c0 87       	std	Z+8, r28	; 0x08
    102e:	83 81       	ldd	r24, Z+3	; 0x03
    1030:	82 60       	ori	r24, 0x02	; 2
    1032:	83 83       	std	Z+3, r24	; 0x03
    1034:	80 91 30 03 	lds	r24, 0x0330
    1038:	90 91 31 03 	lds	r25, 0x0331
    103c:	89 2b       	or	r24, r25
    103e:	71 f4       	brne	.+28     	; 0x105c <fdevopen+0x8a>
    1040:	f0 93 31 03 	sts	0x0331, r31
    1044:	e0 93 30 03 	sts	0x0330, r30
    1048:	80 91 32 03 	lds	r24, 0x0332
    104c:	90 91 33 03 	lds	r25, 0x0333
    1050:	89 2b       	or	r24, r25
    1052:	21 f4       	brne	.+8      	; 0x105c <fdevopen+0x8a>
    1054:	f0 93 33 03 	sts	0x0333, r31
    1058:	e0 93 32 03 	sts	0x0332, r30
    105c:	cf 01       	movw	r24, r30
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	08 95       	ret

00001068 <fprintf>:
    1068:	a0 e0       	ldi	r26, 0x00	; 0
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ea e3       	ldi	r30, 0x3A	; 58
    106e:	f8 e0       	ldi	r31, 0x08	; 8
    1070:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__prologue_saves__+0x20>
    1074:	ae 01       	movw	r20, r28
    1076:	47 5f       	subi	r20, 0xF7	; 247
    1078:	5f 4f       	sbci	r21, 0xFF	; 255
    107a:	6f 81       	ldd	r22, Y+7	; 0x07
    107c:	78 85       	ldd	r23, Y+8	; 0x08
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	0e 94 87 08 	call	0x110e	; 0x110e <vfprintf>
    1086:	e2 e0       	ldi	r30, 0x02	; 2
    1088:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__epilogue_restores__+0x20>

0000108c <printf>:
    108c:	a0 e0       	ldi	r26, 0x00	; 0
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	ec e4       	ldi	r30, 0x4C	; 76
    1092:	f8 e0       	ldi	r31, 0x08	; 8
    1094:	0c 94 32 0b 	jmp	0x1664	; 0x1664 <__prologue_saves__+0x20>
    1098:	fe 01       	movw	r30, r28
    109a:	35 96       	adiw	r30, 0x05	; 5
    109c:	61 91       	ld	r22, Z+
    109e:	71 91       	ld	r23, Z+
    10a0:	af 01       	movw	r20, r30
    10a2:	80 91 30 03 	lds	r24, 0x0330
    10a6:	90 91 31 03 	lds	r25, 0x0331
    10aa:	0e 94 87 08 	call	0x110e	; 0x110e <vfprintf>
    10ae:	e2 e0       	ldi	r30, 0x02	; 2
    10b0:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__epilogue_restores__+0x20>

000010b4 <puts>:
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	e0 91 30 03 	lds	r30, 0x0330
    10c0:	f0 91 31 03 	lds	r31, 0x0331
    10c4:	23 81       	ldd	r18, Z+3	; 0x03
    10c6:	21 ff       	sbrs	r18, 1
    10c8:	1b c0       	rjmp	.+54     	; 0x1100 <puts+0x4c>
    10ca:	ec 01       	movw	r28, r24
    10cc:	00 e0       	ldi	r16, 0x00	; 0
    10ce:	10 e0       	ldi	r17, 0x00	; 0
    10d0:	89 91       	ld	r24, Y+
    10d2:	60 91 30 03 	lds	r22, 0x0330
    10d6:	70 91 31 03 	lds	r23, 0x0331
    10da:	db 01       	movw	r26, r22
    10dc:	18 96       	adiw	r26, 0x08	; 8
    10de:	ed 91       	ld	r30, X+
    10e0:	fc 91       	ld	r31, X
    10e2:	19 97       	sbiw	r26, 0x09	; 9
    10e4:	88 23       	and	r24, r24
    10e6:	31 f0       	breq	.+12     	; 0x10f4 <puts+0x40>
    10e8:	09 95       	icall
    10ea:	89 2b       	or	r24, r25
    10ec:	89 f3       	breq	.-30     	; 0x10d0 <puts+0x1c>
    10ee:	0f ef       	ldi	r16, 0xFF	; 255
    10f0:	1f ef       	ldi	r17, 0xFF	; 255
    10f2:	ee cf       	rjmp	.-36     	; 0x10d0 <puts+0x1c>
    10f4:	8a e0       	ldi	r24, 0x0A	; 10
    10f6:	09 95       	icall
    10f8:	89 2b       	or	r24, r25
    10fa:	11 f4       	brne	.+4      	; 0x1100 <puts+0x4c>
    10fc:	c8 01       	movw	r24, r16
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <puts+0x50>
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	9f ef       	ldi	r25, 0xFF	; 255
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	08 95       	ret

0000110e <vfprintf>:
    110e:	ac e0       	ldi	r26, 0x0C	; 12
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	ed e8       	ldi	r30, 0x8D	; 141
    1114:	f8 e0       	ldi	r31, 0x08	; 8
    1116:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__prologue_saves__>
    111a:	7c 01       	movw	r14, r24
    111c:	6b 01       	movw	r12, r22
    111e:	8a 01       	movw	r16, r20
    1120:	fc 01       	movw	r30, r24
    1122:	17 82       	std	Z+7, r1	; 0x07
    1124:	16 82       	std	Z+6, r1	; 0x06
    1126:	83 81       	ldd	r24, Z+3	; 0x03
    1128:	81 ff       	sbrs	r24, 1
    112a:	bd c1       	rjmp	.+890    	; 0x14a6 <vfprintf+0x398>
    112c:	ce 01       	movw	r24, r28
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	4c 01       	movw	r8, r24
    1132:	f7 01       	movw	r30, r14
    1134:	93 81       	ldd	r25, Z+3	; 0x03
    1136:	f6 01       	movw	r30, r12
    1138:	93 fd       	sbrc	r25, 3
    113a:	85 91       	lpm	r24, Z+
    113c:	93 ff       	sbrs	r25, 3
    113e:	81 91       	ld	r24, Z+
    1140:	6f 01       	movw	r12, r30
    1142:	88 23       	and	r24, r24
    1144:	09 f4       	brne	.+2      	; 0x1148 <vfprintf+0x3a>
    1146:	ab c1       	rjmp	.+854    	; 0x149e <vfprintf+0x390>
    1148:	85 32       	cpi	r24, 0x25	; 37
    114a:	39 f4       	brne	.+14     	; 0x115a <vfprintf+0x4c>
    114c:	93 fd       	sbrc	r25, 3
    114e:	85 91       	lpm	r24, Z+
    1150:	93 ff       	sbrs	r25, 3
    1152:	81 91       	ld	r24, Z+
    1154:	6f 01       	movw	r12, r30
    1156:	85 32       	cpi	r24, 0x25	; 37
    1158:	29 f4       	brne	.+10     	; 0x1164 <vfprintf+0x56>
    115a:	b7 01       	movw	r22, r14
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    1162:	e7 cf       	rjmp	.-50     	; 0x1132 <vfprintf+0x24>
    1164:	51 2c       	mov	r5, r1
    1166:	31 2c       	mov	r3, r1
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	20 32       	cpi	r18, 0x20	; 32
    116c:	a0 f4       	brcc	.+40     	; 0x1196 <vfprintf+0x88>
    116e:	8b 32       	cpi	r24, 0x2B	; 43
    1170:	69 f0       	breq	.+26     	; 0x118c <vfprintf+0x7e>
    1172:	30 f4       	brcc	.+12     	; 0x1180 <vfprintf+0x72>
    1174:	80 32       	cpi	r24, 0x20	; 32
    1176:	59 f0       	breq	.+22     	; 0x118e <vfprintf+0x80>
    1178:	83 32       	cpi	r24, 0x23	; 35
    117a:	69 f4       	brne	.+26     	; 0x1196 <vfprintf+0x88>
    117c:	20 61       	ori	r18, 0x10	; 16
    117e:	2c c0       	rjmp	.+88     	; 0x11d8 <vfprintf+0xca>
    1180:	8d 32       	cpi	r24, 0x2D	; 45
    1182:	39 f0       	breq	.+14     	; 0x1192 <vfprintf+0x84>
    1184:	80 33       	cpi	r24, 0x30	; 48
    1186:	39 f4       	brne	.+14     	; 0x1196 <vfprintf+0x88>
    1188:	21 60       	ori	r18, 0x01	; 1
    118a:	26 c0       	rjmp	.+76     	; 0x11d8 <vfprintf+0xca>
    118c:	22 60       	ori	r18, 0x02	; 2
    118e:	24 60       	ori	r18, 0x04	; 4
    1190:	23 c0       	rjmp	.+70     	; 0x11d8 <vfprintf+0xca>
    1192:	28 60       	ori	r18, 0x08	; 8
    1194:	21 c0       	rjmp	.+66     	; 0x11d8 <vfprintf+0xca>
    1196:	27 fd       	sbrc	r18, 7
    1198:	27 c0       	rjmp	.+78     	; 0x11e8 <vfprintf+0xda>
    119a:	30 ed       	ldi	r19, 0xD0	; 208
    119c:	38 0f       	add	r19, r24
    119e:	3a 30       	cpi	r19, 0x0A	; 10
    11a0:	78 f4       	brcc	.+30     	; 0x11c0 <vfprintf+0xb2>
    11a2:	26 ff       	sbrs	r18, 6
    11a4:	06 c0       	rjmp	.+12     	; 0x11b2 <vfprintf+0xa4>
    11a6:	fa e0       	ldi	r31, 0x0A	; 10
    11a8:	5f 9e       	mul	r5, r31
    11aa:	30 0d       	add	r19, r0
    11ac:	11 24       	eor	r1, r1
    11ae:	53 2e       	mov	r5, r19
    11b0:	13 c0       	rjmp	.+38     	; 0x11d8 <vfprintf+0xca>
    11b2:	8a e0       	ldi	r24, 0x0A	; 10
    11b4:	38 9e       	mul	r3, r24
    11b6:	30 0d       	add	r19, r0
    11b8:	11 24       	eor	r1, r1
    11ba:	33 2e       	mov	r3, r19
    11bc:	20 62       	ori	r18, 0x20	; 32
    11be:	0c c0       	rjmp	.+24     	; 0x11d8 <vfprintf+0xca>
    11c0:	8e 32       	cpi	r24, 0x2E	; 46
    11c2:	21 f4       	brne	.+8      	; 0x11cc <vfprintf+0xbe>
    11c4:	26 fd       	sbrc	r18, 6
    11c6:	6b c1       	rjmp	.+726    	; 0x149e <vfprintf+0x390>
    11c8:	20 64       	ori	r18, 0x40	; 64
    11ca:	06 c0       	rjmp	.+12     	; 0x11d8 <vfprintf+0xca>
    11cc:	8c 36       	cpi	r24, 0x6C	; 108
    11ce:	11 f4       	brne	.+4      	; 0x11d4 <vfprintf+0xc6>
    11d0:	20 68       	ori	r18, 0x80	; 128
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <vfprintf+0xca>
    11d4:	88 36       	cpi	r24, 0x68	; 104
    11d6:	41 f4       	brne	.+16     	; 0x11e8 <vfprintf+0xda>
    11d8:	f6 01       	movw	r30, r12
    11da:	93 fd       	sbrc	r25, 3
    11dc:	85 91       	lpm	r24, Z+
    11de:	93 ff       	sbrs	r25, 3
    11e0:	81 91       	ld	r24, Z+
    11e2:	6f 01       	movw	r12, r30
    11e4:	81 11       	cpse	r24, r1
    11e6:	c1 cf       	rjmp	.-126    	; 0x116a <vfprintf+0x5c>
    11e8:	98 2f       	mov	r25, r24
    11ea:	9f 7d       	andi	r25, 0xDF	; 223
    11ec:	95 54       	subi	r25, 0x45	; 69
    11ee:	93 30       	cpi	r25, 0x03	; 3
    11f0:	28 f4       	brcc	.+10     	; 0x11fc <vfprintf+0xee>
    11f2:	0c 5f       	subi	r16, 0xFC	; 252
    11f4:	1f 4f       	sbci	r17, 0xFF	; 255
    11f6:	ff e3       	ldi	r31, 0x3F	; 63
    11f8:	f9 83       	std	Y+1, r31	; 0x01
    11fa:	0d c0       	rjmp	.+26     	; 0x1216 <vfprintf+0x108>
    11fc:	83 36       	cpi	r24, 0x63	; 99
    11fe:	31 f0       	breq	.+12     	; 0x120c <vfprintf+0xfe>
    1200:	83 37       	cpi	r24, 0x73	; 115
    1202:	71 f0       	breq	.+28     	; 0x1220 <vfprintf+0x112>
    1204:	83 35       	cpi	r24, 0x53	; 83
    1206:	09 f0       	breq	.+2      	; 0x120a <vfprintf+0xfc>
    1208:	5b c0       	rjmp	.+182    	; 0x12c0 <vfprintf+0x1b2>
    120a:	22 c0       	rjmp	.+68     	; 0x1250 <vfprintf+0x142>
    120c:	f8 01       	movw	r30, r16
    120e:	80 81       	ld	r24, Z
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	0e 5f       	subi	r16, 0xFE	; 254
    1214:	1f 4f       	sbci	r17, 0xFF	; 255
    1216:	44 24       	eor	r4, r4
    1218:	43 94       	inc	r4
    121a:	51 2c       	mov	r5, r1
    121c:	54 01       	movw	r10, r8
    121e:	15 c0       	rjmp	.+42     	; 0x124a <vfprintf+0x13c>
    1220:	38 01       	movw	r6, r16
    1222:	f2 e0       	ldi	r31, 0x02	; 2
    1224:	6f 0e       	add	r6, r31
    1226:	71 1c       	adc	r7, r1
    1228:	f8 01       	movw	r30, r16
    122a:	a0 80       	ld	r10, Z
    122c:	b1 80       	ldd	r11, Z+1	; 0x01
    122e:	26 ff       	sbrs	r18, 6
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <vfprintf+0x12a>
    1232:	65 2d       	mov	r22, r5
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	02 c0       	rjmp	.+4      	; 0x123c <vfprintf+0x12e>
    1238:	6f ef       	ldi	r22, 0xFF	; 255
    123a:	7f ef       	ldi	r23, 0xFF	; 255
    123c:	c5 01       	movw	r24, r10
    123e:	2c 87       	std	Y+12, r18	; 0x0c
    1240:	0e 94 87 0a 	call	0x150e	; 0x150e <strnlen>
    1244:	2c 01       	movw	r4, r24
    1246:	83 01       	movw	r16, r6
    1248:	2c 85       	ldd	r18, Y+12	; 0x0c
    124a:	2f 77       	andi	r18, 0x7F	; 127
    124c:	22 2e       	mov	r2, r18
    124e:	17 c0       	rjmp	.+46     	; 0x127e <vfprintf+0x170>
    1250:	38 01       	movw	r6, r16
    1252:	f2 e0       	ldi	r31, 0x02	; 2
    1254:	6f 0e       	add	r6, r31
    1256:	71 1c       	adc	r7, r1
    1258:	f8 01       	movw	r30, r16
    125a:	a0 80       	ld	r10, Z
    125c:	b1 80       	ldd	r11, Z+1	; 0x01
    125e:	26 ff       	sbrs	r18, 6
    1260:	03 c0       	rjmp	.+6      	; 0x1268 <vfprintf+0x15a>
    1262:	65 2d       	mov	r22, r5
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	02 c0       	rjmp	.+4      	; 0x126c <vfprintf+0x15e>
    1268:	6f ef       	ldi	r22, 0xFF	; 255
    126a:	7f ef       	ldi	r23, 0xFF	; 255
    126c:	c5 01       	movw	r24, r10
    126e:	2c 87       	std	Y+12, r18	; 0x0c
    1270:	0e 94 75 0a 	call	0x14ea	; 0x14ea <strnlen_P>
    1274:	2c 01       	movw	r4, r24
    1276:	2c 85       	ldd	r18, Y+12	; 0x0c
    1278:	20 68       	ori	r18, 0x80	; 128
    127a:	22 2e       	mov	r2, r18
    127c:	83 01       	movw	r16, r6
    127e:	23 fc       	sbrc	r2, 3
    1280:	1b c0       	rjmp	.+54     	; 0x12b8 <vfprintf+0x1aa>
    1282:	83 2d       	mov	r24, r3
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	48 16       	cp	r4, r24
    1288:	59 06       	cpc	r5, r25
    128a:	b0 f4       	brcc	.+44     	; 0x12b8 <vfprintf+0x1aa>
    128c:	b7 01       	movw	r22, r14
    128e:	80 e2       	ldi	r24, 0x20	; 32
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    1296:	3a 94       	dec	r3
    1298:	f4 cf       	rjmp	.-24     	; 0x1282 <vfprintf+0x174>
    129a:	f5 01       	movw	r30, r10
    129c:	27 fc       	sbrc	r2, 7
    129e:	85 91       	lpm	r24, Z+
    12a0:	27 fe       	sbrs	r2, 7
    12a2:	81 91       	ld	r24, Z+
    12a4:	5f 01       	movw	r10, r30
    12a6:	b7 01       	movw	r22, r14
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    12ae:	31 10       	cpse	r3, r1
    12b0:	3a 94       	dec	r3
    12b2:	f1 e0       	ldi	r31, 0x01	; 1
    12b4:	4f 1a       	sub	r4, r31
    12b6:	51 08       	sbc	r5, r1
    12b8:	41 14       	cp	r4, r1
    12ba:	51 04       	cpc	r5, r1
    12bc:	71 f7       	brne	.-36     	; 0x129a <vfprintf+0x18c>
    12be:	e5 c0       	rjmp	.+458    	; 0x148a <vfprintf+0x37c>
    12c0:	84 36       	cpi	r24, 0x64	; 100
    12c2:	11 f0       	breq	.+4      	; 0x12c8 <vfprintf+0x1ba>
    12c4:	89 36       	cpi	r24, 0x69	; 105
    12c6:	39 f5       	brne	.+78     	; 0x1316 <vfprintf+0x208>
    12c8:	f8 01       	movw	r30, r16
    12ca:	27 ff       	sbrs	r18, 7
    12cc:	07 c0       	rjmp	.+14     	; 0x12dc <vfprintf+0x1ce>
    12ce:	60 81       	ld	r22, Z
    12d0:	71 81       	ldd	r23, Z+1	; 0x01
    12d2:	82 81       	ldd	r24, Z+2	; 0x02
    12d4:	93 81       	ldd	r25, Z+3	; 0x03
    12d6:	0c 5f       	subi	r16, 0xFC	; 252
    12d8:	1f 4f       	sbci	r17, 0xFF	; 255
    12da:	08 c0       	rjmp	.+16     	; 0x12ec <vfprintf+0x1de>
    12dc:	60 81       	ld	r22, Z
    12de:	71 81       	ldd	r23, Z+1	; 0x01
    12e0:	88 27       	eor	r24, r24
    12e2:	77 fd       	sbrc	r23, 7
    12e4:	80 95       	com	r24
    12e6:	98 2f       	mov	r25, r24
    12e8:	0e 5f       	subi	r16, 0xFE	; 254
    12ea:	1f 4f       	sbci	r17, 0xFF	; 255
    12ec:	2f 76       	andi	r18, 0x6F	; 111
    12ee:	b2 2e       	mov	r11, r18
    12f0:	97 ff       	sbrs	r25, 7
    12f2:	09 c0       	rjmp	.+18     	; 0x1306 <vfprintf+0x1f8>
    12f4:	90 95       	com	r25
    12f6:	80 95       	com	r24
    12f8:	70 95       	com	r23
    12fa:	61 95       	neg	r22
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255
    12fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1300:	9f 4f       	sbci	r25, 0xFF	; 255
    1302:	20 68       	ori	r18, 0x80	; 128
    1304:	b2 2e       	mov	r11, r18
    1306:	2a e0       	ldi	r18, 0x0A	; 10
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	a4 01       	movw	r20, r8
    130c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__ultoa_invert>
    1310:	a8 2e       	mov	r10, r24
    1312:	a8 18       	sub	r10, r8
    1314:	44 c0       	rjmp	.+136    	; 0x139e <vfprintf+0x290>
    1316:	85 37       	cpi	r24, 0x75	; 117
    1318:	29 f4       	brne	.+10     	; 0x1324 <vfprintf+0x216>
    131a:	2f 7e       	andi	r18, 0xEF	; 239
    131c:	b2 2e       	mov	r11, r18
    131e:	2a e0       	ldi	r18, 0x0A	; 10
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	25 c0       	rjmp	.+74     	; 0x136e <vfprintf+0x260>
    1324:	f2 2f       	mov	r31, r18
    1326:	f9 7f       	andi	r31, 0xF9	; 249
    1328:	bf 2e       	mov	r11, r31
    132a:	8f 36       	cpi	r24, 0x6F	; 111
    132c:	c1 f0       	breq	.+48     	; 0x135e <vfprintf+0x250>
    132e:	18 f4       	brcc	.+6      	; 0x1336 <vfprintf+0x228>
    1330:	88 35       	cpi	r24, 0x58	; 88
    1332:	79 f0       	breq	.+30     	; 0x1352 <vfprintf+0x244>
    1334:	b4 c0       	rjmp	.+360    	; 0x149e <vfprintf+0x390>
    1336:	80 37       	cpi	r24, 0x70	; 112
    1338:	19 f0       	breq	.+6      	; 0x1340 <vfprintf+0x232>
    133a:	88 37       	cpi	r24, 0x78	; 120
    133c:	21 f0       	breq	.+8      	; 0x1346 <vfprintf+0x238>
    133e:	af c0       	rjmp	.+350    	; 0x149e <vfprintf+0x390>
    1340:	2f 2f       	mov	r18, r31
    1342:	20 61       	ori	r18, 0x10	; 16
    1344:	b2 2e       	mov	r11, r18
    1346:	b4 fe       	sbrs	r11, 4
    1348:	0d c0       	rjmp	.+26     	; 0x1364 <vfprintf+0x256>
    134a:	8b 2d       	mov	r24, r11
    134c:	84 60       	ori	r24, 0x04	; 4
    134e:	b8 2e       	mov	r11, r24
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <vfprintf+0x256>
    1352:	24 ff       	sbrs	r18, 4
    1354:	0a c0       	rjmp	.+20     	; 0x136a <vfprintf+0x25c>
    1356:	9f 2f       	mov	r25, r31
    1358:	96 60       	ori	r25, 0x06	; 6
    135a:	b9 2e       	mov	r11, r25
    135c:	06 c0       	rjmp	.+12     	; 0x136a <vfprintf+0x25c>
    135e:	28 e0       	ldi	r18, 0x08	; 8
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	05 c0       	rjmp	.+10     	; 0x136e <vfprintf+0x260>
    1364:	20 e1       	ldi	r18, 0x10	; 16
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	02 c0       	rjmp	.+4      	; 0x136e <vfprintf+0x260>
    136a:	20 e1       	ldi	r18, 0x10	; 16
    136c:	32 e0       	ldi	r19, 0x02	; 2
    136e:	f8 01       	movw	r30, r16
    1370:	b7 fe       	sbrs	r11, 7
    1372:	07 c0       	rjmp	.+14     	; 0x1382 <vfprintf+0x274>
    1374:	60 81       	ld	r22, Z
    1376:	71 81       	ldd	r23, Z+1	; 0x01
    1378:	82 81       	ldd	r24, Z+2	; 0x02
    137a:	93 81       	ldd	r25, Z+3	; 0x03
    137c:	0c 5f       	subi	r16, 0xFC	; 252
    137e:	1f 4f       	sbci	r17, 0xFF	; 255
    1380:	06 c0       	rjmp	.+12     	; 0x138e <vfprintf+0x280>
    1382:	60 81       	ld	r22, Z
    1384:	71 81       	ldd	r23, Z+1	; 0x01
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 5f       	subi	r16, 0xFE	; 254
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	a4 01       	movw	r20, r8
    1390:	0e 94 c4 0a 	call	0x1588	; 0x1588 <__ultoa_invert>
    1394:	a8 2e       	mov	r10, r24
    1396:	a8 18       	sub	r10, r8
    1398:	fb 2d       	mov	r31, r11
    139a:	ff 77       	andi	r31, 0x7F	; 127
    139c:	bf 2e       	mov	r11, r31
    139e:	b6 fe       	sbrs	r11, 6
    13a0:	0b c0       	rjmp	.+22     	; 0x13b8 <vfprintf+0x2aa>
    13a2:	2b 2d       	mov	r18, r11
    13a4:	2e 7f       	andi	r18, 0xFE	; 254
    13a6:	a5 14       	cp	r10, r5
    13a8:	50 f4       	brcc	.+20     	; 0x13be <vfprintf+0x2b0>
    13aa:	b4 fe       	sbrs	r11, 4
    13ac:	0a c0       	rjmp	.+20     	; 0x13c2 <vfprintf+0x2b4>
    13ae:	b2 fc       	sbrc	r11, 2
    13b0:	08 c0       	rjmp	.+16     	; 0x13c2 <vfprintf+0x2b4>
    13b2:	2b 2d       	mov	r18, r11
    13b4:	2e 7e       	andi	r18, 0xEE	; 238
    13b6:	05 c0       	rjmp	.+10     	; 0x13c2 <vfprintf+0x2b4>
    13b8:	7a 2c       	mov	r7, r10
    13ba:	2b 2d       	mov	r18, r11
    13bc:	03 c0       	rjmp	.+6      	; 0x13c4 <vfprintf+0x2b6>
    13be:	7a 2c       	mov	r7, r10
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <vfprintf+0x2b6>
    13c2:	75 2c       	mov	r7, r5
    13c4:	24 ff       	sbrs	r18, 4
    13c6:	0d c0       	rjmp	.+26     	; 0x13e2 <vfprintf+0x2d4>
    13c8:	fe 01       	movw	r30, r28
    13ca:	ea 0d       	add	r30, r10
    13cc:	f1 1d       	adc	r31, r1
    13ce:	80 81       	ld	r24, Z
    13d0:	80 33       	cpi	r24, 0x30	; 48
    13d2:	11 f4       	brne	.+4      	; 0x13d8 <vfprintf+0x2ca>
    13d4:	29 7e       	andi	r18, 0xE9	; 233
    13d6:	09 c0       	rjmp	.+18     	; 0x13ea <vfprintf+0x2dc>
    13d8:	22 ff       	sbrs	r18, 2
    13da:	06 c0       	rjmp	.+12     	; 0x13e8 <vfprintf+0x2da>
    13dc:	73 94       	inc	r7
    13de:	73 94       	inc	r7
    13e0:	04 c0       	rjmp	.+8      	; 0x13ea <vfprintf+0x2dc>
    13e2:	82 2f       	mov	r24, r18
    13e4:	86 78       	andi	r24, 0x86	; 134
    13e6:	09 f0       	breq	.+2      	; 0x13ea <vfprintf+0x2dc>
    13e8:	73 94       	inc	r7
    13ea:	23 fd       	sbrc	r18, 3
    13ec:	13 c0       	rjmp	.+38     	; 0x1414 <vfprintf+0x306>
    13ee:	20 ff       	sbrs	r18, 0
    13f0:	06 c0       	rjmp	.+12     	; 0x13fe <vfprintf+0x2f0>
    13f2:	5a 2c       	mov	r5, r10
    13f4:	73 14       	cp	r7, r3
    13f6:	18 f4       	brcc	.+6      	; 0x13fe <vfprintf+0x2f0>
    13f8:	53 0c       	add	r5, r3
    13fa:	57 18       	sub	r5, r7
    13fc:	73 2c       	mov	r7, r3
    13fe:	73 14       	cp	r7, r3
    1400:	68 f4       	brcc	.+26     	; 0x141c <vfprintf+0x30e>
    1402:	b7 01       	movw	r22, r14
    1404:	80 e2       	ldi	r24, 0x20	; 32
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	2c 87       	std	Y+12, r18	; 0x0c
    140a:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    140e:	73 94       	inc	r7
    1410:	2c 85       	ldd	r18, Y+12	; 0x0c
    1412:	f5 cf       	rjmp	.-22     	; 0x13fe <vfprintf+0x2f0>
    1414:	73 14       	cp	r7, r3
    1416:	10 f4       	brcc	.+4      	; 0x141c <vfprintf+0x30e>
    1418:	37 18       	sub	r3, r7
    141a:	01 c0       	rjmp	.+2      	; 0x141e <vfprintf+0x310>
    141c:	31 2c       	mov	r3, r1
    141e:	24 ff       	sbrs	r18, 4
    1420:	12 c0       	rjmp	.+36     	; 0x1446 <vfprintf+0x338>
    1422:	b7 01       	movw	r22, r14
    1424:	80 e3       	ldi	r24, 0x30	; 48
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	2c 87       	std	Y+12, r18	; 0x0c
    142a:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    142e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1430:	22 ff       	sbrs	r18, 2
    1432:	17 c0       	rjmp	.+46     	; 0x1462 <vfprintf+0x354>
    1434:	21 ff       	sbrs	r18, 1
    1436:	03 c0       	rjmp	.+6      	; 0x143e <vfprintf+0x330>
    1438:	88 e5       	ldi	r24, 0x58	; 88
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <vfprintf+0x334>
    143e:	88 e7       	ldi	r24, 0x78	; 120
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	b7 01       	movw	r22, r14
    1444:	0c c0       	rjmp	.+24     	; 0x145e <vfprintf+0x350>
    1446:	82 2f       	mov	r24, r18
    1448:	86 78       	andi	r24, 0x86	; 134
    144a:	59 f0       	breq	.+22     	; 0x1462 <vfprintf+0x354>
    144c:	21 fd       	sbrc	r18, 1
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <vfprintf+0x346>
    1450:	80 e2       	ldi	r24, 0x20	; 32
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <vfprintf+0x348>
    1454:	8b e2       	ldi	r24, 0x2B	; 43
    1456:	27 fd       	sbrc	r18, 7
    1458:	8d e2       	ldi	r24, 0x2D	; 45
    145a:	b7 01       	movw	r22, r14
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    1462:	a5 14       	cp	r10, r5
    1464:	38 f4       	brcc	.+14     	; 0x1474 <vfprintf+0x366>
    1466:	b7 01       	movw	r22, r14
    1468:	80 e3       	ldi	r24, 0x30	; 48
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    1470:	5a 94       	dec	r5
    1472:	f7 cf       	rjmp	.-18     	; 0x1462 <vfprintf+0x354>
    1474:	aa 94       	dec	r10
    1476:	f4 01       	movw	r30, r8
    1478:	ea 0d       	add	r30, r10
    147a:	f1 1d       	adc	r31, r1
    147c:	80 81       	ld	r24, Z
    147e:	b7 01       	movw	r22, r14
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    1486:	a1 10       	cpse	r10, r1
    1488:	f5 cf       	rjmp	.-22     	; 0x1474 <vfprintf+0x366>
    148a:	33 20       	and	r3, r3
    148c:	09 f4       	brne	.+2      	; 0x1490 <vfprintf+0x382>
    148e:	51 ce       	rjmp	.-862    	; 0x1132 <vfprintf+0x24>
    1490:	b7 01       	movw	r22, r14
    1492:	80 e2       	ldi	r24, 0x20	; 32
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 92 0a 	call	0x1524	; 0x1524 <fputc>
    149a:	3a 94       	dec	r3
    149c:	f6 cf       	rjmp	.-20     	; 0x148a <vfprintf+0x37c>
    149e:	f7 01       	movw	r30, r14
    14a0:	86 81       	ldd	r24, Z+6	; 0x06
    14a2:	97 81       	ldd	r25, Z+7	; 0x07
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <vfprintf+0x39c>
    14a6:	8f ef       	ldi	r24, 0xFF	; 255
    14a8:	9f ef       	ldi	r25, 0xFF	; 255
    14aa:	2c 96       	adiw	r28, 0x0c	; 12
    14ac:	e2 e1       	ldi	r30, 0x12	; 18
    14ae:	0c 94 3e 0b 	jmp	0x167c	; 0x167c <__epilogue_restores__>

000014b2 <calloc>:
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	86 9f       	mul	r24, r22
    14bc:	80 01       	movw	r16, r0
    14be:	87 9f       	mul	r24, r23
    14c0:	10 0d       	add	r17, r0
    14c2:	96 9f       	mul	r25, r22
    14c4:	10 0d       	add	r17, r0
    14c6:	11 24       	eor	r1, r1
    14c8:	c8 01       	movw	r24, r16
    14ca:	0e 94 c2 06 	call	0xd84	; 0xd84 <malloc>
    14ce:	ec 01       	movw	r28, r24
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	29 f0       	breq	.+10     	; 0x14de <calloc+0x2c>
    14d4:	a8 01       	movw	r20, r16
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	70 e0       	ldi	r23, 0x00	; 0
    14da:	0e 94 80 0a 	call	0x1500	; 0x1500 <memset>
    14de:	ce 01       	movw	r24, r28
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	08 95       	ret

000014ea <strnlen_P>:
    14ea:	fc 01       	movw	r30, r24
    14ec:	05 90       	lpm	r0, Z+
    14ee:	61 50       	subi	r22, 0x01	; 1
    14f0:	70 40       	sbci	r23, 0x00	; 0
    14f2:	01 10       	cpse	r0, r1
    14f4:	d8 f7       	brcc	.-10     	; 0x14ec <strnlen_P+0x2>
    14f6:	80 95       	com	r24
    14f8:	90 95       	com	r25
    14fa:	8e 0f       	add	r24, r30
    14fc:	9f 1f       	adc	r25, r31
    14fe:	08 95       	ret

00001500 <memset>:
    1500:	dc 01       	movw	r26, r24
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <memset+0x6>
    1504:	6d 93       	st	X+, r22
    1506:	41 50       	subi	r20, 0x01	; 1
    1508:	50 40       	sbci	r21, 0x00	; 0
    150a:	e0 f7       	brcc	.-8      	; 0x1504 <memset+0x4>
    150c:	08 95       	ret

0000150e <strnlen>:
    150e:	fc 01       	movw	r30, r24
    1510:	61 50       	subi	r22, 0x01	; 1
    1512:	70 40       	sbci	r23, 0x00	; 0
    1514:	01 90       	ld	r0, Z+
    1516:	01 10       	cpse	r0, r1
    1518:	d8 f7       	brcc	.-10     	; 0x1510 <strnlen+0x2>
    151a:	80 95       	com	r24
    151c:	90 95       	com	r25
    151e:	8e 0f       	add	r24, r30
    1520:	9f 1f       	adc	r25, r31
    1522:	08 95       	ret

00001524 <fputc>:
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	18 2f       	mov	r17, r24
    152e:	09 2f       	mov	r16, r25
    1530:	eb 01       	movw	r28, r22
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	81 fd       	sbrc	r24, 1
    1536:	03 c0       	rjmp	.+6      	; 0x153e <fputc+0x1a>
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	9f ef       	ldi	r25, 0xFF	; 255
    153c:	20 c0       	rjmp	.+64     	; 0x157e <fputc+0x5a>
    153e:	82 ff       	sbrs	r24, 2
    1540:	10 c0       	rjmp	.+32     	; 0x1562 <fputc+0x3e>
    1542:	4e 81       	ldd	r20, Y+6	; 0x06
    1544:	5f 81       	ldd	r21, Y+7	; 0x07
    1546:	2c 81       	ldd	r18, Y+4	; 0x04
    1548:	3d 81       	ldd	r19, Y+5	; 0x05
    154a:	42 17       	cp	r20, r18
    154c:	53 07       	cpc	r21, r19
    154e:	7c f4       	brge	.+30     	; 0x156e <fputc+0x4a>
    1550:	e8 81       	ld	r30, Y
    1552:	f9 81       	ldd	r31, Y+1	; 0x01
    1554:	9f 01       	movw	r18, r30
    1556:	2f 5f       	subi	r18, 0xFF	; 255
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	39 83       	std	Y+1, r19	; 0x01
    155c:	28 83       	st	Y, r18
    155e:	10 83       	st	Z, r17
    1560:	06 c0       	rjmp	.+12     	; 0x156e <fputc+0x4a>
    1562:	e8 85       	ldd	r30, Y+8	; 0x08
    1564:	f9 85       	ldd	r31, Y+9	; 0x09
    1566:	81 2f       	mov	r24, r17
    1568:	09 95       	icall
    156a:	89 2b       	or	r24, r25
    156c:	29 f7       	brne	.-54     	; 0x1538 <fputc+0x14>
    156e:	2e 81       	ldd	r18, Y+6	; 0x06
    1570:	3f 81       	ldd	r19, Y+7	; 0x07
    1572:	2f 5f       	subi	r18, 0xFF	; 255
    1574:	3f 4f       	sbci	r19, 0xFF	; 255
    1576:	3f 83       	std	Y+7, r19	; 0x07
    1578:	2e 83       	std	Y+6, r18	; 0x06
    157a:	81 2f       	mov	r24, r17
    157c:	90 2f       	mov	r25, r16
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	08 95       	ret

00001588 <__ultoa_invert>:
    1588:	fa 01       	movw	r30, r20
    158a:	aa 27       	eor	r26, r26
    158c:	28 30       	cpi	r18, 0x08	; 8
    158e:	51 f1       	breq	.+84     	; 0x15e4 <__ultoa_invert+0x5c>
    1590:	20 31       	cpi	r18, 0x10	; 16
    1592:	81 f1       	breq	.+96     	; 0x15f4 <__ultoa_invert+0x6c>
    1594:	e8 94       	clt
    1596:	6f 93       	push	r22
    1598:	6e 7f       	andi	r22, 0xFE	; 254
    159a:	6e 5f       	subi	r22, 0xFE	; 254
    159c:	7f 4f       	sbci	r23, 0xFF	; 255
    159e:	8f 4f       	sbci	r24, 0xFF	; 255
    15a0:	9f 4f       	sbci	r25, 0xFF	; 255
    15a2:	af 4f       	sbci	r26, 0xFF	; 255
    15a4:	b1 e0       	ldi	r27, 0x01	; 1
    15a6:	3e d0       	rcall	.+124    	; 0x1624 <__ultoa_invert+0x9c>
    15a8:	b4 e0       	ldi	r27, 0x04	; 4
    15aa:	3c d0       	rcall	.+120    	; 0x1624 <__ultoa_invert+0x9c>
    15ac:	67 0f       	add	r22, r23
    15ae:	78 1f       	adc	r23, r24
    15b0:	89 1f       	adc	r24, r25
    15b2:	9a 1f       	adc	r25, r26
    15b4:	a1 1d       	adc	r26, r1
    15b6:	68 0f       	add	r22, r24
    15b8:	79 1f       	adc	r23, r25
    15ba:	8a 1f       	adc	r24, r26
    15bc:	91 1d       	adc	r25, r1
    15be:	a1 1d       	adc	r26, r1
    15c0:	6a 0f       	add	r22, r26
    15c2:	71 1d       	adc	r23, r1
    15c4:	81 1d       	adc	r24, r1
    15c6:	91 1d       	adc	r25, r1
    15c8:	a1 1d       	adc	r26, r1
    15ca:	20 d0       	rcall	.+64     	; 0x160c <__ultoa_invert+0x84>
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <__ultoa_invert+0x48>
    15ce:	68 94       	set
    15d0:	3f 91       	pop	r19
    15d2:	2a e0       	ldi	r18, 0x0A	; 10
    15d4:	26 9f       	mul	r18, r22
    15d6:	11 24       	eor	r1, r1
    15d8:	30 19       	sub	r19, r0
    15da:	30 5d       	subi	r19, 0xD0	; 208
    15dc:	31 93       	st	Z+, r19
    15de:	de f6       	brtc	.-74     	; 0x1596 <__ultoa_invert+0xe>
    15e0:	cf 01       	movw	r24, r30
    15e2:	08 95       	ret
    15e4:	46 2f       	mov	r20, r22
    15e6:	47 70       	andi	r20, 0x07	; 7
    15e8:	40 5d       	subi	r20, 0xD0	; 208
    15ea:	41 93       	st	Z+, r20
    15ec:	b3 e0       	ldi	r27, 0x03	; 3
    15ee:	0f d0       	rcall	.+30     	; 0x160e <__ultoa_invert+0x86>
    15f0:	c9 f7       	brne	.-14     	; 0x15e4 <__ultoa_invert+0x5c>
    15f2:	f6 cf       	rjmp	.-20     	; 0x15e0 <__ultoa_invert+0x58>
    15f4:	46 2f       	mov	r20, r22
    15f6:	4f 70       	andi	r20, 0x0F	; 15
    15f8:	40 5d       	subi	r20, 0xD0	; 208
    15fa:	4a 33       	cpi	r20, 0x3A	; 58
    15fc:	18 f0       	brcs	.+6      	; 0x1604 <__ultoa_invert+0x7c>
    15fe:	49 5d       	subi	r20, 0xD9	; 217
    1600:	31 fd       	sbrc	r19, 1
    1602:	40 52       	subi	r20, 0x20	; 32
    1604:	41 93       	st	Z+, r20
    1606:	02 d0       	rcall	.+4      	; 0x160c <__ultoa_invert+0x84>
    1608:	a9 f7       	brne	.-22     	; 0x15f4 <__ultoa_invert+0x6c>
    160a:	ea cf       	rjmp	.-44     	; 0x15e0 <__ultoa_invert+0x58>
    160c:	b4 e0       	ldi	r27, 0x04	; 4
    160e:	a6 95       	lsr	r26
    1610:	97 95       	ror	r25
    1612:	87 95       	ror	r24
    1614:	77 95       	ror	r23
    1616:	67 95       	ror	r22
    1618:	ba 95       	dec	r27
    161a:	c9 f7       	brne	.-14     	; 0x160e <__ultoa_invert+0x86>
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	61 05       	cpc	r22, r1
    1620:	71 05       	cpc	r23, r1
    1622:	08 95       	ret
    1624:	9b 01       	movw	r18, r22
    1626:	ac 01       	movw	r20, r24
    1628:	0a 2e       	mov	r0, r26
    162a:	06 94       	lsr	r0
    162c:	57 95       	ror	r21
    162e:	47 95       	ror	r20
    1630:	37 95       	ror	r19
    1632:	27 95       	ror	r18
    1634:	ba 95       	dec	r27
    1636:	c9 f7       	brne	.-14     	; 0x162a <__ultoa_invert+0xa2>
    1638:	62 0f       	add	r22, r18
    163a:	73 1f       	adc	r23, r19
    163c:	84 1f       	adc	r24, r20
    163e:	95 1f       	adc	r25, r21
    1640:	a0 1d       	adc	r26, r0
    1642:	08 95       	ret

00001644 <__prologue_saves__>:
    1644:	2f 92       	push	r2
    1646:	3f 92       	push	r3
    1648:	4f 92       	push	r4
    164a:	5f 92       	push	r5
    164c:	6f 92       	push	r6
    164e:	7f 92       	push	r7
    1650:	8f 92       	push	r8
    1652:	9f 92       	push	r9
    1654:	af 92       	push	r10
    1656:	bf 92       	push	r11
    1658:	cf 92       	push	r12
    165a:	df 92       	push	r13
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	ca 1b       	sub	r28, r26
    166e:	db 0b       	sbc	r29, r27
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	09 94       	ijmp

0000167c <__epilogue_restores__>:
    167c:	2a 88       	ldd	r2, Y+18	; 0x12
    167e:	39 88       	ldd	r3, Y+17	; 0x11
    1680:	48 88       	ldd	r4, Y+16	; 0x10
    1682:	5f 84       	ldd	r5, Y+15	; 0x0f
    1684:	6e 84       	ldd	r6, Y+14	; 0x0e
    1686:	7d 84       	ldd	r7, Y+13	; 0x0d
    1688:	8c 84       	ldd	r8, Y+12	; 0x0c
    168a:	9b 84       	ldd	r9, Y+11	; 0x0b
    168c:	aa 84       	ldd	r10, Y+10	; 0x0a
    168e:	b9 84       	ldd	r11, Y+9	; 0x09
    1690:	c8 84       	ldd	r12, Y+8	; 0x08
    1692:	df 80       	ldd	r13, Y+7	; 0x07
    1694:	ee 80       	ldd	r14, Y+6	; 0x06
    1696:	fd 80       	ldd	r15, Y+5	; 0x05
    1698:	0c 81       	ldd	r16, Y+4	; 0x04
    169a:	1b 81       	ldd	r17, Y+3	; 0x03
    169c:	aa 81       	ldd	r26, Y+2	; 0x02
    169e:	b9 81       	ldd	r27, Y+1	; 0x01
    16a0:	ce 0f       	add	r28, r30
    16a2:	d1 1d       	adc	r29, r1
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	ed 01       	movw	r28, r26
    16b0:	08 95       	ret

000016b2 <_exit>:
    16b2:	f8 94       	cli

000016b4 <__stop_program>:
    16b4:	ff cf       	rjmp	.-2      	; 0x16b4 <__stop_program>
