
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800100  000013ae  00001442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800294  00800294  000015d6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015d6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001f8  00000000  00000000  00001632  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002229  00000000  00000000  0000182a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e19  00000000  00000000  00003a53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000be2  00000000  00000000  0000486c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004d4  00000000  00000000  00005450  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006c7  00000000  00000000  00005924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001016  00000000  00000000  00005feb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00007001  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <malloc+0xc6>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ee ea       	ldi	r30, 0xAE	; 174
     37c:	f3 e1       	ldi	r31, 0x13	; 19
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 39       	cpi	r26, 0x94	; 148
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a4 e9       	ldi	r26, 0x94	; 148
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	aa 3a       	cpi	r26, 0xAA	; 170
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 11 03 	call	0x622	; 0x622 <main>
     39e:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
     3a6:	30 98       	cbi	0x06, 0	; 6
     3a8:	08 95       	ret

000003aa <ADC_read>:
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3aa:	84 30       	cpi	r24, 0x04	; 4
     3ac:	40 f4       	brcc	.+16     	; 0x3be <ADC_read+0x14>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
     3ae:	8c 5f       	subi	r24, 0xFC	; 252
     3b0:	80 93 00 14 	sts	0x1400, r24
	
	//wait 'til /INTR is low
	 while(test_bit(PINE, PINE0));
     3b4:	28 99       	sbic	0x05, 0	; 5
     3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <ADC_read+0xa>
	//reset interrupt
	inter = 0;
	*/

	//return current value
	return *adc; 
     3b8:	80 91 00 14 	lds	r24, 0x1400
     3bc:	08 95       	ret
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3be:	80 e0       	ldi	r24, 0x00	; 0
	inter = 0;
	*/

	//return current value
	return *adc; 
     3c0:	08 95       	ret

000003c2 <JOY_calibrate>:
	clear_bit(DDRB,PB2);
	clear_bit(SFIOR, PUD);
	JOY_calibrate();
}

void JOY_calibrate(){
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
	max.x = 0;
     3d4:	10 92 94 02 	sts	0x0294, r1
	max.y = 0;
     3d8:	10 92 95 02 	sts	0x0295, r1
	min.x = 255;
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	80 93 98 02 	sts	0x0298, r24
	min.y = 255;
     3e2:	80 93 99 02 	sts	0x0299, r24
	uint8_t x;
	uint8_t y;
	printf("Move the joystick to all extreme points\nPress the joystick when you're done.\n");
     3e6:	8f e2       	ldi	r24, 0x2F	; 47
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 d6 06 	call	0xdac	; 0xdac <puts>
		// Read sensor values
		x = ADC_read(0);
		y = ADC_read(1);
		
		// Calibrate x
		if (min.x > x) min.x = x; 
     3ee:	08 e9       	ldi	r16, 0x98	; 152
     3f0:	12 e0       	ldi	r17, 0x02	; 2
		else if (max.x < x) max.x = x;
     3f2:	0f 2e       	mov	r0, r31
     3f4:	f4 e9       	ldi	r31, 0x94	; 148
     3f6:	cf 2e       	mov	r12, r31
     3f8:	f2 e0       	ldi	r31, 0x02	; 2
     3fa:	df 2e       	mov	r13, r31
     3fc:	f0 2d       	mov	r31, r0
		
		// Calibrate y
		if (min.y > y) min.y = y;
     3fe:	c9 e9       	ldi	r28, 0x99	; 153
     400:	d2 e0       	ldi	r29, 0x02	; 2
		else if (max.y < y) max.y = y;		
     402:	0f 2e       	mov	r0, r31
     404:	f5 e9       	ldi	r31, 0x95	; 149
     406:	ef 2e       	mov	r14, r31
     408:	f2 e0       	ldi	r31, 0x02	; 2
     40a:	ff 2e       	mov	r15, r31
     40c:	f0 2d       	mov	r31, r0
	min.y = 255;
	uint8_t x;
	uint8_t y;
	printf("Move the joystick to all extreme points\nPress the joystick when you're done.\n");
	//check channels 
	while(test_bit(PINB,PINB2)){
     40e:	1c c0       	rjmp	.+56     	; 0x448 <JOY_calibrate+0x86>
		// Read sensor values
		x = ADC_read(0);
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     416:	b8 2e       	mov	r11, r24
		y = ADC_read(1);
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
		
		// Calibrate x
		if (min.x > x) min.x = x; 
     41e:	f8 01       	movw	r30, r16
     420:	90 81       	ld	r25, Z
     422:	b9 16       	cp	r11, r25
     424:	10 f4       	brcc	.+4      	; 0x42a <JOY_calibrate+0x68>
     426:	b0 82       	st	Z, r11
     428:	05 c0       	rjmp	.+10     	; 0x434 <JOY_calibrate+0x72>
		else if (max.x < x) max.x = x;
     42a:	f6 01       	movw	r30, r12
     42c:	90 81       	ld	r25, Z
     42e:	9b 15       	cp	r25, r11
     430:	08 f4       	brcc	.+2      	; 0x434 <JOY_calibrate+0x72>
     432:	b0 82       	st	Z, r11
		
		// Calibrate y
		if (min.y > y) min.y = y;
     434:	98 81       	ld	r25, Y
     436:	89 17       	cp	r24, r25
     438:	10 f4       	brcc	.+4      	; 0x43e <JOY_calibrate+0x7c>
     43a:	88 83       	st	Y, r24
     43c:	05 c0       	rjmp	.+10     	; 0x448 <JOY_calibrate+0x86>
		else if (max.y < y) max.y = y;		
     43e:	f7 01       	movw	r30, r14
     440:	90 81       	ld	r25, Z
     442:	98 17       	cp	r25, r24
     444:	08 f4       	brcc	.+2      	; 0x448 <JOY_calibrate+0x86>
     446:	80 83       	st	Z, r24
	min.y = 255;
	uint8_t x;
	uint8_t y;
	printf("Move the joystick to all extreme points\nPress the joystick when you're done.\n");
	//check channels 
	while(test_bit(PINB,PINB2)){
     448:	b2 99       	sbic	0x16, 2	; 22
     44a:	e2 cf       	rjmp	.-60     	; 0x410 <JOY_calibrate+0x4e>
		if (min.y > y) min.y = y;
		else if (max.y < y) max.y = y;		
	}

	// Find distance from middle to edges (radius)
	rad.x = (max.x - min.x) / 2;
     44c:	e0 91 94 02 	lds	r30, 0x0294
     450:	f0 e0       	ldi	r31, 0x00	; 0
     452:	60 91 98 02 	lds	r22, 0x0298
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	9f 01       	movw	r18, r30
     45a:	26 1b       	sub	r18, r22
     45c:	37 0b       	sbc	r19, r23
     45e:	c9 01       	movw	r24, r18
     460:	99 23       	and	r25, r25
     462:	0c f4       	brge	.+2      	; 0x466 <JOY_calibrate+0xa4>
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	95 95       	asr	r25
     468:	87 95       	ror	r24
     46a:	80 93 96 02 	sts	0x0296, r24
	rad.y = (max.y - min.y) / 2;
     46e:	40 91 95 02 	lds	r20, 0x0295
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	20 91 99 02 	lds	r18, 0x0299
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	da 01       	movw	r26, r20
     47c:	a2 1b       	sub	r26, r18
     47e:	b3 0b       	sbc	r27, r19
     480:	cd 01       	movw	r24, r26
     482:	0a f4       	brpl	.+2      	; 0x486 <JOY_calibrate+0xc4>
     484:	01 96       	adiw	r24, 0x01	; 1
     486:	95 95       	asr	r25
     488:	87 95       	ror	r24
     48a:	80 93 97 02 	sts	0x0297, r24
	
	// Find mid point using edges.
	mid.x = (max.x + min.x) / 2;
     48e:	6e 0f       	add	r22, r30
     490:	7f 1f       	adc	r23, r31
     492:	75 95       	asr	r23
     494:	67 95       	ror	r22
     496:	60 93 9a 02 	sts	0x029A, r22
	mid.y = (max.y + min.y) / 2;
     49a:	24 0f       	add	r18, r20
     49c:	35 1f       	adc	r19, r21
     49e:	35 95       	asr	r19
     4a0:	27 95       	ror	r18
     4a2:	20 93 9b 02 	sts	0x029B, r18
}
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	ff 90       	pop	r15
     4b0:	ef 90       	pop	r14
     4b2:	df 90       	pop	r13
     4b4:	cf 90       	pop	r12
     4b6:	bf 90       	pop	r11
     4b8:	08 95       	ret

000004ba <JOY_init>:
	uint8_t y;
} max, min, rad, mid;

void JOY_init(){
	//set pull-up resistors on PORTB for JOY_button
	set_bit(PORTB,PB2);
     4ba:	c2 9a       	sbi	0x18, 2	; 24
	clear_bit(DDRB,PB2);
     4bc:	ba 98       	cbi	0x17, 2	; 23
	clear_bit(SFIOR, PUD);
     4be:	80 b7       	in	r24, 0x30	; 48
     4c0:	8b 7f       	andi	r24, 0xFB	; 251
     4c2:	80 bf       	out	0x30, r24	; 48
	JOY_calibrate();
     4c4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <JOY_calibrate>
     4c8:	08 95       	ret

000004ca <JOY_button_pressed>:
	mid.x = (max.x + min.x) / 2;
	mid.y = (max.y + min.y) / 2;
}

bool JOY_button_pressed(button b) {
	switch (b) {
     4ca:	81 30       	cpi	r24, 0x01	; 1
     4cc:	39 f0       	breq	.+14     	; 0x4dc <JOY_button_pressed+0x12>
     4ce:	18 f0       	brcs	.+6      	; 0x4d6 <JOY_button_pressed+0xc>
     4d0:	82 30       	cpi	r24, 0x02	; 2
     4d2:	41 f0       	breq	.+16     	; 0x4e4 <JOY_button_pressed+0x1a>
     4d4:	0e c0       	rjmp	.+28     	; 0x4f2 <JOY_button_pressed+0x28>
	case 0:
		if (test_bit(PINB, PINB0)) return true;
     4d6:	86 b3       	in	r24, 0x16	; 22
     4d8:	81 70       	andi	r24, 0x01	; 1
     4da:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return true;
     4dc:	86 b3       	in	r24, 0x16	; 22
     4de:	86 95       	lsr	r24
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	08 95       	ret
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return true;
     4e4:	86 b3       	in	r24, 0x16	; 22
     4e6:	82 fb       	bst	r24, 2
     4e8:	88 27       	eor	r24, r24
     4ea:	80 f9       	bld	r24, 0
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	89 27       	eor	r24, r25
     4f0:	08 95       	ret
		break;
	}
	return false;
     4f2:	80 e0       	ldi	r24, 0x00	; 0
}
     4f4:	08 95       	ret

000004f6 <JOY_getPosition>:

JOY_position_t JOY_getPosition() {
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
	JOY_position_t JOY_position;
	JOY_position.x = (100 * (ADC_read(X_COORD) - mid.x)) / rad.x;
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     502:	28 2f       	mov	r18, r24
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	80 91 9a 02 	lds	r24, 0x029A
     50a:	28 1b       	sub	r18, r24
     50c:	31 09       	sbc	r19, r1
     50e:	14 e6       	ldi	r17, 0x64	; 100
     510:	12 9f       	mul	r17, r18
     512:	c0 01       	movw	r24, r0
     514:	13 9f       	mul	r17, r19
     516:	90 0d       	add	r25, r0
     518:	11 24       	eor	r1, r1
     51a:	60 91 96 02 	lds	r22, 0x0296
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	0e 94 16 05 	call	0xa2c	; 0xa2c <__divmodhi4>
     524:	eb 01       	movw	r28, r22
	JOY_position.y = (100 * (ADC_read(Y_COORD) - mid.y)) / rad.y;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     52c:	28 2f       	mov	r18, r24
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	80 91 9b 02 	lds	r24, 0x029B
     534:	28 1b       	sub	r18, r24
     536:	31 09       	sbc	r19, r1
     538:	12 9f       	mul	r17, r18
     53a:	c0 01       	movw	r24, r0
     53c:	13 9f       	mul	r17, r19
     53e:	90 0d       	add	r25, r0
     540:	11 24       	eor	r1, r1
     542:	60 91 97 02 	lds	r22, 0x0297
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	0e 94 16 05 	call	0xa2c	; 0xa2c <__divmodhi4>
     54c:	9b 01       	movw	r18, r22
	return JOY_position;
     54e:	be 01       	movw	r22, r28
     550:	c9 01       	movw	r24, r18
}
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	08 95       	ret

0000055a <JOY_getDirection>:

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
     55a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <JOY_getPosition>
     55e:	fb 01       	movw	r30, r22
     560:	ac 01       	movw	r20, r24
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     562:	9b 01       	movw	r18, r22
     564:	2c 5f       	subi	r18, 0xFC	; 252
     566:	3f 4f       	sbci	r19, 0xFF	; 255
     568:	29 30       	cpi	r18, 0x09	; 9
     56a:	31 05       	cpc	r19, r1
     56c:	30 f4       	brcc	.+12     	; 0x57a <JOY_getDirection+0x20>
     56e:	9c 01       	movw	r18, r24
     570:	2c 5f       	subi	r18, 0xFC	; 252
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	29 30       	cpi	r18, 0x09	; 9
     576:	31 05       	cpc	r19, r1
     578:	e0 f0       	brcs	.+56     	; 0x5b2 <JOY_getDirection+0x58>

	// The x-coordinate is dominating
	else if (abs(position.x) > abs(position.y)) {
     57a:	db 01       	movw	r26, r22
     57c:	ff 23       	and	r31, r31
     57e:	24 f4       	brge	.+8      	; 0x588 <JOY_getDirection+0x2e>
     580:	aa 27       	eor	r26, r26
     582:	bb 27       	eor	r27, r27
     584:	a6 1b       	sub	r26, r22
     586:	b7 0b       	sbc	r27, r23
     588:	9c 01       	movw	r18, r24
     58a:	55 23       	and	r21, r21
     58c:	24 f4       	brge	.+8      	; 0x596 <JOY_getDirection+0x3c>
     58e:	22 27       	eor	r18, r18
     590:	33 27       	eor	r19, r19
     592:	28 1b       	sub	r18, r24
     594:	39 0b       	sbc	r19, r25
     596:	2a 17       	cp	r18, r26
     598:	3b 07       	cpc	r19, r27
     59a:	34 f4       	brge	.+12     	; 0x5a8 <JOY_getDirection+0x4e>
		// Positive x => RIGHT
		if (position.x > 0) return RIGHT;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	1e 16       	cp	r1, r30
     5a0:	1f 06       	cpc	r1, r31
     5a2:	54 f0       	brlt	.+20     	; 0x5b8 <JOY_getDirection+0x5e>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	08 95       	ret
		else return LEFT;

	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
     5a8:	14 16       	cp	r1, r20
     5aa:	15 06       	cpc	r1, r21
     5ac:	24 f4       	brge	.+8      	; 0x5b6 <JOY_getDirection+0x5c>
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	08 95       	ret

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     5b2:	84 e0       	ldi	r24, 0x04	; 4
     5b4:	08 95       	ret
	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
		// Negative y => DOWN
		else return DOWN;
     5b6:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     5b8:	08 95       	ret

000005ba <initialize>:
#include <stdint.h>
#include <stdio.h>


void initialize(void){
	usart_init(MYUBRR);
     5ba:	8f e1       	ldi	r24, 0x1F	; 31
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 09 05 	call	0xa12	; 0xa12 <usart_init>
	SRAM_init();
     5c2:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <SRAM_init>
	ADC_init();
     5c6:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	JOY_init();
     5ca:	0e 94 5d 02 	call	0x4ba	; 0x4ba <JOY_init>
	OLED_init();
     5ce:	0e 94 88 03 	call	0x710	; 0x710 <OLED_init>
	MENU_init();
     5d2:	0e 94 4f 04 	call	0x89e	; 0x89e <MENU_init>
     5d6:	08 95       	ret

000005d8 <main_menu>:
	//MENU_test();
	
}

void main_menu() {
	if (JOY_getDirection() == DOWN) {
     5d8:	0e 94 ad 02 	call	0x55a	; 0x55a <JOY_getDirection>
     5dc:	83 30       	cpi	r24, 0x03	; 3
     5de:	19 f4       	brne	.+6      	; 0x5e6 <main_menu+0xe>
		MENU_select_next();
     5e0:	0e 94 a5 04 	call	0x94a	; 0x94a <MENU_select_next>
     5e4:	06 c0       	rjmp	.+12     	; 0x5f2 <main_menu+0x1a>
	} else if (JOY_getDirection() == UP) { 
     5e6:	0e 94 ad 02 	call	0x55a	; 0x55a <JOY_getDirection>
     5ea:	82 30       	cpi	r24, 0x02	; 2
     5ec:	11 f4       	brne	.+4      	; 0x5f2 <main_menu+0x1a>
		MENU_select_prev();
     5ee:	0e 94 b6 04 	call	0x96c	; 0x96c <MENU_select_prev>
	} 
	
	if (JOY_button_pressed(JOY_BUTTON)) {
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	0e 94 65 02 	call	0x4ca	; 0x4ca <JOY_button_pressed>
     5f8:	88 23       	and	r24, r24
     5fa:	19 f0       	breq	.+6      	; 0x602 <main_menu+0x2a>
		MENU_enter_selection();
     5fc:	0e 94 c7 04 	call	0x98e	; 0x98e <MENU_enter_selection>
     600:	06 c0       	rjmp	.+12     	; 0x60e <main_menu+0x36>
	}
	
	else if (JOY_button_pressed(LEFT_BUTTON)) {
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	0e 94 65 02 	call	0x4ca	; 0x4ca <JOY_button_pressed>
     608:	81 11       	cpse	r24, r1
		MENU_go_back();
     60a:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <MENU_go_back>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     60e:	2f ef       	ldi	r18, 0xFF	; 255
     610:	8f e7       	ldi	r24, 0x7F	; 127
     612:	94 e0       	ldi	r25, 0x04	; 4
     614:	21 50       	subi	r18, 0x01	; 1
     616:	80 40       	sbci	r24, 0x00	; 0
     618:	90 40       	sbci	r25, 0x00	; 0
     61a:	e1 f7       	brne	.-8      	; 0x614 <main_menu+0x3c>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <main_menu+0x46>
     61e:	00 00       	nop
     620:	08 95       	ret

00000622 <main>:
	// Make sure the selection doesn't move multiple places at once.
	_delay_ms(300);
}

int main(void) {
	initialize(); 	
     622:	0e 94 dd 02 	call	0x5ba	; 0x5ba <initialize>
	
	test();
	
	while(1) {
		main_menu();
     626:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <main_menu>
     62a:	fd cf       	rjmp	.-6      	; 0x626 <main+0x4>

0000062c <OLED_print_char>:
	write_cmd(0x81);
	write_cmd(lvl);
}

void OLED_print_char(char c){
	if (c == '\0') return;
     62c:	88 23       	and	r24, r24
     62e:	f9 f0       	breq	.+62     	; 0x66e <OLED_print_char+0x42>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
     630:	e8 2f       	mov	r30, r24
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	b0 97       	sbiw	r30, 0x20	; 32
	for (int col = 0; col < FONT_SIZE; col++){
     636:	80 91 06 01 	lds	r24, 0x0106
     63a:	88 23       	and	r24, r24
     63c:	c1 f0       	breq	.+48     	; 0x66e <OLED_print_char+0x42>
     63e:	ee 0f       	add	r30, r30
     640:	ff 1f       	adc	r31, r31
     642:	ee 0f       	add	r30, r30
     644:	ff 1f       	adc	r31, r31
     646:	ee 0f       	add	r30, r30
     648:	ff 1f       	adc	r31, r31
     64a:	e0 59       	subi	r30, 0x90	; 144
     64c:	ff 4f       	sbci	r31, 0xFF	; 255
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
		write_data(pgm_read_byte(&font8[letter_index][col]));
     652:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     654:	a0 91 09 01 	lds	r26, 0x0109
     658:	b0 91 0a 01 	lds	r27, 0x010A
     65c:	2c 93       	st	X, r18

void OLED_print_char(char c){
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++){
     65e:	01 96       	adiw	r24, 0x01	; 1
     660:	31 96       	adiw	r30, 0x01	; 1
     662:	20 91 06 01 	lds	r18, 0x0106
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	82 17       	cp	r24, r18
     66a:	93 07       	cpc	r25, r19
     66c:	94 f3       	brlt	.-28     	; 0x652 <OLED_print_char+0x26>
     66e:	08 95       	ret

00000670 <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7){
     670:	88 30       	cpi	r24, 0x08	; 8
     672:	30 f4       	brcc	.+12     	; 0x680 <OLED_goto_line+0x10>
		return;
	}
	write_cmd(0xB0+line);
     674:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     676:	e0 91 07 01 	lds	r30, 0x0107
     67a:	f0 91 08 01 	lds	r31, 0x0108
     67e:	80 83       	st	Z, r24
     680:	08 95       	ret

00000682 <OLED_goto_column>:
	}
	write_cmd(0xB0+line);
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
     682:	88 23       	and	r24, r24
     684:	7c f0       	brlt	.+30     	; 0x6a4 <OLED_goto_column+0x22>
		return;
	}
	write_cmd(0x00+column%16); //lower column register
     686:	98 2f       	mov	r25, r24
     688:	9f 70       	andi	r25, 0x0F	; 15
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     68a:	e0 91 07 01 	lds	r30, 0x0107
     68e:	f0 91 08 01 	lds	r31, 0x0108
     692:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
		return;
	}
	write_cmd(0x00+column%16); //lower column register
	write_cmd(0x10+column/16); //higher column register
     694:	82 95       	swap	r24
     696:	8f 70       	andi	r24, 0x0F	; 15
     698:	80 5f       	subi	r24, 0xF0	; 240
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     69a:	e0 91 07 01 	lds	r30, 0x0107
     69e:	f0 91 08 01 	lds	r31, 0x0108
     6a2:	80 83       	st	Z, r24
     6a4:	08 95       	ret

000006a6 <OLED_pos>:
		write_data(0x00);
		
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
     6a6:	cf 93       	push	r28
     6a8:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
     6aa:	88 30       	cpi	r24, 0x08	; 8
     6ac:	10 f4       	brcc	.+4      	; 0x6b2 <OLED_pos+0xc>
     6ae:	66 23       	and	r22, r22
     6b0:	4c f4       	brge	.+18     	; 0x6c4 <OLED_pos+0x1e>
		printf("Out of range in OLED_pos()");
     6b2:	8d ef       	ldi	r24, 0xFD	; 253
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	9f 93       	push	r25
     6b8:	8f 93       	push	r24
     6ba:	0e 94 c2 06 	call	0xd84	; 0xd84 <printf>
		return; 
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	05 c0       	rjmp	.+10     	; 0x6ce <OLED_pos+0x28>
	}
	
	OLED_goto_line(line);
     6c4:	0e 94 38 03 	call	0x670	; 0x670 <OLED_goto_line>
	OLED_goto_column(column);
     6c8:	8c 2f       	mov	r24, r28
     6ca:	0e 94 41 03 	call	0x682	; 0x682 <OLED_goto_column>
}
     6ce:	cf 91       	pop	r28
     6d0:	08 95       	ret

000006d2 <OLED_home>:




void OLED_home(){
	OLED_pos(0,0);
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <OLED_pos>
     6da:	08 95       	ret

000006dc <OLED_clear_line>:
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	0e 94 53 03 	call	0x6a6	; 0x6a6 <OLED_pos>
     6e2:	80 e8       	ldi	r24, 0x80	; 128
     6e4:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     6e6:	e0 91 09 01 	lds	r30, 0x0109
     6ea:	f0 91 0a 01 	lds	r31, 0x010A
     6ee:	10 82       	st	Z, r1
     6f0:	01 97       	sbiw	r24, 0x01	; 1
	OLED_pos(0,0);
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
     6f2:	00 97       	sbiw	r24, 0x00	; 0
     6f4:	c1 f7       	brne	.-16     	; 0x6e6 <OLED_clear_line+0xa>
		write_data(0x00);
		
	}
}
     6f6:	08 95       	ret

000006f8 <OLED_reset>:
	
}



void OLED_reset() {
     6f8:	cf 93       	push	r28
     6fa:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
     6fc:	8c 2f       	mov	r24, r28
     6fe:	0e 94 6e 03 	call	0x6dc	; 0x6dc <OLED_clear_line>
     702:	cf 5f       	subi	r28, 0xFF	; 255
}



void OLED_reset() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
     704:	c8 30       	cpi	r28, 0x08	; 8
     706:	d1 f7       	brne	.-12     	; 0x6fc <OLED_reset+0x4>
		OLED_clear_line(page);
	}
	OLED_home();
     708:	0e 94 69 03 	call	0x6d2	; 0x6d2 <OLED_home>
}
     70c:	cf 91       	pop	r28
     70e:	08 95       	ret

00000710 <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	66 97       	sbiw	r28, 0x16	; 22
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
	
	
	const char addresses[] = {
     724:	86 e1       	ldi	r24, 0x16	; 22
     726:	e9 e1       	ldi	r30, 0x19	; 25
     728:	f1 e0       	ldi	r31, 0x01	; 1
     72a:	de 01       	movw	r26, r28
     72c:	11 96       	adiw	r26, 0x01	; 1
     72e:	01 90       	ld	r0, Z+
     730:	0d 92       	st	X+, r0
     732:	8a 95       	dec	r24
     734:	e1 f7       	brne	.-8      	; 0x72e <OLED_init+0x1e>
     736:	fe 01       	movw	r30, r28
     738:	31 96       	adiw	r30, 0x01	; 1
     73a:	ce 01       	movw	r24, r28
     73c:	47 96       	adiw	r24, 0x17	; 23
		0xa6, //set normal display
		0xaf //display on
	};
	
	for (int i = 0; i < sizeof(addresses)/sizeof(addresses[0]); i++) {
		write_cmd(addresses[i]);
     73e:	21 91       	ld	r18, Z+
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     740:	a0 91 07 01 	lds	r26, 0x0107
     744:	b0 91 08 01 	lds	r27, 0x0108
     748:	2c 93       	st	X, r18
		0xa4, //out follows RAM content
		0xa6, //set normal display
		0xaf //display on
	};
	
	for (int i = 0; i < sizeof(addresses)/sizeof(addresses[0]); i++) {
     74a:	e8 17       	cp	r30, r24
     74c:	f9 07       	cpc	r31, r25
     74e:	b9 f7       	brne	.-18     	; 0x73e <OLED_init+0x2e>
		write_cmd(addresses[i]);
	}
	
	OLED_reset();
     750:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <OLED_reset>
	
}
     754:	66 96       	adiw	r28, 0x16	; 22
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     766:	e0 91 09 01 	lds	r30, 0x0109
     76a:	f0 91 0a 01 	lds	r31, 0x010A
     76e:	88 e1       	ldi	r24, 0x18	; 24
     770:	80 83       	st	Z, r24
     772:	e0 91 09 01 	lds	r30, 0x0109
     776:	f0 91 0a 01 	lds	r31, 0x010A
     77a:	80 83       	st	Z, r24
     77c:	e0 91 09 01 	lds	r30, 0x0109
     780:	f0 91 0a 01 	lds	r31, 0x010A
     784:	9e e7       	ldi	r25, 0x7E	; 126
     786:	90 83       	st	Z, r25
     788:	e0 91 09 01 	lds	r30, 0x0109
     78c:	f0 91 0a 01 	lds	r31, 0x010A
     790:	9c e3       	ldi	r25, 0x3C	; 60
     792:	90 83       	st	Z, r25
     794:	e0 91 09 01 	lds	r30, 0x0109
     798:	f0 91 0a 01 	lds	r31, 0x010A
     79c:	80 83       	st	Z, r24
     79e:	08 95       	ret

000007a0 <add_node>:

volatile menu_node* current_node;
volatile menu_node* selected_node;


menu_node* add_node(menu_node* parent_node, char* name){
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	ec 01       	movw	r28, r24
     7aa:	8b 01       	movw	r16, r22
	
	// Create the new node
	menu_node* new_node = (menu_node*) malloc(sizeof(menu_node));
     7ac:	8a e0       	ldi	r24, 0x0A	; 10
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <malloc>
     7b4:	dc 01       	movw	r26, r24
	new_node->name = name;
     7b6:	11 96       	adiw	r26, 0x01	; 1
     7b8:	1c 93       	st	X, r17
     7ba:	0e 93       	st	-X, r16
	new_node->parent_node = parent_node;
     7bc:	13 96       	adiw	r26, 0x03	; 3
     7be:	dc 93       	st	X, r29
     7c0:	ce 93       	st	-X, r28
     7c2:	12 97       	sbiw	r26, 0x02	; 2
	new_node->child_node = NULL;  // A new node has no children
     7c4:	15 96       	adiw	r26, 0x05	; 5
     7c6:	1c 92       	st	X, r1
     7c8:	1e 92       	st	-X, r1
     7ca:	14 97       	sbiw	r26, 0x04	; 4
	new_node->next_sibling_node = NULL;  // The new child is the last child
     7cc:	17 96       	adiw	r26, 0x07	; 7
     7ce:	1c 92       	st	X, r1
     7d0:	1e 92       	st	-X, r1
     7d2:	16 97       	sbiw	r26, 0x06	; 6
	new_node->prev_sibling_node = NULL;
     7d4:	19 96       	adiw	r26, 0x09	; 9
     7d6:	1c 92       	st	X, r1
     7d8:	1e 92       	st	-X, r1
     7da:	18 97       	sbiw	r26, 0x08	; 8
	
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_node;
     7dc:	20 97       	sbiw	r28, 0x00	; 0
     7de:	a1 f0       	breq	.+40     	; 0x808 <add_node+0x68>
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
     7e0:	ec 81       	ldd	r30, Y+4	; 0x04
     7e2:	fd 81       	ldd	r31, Y+5	; 0x05
     7e4:	30 97       	sbiw	r30, 0x00	; 0
     7e6:	19 f4       	brne	.+6      	; 0x7ee <add_node+0x4e>
		parent_node->child_node = new_node;
     7e8:	9d 83       	std	Y+5, r25	; 0x05
     7ea:	8c 83       	std	Y+4, r24	; 0x04
     7ec:	0d c0       	rjmp	.+26     	; 0x808 <add_node+0x68>
	else {
		// The first child of the parent
		menu_node* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
     7ee:	26 81       	ldd	r18, Z+6	; 0x06
     7f0:	37 81       	ldd	r19, Z+7	; 0x07
     7f2:	21 15       	cp	r18, r1
     7f4:	31 05       	cpc	r19, r1
     7f6:	11 f0       	breq	.+4      	; 0x7fc <add_node+0x5c>
			temp_node = temp_node->next_sibling_node;
     7f8:	f9 01       	movw	r30, r18
     7fa:	f9 cf       	rjmp	.-14     	; 0x7ee <add_node+0x4e>
		}
		
		// Bind the new node to the current last child to become the new last child.
		temp_node->next_sibling_node = new_node;
     7fc:	b7 83       	std	Z+7, r27	; 0x07
     7fe:	a6 83       	std	Z+6, r26	; 0x06
		new_node->prev_sibling_node = temp_node;
     800:	19 96       	adiw	r26, 0x09	; 9
     802:	fc 93       	st	X, r31
     804:	ee 93       	st	-X, r30
     806:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	// Parent/child/sibling bindings complete. Return the new node.
	return new_node;
}
     808:	cd 01       	movw	r24, r26
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	08 95       	ret

00000814 <MENU_draw_current_menu>:
	current_node = current_node->parent_node;
	selected_node = current_node->child_node;
	MENU_draw_current_menu();
}

void MENU_draw_current_menu() {
     814:	df 92       	push	r13
     816:	ef 92       	push	r14
     818:	ff 92       	push	r15
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
	OLED_reset();
     822:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <OLED_reset>
	int output_row = 0;
	
	menu_node* temp_node = current_node->child_node;
     826:	e0 91 9c 02 	lds	r30, 0x029C
     82a:	f0 91 9d 02 	lds	r31, 0x029D
     82e:	c4 81       	ldd	r28, Z+4	; 0x04
     830:	d5 81       	ldd	r29, Z+5	; 0x05
	
	while( temp_node != NULL){
     832:	20 97       	sbiw	r28, 0x00	; 0
     834:	61 f1       	breq	.+88     	; 0x88e <MENU_draw_current_menu+0x7a>
     836:	d1 2c       	mov	r13, r1
		OLED_pos(output_row++, 0);
		if (temp_node == selected_node) {
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
     838:	0f 2e       	mov	r0, r31
     83a:	f8 e2       	ldi	r31, 0x28	; 40
     83c:	ef 2e       	mov	r14, r31
     83e:	f2 e0       	ldi	r31, 0x02	; 2
     840:	ff 2e       	mov	r15, r31
     842:	f0 2d       	mov	r31, r0
     844:	0b e0       	ldi	r16, 0x0B	; 11
     846:	11 e0       	ldi	r17, 0x01	; 1
	int output_row = 0;
	
	menu_node* temp_node = current_node->child_node;
	
	while( temp_node != NULL){
		OLED_pos(output_row++, 0);
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	8d 2d       	mov	r24, r13
     84c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <OLED_pos>
		if (temp_node == selected_node) {
     850:	20 91 9e 02 	lds	r18, 0x029E
     854:	30 91 9f 02 	lds	r19, 0x029F
     858:	c2 17       	cp	r28, r18
     85a:	d3 07       	cpc	r29, r19
     85c:	11 f4       	brne	.+4      	; 0x862 <MENU_draw_current_menu+0x4e>
			OLED_print_arrow();
     85e:	0e 94 b3 03 	call	0x766	; 0x766 <OLED_print_arrow>
		}
		fprintf(OLED, " %s", temp_node->name);
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	8f 93       	push	r24
     866:	88 81       	ld	r24, Y
     868:	8f 93       	push	r24
     86a:	ff 92       	push	r15
     86c:	ef 92       	push	r14
     86e:	1f 93       	push	r17
     870:	0f 93       	push	r16
     872:	0e 94 b0 06 	call	0xd60	; 0xd60 <fprintf>
		temp_node = temp_node -> next_sibling_node;
     876:	0e 80       	ldd	r0, Y+6	; 0x06
     878:	df 81       	ldd	r29, Y+7	; 0x07
     87a:	c0 2d       	mov	r28, r0
     87c:	d3 94       	inc	r13
	OLED_reset();
	int output_row = 0;
	
	menu_node* temp_node = current_node->child_node;
	
	while( temp_node != NULL){
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	20 97       	sbiw	r28, 0x00	; 0
     88c:	e9 f6       	brne	.-70     	; 0x848 <MENU_draw_current_menu+0x34>
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	08 95       	ret

0000089e <MENU_init>:
	// Parent/child/sibling bindings complete. Return the new node.
	return new_node;
}


void MENU_init(){
     89e:	cf 92       	push	r12
     8a0:	df 92       	push	r13
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
	menu_node* main_menu = add_node(NULL, "Main menu");
     8ae:	6c e2       	ldi	r22, 0x2C	; 44
     8b0:	72 e0       	ldi	r23, 0x02	; 2
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <add_node>
     8ba:	ec 01       	movw	r28, r24
	
	// Main menu
	menu_node* play = add_node(main_menu, "Play game");
     8bc:	66 e3       	ldi	r22, 0x36	; 54
     8be:	72 e0       	ldi	r23, 0x02	; 2
     8c0:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <add_node>
     8c4:	6c 01       	movw	r12, r24
	menu_node* highscore = add_node(main_menu, "Highscore");
     8c6:	60 e4       	ldi	r22, 0x40	; 64
     8c8:	72 e0       	ldi	r23, 0x02	; 2
     8ca:	ce 01       	movw	r24, r28
     8cc:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <add_node>
	menu_node* settings = add_node(main_menu, "Settings");
     8d0:	6a e4       	ldi	r22, 0x4A	; 74
     8d2:	72 e0       	ldi	r23, 0x02	; 2
     8d4:	ce 01       	movw	r24, r28
     8d6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <add_node>
     8da:	7c 01       	movw	r14, r24
	menu_node* extras = add_node(main_menu, "Extra features");
     8dc:	69 e1       	ldi	r22, 0x19	; 25
     8de:	72 e0       	ldi	r23, 0x02	; 2
     8e0:	ce 01       	movw	r24, r28
     8e2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <add_node>
     8e6:	8c 01       	movw	r16, r24
	
	// Sub-menu settings
	menu_node* brightness = add_node(settings, "Brightness");
     8e8:	63 e5       	ldi	r22, 0x53	; 83
     8ea:	72 e0       	ldi	r23, 0x02	; 2
     8ec:	c7 01       	movw	r24, r14
     8ee:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <add_node>
	menu_node* font = add_node(settings, "Set font");
     8f2:	6e e5       	ldi	r22, 0x5E	; 94
     8f4:	72 e0       	ldi	r23, 0x02	; 2
     8f6:	c7 01       	movw	r24, r14
     8f8:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <add_node>
	
	// Sub-menu extras
	menu_node* keyboard = add_node(extras, "Keyboard");
     8fc:	67 e6       	ldi	r22, 0x67	; 103
     8fe:	72 e0       	ldi	r23, 0x02	; 2
     900:	c8 01       	movw	r24, r16
     902:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <add_node>
	menu_node* mandelbrot = add_node(extras, "Mandelbrot");
     906:	60 e7       	ldi	r22, 0x70	; 112
     908:	72 e0       	ldi	r23, 0x02	; 2
     90a:	c8 01       	movw	r24, r16
     90c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <add_node>
	menu_node* pong = add_node(extras, "Play pong");
     910:	6b e7       	ldi	r22, 0x7B	; 123
     912:	72 e0       	ldi	r23, 0x02	; 2
     914:	c8 01       	movw	r24, r16
     916:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <add_node>
	menu_node* rcube = add_node(extras, "rotating cube");
     91a:	65 e8       	ldi	r22, 0x85	; 133
     91c:	72 e0       	ldi	r23, 0x02	; 2
     91e:	c8 01       	movw	r24, r16
     920:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <add_node>
	
	current_node = main_menu;
     924:	d0 93 9d 02 	sts	0x029D, r29
     928:	c0 93 9c 02 	sts	0x029C, r28
	selected_node = play;
     92c:	d0 92 9f 02 	sts	0x029F, r13
     930:	c0 92 9e 02 	sts	0x029E, r12
	MENU_draw_current_menu();
     934:	0e 94 0a 04 	call	0x814	; 0x814 <MENU_draw_current_menu>
}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	08 95       	ret

0000094a <MENU_select_next>:

void MENU_select_next() {
	if (selected_node -> next_sibling_node != NULL) {
     94a:	e0 91 9e 02 	lds	r30, 0x029E
     94e:	f0 91 9f 02 	lds	r31, 0x029F
     952:	86 81       	ldd	r24, Z+6	; 0x06
     954:	97 81       	ldd	r25, Z+7	; 0x07
     956:	89 2b       	or	r24, r25
     958:	41 f0       	breq	.+16     	; 0x96a <MENU_select_next+0x20>
		selected_node = selected_node -> next_sibling_node;
     95a:	86 81       	ldd	r24, Z+6	; 0x06
     95c:	97 81       	ldd	r25, Z+7	; 0x07
     95e:	90 93 9f 02 	sts	0x029F, r25
     962:	80 93 9e 02 	sts	0x029E, r24
		MENU_draw_current_menu();
     966:	0e 94 0a 04 	call	0x814	; 0x814 <MENU_draw_current_menu>
     96a:	08 95       	ret

0000096c <MENU_select_prev>:
	}
}

void MENU_select_prev() {
	if (selected_node -> prev_sibling_node != NULL) {
     96c:	e0 91 9e 02 	lds	r30, 0x029E
     970:	f0 91 9f 02 	lds	r31, 0x029F
     974:	80 85       	ldd	r24, Z+8	; 0x08
     976:	91 85       	ldd	r25, Z+9	; 0x09
     978:	89 2b       	or	r24, r25
     97a:	41 f0       	breq	.+16     	; 0x98c <MENU_select_prev+0x20>
		selected_node = selected_node -> prev_sibling_node;
     97c:	80 85       	ldd	r24, Z+8	; 0x08
     97e:	91 85       	ldd	r25, Z+9	; 0x09
     980:	90 93 9f 02 	sts	0x029F, r25
     984:	80 93 9e 02 	sts	0x029E, r24
		MENU_draw_current_menu();
     988:	0e 94 0a 04 	call	0x814	; 0x814 <MENU_draw_current_menu>
     98c:	08 95       	ret

0000098e <MENU_enter_selection>:
	}
}

void MENU_enter_selection() {
	if (selected_node->child_node == NULL) return;
     98e:	e0 91 9e 02 	lds	r30, 0x029E
     992:	f0 91 9f 02 	lds	r31, 0x029F
     996:	84 81       	ldd	r24, Z+4	; 0x04
     998:	95 81       	ldd	r25, Z+5	; 0x05
     99a:	89 2b       	or	r24, r25
     99c:	61 f0       	breq	.+24     	; 0x9b6 <MENU_enter_selection+0x28>
	
	current_node = selected_node;
     99e:	f0 93 9d 02 	sts	0x029D, r31
     9a2:	e0 93 9c 02 	sts	0x029C, r30
	selected_node = current_node->child_node;
     9a6:	84 81       	ldd	r24, Z+4	; 0x04
     9a8:	95 81       	ldd	r25, Z+5	; 0x05
     9aa:	90 93 9f 02 	sts	0x029F, r25
     9ae:	80 93 9e 02 	sts	0x029E, r24
	MENU_draw_current_menu();
     9b2:	0e 94 0a 04 	call	0x814	; 0x814 <MENU_draw_current_menu>
     9b6:	08 95       	ret

000009b8 <MENU_go_back>:
}

void MENU_go_back() {
	if (current_node->parent_node == NULL) return;
     9b8:	e0 91 9c 02 	lds	r30, 0x029C
     9bc:	f0 91 9d 02 	lds	r31, 0x029D
     9c0:	82 81       	ldd	r24, Z+2	; 0x02
     9c2:	93 81       	ldd	r25, Z+3	; 0x03
     9c4:	89 2b       	or	r24, r25
     9c6:	79 f0       	breq	.+30     	; 0x9e6 <MENU_go_back+0x2e>
	
	current_node = current_node->parent_node;
     9c8:	02 80       	ldd	r0, Z+2	; 0x02
     9ca:	f3 81       	ldd	r31, Z+3	; 0x03
     9cc:	e0 2d       	mov	r30, r0
     9ce:	f0 93 9d 02 	sts	0x029D, r31
     9d2:	e0 93 9c 02 	sts	0x029C, r30
	selected_node = current_node->child_node;
     9d6:	84 81       	ldd	r24, Z+4	; 0x04
     9d8:	95 81       	ldd	r25, Z+5	; 0x05
     9da:	90 93 9f 02 	sts	0x029F, r25
     9de:	80 93 9e 02 	sts	0x029E, r24
	MENU_draw_current_menu();
     9e2:	0e 94 0a 04 	call	0x814	; 0x814 <MENU_draw_current_menu>
     9e6:	08 95       	ret

000009e8 <SRAM_init>:



void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
     9e8:	85 b7       	in	r24, 0x35	; 53
     9ea:	80 68       	ori	r24, 0x80	; 128
     9ec:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
     9ee:	80 b7       	in	r24, 0x30	; 48
     9f0:	80 62       	ori	r24, 0x20	; 32
     9f2:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
     9f4:	80 b7       	in	r24, 0x30	; 48
     9f6:	8f 7e       	andi	r24, 0xEF	; 239
     9f8:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
     9fa:	80 b7       	in	r24, 0x30	; 48
     9fc:	87 7f       	andi	r24, 0xF7	; 247
     9fe:	80 bf       	out	0x30, r24	; 48
     a00:	08 95       	ret

00000a02 <usart_transmit_to_computer>:
}


void usart_transmit_to_computer(unsigned int data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
     a02:	5d 9b       	sbis	0x0b, 5	; 11
     a04:	fe cf       	rjmp	.-4      	; 0xa02 <usart_transmit_to_computer>
	;
	
	/* Put data into buffer (sends the data) */
	UDR0 = data;
     a06:	8c b9       	out	0x0c, r24	; 12
     a08:	08 95       	ret

00000a0a <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
     a0a:	5f 9b       	sbis	0x0b, 7	; 11
     a0c:	fe cf       	rjmp	.-4      	; 0xa0a <usart_receive_from_computer>
	;
	
	/* Get and return data from buffer */
	return UDR0;
     a0e:	8c b1       	in	r24, 0x0c	; 12
}
     a10:	08 95       	ret

00000a12 <usart_init>:
#include <avr/io.h>


void usart_init(unsigned int ubbr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubbr>>8);
     a12:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
     a14:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     a16:	88 e1       	ldi	r24, 0x18	; 24
     a18:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     a1a:	8e e8       	ldi	r24, 0x8E	; 142
     a1c:	80 bd       	out	0x20, r24	; 32
	
	
	/* Enable printf-thing */
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
     a1e:	65 e0       	ldi	r22, 0x05	; 5
     a20:	75 e0       	ldi	r23, 0x05	; 5
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	95 e0       	ldi	r25, 0x05	; 5
     a26:	0e 94 65 06 	call	0xcca	; 0xcca <fdevopen>
     a2a:	08 95       	ret

00000a2c <__divmodhi4>:
     a2c:	97 fb       	bst	r25, 7
     a2e:	07 2e       	mov	r0, r23
     a30:	16 f4       	brtc	.+4      	; 0xa36 <__divmodhi4+0xa>
     a32:	00 94       	com	r0
     a34:	07 d0       	rcall	.+14     	; 0xa44 <__divmodhi4_neg1>
     a36:	77 fd       	sbrc	r23, 7
     a38:	09 d0       	rcall	.+18     	; 0xa4c <__divmodhi4_neg2>
     a3a:	0e 94 2a 05 	call	0xa54	; 0xa54 <__udivmodhi4>
     a3e:	07 fc       	sbrc	r0, 7
     a40:	05 d0       	rcall	.+10     	; 0xa4c <__divmodhi4_neg2>
     a42:	3e f4       	brtc	.+14     	; 0xa52 <__divmodhi4_exit>

00000a44 <__divmodhi4_neg1>:
     a44:	90 95       	com	r25
     a46:	81 95       	neg	r24
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	08 95       	ret

00000a4c <__divmodhi4_neg2>:
     a4c:	70 95       	com	r23
     a4e:	61 95       	neg	r22
     a50:	7f 4f       	sbci	r23, 0xFF	; 255

00000a52 <__divmodhi4_exit>:
     a52:	08 95       	ret

00000a54 <__udivmodhi4>:
     a54:	aa 1b       	sub	r26, r26
     a56:	bb 1b       	sub	r27, r27
     a58:	51 e1       	ldi	r21, 0x11	; 17
     a5a:	07 c0       	rjmp	.+14     	; 0xa6a <__udivmodhi4_ep>

00000a5c <__udivmodhi4_loop>:
     a5c:	aa 1f       	adc	r26, r26
     a5e:	bb 1f       	adc	r27, r27
     a60:	a6 17       	cp	r26, r22
     a62:	b7 07       	cpc	r27, r23
     a64:	10 f0       	brcs	.+4      	; 0xa6a <__udivmodhi4_ep>
     a66:	a6 1b       	sub	r26, r22
     a68:	b7 0b       	sbc	r27, r23

00000a6a <__udivmodhi4_ep>:
     a6a:	88 1f       	adc	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	5a 95       	dec	r21
     a70:	a9 f7       	brne	.-22     	; 0xa5c <__udivmodhi4_loop>
     a72:	80 95       	com	r24
     a74:	90 95       	com	r25
     a76:	bc 01       	movw	r22, r24
     a78:	cd 01       	movw	r24, r26
     a7a:	08 95       	ret

00000a7c <malloc>:
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	82 30       	cpi	r24, 0x02	; 2
     a82:	91 05       	cpc	r25, r1
     a84:	10 f4       	brcc	.+4      	; 0xa8a <malloc+0xe>
     a86:	82 e0       	ldi	r24, 0x02	; 2
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	e0 91 a2 02 	lds	r30, 0x02A2
     a8e:	f0 91 a3 02 	lds	r31, 0x02A3
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	a0 e0       	ldi	r26, 0x00	; 0
     a98:	b0 e0       	ldi	r27, 0x00	; 0
     a9a:	30 97       	sbiw	r30, 0x00	; 0
     a9c:	39 f1       	breq	.+78     	; 0xaec <malloc+0x70>
     a9e:	40 81       	ld	r20, Z
     aa0:	51 81       	ldd	r21, Z+1	; 0x01
     aa2:	48 17       	cp	r20, r24
     aa4:	59 07       	cpc	r21, r25
     aa6:	b8 f0       	brcs	.+46     	; 0xad6 <malloc+0x5a>
     aa8:	48 17       	cp	r20, r24
     aaa:	59 07       	cpc	r21, r25
     aac:	71 f4       	brne	.+28     	; 0xaca <malloc+0x4e>
     aae:	82 81       	ldd	r24, Z+2	; 0x02
     ab0:	93 81       	ldd	r25, Z+3	; 0x03
     ab2:	10 97       	sbiw	r26, 0x00	; 0
     ab4:	29 f0       	breq	.+10     	; 0xac0 <malloc+0x44>
     ab6:	13 96       	adiw	r26, 0x03	; 3
     ab8:	9c 93       	st	X, r25
     aba:	8e 93       	st	-X, r24
     abc:	12 97       	sbiw	r26, 0x02	; 2
     abe:	2c c0       	rjmp	.+88     	; 0xb18 <malloc+0x9c>
     ac0:	90 93 a3 02 	sts	0x02A3, r25
     ac4:	80 93 a2 02 	sts	0x02A2, r24
     ac8:	27 c0       	rjmp	.+78     	; 0xb18 <malloc+0x9c>
     aca:	21 15       	cp	r18, r1
     acc:	31 05       	cpc	r19, r1
     ace:	31 f0       	breq	.+12     	; 0xadc <malloc+0x60>
     ad0:	42 17       	cp	r20, r18
     ad2:	53 07       	cpc	r21, r19
     ad4:	18 f0       	brcs	.+6      	; 0xadc <malloc+0x60>
     ad6:	a9 01       	movw	r20, r18
     ad8:	db 01       	movw	r26, r22
     ada:	01 c0       	rjmp	.+2      	; 0xade <malloc+0x62>
     adc:	ef 01       	movw	r28, r30
     ade:	9a 01       	movw	r18, r20
     ae0:	bd 01       	movw	r22, r26
     ae2:	df 01       	movw	r26, r30
     ae4:	02 80       	ldd	r0, Z+2	; 0x02
     ae6:	f3 81       	ldd	r31, Z+3	; 0x03
     ae8:	e0 2d       	mov	r30, r0
     aea:	d7 cf       	rjmp	.-82     	; 0xa9a <malloc+0x1e>
     aec:	21 15       	cp	r18, r1
     aee:	31 05       	cpc	r19, r1
     af0:	f9 f0       	breq	.+62     	; 0xb30 <malloc+0xb4>
     af2:	28 1b       	sub	r18, r24
     af4:	39 0b       	sbc	r19, r25
     af6:	24 30       	cpi	r18, 0x04	; 4
     af8:	31 05       	cpc	r19, r1
     afa:	80 f4       	brcc	.+32     	; 0xb1c <malloc+0xa0>
     afc:	8a 81       	ldd	r24, Y+2	; 0x02
     afe:	9b 81       	ldd	r25, Y+3	; 0x03
     b00:	61 15       	cp	r22, r1
     b02:	71 05       	cpc	r23, r1
     b04:	21 f0       	breq	.+8      	; 0xb0e <malloc+0x92>
     b06:	fb 01       	movw	r30, r22
     b08:	93 83       	std	Z+3, r25	; 0x03
     b0a:	82 83       	std	Z+2, r24	; 0x02
     b0c:	04 c0       	rjmp	.+8      	; 0xb16 <malloc+0x9a>
     b0e:	90 93 a3 02 	sts	0x02A3, r25
     b12:	80 93 a2 02 	sts	0x02A2, r24
     b16:	fe 01       	movw	r30, r28
     b18:	32 96       	adiw	r30, 0x02	; 2
     b1a:	44 c0       	rjmp	.+136    	; 0xba4 <malloc+0x128>
     b1c:	fe 01       	movw	r30, r28
     b1e:	e2 0f       	add	r30, r18
     b20:	f3 1f       	adc	r31, r19
     b22:	81 93       	st	Z+, r24
     b24:	91 93       	st	Z+, r25
     b26:	22 50       	subi	r18, 0x02	; 2
     b28:	31 09       	sbc	r19, r1
     b2a:	39 83       	std	Y+1, r19	; 0x01
     b2c:	28 83       	st	Y, r18
     b2e:	3a c0       	rjmp	.+116    	; 0xba4 <malloc+0x128>
     b30:	20 91 a0 02 	lds	r18, 0x02A0
     b34:	30 91 a1 02 	lds	r19, 0x02A1
     b38:	23 2b       	or	r18, r19
     b3a:	41 f4       	brne	.+16     	; 0xb4c <malloc+0xd0>
     b3c:	20 91 02 01 	lds	r18, 0x0102
     b40:	30 91 03 01 	lds	r19, 0x0103
     b44:	30 93 a1 02 	sts	0x02A1, r19
     b48:	20 93 a0 02 	sts	0x02A0, r18
     b4c:	20 91 00 01 	lds	r18, 0x0100
     b50:	30 91 01 01 	lds	r19, 0x0101
     b54:	21 15       	cp	r18, r1
     b56:	31 05       	cpc	r19, r1
     b58:	41 f4       	brne	.+16     	; 0xb6a <malloc+0xee>
     b5a:	2d b7       	in	r18, 0x3d	; 61
     b5c:	3e b7       	in	r19, 0x3e	; 62
     b5e:	40 91 04 01 	lds	r20, 0x0104
     b62:	50 91 05 01 	lds	r21, 0x0105
     b66:	24 1b       	sub	r18, r20
     b68:	35 0b       	sbc	r19, r21
     b6a:	e0 91 a0 02 	lds	r30, 0x02A0
     b6e:	f0 91 a1 02 	lds	r31, 0x02A1
     b72:	e2 17       	cp	r30, r18
     b74:	f3 07       	cpc	r31, r19
     b76:	a0 f4       	brcc	.+40     	; 0xba0 <malloc+0x124>
     b78:	2e 1b       	sub	r18, r30
     b7a:	3f 0b       	sbc	r19, r31
     b7c:	28 17       	cp	r18, r24
     b7e:	39 07       	cpc	r19, r25
     b80:	78 f0       	brcs	.+30     	; 0xba0 <malloc+0x124>
     b82:	ac 01       	movw	r20, r24
     b84:	4e 5f       	subi	r20, 0xFE	; 254
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	24 17       	cp	r18, r20
     b8a:	35 07       	cpc	r19, r21
     b8c:	48 f0       	brcs	.+18     	; 0xba0 <malloc+0x124>
     b8e:	4e 0f       	add	r20, r30
     b90:	5f 1f       	adc	r21, r31
     b92:	50 93 a1 02 	sts	0x02A1, r21
     b96:	40 93 a0 02 	sts	0x02A0, r20
     b9a:	81 93       	st	Z+, r24
     b9c:	91 93       	st	Z+, r25
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <malloc+0x128>
     ba0:	e0 e0       	ldi	r30, 0x00	; 0
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	cf 01       	movw	r24, r30
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	08 95       	ret

00000bac <free>:
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	00 97       	sbiw	r24, 0x00	; 0
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <free+0xa>
     bb4:	87 c0       	rjmp	.+270    	; 0xcc4 <free+0x118>
     bb6:	fc 01       	movw	r30, r24
     bb8:	32 97       	sbiw	r30, 0x02	; 2
     bba:	13 82       	std	Z+3, r1	; 0x03
     bbc:	12 82       	std	Z+2, r1	; 0x02
     bbe:	c0 91 a2 02 	lds	r28, 0x02A2
     bc2:	d0 91 a3 02 	lds	r29, 0x02A3
     bc6:	20 97       	sbiw	r28, 0x00	; 0
     bc8:	81 f4       	brne	.+32     	; 0xbea <free+0x3e>
     bca:	20 81       	ld	r18, Z
     bcc:	31 81       	ldd	r19, Z+1	; 0x01
     bce:	28 0f       	add	r18, r24
     bd0:	39 1f       	adc	r19, r25
     bd2:	80 91 a0 02 	lds	r24, 0x02A0
     bd6:	90 91 a1 02 	lds	r25, 0x02A1
     bda:	82 17       	cp	r24, r18
     bdc:	93 07       	cpc	r25, r19
     bde:	79 f5       	brne	.+94     	; 0xc3e <free+0x92>
     be0:	f0 93 a1 02 	sts	0x02A1, r31
     be4:	e0 93 a0 02 	sts	0x02A0, r30
     be8:	6d c0       	rjmp	.+218    	; 0xcc4 <free+0x118>
     bea:	de 01       	movw	r26, r28
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	ae 17       	cp	r26, r30
     bf2:	bf 07       	cpc	r27, r31
     bf4:	50 f4       	brcc	.+20     	; 0xc0a <free+0x5e>
     bf6:	12 96       	adiw	r26, 0x02	; 2
     bf8:	4d 91       	ld	r20, X+
     bfa:	5c 91       	ld	r21, X
     bfc:	13 97       	sbiw	r26, 0x03	; 3
     bfe:	9d 01       	movw	r18, r26
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	09 f1       	breq	.+66     	; 0xc48 <free+0x9c>
     c06:	da 01       	movw	r26, r20
     c08:	f3 cf       	rjmp	.-26     	; 0xbf0 <free+0x44>
     c0a:	b3 83       	std	Z+3, r27	; 0x03
     c0c:	a2 83       	std	Z+2, r26	; 0x02
     c0e:	40 81       	ld	r20, Z
     c10:	51 81       	ldd	r21, Z+1	; 0x01
     c12:	84 0f       	add	r24, r20
     c14:	95 1f       	adc	r25, r21
     c16:	8a 17       	cp	r24, r26
     c18:	9b 07       	cpc	r25, r27
     c1a:	71 f4       	brne	.+28     	; 0xc38 <free+0x8c>
     c1c:	8d 91       	ld	r24, X+
     c1e:	9c 91       	ld	r25, X
     c20:	11 97       	sbiw	r26, 0x01	; 1
     c22:	84 0f       	add	r24, r20
     c24:	95 1f       	adc	r25, r21
     c26:	02 96       	adiw	r24, 0x02	; 2
     c28:	91 83       	std	Z+1, r25	; 0x01
     c2a:	80 83       	st	Z, r24
     c2c:	12 96       	adiw	r26, 0x02	; 2
     c2e:	8d 91       	ld	r24, X+
     c30:	9c 91       	ld	r25, X
     c32:	13 97       	sbiw	r26, 0x03	; 3
     c34:	93 83       	std	Z+3, r25	; 0x03
     c36:	82 83       	std	Z+2, r24	; 0x02
     c38:	21 15       	cp	r18, r1
     c3a:	31 05       	cpc	r19, r1
     c3c:	29 f4       	brne	.+10     	; 0xc48 <free+0x9c>
     c3e:	f0 93 a3 02 	sts	0x02A3, r31
     c42:	e0 93 a2 02 	sts	0x02A2, r30
     c46:	3e c0       	rjmp	.+124    	; 0xcc4 <free+0x118>
     c48:	d9 01       	movw	r26, r18
     c4a:	13 96       	adiw	r26, 0x03	; 3
     c4c:	fc 93       	st	X, r31
     c4e:	ee 93       	st	-X, r30
     c50:	12 97       	sbiw	r26, 0x02	; 2
     c52:	4d 91       	ld	r20, X+
     c54:	5d 91       	ld	r21, X+
     c56:	a4 0f       	add	r26, r20
     c58:	b5 1f       	adc	r27, r21
     c5a:	ea 17       	cp	r30, r26
     c5c:	fb 07       	cpc	r31, r27
     c5e:	79 f4       	brne	.+30     	; 0xc7e <free+0xd2>
     c60:	80 81       	ld	r24, Z
     c62:	91 81       	ldd	r25, Z+1	; 0x01
     c64:	84 0f       	add	r24, r20
     c66:	95 1f       	adc	r25, r21
     c68:	02 96       	adiw	r24, 0x02	; 2
     c6a:	d9 01       	movw	r26, r18
     c6c:	11 96       	adiw	r26, 0x01	; 1
     c6e:	9c 93       	st	X, r25
     c70:	8e 93       	st	-X, r24
     c72:	82 81       	ldd	r24, Z+2	; 0x02
     c74:	93 81       	ldd	r25, Z+3	; 0x03
     c76:	13 96       	adiw	r26, 0x03	; 3
     c78:	9c 93       	st	X, r25
     c7a:	8e 93       	st	-X, r24
     c7c:	12 97       	sbiw	r26, 0x02	; 2
     c7e:	e0 e0       	ldi	r30, 0x00	; 0
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	8a 81       	ldd	r24, Y+2	; 0x02
     c84:	9b 81       	ldd	r25, Y+3	; 0x03
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	19 f0       	breq	.+6      	; 0xc90 <free+0xe4>
     c8a:	fe 01       	movw	r30, r28
     c8c:	ec 01       	movw	r28, r24
     c8e:	f9 cf       	rjmp	.-14     	; 0xc82 <free+0xd6>
     c90:	ce 01       	movw	r24, r28
     c92:	02 96       	adiw	r24, 0x02	; 2
     c94:	28 81       	ld	r18, Y
     c96:	39 81       	ldd	r19, Y+1	; 0x01
     c98:	82 0f       	add	r24, r18
     c9a:	93 1f       	adc	r25, r19
     c9c:	20 91 a0 02 	lds	r18, 0x02A0
     ca0:	30 91 a1 02 	lds	r19, 0x02A1
     ca4:	28 17       	cp	r18, r24
     ca6:	39 07       	cpc	r19, r25
     ca8:	69 f4       	brne	.+26     	; 0xcc4 <free+0x118>
     caa:	30 97       	sbiw	r30, 0x00	; 0
     cac:	29 f4       	brne	.+10     	; 0xcb8 <free+0x10c>
     cae:	10 92 a3 02 	sts	0x02A3, r1
     cb2:	10 92 a2 02 	sts	0x02A2, r1
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <free+0x110>
     cb8:	13 82       	std	Z+3, r1	; 0x03
     cba:	12 82       	std	Z+2, r1	; 0x02
     cbc:	d0 93 a1 02 	sts	0x02A1, r29
     cc0:	c0 93 a0 02 	sts	0x02A0, r28
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <fdevopen>:
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ec 01       	movw	r28, r24
     cd4:	8b 01       	movw	r16, r22
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	31 f4       	brne	.+12     	; 0xce6 <fdevopen+0x1c>
     cda:	61 15       	cp	r22, r1
     cdc:	71 05       	cpc	r23, r1
     cde:	19 f4       	brne	.+6      	; 0xce6 <fdevopen+0x1c>
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	38 c0       	rjmp	.+112    	; 0xd56 <fdevopen+0x8c>
     ce6:	6e e0       	ldi	r22, 0x0E	; 14
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	0e 94 d5 08 	call	0x11aa	; 0x11aa <calloc>
     cf2:	fc 01       	movw	r30, r24
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	a1 f3       	breq	.-24     	; 0xce0 <fdevopen+0x16>
     cf8:	80 e8       	ldi	r24, 0x80	; 128
     cfa:	83 83       	std	Z+3, r24	; 0x03
     cfc:	01 15       	cp	r16, r1
     cfe:	11 05       	cpc	r17, r1
     d00:	71 f0       	breq	.+28     	; 0xd1e <fdevopen+0x54>
     d02:	13 87       	std	Z+11, r17	; 0x0b
     d04:	02 87       	std	Z+10, r16	; 0x0a
     d06:	81 e8       	ldi	r24, 0x81	; 129
     d08:	83 83       	std	Z+3, r24	; 0x03
     d0a:	80 91 a4 02 	lds	r24, 0x02A4
     d0e:	90 91 a5 02 	lds	r25, 0x02A5
     d12:	89 2b       	or	r24, r25
     d14:	21 f4       	brne	.+8      	; 0xd1e <fdevopen+0x54>
     d16:	f0 93 a5 02 	sts	0x02A5, r31
     d1a:	e0 93 a4 02 	sts	0x02A4, r30
     d1e:	20 97       	sbiw	r28, 0x00	; 0
     d20:	c9 f0       	breq	.+50     	; 0xd54 <fdevopen+0x8a>
     d22:	d1 87       	std	Z+9, r29	; 0x09
     d24:	c0 87       	std	Z+8, r28	; 0x08
     d26:	83 81       	ldd	r24, Z+3	; 0x03
     d28:	82 60       	ori	r24, 0x02	; 2
     d2a:	83 83       	std	Z+3, r24	; 0x03
     d2c:	80 91 a6 02 	lds	r24, 0x02A6
     d30:	90 91 a7 02 	lds	r25, 0x02A7
     d34:	89 2b       	or	r24, r25
     d36:	71 f4       	brne	.+28     	; 0xd54 <fdevopen+0x8a>
     d38:	f0 93 a7 02 	sts	0x02A7, r31
     d3c:	e0 93 a6 02 	sts	0x02A6, r30
     d40:	80 91 a8 02 	lds	r24, 0x02A8
     d44:	90 91 a9 02 	lds	r25, 0x02A9
     d48:	89 2b       	or	r24, r25
     d4a:	21 f4       	brne	.+8      	; 0xd54 <fdevopen+0x8a>
     d4c:	f0 93 a9 02 	sts	0x02A9, r31
     d50:	e0 93 a8 02 	sts	0x02A8, r30
     d54:	cf 01       	movw	r24, r30
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	08 95       	ret

00000d60 <fprintf>:
     d60:	a0 e0       	ldi	r26, 0x00	; 0
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e6 eb       	ldi	r30, 0xB6	; 182
     d66:	f6 e0       	ldi	r31, 0x06	; 6
     d68:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__prologue_saves__+0x20>
     d6c:	ae 01       	movw	r20, r28
     d6e:	47 5f       	subi	r20, 0xF7	; 247
     d70:	5f 4f       	sbci	r21, 0xFF	; 255
     d72:	6f 81       	ldd	r22, Y+7	; 0x07
     d74:	78 85       	ldd	r23, Y+8	; 0x08
     d76:	8d 81       	ldd	r24, Y+5	; 0x05
     d78:	9e 81       	ldd	r25, Y+6	; 0x06
     d7a:	0e 94 03 07 	call	0xe06	; 0xe06 <vfprintf>
     d7e:	e2 e0       	ldi	r30, 0x02	; 2
     d80:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__epilogue_restores__+0x20>

00000d84 <printf>:
     d84:	a0 e0       	ldi	r26, 0x00	; 0
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e8 ec       	ldi	r30, 0xC8	; 200
     d8a:	f6 e0       	ldi	r31, 0x06	; 6
     d8c:	0c 94 ae 09 	jmp	0x135c	; 0x135c <__prologue_saves__+0x20>
     d90:	fe 01       	movw	r30, r28
     d92:	35 96       	adiw	r30, 0x05	; 5
     d94:	61 91       	ld	r22, Z+
     d96:	71 91       	ld	r23, Z+
     d98:	af 01       	movw	r20, r30
     d9a:	80 91 a6 02 	lds	r24, 0x02A6
     d9e:	90 91 a7 02 	lds	r25, 0x02A7
     da2:	0e 94 03 07 	call	0xe06	; 0xe06 <vfprintf>
     da6:	e2 e0       	ldi	r30, 0x02	; 2
     da8:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__epilogue_restores__+0x20>

00000dac <puts>:
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	e0 91 a6 02 	lds	r30, 0x02A6
     db8:	f0 91 a7 02 	lds	r31, 0x02A7
     dbc:	23 81       	ldd	r18, Z+3	; 0x03
     dbe:	21 ff       	sbrs	r18, 1
     dc0:	1b c0       	rjmp	.+54     	; 0xdf8 <puts+0x4c>
     dc2:	ec 01       	movw	r28, r24
     dc4:	00 e0       	ldi	r16, 0x00	; 0
     dc6:	10 e0       	ldi	r17, 0x00	; 0
     dc8:	89 91       	ld	r24, Y+
     dca:	60 91 a6 02 	lds	r22, 0x02A6
     dce:	70 91 a7 02 	lds	r23, 0x02A7
     dd2:	db 01       	movw	r26, r22
     dd4:	18 96       	adiw	r26, 0x08	; 8
     dd6:	ed 91       	ld	r30, X+
     dd8:	fc 91       	ld	r31, X
     dda:	19 97       	sbiw	r26, 0x09	; 9
     ddc:	88 23       	and	r24, r24
     dde:	31 f0       	breq	.+12     	; 0xdec <puts+0x40>
     de0:	09 95       	icall
     de2:	89 2b       	or	r24, r25
     de4:	89 f3       	breq	.-30     	; 0xdc8 <puts+0x1c>
     de6:	0f ef       	ldi	r16, 0xFF	; 255
     de8:	1f ef       	ldi	r17, 0xFF	; 255
     dea:	ee cf       	rjmp	.-36     	; 0xdc8 <puts+0x1c>
     dec:	8a e0       	ldi	r24, 0x0A	; 10
     dee:	09 95       	icall
     df0:	89 2b       	or	r24, r25
     df2:	11 f4       	brne	.+4      	; 0xdf8 <puts+0x4c>
     df4:	c8 01       	movw	r24, r16
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <puts+0x50>
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	9f ef       	ldi	r25, 0xFF	; 255
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	08 95       	ret

00000e06 <vfprintf>:
     e06:	ac e0       	ldi	r26, 0x0C	; 12
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e9 e0       	ldi	r30, 0x09	; 9
     e0c:	f7 e0       	ldi	r31, 0x07	; 7
     e0e:	0c 94 9e 09 	jmp	0x133c	; 0x133c <__prologue_saves__>
     e12:	7c 01       	movw	r14, r24
     e14:	6b 01       	movw	r12, r22
     e16:	8a 01       	movw	r16, r20
     e18:	fc 01       	movw	r30, r24
     e1a:	17 82       	std	Z+7, r1	; 0x07
     e1c:	16 82       	std	Z+6, r1	; 0x06
     e1e:	83 81       	ldd	r24, Z+3	; 0x03
     e20:	81 ff       	sbrs	r24, 1
     e22:	bd c1       	rjmp	.+890    	; 0x119e <vfprintf+0x398>
     e24:	ce 01       	movw	r24, r28
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	4c 01       	movw	r8, r24
     e2a:	f7 01       	movw	r30, r14
     e2c:	93 81       	ldd	r25, Z+3	; 0x03
     e2e:	f6 01       	movw	r30, r12
     e30:	93 fd       	sbrc	r25, 3
     e32:	85 91       	lpm	r24, Z+
     e34:	93 ff       	sbrs	r25, 3
     e36:	81 91       	ld	r24, Z+
     e38:	6f 01       	movw	r12, r30
     e3a:	88 23       	and	r24, r24
     e3c:	09 f4       	brne	.+2      	; 0xe40 <vfprintf+0x3a>
     e3e:	ab c1       	rjmp	.+854    	; 0x1196 <vfprintf+0x390>
     e40:	85 32       	cpi	r24, 0x25	; 37
     e42:	39 f4       	brne	.+14     	; 0xe52 <vfprintf+0x4c>
     e44:	93 fd       	sbrc	r25, 3
     e46:	85 91       	lpm	r24, Z+
     e48:	93 ff       	sbrs	r25, 3
     e4a:	81 91       	ld	r24, Z+
     e4c:	6f 01       	movw	r12, r30
     e4e:	85 32       	cpi	r24, 0x25	; 37
     e50:	29 f4       	brne	.+10     	; 0xe5c <vfprintf+0x56>
     e52:	b7 01       	movw	r22, r14
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 0e 09 	call	0x121c	; 0x121c <fputc>
     e5a:	e7 cf       	rjmp	.-50     	; 0xe2a <vfprintf+0x24>
     e5c:	51 2c       	mov	r5, r1
     e5e:	31 2c       	mov	r3, r1
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	20 32       	cpi	r18, 0x20	; 32
     e64:	a0 f4       	brcc	.+40     	; 0xe8e <vfprintf+0x88>
     e66:	8b 32       	cpi	r24, 0x2B	; 43
     e68:	69 f0       	breq	.+26     	; 0xe84 <vfprintf+0x7e>
     e6a:	30 f4       	brcc	.+12     	; 0xe78 <vfprintf+0x72>
     e6c:	80 32       	cpi	r24, 0x20	; 32
     e6e:	59 f0       	breq	.+22     	; 0xe86 <vfprintf+0x80>
     e70:	83 32       	cpi	r24, 0x23	; 35
     e72:	69 f4       	brne	.+26     	; 0xe8e <vfprintf+0x88>
     e74:	20 61       	ori	r18, 0x10	; 16
     e76:	2c c0       	rjmp	.+88     	; 0xed0 <vfprintf+0xca>
     e78:	8d 32       	cpi	r24, 0x2D	; 45
     e7a:	39 f0       	breq	.+14     	; 0xe8a <vfprintf+0x84>
     e7c:	80 33       	cpi	r24, 0x30	; 48
     e7e:	39 f4       	brne	.+14     	; 0xe8e <vfprintf+0x88>
     e80:	21 60       	ori	r18, 0x01	; 1
     e82:	26 c0       	rjmp	.+76     	; 0xed0 <vfprintf+0xca>
     e84:	22 60       	ori	r18, 0x02	; 2
     e86:	24 60       	ori	r18, 0x04	; 4
     e88:	23 c0       	rjmp	.+70     	; 0xed0 <vfprintf+0xca>
     e8a:	28 60       	ori	r18, 0x08	; 8
     e8c:	21 c0       	rjmp	.+66     	; 0xed0 <vfprintf+0xca>
     e8e:	27 fd       	sbrc	r18, 7
     e90:	27 c0       	rjmp	.+78     	; 0xee0 <vfprintf+0xda>
     e92:	30 ed       	ldi	r19, 0xD0	; 208
     e94:	38 0f       	add	r19, r24
     e96:	3a 30       	cpi	r19, 0x0A	; 10
     e98:	78 f4       	brcc	.+30     	; 0xeb8 <vfprintf+0xb2>
     e9a:	26 ff       	sbrs	r18, 6
     e9c:	06 c0       	rjmp	.+12     	; 0xeaa <vfprintf+0xa4>
     e9e:	fa e0       	ldi	r31, 0x0A	; 10
     ea0:	5f 9e       	mul	r5, r31
     ea2:	30 0d       	add	r19, r0
     ea4:	11 24       	eor	r1, r1
     ea6:	53 2e       	mov	r5, r19
     ea8:	13 c0       	rjmp	.+38     	; 0xed0 <vfprintf+0xca>
     eaa:	8a e0       	ldi	r24, 0x0A	; 10
     eac:	38 9e       	mul	r3, r24
     eae:	30 0d       	add	r19, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	33 2e       	mov	r3, r19
     eb4:	20 62       	ori	r18, 0x20	; 32
     eb6:	0c c0       	rjmp	.+24     	; 0xed0 <vfprintf+0xca>
     eb8:	8e 32       	cpi	r24, 0x2E	; 46
     eba:	21 f4       	brne	.+8      	; 0xec4 <vfprintf+0xbe>
     ebc:	26 fd       	sbrc	r18, 6
     ebe:	6b c1       	rjmp	.+726    	; 0x1196 <vfprintf+0x390>
     ec0:	20 64       	ori	r18, 0x40	; 64
     ec2:	06 c0       	rjmp	.+12     	; 0xed0 <vfprintf+0xca>
     ec4:	8c 36       	cpi	r24, 0x6C	; 108
     ec6:	11 f4       	brne	.+4      	; 0xecc <vfprintf+0xc6>
     ec8:	20 68       	ori	r18, 0x80	; 128
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <vfprintf+0xca>
     ecc:	88 36       	cpi	r24, 0x68	; 104
     ece:	41 f4       	brne	.+16     	; 0xee0 <vfprintf+0xda>
     ed0:	f6 01       	movw	r30, r12
     ed2:	93 fd       	sbrc	r25, 3
     ed4:	85 91       	lpm	r24, Z+
     ed6:	93 ff       	sbrs	r25, 3
     ed8:	81 91       	ld	r24, Z+
     eda:	6f 01       	movw	r12, r30
     edc:	81 11       	cpse	r24, r1
     ede:	c1 cf       	rjmp	.-126    	; 0xe62 <vfprintf+0x5c>
     ee0:	98 2f       	mov	r25, r24
     ee2:	9f 7d       	andi	r25, 0xDF	; 223
     ee4:	95 54       	subi	r25, 0x45	; 69
     ee6:	93 30       	cpi	r25, 0x03	; 3
     ee8:	28 f4       	brcc	.+10     	; 0xef4 <vfprintf+0xee>
     eea:	0c 5f       	subi	r16, 0xFC	; 252
     eec:	1f 4f       	sbci	r17, 0xFF	; 255
     eee:	ff e3       	ldi	r31, 0x3F	; 63
     ef0:	f9 83       	std	Y+1, r31	; 0x01
     ef2:	0d c0       	rjmp	.+26     	; 0xf0e <vfprintf+0x108>
     ef4:	83 36       	cpi	r24, 0x63	; 99
     ef6:	31 f0       	breq	.+12     	; 0xf04 <vfprintf+0xfe>
     ef8:	83 37       	cpi	r24, 0x73	; 115
     efa:	71 f0       	breq	.+28     	; 0xf18 <vfprintf+0x112>
     efc:	83 35       	cpi	r24, 0x53	; 83
     efe:	09 f0       	breq	.+2      	; 0xf02 <vfprintf+0xfc>
     f00:	5b c0       	rjmp	.+182    	; 0xfb8 <vfprintf+0x1b2>
     f02:	22 c0       	rjmp	.+68     	; 0xf48 <vfprintf+0x142>
     f04:	f8 01       	movw	r30, r16
     f06:	80 81       	ld	r24, Z
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	0e 5f       	subi	r16, 0xFE	; 254
     f0c:	1f 4f       	sbci	r17, 0xFF	; 255
     f0e:	44 24       	eor	r4, r4
     f10:	43 94       	inc	r4
     f12:	51 2c       	mov	r5, r1
     f14:	54 01       	movw	r10, r8
     f16:	15 c0       	rjmp	.+42     	; 0xf42 <vfprintf+0x13c>
     f18:	38 01       	movw	r6, r16
     f1a:	f2 e0       	ldi	r31, 0x02	; 2
     f1c:	6f 0e       	add	r6, r31
     f1e:	71 1c       	adc	r7, r1
     f20:	f8 01       	movw	r30, r16
     f22:	a0 80       	ld	r10, Z
     f24:	b1 80       	ldd	r11, Z+1	; 0x01
     f26:	26 ff       	sbrs	r18, 6
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <vfprintf+0x12a>
     f2a:	65 2d       	mov	r22, r5
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <vfprintf+0x12e>
     f30:	6f ef       	ldi	r22, 0xFF	; 255
     f32:	7f ef       	ldi	r23, 0xFF	; 255
     f34:	c5 01       	movw	r24, r10
     f36:	2c 87       	std	Y+12, r18	; 0x0c
     f38:	0e 94 03 09 	call	0x1206	; 0x1206 <strnlen>
     f3c:	2c 01       	movw	r4, r24
     f3e:	83 01       	movw	r16, r6
     f40:	2c 85       	ldd	r18, Y+12	; 0x0c
     f42:	2f 77       	andi	r18, 0x7F	; 127
     f44:	22 2e       	mov	r2, r18
     f46:	17 c0       	rjmp	.+46     	; 0xf76 <vfprintf+0x170>
     f48:	38 01       	movw	r6, r16
     f4a:	f2 e0       	ldi	r31, 0x02	; 2
     f4c:	6f 0e       	add	r6, r31
     f4e:	71 1c       	adc	r7, r1
     f50:	f8 01       	movw	r30, r16
     f52:	a0 80       	ld	r10, Z
     f54:	b1 80       	ldd	r11, Z+1	; 0x01
     f56:	26 ff       	sbrs	r18, 6
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <vfprintf+0x15a>
     f5a:	65 2d       	mov	r22, r5
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <vfprintf+0x15e>
     f60:	6f ef       	ldi	r22, 0xFF	; 255
     f62:	7f ef       	ldi	r23, 0xFF	; 255
     f64:	c5 01       	movw	r24, r10
     f66:	2c 87       	std	Y+12, r18	; 0x0c
     f68:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <strnlen_P>
     f6c:	2c 01       	movw	r4, r24
     f6e:	2c 85       	ldd	r18, Y+12	; 0x0c
     f70:	20 68       	ori	r18, 0x80	; 128
     f72:	22 2e       	mov	r2, r18
     f74:	83 01       	movw	r16, r6
     f76:	23 fc       	sbrc	r2, 3
     f78:	1b c0       	rjmp	.+54     	; 0xfb0 <vfprintf+0x1aa>
     f7a:	83 2d       	mov	r24, r3
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	48 16       	cp	r4, r24
     f80:	59 06       	cpc	r5, r25
     f82:	b0 f4       	brcc	.+44     	; 0xfb0 <vfprintf+0x1aa>
     f84:	b7 01       	movw	r22, r14
     f86:	80 e2       	ldi	r24, 0x20	; 32
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 0e 09 	call	0x121c	; 0x121c <fputc>
     f8e:	3a 94       	dec	r3
     f90:	f4 cf       	rjmp	.-24     	; 0xf7a <vfprintf+0x174>
     f92:	f5 01       	movw	r30, r10
     f94:	27 fc       	sbrc	r2, 7
     f96:	85 91       	lpm	r24, Z+
     f98:	27 fe       	sbrs	r2, 7
     f9a:	81 91       	ld	r24, Z+
     f9c:	5f 01       	movw	r10, r30
     f9e:	b7 01       	movw	r22, r14
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 0e 09 	call	0x121c	; 0x121c <fputc>
     fa6:	31 10       	cpse	r3, r1
     fa8:	3a 94       	dec	r3
     faa:	f1 e0       	ldi	r31, 0x01	; 1
     fac:	4f 1a       	sub	r4, r31
     fae:	51 08       	sbc	r5, r1
     fb0:	41 14       	cp	r4, r1
     fb2:	51 04       	cpc	r5, r1
     fb4:	71 f7       	brne	.-36     	; 0xf92 <vfprintf+0x18c>
     fb6:	e5 c0       	rjmp	.+458    	; 0x1182 <vfprintf+0x37c>
     fb8:	84 36       	cpi	r24, 0x64	; 100
     fba:	11 f0       	breq	.+4      	; 0xfc0 <vfprintf+0x1ba>
     fbc:	89 36       	cpi	r24, 0x69	; 105
     fbe:	39 f5       	brne	.+78     	; 0x100e <vfprintf+0x208>
     fc0:	f8 01       	movw	r30, r16
     fc2:	27 ff       	sbrs	r18, 7
     fc4:	07 c0       	rjmp	.+14     	; 0xfd4 <vfprintf+0x1ce>
     fc6:	60 81       	ld	r22, Z
     fc8:	71 81       	ldd	r23, Z+1	; 0x01
     fca:	82 81       	ldd	r24, Z+2	; 0x02
     fcc:	93 81       	ldd	r25, Z+3	; 0x03
     fce:	0c 5f       	subi	r16, 0xFC	; 252
     fd0:	1f 4f       	sbci	r17, 0xFF	; 255
     fd2:	08 c0       	rjmp	.+16     	; 0xfe4 <vfprintf+0x1de>
     fd4:	60 81       	ld	r22, Z
     fd6:	71 81       	ldd	r23, Z+1	; 0x01
     fd8:	88 27       	eor	r24, r24
     fda:	77 fd       	sbrc	r23, 7
     fdc:	80 95       	com	r24
     fde:	98 2f       	mov	r25, r24
     fe0:	0e 5f       	subi	r16, 0xFE	; 254
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	2f 76       	andi	r18, 0x6F	; 111
     fe6:	b2 2e       	mov	r11, r18
     fe8:	97 ff       	sbrs	r25, 7
     fea:	09 c0       	rjmp	.+18     	; 0xffe <vfprintf+0x1f8>
     fec:	90 95       	com	r25
     fee:	80 95       	com	r24
     ff0:	70 95       	com	r23
     ff2:	61 95       	neg	r22
     ff4:	7f 4f       	sbci	r23, 0xFF	; 255
     ff6:	8f 4f       	sbci	r24, 0xFF	; 255
     ff8:	9f 4f       	sbci	r25, 0xFF	; 255
     ffa:	20 68       	ori	r18, 0x80	; 128
     ffc:	b2 2e       	mov	r11, r18
     ffe:	2a e0       	ldi	r18, 0x0A	; 10
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	a4 01       	movw	r20, r8
    1004:	0e 94 40 09 	call	0x1280	; 0x1280 <__ultoa_invert>
    1008:	a8 2e       	mov	r10, r24
    100a:	a8 18       	sub	r10, r8
    100c:	44 c0       	rjmp	.+136    	; 0x1096 <vfprintf+0x290>
    100e:	85 37       	cpi	r24, 0x75	; 117
    1010:	29 f4       	brne	.+10     	; 0x101c <vfprintf+0x216>
    1012:	2f 7e       	andi	r18, 0xEF	; 239
    1014:	b2 2e       	mov	r11, r18
    1016:	2a e0       	ldi	r18, 0x0A	; 10
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	25 c0       	rjmp	.+74     	; 0x1066 <vfprintf+0x260>
    101c:	f2 2f       	mov	r31, r18
    101e:	f9 7f       	andi	r31, 0xF9	; 249
    1020:	bf 2e       	mov	r11, r31
    1022:	8f 36       	cpi	r24, 0x6F	; 111
    1024:	c1 f0       	breq	.+48     	; 0x1056 <vfprintf+0x250>
    1026:	18 f4       	brcc	.+6      	; 0x102e <vfprintf+0x228>
    1028:	88 35       	cpi	r24, 0x58	; 88
    102a:	79 f0       	breq	.+30     	; 0x104a <vfprintf+0x244>
    102c:	b4 c0       	rjmp	.+360    	; 0x1196 <vfprintf+0x390>
    102e:	80 37       	cpi	r24, 0x70	; 112
    1030:	19 f0       	breq	.+6      	; 0x1038 <vfprintf+0x232>
    1032:	88 37       	cpi	r24, 0x78	; 120
    1034:	21 f0       	breq	.+8      	; 0x103e <vfprintf+0x238>
    1036:	af c0       	rjmp	.+350    	; 0x1196 <vfprintf+0x390>
    1038:	2f 2f       	mov	r18, r31
    103a:	20 61       	ori	r18, 0x10	; 16
    103c:	b2 2e       	mov	r11, r18
    103e:	b4 fe       	sbrs	r11, 4
    1040:	0d c0       	rjmp	.+26     	; 0x105c <vfprintf+0x256>
    1042:	8b 2d       	mov	r24, r11
    1044:	84 60       	ori	r24, 0x04	; 4
    1046:	b8 2e       	mov	r11, r24
    1048:	09 c0       	rjmp	.+18     	; 0x105c <vfprintf+0x256>
    104a:	24 ff       	sbrs	r18, 4
    104c:	0a c0       	rjmp	.+20     	; 0x1062 <vfprintf+0x25c>
    104e:	9f 2f       	mov	r25, r31
    1050:	96 60       	ori	r25, 0x06	; 6
    1052:	b9 2e       	mov	r11, r25
    1054:	06 c0       	rjmp	.+12     	; 0x1062 <vfprintf+0x25c>
    1056:	28 e0       	ldi	r18, 0x08	; 8
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	05 c0       	rjmp	.+10     	; 0x1066 <vfprintf+0x260>
    105c:	20 e1       	ldi	r18, 0x10	; 16
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <vfprintf+0x260>
    1062:	20 e1       	ldi	r18, 0x10	; 16
    1064:	32 e0       	ldi	r19, 0x02	; 2
    1066:	f8 01       	movw	r30, r16
    1068:	b7 fe       	sbrs	r11, 7
    106a:	07 c0       	rjmp	.+14     	; 0x107a <vfprintf+0x274>
    106c:	60 81       	ld	r22, Z
    106e:	71 81       	ldd	r23, Z+1	; 0x01
    1070:	82 81       	ldd	r24, Z+2	; 0x02
    1072:	93 81       	ldd	r25, Z+3	; 0x03
    1074:	0c 5f       	subi	r16, 0xFC	; 252
    1076:	1f 4f       	sbci	r17, 0xFF	; 255
    1078:	06 c0       	rjmp	.+12     	; 0x1086 <vfprintf+0x280>
    107a:	60 81       	ld	r22, Z
    107c:	71 81       	ldd	r23, Z+1	; 0x01
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 5f       	subi	r16, 0xFE	; 254
    1084:	1f 4f       	sbci	r17, 0xFF	; 255
    1086:	a4 01       	movw	r20, r8
    1088:	0e 94 40 09 	call	0x1280	; 0x1280 <__ultoa_invert>
    108c:	a8 2e       	mov	r10, r24
    108e:	a8 18       	sub	r10, r8
    1090:	fb 2d       	mov	r31, r11
    1092:	ff 77       	andi	r31, 0x7F	; 127
    1094:	bf 2e       	mov	r11, r31
    1096:	b6 fe       	sbrs	r11, 6
    1098:	0b c0       	rjmp	.+22     	; 0x10b0 <vfprintf+0x2aa>
    109a:	2b 2d       	mov	r18, r11
    109c:	2e 7f       	andi	r18, 0xFE	; 254
    109e:	a5 14       	cp	r10, r5
    10a0:	50 f4       	brcc	.+20     	; 0x10b6 <vfprintf+0x2b0>
    10a2:	b4 fe       	sbrs	r11, 4
    10a4:	0a c0       	rjmp	.+20     	; 0x10ba <vfprintf+0x2b4>
    10a6:	b2 fc       	sbrc	r11, 2
    10a8:	08 c0       	rjmp	.+16     	; 0x10ba <vfprintf+0x2b4>
    10aa:	2b 2d       	mov	r18, r11
    10ac:	2e 7e       	andi	r18, 0xEE	; 238
    10ae:	05 c0       	rjmp	.+10     	; 0x10ba <vfprintf+0x2b4>
    10b0:	7a 2c       	mov	r7, r10
    10b2:	2b 2d       	mov	r18, r11
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <vfprintf+0x2b6>
    10b6:	7a 2c       	mov	r7, r10
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <vfprintf+0x2b6>
    10ba:	75 2c       	mov	r7, r5
    10bc:	24 ff       	sbrs	r18, 4
    10be:	0d c0       	rjmp	.+26     	; 0x10da <vfprintf+0x2d4>
    10c0:	fe 01       	movw	r30, r28
    10c2:	ea 0d       	add	r30, r10
    10c4:	f1 1d       	adc	r31, r1
    10c6:	80 81       	ld	r24, Z
    10c8:	80 33       	cpi	r24, 0x30	; 48
    10ca:	11 f4       	brne	.+4      	; 0x10d0 <vfprintf+0x2ca>
    10cc:	29 7e       	andi	r18, 0xE9	; 233
    10ce:	09 c0       	rjmp	.+18     	; 0x10e2 <vfprintf+0x2dc>
    10d0:	22 ff       	sbrs	r18, 2
    10d2:	06 c0       	rjmp	.+12     	; 0x10e0 <vfprintf+0x2da>
    10d4:	73 94       	inc	r7
    10d6:	73 94       	inc	r7
    10d8:	04 c0       	rjmp	.+8      	; 0x10e2 <vfprintf+0x2dc>
    10da:	82 2f       	mov	r24, r18
    10dc:	86 78       	andi	r24, 0x86	; 134
    10de:	09 f0       	breq	.+2      	; 0x10e2 <vfprintf+0x2dc>
    10e0:	73 94       	inc	r7
    10e2:	23 fd       	sbrc	r18, 3
    10e4:	13 c0       	rjmp	.+38     	; 0x110c <vfprintf+0x306>
    10e6:	20 ff       	sbrs	r18, 0
    10e8:	06 c0       	rjmp	.+12     	; 0x10f6 <vfprintf+0x2f0>
    10ea:	5a 2c       	mov	r5, r10
    10ec:	73 14       	cp	r7, r3
    10ee:	18 f4       	brcc	.+6      	; 0x10f6 <vfprintf+0x2f0>
    10f0:	53 0c       	add	r5, r3
    10f2:	57 18       	sub	r5, r7
    10f4:	73 2c       	mov	r7, r3
    10f6:	73 14       	cp	r7, r3
    10f8:	68 f4       	brcc	.+26     	; 0x1114 <vfprintf+0x30e>
    10fa:	b7 01       	movw	r22, r14
    10fc:	80 e2       	ldi	r24, 0x20	; 32
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	2c 87       	std	Y+12, r18	; 0x0c
    1102:	0e 94 0e 09 	call	0x121c	; 0x121c <fputc>
    1106:	73 94       	inc	r7
    1108:	2c 85       	ldd	r18, Y+12	; 0x0c
    110a:	f5 cf       	rjmp	.-22     	; 0x10f6 <vfprintf+0x2f0>
    110c:	73 14       	cp	r7, r3
    110e:	10 f4       	brcc	.+4      	; 0x1114 <vfprintf+0x30e>
    1110:	37 18       	sub	r3, r7
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <vfprintf+0x310>
    1114:	31 2c       	mov	r3, r1
    1116:	24 ff       	sbrs	r18, 4
    1118:	12 c0       	rjmp	.+36     	; 0x113e <vfprintf+0x338>
    111a:	b7 01       	movw	r22, r14
    111c:	80 e3       	ldi	r24, 0x30	; 48
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	2c 87       	std	Y+12, r18	; 0x0c
    1122:	0e 94 0e 09 	call	0x121c	; 0x121c <fputc>
    1126:	2c 85       	ldd	r18, Y+12	; 0x0c
    1128:	22 ff       	sbrs	r18, 2
    112a:	17 c0       	rjmp	.+46     	; 0x115a <vfprintf+0x354>
    112c:	21 ff       	sbrs	r18, 1
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <vfprintf+0x330>
    1130:	88 e5       	ldi	r24, 0x58	; 88
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <vfprintf+0x334>
    1136:	88 e7       	ldi	r24, 0x78	; 120
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	b7 01       	movw	r22, r14
    113c:	0c c0       	rjmp	.+24     	; 0x1156 <vfprintf+0x350>
    113e:	82 2f       	mov	r24, r18
    1140:	86 78       	andi	r24, 0x86	; 134
    1142:	59 f0       	breq	.+22     	; 0x115a <vfprintf+0x354>
    1144:	21 fd       	sbrc	r18, 1
    1146:	02 c0       	rjmp	.+4      	; 0x114c <vfprintf+0x346>
    1148:	80 e2       	ldi	r24, 0x20	; 32
    114a:	01 c0       	rjmp	.+2      	; 0x114e <vfprintf+0x348>
    114c:	8b e2       	ldi	r24, 0x2B	; 43
    114e:	27 fd       	sbrc	r18, 7
    1150:	8d e2       	ldi	r24, 0x2D	; 45
    1152:	b7 01       	movw	r22, r14
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 0e 09 	call	0x121c	; 0x121c <fputc>
    115a:	a5 14       	cp	r10, r5
    115c:	38 f4       	brcc	.+14     	; 0x116c <vfprintf+0x366>
    115e:	b7 01       	movw	r22, r14
    1160:	80 e3       	ldi	r24, 0x30	; 48
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 0e 09 	call	0x121c	; 0x121c <fputc>
    1168:	5a 94       	dec	r5
    116a:	f7 cf       	rjmp	.-18     	; 0x115a <vfprintf+0x354>
    116c:	aa 94       	dec	r10
    116e:	f4 01       	movw	r30, r8
    1170:	ea 0d       	add	r30, r10
    1172:	f1 1d       	adc	r31, r1
    1174:	80 81       	ld	r24, Z
    1176:	b7 01       	movw	r22, r14
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 0e 09 	call	0x121c	; 0x121c <fputc>
    117e:	a1 10       	cpse	r10, r1
    1180:	f5 cf       	rjmp	.-22     	; 0x116c <vfprintf+0x366>
    1182:	33 20       	and	r3, r3
    1184:	09 f4       	brne	.+2      	; 0x1188 <vfprintf+0x382>
    1186:	51 ce       	rjmp	.-862    	; 0xe2a <vfprintf+0x24>
    1188:	b7 01       	movw	r22, r14
    118a:	80 e2       	ldi	r24, 0x20	; 32
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 0e 09 	call	0x121c	; 0x121c <fputc>
    1192:	3a 94       	dec	r3
    1194:	f6 cf       	rjmp	.-20     	; 0x1182 <vfprintf+0x37c>
    1196:	f7 01       	movw	r30, r14
    1198:	86 81       	ldd	r24, Z+6	; 0x06
    119a:	97 81       	ldd	r25, Z+7	; 0x07
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <vfprintf+0x39c>
    119e:	8f ef       	ldi	r24, 0xFF	; 255
    11a0:	9f ef       	ldi	r25, 0xFF	; 255
    11a2:	2c 96       	adiw	r28, 0x0c	; 12
    11a4:	e2 e1       	ldi	r30, 0x12	; 18
    11a6:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__epilogue_restores__>

000011aa <calloc>:
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	86 9f       	mul	r24, r22
    11b4:	80 01       	movw	r16, r0
    11b6:	87 9f       	mul	r24, r23
    11b8:	10 0d       	add	r17, r0
    11ba:	96 9f       	mul	r25, r22
    11bc:	10 0d       	add	r17, r0
    11be:	11 24       	eor	r1, r1
    11c0:	c8 01       	movw	r24, r16
    11c2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <malloc>
    11c6:	ec 01       	movw	r28, r24
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	29 f0       	breq	.+10     	; 0x11d6 <calloc+0x2c>
    11cc:	a8 01       	movw	r20, r16
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <memset>
    11d6:	ce 01       	movw	r24, r28
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	08 95       	ret

000011e2 <strnlen_P>:
    11e2:	fc 01       	movw	r30, r24
    11e4:	05 90       	lpm	r0, Z+
    11e6:	61 50       	subi	r22, 0x01	; 1
    11e8:	70 40       	sbci	r23, 0x00	; 0
    11ea:	01 10       	cpse	r0, r1
    11ec:	d8 f7       	brcc	.-10     	; 0x11e4 <strnlen_P+0x2>
    11ee:	80 95       	com	r24
    11f0:	90 95       	com	r25
    11f2:	8e 0f       	add	r24, r30
    11f4:	9f 1f       	adc	r25, r31
    11f6:	08 95       	ret

000011f8 <memset>:
    11f8:	dc 01       	movw	r26, r24
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <memset+0x6>
    11fc:	6d 93       	st	X+, r22
    11fe:	41 50       	subi	r20, 0x01	; 1
    1200:	50 40       	sbci	r21, 0x00	; 0
    1202:	e0 f7       	brcc	.-8      	; 0x11fc <memset+0x4>
    1204:	08 95       	ret

00001206 <strnlen>:
    1206:	fc 01       	movw	r30, r24
    1208:	61 50       	subi	r22, 0x01	; 1
    120a:	70 40       	sbci	r23, 0x00	; 0
    120c:	01 90       	ld	r0, Z+
    120e:	01 10       	cpse	r0, r1
    1210:	d8 f7       	brcc	.-10     	; 0x1208 <strnlen+0x2>
    1212:	80 95       	com	r24
    1214:	90 95       	com	r25
    1216:	8e 0f       	add	r24, r30
    1218:	9f 1f       	adc	r25, r31
    121a:	08 95       	ret

0000121c <fputc>:
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	18 2f       	mov	r17, r24
    1226:	09 2f       	mov	r16, r25
    1228:	eb 01       	movw	r28, r22
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	81 fd       	sbrc	r24, 1
    122e:	03 c0       	rjmp	.+6      	; 0x1236 <fputc+0x1a>
    1230:	8f ef       	ldi	r24, 0xFF	; 255
    1232:	9f ef       	ldi	r25, 0xFF	; 255
    1234:	20 c0       	rjmp	.+64     	; 0x1276 <fputc+0x5a>
    1236:	82 ff       	sbrs	r24, 2
    1238:	10 c0       	rjmp	.+32     	; 0x125a <fputc+0x3e>
    123a:	4e 81       	ldd	r20, Y+6	; 0x06
    123c:	5f 81       	ldd	r21, Y+7	; 0x07
    123e:	2c 81       	ldd	r18, Y+4	; 0x04
    1240:	3d 81       	ldd	r19, Y+5	; 0x05
    1242:	42 17       	cp	r20, r18
    1244:	53 07       	cpc	r21, r19
    1246:	7c f4       	brge	.+30     	; 0x1266 <fputc+0x4a>
    1248:	e8 81       	ld	r30, Y
    124a:	f9 81       	ldd	r31, Y+1	; 0x01
    124c:	9f 01       	movw	r18, r30
    124e:	2f 5f       	subi	r18, 0xFF	; 255
    1250:	3f 4f       	sbci	r19, 0xFF	; 255
    1252:	39 83       	std	Y+1, r19	; 0x01
    1254:	28 83       	st	Y, r18
    1256:	10 83       	st	Z, r17
    1258:	06 c0       	rjmp	.+12     	; 0x1266 <fputc+0x4a>
    125a:	e8 85       	ldd	r30, Y+8	; 0x08
    125c:	f9 85       	ldd	r31, Y+9	; 0x09
    125e:	81 2f       	mov	r24, r17
    1260:	09 95       	icall
    1262:	89 2b       	or	r24, r25
    1264:	29 f7       	brne	.-54     	; 0x1230 <fputc+0x14>
    1266:	2e 81       	ldd	r18, Y+6	; 0x06
    1268:	3f 81       	ldd	r19, Y+7	; 0x07
    126a:	2f 5f       	subi	r18, 0xFF	; 255
    126c:	3f 4f       	sbci	r19, 0xFF	; 255
    126e:	3f 83       	std	Y+7, r19	; 0x07
    1270:	2e 83       	std	Y+6, r18	; 0x06
    1272:	81 2f       	mov	r24, r17
    1274:	90 2f       	mov	r25, r16
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	08 95       	ret

00001280 <__ultoa_invert>:
    1280:	fa 01       	movw	r30, r20
    1282:	aa 27       	eor	r26, r26
    1284:	28 30       	cpi	r18, 0x08	; 8
    1286:	51 f1       	breq	.+84     	; 0x12dc <__ultoa_invert+0x5c>
    1288:	20 31       	cpi	r18, 0x10	; 16
    128a:	81 f1       	breq	.+96     	; 0x12ec <__ultoa_invert+0x6c>
    128c:	e8 94       	clt
    128e:	6f 93       	push	r22
    1290:	6e 7f       	andi	r22, 0xFE	; 254
    1292:	6e 5f       	subi	r22, 0xFE	; 254
    1294:	7f 4f       	sbci	r23, 0xFF	; 255
    1296:	8f 4f       	sbci	r24, 0xFF	; 255
    1298:	9f 4f       	sbci	r25, 0xFF	; 255
    129a:	af 4f       	sbci	r26, 0xFF	; 255
    129c:	b1 e0       	ldi	r27, 0x01	; 1
    129e:	3e d0       	rcall	.+124    	; 0x131c <__ultoa_invert+0x9c>
    12a0:	b4 e0       	ldi	r27, 0x04	; 4
    12a2:	3c d0       	rcall	.+120    	; 0x131c <__ultoa_invert+0x9c>
    12a4:	67 0f       	add	r22, r23
    12a6:	78 1f       	adc	r23, r24
    12a8:	89 1f       	adc	r24, r25
    12aa:	9a 1f       	adc	r25, r26
    12ac:	a1 1d       	adc	r26, r1
    12ae:	68 0f       	add	r22, r24
    12b0:	79 1f       	adc	r23, r25
    12b2:	8a 1f       	adc	r24, r26
    12b4:	91 1d       	adc	r25, r1
    12b6:	a1 1d       	adc	r26, r1
    12b8:	6a 0f       	add	r22, r26
    12ba:	71 1d       	adc	r23, r1
    12bc:	81 1d       	adc	r24, r1
    12be:	91 1d       	adc	r25, r1
    12c0:	a1 1d       	adc	r26, r1
    12c2:	20 d0       	rcall	.+64     	; 0x1304 <__ultoa_invert+0x84>
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <__ultoa_invert+0x48>
    12c6:	68 94       	set
    12c8:	3f 91       	pop	r19
    12ca:	2a e0       	ldi	r18, 0x0A	; 10
    12cc:	26 9f       	mul	r18, r22
    12ce:	11 24       	eor	r1, r1
    12d0:	30 19       	sub	r19, r0
    12d2:	30 5d       	subi	r19, 0xD0	; 208
    12d4:	31 93       	st	Z+, r19
    12d6:	de f6       	brtc	.-74     	; 0x128e <__ultoa_invert+0xe>
    12d8:	cf 01       	movw	r24, r30
    12da:	08 95       	ret
    12dc:	46 2f       	mov	r20, r22
    12de:	47 70       	andi	r20, 0x07	; 7
    12e0:	40 5d       	subi	r20, 0xD0	; 208
    12e2:	41 93       	st	Z+, r20
    12e4:	b3 e0       	ldi	r27, 0x03	; 3
    12e6:	0f d0       	rcall	.+30     	; 0x1306 <__ultoa_invert+0x86>
    12e8:	c9 f7       	brne	.-14     	; 0x12dc <__ultoa_invert+0x5c>
    12ea:	f6 cf       	rjmp	.-20     	; 0x12d8 <__ultoa_invert+0x58>
    12ec:	46 2f       	mov	r20, r22
    12ee:	4f 70       	andi	r20, 0x0F	; 15
    12f0:	40 5d       	subi	r20, 0xD0	; 208
    12f2:	4a 33       	cpi	r20, 0x3A	; 58
    12f4:	18 f0       	brcs	.+6      	; 0x12fc <__ultoa_invert+0x7c>
    12f6:	49 5d       	subi	r20, 0xD9	; 217
    12f8:	31 fd       	sbrc	r19, 1
    12fa:	40 52       	subi	r20, 0x20	; 32
    12fc:	41 93       	st	Z+, r20
    12fe:	02 d0       	rcall	.+4      	; 0x1304 <__ultoa_invert+0x84>
    1300:	a9 f7       	brne	.-22     	; 0x12ec <__ultoa_invert+0x6c>
    1302:	ea cf       	rjmp	.-44     	; 0x12d8 <__ultoa_invert+0x58>
    1304:	b4 e0       	ldi	r27, 0x04	; 4
    1306:	a6 95       	lsr	r26
    1308:	97 95       	ror	r25
    130a:	87 95       	ror	r24
    130c:	77 95       	ror	r23
    130e:	67 95       	ror	r22
    1310:	ba 95       	dec	r27
    1312:	c9 f7       	brne	.-14     	; 0x1306 <__ultoa_invert+0x86>
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	61 05       	cpc	r22, r1
    1318:	71 05       	cpc	r23, r1
    131a:	08 95       	ret
    131c:	9b 01       	movw	r18, r22
    131e:	ac 01       	movw	r20, r24
    1320:	0a 2e       	mov	r0, r26
    1322:	06 94       	lsr	r0
    1324:	57 95       	ror	r21
    1326:	47 95       	ror	r20
    1328:	37 95       	ror	r19
    132a:	27 95       	ror	r18
    132c:	ba 95       	dec	r27
    132e:	c9 f7       	brne	.-14     	; 0x1322 <__ultoa_invert+0xa2>
    1330:	62 0f       	add	r22, r18
    1332:	73 1f       	adc	r23, r19
    1334:	84 1f       	adc	r24, r20
    1336:	95 1f       	adc	r25, r21
    1338:	a0 1d       	adc	r26, r0
    133a:	08 95       	ret

0000133c <__prologue_saves__>:
    133c:	2f 92       	push	r2
    133e:	3f 92       	push	r3
    1340:	4f 92       	push	r4
    1342:	5f 92       	push	r5
    1344:	6f 92       	push	r6
    1346:	7f 92       	push	r7
    1348:	8f 92       	push	r8
    134a:	9f 92       	push	r9
    134c:	af 92       	push	r10
    134e:	bf 92       	push	r11
    1350:	cf 92       	push	r12
    1352:	df 92       	push	r13
    1354:	ef 92       	push	r14
    1356:	ff 92       	push	r15
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	ca 1b       	sub	r28, r26
    1366:	db 0b       	sbc	r29, r27
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	09 94       	ijmp

00001374 <__epilogue_restores__>:
    1374:	2a 88       	ldd	r2, Y+18	; 0x12
    1376:	39 88       	ldd	r3, Y+17	; 0x11
    1378:	48 88       	ldd	r4, Y+16	; 0x10
    137a:	5f 84       	ldd	r5, Y+15	; 0x0f
    137c:	6e 84       	ldd	r6, Y+14	; 0x0e
    137e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1380:	8c 84       	ldd	r8, Y+12	; 0x0c
    1382:	9b 84       	ldd	r9, Y+11	; 0x0b
    1384:	aa 84       	ldd	r10, Y+10	; 0x0a
    1386:	b9 84       	ldd	r11, Y+9	; 0x09
    1388:	c8 84       	ldd	r12, Y+8	; 0x08
    138a:	df 80       	ldd	r13, Y+7	; 0x07
    138c:	ee 80       	ldd	r14, Y+6	; 0x06
    138e:	fd 80       	ldd	r15, Y+5	; 0x05
    1390:	0c 81       	ldd	r16, Y+4	; 0x04
    1392:	1b 81       	ldd	r17, Y+3	; 0x03
    1394:	aa 81       	ldd	r26, Y+2	; 0x02
    1396:	b9 81       	ldd	r27, Y+1	; 0x01
    1398:	ce 0f       	add	r28, r30
    139a:	d1 1d       	adc	r29, r1
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
    13a6:	ed 01       	movw	r28, r26
    13a8:	08 95       	ret

000013aa <_exit>:
    13aa:	f8 94       	cli

000013ac <__stop_program>:
    13ac:	ff cf       	rjmp	.-2      	; 0x13ac <__stop_program>
