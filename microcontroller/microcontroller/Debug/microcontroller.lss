
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002aa  00800100  000020f4  00002188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  008003aa  008003aa  00002432  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002432  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000400  00000000  00000000  0000248e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004b06  00000000  00000000  0000288e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001a17  00000000  00000000  00007394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000168e  00000000  00000000  00008dab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b2c  00000000  00000000  0000a43c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bdc  00000000  00000000  0000af68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000025d1  00000000  00000000  0000bb44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000360  00000000  00000000  0000e115  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	20 54       	subi	r18, 0x40	; 64
      92:	54 38       	cpi	r21, 0x84	; 132
      94:	54 54       	subi	r21, 0x44	; 68
      96:	58 00       	.word	0x0058	; ????
      98:	38 64       	ori	r19, 0x48	; 72
      9a:	54 54       	subi	r21, 0x44	; 68
      9c:	4c 38       	cpi	r20, 0x8C	; 140
      9e:	00 00       	nop
      a0:	20 50       	subi	r18, 0x00	; 0
      a2:	54 55       	subi	r21, 0x54	; 84
      a4:	54 78       	andi	r21, 0x84	; 132
      a6:	40 00       	.word	0x0040	; ????
      a8:	60 18       	sub	r6, r0
      aa:	16 11       	cpse	r17, r6
      ac:	7f 49       	sbci	r23, 0x9F	; 159
      ae:	49 00       	.word	0x0049	; ????
      b0:	5c 22       	and	r5, r28
      b2:	51 49       	sbci	r21, 0x91	; 145
      b4:	45 22       	and	r4, r21
      b6:	1d 00       	.word	0x001d	; ????
      b8:	60 30       	cpi	r22, 0x00	; 0
      ba:	28 25       	eor	r18, r8
      bc:	28 30       	cpi	r18, 0x08	; 8
      be:	60 00       	.word	0x0060	; ????
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <keyboard_unselect_prev+0x54>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e4 ef       	ldi	r30, 0xF4	; 244
     37c:	f0 e2       	ldi	r31, 0x20	; 32
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 3a       	cpi	r26, 0xAA	; 170
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	aa ea       	ldi	r26, 0xAA	; 170
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a6 3f       	cpi	r26, 0xF6	; 246
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 31 09 	call	0x1262	; 0x1262 <main>
     39e:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
     3a6:	30 98       	cbi	0x06, 0	; 6
     3a8:	08 95       	ret

000003aa <ADC_read>:
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3aa:	84 30       	cpi	r24, 0x04	; 4
     3ac:	40 f4       	brcc	.+16     	; 0x3be <ADC_read+0x14>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
     3ae:	8c 5f       	subi	r24, 0xFC	; 252
     3b0:	80 93 00 14 	sts	0x1400, r24
	
	//wait 'til /INTR is low
	while(test_bit(PINE, PINE0));
     3b4:	28 99       	sbic	0x05, 0	; 5
     3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <ADC_read+0xa>
	//reset interrupt
	inter = 0;
	*/

	//return current value
	return *adc; 
     3b8:	80 91 00 14 	lds	r24, 0x1400
     3bc:	08 95       	ret
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3be:	80 e0       	ldi	r24, 0x00	; 0
	inter = 0;
	*/

	//return current value
	return *adc; 
     3c0:	08 95       	ret

000003c2 <brightness_init>:
#include "joy.h"
#include "OLED_driver.h"
#include "defines.h"


brightness_init() {
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
	OLED_reset();
     3ca:	0e 94 9e 09 	call	0x133c	; 0x133c <OLED_reset>
	fprintf(OLED, "%s ", "l_slider:");
     3ce:	8b e5       	ldi	r24, 0x5B	; 91
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	9f 93       	push	r25
     3d4:	8f 93       	push	r24
     3d6:	05 e6       	ldi	r16, 0x65	; 101
     3d8:	11 e0       	ldi	r17, 0x01	; 1
     3da:	1f 93       	push	r17
     3dc:	0f 93       	push	r16
     3de:	c6 e0       	ldi	r28, 0x06	; 6
     3e0:	d1 e0       	ldi	r29, 0x01	; 1
     3e2:	df 93       	push	r29
     3e4:	cf 93       	push	r28
     3e6:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fprintf>
	OLED_pos(1,0);
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 79 09 	call	0x12f2	; 0x12f2 <OLED_pos>
	fprintf(OLED, "%s ", "sets brightness");
     3f2:	89 e6       	ldi	r24, 0x69	; 105
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	9f 93       	push	r25
     3f8:	8f 93       	push	r24
     3fa:	1f 93       	push	r17
     3fc:	0f 93       	push	r16
     3fe:	df 93       	push	r29
     400:	cf 93       	push	r28
     402:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fprintf>
	OLED_pos(2,0);
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <OLED_pos>
	fprintf(OLED, "%s ", "l_button: back");
     40e:	89 e7       	ldi	r24, 0x79	; 121
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	9f 93       	push	r25
     414:	8f 93       	push	r24
     416:	1f 93       	push	r17
     418:	0f 93       	push	r16
     41a:	df 93       	push	r29
     41c:	cf 93       	push	r28
     41e:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fprintf>
	for (int line = 4; line < 8; line++) {
		OLED_set_line(line);
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	0e 94 04 0a 	call	0x1408	; 0x1408 <OLED_set_line>
     428:	85 e0       	ldi	r24, 0x05	; 5
     42a:	0e 94 04 0a 	call	0x1408	; 0x1408 <OLED_set_line>
     42e:	86 e0       	ldi	r24, 0x06	; 6
     430:	0e 94 04 0a 	call	0x1408	; 0x1408 <OLED_set_line>
     434:	87 e0       	ldi	r24, 0x07	; 7
     436:	0e 94 04 0a 	call	0x1408	; 0x1408 <OLED_set_line>
     43a:	8d b7       	in	r24, 0x3d	; 61
     43c:	9e b7       	in	r25, 0x3e	; 62
     43e:	42 96       	adiw	r24, 0x12	; 18
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	f8 94       	cli
     444:	9e bf       	out	0x3e, r25	; 62
     446:	0f be       	out	0x3f, r0	; 63
     448:	8d bf       	out	0x3d, r24	; 61
	}
	
}
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	1f 91       	pop	r17
     450:	0f 91       	pop	r16
     452:	08 95       	ret

00000454 <brightness_run>:

brightness_run() {
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
	brightness_init();
     45a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <brightness_init>
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
		slider_position = SLI_getPosition();
		//printf("slider_position %d\n", slider_position.right);
		printf("slider_position (left) %d\n", slider_position.left);
     45e:	c8 e8       	ldi	r28, 0x88	; 136
     460:	d1 e0       	ldi	r29, 0x01	; 1
}

brightness_run() {
	brightness_init();
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     462:	10 c0       	rjmp	.+32     	; 0x484 <brightness_run+0x30>
		slider_position = SLI_getPosition();
     464:	0e 94 aa 03 	call	0x754	; 0x754 <SLI_getPosition>
     468:	16 2f       	mov	r17, r22
		//printf("slider_position %d\n", slider_position.right);
		printf("slider_position (left) %d\n", slider_position.left);
     46a:	7f 93       	push	r23
     46c:	6f 93       	push	r22
     46e:	df 93       	push	r29
     470:	cf 93       	push	r28
     472:	0e 94 65 0d 	call	0x1aca	; 0x1aca <printf>
		OLED_set_brightness(slider_position.left); //RIGHT funker ikke
     476:	81 2f       	mov	r24, r17
     478:	0e 94 d5 09 	call	0x13aa	; 0x13aa <OLED_set_brightness>
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
}

brightness_run() {
	brightness_init();
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
     48a:	89 2b       	or	r24, r25
     48c:	59 f3       	breq	.-42     	; 0x464 <brightness_run+0x10>
		slider_position = SLI_getPosition();
		//printf("slider_position %d\n", slider_position.right);
		printf("slider_position (left) %d\n", slider_position.left);
		OLED_set_brightness(slider_position.left); //RIGHT funker ikke
	}
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	08 95       	ret

00000496 <CAN_int_vect>:
     496:	cf 93       	push	r28
     498:	8c e2       	ldi	r24, 0x2C	; 44
     49a:	0e 94 7c 07 	call	0xef8	; 0xef8 <MCP2515_read>
     49e:	c8 2f       	mov	r28, r24
     4a0:	80 ff       	sbrs	r24, 0
     4a2:	0b c0       	rjmp	.+22     	; 0x4ba <CAN_int_vect+0x24>
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	61 e0       	ldi	r22, 0x01	; 1
     4a8:	8c e2       	ldi	r24, 0x2C	; 44
     4aa:	0e 94 8e 07 	call	0xf1c	; 0xf1c <MCP2515_bit_modify>
     4ae:	21 e0       	ldi	r18, 0x01	; 1
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	30 93 ad 03 	sts	0x03AD, r19
     4b6:	20 93 ac 03 	sts	0x03AC, r18
     4ba:	c1 ff       	sbrs	r28, 1
     4bc:	0b c0       	rjmp	.+22     	; 0x4d4 <CAN_int_vect+0x3e>
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	62 e0       	ldi	r22, 0x02	; 2
     4c2:	8c e2       	ldi	r24, 0x2C	; 44
     4c4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <MCP2515_bit_modify>
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	90 93 ab 03 	sts	0x03AB, r25
     4d0:	80 93 aa 03 	sts	0x03AA, r24
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <__vector_1>:
     4d8:	1f 92       	push	r1
     4da:	0f 92       	push	r0
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	0f 92       	push	r0
     4e0:	11 24       	eor	r1, r1
     4e2:	2f 93       	push	r18
     4e4:	3f 93       	push	r19
     4e6:	4f 93       	push	r20
     4e8:	5f 93       	push	r21
     4ea:	6f 93       	push	r22
     4ec:	7f 93       	push	r23
     4ee:	8f 93       	push	r24
     4f0:	9f 93       	push	r25
     4f2:	af 93       	push	r26
     4f4:	bf 93       	push	r27
     4f6:	ef 93       	push	r30
     4f8:	ff 93       	push	r31
     4fa:	0e 94 4b 02 	call	0x496	; 0x496 <CAN_int_vect>
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	bf 91       	pop	r27
     504:	af 91       	pop	r26
     506:	9f 91       	pop	r25
     508:	8f 91       	pop	r24
     50a:	7f 91       	pop	r23
     50c:	6f 91       	pop	r22
     50e:	5f 91       	pop	r21
     510:	4f 91       	pop	r20
     512:	3f 91       	pop	r19
     514:	2f 91       	pop	r18
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <JOY_calibrate>:
	clear_bit(DDRB,PB2);
	clear_bit(SFIOR, PUD);
	JOY_calibrate();
}

void JOY_calibrate(){
     520:	bf 92       	push	r11
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
	max.x = 0;
     532:	10 92 b8 03 	sts	0x03B8, r1
	max.y = 0;
     536:	10 92 b9 03 	sts	0x03B9, r1
	min.x = 255;
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	80 93 bc 03 	sts	0x03BC, r24
	min.y = 255;
     540:	80 93 bd 03 	sts	0x03BD, r24
	uint8_t x;
	uint8_t y;
	OLED_reset();
     544:	0e 94 9e 09 	call	0x133c	; 0x133c <OLED_reset>
	printf("\nMove the joystick to all extreme points.\n");
     548:	83 ea       	ldi	r24, 0xA3	; 163
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <puts>
	printf("Press the joystick when you're done.\n");
     550:	8d ec       	ldi	r24, 0xCD	; 205
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <puts>
	fprintf(OLED, "%s ", "CALIBRATE JOY"); 
     558:	82 ef       	ldi	r24, 0xF2	; 242
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	85 e6       	ldi	r24, 0x65	; 101
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	9f 93       	push	r25
     566:	8f 93       	push	r24
     568:	84 e1       	ldi	r24, 0x14	; 20
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fprintf>
	//check channels 
	while(test_bit(PINB,PINB2)){
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
		// Read sensor values
		x = ADC_read(0);
		y = ADC_read(1);
		
		// Calibrate x
		if (min.x > x) min.x = x; 
     580:	0c eb       	ldi	r16, 0xBC	; 188
     582:	13 e0       	ldi	r17, 0x03	; 3
		else if (max.x < x) max.x = x;
     584:	0f 2e       	mov	r0, r31
     586:	f8 eb       	ldi	r31, 0xB8	; 184
     588:	cf 2e       	mov	r12, r31
     58a:	f3 e0       	ldi	r31, 0x03	; 3
     58c:	df 2e       	mov	r13, r31
     58e:	f0 2d       	mov	r31, r0
		
		// Calibrate y
		if (min.y > y) min.y = y;
     590:	cd eb       	ldi	r28, 0xBD	; 189
     592:	d3 e0       	ldi	r29, 0x03	; 3
		else if (max.y < y) max.y = y;		
     594:	0f 2e       	mov	r0, r31
     596:	f9 eb       	ldi	r31, 0xB9	; 185
     598:	ef 2e       	mov	r14, r31
     59a:	f3 e0       	ldi	r31, 0x03	; 3
     59c:	ff 2e       	mov	r15, r31
     59e:	f0 2d       	mov	r31, r0
	OLED_reset();
	printf("\nMove the joystick to all extreme points.\n");
	printf("Press the joystick when you're done.\n");
	fprintf(OLED, "%s ", "CALIBRATE JOY"); 
	//check channels 
	while(test_bit(PINB,PINB2)){
     5a0:	1c c0       	rjmp	.+56     	; 0x5da <JOY_calibrate+0xba>
		// Read sensor values
		x = ADC_read(0);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     5a8:	b8 2e       	mov	r11, r24
		y = ADC_read(1);
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
		
		// Calibrate x
		if (min.x > x) min.x = x; 
     5b0:	f8 01       	movw	r30, r16
     5b2:	90 81       	ld	r25, Z
     5b4:	b9 16       	cp	r11, r25
     5b6:	10 f4       	brcc	.+4      	; 0x5bc <JOY_calibrate+0x9c>
     5b8:	b0 82       	st	Z, r11
     5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <JOY_calibrate+0xa6>
		else if (max.x < x) max.x = x;
     5bc:	f6 01       	movw	r30, r12
     5be:	90 81       	ld	r25, Z
     5c0:	9b 15       	cp	r25, r11
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <JOY_calibrate+0xa6>
     5c4:	b0 82       	st	Z, r11
		
		// Calibrate y
		if (min.y > y) min.y = y;
     5c6:	98 81       	ld	r25, Y
     5c8:	89 17       	cp	r24, r25
     5ca:	10 f4       	brcc	.+4      	; 0x5d0 <JOY_calibrate+0xb0>
     5cc:	88 83       	st	Y, r24
     5ce:	05 c0       	rjmp	.+10     	; 0x5da <JOY_calibrate+0xba>
		else if (max.y < y) max.y = y;		
     5d0:	f7 01       	movw	r30, r14
     5d2:	90 81       	ld	r25, Z
     5d4:	98 17       	cp	r25, r24
     5d6:	08 f4       	brcc	.+2      	; 0x5da <JOY_calibrate+0xba>
     5d8:	80 83       	st	Z, r24
	OLED_reset();
	printf("\nMove the joystick to all extreme points.\n");
	printf("Press the joystick when you're done.\n");
	fprintf(OLED, "%s ", "CALIBRATE JOY"); 
	//check channels 
	while(test_bit(PINB,PINB2)){
     5da:	b2 99       	sbic	0x16, 2	; 22
     5dc:	e2 cf       	rjmp	.-60     	; 0x5a2 <JOY_calibrate+0x82>
		if (min.y > y) min.y = y;
		else if (max.y < y) max.y = y;		
	}

	// Find distance from middle to edges (radius)
	rad.x = (max.x - min.x) / 2;
     5de:	e0 91 b8 03 	lds	r30, 0x03B8
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	60 91 bc 03 	lds	r22, 0x03BC
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	9f 01       	movw	r18, r30
     5ec:	26 1b       	sub	r18, r22
     5ee:	37 0b       	sbc	r19, r23
     5f0:	c9 01       	movw	r24, r18
     5f2:	99 23       	and	r25, r25
     5f4:	0c f4       	brge	.+2      	; 0x5f8 <JOY_calibrate+0xd8>
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	95 95       	asr	r25
     5fa:	87 95       	ror	r24
     5fc:	80 93 ba 03 	sts	0x03BA, r24
	rad.y = (max.y - min.y) / 2;
     600:	40 91 b9 03 	lds	r20, 0x03B9
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	20 91 bd 03 	lds	r18, 0x03BD
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	da 01       	movw	r26, r20
     60e:	a2 1b       	sub	r26, r18
     610:	b3 0b       	sbc	r27, r19
     612:	cd 01       	movw	r24, r26
     614:	0a f4       	brpl	.+2      	; 0x618 <JOY_calibrate+0xf8>
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	95 95       	asr	r25
     61a:	87 95       	ror	r24
     61c:	80 93 bb 03 	sts	0x03BB, r24
	
	// Find mid point using edges.
	mid.x = (max.x + min.x) / 2;
     620:	6e 0f       	add	r22, r30
     622:	7f 1f       	adc	r23, r31
     624:	75 95       	asr	r23
     626:	67 95       	ror	r22
     628:	60 93 be 03 	sts	0x03BE, r22
	mid.y = (max.y + min.y) / 2;
     62c:	24 0f       	add	r18, r20
     62e:	35 1f       	adc	r19, r21
     630:	35 95       	asr	r19
     632:	27 95       	ror	r18
     634:	20 93 bf 03 	sts	0x03BF, r18
}
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	df 90       	pop	r13
     646:	cf 90       	pop	r12
     648:	bf 90       	pop	r11
     64a:	08 95       	ret

0000064c <JOY_init>:
	uint8_t y;
} max, min, rad, mid;

void JOY_init(){
	//set pull-up resistors on PORTB for JOY_button
	set_bit(PORTB,PB2);
     64c:	c2 9a       	sbi	0x18, 2	; 24
	clear_bit(DDRB,PB2);
     64e:	ba 98       	cbi	0x17, 2	; 23
	clear_bit(SFIOR, PUD);
     650:	80 b7       	in	r24, 0x30	; 48
     652:	8b 7f       	andi	r24, 0xFB	; 251
     654:	80 bf       	out	0x30, r24	; 48
	JOY_calibrate();
     656:	0e 94 90 02 	call	0x520	; 0x520 <JOY_calibrate>
     65a:	08 95       	ret

0000065c <JOY_button_pressed>:
	mid.x = (max.x + min.x) / 2;
	mid.y = (max.y + min.y) / 2;
}

int JOY_button_pressed(button b) {
	switch (b) {
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	41 f0       	breq	.+16     	; 0x670 <JOY_button_pressed+0x14>
     660:	18 f0       	brcs	.+6      	; 0x668 <JOY_button_pressed+0xc>
     662:	82 30       	cpi	r24, 0x02	; 2
     664:	51 f0       	breq	.+20     	; 0x67a <JOY_button_pressed+0x1e>
     666:	11 c0       	rjmp	.+34     	; 0x68a <JOY_button_pressed+0x2e>
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     668:	86 b3       	in	r24, 0x16	; 22
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return 1;
     670:	86 b3       	in	r24, 0x16	; 22
}

int JOY_button_pressed(button b) {
	switch (b) {
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     672:	86 95       	lsr	r24
     674:	81 70       	andi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return 1;
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return 1;
     67a:	86 b3       	in	r24, 0x16	; 22
     67c:	86 95       	lsr	r24
     67e:	86 95       	lsr	r24
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	89 27       	eor	r24, r25
}

int JOY_button_pressed(button b) {
	switch (b) {
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     684:	81 70       	andi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	08 95       	ret
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return 1;
		break;
	}
	return 0;
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
}
     68e:	08 95       	ret

00000690 <JOY_getPosition>:

JOY_position_t JOY_getPosition() {
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
	JOY_position_t JOY_position;
	JOY_position.x = (100 * (ADC_read(X_COORD) - mid.x)) / rad.x;
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     69c:	28 2f       	mov	r18, r24
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	80 91 be 03 	lds	r24, 0x03BE
     6a4:	28 1b       	sub	r18, r24
     6a6:	31 09       	sbc	r19, r1
     6a8:	14 e6       	ldi	r17, 0x64	; 100
     6aa:	12 9f       	mul	r17, r18
     6ac:	c0 01       	movw	r24, r0
     6ae:	13 9f       	mul	r17, r19
     6b0:	90 0d       	add	r25, r0
     6b2:	11 24       	eor	r1, r1
     6b4:	60 91 ba 03 	lds	r22, 0x03BA
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divmodhi4>
     6be:	eb 01       	movw	r28, r22
	JOY_position.y = (100 * (ADC_read(Y_COORD) - mid.y)) / rad.y;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     6c6:	28 2f       	mov	r18, r24
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	80 91 bf 03 	lds	r24, 0x03BF
     6ce:	28 1b       	sub	r18, r24
     6d0:	31 09       	sbc	r19, r1
     6d2:	12 9f       	mul	r17, r18
     6d4:	c0 01       	movw	r24, r0
     6d6:	13 9f       	mul	r17, r19
     6d8:	90 0d       	add	r25, r0
     6da:	11 24       	eor	r1, r1
     6dc:	60 91 bb 03 	lds	r22, 0x03BB
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divmodhi4>
     6e6:	9b 01       	movw	r18, r22
	return JOY_position;
     6e8:	be 01       	movw	r22, r28
     6ea:	c9 01       	movw	r24, r18
}
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	08 95       	ret

000006f4 <JOY_getDirection>:

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
     6f4:	0e 94 48 03 	call	0x690	; 0x690 <JOY_getPosition>
     6f8:	fb 01       	movw	r30, r22
     6fa:	ac 01       	movw	r20, r24
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     6fc:	9b 01       	movw	r18, r22
     6fe:	2c 5f       	subi	r18, 0xFC	; 252
     700:	3f 4f       	sbci	r19, 0xFF	; 255
     702:	29 30       	cpi	r18, 0x09	; 9
     704:	31 05       	cpc	r19, r1
     706:	30 f4       	brcc	.+12     	; 0x714 <JOY_getDirection+0x20>
     708:	9c 01       	movw	r18, r24
     70a:	2c 5f       	subi	r18, 0xFC	; 252
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	29 30       	cpi	r18, 0x09	; 9
     710:	31 05       	cpc	r19, r1
     712:	e0 f0       	brcs	.+56     	; 0x74c <JOY_getDirection+0x58>

	// The x-coordinate is dominating
	else if (abs(position.x) > abs(position.y)) {
     714:	db 01       	movw	r26, r22
     716:	ff 23       	and	r31, r31
     718:	24 f4       	brge	.+8      	; 0x722 <JOY_getDirection+0x2e>
     71a:	aa 27       	eor	r26, r26
     71c:	bb 27       	eor	r27, r27
     71e:	a6 1b       	sub	r26, r22
     720:	b7 0b       	sbc	r27, r23
     722:	9c 01       	movw	r18, r24
     724:	55 23       	and	r21, r21
     726:	24 f4       	brge	.+8      	; 0x730 <JOY_getDirection+0x3c>
     728:	22 27       	eor	r18, r18
     72a:	33 27       	eor	r19, r19
     72c:	28 1b       	sub	r18, r24
     72e:	39 0b       	sbc	r19, r25
     730:	2a 17       	cp	r18, r26
     732:	3b 07       	cpc	r19, r27
     734:	34 f4       	brge	.+12     	; 0x742 <JOY_getDirection+0x4e>
		// Positive x => RIGHT
		if (position.x > 0) return RIGHT;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	1e 16       	cp	r1, r30
     73a:	1f 06       	cpc	r1, r31
     73c:	54 f0       	brlt	.+20     	; 0x752 <JOY_getDirection+0x5e>
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	08 95       	ret
		else return LEFT;

	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
     742:	14 16       	cp	r1, r20
     744:	15 06       	cpc	r1, r21
     746:	24 f4       	brge	.+8      	; 0x750 <JOY_getDirection+0x5c>
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	08 95       	ret

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	08 95       	ret
	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
		// Negative y => DOWN
		else return DOWN;
     750:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     752:	08 95       	ret

00000754 <SLI_getPosition>:

SLI_position_t SLI_getPosition() {
     754:	cf 93       	push	r28
	SLI_position_t pos;
	pos.left = ADC_read(LEFT_CH);
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     75c:	c8 2f       	mov	r28, r24
	pos.right = ADC_read(RIGHT_CH);
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     764:	28 2f       	mov	r18, r24
	return pos;
     766:	6c 2f       	mov	r22, r28
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	82 2f       	mov	r24, r18
     76c:	90 e0       	ldi	r25, 0x00	; 0
}
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <append_char>:

/* HELPER FUNCTION		*/
/************************************/

void append_char(char c) {
	int len = strlen(written_string);
     772:	e0 ec       	ldi	r30, 0xC0	; 192
     774:	f3 e0       	ldi	r31, 0x03	; 3
     776:	01 90       	ld	r0, Z+
     778:	00 20       	and	r0, r0
     77a:	e9 f7       	brne	.-6      	; 0x776 <append_char+0x4>
	written_string[len] = c;
     77c:	31 97       	sbiw	r30, 0x01	; 1
     77e:	80 83       	st	Z, r24
	written_string[len + 1] = '\0';
     780:	11 82       	std	Z+1, r1	; 0x01
	string_position++;
     782:	80 91 b6 03 	lds	r24, 0x03B6
     786:	90 91 b7 03 	lds	r25, 0x03B7
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	90 93 b7 03 	sts	0x03B7, r25
     790:	80 93 b6 03 	sts	0x03B6, r24
     794:	08 95       	ret

00000796 <keyboard_goto>:

}

// 5 lines x 16 columns
void keyboard_goto(int line, int column) {
	OLED_pos(line + 3, (column+2) * 8);
     796:	6e 5f       	subi	r22, 0xFE	; 254
     798:	7f 4f       	sbci	r23, 0xFF	; 255
     79a:	66 0f       	add	r22, r22
     79c:	66 0f       	add	r22, r22
     79e:	66 0f       	add	r22, r22
     7a0:	8d 5f       	subi	r24, 0xFD	; 253
     7a2:	0e 94 79 09 	call	0x12f2	; 0x12f2 <OLED_pos>
     7a6:	08 95       	ret

000007a8 <print_string>:
	written_string[len + 1] = '\0';
	string_position++;
}

void print_string() {
	OLED_home();
     7a8:	0e 94 8b 09 	call	0x1316	; 0x1316 <OLED_home>
	//char print_string[16];
	//memcpy(print_string, written_string[strlen(written_string)-string_position], 16);
	//fprintf(OLED, "%s", print_string);
	fprintf(OLED, "%s", written_string);
     7ac:	64 e2       	ldi	r22, 0x24	; 36
     7ae:	71 e0       	ldi	r23, 0x01	; 1
     7b0:	80 ec       	ldi	r24, 0xC0	; 192
     7b2:	93 e0       	ldi	r25, 0x03	; 3
     7b4:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <fputs>
	keyboard_goto(pos.y, pos.x);
     7b8:	60 91 b2 03 	lds	r22, 0x03B2
     7bc:	70 91 b3 03 	lds	r23, 0x03B3
     7c0:	80 91 b4 03 	lds	r24, 0x03B4
     7c4:	90 91 b5 03 	lds	r25, 0x03B5
     7c8:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto>
     7cc:	08 95       	ret

000007ce <keyboard_goto_line>:
void keyboard_goto(int line, int column) {
	OLED_pos(line + 3, (column+2) * 8);
}

void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto>
     7d6:	08 95       	ret

000007d8 <keyboard_init>:
}

/* FUNCTION IMPLEMENTATIONS			*/
/************************************/

void keyboard_init() {
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
	OLED_reset();
     7e4:	0e 94 9e 09 	call	0x133c	; 0x133c <OLED_reset>
	letters = LETTERS_SMALL;
     7e8:	8c ee       	ldi	r24, 0xEC	; 236
     7ea:	92 e0       	ldi	r25, 0x02	; 2
     7ec:	90 93 23 01 	sts	0x0123, r25
     7f0:	80 93 22 01 	sts	0x0122, r24
	keyboard_goto_line(0);
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <keyboard_goto_line>
	pos.x = 0;
     7fc:	10 92 b3 03 	sts	0x03B3, r1
     800:	10 92 b2 03 	sts	0x03B2, r1
	pos.y = 0;
     804:	10 92 b5 03 	sts	0x03B5, r1
     808:	10 92 b4 03 	sts	0x03B4, r1
	strcpy(written_string, "\0");
     80c:	10 92 c0 03 	sts	0x03C0, r1

	//The first letter is selected by default
	print_char(letters[0], INVERSE);
     810:	e0 91 22 01 	lds	r30, 0x0122
     814:	f0 91 23 01 	lds	r31, 0x0123
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <print_char>

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     822:	c1 e0       	ldi	r28, 0x01	; 1
     824:	d0 e0       	ldi	r29, 0x00	; 0
		if (i % LINE_LENGTH == 0) {
     826:	0c e0       	ldi	r16, 0x0C	; 12
     828:	10 e0       	ldi	r17, 0x00	; 0
			keyboard_goto_line(++pos.y);
     82a:	0f 2e       	mov	r0, r31
     82c:	f4 eb       	ldi	r31, 0xB4	; 180
     82e:	ef 2e       	mov	r14, r31
     830:	f3 e0       	ldi	r31, 0x03	; 3
     832:	ff 2e       	mov	r15, r31
     834:	f0 2d       	mov	r31, r0
     836:	0e c0       	rjmp	.+28     	; 0x854 <keyboard_init+0x7c>
	//The first letter is selected by default
	print_char(letters[0], INVERSE);

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0) {
     838:	ce 01       	movw	r24, r28
     83a:	b8 01       	movw	r22, r16
     83c:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divmodhi4>
     840:	89 2b       	or	r24, r25
     842:	41 f4       	brne	.+16     	; 0x854 <keyboard_init+0x7c>
			keyboard_goto_line(++pos.y);
     844:	f7 01       	movw	r30, r14
     846:	80 81       	ld	r24, Z
     848:	91 81       	ldd	r25, Z+1	; 0x01
     84a:	01 96       	adiw	r24, 0x01	; 1
     84c:	91 83       	std	Z+1, r25	; 0x01
     84e:	80 83       	st	Z, r24
     850:	0e 94 e7 03 	call	0x7ce	; 0x7ce <keyboard_goto_line>
		}
		print_char(letters[i], NORMAL);
     854:	e0 91 22 01 	lds	r30, 0x0122
     858:	f0 91 23 01 	lds	r31, 0x0123
     85c:	ec 0f       	add	r30, r28
     85e:	fd 1f       	adc	r31, r29
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	80 81       	ld	r24, Z
     866:	0e 94 57 0b 	call	0x16ae	; 0x16ae <print_char>

	//The first letter is selected by default
	print_char(letters[0], INVERSE);

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     86a:	21 96       	adiw	r28, 0x01	; 1
     86c:	c0 33       	cpi	r28, 0x30	; 48
     86e:	d1 05       	cpc	r29, r1
     870:	19 f7       	brne	.-58     	; 0x838 <keyboard_init+0x60>
			keyboard_goto_line(++pos.y);
		}
		print_char(letters[i], NORMAL);
	}
	//print the tool buttons
	keyboard_goto_line(4);
     872:	84 e0       	ldi	r24, 0x04	; 4
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 e7 03 	call	0x7ce	; 0x7ce <keyboard_goto_line>
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	40 e0       	ldi	r20, 0x00	; 0
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 3c 0b 	call	0x1678	; 0x1678 <print_options_bar>

	//reset y-position
	pos.y = 0;
     88e:	10 92 b5 03 	sts	0x03B5, r1
     892:	10 92 b4 03 	sts	0x03B4, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     896:	ff ef       	ldi	r31, 0xFF	; 255
     898:	2f e7       	ldi	r18, 0x7F	; 127
     89a:	87 e0       	ldi	r24, 0x07	; 7
     89c:	f1 50       	subi	r31, 0x01	; 1
     89e:	20 40       	sbci	r18, 0x00	; 0
     8a0:	80 40       	sbci	r24, 0x00	; 0
     8a2:	e1 f7       	brne	.-8      	; 0x89c <keyboard_init+0xc4>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <keyboard_init+0xce>
     8a6:	00 00       	nop

	//ignore button pressed right away
	_delay_ms(500);

}
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	08 95       	ret

000008b6 <keyboard_print>:


void keyboard_print() {
     8b6:	cf 92       	push	r12
     8b8:	df 92       	push	r13
     8ba:	ef 92       	push	r14
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
	keyboard_goto_line(0);
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 e7 03 	call	0x7ce	; 0x7ce <keyboard_goto_line>
	pos.y = 0;
     8ce:	10 92 b5 03 	sts	0x03B5, r1
     8d2:	10 92 b4 03 	sts	0x03B4, r1
     8d6:	01 e0       	ldi	r16, 0x01	; 1
     8d8:	10 e0       	ldi	r17, 0x00	; 0
     8da:	c0 e0       	ldi	r28, 0x00	; 0
     8dc:	d0 e0       	ldi	r29, 0x00	; 0
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
     8de:	0f 2e       	mov	r0, r31
     8e0:	fc e0       	ldi	r31, 0x0C	; 12
     8e2:	ef 2e       	mov	r14, r31
     8e4:	f1 2c       	mov	r15, r1
     8e6:	f0 2d       	mov	r31, r0
			keyboard_goto_line(++pos.y);
     8e8:	0f 2e       	mov	r0, r31
     8ea:	f4 eb       	ldi	r31, 0xB4	; 180
     8ec:	cf 2e       	mov	r12, r31
     8ee:	f3 e0       	ldi	r31, 0x03	; 3
     8f0:	df 2e       	mov	r13, r31
     8f2:	f0 2d       	mov	r31, r0
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <keyboard_print+0x46>
     8f6:	21 96       	adiw	r28, 0x01	; 1
     8f8:	0f 5f       	subi	r16, 0xFF	; 255
     8fa:	1f 4f       	sbci	r17, 0xFF	; 255
void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
     8fc:	ce 01       	movw	r24, r28
     8fe:	b7 01       	movw	r22, r14
     900:	0e 94 90 0b 	call	0x1720	; 0x1720 <__divmodhi4>
     904:	89 2b       	or	r24, r25
     906:	51 f4       	brne	.+20     	; 0x91c <keyboard_print+0x66>
     908:	20 97       	sbiw	r28, 0x00	; 0
     90a:	29 f1       	breq	.+74     	; 0x956 <keyboard_print+0xa0>
			keyboard_goto_line(++pos.y);
     90c:	f6 01       	movw	r30, r12
     90e:	80 81       	ld	r24, Z
     910:	91 81       	ldd	r25, Z+1	; 0x01
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	91 83       	std	Z+1, r25	; 0x01
     916:	80 83       	st	Z, r24
     918:	0e 94 e7 03 	call	0x7ce	; 0x7ce <keyboard_goto_line>
		}
		print_char(letters[i], NORMAL);
     91c:	e0 91 22 01 	lds	r30, 0x0122
     920:	f0 91 23 01 	lds	r31, 0x0123
     924:	ec 0f       	add	r30, r28
     926:	fd 1f       	adc	r31, r29
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <print_char>

void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
     932:	00 33       	cpi	r16, 0x30	; 48
     934:	11 05       	cpc	r17, r1
     936:	fc f2       	brlt	.-66     	; 0x8f6 <keyboard_print+0x40>
			keyboard_goto_line(++pos.y);
		}
		print_char(letters[i], NORMAL);
	}
	//print the tool buttons
	keyboard_goto_line(4);
     938:	84 e0       	ldi	r24, 0x04	; 4
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <keyboard_goto_line>
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 3c 0b 	call	0x1678	; 0x1678 <print_options_bar>
     954:	0c c0       	rjmp	.+24     	; 0x96e <keyboard_print+0xb8>
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
			keyboard_goto_line(++pos.y);
		}
		print_char(letters[i], NORMAL);
     956:	e0 91 22 01 	lds	r30, 0x0122
     95a:	f0 91 23 01 	lds	r31, 0x0123
     95e:	ec 0f       	add	r30, r28
     960:	fd 1f       	adc	r31, r29
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	80 81       	ld	r24, Z
     968:	0e 94 57 0b 	call	0x16ae	; 0x16ae <print_char>
     96c:	c4 cf       	rjmp	.-120    	; 0x8f6 <keyboard_print+0x40>
	//print the tool buttons
	keyboard_goto_line(4);
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);


}
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	df 90       	pop	r13
     97c:	cf 90       	pop	r12
     97e:	08 95       	ret

00000980 <toggle_shift>:
void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
	}

void toggle_shift() {
	if (letters == LETTERS_SMALL) {
     980:	80 91 22 01 	lds	r24, 0x0122
     984:	90 91 23 01 	lds	r25, 0x0123
     988:	8c 5e       	subi	r24, 0xEC	; 236
     98a:	92 40       	sbci	r25, 0x02	; 2
     98c:	39 f4       	brne	.+14     	; 0x99c <toggle_shift+0x1c>
		letters = LETTERS_BIG;
     98e:	8c eb       	ldi	r24, 0xBC	; 188
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	90 93 23 01 	sts	0x0123, r25
     996:	80 93 22 01 	sts	0x0122, r24
     99a:	06 c0       	rjmp	.+12     	; 0x9a8 <toggle_shift+0x28>
	}
	else {
		letters = LETTERS_SMALL;
     99c:	8c ee       	ldi	r24, 0xEC	; 236
     99e:	92 e0       	ldi	r25, 0x02	; 2
     9a0:	90 93 23 01 	sts	0x0123, r25
     9a4:	80 93 22 01 	sts	0x0122, r24
	}

	keyboard_print();
     9a8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <keyboard_print>
	keyboard_goto_line(4);
     9ac:	84 e0       	ldi	r24, 0x04	; 4
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <keyboard_goto_line>
	print_shift(INVERSE);
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <print_shift>
		
	pos.y = 4;
     9bc:	84 e0       	ldi	r24, 0x04	; 4
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	90 93 b5 03 	sts	0x03B5, r25
     9c4:	80 93 b4 03 	sts	0x03B4, r24
	pos.x = 0;
     9c8:	10 92 b3 03 	sts	0x03B3, r1
     9cc:	10 92 b2 03 	sts	0x03B2, r1
     9d0:	08 95       	ret

000009d2 <keyboard_register_position_change>:
}

void keyboard_register_position_change(JOY_direction_t direction) {
	if (direction == NEUTRAL);
     9d2:	84 30       	cpi	r24, 0x04	; 4
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <keyboard_register_position_change+0x6>
     9d6:	8a c0       	rjmp	.+276    	; 0xaec <keyboard_register_position_change+0x11a>
	else if (direction == DOWN && pos.y < 4) {
     9d8:	83 30       	cpi	r24, 0x03	; 3
     9da:	91 f4       	brne	.+36     	; 0xa00 <keyboard_register_position_change+0x2e>
     9dc:	20 91 b4 03 	lds	r18, 0x03B4
     9e0:	30 91 b5 03 	lds	r19, 0x03B5
     9e4:	24 30       	cpi	r18, 0x04	; 4
     9e6:	31 05       	cpc	r19, r1
     9e8:	bc f5       	brge	.+110    	; 0xa58 <keyboard_register_position_change+0x86>
		prev_pos.y = pos.y++;
     9ea:	c9 01       	movw	r24, r18
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	90 93 b5 03 	sts	0x03B5, r25
     9f2:	80 93 b4 03 	sts	0x03B4, r24
     9f6:	30 93 b1 03 	sts	0x03B1, r19
     9fa:	20 93 b0 03 	sts	0x03B0, r18
     9fe:	08 95       	ret
	}
	else if (direction == UP && pos.y > 0) {
     a00:	82 30       	cpi	r24, 0x02	; 2
     a02:	a1 f4       	brne	.+40     	; 0xa2c <keyboard_register_position_change+0x5a>
     a04:	80 91 b4 03 	lds	r24, 0x03B4
     a08:	90 91 b5 03 	lds	r25, 0x03B5
     a0c:	18 16       	cp	r1, r24
     a0e:	19 06       	cpc	r1, r25
     a10:	0c f0       	brlt	.+2      	; 0xa14 <keyboard_register_position_change+0x42>
     a12:	6c c0       	rjmp	.+216    	; 0xaec <keyboard_register_position_change+0x11a>
		prev_pos.y = pos.y--;
     a14:	9c 01       	movw	r18, r24
     a16:	21 50       	subi	r18, 0x01	; 1
     a18:	31 09       	sbc	r19, r1
     a1a:	30 93 b5 03 	sts	0x03B5, r19
     a1e:	20 93 b4 03 	sts	0x03B4, r18
     a22:	90 93 b1 03 	sts	0x03B1, r25
     a26:	80 93 b0 03 	sts	0x03B0, r24
     a2a:	08 95       	ret
	}
	else if (direction == LEFT && pos.x > 0) {
     a2c:	81 11       	cpse	r24, r1
     a2e:	14 c0       	rjmp	.+40     	; 0xa58 <keyboard_register_position_change+0x86>
     a30:	80 91 b2 03 	lds	r24, 0x03B2
     a34:	90 91 b3 03 	lds	r25, 0x03B3
     a38:	18 16       	cp	r1, r24
     a3a:	19 06       	cpc	r1, r25
     a3c:	0c f0       	brlt	.+2      	; 0xa40 <keyboard_register_position_change+0x6e>
     a3e:	56 c0       	rjmp	.+172    	; 0xaec <keyboard_register_position_change+0x11a>
		prev_pos.x = pos.x--;
     a40:	9c 01       	movw	r18, r24
     a42:	21 50       	subi	r18, 0x01	; 1
     a44:	31 09       	sbc	r19, r1
     a46:	30 93 b3 03 	sts	0x03B3, r19
     a4a:	20 93 b2 03 	sts	0x03B2, r18
     a4e:	90 93 af 03 	sts	0x03AF, r25
     a52:	80 93 ae 03 	sts	0x03AE, r24
     a56:	08 95       	ret
	}
	else if (direction == RIGHT && pos.x < LINE_LENGTH - 1) {
     a58:	81 30       	cpi	r24, 0x01	; 1
     a5a:	09 f0       	breq	.+2      	; 0xa5e <keyboard_register_position_change+0x8c>
     a5c:	47 c0       	rjmp	.+142    	; 0xaec <keyboard_register_position_change+0x11a>
     a5e:	80 91 b2 03 	lds	r24, 0x03B2
     a62:	90 91 b3 03 	lds	r25, 0x03B3
     a66:	8b 30       	cpi	r24, 0x0B	; 11
     a68:	91 05       	cpc	r25, r1
     a6a:	0c f0       	brlt	.+2      	; 0xa6e <keyboard_register_position_change+0x9c>
     a6c:	3f c0       	rjmp	.+126    	; 0xaec <keyboard_register_position_change+0x11a>

		if (pos.y == 4) {
     a6e:	20 91 b4 03 	lds	r18, 0x03B4
     a72:	30 91 b5 03 	lds	r19, 0x03B5
     a76:	24 30       	cpi	r18, 0x04	; 4
     a78:	31 05       	cpc	r19, r1
     a7a:	69 f5       	brne	.+90     	; 0xad6 <keyboard_register_position_change+0x104>
			if (pos.x < 2) {
     a7c:	82 30       	cpi	r24, 0x02	; 2
     a7e:	91 05       	cpc	r25, r1
     a80:	5c f4       	brge	.+22     	; 0xa98 <keyboard_register_position_change+0xc6>
				prev_pos.x = 0;
     a82:	10 92 af 03 	sts	0x03AF, r1
     a86:	10 92 ae 03 	sts	0x03AE, r1
				pos.x = 2;
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	90 93 b3 03 	sts	0x03B3, r25
     a92:	80 93 b2 03 	sts	0x03B2, r24
     a96:	08 95       	ret
			}
			else if (pos.x < 8) {
     a98:	88 30       	cpi	r24, 0x08	; 8
     a9a:	91 05       	cpc	r25, r1
     a9c:	6c f4       	brge	.+26     	; 0xab8 <keyboard_register_position_change+0xe6>
				prev_pos.x = 2;
     a9e:	82 e0       	ldi	r24, 0x02	; 2
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	90 93 af 03 	sts	0x03AF, r25
     aa6:	80 93 ae 03 	sts	0x03AE, r24
				pos.x = 8;
     aaa:	88 e0       	ldi	r24, 0x08	; 8
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	90 93 b3 03 	sts	0x03B3, r25
     ab2:	80 93 b2 03 	sts	0x03B2, r24
     ab6:	08 95       	ret
			}
			else if (pos.x < 10) {
     ab8:	0a 97       	sbiw	r24, 0x0a	; 10
     aba:	c4 f4       	brge	.+48     	; 0xaec <keyboard_register_position_change+0x11a>
				prev_pos.x = 8;
     abc:	88 e0       	ldi	r24, 0x08	; 8
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	90 93 af 03 	sts	0x03AF, r25
     ac4:	80 93 ae 03 	sts	0x03AE, r24
				pos.x = 10;
     ac8:	8a e0       	ldi	r24, 0x0A	; 10
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	90 93 b3 03 	sts	0x03B3, r25
     ad0:	80 93 b2 03 	sts	0x03B2, r24
     ad4:	08 95       	ret
			}
		}
		else {
			prev_pos.x = pos.x++;
     ad6:	9c 01       	movw	r18, r24
     ad8:	2f 5f       	subi	r18, 0xFF	; 255
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	30 93 b3 03 	sts	0x03B3, r19
     ae0:	20 93 b2 03 	sts	0x03B2, r18
     ae4:	90 93 af 03 	sts	0x03AF, r25
     ae8:	80 93 ae 03 	sts	0x03AE, r24
     aec:	08 95       	ret

00000aee <keyboard_unselect_prev>:
}


void keyboard_unselect_prev() {
	//old item is a letter
	if (prev_pos.y < 4) {
     aee:	80 91 b0 03 	lds	r24, 0x03B0
     af2:	90 91 b1 03 	lds	r25, 0x03B1
     af6:	84 30       	cpi	r24, 0x04	; 4
     af8:	91 05       	cpc	r25, r1
     afa:	34 f5       	brge	.+76     	; 0xb48 <keyboard_unselect_prev+0x5a>
		keyboard_goto(prev_pos.y, prev_pos.x);
     afc:	60 91 ae 03 	lds	r22, 0x03AE
     b00:	70 91 af 03 	lds	r23, 0x03AF
     b04:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto>
		print_char(letters[prev_pos.y * LINE_LENGTH + prev_pos.x], NORMAL);
     b08:	80 91 b0 03 	lds	r24, 0x03B0
     b0c:	90 91 b1 03 	lds	r25, 0x03B1
     b10:	fc 01       	movw	r30, r24
     b12:	ee 0f       	add	r30, r30
     b14:	ff 1f       	adc	r31, r31
     b16:	8e 0f       	add	r24, r30
     b18:	9f 1f       	adc	r25, r31
     b1a:	fc 01       	movw	r30, r24
     b1c:	ee 0f       	add	r30, r30
     b1e:	ff 1f       	adc	r31, r31
     b20:	ee 0f       	add	r30, r30
     b22:	ff 1f       	adc	r31, r31
     b24:	20 91 ae 03 	lds	r18, 0x03AE
     b28:	30 91 af 03 	lds	r19, 0x03AF
     b2c:	e2 0f       	add	r30, r18
     b2e:	f3 1f       	adc	r31, r19
     b30:	80 91 22 01 	lds	r24, 0x0122
     b34:	90 91 23 01 	lds	r25, 0x0123
     b38:	e8 0f       	add	r30, r24
     b3a:	f9 1f       	adc	r31, r25
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	0e 94 57 0b 	call	0x16ae	; 0x16ae <print_char>
     b46:	08 95       	ret
	}

	//old item is in toolbar
	else {
		if (prev_pos.x < 2) {
     b48:	20 91 ae 03 	lds	r18, 0x03AE
     b4c:	30 91 af 03 	lds	r19, 0x03AF
     b50:	22 30       	cpi	r18, 0x02	; 2
     b52:	31 05       	cpc	r19, r1
     b54:	6c f4       	brge	.+26     	; 0xb70 <keyboard_unselect_prev+0x82>
			prev_pos.x = 0;
     b56:	10 92 af 03 	sts	0x03AF, r1
     b5a:	10 92 ae 03 	sts	0x03AE, r1
			keyboard_goto(prev_pos.y, prev_pos.x);
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto>
			print_shift(NORMAL);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <print_shift>
     b6e:	08 95       	ret
		}
		else if (prev_pos.x < 8) {
     b70:	28 30       	cpi	r18, 0x08	; 8
     b72:	31 05       	cpc	r19, r1
     b74:	7c f4       	brge	.+30     	; 0xb94 <keyboard_unselect_prev+0xa6>
			prev_pos.x = 2; //start of spacebar
     b76:	22 e0       	ldi	r18, 0x02	; 2
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	30 93 af 03 	sts	0x03AF, r19
     b7e:	20 93 ae 03 	sts	0x03AE, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
     b82:	62 e0       	ldi	r22, 0x02	; 2
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto>
			print_spacebar(NORMAL);
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 02 0b 	call	0x1604	; 0x1604 <print_spacebar>
     b92:	08 95       	ret
		}
		else if (prev_pos.x < 10) {
     b94:	2a 30       	cpi	r18, 0x0A	; 10
     b96:	31 05       	cpc	r19, r1
     b98:	7c f4       	brge	.+30     	; 0xbb8 <keyboard_unselect_prev+0xca>
			prev_pos.x = 8; //start of left arrow
     b9a:	28 e0       	ldi	r18, 0x08	; 8
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	30 93 af 03 	sts	0x03AF, r19
     ba2:	20 93 ae 03 	sts	0x03AE, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
     ba6:	68 e0       	ldi	r22, 0x08	; 8
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto>
			print_left_arrow(NORMAL);
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 aa 0a 	call	0x1554	; 0x1554 <print_left_arrow>
     bb6:	08 95       	ret
		}
		else {
			prev_pos.x = 10; //start of right arrow
     bb8:	2a e0       	ldi	r18, 0x0A	; 10
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	30 93 af 03 	sts	0x03AF, r19
     bc0:	20 93 ae 03 	sts	0x03AE, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
     bc4:	6a e0       	ldi	r22, 0x0A	; 10
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto>
			print_right_arrow(NORMAL);
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <print_right_arrow>
     bd4:	08 95       	ret

00000bd6 <keyboard_select_curr>:
	}
}

void keyboard_select_curr() {
	//selected item is a letter
	if (pos.y < 4) {
     bd6:	80 91 b4 03 	lds	r24, 0x03B4
     bda:	90 91 b5 03 	lds	r25, 0x03B5
     bde:	84 30       	cpi	r24, 0x04	; 4
     be0:	91 05       	cpc	r25, r1
     be2:	34 f5       	brge	.+76     	; 0xc30 <keyboard_select_curr+0x5a>
		keyboard_goto(pos.y, pos.x);
     be4:	60 91 b2 03 	lds	r22, 0x03B2
     be8:	70 91 b3 03 	lds	r23, 0x03B3
     bec:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto>
		print_char(letters[pos.y * LINE_LENGTH + pos.x], INVERSE);
     bf0:	80 91 b4 03 	lds	r24, 0x03B4
     bf4:	90 91 b5 03 	lds	r25, 0x03B5
     bf8:	fc 01       	movw	r30, r24
     bfa:	ee 0f       	add	r30, r30
     bfc:	ff 1f       	adc	r31, r31
     bfe:	8e 0f       	add	r24, r30
     c00:	9f 1f       	adc	r25, r31
     c02:	fc 01       	movw	r30, r24
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	20 91 b2 03 	lds	r18, 0x03B2
     c10:	30 91 b3 03 	lds	r19, 0x03B3
     c14:	e2 0f       	add	r30, r18
     c16:	f3 1f       	adc	r31, r19
     c18:	80 91 22 01 	lds	r24, 0x0122
     c1c:	90 91 23 01 	lds	r25, 0x0123
     c20:	e8 0f       	add	r30, r24
     c22:	f9 1f       	adc	r31, r25
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <print_char>
     c2e:	08 95       	ret
	}

	//selected menu item is in toolbar
	else {
		if (pos.x < 2) {
     c30:	20 91 b2 03 	lds	r18, 0x03B2
     c34:	30 91 b3 03 	lds	r19, 0x03B3
     c38:	22 30       	cpi	r18, 0x02	; 2
     c3a:	31 05       	cpc	r19, r1
     c3c:	6c f4       	brge	.+26     	; 0xc58 <keyboard_select_curr+0x82>
			pos.x = 0;
     c3e:	10 92 b3 03 	sts	0x03B3, r1
     c42:	10 92 b2 03 	sts	0x03B2, r1
			keyboard_goto(pos.y, pos.x);
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto>
			print_shift(INVERSE);
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <print_shift>
     c56:	08 95       	ret
		}
		else if (pos.x < 8) {
     c58:	28 30       	cpi	r18, 0x08	; 8
     c5a:	31 05       	cpc	r19, r1
     c5c:	7c f4       	brge	.+30     	; 0xc7c <keyboard_select_curr+0xa6>
			pos.x = 2; //start of spacebar
     c5e:	22 e0       	ldi	r18, 0x02	; 2
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	30 93 b3 03 	sts	0x03B3, r19
     c66:	20 93 b2 03 	sts	0x03B2, r18
			keyboard_goto(pos.y, pos.x);
     c6a:	62 e0       	ldi	r22, 0x02	; 2
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto>
			print_spacebar(INVERSE);
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 02 0b 	call	0x1604	; 0x1604 <print_spacebar>
     c7a:	08 95       	ret
		}
		else if (pos.x < 10) {
     c7c:	2a 30       	cpi	r18, 0x0A	; 10
     c7e:	31 05       	cpc	r19, r1
     c80:	7c f4       	brge	.+30     	; 0xca0 <keyboard_select_curr+0xca>
			pos.x = 8; //start of left arrow
     c82:	28 e0       	ldi	r18, 0x08	; 8
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	30 93 b3 03 	sts	0x03B3, r19
     c8a:	20 93 b2 03 	sts	0x03B2, r18
			keyboard_goto(pos.y, pos.x);
     c8e:	68 e0       	ldi	r22, 0x08	; 8
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto>
			print_left_arrow(INVERSE);
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <print_left_arrow>
     c9e:	08 95       	ret
		}
		else {
			pos.x = 10; //start of right arrow
     ca0:	2a e0       	ldi	r18, 0x0A	; 10
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	30 93 b3 03 	sts	0x03B3, r19
     ca8:	20 93 b2 03 	sts	0x03B2, r18
			keyboard_goto(pos.y, pos.x);
     cac:	6a e0       	ldi	r22, 0x0A	; 10
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	0e 94 cb 03 	call	0x796	; 0x796 <keyboard_goto>
			print_right_arrow(INVERSE);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <print_right_arrow>
     cbc:	08 95       	ret

00000cbe <keyboard_item_pressed>:
	}
}


void keyboard_item_pressed() {
	if (pos.y < 4) {
     cbe:	80 91 b4 03 	lds	r24, 0x03B4
     cc2:	90 91 b5 03 	lds	r25, 0x03B5
     cc6:	84 30       	cpi	r24, 0x04	; 4
     cc8:	91 05       	cpc	r25, r1
     cca:	e4 f4       	brge	.+56     	; 0xd04 <keyboard_item_pressed+0x46>
		append_char(letters[pos.y * LINE_LENGTH + pos.x]);
     ccc:	fc 01       	movw	r30, r24
     cce:	ee 0f       	add	r30, r30
     cd0:	ff 1f       	adc	r31, r31
     cd2:	8e 0f       	add	r24, r30
     cd4:	9f 1f       	adc	r25, r31
     cd6:	fc 01       	movw	r30, r24
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	ee 0f       	add	r30, r30
     cde:	ff 1f       	adc	r31, r31
     ce0:	20 91 b2 03 	lds	r18, 0x03B2
     ce4:	30 91 b3 03 	lds	r19, 0x03B3
     ce8:	e2 0f       	add	r30, r18
     cea:	f3 1f       	adc	r31, r19
     cec:	80 91 22 01 	lds	r24, 0x0122
     cf0:	90 91 23 01 	lds	r25, 0x0123
     cf4:	e8 0f       	add	r30, r24
     cf6:	f9 1f       	adc	r31, r25
     cf8:	80 81       	ld	r24, Z
     cfa:	0e 94 b9 03 	call	0x772	; 0x772 <append_char>
		//printf("APPEND written string: %s", written_string);
		//replace with a print function that remembers which part is printed, used with < >
		print_string();
     cfe:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <print_string>
     d02:	08 95       	ret
	}
	else {
		if (pos.x < 2) {
     d04:	80 91 b2 03 	lds	r24, 0x03B2
     d08:	90 91 b3 03 	lds	r25, 0x03B3
     d0c:	82 30       	cpi	r24, 0x02	; 2
     d0e:	91 05       	cpc	r25, r1
     d10:	1c f4       	brge	.+6      	; 0xd18 <keyboard_item_pressed+0x5a>
			toggle_shift();
     d12:	0e 94 c0 04 	call	0x980	; 0x980 <toggle_shift>
     d16:	08 95       	ret
		}
		else if (pos.x < 8) {
     d18:	88 30       	cpi	r24, 0x08	; 8
     d1a:	91 05       	cpc	r25, r1
     d1c:	34 f4       	brge	.+12     	; 0xd2a <keyboard_item_pressed+0x6c>
			append_char(32);
     d1e:	80 e2       	ldi	r24, 0x20	; 32
     d20:	0e 94 b9 03 	call	0x772	; 0x772 <append_char>
			print_string();
     d24:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <print_string>
     d28:	08 95       	ret
		}
		
		//last two probably not working
		else if (pos.x < 10 && string_position > 0) {
     d2a:	8a 30       	cpi	r24, 0x0A	; 10
     d2c:	91 05       	cpc	r25, r1
     d2e:	74 f4       	brge	.+28     	; 0xd4c <keyboard_item_pressed+0x8e>
     d30:	20 91 b6 03 	lds	r18, 0x03B6
     d34:	30 91 b7 03 	lds	r19, 0x03B7
     d38:	12 16       	cp	r1, r18
     d3a:	13 06       	cpc	r1, r19
     d3c:	3c f4       	brge	.+14     	; 0xd4c <keyboard_item_pressed+0x8e>
			string_position--;
     d3e:	21 50       	subi	r18, 0x01	; 1
     d40:	31 09       	sbc	r19, r1
     d42:	30 93 b7 03 	sts	0x03B7, r19
     d46:	20 93 b6 03 	sts	0x03B6, r18
     d4a:	08 95       	ret
		}
		else if (pos.x < 12 && string_position < strlen(written_string)) {
     d4c:	0c 97       	sbiw	r24, 0x0c	; 12
     d4e:	a4 f4       	brge	.+40     	; 0xd78 <keyboard_item_pressed+0xba>
     d50:	80 91 b6 03 	lds	r24, 0x03B6
     d54:	90 91 b7 03 	lds	r25, 0x03B7
     d58:	e0 ec       	ldi	r30, 0xC0	; 192
     d5a:	f3 e0       	ldi	r31, 0x03	; 3
     d5c:	01 90       	ld	r0, Z+
     d5e:	00 20       	and	r0, r0
     d60:	e9 f7       	brne	.-6      	; 0xd5c <keyboard_item_pressed+0x9e>
     d62:	31 97       	sbiw	r30, 0x01	; 1
     d64:	e0 5c       	subi	r30, 0xC0	; 192
     d66:	f3 40       	sbci	r31, 0x03	; 3
     d68:	8e 17       	cp	r24, r30
     d6a:	9f 07       	cpc	r25, r31
     d6c:	28 f4       	brcc	.+10     	; 0xd78 <keyboard_item_pressed+0xba>
			string_position++;
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	90 93 b7 03 	sts	0x03B7, r25
     d74:	80 93 b6 03 	sts	0x03B6, r24
     d78:	08 95       	ret

00000d7a <keyboard_run>:
	}
}



void keyboard_run() {
     d7a:	4f 92       	push	r4
     d7c:	5f 92       	push	r5
     d7e:	6f 92       	push	r6
     d80:	7f 92       	push	r7
     d82:	8f 92       	push	r8
     d84:	9f 92       	push	r9
     d86:	af 92       	push	r10
     d88:	bf 92       	push	r11
     d8a:	cf 92       	push	r12
     d8c:	df 92       	push	r13
     d8e:	ef 92       	push	r14
     d90:	ff 92       	push	r15
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
	keyboard_init();
     d9a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <keyboard_init>
	printf("ughb\n");
     d9e:	81 e8       	ldi	r24, 0x81	; 129
     da0:	92 e0       	ldi	r25, 0x02	; 2
     da2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <puts>
	while (!JOY_button_pressed(LEFT_BUTTON)) {
		//Check if we switch letter
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
     da6:	0f 2e       	mov	r0, r31
     da8:	f0 eb       	ldi	r31, 0xB0	; 176
     daa:	af 2e       	mov	r10, r31
     dac:	f3 e0       	ldi	r31, 0x03	; 3
     dae:	bf 2e       	mov	r11, r31
     db0:	f0 2d       	mov	r31, r0
     db2:	0f 2e       	mov	r0, r31
     db4:	f4 eb       	ldi	r31, 0xB4	; 180
     db6:	cf 2e       	mov	r12, r31
     db8:	f3 e0       	ldi	r31, 0x03	; 3
     dba:	df 2e       	mov	r13, r31
     dbc:	f0 2d       	mov	r31, r0
			printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
     dbe:	0f 2e       	mov	r0, r31
     dc0:	f2 eb       	ldi	r31, 0xB2	; 178
     dc2:	ef 2e       	mov	r14, r31
     dc4:	f3 e0       	ldi	r31, 0x03	; 3
     dc6:	ff 2e       	mov	r15, r31
     dc8:	f0 2d       	mov	r31, r0
     dca:	0e ea       	ldi	r16, 0xAE	; 174
     dcc:	13 e0       	ldi	r17, 0x03	; 3
     dce:	0f 2e       	mov	r0, r31
     dd0:	f6 e8       	ldi	r31, 0x86	; 134
     dd2:	8f 2e       	mov	r8, r31
     dd4:	f2 e0       	ldi	r31, 0x02	; 2
     dd6:	9f 2e       	mov	r9, r31
     dd8:	f0 2d       	mov	r31, r0
			position_moved = 1;
     dda:	66 24       	eor	r6, r6
     ddc:	63 94       	inc	r6
     dde:	71 2c       	mov	r7, r1
     de0:	41 2c       	mov	r4, r1
     de2:	51 2c       	mov	r5, r1

	//detect changes
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
     de4:	72 c0       	rjmp	.+228    	; 0xeca <keyboard_run+0x150>
		//Check if we switch letter
		direction = JOY_getDirection();
     de6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <JOY_getDirection>
		keyboard_register_position_change(direction);
     dea:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <keyboard_register_position_change>
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
     dee:	f5 01       	movw	r30, r10
     df0:	80 81       	ld	r24, Z
     df2:	91 81       	ldd	r25, Z+1	; 0x01
     df4:	f6 01       	movw	r30, r12
     df6:	20 81       	ld	r18, Z
     df8:	31 81       	ldd	r19, Z+1	; 0x01
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	49 f4       	brne	.+18     	; 0xe12 <keyboard_run+0x98>
     e00:	f8 01       	movw	r30, r16
     e02:	60 81       	ld	r22, Z
     e04:	71 81       	ldd	r23, Z+1	; 0x01
     e06:	f7 01       	movw	r30, r14
     e08:	40 81       	ld	r20, Z
     e0a:	51 81       	ldd	r21, Z+1	; 0x01
     e0c:	64 17       	cp	r22, r20
     e0e:	75 07       	cpc	r23, r21
     e10:	71 f1       	breq	.+92     	; 0xe6e <keyboard_run+0xf4>
			printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
     e12:	f7 01       	movw	r30, r14
     e14:	41 81       	ldd	r20, Z+1	; 0x01
     e16:	4f 93       	push	r20
     e18:	40 81       	ld	r20, Z
     e1a:	4f 93       	push	r20
     e1c:	f8 01       	movw	r30, r16
     e1e:	41 81       	ldd	r20, Z+1	; 0x01
     e20:	4f 93       	push	r20
     e22:	40 81       	ld	r20, Z
     e24:	4f 93       	push	r20
     e26:	3f 93       	push	r19
     e28:	2f 93       	push	r18
     e2a:	9f 93       	push	r25
     e2c:	8f 93       	push	r24
     e2e:	9f 92       	push	r9
     e30:	8f 92       	push	r8
     e32:	0e 94 65 0d 	call	0x1aca	; 0x1aca <printf>
			position_moved = 1;
			//unselect the old letter and select the new one
			keyboard_unselect_prev();
     e36:	0e 94 77 05 	call	0xaee	; 0xaee <keyboard_unselect_prev>
			keyboard_select_curr();
     e3a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <keyboard_select_curr>

			//Reset position
			prev_pos.x = pos.x;
     e3e:	f7 01       	movw	r30, r14
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	f8 01       	movw	r30, r16
     e46:	91 83       	std	Z+1, r25	; 0x01
     e48:	80 83       	st	Z, r24
			prev_pos.y = pos.y;
     e4a:	f6 01       	movw	r30, r12
     e4c:	80 81       	ld	r24, Z
     e4e:	91 81       	ldd	r25, Z+1	; 0x01
     e50:	f5 01       	movw	r30, r10
     e52:	91 83       	std	Z+1, r25	; 0x01
     e54:	80 83       	st	Z, r24
     e56:	2d b7       	in	r18, 0x3d	; 61
     e58:	3e b7       	in	r19, 0x3e	; 62
     e5a:	26 5f       	subi	r18, 0xF6	; 246
     e5c:	3f 4f       	sbci	r19, 0xFF	; 255
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	3e bf       	out	0x3e, r19	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	2d bf       	out	0x3d, r18	; 61
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
			printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
			position_moved = 1;
     e68:	c6 2d       	mov	r28, r6
     e6a:	d7 2d       	mov	r29, r7
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <keyboard_run+0xf8>
     e6e:	c4 2d       	mov	r28, r4
     e70:	d5 2d       	mov	r29, r5
			prev_pos.y = pos.y;
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
     e78:	89 2b       	or	r24, r25
     e7a:	29 f0       	breq	.+10     	; 0xe86 <keyboard_run+0x10c>
			button_pressed = 1;
			keyboard_item_pressed();
     e7c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <keyboard_item_pressed>
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
			button_pressed = 1;
     e80:	86 2d       	mov	r24, r6
     e82:	97 2d       	mov	r25, r7
     e84:	0c c0       	rjmp	.+24     	; 0xe9e <keyboard_run+0x124>
			keyboard_item_pressed();
			
		}
		//check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
     e8c:	89 2b       	or	r24, r25
     e8e:	29 f0       	breq	.+10     	; 0xe9a <keyboard_run+0x120>
			button_pressed = 1;
			//not working
			//remove_last_char();
			//printf("REMOVE written string: %s", written_string);
			print_string();
     e90:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <print_string>
			keyboard_item_pressed();
			
		}
		//check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
			button_pressed = 1;
     e94:	86 2d       	mov	r24, r6
     e96:	97 2d       	mov	r25, r7
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <keyboard_run+0x124>
     e9a:	84 2d       	mov	r24, r4
     e9c:	95 2d       	mov	r25, r5
			//remove_last_char();
			//printf("REMOVE written string: %s", written_string);
			print_string();
		}
		
		if(position_moved){
     e9e:	cd 2b       	or	r28, r29
     ea0:	49 f0       	breq	.+18     	; 0xeb4 <keyboard_run+0x13a>
     ea2:	ef ef       	ldi	r30, 0xFF	; 255
     ea4:	ff eb       	ldi	r31, 0xBF	; 191
     ea6:	23 e0       	ldi	r18, 0x03	; 3
     ea8:	e1 50       	subi	r30, 0x01	; 1
     eaa:	f0 40       	sbci	r31, 0x00	; 0
     eac:	20 40       	sbci	r18, 0x00	; 0
     eae:	e1 f7       	brne	.-8      	; 0xea8 <keyboard_run+0x12e>
     eb0:	00 c0       	rjmp	.+0      	; 0xeb2 <keyboard_run+0x138>
     eb2:	00 00       	nop
			position_moved = 0;
			_delay_ms(250);
		}
		if(button_pressed){
     eb4:	89 2b       	or	r24, r25
     eb6:	49 f0       	breq	.+18     	; 0xeca <keyboard_run+0x150>
     eb8:	3f ef       	ldi	r19, 0xFF	; 255
     eba:	4f e7       	ldi	r20, 0x7F	; 127
     ebc:	87 e0       	ldi	r24, 0x07	; 7
     ebe:	31 50       	subi	r19, 0x01	; 1
     ec0:	40 40       	sbci	r20, 0x00	; 0
     ec2:	80 40       	sbci	r24, 0x00	; 0
     ec4:	e1 f7       	brne	.-8      	; 0xebe <keyboard_run+0x144>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <keyboard_run+0x14e>
     ec8:	00 00       	nop

	//detect changes
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
     ed0:	89 2b       	or	r24, r25
     ed2:	09 f4       	brne	.+2      	; 0xed6 <keyboard_run+0x15c>
     ed4:	88 cf       	rjmp	.-240    	; 0xde6 <keyboard_run+0x6c>
		if(button_pressed){
			button_pressed = 0;
			_delay_ms(500);
		}
	}
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	df 90       	pop	r13
     ee4:	cf 90       	pop	r12
     ee6:	bf 90       	pop	r11
     ee8:	af 90       	pop	r10
     eea:	9f 90       	pop	r9
     eec:	8f 90       	pop	r8
     eee:	7f 90       	pop	r7
     ef0:	6f 90       	pop	r6
     ef2:	5f 90       	pop	r5
     ef4:	4f 90       	pop	r4
     ef6:	08 95       	ret

00000ef8 <MCP2515_read>:
	}
	
	return 0;
}

char MCP2515_read(char address) {
     ef8:	cf 93       	push	r28
     efa:	c8 2f       	mov	r28, r24
	SPI_select();
     efc:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <SPI_select>
	SPI_send(READ);
     f00:	83 e0       	ldi	r24, 0x03	; 3
     f02:	0e 94 5f 0b 	call	0x16be	; 0x16be <SPI_send>
	SPI_send(address);
     f06:	8c 2f       	mov	r24, r28
     f08:	0e 94 5f 0b 	call	0x16be	; 0x16be <SPI_send>
	char data = SPI_read();
     f0c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <SPI_read>
     f10:	c8 2f       	mov	r28, r24
	SPI_deselect();
     f12:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <SPI_deselect>
	return data;
	
	
}
     f16:	8c 2f       	mov	r24, r28
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <MCP2515_bit_modify>:
	SPI_send(RTS_BASE+buffer_states);
	SPI_deselect();
}

//puts new_data in the selected reg_adress. the function assumes that you are allowed to change every bit in the register
void MCP2515_bit_modify(char reg_address, char masked_bits, char new_data) {
     f1c:	1f 93       	push	r17
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	18 2f       	mov	r17, r24
     f24:	d6 2f       	mov	r29, r22
     f26:	c4 2f       	mov	r28, r20
	SPI_select();
     f28:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <SPI_select>
	SPI_send(BIT_MODIFY);
     f2c:	85 e0       	ldi	r24, 0x05	; 5
     f2e:	0e 94 5f 0b 	call	0x16be	; 0x16be <SPI_send>
	SPI_send(reg_address);
     f32:	81 2f       	mov	r24, r17
     f34:	0e 94 5f 0b 	call	0x16be	; 0x16be <SPI_send>
	SPI_send(masked_bits);
     f38:	8d 2f       	mov	r24, r29
     f3a:	0e 94 5f 0b 	call	0x16be	; 0x16be <SPI_send>
	SPI_send(new_data);
     f3e:	8c 2f       	mov	r24, r28
     f40:	0e 94 5f 0b 	call	0x16be	; 0x16be <SPI_send>
	SPI_deselect();
     f44:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <SPI_deselect>
}
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	08 95       	ret

00000f50 <test_function>:
volatile menu_entry* current_entry;
volatile menu_entry* selected_entry;


void test_function() {
	printf("\n\nHighscore clicked!\n\n");
     f50:	8c e1       	ldi	r24, 0x1C	; 28
     f52:	93 e0       	ldi	r25, 0x03	; 3
     f54:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <puts>
     f58:	08 95       	ret

00000f5a <MENU_draw_current_menu>:
	current_entry = current_entry->parent_node;
	selected_entry = current_entry->child_node;
	MENU_draw_current_menu();
}

void MENU_draw_current_menu() {
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
	OLED_reset();
     f68:	0e 94 9e 09 	call	0x133c	; 0x133c <OLED_reset>
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
     f6c:	e0 91 ea 03 	lds	r30, 0x03EA
     f70:	f0 91 eb 03 	lds	r31, 0x03EB
     f74:	c4 81       	ldd	r28, Z+4	; 0x04
     f76:	d5 81       	ldd	r29, Z+5	; 0x05
	
	while( temp_node != NULL){
     f78:	20 97       	sbiw	r28, 0x00	; 0
     f7a:	61 f1       	breq	.+88     	; 0xfd4 <MENU_draw_current_menu+0x7a>
     f7c:	d1 2c       	mov	r13, r1
		OLED_pos(output_row++, 0);
		if (temp_node == selected_entry) {
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
     f7e:	0f 2e       	mov	r0, r31
     f80:	f2 e3       	ldi	r31, 0x32	; 50
     f82:	ef 2e       	mov	r14, r31
     f84:	f3 e0       	ldi	r31, 0x03	; 3
     f86:	ff 2e       	mov	r15, r31
     f88:	f0 2d       	mov	r31, r0
     f8a:	02 e3       	ldi	r16, 0x32	; 50
     f8c:	11 e0       	ldi	r17, 0x01	; 1
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
		OLED_pos(output_row++, 0);
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	8d 2d       	mov	r24, r13
     f92:	0e 94 79 09 	call	0x12f2	; 0x12f2 <OLED_pos>
		if (temp_node == selected_entry) {
     f96:	20 91 e8 03 	lds	r18, 0x03E8
     f9a:	30 91 e9 03 	lds	r19, 0x03E9
     f9e:	c2 17       	cp	r28, r18
     fa0:	d3 07       	cpc	r29, r19
     fa2:	11 f4       	brne	.+4      	; 0xfa8 <MENU_draw_current_menu+0x4e>
			OLED_print_arrow();
     fa4:	0e 94 13 0a 	call	0x1426	; 0x1426 <OLED_print_arrow>
		}
		fprintf(OLED, " %s", temp_node->name);
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	8f 93       	push	r24
     fac:	88 81       	ld	r24, Y
     fae:	8f 93       	push	r24
     fb0:	ff 92       	push	r15
     fb2:	ef 92       	push	r14
     fb4:	1f 93       	push	r17
     fb6:	0f 93       	push	r16
     fb8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fprintf>
		temp_node = temp_node -> next_sibling_node;
     fbc:	0e 80       	ldd	r0, Y+6	; 0x06
     fbe:	df 81       	ldd	r29, Y+7	; 0x07
     fc0:	c0 2d       	mov	r28, r0
     fc2:	d3 94       	inc	r13
	OLED_reset();
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	20 97       	sbiw	r28, 0x00	; 0
     fd2:	e9 f6       	brne	.-70     	; 0xf8e <MENU_draw_current_menu+0x34>
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	ef 90       	pop	r14
     fe0:	df 90       	pop	r13
     fe2:	08 95       	ret

00000fe4 <MENU_select_next>:
	MENU_draw_current_menu();
}


void MENU_select_next() {
	if (selected_entry -> next_sibling_node != NULL) {
     fe4:	e0 91 e8 03 	lds	r30, 0x03E8
     fe8:	f0 91 e9 03 	lds	r31, 0x03E9
     fec:	86 81       	ldd	r24, Z+6	; 0x06
     fee:	97 81       	ldd	r25, Z+7	; 0x07
     ff0:	89 2b       	or	r24, r25
     ff2:	41 f0       	breq	.+16     	; 0x1004 <MENU_select_next+0x20>
		selected_entry = selected_entry -> next_sibling_node;
     ff4:	86 81       	ldd	r24, Z+6	; 0x06
     ff6:	97 81       	ldd	r25, Z+7	; 0x07
     ff8:	90 93 e9 03 	sts	0x03E9, r25
     ffc:	80 93 e8 03 	sts	0x03E8, r24
		MENU_draw_current_menu();
    1000:	0e 94 ad 07 	call	0xf5a	; 0xf5a <MENU_draw_current_menu>
    1004:	08 95       	ret

00001006 <MENU_select_prev>:
	}
}

void MENU_select_prev() {
	if (selected_entry -> prev_sibling_node != NULL) {
    1006:	e0 91 e8 03 	lds	r30, 0x03E8
    100a:	f0 91 e9 03 	lds	r31, 0x03E9
    100e:	80 85       	ldd	r24, Z+8	; 0x08
    1010:	91 85       	ldd	r25, Z+9	; 0x09
    1012:	89 2b       	or	r24, r25
    1014:	41 f0       	breq	.+16     	; 0x1026 <MENU_select_prev+0x20>
		selected_entry = selected_entry -> prev_sibling_node;
    1016:	80 85       	ldd	r24, Z+8	; 0x08
    1018:	91 85       	ldd	r25, Z+9	; 0x09
    101a:	90 93 e9 03 	sts	0x03E9, r25
    101e:	80 93 e8 03 	sts	0x03E8, r24
		MENU_draw_current_menu();
    1022:	0e 94 ad 07 	call	0xf5a	; 0xf5a <MENU_draw_current_menu>
    1026:	08 95       	ret

00001028 <MENU_enter_selection>:
	}
}

void MENU_enter_selection() {
	if (selected_entry->function_ptr != NULL) {
    1028:	e0 91 e8 03 	lds	r30, 0x03E8
    102c:	f0 91 e9 03 	lds	r31, 0x03E9
    1030:	82 85       	ldd	r24, Z+10	; 0x0a
    1032:	93 85       	ldd	r25, Z+11	; 0x0b
    1034:	89 2b       	or	r24, r25
    1036:	61 f0       	breq	.+24     	; 0x1050 <MENU_enter_selection+0x28>
		printf("HEI\n");
    1038:	86 e3       	ldi	r24, 0x36	; 54
    103a:	93 e0       	ldi	r25, 0x03	; 3
    103c:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <puts>
		selected_entry->function_ptr();
    1040:	e0 91 e8 03 	lds	r30, 0x03E8
    1044:	f0 91 e9 03 	lds	r31, 0x03E9
    1048:	02 84       	ldd	r0, Z+10	; 0x0a
    104a:	f3 85       	ldd	r31, Z+11	; 0x0b
    104c:	e0 2d       	mov	r30, r0
    104e:	09 95       	icall
	}
	
	if (selected_entry->child_node == NULL) return;
    1050:	e0 91 e8 03 	lds	r30, 0x03E8
    1054:	f0 91 e9 03 	lds	r31, 0x03E9
    1058:	84 81       	ldd	r24, Z+4	; 0x04
    105a:	95 81       	ldd	r25, Z+5	; 0x05
    105c:	89 2b       	or	r24, r25
    105e:	61 f0       	breq	.+24     	; 0x1078 <MENU_enter_selection+0x50>
	
	current_entry = selected_entry;
    1060:	f0 93 eb 03 	sts	0x03EB, r31
    1064:	e0 93 ea 03 	sts	0x03EA, r30
	selected_entry = current_entry->child_node;
    1068:	84 81       	ldd	r24, Z+4	; 0x04
    106a:	95 81       	ldd	r25, Z+5	; 0x05
    106c:	90 93 e9 03 	sts	0x03E9, r25
    1070:	80 93 e8 03 	sts	0x03E8, r24
	MENU_draw_current_menu();
    1074:	0e 94 ad 07 	call	0xf5a	; 0xf5a <MENU_draw_current_menu>
    1078:	08 95       	ret

0000107a <MENU_go_back>:
}

void MENU_go_back() {
	if (current_entry->parent_node == NULL) return;
    107a:	e0 91 ea 03 	lds	r30, 0x03EA
    107e:	f0 91 eb 03 	lds	r31, 0x03EB
    1082:	82 81       	ldd	r24, Z+2	; 0x02
    1084:	93 81       	ldd	r25, Z+3	; 0x03
    1086:	89 2b       	or	r24, r25
    1088:	79 f0       	breq	.+30     	; 0x10a8 <MENU_go_back+0x2e>
	
	current_entry = current_entry->parent_node;
    108a:	02 80       	ldd	r0, Z+2	; 0x02
    108c:	f3 81       	ldd	r31, Z+3	; 0x03
    108e:	e0 2d       	mov	r30, r0
    1090:	f0 93 eb 03 	sts	0x03EB, r31
    1094:	e0 93 ea 03 	sts	0x03EA, r30
	selected_entry = current_entry->child_node;
    1098:	84 81       	ldd	r24, Z+4	; 0x04
    109a:	95 81       	ldd	r25, Z+5	; 0x05
    109c:	90 93 e9 03 	sts	0x03E9, r25
    10a0:	80 93 e8 03 	sts	0x03E8, r24
	MENU_draw_current_menu();
    10a4:	0e 94 ad 07 	call	0xf5a	; 0xf5a <MENU_draw_current_menu>
    10a8:	08 95       	ret

000010aa <MENU_run>:
	_delay_ms(delay);
	MENU_select_prev();
}


void MENU_run() {
    10aa:	cf 93       	push	r28
	bool change = false;
	if (JOY_getDirection() == DOWN) {
    10ac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <JOY_getDirection>
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	21 f4       	brne	.+8      	; 0x10bc <MENU_run+0x12>
		MENU_select_next();
    10b4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <MENU_select_next>
		change = true;
    10b8:	c1 e0       	ldi	r28, 0x01	; 1
    10ba:	09 c0       	rjmp	.+18     	; 0x10ce <MENU_run+0x24>
		} else if (JOY_getDirection() == UP) {
    10bc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <JOY_getDirection>
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	21 f4       	brne	.+8      	; 0x10cc <MENU_run+0x22>
		MENU_select_prev();
    10c4:	0e 94 03 08 	call	0x1006	; 0x1006 <MENU_select_prev>
		change = true;
    10c8:	c1 e0       	ldi	r28, 0x01	; 1
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <MENU_run+0x24>
	MENU_select_prev();
}


void MENU_run() {
	bool change = false;
    10cc:	c0 e0       	ldi	r28, 0x00	; 0
		} else if (JOY_getDirection() == UP) {
		MENU_select_prev();
		change = true;
	}
	
	if (JOY_button_pressed(JOY_BUTTON)) {
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
    10d4:	89 2b       	or	r24, r25
    10d6:	19 f0       	breq	.+6      	; 0x10de <MENU_run+0x34>
		MENU_enter_selection();
    10d8:	0e 94 14 08 	call	0x1028	; 0x1028 <MENU_enter_selection>
    10dc:	0a c0       	rjmp	.+20     	; 0x10f2 <MENU_run+0x48>
		change = true;
	}
	
	else if (JOY_button_pressed(LEFT_BUTTON)) {
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
    10e4:	89 2b       	or	r24, r25
    10e6:	19 f0       	breq	.+6      	; 0x10ee <MENU_run+0x44>
		MENU_go_back();
    10e8:	0e 94 3d 08 	call	0x107a	; 0x107a <MENU_go_back>
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <MENU_run+0x48>
		change = true;
	}
	
	// Make sure the selection doesn't move multiple places at once.
	if (change){
    10ee:	cc 23       	and	r28, r28
    10f0:	49 f0       	breq	.+18     	; 0x1104 <MENU_run+0x5a>
    10f2:	22 e3       	ldi	r18, 0x32	; 50
    10f4:	83 ed       	ldi	r24, 0xD3	; 211
    10f6:	93 e0       	ldi	r25, 0x03	; 3
    10f8:	21 50       	subi	r18, 0x01	; 1
    10fa:	80 40       	sbci	r24, 0x00	; 0
    10fc:	90 40       	sbci	r25, 0x00	; 0
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <MENU_run+0x4e>
    1100:	00 c0       	rjmp	.+0      	; 0x1102 <MENU_run+0x58>
    1102:	00 c0       	rjmp	.+0      	; 0x1104 <MENU_run+0x5a>
		_delay_ms(255);
		change = false;
	}
}
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <add_entry>:



menu_entry* add_entry(menu_entry* parent_node, char* name, void* function_ptr){
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	ec 01       	movw	r28, r24
    1116:	7b 01       	movw	r14, r22
    1118:	8a 01       	movw	r16, r20
	
	// Create the new node
	menu_entry* new_entry = (menu_entry*) malloc(sizeof(menu_entry));
    111a:	8c e0       	ldi	r24, 0x0C	; 12
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 b8 0b 	call	0x1770	; 0x1770 <malloc>
    1122:	dc 01       	movw	r26, r24
	new_entry->name = name;
    1124:	11 96       	adiw	r26, 0x01	; 1
    1126:	fc 92       	st	X, r15
    1128:	ee 92       	st	-X, r14
	new_entry->parent_node = parent_node;
    112a:	13 96       	adiw	r26, 0x03	; 3
    112c:	dc 93       	st	X, r29
    112e:	ce 93       	st	-X, r28
    1130:	12 97       	sbiw	r26, 0x02	; 2
	new_entry->child_node = NULL;  // A new node has no children
    1132:	15 96       	adiw	r26, 0x05	; 5
    1134:	1c 92       	st	X, r1
    1136:	1e 92       	st	-X, r1
    1138:	14 97       	sbiw	r26, 0x04	; 4
	new_entry->next_sibling_node = NULL;  // The new child is the last child
    113a:	17 96       	adiw	r26, 0x07	; 7
    113c:	1c 92       	st	X, r1
    113e:	1e 92       	st	-X, r1
    1140:	16 97       	sbiw	r26, 0x06	; 6
	new_entry->prev_sibling_node = NULL;
    1142:	19 96       	adiw	r26, 0x09	; 9
    1144:	1c 92       	st	X, r1
    1146:	1e 92       	st	-X, r1
    1148:	18 97       	sbiw	r26, 0x08	; 8
	new_entry->function_ptr = function_ptr;
    114a:	1b 96       	adiw	r26, 0x0b	; 11
    114c:	1c 93       	st	X, r17
    114e:	0e 93       	st	-X, r16
    1150:	1a 97       	sbiw	r26, 0x0a	; 10
	
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_entry;
    1152:	20 97       	sbiw	r28, 0x00	; 0
    1154:	a1 f0       	breq	.+40     	; 0x117e <add_entry+0x76>
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
    1156:	ec 81       	ldd	r30, Y+4	; 0x04
    1158:	fd 81       	ldd	r31, Y+5	; 0x05
    115a:	30 97       	sbiw	r30, 0x00	; 0
    115c:	19 f4       	brne	.+6      	; 0x1164 <add_entry+0x5c>
		parent_node->child_node = new_entry;
    115e:	9d 83       	std	Y+5, r25	; 0x05
    1160:	8c 83       	std	Y+4, r24	; 0x04
    1162:	0d c0       	rjmp	.+26     	; 0x117e <add_entry+0x76>
	else {
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
    1164:	26 81       	ldd	r18, Z+6	; 0x06
    1166:	37 81       	ldd	r19, Z+7	; 0x07
    1168:	21 15       	cp	r18, r1
    116a:	31 05       	cpc	r19, r1
    116c:	11 f0       	breq	.+4      	; 0x1172 <add_entry+0x6a>
			//printf("temp_node->next_sibling_node->name: %s\n", temp_node->next_sibling_node->name);
			temp_node = temp_node->next_sibling_node;
    116e:	f9 01       	movw	r30, r18
    1170:	f9 cf       	rjmp	.-14     	; 0x1164 <add_entry+0x5c>
		}
		
		// Bind the new node to the current last child to become the new last child.
		temp_node->next_sibling_node = new_entry;
    1172:	b7 83       	std	Z+7, r27	; 0x07
    1174:	a6 83       	std	Z+6, r26	; 0x06
		new_entry->prev_sibling_node = temp_node;
    1176:	19 96       	adiw	r26, 0x09	; 9
    1178:	fc 93       	st	X, r31
    117a:	ee 93       	st	-X, r30
    117c:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	// Parent/child/sibling bindings complete. Return the new node.
	return new_entry;
    117e:	cd 01       	movw	r24, r26
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	08 95       	ret

0000118e <MENU_init>:

void test_function() {
	printf("\n\nHighscore clicked!\n\n");
}

void MENU_init() {
    118e:	cf 92       	push	r12
    1190:	df 92       	push	r13
    1192:	ef 92       	push	r14
    1194:	ff 92       	push	r15
    1196:	0f 93       	push	r16
    1198:	1f 93       	push	r17
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
	menu_entry* main_menu = add_entry(NULL, "Main menu", NULL);
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	6a e3       	ldi	r22, 0x3A	; 58
    11a4:	73 e0       	ldi	r23, 0x03	; 3
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 84 08 	call	0x1108	; 0x1108 <add_entry>
    11ae:	ec 01       	movw	r28, r24
	
	// Main menu
	menu_entry* play = add_entry(main_menu, "Play game", NULL);
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	50 e0       	ldi	r21, 0x00	; 0
    11b4:	64 e4       	ldi	r22, 0x44	; 68
    11b6:	73 e0       	ldi	r23, 0x03	; 3
    11b8:	0e 94 84 08 	call	0x1108	; 0x1108 <add_entry>
    11bc:	7c 01       	movw	r14, r24
	menu_entry* highscore = add_entry(main_menu, "Highscore", test_function);
    11be:	48 ea       	ldi	r20, 0xA8	; 168
    11c0:	57 e0       	ldi	r21, 0x07	; 7
    11c2:	6e e4       	ldi	r22, 0x4E	; 78
    11c4:	73 e0       	ldi	r23, 0x03	; 3
    11c6:	ce 01       	movw	r24, r28
    11c8:	0e 94 84 08 	call	0x1108	; 0x1108 <add_entry>
	menu_entry* settings = add_entry(main_menu, "Settings", NULL);
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	68 e5       	ldi	r22, 0x58	; 88
    11d2:	73 e0       	ldi	r23, 0x03	; 3
    11d4:	ce 01       	movw	r24, r28
    11d6:	0e 94 84 08 	call	0x1108	; 0x1108 <add_entry>
    11da:	6c 01       	movw	r12, r24
	menu_entry* extras = add_entry(main_menu, "Extra features", NULL);
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	6b e9       	ldi	r22, 0x9B	; 155
    11e2:	73 e0       	ldi	r23, 0x03	; 3
    11e4:	ce 01       	movw	r24, r28
    11e6:	0e 94 84 08 	call	0x1108	; 0x1108 <add_entry>
    11ea:	8c 01       	movw	r16, r24
	//menu_entry* yolo = add_entry(main_menu, "YOLO", NULL);
	
	
	// Sub-menu settings
	menu_entry* brightness = add_entry(settings, "Brightness", brightness_run);
    11ec:	4a e2       	ldi	r20, 0x2A	; 42
    11ee:	52 e0       	ldi	r21, 0x02	; 2
    11f0:	61 e6       	ldi	r22, 0x61	; 97
    11f2:	73 e0       	ldi	r23, 0x03	; 3
    11f4:	c6 01       	movw	r24, r12
    11f6:	0e 94 84 08 	call	0x1108	; 0x1108 <add_entry>
	//menu_entry* font = add_entry(settings, "Set font", NULL);
	
	// Sub-menu extras
	menu_entry* keyboard = add_entry(extras, "Keyboard", keyboard_run);
    11fa:	4d eb       	ldi	r20, 0xBD	; 189
    11fc:	56 e0       	ldi	r21, 0x06	; 6
    11fe:	6c e6       	ldi	r22, 0x6C	; 108
    1200:	73 e0       	ldi	r23, 0x03	; 3
    1202:	c8 01       	movw	r24, r16
    1204:	0e 94 84 08 	call	0x1108	; 0x1108 <add_entry>
	//menu_entry* mandelbrot = add_entry(extras, "Mandelbrot", NULL);
	menu_entry* pong = add_entry(extras, "Play pong", NULL);
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	65 e7       	ldi	r22, 0x75	; 117
    120e:	73 e0       	ldi	r23, 0x03	; 3
    1210:	c8 01       	movw	r24, r16
    1212:	0e 94 84 08 	call	0x1108	; 0x1108 <add_entry>
	//menu_entry* rcube = add_entry(extras, "rotating cube", NULL);
	
	current_entry = main_menu;
    1216:	d0 93 eb 03 	sts	0x03EB, r29
    121a:	c0 93 ea 03 	sts	0x03EA, r28
	selected_entry = play;
    121e:	f0 92 e9 03 	sts	0x03E9, r15
    1222:	e0 92 e8 03 	sts	0x03E8, r14
	MENU_draw_current_menu();
    1226:	0e 94 ad 07 	call	0xf5a	; 0xf5a <MENU_draw_current_menu>
}
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	ff 90       	pop	r15
    1234:	ef 90       	pop	r14
    1236:	df 90       	pop	r13
    1238:	cf 90       	pop	r12
    123a:	08 95       	ret

0000123c <initialize>:
#include <stdio.h>
#include <stdbool.h>


void initialize(void){
	cli();
    123c:	f8 94       	cli
	OLED_reset();
    123e:	0e 94 9e 09 	call	0x133c	; 0x133c <OLED_reset>
	usart_init(MYUBRR);
    1242:	8f e1       	ldi	r24, 0x1F	; 31
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e 94 83 0b 	call	0x1706	; 0x1706 <usart_init>
	SRAM_init();
    124a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <SRAM_init>
	ADC_init();
    124e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	JOY_init();
    1252:	0e 94 26 03 	call	0x64c	; 0x64c <JOY_init>
	OLED_init();
    1256:	0e 94 aa 09 	call	0x1354	; 0x1354 <OLED_init>
	MENU_init();
    125a:	0e 94 c7 08 	call	0x118e	; 0x118e <MENU_init>
	//CAN_init();
	sei();
    125e:	78 94       	sei
    1260:	08 95       	ret

00001262 <main>:
	//printf("1. EFGL: 0x%02x\n", MCP2515_read(MCP_EFLG));
	
}

int main(void) {
	initialize();
    1262:	0e 94 1e 09 	call	0x123c	; 0x123c <initialize>
	while(1){
		MENU_run();
    1266:	0e 94 55 08 	call	0x10aa	; 0x10aa <MENU_run>
    126a:	fd cf       	rjmp	.-6      	; 0x1266 <main+0x4>

0000126c <OLED_print_char>:
	write_cmd(0x81);
	write_cmd(lvl);
}

void OLED_print_char(char c){
	if (c == '\0') return;
    126c:	88 23       	and	r24, r24
    126e:	f9 f0       	breq	.+62     	; 0x12ae <OLED_print_char+0x42>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
    1270:	e8 2f       	mov	r30, r24
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	b0 97       	sbiw	r30, 0x20	; 32
	for (int col = 0; col < FONT_SIZE; col++){
    1276:	80 91 40 01 	lds	r24, 0x0140
    127a:	88 23       	and	r24, r24
    127c:	c1 f0       	breq	.+48     	; 0x12ae <OLED_print_char+0x42>
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	ee 0f       	add	r30, r30
    1284:	ff 1f       	adc	r31, r31
    1286:	ee 0f       	add	r30, r30
    1288:	ff 1f       	adc	r31, r31
    128a:	e0 59       	subi	r30, 0x90	; 144
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
		write_data(pgm_read_byte(&font8[letter_index][col]));
    1292:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1294:	a0 91 43 01 	lds	r26, 0x0143
    1298:	b0 91 44 01 	lds	r27, 0x0144
    129c:	2c 93       	st	X, r18

void OLED_print_char(char c){
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++){
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	31 96       	adiw	r30, 0x01	; 1
    12a2:	20 91 40 01 	lds	r18, 0x0140
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	82 17       	cp	r24, r18
    12aa:	93 07       	cpc	r25, r19
    12ac:	94 f3       	brlt	.-28     	; 0x1292 <OLED_print_char+0x26>
    12ae:	08 95       	ret

000012b0 <write_data>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    12b0:	e0 91 43 01 	lds	r30, 0x0143
    12b4:	f0 91 44 01 	lds	r31, 0x0144
    12b8:	80 83       	st	Z, r24
    12ba:	08 95       	ret

000012bc <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7){
    12bc:	88 30       	cpi	r24, 0x08	; 8
    12be:	30 f4       	brcc	.+12     	; 0x12cc <OLED_goto_line+0x10>
		return;
	}
	write_cmd(0xB0+line);
    12c0:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    12c2:	e0 91 41 01 	lds	r30, 0x0141
    12c6:	f0 91 42 01 	lds	r31, 0x0142
    12ca:	80 83       	st	Z, r24
    12cc:	08 95       	ret

000012ce <OLED_goto_column>:
	}
	write_cmd(0xB0+line);
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
    12ce:	88 23       	and	r24, r24
    12d0:	7c f0       	brlt	.+30     	; 0x12f0 <OLED_goto_column+0x22>
		return;
	}
	write_cmd(0x00+column%16); //lower column register
    12d2:	98 2f       	mov	r25, r24
    12d4:	9f 70       	andi	r25, 0x0F	; 15
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    12d6:	e0 91 41 01 	lds	r30, 0x0141
    12da:	f0 91 42 01 	lds	r31, 0x0142
    12de:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
		return;
	}
	write_cmd(0x00+column%16); //lower column register
	write_cmd(0x10+column/16); //higher column register
    12e0:	82 95       	swap	r24
    12e2:	8f 70       	andi	r24, 0x0F	; 15
    12e4:	80 5f       	subi	r24, 0xF0	; 240
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    12e6:	e0 91 41 01 	lds	r30, 0x0141
    12ea:	f0 91 42 01 	lds	r31, 0x0142
    12ee:	80 83       	st	Z, r24
    12f0:	08 95       	ret

000012f2 <OLED_pos>:
		write_data(0x00);
		
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
    12f2:	cf 93       	push	r28
    12f4:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
    12f6:	88 30       	cpi	r24, 0x08	; 8
    12f8:	10 f4       	brcc	.+4      	; 0x12fe <OLED_pos+0xc>
    12fa:	66 23       	and	r22, r22
    12fc:	2c f4       	brge	.+10     	; 0x1308 <OLED_pos+0x16>
		printf("Out of range in OLED_pos()\n");
    12fe:	8f e7       	ldi	r24, 0x7F	; 127
    1300:	93 e0       	ldi	r25, 0x03	; 3
    1302:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <puts>
		return; 
    1306:	05 c0       	rjmp	.+10     	; 0x1312 <OLED_pos+0x20>
	}
	
	OLED_goto_line(line);
    1308:	0e 94 5e 09 	call	0x12bc	; 0x12bc <OLED_goto_line>
	OLED_goto_column(column);
    130c:	8c 2f       	mov	r24, r28
    130e:	0e 94 67 09 	call	0x12ce	; 0x12ce <OLED_goto_column>
}
    1312:	cf 91       	pop	r28
    1314:	08 95       	ret

00001316 <OLED_home>:




void OLED_home(){
	OLED_pos(0,0);
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <OLED_pos>
    131e:	08 95       	ret

00001320 <OLED_clear_line>:
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	0e 94 79 09 	call	0x12f2	; 0x12f2 <OLED_pos>
    1326:	80 e8       	ldi	r24, 0x80	; 128
    1328:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    132a:	e0 91 43 01 	lds	r30, 0x0143
    132e:	f0 91 44 01 	lds	r31, 0x0144
    1332:	10 82       	st	Z, r1
    1334:	01 97       	sbiw	r24, 0x01	; 1
	OLED_pos(0,0);
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	c1 f7       	brne	.-16     	; 0x132a <OLED_clear_line+0xa>
		write_data(0x00);
		
	}
}
    133a:	08 95       	ret

0000133c <OLED_reset>:
	
}



void OLED_reset() {
    133c:	cf 93       	push	r28
    133e:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
    1340:	8c 2f       	mov	r24, r28
    1342:	0e 94 90 09 	call	0x1320	; 0x1320 <OLED_clear_line>
    1346:	cf 5f       	subi	r28, 0xFF	; 255
}



void OLED_reset() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
    1348:	c8 30       	cpi	r28, 0x08	; 8
    134a:	d1 f7       	brne	.-12     	; 0x1340 <OLED_reset+0x4>
		OLED_clear_line(page);
	}
	OLED_home();
    134c:	0e 94 8b 09 	call	0x1316	; 0x1316 <OLED_home>
}
    1350:	cf 91       	pop	r28
    1352:	08 95       	ret

00001354 <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	66 97       	sbiw	r28, 0x16	; 22
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
	const char addresses[] = {
    1368:	86 e1       	ldi	r24, 0x16	; 22
    136a:	e5 e4       	ldi	r30, 0x45	; 69
    136c:	f1 e0       	ldi	r31, 0x01	; 1
    136e:	de 01       	movw	r26, r28
    1370:	11 96       	adiw	r26, 0x01	; 1
    1372:	01 90       	ld	r0, Z+
    1374:	0d 92       	st	X+, r0
    1376:	8a 95       	dec	r24
    1378:	e1 f7       	brne	.-8      	; 0x1372 <OLED_init+0x1e>
    137a:	fe 01       	movw	r30, r28
    137c:	31 96       	adiw	r30, 0x01	; 1
    137e:	ce 01       	movw	r24, r28
    1380:	47 96       	adiw	r24, 0x17	; 23
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
		write_cmd(addresses[i]);
    1382:	21 91       	ld	r18, Z+
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    1384:	a0 91 41 01 	lds	r26, 0x0141
    1388:	b0 91 42 01 	lds	r27, 0x0142
    138c:	2c 93       	st	X, r18
		0xa6, //set normal display
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
    138e:	e8 17       	cp	r30, r24
    1390:	f9 07       	cpc	r31, r25
    1392:	b9 f7       	brne	.-18     	; 0x1382 <OLED_init+0x2e>
		write_cmd(addresses[i]);
	}
	
	OLED_reset();
    1394:	0e 94 9e 09 	call	0x133c	; 0x133c <OLED_reset>
	
}
    1398:	66 96       	adiw	r28, 0x16	; 22
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	08 95       	ret

000013aa <OLED_set_brightness>:
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    13aa:	e0 91 41 01 	lds	r30, 0x0141
    13ae:	f0 91 42 01 	lds	r31, 0x0142
    13b2:	91 e8       	ldi	r25, 0x81	; 129
    13b4:	90 83       	st	Z, r25
    13b6:	e0 91 41 01 	lds	r30, 0x0141
    13ba:	f0 91 42 01 	lds	r31, 0x0142
    13be:	80 83       	st	Z, r24
    13c0:	08 95       	ret

000013c2 <OLED_print_char_inverse>:
		write_data(pgm_read_byte(&font8[letter_index][col]));
	}
}

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
    13c2:	88 23       	and	r24, r24
    13c4:	01 f1       	breq	.+64     	; 0x1406 <OLED_print_char_inverse+0x44>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
    13c6:	e8 2f       	mov	r30, r24
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	b0 97       	sbiw	r30, 0x20	; 32
	for (int col = 0; col < FONT_SIZE; col++) {
    13cc:	80 91 40 01 	lds	r24, 0x0140
    13d0:	88 23       	and	r24, r24
    13d2:	c9 f0       	breq	.+50     	; 0x1406 <OLED_print_char_inverse+0x44>
    13d4:	ee 0f       	add	r30, r30
    13d6:	ff 1f       	adc	r31, r31
    13d8:	ee 0f       	add	r30, r30
    13da:	ff 1f       	adc	r31, r31
    13dc:	ee 0f       	add	r30, r30
    13de:	ff 1f       	adc	r31, r31
    13e0:	e0 59       	subi	r30, 0x90	; 144
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
		write_data(~pgm_read_byte(&font8[letter_index][col]));
    13e8:	24 91       	lpm	r18, Z
    13ea:	20 95       	com	r18
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    13ec:	a0 91 43 01 	lds	r26, 0x0143
    13f0:	b0 91 44 01 	lds	r27, 0x0144
    13f4:	2c 93       	st	X, r18

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++) {
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	31 96       	adiw	r30, 0x01	; 1
    13fa:	20 91 40 01 	lds	r18, 0x0140
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	82 17       	cp	r24, r18
    1402:	93 07       	cpc	r25, r19
    1404:	8c f3       	brlt	.-30     	; 0x13e8 <OLED_print_char_inverse+0x26>
    1406:	08 95       	ret

00001408 <OLED_set_line>:
	}
	OLED_home();
}

void OLED_set_line(uint8_t line) {
	OLED_pos(line,0);
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <OLED_pos>
    140e:	80 e8       	ldi	r24, 0x80	; 128
    1410:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1412:	2f ef       	ldi	r18, 0xFF	; 255
    1414:	e0 91 43 01 	lds	r30, 0x0143
    1418:	f0 91 44 01 	lds	r31, 0x0144
    141c:	20 83       	st	Z, r18
    141e:	01 97       	sbiw	r24, 0x01	; 1
	OLED_home();
}

void OLED_set_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	c1 f7       	brne	.-16     	; 0x1414 <OLED_set_line+0xc>
		write_data(0xFF);
		
	}
}
    1424:	08 95       	ret

00001426 <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1426:	e0 91 43 01 	lds	r30, 0x0143
    142a:	f0 91 44 01 	lds	r31, 0x0144
    142e:	88 e1       	ldi	r24, 0x18	; 24
    1430:	80 83       	st	Z, r24
    1432:	e0 91 43 01 	lds	r30, 0x0143
    1436:	f0 91 44 01 	lds	r31, 0x0144
    143a:	80 83       	st	Z, r24
    143c:	e0 91 43 01 	lds	r30, 0x0143
    1440:	f0 91 44 01 	lds	r31, 0x0144
    1444:	9e e7       	ldi	r25, 0x7E	; 126
    1446:	90 83       	st	Z, r25
    1448:	e0 91 43 01 	lds	r30, 0x0143
    144c:	f0 91 44 01 	lds	r31, 0x0144
    1450:	9c e3       	ldi	r25, 0x3C	; 60
    1452:	90 83       	st	Z, r25
    1454:	e0 91 43 01 	lds	r30, 0x0143
    1458:	f0 91 44 01 	lds	r31, 0x0144
    145c:	80 83       	st	Z, r24
    145e:	08 95       	ret

00001460 <print_blank>:
#include "OLED_driver.h"

#include <stdio.h>
#include <string.h>

void print_blank(int number) {
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
    1464:	cf 93       	push	r28
    1466:	df 93       	push	r29
    1468:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
    146a:	18 16       	cp	r1, r24
    146c:	19 06       	cpc	r1, r25
    146e:	54 f4       	brge	.+20     	; 0x1484 <print_blank+0x24>
    1470:	c0 e0       	ldi	r28, 0x00	; 0
    1472:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0x00);
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>

#include <stdio.h>
#include <string.h>

void print_blank(int number) {
	for (int i = 0; i < number; i++) {
    147c:	21 96       	adiw	r28, 0x01	; 1
    147e:	c0 17       	cp	r28, r16
    1480:	d1 07       	cpc	r29, r17
    1482:	c1 f7       	brne	.-16     	; 0x1474 <print_blank+0x14>
		write_data(0x00);
	}
}
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	08 95       	ret

0000148e <print_fill>:

void print_fill(int number) {
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
    1498:	18 16       	cp	r1, r24
    149a:	19 06       	cpc	r1, r25
    149c:	54 f4       	brge	.+20     	; 0x14b2 <print_fill+0x24>
    149e:	c0 e0       	ldi	r28, 0x00	; 0
    14a0:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0xFF);
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(0x00);
	}
}

void print_fill(int number) {
	for (int i = 0; i < number; i++) {
    14aa:	21 96       	adiw	r28, 0x01	; 1
    14ac:	c0 17       	cp	r28, r16
    14ae:	d1 07       	cpc	r29, r17
    14b0:	c1 f7       	brne	.-16     	; 0x14a2 <print_fill+0x14>
		write_data(0xFF);
	}
}
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	08 95       	ret

000014bc <print_shift>:

void print_shift(int inverse) {
	if (!inverse) {
    14bc:	89 2b       	or	r24, r25
    14be:	29 f5       	brne	.+74     	; 0x150a <print_shift+0x4e>
		print_blank(4);
    14c0:	84 e0       	ldi	r24, 0x04	; 4
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 30 0a 	call	0x1460	; 0x1460 <print_blank>
		//up-arrow
		write_data(0b00010000);
    14c8:	80 e1       	ldi	r24, 0x10	; 16
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(0b00011000);
    14d0:	88 e1       	ldi	r24, 0x18	; 24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(0b00111100);
    14d8:	8c e3       	ldi	r24, 0x3C	; 60
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(0b00111110);
    14e0:	8e e3       	ldi	r24, 0x3E	; 62
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(0b00111100);
    14e8:	8c e3       	ldi	r24, 0x3C	; 60
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(0b00011000);
    14f0:	88 e1       	ldi	r24, 0x18	; 24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(0b00010000);
    14f8:	80 e1       	ldi	r24, 0x10	; 16
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>

		print_blank(5);
    1500:	85 e0       	ldi	r24, 0x05	; 5
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 30 0a 	call	0x1460	; 0x1460 <print_blank>
    1508:	08 95       	ret
	}
	else {
		print_fill(4);
    150a:	84 e0       	ldi	r24, 0x04	; 4
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 47 0a 	call	0x148e	; 0x148e <print_fill>
		//up-arrow
		write_data(~0b00010000);
    1512:	8f ee       	ldi	r24, 0xEF	; 239
    1514:	9f ef       	ldi	r25, 0xFF	; 255
    1516:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(~0b00011000);
    151a:	87 ee       	ldi	r24, 0xE7	; 231
    151c:	9f ef       	ldi	r25, 0xFF	; 255
    151e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(~0b00111100);
    1522:	83 ec       	ldi	r24, 0xC3	; 195
    1524:	9f ef       	ldi	r25, 0xFF	; 255
    1526:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(~0b00111110);
    152a:	81 ec       	ldi	r24, 0xC1	; 193
    152c:	9f ef       	ldi	r25, 0xFF	; 255
    152e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(~0b00111100);
    1532:	83 ec       	ldi	r24, 0xC3	; 195
    1534:	9f ef       	ldi	r25, 0xFF	; 255
    1536:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(~0b00011000);
    153a:	87 ee       	ldi	r24, 0xE7	; 231
    153c:	9f ef       	ldi	r25, 0xFF	; 255
    153e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(~0b00010000);
    1542:	8f ee       	ldi	r24, 0xEF	; 239
    1544:	9f ef       	ldi	r25, 0xFF	; 255
    1546:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		print_fill(5);
    154a:	85 e0       	ldi	r24, 0x05	; 5
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 47 0a 	call	0x148e	; 0x148e <print_fill>
    1552:	08 95       	ret

00001554 <print_left_arrow>:
	}
}

void print_left_arrow(int inverse) {
	if (!inverse) {
    1554:	89 2b       	or	r24, r25
    1556:	a9 f4       	brne	.+42     	; 0x1582 <print_left_arrow+0x2e>
		print_blank(6);
    1558:	86 e0       	ldi	r24, 0x06	; 6
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 30 0a 	call	0x1460	; 0x1460 <print_blank>
		//left-arrow

		write_data(0b00010000);
    1560:	80 e1       	ldi	r24, 0x10	; 16
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(0b00111000);
    1568:	88 e3       	ldi	r24, 0x38	; 56
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(0b01111100);
    1570:	8c e7       	ldi	r24, 0x7C	; 124
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>

		print_blank(7);
    1578:	87 e0       	ldi	r24, 0x07	; 7
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 30 0a 	call	0x1460	; 0x1460 <print_blank>
    1580:	08 95       	ret
	}
	else {
		print_fill(6);
    1582:	86 e0       	ldi	r24, 0x06	; 6
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 47 0a 	call	0x148e	; 0x148e <print_fill>
		//left-arrow
		write_data(~0b00010000);
    158a:	8f ee       	ldi	r24, 0xEF	; 239
    158c:	9f ef       	ldi	r25, 0xFF	; 255
    158e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(~0b00111000);
    1592:	87 ec       	ldi	r24, 0xC7	; 199
    1594:	9f ef       	ldi	r25, 0xFF	; 255
    1596:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(~0b01111100);
    159a:	83 e8       	ldi	r24, 0x83	; 131
    159c:	9f ef       	ldi	r25, 0xFF	; 255
    159e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>

		print_fill(7);
    15a2:	87 e0       	ldi	r24, 0x07	; 7
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 47 0a 	call	0x148e	; 0x148e <print_fill>
    15aa:	08 95       	ret

000015ac <print_right_arrow>:
	}
}


void print_right_arrow(int inverse) {
	if (!inverse) {
    15ac:	89 2b       	or	r24, r25
    15ae:	a9 f4       	brne	.+42     	; 0x15da <print_right_arrow+0x2e>
		print_blank(6);
    15b0:	86 e0       	ldi	r24, 0x06	; 6
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 30 0a 	call	0x1460	; 0x1460 <print_blank>

		//right-arrow
		write_data(0b01111100);
    15b8:	8c e7       	ldi	r24, 0x7C	; 124
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(0b00111000);
    15c0:	88 e3       	ldi	r24, 0x38	; 56
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(0b00010000);
    15c8:	80 e1       	ldi	r24, 0x10	; 16
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>

		print_blank(7);
    15d0:	87 e0       	ldi	r24, 0x07	; 7
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 30 0a 	call	0x1460	; 0x1460 <print_blank>
    15d8:	08 95       	ret
	}
	else {
		print_fill(6);
    15da:	86 e0       	ldi	r24, 0x06	; 6
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 47 0a 	call	0x148e	; 0x148e <print_fill>

		//right-arrow
		write_data(~0b01111100);
    15e2:	83 e8       	ldi	r24, 0x83	; 131
    15e4:	9f ef       	ldi	r25, 0xFF	; 255
    15e6:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(~0b00111000);
    15ea:	87 ec       	ldi	r24, 0xC7	; 199
    15ec:	9f ef       	ldi	r25, 0xFF	; 255
    15ee:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
		write_data(~0b00010000);
    15f2:	8f ee       	ldi	r24, 0xEF	; 239
    15f4:	9f ef       	ldi	r25, 0xFF	; 255
    15f6:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>

		print_fill(7);
    15fa:	87 e0       	ldi	r24, 0x07	; 7
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 47 0a 	call	0x148e	; 0x148e <print_fill>
    1602:	08 95       	ret

00001604 <print_spacebar>:
	}
}


void print_spacebar(int inverse) {
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
	if (!inverse) {
    1608:	89 2b       	or	r24, r25
    160a:	d1 f4       	brne	.+52     	; 0x1640 <print_spacebar+0x3c>
		print_blank(4);
    160c:	84 e0       	ldi	r24, 0x04	; 4
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 30 0a 	call	0x1460	; 0x1460 <print_blank>

		//spacebar
		write_data(0b00111000);
    1614:	88 e3       	ldi	r24, 0x38	; 56
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
    161c:	c7 e2       	ldi	r28, 0x27	; 39
    161e:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 39;i++) write_data(0b00100000);
    1620:	80 e2       	ldi	r24, 0x20	; 32
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
    1628:	21 97       	sbiw	r28, 0x01	; 1
    162a:	20 97       	sbiw	r28, 0x00	; 0
    162c:	c9 f7       	brne	.-14     	; 0x1620 <print_spacebar+0x1c>
		write_data(0b00111000);
    162e:	88 e3       	ldi	r24, 0x38	; 56
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>

		print_blank(5);
    1636:	85 e0       	ldi	r24, 0x05	; 5
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0e 94 30 0a 	call	0x1460	; 0x1460 <print_blank>
    163e:	19 c0       	rjmp	.+50     	; 0x1672 <print_spacebar+0x6e>
	}
	else {
		print_blank(4);
    1640:	84 e0       	ldi	r24, 0x04	; 4
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 30 0a 	call	0x1460	; 0x1460 <print_blank>

		//spacebar
		write_data(~0b00111000);
    1648:	87 ec       	ldi	r24, 0xC7	; 199
    164a:	9f ef       	ldi	r25, 0xFF	; 255
    164c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
    1650:	c7 e2       	ldi	r28, 0x27	; 39
    1652:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 39;i++) write_data(~0b00100000);
    1654:	8f ed       	ldi	r24, 0xDF	; 223
    1656:	9f ef       	ldi	r25, 0xFF	; 255
    1658:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>
    165c:	21 97       	sbiw	r28, 0x01	; 1
    165e:	20 97       	sbiw	r28, 0x00	; 0
    1660:	c9 f7       	brne	.-14     	; 0x1654 <print_spacebar+0x50>
		write_data(~0b00111000);
    1662:	87 ec       	ldi	r24, 0xC7	; 199
    1664:	9f ef       	ldi	r25, 0xFF	; 255
    1666:	0e 94 58 09 	call	0x12b0	; 0x12b0 <write_data>

		print_blank(5);
    166a:	85 e0       	ldi	r24, 0x05	; 5
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e 94 30 0a 	call	0x1460	; 0x1460 <print_blank>
	}
}
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <print_options_bar>:


void print_options_bar(int shift_inverse, int space_inverse, int left_inverse,  int right_inverse) {
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	7b 01       	movw	r14, r22
    1686:	8a 01       	movw	r16, r20
    1688:	e9 01       	movw	r28, r18
	print_shift(shift_inverse);
    168a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <print_shift>
	print_spacebar(space_inverse);
    168e:	c7 01       	movw	r24, r14
    1690:	0e 94 02 0b 	call	0x1604	; 0x1604 <print_spacebar>
	print_left_arrow(left_inverse);
    1694:	c8 01       	movw	r24, r16
    1696:	0e 94 aa 0a 	call	0x1554	; 0x1554 <print_left_arrow>
	print_right_arrow(right_inverse);
    169a:	ce 01       	movw	r24, r28
    169c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <print_right_arrow>
}
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	08 95       	ret

000016ae <print_char>:

void print_char(char c, int inverse) {
	if (!inverse) {
    16ae:	67 2b       	or	r22, r23
    16b0:	19 f4       	brne	.+6      	; 0x16b8 <print_char+0xa>
		OLED_print_char(c);
    16b2:	0e 94 36 09 	call	0x126c	; 0x126c <OLED_print_char>
    16b6:	08 95       	ret
	}
	else {
		OLED_print_char_inverse(c);
    16b8:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <OLED_print_char_inverse>
    16bc:	08 95       	ret

000016be <SPI_send>:
}


void SPI_send(uint8_t data){
	//Start transmission
	SPDR = data;		
    16be:	8f b9       	out	0x0f, r24	; 15
	//wait for transmission complete SPSR: register with SPIF flag, SPIF: bit set to 1 when data is read
	loop_until_bit_is_set(SPSR, SPIF);
    16c0:	77 9b       	sbis	0x0e, 7	; 14
    16c2:	fe cf       	rjmp	.-4      	; 0x16c0 <SPI_send+0x2>
}
    16c4:	08 95       	ret

000016c6 <SPI_read>:


char SPI_read(){
	//must send a dummy bit to receive data
	SPI_send(0);
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	0e 94 5f 0b 	call	0x16be	; 0x16be <SPI_send>
	
	loop_until_bit_is_set(SPSR, SPIF);
    16cc:	77 9b       	sbis	0x0e, 7	; 14
    16ce:	fe cf       	rjmp	.-4      	; 0x16cc <SPI_read+0x6>
	char data = SPDR;
    16d0:	8f b1       	in	r24, 0x0f	; 15
	return data;
	
}
    16d2:	08 95       	ret

000016d4 <SPI_select>:
	//printf("SPI_TEST: %s\n\n", spi_read_result);
	
}

void SPI_select(){
	clear_bit(PORTB, SS);
    16d4:	c4 98       	cbi	0x18, 4	; 24
    16d6:	08 95       	ret

000016d8 <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
    16d8:	c4 9a       	sbi	0x18, 4	; 24
    16da:	08 95       	ret

000016dc <SRAM_init>:



void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
    16dc:	85 b7       	in	r24, 0x35	; 53
    16de:	80 68       	ori	r24, 0x80	; 128
    16e0:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
    16e2:	80 b7       	in	r24, 0x30	; 48
    16e4:	80 62       	ori	r24, 0x20	; 32
    16e6:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
    16e8:	80 b7       	in	r24, 0x30	; 48
    16ea:	8f 7e       	andi	r24, 0xEF	; 239
    16ec:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
    16ee:	80 b7       	in	r24, 0x30	; 48
    16f0:	87 7f       	andi	r24, 0xF7	; 247
    16f2:	80 bf       	out	0x30, r24	; 48
    16f4:	08 95       	ret

000016f6 <usart_transmit_to_computer>:
}


void usart_transmit_to_computer(unsigned int data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
    16f6:	5d 9b       	sbis	0x0b, 5	; 11
    16f8:	fe cf       	rjmp	.-4      	; 0x16f6 <usart_transmit_to_computer>
	;
	
	/* Put data into buffer (sends the data) */
	UDR0 = data;
    16fa:	8c b9       	out	0x0c, r24	; 12
    16fc:	08 95       	ret

000016fe <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
    16fe:	5f 9b       	sbis	0x0b, 7	; 11
    1700:	fe cf       	rjmp	.-4      	; 0x16fe <usart_receive_from_computer>
	;
	
	/* Get and return data from buffer */
	return UDR0;
    1702:	8c b1       	in	r24, 0x0c	; 12
}
    1704:	08 95       	ret

00001706 <usart_init>:
#include <stdio.h>


void usart_init(unsigned int ubbr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubbr>>8);
    1706:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
    1708:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    170a:	88 e1       	ldi	r24, 0x18	; 24
    170c:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    170e:	8e e8       	ldi	r24, 0x8E	; 142
    1710:	80 bd       	out	0x20, r24	; 32
	
	
	/* Enable printf-thing */
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
    1712:	6f e7       	ldi	r22, 0x7F	; 127
    1714:	7b e0       	ldi	r23, 0x0B	; 11
    1716:	8b e7       	ldi	r24, 0x7B	; 123
    1718:	9b e0       	ldi	r25, 0x0B	; 11
    171a:	0e 94 df 0c 	call	0x19be	; 0x19be <fdevopen>
    171e:	08 95       	ret

00001720 <__divmodhi4>:
    1720:	97 fb       	bst	r25, 7
    1722:	07 2e       	mov	r0, r23
    1724:	16 f4       	brtc	.+4      	; 0x172a <__divmodhi4+0xa>
    1726:	00 94       	com	r0
    1728:	07 d0       	rcall	.+14     	; 0x1738 <__divmodhi4_neg1>
    172a:	77 fd       	sbrc	r23, 7
    172c:	09 d0       	rcall	.+18     	; 0x1740 <__divmodhi4_neg2>
    172e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__udivmodhi4>
    1732:	07 fc       	sbrc	r0, 7
    1734:	05 d0       	rcall	.+10     	; 0x1740 <__divmodhi4_neg2>
    1736:	3e f4       	brtc	.+14     	; 0x1746 <__divmodhi4_exit>

00001738 <__divmodhi4_neg1>:
    1738:	90 95       	com	r25
    173a:	81 95       	neg	r24
    173c:	9f 4f       	sbci	r25, 0xFF	; 255
    173e:	08 95       	ret

00001740 <__divmodhi4_neg2>:
    1740:	70 95       	com	r23
    1742:	61 95       	neg	r22
    1744:	7f 4f       	sbci	r23, 0xFF	; 255

00001746 <__divmodhi4_exit>:
    1746:	08 95       	ret

00001748 <__udivmodhi4>:
    1748:	aa 1b       	sub	r26, r26
    174a:	bb 1b       	sub	r27, r27
    174c:	51 e1       	ldi	r21, 0x11	; 17
    174e:	07 c0       	rjmp	.+14     	; 0x175e <__udivmodhi4_ep>

00001750 <__udivmodhi4_loop>:
    1750:	aa 1f       	adc	r26, r26
    1752:	bb 1f       	adc	r27, r27
    1754:	a6 17       	cp	r26, r22
    1756:	b7 07       	cpc	r27, r23
    1758:	10 f0       	brcs	.+4      	; 0x175e <__udivmodhi4_ep>
    175a:	a6 1b       	sub	r26, r22
    175c:	b7 0b       	sbc	r27, r23

0000175e <__udivmodhi4_ep>:
    175e:	88 1f       	adc	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	5a 95       	dec	r21
    1764:	a9 f7       	brne	.-22     	; 0x1750 <__udivmodhi4_loop>
    1766:	80 95       	com	r24
    1768:	90 95       	com	r25
    176a:	bc 01       	movw	r22, r24
    176c:	cd 01       	movw	r24, r26
    176e:	08 95       	ret

00001770 <malloc>:
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	82 30       	cpi	r24, 0x02	; 2
    1776:	91 05       	cpc	r25, r1
    1778:	10 f4       	brcc	.+4      	; 0x177e <malloc+0xe>
    177a:	82 e0       	ldi	r24, 0x02	; 2
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	e0 91 ee 03 	lds	r30, 0x03EE
    1782:	f0 91 ef 03 	lds	r31, 0x03EF
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	a0 e0       	ldi	r26, 0x00	; 0
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	30 97       	sbiw	r30, 0x00	; 0
    1790:	39 f1       	breq	.+78     	; 0x17e0 <malloc+0x70>
    1792:	40 81       	ld	r20, Z
    1794:	51 81       	ldd	r21, Z+1	; 0x01
    1796:	48 17       	cp	r20, r24
    1798:	59 07       	cpc	r21, r25
    179a:	b8 f0       	brcs	.+46     	; 0x17ca <malloc+0x5a>
    179c:	48 17       	cp	r20, r24
    179e:	59 07       	cpc	r21, r25
    17a0:	71 f4       	brne	.+28     	; 0x17be <malloc+0x4e>
    17a2:	82 81       	ldd	r24, Z+2	; 0x02
    17a4:	93 81       	ldd	r25, Z+3	; 0x03
    17a6:	10 97       	sbiw	r26, 0x00	; 0
    17a8:	29 f0       	breq	.+10     	; 0x17b4 <malloc+0x44>
    17aa:	13 96       	adiw	r26, 0x03	; 3
    17ac:	9c 93       	st	X, r25
    17ae:	8e 93       	st	-X, r24
    17b0:	12 97       	sbiw	r26, 0x02	; 2
    17b2:	2c c0       	rjmp	.+88     	; 0x180c <malloc+0x9c>
    17b4:	90 93 ef 03 	sts	0x03EF, r25
    17b8:	80 93 ee 03 	sts	0x03EE, r24
    17bc:	27 c0       	rjmp	.+78     	; 0x180c <malloc+0x9c>
    17be:	21 15       	cp	r18, r1
    17c0:	31 05       	cpc	r19, r1
    17c2:	31 f0       	breq	.+12     	; 0x17d0 <malloc+0x60>
    17c4:	42 17       	cp	r20, r18
    17c6:	53 07       	cpc	r21, r19
    17c8:	18 f0       	brcs	.+6      	; 0x17d0 <malloc+0x60>
    17ca:	a9 01       	movw	r20, r18
    17cc:	db 01       	movw	r26, r22
    17ce:	01 c0       	rjmp	.+2      	; 0x17d2 <malloc+0x62>
    17d0:	ef 01       	movw	r28, r30
    17d2:	9a 01       	movw	r18, r20
    17d4:	bd 01       	movw	r22, r26
    17d6:	df 01       	movw	r26, r30
    17d8:	02 80       	ldd	r0, Z+2	; 0x02
    17da:	f3 81       	ldd	r31, Z+3	; 0x03
    17dc:	e0 2d       	mov	r30, r0
    17de:	d7 cf       	rjmp	.-82     	; 0x178e <malloc+0x1e>
    17e0:	21 15       	cp	r18, r1
    17e2:	31 05       	cpc	r19, r1
    17e4:	f9 f0       	breq	.+62     	; 0x1824 <malloc+0xb4>
    17e6:	28 1b       	sub	r18, r24
    17e8:	39 0b       	sbc	r19, r25
    17ea:	24 30       	cpi	r18, 0x04	; 4
    17ec:	31 05       	cpc	r19, r1
    17ee:	80 f4       	brcc	.+32     	; 0x1810 <malloc+0xa0>
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	9b 81       	ldd	r25, Y+3	; 0x03
    17f4:	61 15       	cp	r22, r1
    17f6:	71 05       	cpc	r23, r1
    17f8:	21 f0       	breq	.+8      	; 0x1802 <malloc+0x92>
    17fa:	fb 01       	movw	r30, r22
    17fc:	93 83       	std	Z+3, r25	; 0x03
    17fe:	82 83       	std	Z+2, r24	; 0x02
    1800:	04 c0       	rjmp	.+8      	; 0x180a <malloc+0x9a>
    1802:	90 93 ef 03 	sts	0x03EF, r25
    1806:	80 93 ee 03 	sts	0x03EE, r24
    180a:	fe 01       	movw	r30, r28
    180c:	32 96       	adiw	r30, 0x02	; 2
    180e:	44 c0       	rjmp	.+136    	; 0x1898 <malloc+0x128>
    1810:	fe 01       	movw	r30, r28
    1812:	e2 0f       	add	r30, r18
    1814:	f3 1f       	adc	r31, r19
    1816:	81 93       	st	Z+, r24
    1818:	91 93       	st	Z+, r25
    181a:	22 50       	subi	r18, 0x02	; 2
    181c:	31 09       	sbc	r19, r1
    181e:	39 83       	std	Y+1, r19	; 0x01
    1820:	28 83       	st	Y, r18
    1822:	3a c0       	rjmp	.+116    	; 0x1898 <malloc+0x128>
    1824:	20 91 ec 03 	lds	r18, 0x03EC
    1828:	30 91 ed 03 	lds	r19, 0x03ED
    182c:	23 2b       	or	r18, r19
    182e:	41 f4       	brne	.+16     	; 0x1840 <malloc+0xd0>
    1830:	20 91 02 01 	lds	r18, 0x0102
    1834:	30 91 03 01 	lds	r19, 0x0103
    1838:	30 93 ed 03 	sts	0x03ED, r19
    183c:	20 93 ec 03 	sts	0x03EC, r18
    1840:	20 91 00 01 	lds	r18, 0x0100
    1844:	30 91 01 01 	lds	r19, 0x0101
    1848:	21 15       	cp	r18, r1
    184a:	31 05       	cpc	r19, r1
    184c:	41 f4       	brne	.+16     	; 0x185e <malloc+0xee>
    184e:	2d b7       	in	r18, 0x3d	; 61
    1850:	3e b7       	in	r19, 0x3e	; 62
    1852:	40 91 04 01 	lds	r20, 0x0104
    1856:	50 91 05 01 	lds	r21, 0x0105
    185a:	24 1b       	sub	r18, r20
    185c:	35 0b       	sbc	r19, r21
    185e:	e0 91 ec 03 	lds	r30, 0x03EC
    1862:	f0 91 ed 03 	lds	r31, 0x03ED
    1866:	e2 17       	cp	r30, r18
    1868:	f3 07       	cpc	r31, r19
    186a:	a0 f4       	brcc	.+40     	; 0x1894 <malloc+0x124>
    186c:	2e 1b       	sub	r18, r30
    186e:	3f 0b       	sbc	r19, r31
    1870:	28 17       	cp	r18, r24
    1872:	39 07       	cpc	r19, r25
    1874:	78 f0       	brcs	.+30     	; 0x1894 <malloc+0x124>
    1876:	ac 01       	movw	r20, r24
    1878:	4e 5f       	subi	r20, 0xFE	; 254
    187a:	5f 4f       	sbci	r21, 0xFF	; 255
    187c:	24 17       	cp	r18, r20
    187e:	35 07       	cpc	r19, r21
    1880:	48 f0       	brcs	.+18     	; 0x1894 <malloc+0x124>
    1882:	4e 0f       	add	r20, r30
    1884:	5f 1f       	adc	r21, r31
    1886:	50 93 ed 03 	sts	0x03ED, r21
    188a:	40 93 ec 03 	sts	0x03EC, r20
    188e:	81 93       	st	Z+, r24
    1890:	91 93       	st	Z+, r25
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <malloc+0x128>
    1894:	e0 e0       	ldi	r30, 0x00	; 0
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	cf 01       	movw	r24, r30
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <free>:
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	09 f4       	brne	.+2      	; 0x18aa <free+0xa>
    18a8:	87 c0       	rjmp	.+270    	; 0x19b8 <free+0x118>
    18aa:	fc 01       	movw	r30, r24
    18ac:	32 97       	sbiw	r30, 0x02	; 2
    18ae:	13 82       	std	Z+3, r1	; 0x03
    18b0:	12 82       	std	Z+2, r1	; 0x02
    18b2:	c0 91 ee 03 	lds	r28, 0x03EE
    18b6:	d0 91 ef 03 	lds	r29, 0x03EF
    18ba:	20 97       	sbiw	r28, 0x00	; 0
    18bc:	81 f4       	brne	.+32     	; 0x18de <free+0x3e>
    18be:	20 81       	ld	r18, Z
    18c0:	31 81       	ldd	r19, Z+1	; 0x01
    18c2:	28 0f       	add	r18, r24
    18c4:	39 1f       	adc	r19, r25
    18c6:	80 91 ec 03 	lds	r24, 0x03EC
    18ca:	90 91 ed 03 	lds	r25, 0x03ED
    18ce:	82 17       	cp	r24, r18
    18d0:	93 07       	cpc	r25, r19
    18d2:	79 f5       	brne	.+94     	; 0x1932 <free+0x92>
    18d4:	f0 93 ed 03 	sts	0x03ED, r31
    18d8:	e0 93 ec 03 	sts	0x03EC, r30
    18dc:	6d c0       	rjmp	.+218    	; 0x19b8 <free+0x118>
    18de:	de 01       	movw	r26, r28
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	ae 17       	cp	r26, r30
    18e6:	bf 07       	cpc	r27, r31
    18e8:	50 f4       	brcc	.+20     	; 0x18fe <free+0x5e>
    18ea:	12 96       	adiw	r26, 0x02	; 2
    18ec:	4d 91       	ld	r20, X+
    18ee:	5c 91       	ld	r21, X
    18f0:	13 97       	sbiw	r26, 0x03	; 3
    18f2:	9d 01       	movw	r18, r26
    18f4:	41 15       	cp	r20, r1
    18f6:	51 05       	cpc	r21, r1
    18f8:	09 f1       	breq	.+66     	; 0x193c <free+0x9c>
    18fa:	da 01       	movw	r26, r20
    18fc:	f3 cf       	rjmp	.-26     	; 0x18e4 <free+0x44>
    18fe:	b3 83       	std	Z+3, r27	; 0x03
    1900:	a2 83       	std	Z+2, r26	; 0x02
    1902:	40 81       	ld	r20, Z
    1904:	51 81       	ldd	r21, Z+1	; 0x01
    1906:	84 0f       	add	r24, r20
    1908:	95 1f       	adc	r25, r21
    190a:	8a 17       	cp	r24, r26
    190c:	9b 07       	cpc	r25, r27
    190e:	71 f4       	brne	.+28     	; 0x192c <free+0x8c>
    1910:	8d 91       	ld	r24, X+
    1912:	9c 91       	ld	r25, X
    1914:	11 97       	sbiw	r26, 0x01	; 1
    1916:	84 0f       	add	r24, r20
    1918:	95 1f       	adc	r25, r21
    191a:	02 96       	adiw	r24, 0x02	; 2
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	80 83       	st	Z, r24
    1920:	12 96       	adiw	r26, 0x02	; 2
    1922:	8d 91       	ld	r24, X+
    1924:	9c 91       	ld	r25, X
    1926:	13 97       	sbiw	r26, 0x03	; 3
    1928:	93 83       	std	Z+3, r25	; 0x03
    192a:	82 83       	std	Z+2, r24	; 0x02
    192c:	21 15       	cp	r18, r1
    192e:	31 05       	cpc	r19, r1
    1930:	29 f4       	brne	.+10     	; 0x193c <free+0x9c>
    1932:	f0 93 ef 03 	sts	0x03EF, r31
    1936:	e0 93 ee 03 	sts	0x03EE, r30
    193a:	3e c0       	rjmp	.+124    	; 0x19b8 <free+0x118>
    193c:	d9 01       	movw	r26, r18
    193e:	13 96       	adiw	r26, 0x03	; 3
    1940:	fc 93       	st	X, r31
    1942:	ee 93       	st	-X, r30
    1944:	12 97       	sbiw	r26, 0x02	; 2
    1946:	4d 91       	ld	r20, X+
    1948:	5d 91       	ld	r21, X+
    194a:	a4 0f       	add	r26, r20
    194c:	b5 1f       	adc	r27, r21
    194e:	ea 17       	cp	r30, r26
    1950:	fb 07       	cpc	r31, r27
    1952:	79 f4       	brne	.+30     	; 0x1972 <free+0xd2>
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
    1958:	84 0f       	add	r24, r20
    195a:	95 1f       	adc	r25, r21
    195c:	02 96       	adiw	r24, 0x02	; 2
    195e:	d9 01       	movw	r26, r18
    1960:	11 96       	adiw	r26, 0x01	; 1
    1962:	9c 93       	st	X, r25
    1964:	8e 93       	st	-X, r24
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	13 96       	adiw	r26, 0x03	; 3
    196c:	9c 93       	st	X, r25
    196e:	8e 93       	st	-X, r24
    1970:	12 97       	sbiw	r26, 0x02	; 2
    1972:	e0 e0       	ldi	r30, 0x00	; 0
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	9b 81       	ldd	r25, Y+3	; 0x03
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	19 f0       	breq	.+6      	; 0x1984 <free+0xe4>
    197e:	fe 01       	movw	r30, r28
    1980:	ec 01       	movw	r28, r24
    1982:	f9 cf       	rjmp	.-14     	; 0x1976 <free+0xd6>
    1984:	ce 01       	movw	r24, r28
    1986:	02 96       	adiw	r24, 0x02	; 2
    1988:	28 81       	ld	r18, Y
    198a:	39 81       	ldd	r19, Y+1	; 0x01
    198c:	82 0f       	add	r24, r18
    198e:	93 1f       	adc	r25, r19
    1990:	20 91 ec 03 	lds	r18, 0x03EC
    1994:	30 91 ed 03 	lds	r19, 0x03ED
    1998:	28 17       	cp	r18, r24
    199a:	39 07       	cpc	r19, r25
    199c:	69 f4       	brne	.+26     	; 0x19b8 <free+0x118>
    199e:	30 97       	sbiw	r30, 0x00	; 0
    19a0:	29 f4       	brne	.+10     	; 0x19ac <free+0x10c>
    19a2:	10 92 ef 03 	sts	0x03EF, r1
    19a6:	10 92 ee 03 	sts	0x03EE, r1
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <free+0x110>
    19ac:	13 82       	std	Z+3, r1	; 0x03
    19ae:	12 82       	std	Z+2, r1	; 0x02
    19b0:	d0 93 ed 03 	sts	0x03ED, r29
    19b4:	c0 93 ec 03 	sts	0x03EC, r28
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	08 95       	ret

000019be <fdevopen>:
    19be:	0f 93       	push	r16
    19c0:	1f 93       	push	r17
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ec 01       	movw	r28, r24
    19c8:	8b 01       	movw	r16, r22
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	31 f4       	brne	.+12     	; 0x19da <fdevopen+0x1c>
    19ce:	61 15       	cp	r22, r1
    19d0:	71 05       	cpc	r23, r1
    19d2:	19 f4       	brne	.+6      	; 0x19da <fdevopen+0x1c>
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	38 c0       	rjmp	.+112    	; 0x1a4a <fdevopen+0x8c>
    19da:	6e e0       	ldi	r22, 0x0E	; 14
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <calloc>
    19e6:	fc 01       	movw	r30, r24
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	a1 f3       	breq	.-24     	; 0x19d4 <fdevopen+0x16>
    19ec:	80 e8       	ldi	r24, 0x80	; 128
    19ee:	83 83       	std	Z+3, r24	; 0x03
    19f0:	01 15       	cp	r16, r1
    19f2:	11 05       	cpc	r17, r1
    19f4:	71 f0       	breq	.+28     	; 0x1a12 <fdevopen+0x54>
    19f6:	13 87       	std	Z+11, r17	; 0x0b
    19f8:	02 87       	std	Z+10, r16	; 0x0a
    19fa:	81 e8       	ldi	r24, 0x81	; 129
    19fc:	83 83       	std	Z+3, r24	; 0x03
    19fe:	80 91 f0 03 	lds	r24, 0x03F0
    1a02:	90 91 f1 03 	lds	r25, 0x03F1
    1a06:	89 2b       	or	r24, r25
    1a08:	21 f4       	brne	.+8      	; 0x1a12 <fdevopen+0x54>
    1a0a:	f0 93 f1 03 	sts	0x03F1, r31
    1a0e:	e0 93 f0 03 	sts	0x03F0, r30
    1a12:	20 97       	sbiw	r28, 0x00	; 0
    1a14:	c9 f0       	breq	.+50     	; 0x1a48 <fdevopen+0x8a>
    1a16:	d1 87       	std	Z+9, r29	; 0x09
    1a18:	c0 87       	std	Z+8, r28	; 0x08
    1a1a:	83 81       	ldd	r24, Z+3	; 0x03
    1a1c:	82 60       	ori	r24, 0x02	; 2
    1a1e:	83 83       	std	Z+3, r24	; 0x03
    1a20:	80 91 f2 03 	lds	r24, 0x03F2
    1a24:	90 91 f3 03 	lds	r25, 0x03F3
    1a28:	89 2b       	or	r24, r25
    1a2a:	71 f4       	brne	.+28     	; 0x1a48 <fdevopen+0x8a>
    1a2c:	f0 93 f3 03 	sts	0x03F3, r31
    1a30:	e0 93 f2 03 	sts	0x03F2, r30
    1a34:	80 91 f4 03 	lds	r24, 0x03F4
    1a38:	90 91 f5 03 	lds	r25, 0x03F5
    1a3c:	89 2b       	or	r24, r25
    1a3e:	21 f4       	brne	.+8      	; 0x1a48 <fdevopen+0x8a>
    1a40:	f0 93 f5 03 	sts	0x03F5, r31
    1a44:	e0 93 f4 03 	sts	0x03F4, r30
    1a48:	cf 01       	movw	r24, r30
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	08 95       	ret

00001a54 <fprintf>:
    1a54:	a0 e0       	ldi	r26, 0x00	; 0
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e0 e3       	ldi	r30, 0x30	; 48
    1a5a:	fd e0       	ldi	r31, 0x0D	; 13
    1a5c:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__prologue_saves__+0x20>
    1a60:	ae 01       	movw	r20, r28
    1a62:	47 5f       	subi	r20, 0xF7	; 247
    1a64:	5f 4f       	sbci	r21, 0xFF	; 255
    1a66:	6f 81       	ldd	r22, Y+7	; 0x07
    1a68:	78 85       	ldd	r23, Y+8	; 0x08
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <vfprintf>
    1a72:	e2 e0       	ldi	r30, 0x02	; 2
    1a74:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__epilogue_restores__+0x20>

00001a78 <fputs>:
    1a78:	ef 92       	push	r14
    1a7a:	ff 92       	push	r15
    1a7c:	0f 93       	push	r16
    1a7e:	1f 93       	push	r17
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	8b 01       	movw	r16, r22
    1a86:	db 01       	movw	r26, r22
    1a88:	13 96       	adiw	r26, 0x03	; 3
    1a8a:	2c 91       	ld	r18, X
    1a8c:	21 ff       	sbrs	r18, 1
    1a8e:	16 c0       	rjmp	.+44     	; 0x1abc <fputs+0x44>
    1a90:	ec 01       	movw	r28, r24
    1a92:	e1 2c       	mov	r14, r1
    1a94:	f1 2c       	mov	r15, r1
    1a96:	89 91       	ld	r24, Y+
    1a98:	88 23       	and	r24, r24
    1a9a:	71 f0       	breq	.+28     	; 0x1ab8 <fputs+0x40>
    1a9c:	d8 01       	movw	r26, r16
    1a9e:	18 96       	adiw	r26, 0x08	; 8
    1aa0:	ed 91       	ld	r30, X+
    1aa2:	fc 91       	ld	r31, X
    1aa4:	19 97       	sbiw	r26, 0x09	; 9
    1aa6:	b8 01       	movw	r22, r16
    1aa8:	09 95       	icall
    1aaa:	89 2b       	or	r24, r25
    1aac:	a1 f3       	breq	.-24     	; 0x1a96 <fputs+0x1e>
    1aae:	ee 24       	eor	r14, r14
    1ab0:	ea 94       	dec	r14
    1ab2:	ff 24       	eor	r15, r15
    1ab4:	fa 94       	dec	r15
    1ab6:	ef cf       	rjmp	.-34     	; 0x1a96 <fputs+0x1e>
    1ab8:	c7 01       	movw	r24, r14
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <fputs+0x48>
    1abc:	8f ef       	ldi	r24, 0xFF	; 255
    1abe:	9f ef       	ldi	r25, 0xFF	; 255
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	e6 e0       	ldi	r30, 0x06	; 6
    1ac6:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <__epilogue_restores__+0x18>

00001aca <printf>:
    1aca:	a0 e0       	ldi	r26, 0x00	; 0
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	eb e6       	ldi	r30, 0x6B	; 107
    1ad0:	fd e0       	ldi	r31, 0x0D	; 13
    1ad2:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__prologue_saves__+0x20>
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	35 96       	adiw	r30, 0x05	; 5
    1ada:	61 91       	ld	r22, Z+
    1adc:	71 91       	ld	r23, Z+
    1ade:	af 01       	movw	r20, r30
    1ae0:	80 91 f2 03 	lds	r24, 0x03F2
    1ae4:	90 91 f3 03 	lds	r25, 0x03F3
    1ae8:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <vfprintf>
    1aec:	e2 e0       	ldi	r30, 0x02	; 2
    1aee:	0c 94 6d 10 	jmp	0x20da	; 0x20da <__epilogue_restores__+0x20>

00001af2 <puts>:
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	e0 91 f2 03 	lds	r30, 0x03F2
    1afe:	f0 91 f3 03 	lds	r31, 0x03F3
    1b02:	23 81       	ldd	r18, Z+3	; 0x03
    1b04:	21 ff       	sbrs	r18, 1
    1b06:	1b c0       	rjmp	.+54     	; 0x1b3e <puts+0x4c>
    1b08:	ec 01       	movw	r28, r24
    1b0a:	00 e0       	ldi	r16, 0x00	; 0
    1b0c:	10 e0       	ldi	r17, 0x00	; 0
    1b0e:	89 91       	ld	r24, Y+
    1b10:	60 91 f2 03 	lds	r22, 0x03F2
    1b14:	70 91 f3 03 	lds	r23, 0x03F3
    1b18:	db 01       	movw	r26, r22
    1b1a:	18 96       	adiw	r26, 0x08	; 8
    1b1c:	ed 91       	ld	r30, X+
    1b1e:	fc 91       	ld	r31, X
    1b20:	19 97       	sbiw	r26, 0x09	; 9
    1b22:	88 23       	and	r24, r24
    1b24:	31 f0       	breq	.+12     	; 0x1b32 <puts+0x40>
    1b26:	09 95       	icall
    1b28:	89 2b       	or	r24, r25
    1b2a:	89 f3       	breq	.-30     	; 0x1b0e <puts+0x1c>
    1b2c:	0f ef       	ldi	r16, 0xFF	; 255
    1b2e:	1f ef       	ldi	r17, 0xFF	; 255
    1b30:	ee cf       	rjmp	.-36     	; 0x1b0e <puts+0x1c>
    1b32:	8a e0       	ldi	r24, 0x0A	; 10
    1b34:	09 95       	icall
    1b36:	89 2b       	or	r24, r25
    1b38:	11 f4       	brne	.+4      	; 0x1b3e <puts+0x4c>
    1b3a:	c8 01       	movw	r24, r16
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <puts+0x50>
    1b3e:	8f ef       	ldi	r24, 0xFF	; 255
    1b40:	9f ef       	ldi	r25, 0xFF	; 255
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	08 95       	ret

00001b4c <vfprintf>:
    1b4c:	ac e0       	ldi	r26, 0x0C	; 12
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	ec ea       	ldi	r30, 0xAC	; 172
    1b52:	fd e0       	ldi	r31, 0x0D	; 13
    1b54:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__prologue_saves__>
    1b58:	7c 01       	movw	r14, r24
    1b5a:	6b 01       	movw	r12, r22
    1b5c:	8a 01       	movw	r16, r20
    1b5e:	fc 01       	movw	r30, r24
    1b60:	17 82       	std	Z+7, r1	; 0x07
    1b62:	16 82       	std	Z+6, r1	; 0x06
    1b64:	83 81       	ldd	r24, Z+3	; 0x03
    1b66:	81 ff       	sbrs	r24, 1
    1b68:	bd c1       	rjmp	.+890    	; 0x1ee4 <vfprintf+0x398>
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	4c 01       	movw	r8, r24
    1b70:	f7 01       	movw	r30, r14
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	f6 01       	movw	r30, r12
    1b76:	93 fd       	sbrc	r25, 3
    1b78:	85 91       	lpm	r24, Z+
    1b7a:	93 ff       	sbrs	r25, 3
    1b7c:	81 91       	ld	r24, Z+
    1b7e:	6f 01       	movw	r12, r30
    1b80:	88 23       	and	r24, r24
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <vfprintf+0x3a>
    1b84:	ab c1       	rjmp	.+854    	; 0x1edc <vfprintf+0x390>
    1b86:	85 32       	cpi	r24, 0x25	; 37
    1b88:	39 f4       	brne	.+14     	; 0x1b98 <vfprintf+0x4c>
    1b8a:	93 fd       	sbrc	r25, 3
    1b8c:	85 91       	lpm	r24, Z+
    1b8e:	93 ff       	sbrs	r25, 3
    1b90:	81 91       	ld	r24, Z+
    1b92:	6f 01       	movw	r12, r30
    1b94:	85 32       	cpi	r24, 0x25	; 37
    1b96:	29 f4       	brne	.+10     	; 0x1ba2 <vfprintf+0x56>
    1b98:	b7 01       	movw	r22, r14
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <fputc>
    1ba0:	e7 cf       	rjmp	.-50     	; 0x1b70 <vfprintf+0x24>
    1ba2:	51 2c       	mov	r5, r1
    1ba4:	31 2c       	mov	r3, r1
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	20 32       	cpi	r18, 0x20	; 32
    1baa:	a0 f4       	brcc	.+40     	; 0x1bd4 <vfprintf+0x88>
    1bac:	8b 32       	cpi	r24, 0x2B	; 43
    1bae:	69 f0       	breq	.+26     	; 0x1bca <vfprintf+0x7e>
    1bb0:	30 f4       	brcc	.+12     	; 0x1bbe <vfprintf+0x72>
    1bb2:	80 32       	cpi	r24, 0x20	; 32
    1bb4:	59 f0       	breq	.+22     	; 0x1bcc <vfprintf+0x80>
    1bb6:	83 32       	cpi	r24, 0x23	; 35
    1bb8:	69 f4       	brne	.+26     	; 0x1bd4 <vfprintf+0x88>
    1bba:	20 61       	ori	r18, 0x10	; 16
    1bbc:	2c c0       	rjmp	.+88     	; 0x1c16 <vfprintf+0xca>
    1bbe:	8d 32       	cpi	r24, 0x2D	; 45
    1bc0:	39 f0       	breq	.+14     	; 0x1bd0 <vfprintf+0x84>
    1bc2:	80 33       	cpi	r24, 0x30	; 48
    1bc4:	39 f4       	brne	.+14     	; 0x1bd4 <vfprintf+0x88>
    1bc6:	21 60       	ori	r18, 0x01	; 1
    1bc8:	26 c0       	rjmp	.+76     	; 0x1c16 <vfprintf+0xca>
    1bca:	22 60       	ori	r18, 0x02	; 2
    1bcc:	24 60       	ori	r18, 0x04	; 4
    1bce:	23 c0       	rjmp	.+70     	; 0x1c16 <vfprintf+0xca>
    1bd0:	28 60       	ori	r18, 0x08	; 8
    1bd2:	21 c0       	rjmp	.+66     	; 0x1c16 <vfprintf+0xca>
    1bd4:	27 fd       	sbrc	r18, 7
    1bd6:	27 c0       	rjmp	.+78     	; 0x1c26 <vfprintf+0xda>
    1bd8:	30 ed       	ldi	r19, 0xD0	; 208
    1bda:	38 0f       	add	r19, r24
    1bdc:	3a 30       	cpi	r19, 0x0A	; 10
    1bde:	78 f4       	brcc	.+30     	; 0x1bfe <vfprintf+0xb2>
    1be0:	26 ff       	sbrs	r18, 6
    1be2:	06 c0       	rjmp	.+12     	; 0x1bf0 <vfprintf+0xa4>
    1be4:	fa e0       	ldi	r31, 0x0A	; 10
    1be6:	5f 9e       	mul	r5, r31
    1be8:	30 0d       	add	r19, r0
    1bea:	11 24       	eor	r1, r1
    1bec:	53 2e       	mov	r5, r19
    1bee:	13 c0       	rjmp	.+38     	; 0x1c16 <vfprintf+0xca>
    1bf0:	8a e0       	ldi	r24, 0x0A	; 10
    1bf2:	38 9e       	mul	r3, r24
    1bf4:	30 0d       	add	r19, r0
    1bf6:	11 24       	eor	r1, r1
    1bf8:	33 2e       	mov	r3, r19
    1bfa:	20 62       	ori	r18, 0x20	; 32
    1bfc:	0c c0       	rjmp	.+24     	; 0x1c16 <vfprintf+0xca>
    1bfe:	8e 32       	cpi	r24, 0x2E	; 46
    1c00:	21 f4       	brne	.+8      	; 0x1c0a <vfprintf+0xbe>
    1c02:	26 fd       	sbrc	r18, 6
    1c04:	6b c1       	rjmp	.+726    	; 0x1edc <vfprintf+0x390>
    1c06:	20 64       	ori	r18, 0x40	; 64
    1c08:	06 c0       	rjmp	.+12     	; 0x1c16 <vfprintf+0xca>
    1c0a:	8c 36       	cpi	r24, 0x6C	; 108
    1c0c:	11 f4       	brne	.+4      	; 0x1c12 <vfprintf+0xc6>
    1c0e:	20 68       	ori	r18, 0x80	; 128
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <vfprintf+0xca>
    1c12:	88 36       	cpi	r24, 0x68	; 104
    1c14:	41 f4       	brne	.+16     	; 0x1c26 <vfprintf+0xda>
    1c16:	f6 01       	movw	r30, r12
    1c18:	93 fd       	sbrc	r25, 3
    1c1a:	85 91       	lpm	r24, Z+
    1c1c:	93 ff       	sbrs	r25, 3
    1c1e:	81 91       	ld	r24, Z+
    1c20:	6f 01       	movw	r12, r30
    1c22:	81 11       	cpse	r24, r1
    1c24:	c1 cf       	rjmp	.-126    	; 0x1ba8 <vfprintf+0x5c>
    1c26:	98 2f       	mov	r25, r24
    1c28:	9f 7d       	andi	r25, 0xDF	; 223
    1c2a:	95 54       	subi	r25, 0x45	; 69
    1c2c:	93 30       	cpi	r25, 0x03	; 3
    1c2e:	28 f4       	brcc	.+10     	; 0x1c3a <vfprintf+0xee>
    1c30:	0c 5f       	subi	r16, 0xFC	; 252
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
    1c34:	ff e3       	ldi	r31, 0x3F	; 63
    1c36:	f9 83       	std	Y+1, r31	; 0x01
    1c38:	0d c0       	rjmp	.+26     	; 0x1c54 <vfprintf+0x108>
    1c3a:	83 36       	cpi	r24, 0x63	; 99
    1c3c:	31 f0       	breq	.+12     	; 0x1c4a <vfprintf+0xfe>
    1c3e:	83 37       	cpi	r24, 0x73	; 115
    1c40:	71 f0       	breq	.+28     	; 0x1c5e <vfprintf+0x112>
    1c42:	83 35       	cpi	r24, 0x53	; 83
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <vfprintf+0xfc>
    1c46:	5b c0       	rjmp	.+182    	; 0x1cfe <vfprintf+0x1b2>
    1c48:	22 c0       	rjmp	.+68     	; 0x1c8e <vfprintf+0x142>
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	80 81       	ld	r24, Z
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	0e 5f       	subi	r16, 0xFE	; 254
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	44 24       	eor	r4, r4
    1c56:	43 94       	inc	r4
    1c58:	51 2c       	mov	r5, r1
    1c5a:	54 01       	movw	r10, r8
    1c5c:	15 c0       	rjmp	.+42     	; 0x1c88 <vfprintf+0x13c>
    1c5e:	38 01       	movw	r6, r16
    1c60:	f2 e0       	ldi	r31, 0x02	; 2
    1c62:	6f 0e       	add	r6, r31
    1c64:	71 1c       	adc	r7, r1
    1c66:	f8 01       	movw	r30, r16
    1c68:	a0 80       	ld	r10, Z
    1c6a:	b1 80       	ldd	r11, Z+1	; 0x01
    1c6c:	26 ff       	sbrs	r18, 6
    1c6e:	03 c0       	rjmp	.+6      	; 0x1c76 <vfprintf+0x12a>
    1c70:	65 2d       	mov	r22, r5
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <vfprintf+0x12e>
    1c76:	6f ef       	ldi	r22, 0xFF	; 255
    1c78:	7f ef       	ldi	r23, 0xFF	; 255
    1c7a:	c5 01       	movw	r24, r10
    1c7c:	2c 87       	std	Y+12, r18	; 0x0c
    1c7e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <strnlen>
    1c82:	2c 01       	movw	r4, r24
    1c84:	83 01       	movw	r16, r6
    1c86:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c88:	2f 77       	andi	r18, 0x7F	; 127
    1c8a:	22 2e       	mov	r2, r18
    1c8c:	17 c0       	rjmp	.+46     	; 0x1cbc <vfprintf+0x170>
    1c8e:	38 01       	movw	r6, r16
    1c90:	f2 e0       	ldi	r31, 0x02	; 2
    1c92:	6f 0e       	add	r6, r31
    1c94:	71 1c       	adc	r7, r1
    1c96:	f8 01       	movw	r30, r16
    1c98:	a0 80       	ld	r10, Z
    1c9a:	b1 80       	ldd	r11, Z+1	; 0x01
    1c9c:	26 ff       	sbrs	r18, 6
    1c9e:	03 c0       	rjmp	.+6      	; 0x1ca6 <vfprintf+0x15a>
    1ca0:	65 2d       	mov	r22, r5
    1ca2:	70 e0       	ldi	r23, 0x00	; 0
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <vfprintf+0x15e>
    1ca6:	6f ef       	ldi	r22, 0xFF	; 255
    1ca8:	7f ef       	ldi	r23, 0xFF	; 255
    1caa:	c5 01       	movw	r24, r10
    1cac:	2c 87       	std	Y+12, r18	; 0x0c
    1cae:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <strnlen_P>
    1cb2:	2c 01       	movw	r4, r24
    1cb4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cb6:	20 68       	ori	r18, 0x80	; 128
    1cb8:	22 2e       	mov	r2, r18
    1cba:	83 01       	movw	r16, r6
    1cbc:	23 fc       	sbrc	r2, 3
    1cbe:	1b c0       	rjmp	.+54     	; 0x1cf6 <vfprintf+0x1aa>
    1cc0:	83 2d       	mov	r24, r3
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	48 16       	cp	r4, r24
    1cc6:	59 06       	cpc	r5, r25
    1cc8:	b0 f4       	brcc	.+44     	; 0x1cf6 <vfprintf+0x1aa>
    1cca:	b7 01       	movw	r22, r14
    1ccc:	80 e2       	ldi	r24, 0x20	; 32
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <fputc>
    1cd4:	3a 94       	dec	r3
    1cd6:	f4 cf       	rjmp	.-24     	; 0x1cc0 <vfprintf+0x174>
    1cd8:	f5 01       	movw	r30, r10
    1cda:	27 fc       	sbrc	r2, 7
    1cdc:	85 91       	lpm	r24, Z+
    1cde:	27 fe       	sbrs	r2, 7
    1ce0:	81 91       	ld	r24, Z+
    1ce2:	5f 01       	movw	r10, r30
    1ce4:	b7 01       	movw	r22, r14
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <fputc>
    1cec:	31 10       	cpse	r3, r1
    1cee:	3a 94       	dec	r3
    1cf0:	f1 e0       	ldi	r31, 0x01	; 1
    1cf2:	4f 1a       	sub	r4, r31
    1cf4:	51 08       	sbc	r5, r1
    1cf6:	41 14       	cp	r4, r1
    1cf8:	51 04       	cpc	r5, r1
    1cfa:	71 f7       	brne	.-36     	; 0x1cd8 <vfprintf+0x18c>
    1cfc:	e5 c0       	rjmp	.+458    	; 0x1ec8 <vfprintf+0x37c>
    1cfe:	84 36       	cpi	r24, 0x64	; 100
    1d00:	11 f0       	breq	.+4      	; 0x1d06 <vfprintf+0x1ba>
    1d02:	89 36       	cpi	r24, 0x69	; 105
    1d04:	39 f5       	brne	.+78     	; 0x1d54 <vfprintf+0x208>
    1d06:	f8 01       	movw	r30, r16
    1d08:	27 ff       	sbrs	r18, 7
    1d0a:	07 c0       	rjmp	.+14     	; 0x1d1a <vfprintf+0x1ce>
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	0c 5f       	subi	r16, 0xFC	; 252
    1d16:	1f 4f       	sbci	r17, 0xFF	; 255
    1d18:	08 c0       	rjmp	.+16     	; 0x1d2a <vfprintf+0x1de>
    1d1a:	60 81       	ld	r22, Z
    1d1c:	71 81       	ldd	r23, Z+1	; 0x01
    1d1e:	88 27       	eor	r24, r24
    1d20:	77 fd       	sbrc	r23, 7
    1d22:	80 95       	com	r24
    1d24:	98 2f       	mov	r25, r24
    1d26:	0e 5f       	subi	r16, 0xFE	; 254
    1d28:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2a:	2f 76       	andi	r18, 0x6F	; 111
    1d2c:	b2 2e       	mov	r11, r18
    1d2e:	97 ff       	sbrs	r25, 7
    1d30:	09 c0       	rjmp	.+18     	; 0x1d44 <vfprintf+0x1f8>
    1d32:	90 95       	com	r25
    1d34:	80 95       	com	r24
    1d36:	70 95       	com	r23
    1d38:	61 95       	neg	r22
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d40:	20 68       	ori	r18, 0x80	; 128
    1d42:	b2 2e       	mov	r11, r18
    1d44:	2a e0       	ldi	r18, 0x0A	; 10
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	a4 01       	movw	r20, r8
    1d4a:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__ultoa_invert>
    1d4e:	a8 2e       	mov	r10, r24
    1d50:	a8 18       	sub	r10, r8
    1d52:	44 c0       	rjmp	.+136    	; 0x1ddc <vfprintf+0x290>
    1d54:	85 37       	cpi	r24, 0x75	; 117
    1d56:	29 f4       	brne	.+10     	; 0x1d62 <vfprintf+0x216>
    1d58:	2f 7e       	andi	r18, 0xEF	; 239
    1d5a:	b2 2e       	mov	r11, r18
    1d5c:	2a e0       	ldi	r18, 0x0A	; 10
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	25 c0       	rjmp	.+74     	; 0x1dac <vfprintf+0x260>
    1d62:	f2 2f       	mov	r31, r18
    1d64:	f9 7f       	andi	r31, 0xF9	; 249
    1d66:	bf 2e       	mov	r11, r31
    1d68:	8f 36       	cpi	r24, 0x6F	; 111
    1d6a:	c1 f0       	breq	.+48     	; 0x1d9c <vfprintf+0x250>
    1d6c:	18 f4       	brcc	.+6      	; 0x1d74 <vfprintf+0x228>
    1d6e:	88 35       	cpi	r24, 0x58	; 88
    1d70:	79 f0       	breq	.+30     	; 0x1d90 <vfprintf+0x244>
    1d72:	b4 c0       	rjmp	.+360    	; 0x1edc <vfprintf+0x390>
    1d74:	80 37       	cpi	r24, 0x70	; 112
    1d76:	19 f0       	breq	.+6      	; 0x1d7e <vfprintf+0x232>
    1d78:	88 37       	cpi	r24, 0x78	; 120
    1d7a:	21 f0       	breq	.+8      	; 0x1d84 <vfprintf+0x238>
    1d7c:	af c0       	rjmp	.+350    	; 0x1edc <vfprintf+0x390>
    1d7e:	2f 2f       	mov	r18, r31
    1d80:	20 61       	ori	r18, 0x10	; 16
    1d82:	b2 2e       	mov	r11, r18
    1d84:	b4 fe       	sbrs	r11, 4
    1d86:	0d c0       	rjmp	.+26     	; 0x1da2 <vfprintf+0x256>
    1d88:	8b 2d       	mov	r24, r11
    1d8a:	84 60       	ori	r24, 0x04	; 4
    1d8c:	b8 2e       	mov	r11, r24
    1d8e:	09 c0       	rjmp	.+18     	; 0x1da2 <vfprintf+0x256>
    1d90:	24 ff       	sbrs	r18, 4
    1d92:	0a c0       	rjmp	.+20     	; 0x1da8 <vfprintf+0x25c>
    1d94:	9f 2f       	mov	r25, r31
    1d96:	96 60       	ori	r25, 0x06	; 6
    1d98:	b9 2e       	mov	r11, r25
    1d9a:	06 c0       	rjmp	.+12     	; 0x1da8 <vfprintf+0x25c>
    1d9c:	28 e0       	ldi	r18, 0x08	; 8
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	05 c0       	rjmp	.+10     	; 0x1dac <vfprintf+0x260>
    1da2:	20 e1       	ldi	r18, 0x10	; 16
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <vfprintf+0x260>
    1da8:	20 e1       	ldi	r18, 0x10	; 16
    1daa:	32 e0       	ldi	r19, 0x02	; 2
    1dac:	f8 01       	movw	r30, r16
    1dae:	b7 fe       	sbrs	r11, 7
    1db0:	07 c0       	rjmp	.+14     	; 0x1dc0 <vfprintf+0x274>
    1db2:	60 81       	ld	r22, Z
    1db4:	71 81       	ldd	r23, Z+1	; 0x01
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	0c 5f       	subi	r16, 0xFC	; 252
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	06 c0       	rjmp	.+12     	; 0x1dcc <vfprintf+0x280>
    1dc0:	60 81       	ld	r22, Z
    1dc2:	71 81       	ldd	r23, Z+1	; 0x01
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0e 5f       	subi	r16, 0xFE	; 254
    1dca:	1f 4f       	sbci	r17, 0xFF	; 255
    1dcc:	a4 01       	movw	r20, r8
    1dce:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__ultoa_invert>
    1dd2:	a8 2e       	mov	r10, r24
    1dd4:	a8 18       	sub	r10, r8
    1dd6:	fb 2d       	mov	r31, r11
    1dd8:	ff 77       	andi	r31, 0x7F	; 127
    1dda:	bf 2e       	mov	r11, r31
    1ddc:	b6 fe       	sbrs	r11, 6
    1dde:	0b c0       	rjmp	.+22     	; 0x1df6 <vfprintf+0x2aa>
    1de0:	2b 2d       	mov	r18, r11
    1de2:	2e 7f       	andi	r18, 0xFE	; 254
    1de4:	a5 14       	cp	r10, r5
    1de6:	50 f4       	brcc	.+20     	; 0x1dfc <vfprintf+0x2b0>
    1de8:	b4 fe       	sbrs	r11, 4
    1dea:	0a c0       	rjmp	.+20     	; 0x1e00 <vfprintf+0x2b4>
    1dec:	b2 fc       	sbrc	r11, 2
    1dee:	08 c0       	rjmp	.+16     	; 0x1e00 <vfprintf+0x2b4>
    1df0:	2b 2d       	mov	r18, r11
    1df2:	2e 7e       	andi	r18, 0xEE	; 238
    1df4:	05 c0       	rjmp	.+10     	; 0x1e00 <vfprintf+0x2b4>
    1df6:	7a 2c       	mov	r7, r10
    1df8:	2b 2d       	mov	r18, r11
    1dfa:	03 c0       	rjmp	.+6      	; 0x1e02 <vfprintf+0x2b6>
    1dfc:	7a 2c       	mov	r7, r10
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <vfprintf+0x2b6>
    1e00:	75 2c       	mov	r7, r5
    1e02:	24 ff       	sbrs	r18, 4
    1e04:	0d c0       	rjmp	.+26     	; 0x1e20 <vfprintf+0x2d4>
    1e06:	fe 01       	movw	r30, r28
    1e08:	ea 0d       	add	r30, r10
    1e0a:	f1 1d       	adc	r31, r1
    1e0c:	80 81       	ld	r24, Z
    1e0e:	80 33       	cpi	r24, 0x30	; 48
    1e10:	11 f4       	brne	.+4      	; 0x1e16 <vfprintf+0x2ca>
    1e12:	29 7e       	andi	r18, 0xE9	; 233
    1e14:	09 c0       	rjmp	.+18     	; 0x1e28 <vfprintf+0x2dc>
    1e16:	22 ff       	sbrs	r18, 2
    1e18:	06 c0       	rjmp	.+12     	; 0x1e26 <vfprintf+0x2da>
    1e1a:	73 94       	inc	r7
    1e1c:	73 94       	inc	r7
    1e1e:	04 c0       	rjmp	.+8      	; 0x1e28 <vfprintf+0x2dc>
    1e20:	82 2f       	mov	r24, r18
    1e22:	86 78       	andi	r24, 0x86	; 134
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <vfprintf+0x2dc>
    1e26:	73 94       	inc	r7
    1e28:	23 fd       	sbrc	r18, 3
    1e2a:	13 c0       	rjmp	.+38     	; 0x1e52 <vfprintf+0x306>
    1e2c:	20 ff       	sbrs	r18, 0
    1e2e:	06 c0       	rjmp	.+12     	; 0x1e3c <vfprintf+0x2f0>
    1e30:	5a 2c       	mov	r5, r10
    1e32:	73 14       	cp	r7, r3
    1e34:	18 f4       	brcc	.+6      	; 0x1e3c <vfprintf+0x2f0>
    1e36:	53 0c       	add	r5, r3
    1e38:	57 18       	sub	r5, r7
    1e3a:	73 2c       	mov	r7, r3
    1e3c:	73 14       	cp	r7, r3
    1e3e:	68 f4       	brcc	.+26     	; 0x1e5a <vfprintf+0x30e>
    1e40:	b7 01       	movw	r22, r14
    1e42:	80 e2       	ldi	r24, 0x20	; 32
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	2c 87       	std	Y+12, r18	; 0x0c
    1e48:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <fputc>
    1e4c:	73 94       	inc	r7
    1e4e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e50:	f5 cf       	rjmp	.-22     	; 0x1e3c <vfprintf+0x2f0>
    1e52:	73 14       	cp	r7, r3
    1e54:	10 f4       	brcc	.+4      	; 0x1e5a <vfprintf+0x30e>
    1e56:	37 18       	sub	r3, r7
    1e58:	01 c0       	rjmp	.+2      	; 0x1e5c <vfprintf+0x310>
    1e5a:	31 2c       	mov	r3, r1
    1e5c:	24 ff       	sbrs	r18, 4
    1e5e:	12 c0       	rjmp	.+36     	; 0x1e84 <vfprintf+0x338>
    1e60:	b7 01       	movw	r22, r14
    1e62:	80 e3       	ldi	r24, 0x30	; 48
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	2c 87       	std	Y+12, r18	; 0x0c
    1e68:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <fputc>
    1e6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e6e:	22 ff       	sbrs	r18, 2
    1e70:	17 c0       	rjmp	.+46     	; 0x1ea0 <vfprintf+0x354>
    1e72:	21 ff       	sbrs	r18, 1
    1e74:	03 c0       	rjmp	.+6      	; 0x1e7c <vfprintf+0x330>
    1e76:	88 e5       	ldi	r24, 0x58	; 88
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <vfprintf+0x334>
    1e7c:	88 e7       	ldi	r24, 0x78	; 120
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	b7 01       	movw	r22, r14
    1e82:	0c c0       	rjmp	.+24     	; 0x1e9c <vfprintf+0x350>
    1e84:	82 2f       	mov	r24, r18
    1e86:	86 78       	andi	r24, 0x86	; 134
    1e88:	59 f0       	breq	.+22     	; 0x1ea0 <vfprintf+0x354>
    1e8a:	21 fd       	sbrc	r18, 1
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <vfprintf+0x346>
    1e8e:	80 e2       	ldi	r24, 0x20	; 32
    1e90:	01 c0       	rjmp	.+2      	; 0x1e94 <vfprintf+0x348>
    1e92:	8b e2       	ldi	r24, 0x2B	; 43
    1e94:	27 fd       	sbrc	r18, 7
    1e96:	8d e2       	ldi	r24, 0x2D	; 45
    1e98:	b7 01       	movw	r22, r14
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <fputc>
    1ea0:	a5 14       	cp	r10, r5
    1ea2:	38 f4       	brcc	.+14     	; 0x1eb2 <vfprintf+0x366>
    1ea4:	b7 01       	movw	r22, r14
    1ea6:	80 e3       	ldi	r24, 0x30	; 48
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <fputc>
    1eae:	5a 94       	dec	r5
    1eb0:	f7 cf       	rjmp	.-18     	; 0x1ea0 <vfprintf+0x354>
    1eb2:	aa 94       	dec	r10
    1eb4:	f4 01       	movw	r30, r8
    1eb6:	ea 0d       	add	r30, r10
    1eb8:	f1 1d       	adc	r31, r1
    1eba:	80 81       	ld	r24, Z
    1ebc:	b7 01       	movw	r22, r14
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <fputc>
    1ec4:	a1 10       	cpse	r10, r1
    1ec6:	f5 cf       	rjmp	.-22     	; 0x1eb2 <vfprintf+0x366>
    1ec8:	33 20       	and	r3, r3
    1eca:	09 f4       	brne	.+2      	; 0x1ece <vfprintf+0x382>
    1ecc:	51 ce       	rjmp	.-862    	; 0x1b70 <vfprintf+0x24>
    1ece:	b7 01       	movw	r22, r14
    1ed0:	80 e2       	ldi	r24, 0x20	; 32
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <fputc>
    1ed8:	3a 94       	dec	r3
    1eda:	f6 cf       	rjmp	.-20     	; 0x1ec8 <vfprintf+0x37c>
    1edc:	f7 01       	movw	r30, r14
    1ede:	86 81       	ldd	r24, Z+6	; 0x06
    1ee0:	97 81       	ldd	r25, Z+7	; 0x07
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <vfprintf+0x39c>
    1ee4:	8f ef       	ldi	r24, 0xFF	; 255
    1ee6:	9f ef       	ldi	r25, 0xFF	; 255
    1ee8:	2c 96       	adiw	r28, 0x0c	; 12
    1eea:	e2 e1       	ldi	r30, 0x12	; 18
    1eec:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__epilogue_restores__>

00001ef0 <calloc>:
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	86 9f       	mul	r24, r22
    1efa:	80 01       	movw	r16, r0
    1efc:	87 9f       	mul	r24, r23
    1efe:	10 0d       	add	r17, r0
    1f00:	96 9f       	mul	r25, r22
    1f02:	10 0d       	add	r17, r0
    1f04:	11 24       	eor	r1, r1
    1f06:	c8 01       	movw	r24, r16
    1f08:	0e 94 b8 0b 	call	0x1770	; 0x1770 <malloc>
    1f0c:	ec 01       	movw	r28, r24
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	29 f0       	breq	.+10     	; 0x1f1c <calloc+0x2c>
    1f12:	a8 01       	movw	r20, r16
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	70 e0       	ldi	r23, 0x00	; 0
    1f18:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <memset>
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	08 95       	ret

00001f28 <strnlen_P>:
    1f28:	fc 01       	movw	r30, r24
    1f2a:	05 90       	lpm	r0, Z+
    1f2c:	61 50       	subi	r22, 0x01	; 1
    1f2e:	70 40       	sbci	r23, 0x00	; 0
    1f30:	01 10       	cpse	r0, r1
    1f32:	d8 f7       	brcc	.-10     	; 0x1f2a <strnlen_P+0x2>
    1f34:	80 95       	com	r24
    1f36:	90 95       	com	r25
    1f38:	8e 0f       	add	r24, r30
    1f3a:	9f 1f       	adc	r25, r31
    1f3c:	08 95       	ret

00001f3e <memset>:
    1f3e:	dc 01       	movw	r26, r24
    1f40:	01 c0       	rjmp	.+2      	; 0x1f44 <memset+0x6>
    1f42:	6d 93       	st	X+, r22
    1f44:	41 50       	subi	r20, 0x01	; 1
    1f46:	50 40       	sbci	r21, 0x00	; 0
    1f48:	e0 f7       	brcc	.-8      	; 0x1f42 <memset+0x4>
    1f4a:	08 95       	ret

00001f4c <strnlen>:
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	61 50       	subi	r22, 0x01	; 1
    1f50:	70 40       	sbci	r23, 0x00	; 0
    1f52:	01 90       	ld	r0, Z+
    1f54:	01 10       	cpse	r0, r1
    1f56:	d8 f7       	brcc	.-10     	; 0x1f4e <strnlen+0x2>
    1f58:	80 95       	com	r24
    1f5a:	90 95       	com	r25
    1f5c:	8e 0f       	add	r24, r30
    1f5e:	9f 1f       	adc	r25, r31
    1f60:	08 95       	ret

00001f62 <fputc>:
    1f62:	0f 93       	push	r16
    1f64:	1f 93       	push	r17
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	18 2f       	mov	r17, r24
    1f6c:	09 2f       	mov	r16, r25
    1f6e:	eb 01       	movw	r28, r22
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	81 fd       	sbrc	r24, 1
    1f74:	03 c0       	rjmp	.+6      	; 0x1f7c <fputc+0x1a>
    1f76:	8f ef       	ldi	r24, 0xFF	; 255
    1f78:	9f ef       	ldi	r25, 0xFF	; 255
    1f7a:	20 c0       	rjmp	.+64     	; 0x1fbc <fputc+0x5a>
    1f7c:	82 ff       	sbrs	r24, 2
    1f7e:	10 c0       	rjmp	.+32     	; 0x1fa0 <fputc+0x3e>
    1f80:	4e 81       	ldd	r20, Y+6	; 0x06
    1f82:	5f 81       	ldd	r21, Y+7	; 0x07
    1f84:	2c 81       	ldd	r18, Y+4	; 0x04
    1f86:	3d 81       	ldd	r19, Y+5	; 0x05
    1f88:	42 17       	cp	r20, r18
    1f8a:	53 07       	cpc	r21, r19
    1f8c:	7c f4       	brge	.+30     	; 0x1fac <fputc+0x4a>
    1f8e:	e8 81       	ld	r30, Y
    1f90:	f9 81       	ldd	r31, Y+1	; 0x01
    1f92:	9f 01       	movw	r18, r30
    1f94:	2f 5f       	subi	r18, 0xFF	; 255
    1f96:	3f 4f       	sbci	r19, 0xFF	; 255
    1f98:	39 83       	std	Y+1, r19	; 0x01
    1f9a:	28 83       	st	Y, r18
    1f9c:	10 83       	st	Z, r17
    1f9e:	06 c0       	rjmp	.+12     	; 0x1fac <fputc+0x4a>
    1fa0:	e8 85       	ldd	r30, Y+8	; 0x08
    1fa2:	f9 85       	ldd	r31, Y+9	; 0x09
    1fa4:	81 2f       	mov	r24, r17
    1fa6:	09 95       	icall
    1fa8:	89 2b       	or	r24, r25
    1faa:	29 f7       	brne	.-54     	; 0x1f76 <fputc+0x14>
    1fac:	2e 81       	ldd	r18, Y+6	; 0x06
    1fae:	3f 81       	ldd	r19, Y+7	; 0x07
    1fb0:	2f 5f       	subi	r18, 0xFF	; 255
    1fb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb4:	3f 83       	std	Y+7, r19	; 0x07
    1fb6:	2e 83       	std	Y+6, r18	; 0x06
    1fb8:	81 2f       	mov	r24, r17
    1fba:	90 2f       	mov	r25, r16
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	1f 91       	pop	r17
    1fc2:	0f 91       	pop	r16
    1fc4:	08 95       	ret

00001fc6 <__ultoa_invert>:
    1fc6:	fa 01       	movw	r30, r20
    1fc8:	aa 27       	eor	r26, r26
    1fca:	28 30       	cpi	r18, 0x08	; 8
    1fcc:	51 f1       	breq	.+84     	; 0x2022 <__ultoa_invert+0x5c>
    1fce:	20 31       	cpi	r18, 0x10	; 16
    1fd0:	81 f1       	breq	.+96     	; 0x2032 <__ultoa_invert+0x6c>
    1fd2:	e8 94       	clt
    1fd4:	6f 93       	push	r22
    1fd6:	6e 7f       	andi	r22, 0xFE	; 254
    1fd8:	6e 5f       	subi	r22, 0xFE	; 254
    1fda:	7f 4f       	sbci	r23, 0xFF	; 255
    1fdc:	8f 4f       	sbci	r24, 0xFF	; 255
    1fde:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe0:	af 4f       	sbci	r26, 0xFF	; 255
    1fe2:	b1 e0       	ldi	r27, 0x01	; 1
    1fe4:	3e d0       	rcall	.+124    	; 0x2062 <__ultoa_invert+0x9c>
    1fe6:	b4 e0       	ldi	r27, 0x04	; 4
    1fe8:	3c d0       	rcall	.+120    	; 0x2062 <__ultoa_invert+0x9c>
    1fea:	67 0f       	add	r22, r23
    1fec:	78 1f       	adc	r23, r24
    1fee:	89 1f       	adc	r24, r25
    1ff0:	9a 1f       	adc	r25, r26
    1ff2:	a1 1d       	adc	r26, r1
    1ff4:	68 0f       	add	r22, r24
    1ff6:	79 1f       	adc	r23, r25
    1ff8:	8a 1f       	adc	r24, r26
    1ffa:	91 1d       	adc	r25, r1
    1ffc:	a1 1d       	adc	r26, r1
    1ffe:	6a 0f       	add	r22, r26
    2000:	71 1d       	adc	r23, r1
    2002:	81 1d       	adc	r24, r1
    2004:	91 1d       	adc	r25, r1
    2006:	a1 1d       	adc	r26, r1
    2008:	20 d0       	rcall	.+64     	; 0x204a <__ultoa_invert+0x84>
    200a:	09 f4       	brne	.+2      	; 0x200e <__ultoa_invert+0x48>
    200c:	68 94       	set
    200e:	3f 91       	pop	r19
    2010:	2a e0       	ldi	r18, 0x0A	; 10
    2012:	26 9f       	mul	r18, r22
    2014:	11 24       	eor	r1, r1
    2016:	30 19       	sub	r19, r0
    2018:	30 5d       	subi	r19, 0xD0	; 208
    201a:	31 93       	st	Z+, r19
    201c:	de f6       	brtc	.-74     	; 0x1fd4 <__ultoa_invert+0xe>
    201e:	cf 01       	movw	r24, r30
    2020:	08 95       	ret
    2022:	46 2f       	mov	r20, r22
    2024:	47 70       	andi	r20, 0x07	; 7
    2026:	40 5d       	subi	r20, 0xD0	; 208
    2028:	41 93       	st	Z+, r20
    202a:	b3 e0       	ldi	r27, 0x03	; 3
    202c:	0f d0       	rcall	.+30     	; 0x204c <__ultoa_invert+0x86>
    202e:	c9 f7       	brne	.-14     	; 0x2022 <__ultoa_invert+0x5c>
    2030:	f6 cf       	rjmp	.-20     	; 0x201e <__ultoa_invert+0x58>
    2032:	46 2f       	mov	r20, r22
    2034:	4f 70       	andi	r20, 0x0F	; 15
    2036:	40 5d       	subi	r20, 0xD0	; 208
    2038:	4a 33       	cpi	r20, 0x3A	; 58
    203a:	18 f0       	brcs	.+6      	; 0x2042 <__ultoa_invert+0x7c>
    203c:	49 5d       	subi	r20, 0xD9	; 217
    203e:	31 fd       	sbrc	r19, 1
    2040:	40 52       	subi	r20, 0x20	; 32
    2042:	41 93       	st	Z+, r20
    2044:	02 d0       	rcall	.+4      	; 0x204a <__ultoa_invert+0x84>
    2046:	a9 f7       	brne	.-22     	; 0x2032 <__ultoa_invert+0x6c>
    2048:	ea cf       	rjmp	.-44     	; 0x201e <__ultoa_invert+0x58>
    204a:	b4 e0       	ldi	r27, 0x04	; 4
    204c:	a6 95       	lsr	r26
    204e:	97 95       	ror	r25
    2050:	87 95       	ror	r24
    2052:	77 95       	ror	r23
    2054:	67 95       	ror	r22
    2056:	ba 95       	dec	r27
    2058:	c9 f7       	brne	.-14     	; 0x204c <__ultoa_invert+0x86>
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	61 05       	cpc	r22, r1
    205e:	71 05       	cpc	r23, r1
    2060:	08 95       	ret
    2062:	9b 01       	movw	r18, r22
    2064:	ac 01       	movw	r20, r24
    2066:	0a 2e       	mov	r0, r26
    2068:	06 94       	lsr	r0
    206a:	57 95       	ror	r21
    206c:	47 95       	ror	r20
    206e:	37 95       	ror	r19
    2070:	27 95       	ror	r18
    2072:	ba 95       	dec	r27
    2074:	c9 f7       	brne	.-14     	; 0x2068 <__ultoa_invert+0xa2>
    2076:	62 0f       	add	r22, r18
    2078:	73 1f       	adc	r23, r19
    207a:	84 1f       	adc	r24, r20
    207c:	95 1f       	adc	r25, r21
    207e:	a0 1d       	adc	r26, r0
    2080:	08 95       	ret

00002082 <__prologue_saves__>:
    2082:	2f 92       	push	r2
    2084:	3f 92       	push	r3
    2086:	4f 92       	push	r4
    2088:	5f 92       	push	r5
    208a:	6f 92       	push	r6
    208c:	7f 92       	push	r7
    208e:	8f 92       	push	r8
    2090:	9f 92       	push	r9
    2092:	af 92       	push	r10
    2094:	bf 92       	push	r11
    2096:	cf 92       	push	r12
    2098:	df 92       	push	r13
    209a:	ef 92       	push	r14
    209c:	ff 92       	push	r15
    209e:	0f 93       	push	r16
    20a0:	1f 93       	push	r17
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    20aa:	ca 1b       	sub	r28, r26
    20ac:	db 0b       	sbc	r29, r27
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	09 94       	ijmp

000020ba <__epilogue_restores__>:
    20ba:	2a 88       	ldd	r2, Y+18	; 0x12
    20bc:	39 88       	ldd	r3, Y+17	; 0x11
    20be:	48 88       	ldd	r4, Y+16	; 0x10
    20c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    20c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    20c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    20c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    20c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    20ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    20cc:	b9 84       	ldd	r11, Y+9	; 0x09
    20ce:	c8 84       	ldd	r12, Y+8	; 0x08
    20d0:	df 80       	ldd	r13, Y+7	; 0x07
    20d2:	ee 80       	ldd	r14, Y+6	; 0x06
    20d4:	fd 80       	ldd	r15, Y+5	; 0x05
    20d6:	0c 81       	ldd	r16, Y+4	; 0x04
    20d8:	1b 81       	ldd	r17, Y+3	; 0x03
    20da:	aa 81       	ldd	r26, Y+2	; 0x02
    20dc:	b9 81       	ldd	r27, Y+1	; 0x01
    20de:	ce 0f       	add	r28, r30
    20e0:	d1 1d       	adc	r29, r1
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	ed 01       	movw	r28, r26
    20ee:	08 95       	ret

000020f0 <_exit>:
    20f0:	f8 94       	cli

000020f2 <__stop_program>:
    20f2:	ff cf       	rjmp	.-2      	; 0x20f2 <__stop_program>
