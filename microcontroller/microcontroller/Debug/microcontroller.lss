
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e8  00800100  0000180e  000018a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000180e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008002e8  008002e8  00001a8a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a8a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f0  00000000  00000000  00001ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000325f  00000000  00000000  00001dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013e2  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000106b  00000000  00000000  00006417  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000794  00000000  00000000  00007484  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000091a  00000000  00000000  00007c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001865  00000000  00000000  00008532  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000268  00000000  00000000  00009d97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 02 02 	jmp	0x404	; 0x404 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <add_entry+0x42>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ee e0       	ldi	r30, 0x0E	; 14
     37c:	f8 e1       	ldi	r31, 0x18	; 24
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 3e       	cpi	r26, 0xE8	; 232
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a8 ee       	ldi	r26, 0xE8	; 232
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a2 30       	cpi	r26, 0x02	; 2
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 42 06 	call	0xc84	; 0xc84 <main>
     39e:	0c 94 05 0c 	jmp	0x180a	; 0x180a <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
     3a6:	30 98       	cbi	0x06, 0	; 6
     3a8:	08 95       	ret

000003aa <ADC_read>:
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3aa:	84 30       	cpi	r24, 0x04	; 4
     3ac:	40 f4       	brcc	.+16     	; 0x3be <ADC_read+0x14>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
     3ae:	8c 5f       	subi	r24, 0xFC	; 252
     3b0:	80 93 00 14 	sts	0x1400, r24
	
	//wait 'til /INTR is low
	while(test_bit(PINE, PINE0));
     3b4:	28 99       	sbic	0x05, 0	; 5
     3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <ADC_read+0xa>
	//reset interrupt
	inter = 0;
	*/

	//return current value
	return *adc; 
     3b8:	80 91 00 14 	lds	r24, 0x1400
     3bc:	08 95       	ret
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3be:	80 e0       	ldi	r24, 0x00	; 0
	inter = 0;
	*/

	//return current value
	return *adc; 
     3c0:	08 95       	ret

000003c2 <CAN_int_vect>:
ISR(INT0_vect){
	CAN_int_vect();
}


void CAN_int_vect() {
     3c2:	cf 93       	push	r28
	uint8_t int_flags = MCP2515_read(MCP_CANINTF);
     3c4:	8c e2       	ldi	r24, 0x2C	; 44
     3c6:	0e 94 46 04 	call	0x88c	; 0x88c <MCP2515_read>
     3ca:	c8 2f       	mov	r28, r24
	if(int_flags & MCP_RX0IF){
     3cc:	80 ff       	sbrs	r24, 0
     3ce:	0b c0       	rjmp	.+22     	; 0x3e6 <CAN_int_vect+0x24>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	8c e2       	ldi	r24, 0x2C	; 44
     3d6:	0e 94 78 04 	call	0x8f0	; 0x8f0 <MCP2515_bit_modify>
		flag_RX0 = 1;
     3da:	21 e0       	ldi	r18, 0x01	; 1
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	30 93 eb 02 	sts	0x02EB, r19
     3e2:	20 93 ea 02 	sts	0x02EA, r18
	}
			
	if(int_flags & MCP_RX1IF){
     3e6:	c1 ff       	sbrs	r28, 1
     3e8:	0b c0       	rjmp	.+22     	; 0x400 <CAN_int_vect+0x3e>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	8c e2       	ldi	r24, 0x2C	; 44
     3f0:	0e 94 78 04 	call	0x8f0	; 0x8f0 <MCP2515_bit_modify>
		flag_RX1 = 1;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	90 93 e9 02 	sts	0x02E9, r25
     3fc:	80 93 e8 02 	sts	0x02E8, r24
	}
			
	
	
}
     400:	cf 91       	pop	r28
     402:	08 95       	ret

00000404 <__vector_1>:

volatile int flag_RX0 = 0;
volatile int flag_RX1 = 0;

//interrupt service routine
ISR(INT0_vect){
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	2f 93       	push	r18
     410:	3f 93       	push	r19
     412:	4f 93       	push	r20
     414:	5f 93       	push	r21
     416:	6f 93       	push	r22
     418:	7f 93       	push	r23
     41a:	8f 93       	push	r24
     41c:	9f 93       	push	r25
     41e:	af 93       	push	r26
     420:	bf 93       	push	r27
     422:	ef 93       	push	r30
     424:	ff 93       	push	r31
	CAN_int_vect();
     426:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <CAN_int_vect>
}
     42a:	ff 91       	pop	r31
     42c:	ef 91       	pop	r30
     42e:	bf 91       	pop	r27
     430:	af 91       	pop	r26
     432:	9f 91       	pop	r25
     434:	8f 91       	pop	r24
     436:	7f 91       	pop	r23
     438:	6f 91       	pop	r22
     43a:	5f 91       	pop	r21
     43c:	4f 91       	pop	r20
     43e:	3f 91       	pop	r19
     440:	2f 91       	pop	r18
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <CAN_init>:
//hex to binary is left as an exercise to the reader :)
void CAN_init() {
	
	//enable external interrupt on ATmega162
	//enable interrupt on MCP2515
	MCP2515_init();
     44c:	0e 94 9a 04 	call	0x934	; 0x934 <MCP2515_init>
	
	//enable rollover: message will rollover to RX1 if RX0 is full
	//also sets filter for RXB0 to only accept all transmission
	MCP2515_bit_modify(MCP_RXB0CTRL, 0x64, 0xFF);  //0b 0010 0100
     450:	4f ef       	ldi	r20, 0xFF	; 255
     452:	64 e6       	ldi	r22, 0x64	; 100
     454:	80 e6       	ldi	r24, 0x60	; 96
     456:	0e 94 78 04 	call	0x8f0	; 0x8f0 <MCP2515_bit_modify>

	
	//set filter for RXB1 to accept all transmission
	MCP2515_bit_modify(MCP_RXB1CTRL, 0x60, 0xFF);
     45a:	4f ef       	ldi	r20, 0xFF	; 255
     45c:	60 e6       	ldi	r22, 0x60	; 96
     45e:	80 e7       	ldi	r24, 0x70	; 112
     460:	0e 94 78 04 	call	0x8f0	; 0x8f0 <MCP2515_bit_modify>
	

	//CANINTE contains the interrupt enable bits for each individual interrupt
	//CANINTF cointains the interrupt flags for each interrupt source. this should be cleared by a bit_modify
	
	MCP2515_bit_modify(MCP_CANINTE,0x03, 0x03);
     464:	43 e0       	ldi	r20, 0x03	; 3
     466:	63 e0       	ldi	r22, 0x03	; 3
     468:	8b e2       	ldi	r24, 0x2B	; 43
     46a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <MCP2515_bit_modify>
	//interrupts for RX1, RX0 enabled
	
	//set loopback mode: 0x40
	//later use normal mode 0x00
	MCP2515_bit_modify(MCP_CANCTRL,0xE0, 0x00);
     46e:	40 e0       	ldi	r20, 0x00	; 0
     470:	60 ee       	ldi	r22, 0xE0	; 224
     472:	8f e0       	ldi	r24, 0x0F	; 15
     474:	0e 94 78 04 	call	0x8f0	; 0x8f0 <MCP2515_bit_modify>
     478:	08 95       	ret

0000047a <CAN_message_send>:
	
	

}

void CAN_message_send(can_message* msg) {
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	ec 01       	movw	r28, r24
	//transmit is done using the TX registers, have to check which transmit_buffer_register we are writing from 
	uint8_t buffer_numb = 0; //Not sure how this logic is done yet


	//transmit the correct ID
	uint8_t id_high = msg->id / 8;
     484:	08 81       	ld	r16, Y
     486:	19 81       	ldd	r17, Y+1	; 0x01
     488:	b8 01       	movw	r22, r16
     48a:	76 95       	lsr	r23
     48c:	67 95       	ror	r22
     48e:	76 95       	lsr	r23
     490:	67 95       	ror	r22
     492:	76 95       	lsr	r23
     494:	67 95       	ror	r22
	uint8_t id_low = msg->id % 8;

	MCP2515_write(MCP_TXB0SIDH + BUFFER_LENGTH * buffer_numb, id_high);
     496:	81 e3       	ldi	r24, 0x31	; 49
     498:	0e 94 58 04 	call	0x8b0	; 0x8b0 <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL + BUFFER_LENGTH * buffer_numb, (id_low << 5));
     49c:	60 2f       	mov	r22, r16
     49e:	62 95       	swap	r22
     4a0:	66 0f       	add	r22, r22
     4a2:	60 7e       	andi	r22, 0xE0	; 224
     4a4:	82 e3       	ldi	r24, 0x32	; 50
     4a6:	0e 94 58 04 	call	0x8b0	; 0x8b0 <MCP2515_write>
	//resten av TXB0SIDL er 0 siden vi har standard identifier

	//transmit the data length
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);
     4aa:	6a 81       	ldd	r22, Y+2	; 0x02
     4ac:	85 e3       	ldi	r24, 0x35	; 53
     4ae:	0e 94 58 04 	call	0x8b0	; 0x8b0 <MCP2515_write>

	//transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	88 23       	and	r24, r24
     4b6:	69 f0       	breq	.+26     	; 0x4d2 <CAN_message_send+0x58>
     4b8:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
     4ba:	fe 01       	movw	r30, r28
     4bc:	e1 0f       	add	r30, r17
     4be:	f1 1d       	adc	r31, r1
     4c0:	63 81       	ldd	r22, Z+3	; 0x03
     4c2:	86 e3       	ldi	r24, 0x36	; 54
     4c4:	81 0f       	add	r24, r17
     4c6:	0e 94 58 04 	call	0x8b0	; 0x8b0 <MCP2515_write>

	//transmit the data length
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);

	//transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     4ca:	1f 5f       	subi	r17, 0xFF	; 255
     4cc:	8a 81       	ldd	r24, Y+2	; 0x02
     4ce:	18 17       	cp	r17, r24
     4d0:	a0 f3       	brcs	.-24     	; 0x4ba <CAN_message_send+0x40>
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
	}
	
	uint8_t buffer_states = (uint8_t)(1 << buffer_numb);
	MCP2515_request_to_send(buffer_states);
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <MCP2515_request_to_send>
	
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	08 95       	ret

000004e2 <CAN_transmit_complete>:
	
}


bool CAN_transmit_complete(int transmit_buffer_numb) {	
	if(MCP2515_read(MCP_TXB0CTRL) & MCP_TXREQ){
     4e2:	80 e3       	ldi	r24, 0x30	; 48
     4e4:	0e 94 46 04 	call	0x88c	; 0x88c <MCP2515_read>
     4e8:	83 fb       	bst	r24, 3
     4ea:	88 27       	eor	r24, r24
     4ec:	80 f9       	bld	r24, 0
	}
	return true; 



}
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	89 27       	eor	r24, r25
     4f2:	08 95       	ret

000004f4 <CAN_data_receive>:


void CAN_data_receive(can_message* received_msg){
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	8c 01       	movw	r16, r24
	int receive_buffer_numb;
	if(flag_RX0){
     504:	80 91 ea 02 	lds	r24, 0x02EA
     508:	90 91 eb 02 	lds	r25, 0x02EB
     50c:	89 2b       	or	r24, r25
     50e:	51 f4       	brne	.+20     	; 0x524 <__stack+0x25>
		receive_buffer_numb = 0;
	}
	else if(flag_RX1){
     510:	80 91 e8 02 	lds	r24, 0x02E8
     514:	90 91 e9 02 	lds	r25, 0x02E9
     518:	89 2b       	or	r24, r25
     51a:	09 f4       	brne	.+2      	; 0x51e <__stack+0x1f>
     51c:	46 c0       	rjmp	.+140    	; 0x5aa <__stack+0xab>
		receive_buffer_numb = 1;
     51e:	c1 e0       	ldi	r28, 0x01	; 1
     520:	d0 e0       	ldi	r29, 0x00	; 0
     522:	02 c0       	rjmp	.+4      	; 0x528 <__stack+0x29>


void CAN_data_receive(can_message* received_msg){
	int receive_buffer_numb;
	if(flag_RX0){
		receive_buffer_numb = 0;
     524:	c0 e0       	ldi	r28, 0x00	; 0
     526:	d0 e0       	ldi	r29, 0x00	; 0
		receive_buffer_numb = 1;
	}
	else{
		return;
	}
	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_numb);
     528:	fc 2e       	mov	r15, r28
     52a:	ff 0c       	add	r15, r15
     52c:	ff 0c       	add	r15, r15
     52e:	ff 0c       	add	r15, r15
     530:	ff 0c       	add	r15, r15
     532:	81 e6       	ldi	r24, 0x61	; 97
     534:	8f 0d       	add	r24, r15
     536:	0e 94 46 04 	call	0x88c	; 0x88c <MCP2515_read>
     53a:	e8 2e       	mov	r14, r24
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_numb);
     53c:	82 e6       	ldi	r24, 0x62	; 98
     53e:	8f 0d       	add	r24, r15
     540:	0e 94 46 04 	call	0x88c	; 0x88c <MCP2515_read>
	/*
		id_low:	    X XXXX LLL
		id_high: HHHH HHHH
		id:		 HHHH HHHH LLL
	*/
	received_msg->id = (id_high << 3) + id_low; 
     544:	2e 2d       	mov	r18, r14
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	22 0f       	add	r18, r18
     54a:	33 1f       	adc	r19, r19
     54c:	22 0f       	add	r18, r18
     54e:	33 1f       	adc	r19, r19
     550:	22 0f       	add	r18, r18
     552:	33 1f       	adc	r19, r19
	}
	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_numb);
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_numb);
	
	//only want the last 3 bits
	id_low = id_low >> 5;
     554:	82 95       	swap	r24
     556:	86 95       	lsr	r24
     558:	87 70       	andi	r24, 0x07	; 7
	/*
		id_low:	    X XXXX LLL
		id_high: HHHH HHHH
		id:		 HHHH HHHH LLL
	*/
	received_msg->id = (id_high << 3) + id_low; 
     55a:	28 0f       	add	r18, r24
     55c:	31 1d       	adc	r19, r1
     55e:	f8 01       	movw	r30, r16
     560:	31 83       	std	Z+1, r19	; 0x01
     562:	20 83       	st	Z, r18
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_numb) % (1<<3));
     564:	85 e6       	ldi	r24, 0x65	; 101
     566:	8f 0d       	add	r24, r15
     568:	0e 94 46 04 	call	0x88c	; 0x88c <MCP2515_read>
     56c:	87 70       	andi	r24, 0x07	; 7
     56e:	f8 01       	movw	r30, r16
     570:	82 83       	std	Z+2, r24	; 0x02
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     572:	88 23       	and	r24, r24
     574:	d1 f0       	breq	.+52     	; 0x5aa <__stack+0xab>
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_numb;
     576:	7e 01       	movw	r14, r28
     578:	ee 0c       	add	r14, r14
     57a:	ff 1c       	adc	r15, r15
     57c:	ee 0c       	add	r14, r14
     57e:	ff 1c       	adc	r15, r15
     580:	ee 0c       	add	r14, r14
     582:	ff 1c       	adc	r15, r15
     584:	ee 0c       	add	r14, r14
     586:	ff 1c       	adc	r15, r15
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_numb) % (1<<3));
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     588:	d1 2c       	mov	r13, r1
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_numb;
     58a:	cd 2d       	mov	r28, r13
     58c:	d0 e0       	ldi	r29, 0x00	; 0
     58e:	ce 01       	movw	r24, r28
     590:	8a 59       	subi	r24, 0x9A	; 154
     592:	9f 4f       	sbci	r25, 0xFF	; 255
		received_msg->data[byte] = MCP2515_read(address);
     594:	8e 0d       	add	r24, r14
     596:	0e 94 46 04 	call	0x88c	; 0x88c <MCP2515_read>
     59a:	c0 0f       	add	r28, r16
     59c:	d1 1f       	adc	r29, r17
     59e:	8b 83       	std	Y+3, r24	; 0x03
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_numb) % (1<<3));
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     5a0:	d3 94       	inc	r13
     5a2:	f8 01       	movw	r30, r16
     5a4:	82 81       	ldd	r24, Z+2	; 0x02
     5a6:	d8 16       	cp	r13, r24
     5a8:	80 f3       	brcs	.-32     	; 0x58a <__stack+0x8b>

	
	
	
	
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	08 95       	ret

000005ba <CAN_test>:



void CAN_test(){
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	66 97       	sbiw	r28, 0x16	; 22
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	de bf       	out	0x3e, r29	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	cd bf       	out	0x3d, r28	; 61
	//TEST IN LOOPBACK MODE
	MCP2515_bit_modify(MCP_CANCTRL, 0xE0, 0x40);
     5d4:	40 e4       	ldi	r20, 0x40	; 64
     5d6:	60 ee       	ldi	r22, 0xE0	; 224
     5d8:	8f e0       	ldi	r24, 0x0F	; 15
     5da:	0e 94 78 04 	call	0x8f0	; 0x8f0 <MCP2515_bit_modify>
	printf("\nCANSTAT before: %x\n", MCP2515_read(MCP_CANSTAT));
     5de:	8e e0       	ldi	r24, 0x0E	; 14
     5e0:	0e 94 46 04 	call	0x88c	; 0x88c <MCP2515_read>
     5e4:	1f 92       	push	r1
     5e6:	8f 93       	push	r24
     5e8:	87 e7       	ldi	r24, 0x77	; 119
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	9f 93       	push	r25
     5ee:	8f 93       	push	r24
     5f0:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <printf>
	while(!CAN_transmit_complete(TB0)){}
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CAN_transmit_complete>
     604:	88 23       	and	r24, r24
     606:	d1 f3       	breq	.-12     	; 0x5fc <CAN_test+0x42>
	can_message my_message;
	can_message received_message;
	my_message.id = 150;
     608:	86 e9       	ldi	r24, 0x96	; 150
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	9a 83       	std	Y+2, r25	; 0x02
     60e:	89 83       	std	Y+1, r24	; 0x01
	my_message.length = 3;
     610:	83 e0       	ldi	r24, 0x03	; 3
     612:	8b 83       	std	Y+3, r24	; 0x03
	my_message.data[0] = 0x00;
     614:	1c 82       	std	Y+4, r1	; 0x04
	my_message.data[1] = 0xFF;
     616:	8f ef       	ldi	r24, 0xFF	; 255
     618:	8d 83       	std	Y+5, r24	; 0x05
	my_message.data[2] = 0x55;
     61a:	85 e5       	ldi	r24, 0x55	; 85
     61c:	8e 83       	std	Y+6, r24	; 0x06
	CAN_message_send(&my_message);
     61e:	ce 01       	movw	r24, r28
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	0e 94 3d 02 	call	0x47a	; 0x47a <CAN_message_send>
	while(!CAN_transmit_complete(0));
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CAN_transmit_complete>
     62e:	88 23       	and	r24, r24
     630:	d1 f3       	breq	.-12     	; 0x626 <CAN_test+0x6c>
	CAN_data_receive(&received_message);
     632:	ce 01       	movw	r24, r28
     634:	0c 96       	adiw	r24, 0x0c	; 12
     636:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <CAN_data_receive>
	printf("\n\nSENT:\nlength: %d\nid: %d\n", my_message.length, my_message.id);
     63a:	8a 81       	ldd	r24, Y+2	; 0x02
     63c:	8f 93       	push	r24
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	8f 93       	push	r24
     642:	8b 81       	ldd	r24, Y+3	; 0x03
     644:	1f 92       	push	r1
     646:	8f 93       	push	r24
     648:	8c e8       	ldi	r24, 0x8C	; 140
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	9f 93       	push	r25
     64e:	8f 93       	push	r24
     650:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <printf>
	for (uint8_t byte = 0; byte < my_message.length;byte++){
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	8b 81       	ldd	r24, Y+3	; 0x03
     662:	88 23       	and	r24, r24
     664:	e1 f0       	breq	.+56     	; 0x69e <CAN_test+0xe4>
     666:	f1 2c       	mov	r15, r1
		printf("Data nr. %d: %x\n", byte, my_message.data[byte]);
     668:	07 ea       	ldi	r16, 0xA7	; 167
     66a:	11 e0       	ldi	r17, 0x01	; 1
     66c:	e4 e0       	ldi	r30, 0x04	; 4
     66e:	f0 e0       	ldi	r31, 0x00	; 0
     670:	ec 0f       	add	r30, r28
     672:	fd 1f       	adc	r31, r29
     674:	ef 0d       	add	r30, r15
     676:	f1 1d       	adc	r31, r1
     678:	80 81       	ld	r24, Z
     67a:	1f 92       	push	r1
     67c:	8f 93       	push	r24
     67e:	1f 92       	push	r1
     680:	ff 92       	push	r15
     682:	1f 93       	push	r17
     684:	0f 93       	push	r16
     686:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <printf>
	my_message.data[2] = 0x55;
	CAN_message_send(&my_message);
	while(!CAN_transmit_complete(0));
	CAN_data_receive(&received_message);
	printf("\n\nSENT:\nlength: %d\nid: %d\n", my_message.length, my_message.id);
	for (uint8_t byte = 0; byte < my_message.length;byte++){
     68a:	f3 94       	inc	r15
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	8b 81       	ldd	r24, Y+3	; 0x03
     69a:	f8 16       	cp	r15, r24
     69c:	38 f3       	brcs	.-50     	; 0x66c <CAN_test+0xb2>
		printf("Data nr. %d: %x\n", byte, my_message.data[byte]);
	}
	
	
	printf("\n\nRECEIVED:\n\nlength: %d\nid: %d\n", received_message.length, received_message.id);
     69e:	8d 85       	ldd	r24, Y+13	; 0x0d
     6a0:	8f 93       	push	r24
     6a2:	8c 85       	ldd	r24, Y+12	; 0x0c
     6a4:	8f 93       	push	r24
     6a6:	8e 85       	ldd	r24, Y+14	; 0x0e
     6a8:	1f 92       	push	r1
     6aa:	8f 93       	push	r24
     6ac:	88 eb       	ldi	r24, 0xB8	; 184
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	9f 93       	push	r25
     6b2:	8f 93       	push	r24
     6b4:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <printf>
	for (uint8_t byte = 0; byte < received_message.length;byte++){
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	8e 85       	ldd	r24, Y+14	; 0x0e
     6c6:	88 23       	and	r24, r24
     6c8:	e1 f0       	breq	.+56     	; 0x702 <CAN_test+0x148>
     6ca:	f1 2c       	mov	r15, r1
		printf("Data nr. %d: %x\n", byte, received_message.data[byte]);
     6cc:	07 ea       	ldi	r16, 0xA7	; 167
     6ce:	11 e0       	ldi	r17, 0x01	; 1
     6d0:	ef e0       	ldi	r30, 0x0F	; 15
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	ec 0f       	add	r30, r28
     6d6:	fd 1f       	adc	r31, r29
     6d8:	ef 0d       	add	r30, r15
     6da:	f1 1d       	adc	r31, r1
     6dc:	80 81       	ld	r24, Z
     6de:	1f 92       	push	r1
     6e0:	8f 93       	push	r24
     6e2:	1f 92       	push	r1
     6e4:	ff 92       	push	r15
     6e6:	1f 93       	push	r17
     6e8:	0f 93       	push	r16
     6ea:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <printf>
		printf("Data nr. %d: %x\n", byte, my_message.data[byte]);
	}
	
	
	printf("\n\nRECEIVED:\n\nlength: %d\nid: %d\n", received_message.length, received_message.id);
	for (uint8_t byte = 0; byte < received_message.length;byte++){
     6ee:	f3 94       	inc	r15
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	8e 85       	ldd	r24, Y+14	; 0x0e
     6fe:	f8 16       	cp	r15, r24
     700:	38 f3       	brcs	.-50     	; 0x6d0 <CAN_test+0x116>
		printf("Data nr. %d: %x\n", byte, received_message.data[byte]);
	}
	MCP2515_bit_modify(MCP_CANCTRL,0xE0, 0x00);
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	60 ee       	ldi	r22, 0xE0	; 224
     706:	8f e0       	ldi	r24, 0x0F	; 15
     708:	0e 94 78 04 	call	0x8f0	; 0x8f0 <MCP2515_bit_modify>

	
	
	printf("ERROR FLAGS: %x\n", MCP2515_read(MCP_EFLG));
     70c:	8d e2       	ldi	r24, 0x2D	; 45
     70e:	0e 94 46 04 	call	0x88c	; 0x88c <MCP2515_read>
     712:	1f 92       	push	r1
     714:	8f 93       	push	r24
     716:	08 ed       	ldi	r16, 0xD8	; 216
     718:	11 e0       	ldi	r17, 0x01	; 1
     71a:	1f 93       	push	r17
     71c:	0f 93       	push	r16
     71e:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <printf>

	CAN_message_send(&my_message);
     722:	ce 01       	movw	r24, r28
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	0e 94 3d 02 	call	0x47a	; 0x47a <CAN_message_send>
		
	printf("\nCANSTAT after: %x\n", MCP2515_read(MCP_CANSTAT));
     72a:	8e e0       	ldi	r24, 0x0E	; 14
     72c:	0e 94 46 04 	call	0x88c	; 0x88c <MCP2515_read>
     730:	1f 92       	push	r1
     732:	8f 93       	push	r24
     734:	89 ee       	ldi	r24, 0xE9	; 233
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	9f 93       	push	r25
     73a:	8f 93       	push	r24
     73c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <printf>
	printf("TXCTRL: %x\n", MCP2515_read(MCP_TXB0CTRL));
     740:	80 e3       	ldi	r24, 0x30	; 48
     742:	0e 94 46 04 	call	0x88c	; 0x88c <MCP2515_read>
     746:	1f 92       	push	r1
     748:	8f 93       	push	r24
     74a:	8d ef       	ldi	r24, 0xFD	; 253
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <printf>
	printf("ERROR FLAGS: %x\n", MCP2515_read(MCP_EFLG));
     756:	8d e2       	ldi	r24, 0x2D	; 45
     758:	0e 94 46 04 	call	0x88c	; 0x88c <MCP2515_read>
     75c:	1f 92       	push	r1
     75e:	8f 93       	push	r24
     760:	1f 93       	push	r17
     762:	0f 93       	push	r16
     764:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     768:	2f ef       	ldi	r18, 0xFF	; 255
     76a:	8f e7       	ldi	r24, 0x7F	; 127
     76c:	97 e0       	ldi	r25, 0x07	; 7
     76e:	21 50       	subi	r18, 0x01	; 1
     770:	80 40       	sbci	r24, 0x00	; 0
     772:	90 40       	sbci	r25, 0x00	; 0
     774:	e1 f7       	brne	.-8      	; 0x76e <CAN_test+0x1b4>
     776:	00 c0       	rjmp	.+0      	; 0x778 <CAN_test+0x1be>
     778:	00 00       	nop
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(500);

	
	
	/*CAN_error();*/
     784:	66 96       	adiw	r28, 0x16	; 22
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	08 95       	ret

0000079c <JOY_button_pressed>:
	mid.x = (max.x + min.x) / 2;
	mid.y = (max.y + min.y) / 2;
}

bool JOY_button_pressed(button b) {
	switch (b) {
     79c:	81 30       	cpi	r24, 0x01	; 1
     79e:	39 f0       	breq	.+14     	; 0x7ae <JOY_button_pressed+0x12>
     7a0:	18 f0       	brcs	.+6      	; 0x7a8 <JOY_button_pressed+0xc>
     7a2:	82 30       	cpi	r24, 0x02	; 2
     7a4:	41 f0       	breq	.+16     	; 0x7b6 <JOY_button_pressed+0x1a>
     7a6:	0e c0       	rjmp	.+28     	; 0x7c4 <JOY_button_pressed+0x28>
	case 0:
		if (test_bit(PINB, PINB0)) return true;
     7a8:	86 b3       	in	r24, 0x16	; 22
     7aa:	81 70       	andi	r24, 0x01	; 1
     7ac:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return true;
     7ae:	86 b3       	in	r24, 0x16	; 22
     7b0:	86 95       	lsr	r24
     7b2:	81 70       	andi	r24, 0x01	; 1
     7b4:	08 95       	ret
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return true;
     7b6:	86 b3       	in	r24, 0x16	; 22
     7b8:	82 fb       	bst	r24, 2
     7ba:	88 27       	eor	r24, r24
     7bc:	80 f9       	bld	r24, 0
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	89 27       	eor	r24, r25
     7c2:	08 95       	ret
		break;
	}
	return false;
     7c4:	80 e0       	ldi	r24, 0x00	; 0
}
     7c6:	08 95       	ret

000007c8 <JOY_getPosition>:

JOY_position_t JOY_getPosition() {
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
	JOY_position_t JOY_position;
	JOY_position.x = (100 * (ADC_read(X_COORD) - mid.x)) / rad.x;
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     7d4:	28 2f       	mov	r18, r24
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	80 91 f2 02 	lds	r24, 0x02F2
     7dc:	28 1b       	sub	r18, r24
     7de:	31 09       	sbc	r19, r1
     7e0:	14 e6       	ldi	r17, 0x64	; 100
     7e2:	12 9f       	mul	r17, r18
     7e4:	c0 01       	movw	r24, r0
     7e6:	13 9f       	mul	r17, r19
     7e8:	90 0d       	add	r25, r0
     7ea:	11 24       	eor	r1, r1
     7ec:	60 91 ee 02 	lds	r22, 0x02EE
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	0e 94 46 07 	call	0xe8c	; 0xe8c <__divmodhi4>
     7f6:	eb 01       	movw	r28, r22
	JOY_position.y = (100 * (ADC_read(Y_COORD) - mid.y)) / rad.y;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     7fe:	28 2f       	mov	r18, r24
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	80 91 f3 02 	lds	r24, 0x02F3
     806:	28 1b       	sub	r18, r24
     808:	31 09       	sbc	r19, r1
     80a:	12 9f       	mul	r17, r18
     80c:	c0 01       	movw	r24, r0
     80e:	13 9f       	mul	r17, r19
     810:	90 0d       	add	r25, r0
     812:	11 24       	eor	r1, r1
     814:	60 91 ef 02 	lds	r22, 0x02EF
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	0e 94 46 07 	call	0xe8c	; 0xe8c <__divmodhi4>
     81e:	9b 01       	movw	r18, r22
	return JOY_position;
     820:	be 01       	movw	r22, r28
     822:	c9 01       	movw	r24, r18
}
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	1f 91       	pop	r17
     82a:	08 95       	ret

0000082c <JOY_getDirection>:

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
     82c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <JOY_getPosition>
     830:	fb 01       	movw	r30, r22
     832:	ac 01       	movw	r20, r24
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     834:	9b 01       	movw	r18, r22
     836:	2c 5f       	subi	r18, 0xFC	; 252
     838:	3f 4f       	sbci	r19, 0xFF	; 255
     83a:	29 30       	cpi	r18, 0x09	; 9
     83c:	31 05       	cpc	r19, r1
     83e:	30 f4       	brcc	.+12     	; 0x84c <JOY_getDirection+0x20>
     840:	9c 01       	movw	r18, r24
     842:	2c 5f       	subi	r18, 0xFC	; 252
     844:	3f 4f       	sbci	r19, 0xFF	; 255
     846:	29 30       	cpi	r18, 0x09	; 9
     848:	31 05       	cpc	r19, r1
     84a:	e0 f0       	brcs	.+56     	; 0x884 <JOY_getDirection+0x58>

	// The x-coordinate is dominating
	else if (abs(position.x) > abs(position.y)) {
     84c:	db 01       	movw	r26, r22
     84e:	ff 23       	and	r31, r31
     850:	24 f4       	brge	.+8      	; 0x85a <JOY_getDirection+0x2e>
     852:	aa 27       	eor	r26, r26
     854:	bb 27       	eor	r27, r27
     856:	a6 1b       	sub	r26, r22
     858:	b7 0b       	sbc	r27, r23
     85a:	9c 01       	movw	r18, r24
     85c:	55 23       	and	r21, r21
     85e:	24 f4       	brge	.+8      	; 0x868 <JOY_getDirection+0x3c>
     860:	22 27       	eor	r18, r18
     862:	33 27       	eor	r19, r19
     864:	28 1b       	sub	r18, r24
     866:	39 0b       	sbc	r19, r25
     868:	2a 17       	cp	r18, r26
     86a:	3b 07       	cpc	r19, r27
     86c:	34 f4       	brge	.+12     	; 0x87a <JOY_getDirection+0x4e>
		// Positive x => RIGHT
		if (position.x > 0) return RIGHT;
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	1e 16       	cp	r1, r30
     872:	1f 06       	cpc	r1, r31
     874:	54 f0       	brlt	.+20     	; 0x88a <JOY_getDirection+0x5e>
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	08 95       	ret
		else return LEFT;

	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
     87a:	14 16       	cp	r1, r20
     87c:	15 06       	cpc	r1, r21
     87e:	24 f4       	brge	.+8      	; 0x888 <JOY_getDirection+0x5c>
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	08 95       	ret

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     884:	84 e0       	ldi	r24, 0x04	; 4
     886:	08 95       	ret
	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
		// Negative y => DOWN
		else return DOWN;
     888:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     88a:	08 95       	ret

0000088c <MCP2515_read>:
	}
	
	return 0;
}

char MCP2515_read(char address) {
     88c:	cf 93       	push	r28
     88e:	c8 2f       	mov	r28, r24
	SPI_select();
     890:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_select>
	SPI_send(READ);
     894:	83 e0       	ldi	r24, 0x03	; 3
     896:	0e 94 15 07 	call	0xe2a	; 0xe2a <SPI_send>
	SPI_send(address);
     89a:	8c 2f       	mov	r24, r28
     89c:	0e 94 15 07 	call	0xe2a	; 0xe2a <SPI_send>
	char data = SPI_read();
     8a0:	0e 94 19 07 	call	0xe32	; 0xe32 <SPI_read>
     8a4:	c8 2f       	mov	r28, r24
	SPI_deselect();
     8a6:	0e 94 22 07 	call	0xe44	; 0xe44 <SPI_deselect>
	return data;
	
	
}
     8aa:	8c 2f       	mov	r24, r28
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <MCP2515_write>:

void MCP2515_write(char address, char data) {
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	d8 2f       	mov	r29, r24
     8b6:	c6 2f       	mov	r28, r22
	SPI_select();
     8b8:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_select>
	SPI_send(WRITE);
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	0e 94 15 07 	call	0xe2a	; 0xe2a <SPI_send>
	SPI_send(address);
     8c2:	8d 2f       	mov	r24, r29
     8c4:	0e 94 15 07 	call	0xe2a	; 0xe2a <SPI_send>
	SPI_send(data);
     8c8:	8c 2f       	mov	r24, r28
     8ca:	0e 94 15 07 	call	0xe2a	; 0xe2a <SPI_send>
	SPI_deselect();
     8ce:	0e 94 22 07 	call	0xe44	; 0xe44 <SPI_deselect>
}
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <MCP2515_request_to_send>:

//Buffer states: three bit, setting a 1 on the buffer initiates transmitting from it 
void MCP2515_request_to_send(uint8_t buffer_states) {
     8d8:	cf 93       	push	r28
     8da:	c8 2f       	mov	r28, r24
	SPI_select();
     8dc:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_select>
	SPI_send(RTS_BASE+buffer_states);
     8e0:	80 e8       	ldi	r24, 0x80	; 128
     8e2:	8c 0f       	add	r24, r28
     8e4:	0e 94 15 07 	call	0xe2a	; 0xe2a <SPI_send>
	SPI_deselect();
     8e8:	0e 94 22 07 	call	0xe44	; 0xe44 <SPI_deselect>
}
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <MCP2515_bit_modify>:

//puts new_data in the selected reg_adress. the function assumes that you are allowed to change every bit in the register
void MCP2515_bit_modify(char reg_address, char masked_bits, char new_data) {
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	18 2f       	mov	r17, r24
     8f8:	d6 2f       	mov	r29, r22
     8fa:	c4 2f       	mov	r28, r20
	SPI_select();
     8fc:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_select>
	SPI_send(BIT_MODIFY);
     900:	85 e0       	ldi	r24, 0x05	; 5
     902:	0e 94 15 07 	call	0xe2a	; 0xe2a <SPI_send>
	SPI_send(reg_address);
     906:	81 2f       	mov	r24, r17
     908:	0e 94 15 07 	call	0xe2a	; 0xe2a <SPI_send>
	SPI_send(masked_bits);
     90c:	8d 2f       	mov	r24, r29
     90e:	0e 94 15 07 	call	0xe2a	; 0xe2a <SPI_send>
	SPI_send(new_data);
     912:	8c 2f       	mov	r24, r28
     914:	0e 94 15 07 	call	0xe2a	; 0xe2a <SPI_send>
	SPI_deselect();
     918:	0e 94 22 07 	call	0xe44	; 0xe44 <SPI_deselect>
}
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	08 95       	ret

00000924 <MCP2515_reset>:

void MCP2515_reset() {
	SPI_select();
     924:	0e 94 20 07 	call	0xe40	; 0xe40 <SPI_select>
	SPI_send(RESET);
     928:	80 ec       	ldi	r24, 0xC0	; 192
     92a:	0e 94 15 07 	call	0xe2a	; 0xe2a <SPI_send>
	SPI_deselect();
     92e:	0e 94 22 07 	call	0xe44	; 0xe44 <SPI_deselect>
     932:	08 95       	ret

00000934 <MCP2515_init>:
#define BIT_MODIFY 0x05
#define RTS_BASE 0x80


uint8_t MCP2515_init() {
	SPI_init();
     934:	0e 94 03 07 	call	0xe06	; 0xe06 <SPI_init>
	MCP2515_reset();
     938:	0e 94 92 04 	call	0x924	; 0x924 <MCP2515_reset>
	//check bit 7-5 of MCP_CANSTAT which signify the operation mode
	const uint8_t device_mode = MCP2515_read(MCP_CANSTAT) & MODE_MASK;
     93c:	8e e0       	ldi	r24, 0x0E	; 14
     93e:	0e 94 46 04 	call	0x88c	; 0x88c <MCP2515_read>
     942:	80 7e       	andi	r24, 0xE0	; 224
	if (device_mode != MODE_CONFIG) {
     944:	80 38       	cpi	r24, 0x80	; 128
     946:	31 f0       	breq	.+12     	; 0x954 <MCP2515_init+0x20>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
     948:	89 e0       	ldi	r24, 0x09	; 9
     94a:	92 e0       	ldi	r25, 0x02	; 2
     94c:	0e 94 06 09 	call	0x120c	; 0x120c <puts>
		return 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	08 95       	ret
	}
	
	return 0;
     954:	80 e0       	ldi	r24, 0x00	; 0
}
     956:	08 95       	ret

00000958 <test_function>:
volatile menu_entry* current_entry;
volatile menu_entry* selected_entry;


void test_function() {
	printf("\n\nHighscore clicked!\n\n");
     958:	8b e3       	ldi	r24, 0x3B	; 59
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	0e 94 06 09 	call	0x120c	; 0x120c <puts>
     960:	08 95       	ret

00000962 <MENU_draw_current_menu>:
	current_entry = current_entry->parent_node;
	selected_entry = current_entry->child_node;
	MENU_draw_current_menu();
}

void MENU_draw_current_menu() {
     962:	df 92       	push	r13
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
	OLED_reset();
     970:	0e 94 af 06 	call	0xd5e	; 0xd5e <OLED_reset>
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
     974:	e0 91 f6 02 	lds	r30, 0x02F6
     978:	f0 91 f7 02 	lds	r31, 0x02F7
     97c:	c4 81       	ldd	r28, Z+4	; 0x04
     97e:	d5 81       	ldd	r29, Z+5	; 0x05
	
	while( temp_node != NULL){
     980:	20 97       	sbiw	r28, 0x00	; 0
     982:	61 f1       	breq	.+88     	; 0x9dc <MENU_draw_current_menu+0x7a>
     984:	d1 2c       	mov	r13, r1
		OLED_pos(output_row++, 0);
		if (temp_node == selected_entry) {
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
     986:	0f 2e       	mov	r0, r31
     988:	f1 e5       	ldi	r31, 0x51	; 81
     98a:	ef 2e       	mov	r14, r31
     98c:	f2 e0       	ldi	r31, 0x02	; 2
     98e:	ff 2e       	mov	r15, r31
     990:	f0 2d       	mov	r31, r0
     992:	06 e0       	ldi	r16, 0x06	; 6
     994:	11 e0       	ldi	r17, 0x01	; 1
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
		OLED_pos(output_row++, 0);
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	8d 2d       	mov	r24, r13
     99a:	0e 94 86 06 	call	0xd0c	; 0xd0c <OLED_pos>
		if (temp_node == selected_entry) {
     99e:	20 91 f4 02 	lds	r18, 0x02F4
     9a2:	30 91 f5 02 	lds	r19, 0x02F5
     9a6:	c2 17       	cp	r28, r18
     9a8:	d3 07       	cpc	r29, r19
     9aa:	11 f4       	brne	.+4      	; 0x9b0 <MENU_draw_current_menu+0x4e>
			OLED_print_arrow();
     9ac:	0e 94 e6 06 	call	0xdcc	; 0xdcc <OLED_print_arrow>
		}
		fprintf(OLED, " %s", temp_node->name);
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	8f 93       	push	r24
     9b4:	88 81       	ld	r24, Y
     9b6:	8f 93       	push	r24
     9b8:	ff 92       	push	r15
     9ba:	ef 92       	push	r14
     9bc:	1f 93       	push	r17
     9be:	0f 93       	push	r16
     9c0:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <fprintf>
		temp_node = temp_node -> next_sibling_node;
     9c4:	0e 80       	ldd	r0, Y+6	; 0x06
     9c6:	df 81       	ldd	r29, Y+7	; 0x07
     9c8:	c0 2d       	mov	r28, r0
     9ca:	d3 94       	inc	r13
	OLED_reset();
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	0f 90       	pop	r0
     9d8:	20 97       	sbiw	r28, 0x00	; 0
     9da:	e9 f6       	brne	.-70     	; 0x996 <MENU_draw_current_menu+0x34>
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	df 90       	pop	r13
     9ea:	08 95       	ret

000009ec <MENU_select_next>:
	MENU_draw_current_menu();
}


void MENU_select_next() {
	if (selected_entry -> next_sibling_node != NULL) {
     9ec:	e0 91 f4 02 	lds	r30, 0x02F4
     9f0:	f0 91 f5 02 	lds	r31, 0x02F5
     9f4:	86 81       	ldd	r24, Z+6	; 0x06
     9f6:	97 81       	ldd	r25, Z+7	; 0x07
     9f8:	89 2b       	or	r24, r25
     9fa:	41 f0       	breq	.+16     	; 0xa0c <MENU_select_next+0x20>
		selected_entry = selected_entry -> next_sibling_node;
     9fc:	86 81       	ldd	r24, Z+6	; 0x06
     9fe:	97 81       	ldd	r25, Z+7	; 0x07
     a00:	90 93 f5 02 	sts	0x02F5, r25
     a04:	80 93 f4 02 	sts	0x02F4, r24
		MENU_draw_current_menu();
     a08:	0e 94 b1 04 	call	0x962	; 0x962 <MENU_draw_current_menu>
     a0c:	08 95       	ret

00000a0e <MENU_select_prev>:
	}
}

void MENU_select_prev() {
	if (selected_entry -> prev_sibling_node != NULL) {
     a0e:	e0 91 f4 02 	lds	r30, 0x02F4
     a12:	f0 91 f5 02 	lds	r31, 0x02F5
     a16:	80 85       	ldd	r24, Z+8	; 0x08
     a18:	91 85       	ldd	r25, Z+9	; 0x09
     a1a:	89 2b       	or	r24, r25
     a1c:	41 f0       	breq	.+16     	; 0xa2e <MENU_select_prev+0x20>
		selected_entry = selected_entry -> prev_sibling_node;
     a1e:	80 85       	ldd	r24, Z+8	; 0x08
     a20:	91 85       	ldd	r25, Z+9	; 0x09
     a22:	90 93 f5 02 	sts	0x02F5, r25
     a26:	80 93 f4 02 	sts	0x02F4, r24
		MENU_draw_current_menu();
     a2a:	0e 94 b1 04 	call	0x962	; 0x962 <MENU_draw_current_menu>
     a2e:	08 95       	ret

00000a30 <MENU_enter_selection>:
	}
}

void MENU_enter_selection() {
	if (selected_entry->function_ptr != NULL) {
     a30:	e0 91 f4 02 	lds	r30, 0x02F4
     a34:	f0 91 f5 02 	lds	r31, 0x02F5
     a38:	82 85       	ldd	r24, Z+10	; 0x0a
     a3a:	93 85       	ldd	r25, Z+11	; 0x0b
     a3c:	89 2b       	or	r24, r25
     a3e:	21 f0       	breq	.+8      	; 0xa48 <MENU_enter_selection+0x18>
		selected_entry->function_ptr();
     a40:	02 84       	ldd	r0, Z+10	; 0x0a
     a42:	f3 85       	ldd	r31, Z+11	; 0x0b
     a44:	e0 2d       	mov	r30, r0
     a46:	09 95       	icall
	}
	
	if (selected_entry->child_node == NULL) return;
     a48:	e0 91 f4 02 	lds	r30, 0x02F4
     a4c:	f0 91 f5 02 	lds	r31, 0x02F5
     a50:	84 81       	ldd	r24, Z+4	; 0x04
     a52:	95 81       	ldd	r25, Z+5	; 0x05
     a54:	89 2b       	or	r24, r25
     a56:	61 f0       	breq	.+24     	; 0xa70 <MENU_enter_selection+0x40>
	
	current_entry = selected_entry;
     a58:	f0 93 f7 02 	sts	0x02F7, r31
     a5c:	e0 93 f6 02 	sts	0x02F6, r30
	selected_entry = current_entry->child_node;
     a60:	84 81       	ldd	r24, Z+4	; 0x04
     a62:	95 81       	ldd	r25, Z+5	; 0x05
     a64:	90 93 f5 02 	sts	0x02F5, r25
     a68:	80 93 f4 02 	sts	0x02F4, r24
	MENU_draw_current_menu();
     a6c:	0e 94 b1 04 	call	0x962	; 0x962 <MENU_draw_current_menu>
     a70:	08 95       	ret

00000a72 <MENU_go_back>:
}

void MENU_go_back() {
	if (current_entry->parent_node == NULL) return;
     a72:	e0 91 f6 02 	lds	r30, 0x02F6
     a76:	f0 91 f7 02 	lds	r31, 0x02F7
     a7a:	82 81       	ldd	r24, Z+2	; 0x02
     a7c:	93 81       	ldd	r25, Z+3	; 0x03
     a7e:	89 2b       	or	r24, r25
     a80:	79 f0       	breq	.+30     	; 0xaa0 <MENU_go_back+0x2e>
	
	current_entry = current_entry->parent_node;
     a82:	02 80       	ldd	r0, Z+2	; 0x02
     a84:	f3 81       	ldd	r31, Z+3	; 0x03
     a86:	e0 2d       	mov	r30, r0
     a88:	f0 93 f7 02 	sts	0x02F7, r31
     a8c:	e0 93 f6 02 	sts	0x02F6, r30
	selected_entry = current_entry->child_node;
     a90:	84 81       	ldd	r24, Z+4	; 0x04
     a92:	95 81       	ldd	r25, Z+5	; 0x05
     a94:	90 93 f5 02 	sts	0x02F5, r25
     a98:	80 93 f4 02 	sts	0x02F4, r24
	MENU_draw_current_menu();
     a9c:	0e 94 b1 04 	call	0x962	; 0x962 <MENU_draw_current_menu>
     aa0:	08 95       	ret

00000aa2 <MENU_run>:
	_delay_ms(delay);
	MENU_select_prev();
}


void MENU_run() {
     aa2:	cf 93       	push	r28
	bool change = false;
	if (JOY_getDirection() == DOWN) {
     aa4:	0e 94 16 04 	call	0x82c	; 0x82c <JOY_getDirection>
     aa8:	83 30       	cpi	r24, 0x03	; 3
     aaa:	21 f4       	brne	.+8      	; 0xab4 <MENU_run+0x12>
		MENU_select_next();
     aac:	0e 94 f6 04 	call	0x9ec	; 0x9ec <MENU_select_next>
		change = true;
     ab0:	c1 e0       	ldi	r28, 0x01	; 1
     ab2:	09 c0       	rjmp	.+18     	; 0xac6 <MENU_run+0x24>
		} else if (JOY_getDirection() == UP) {
     ab4:	0e 94 16 04 	call	0x82c	; 0x82c <JOY_getDirection>
     ab8:	82 30       	cpi	r24, 0x02	; 2
     aba:	21 f4       	brne	.+8      	; 0xac4 <MENU_run+0x22>
		MENU_select_prev();
     abc:	0e 94 07 05 	call	0xa0e	; 0xa0e <MENU_select_prev>
		change = true;
     ac0:	c1 e0       	ldi	r28, 0x01	; 1
     ac2:	01 c0       	rjmp	.+2      	; 0xac6 <MENU_run+0x24>
	MENU_select_prev();
}


void MENU_run() {
	bool change = false;
     ac4:	c0 e0       	ldi	r28, 0x00	; 0
		} else if (JOY_getDirection() == UP) {
		MENU_select_prev();
		change = true;
	}
	
	if (JOY_button_pressed(JOY_BUTTON)) {
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	0e 94 ce 03 	call	0x79c	; 0x79c <JOY_button_pressed>
     acc:	88 23       	and	r24, r24
     ace:	19 f0       	breq	.+6      	; 0xad6 <MENU_run+0x34>
		MENU_enter_selection();
     ad0:	0e 94 18 05 	call	0xa30	; 0xa30 <MENU_enter_selection>
     ad4:	0a c0       	rjmp	.+20     	; 0xaea <MENU_run+0x48>
		change = true;
	}
	
	else if (JOY_button_pressed(LEFT_BUTTON)) {
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	0e 94 ce 03 	call	0x79c	; 0x79c <JOY_button_pressed>
     adc:	88 23       	and	r24, r24
     ade:	19 f0       	breq	.+6      	; 0xae6 <MENU_run+0x44>
		MENU_go_back();
     ae0:	0e 94 39 05 	call	0xa72	; 0xa72 <MENU_go_back>
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <MENU_run+0x48>
		change = true;
	}
	
	// Make sure the selection doesn't move multiple places at once.
	if (change){
     ae6:	cc 23       	and	r28, r28
     ae8:	49 f0       	breq	.+18     	; 0xafc <MENU_run+0x5a>
     aea:	22 e3       	ldi	r18, 0x32	; 50
     aec:	83 ed       	ldi	r24, 0xD3	; 211
     aee:	93 e0       	ldi	r25, 0x03	; 3
     af0:	21 50       	subi	r18, 0x01	; 1
     af2:	80 40       	sbci	r24, 0x00	; 0
     af4:	90 40       	sbci	r25, 0x00	; 0
     af6:	e1 f7       	brne	.-8      	; 0xaf0 <MENU_run+0x4e>
     af8:	00 c0       	rjmp	.+0      	; 0xafa <MENU_run+0x58>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <MENU_run+0x5a>
		_delay_ms(255);
		change = false;
	}
}
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <add_entry>:



menu_entry* add_entry(menu_entry* parent_node, char* name, void* function_ptr){
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	ec 01       	movw	r28, r24
     b0e:	7b 01       	movw	r14, r22
     b10:	8a 01       	movw	r16, r20
	
	// Create the new node
	menu_entry* new_entry = (menu_entry*) malloc(sizeof(menu_entry));
     b12:	8c e0       	ldi	r24, 0x0C	; 12
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 6e 07 	call	0xedc	; 0xedc <malloc>
     b1a:	dc 01       	movw	r26, r24
	new_entry->name = name;
     b1c:	11 96       	adiw	r26, 0x01	; 1
     b1e:	fc 92       	st	X, r15
     b20:	ee 92       	st	-X, r14
	new_entry->parent_node = parent_node;
     b22:	13 96       	adiw	r26, 0x03	; 3
     b24:	dc 93       	st	X, r29
     b26:	ce 93       	st	-X, r28
     b28:	12 97       	sbiw	r26, 0x02	; 2
	new_entry->child_node = NULL;  // A new node has no children
     b2a:	15 96       	adiw	r26, 0x05	; 5
     b2c:	1c 92       	st	X, r1
     b2e:	1e 92       	st	-X, r1
     b30:	14 97       	sbiw	r26, 0x04	; 4
	new_entry->next_sibling_node = NULL;  // The new child is the last child
     b32:	17 96       	adiw	r26, 0x07	; 7
     b34:	1c 92       	st	X, r1
     b36:	1e 92       	st	-X, r1
     b38:	16 97       	sbiw	r26, 0x06	; 6
	new_entry->prev_sibling_node = NULL;
     b3a:	19 96       	adiw	r26, 0x09	; 9
     b3c:	1c 92       	st	X, r1
     b3e:	1e 92       	st	-X, r1
     b40:	18 97       	sbiw	r26, 0x08	; 8
	new_entry->function_ptr = function_ptr;
     b42:	1b 96       	adiw	r26, 0x0b	; 11
     b44:	1c 93       	st	X, r17
     b46:	0e 93       	st	-X, r16
     b48:	1a 97       	sbiw	r26, 0x0a	; 10
	
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_entry;
     b4a:	20 97       	sbiw	r28, 0x00	; 0
     b4c:	a1 f0       	breq	.+40     	; 0xb76 <add_entry+0x76>
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
     b4e:	ec 81       	ldd	r30, Y+4	; 0x04
     b50:	fd 81       	ldd	r31, Y+5	; 0x05
     b52:	30 97       	sbiw	r30, 0x00	; 0
     b54:	19 f4       	brne	.+6      	; 0xb5c <add_entry+0x5c>
		parent_node->child_node = new_entry;
     b56:	9d 83       	std	Y+5, r25	; 0x05
     b58:	8c 83       	std	Y+4, r24	; 0x04
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <add_entry+0x76>
	else {
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
     b5c:	26 81       	ldd	r18, Z+6	; 0x06
     b5e:	37 81       	ldd	r19, Z+7	; 0x07
     b60:	21 15       	cp	r18, r1
     b62:	31 05       	cpc	r19, r1
     b64:	11 f0       	breq	.+4      	; 0xb6a <add_entry+0x6a>
			temp_node = temp_node->next_sibling_node;
     b66:	f9 01       	movw	r30, r18
     b68:	f9 cf       	rjmp	.-14     	; 0xb5c <add_entry+0x5c>
		}
		
		// Bind the new node to the current last child to become the new last child.
		temp_node->next_sibling_node = new_entry;
     b6a:	b7 83       	std	Z+7, r27	; 0x07
     b6c:	a6 83       	std	Z+6, r26	; 0x06
		new_entry->prev_sibling_node = temp_node;
     b6e:	19 96       	adiw	r26, 0x09	; 9
     b70:	fc 93       	st	X, r31
     b72:	ee 93       	st	-X, r30
     b74:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	// Parent/child/sibling bindings complete. Return the new node.
	return new_entry;
     b76:	cd 01       	movw	r24, r26
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	08 95       	ret

00000b86 <MENU_init>:

void test_function() {
	printf("\n\nHighscore clicked!\n\n");
}

void MENU_init() {
     b86:	cf 92       	push	r12
     b88:	df 92       	push	r13
     b8a:	ef 92       	push	r14
     b8c:	ff 92       	push	r15
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
	menu_entry* main_menu = add_entry(NULL, "Main menu", NULL);
     b96:	40 e0       	ldi	r20, 0x00	; 0
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	65 e5       	ldi	r22, 0x55	; 85
     b9c:	72 e0       	ldi	r23, 0x02	; 2
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 80 05 	call	0xb00	; 0xb00 <add_entry>
     ba6:	ec 01       	movw	r28, r24
	
	// Main menu
	menu_entry* play = add_entry(main_menu, "Play game", NULL);
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	50 e0       	ldi	r21, 0x00	; 0
     bac:	6f e5       	ldi	r22, 0x5F	; 95
     bae:	72 e0       	ldi	r23, 0x02	; 2
     bb0:	0e 94 80 05 	call	0xb00	; 0xb00 <add_entry>
     bb4:	6c 01       	movw	r12, r24
	menu_entry* highscore = add_entry(main_menu, "Highscore", test_function);
     bb6:	4c ea       	ldi	r20, 0xAC	; 172
     bb8:	54 e0       	ldi	r21, 0x04	; 4
     bba:	69 e6       	ldi	r22, 0x69	; 105
     bbc:	72 e0       	ldi	r23, 0x02	; 2
     bbe:	ce 01       	movw	r24, r28
     bc0:	0e 94 80 05 	call	0xb00	; 0xb00 <add_entry>
	menu_entry* settings = add_entry(main_menu, "Settings", NULL);
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	63 e7       	ldi	r22, 0x73	; 115
     bca:	72 e0       	ldi	r23, 0x02	; 2
     bcc:	ce 01       	movw	r24, r28
     bce:	0e 94 80 05 	call	0xb00	; 0xb00 <add_entry>
     bd2:	7c 01       	movw	r14, r24
	menu_entry* extras = add_entry(main_menu, "Extra features", NULL);
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	68 ed       	ldi	r22, 0xD8	; 216
     bda:	72 e0       	ldi	r23, 0x02	; 2
     bdc:	ce 01       	movw	r24, r28
     bde:	0e 94 80 05 	call	0xb00	; 0xb00 <add_entry>
     be2:	8c 01       	movw	r16, r24
	
	// Sub-menu settings
	menu_entry* brightness = add_entry(settings, "Brightness", NULL);
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	6c e7       	ldi	r22, 0x7C	; 124
     bea:	72 e0       	ldi	r23, 0x02	; 2
     bec:	c7 01       	movw	r24, r14
     bee:	0e 94 80 05 	call	0xb00	; 0xb00 <add_entry>
	menu_entry* font = add_entry(settings, "Set font", NULL);
     bf2:	40 e0       	ldi	r20, 0x00	; 0
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	67 e8       	ldi	r22, 0x87	; 135
     bf8:	72 e0       	ldi	r23, 0x02	; 2
     bfa:	c7 01       	movw	r24, r14
     bfc:	0e 94 80 05 	call	0xb00	; 0xb00 <add_entry>
	
	// Sub-menu extras
	menu_entry* keyboard = add_entry(extras, "Keyboard", NULL);
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	60 e9       	ldi	r22, 0x90	; 144
     c06:	72 e0       	ldi	r23, 0x02	; 2
     c08:	c8 01       	movw	r24, r16
     c0a:	0e 94 80 05 	call	0xb00	; 0xb00 <add_entry>
	menu_entry* mandelbrot = add_entry(extras, "Mandelbrot", NULL);
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	69 e9       	ldi	r22, 0x99	; 153
     c14:	72 e0       	ldi	r23, 0x02	; 2
     c16:	c8 01       	movw	r24, r16
     c18:	0e 94 80 05 	call	0xb00	; 0xb00 <add_entry>
	menu_entry* pong = add_entry(extras, "Play pong", NULL);
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	64 ea       	ldi	r22, 0xA4	; 164
     c22:	72 e0       	ldi	r23, 0x02	; 2
     c24:	c8 01       	movw	r24, r16
     c26:	0e 94 80 05 	call	0xb00	; 0xb00 <add_entry>
	menu_entry* rcube = add_entry(extras, "rotating cube", NULL);
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	6e ea       	ldi	r22, 0xAE	; 174
     c30:	72 e0       	ldi	r23, 0x02	; 2
     c32:	c8 01       	movw	r24, r16
     c34:	0e 94 80 05 	call	0xb00	; 0xb00 <add_entry>
	
	current_entry = main_menu;
     c38:	d0 93 f7 02 	sts	0x02F7, r29
     c3c:	c0 93 f6 02 	sts	0x02F6, r28
	selected_entry = play;
     c40:	d0 92 f5 02 	sts	0x02F5, r13
     c44:	c0 92 f4 02 	sts	0x02F4, r12
	MENU_draw_current_menu();
     c48:	0e 94 b1 04 	call	0x962	; 0x962 <MENU_draw_current_menu>
}
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
     c5c:	08 95       	ret

00000c5e <initialize>:
#include <stdio.h>
#include <stdbool.h>


void initialize(void){
	cli();
     c5e:	f8 94       	cli
	OLED_reset();
     c60:	0e 94 af 06 	call	0xd5e	; 0xd5e <OLED_reset>
	usart_init(MYUBRR);
     c64:	8f e1       	ldi	r24, 0x1F	; 31
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 39 07 	call	0xe72	; 0xe72 <usart_init>
	SRAM_init();
     c6c:	0e 94 24 07 	call	0xe48	; 0xe48 <SRAM_init>
	ADC_init();
     c70:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	//JOY_init();
	OLED_init();
     c74:	0e 94 bb 06 	call	0xd76	; 0xd76 <OLED_init>
	MENU_init();
     c78:	0e 94 c3 05 	call	0xb86	; 0xb86 <MENU_init>
	CAN_init();
     c7c:	0e 94 26 02 	call	0x44c	; 0x44c <CAN_init>
	sei();
     c80:	78 94       	sei
     c82:	08 95       	ret

00000c84 <main>:
}



int main(void) {
	initialize(); 	
     c84:	0e 94 2f 06 	call	0xc5e	; 0xc5e <initialize>
	// ADC_test();
	// JOY_test();
	// OLED_test();
	//MENU_test();
	//SPI_test();
	CAN_test();
     c88:	0e 94 dd 02 	call	0x5ba	; 0x5ba <CAN_test>
int main(void) {
	initialize(); 	
	test();
	while(1) {
		//test();
		MENU_run();
     c8c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <MENU_run>
     c90:	fd cf       	rjmp	.-6      	; 0xc8c <main+0x8>

00000c92 <OLED_print_char>:
	write_cmd(0x81);
	write_cmd(lvl);
}

void OLED_print_char(char c){
	if (c == '\0') return;
     c92:	88 23       	and	r24, r24
     c94:	f9 f0       	breq	.+62     	; 0xcd4 <OLED_print_char+0x42>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
     c96:	e8 2f       	mov	r30, r24
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	b0 97       	sbiw	r30, 0x20	; 32
	for (int col = 0; col < FONT_SIZE; col++){
     c9c:	80 91 14 01 	lds	r24, 0x0114
     ca0:	88 23       	and	r24, r24
     ca2:	c1 f0       	breq	.+48     	; 0xcd4 <OLED_print_char+0x42>
     ca4:	ee 0f       	add	r30, r30
     ca6:	ff 1f       	adc	r31, r31
     ca8:	ee 0f       	add	r30, r30
     caa:	ff 1f       	adc	r31, r31
     cac:	ee 0f       	add	r30, r30
     cae:	ff 1f       	adc	r31, r31
     cb0:	e0 59       	subi	r30, 0x90	; 144
     cb2:	ff 4f       	sbci	r31, 0xFF	; 255
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
		write_data(pgm_read_byte(&font8[letter_index][col]));
     cb8:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     cba:	a0 91 17 01 	lds	r26, 0x0117
     cbe:	b0 91 18 01 	lds	r27, 0x0118
     cc2:	2c 93       	st	X, r18

void OLED_print_char(char c){
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++){
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	31 96       	adiw	r30, 0x01	; 1
     cc8:	20 91 14 01 	lds	r18, 0x0114
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	82 17       	cp	r24, r18
     cd0:	93 07       	cpc	r25, r19
     cd2:	94 f3       	brlt	.-28     	; 0xcb8 <OLED_print_char+0x26>
     cd4:	08 95       	ret

00000cd6 <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7){
     cd6:	88 30       	cpi	r24, 0x08	; 8
     cd8:	30 f4       	brcc	.+12     	; 0xce6 <OLED_goto_line+0x10>
		return;
	}
	write_cmd(0xB0+line);
     cda:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     cdc:	e0 91 15 01 	lds	r30, 0x0115
     ce0:	f0 91 16 01 	lds	r31, 0x0116
     ce4:	80 83       	st	Z, r24
     ce6:	08 95       	ret

00000ce8 <OLED_goto_column>:
	}
	write_cmd(0xB0+line);
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
     ce8:	88 23       	and	r24, r24
     cea:	7c f0       	brlt	.+30     	; 0xd0a <OLED_goto_column+0x22>
		return;
	}
	write_cmd(0x00+column%16); //lower column register
     cec:	98 2f       	mov	r25, r24
     cee:	9f 70       	andi	r25, 0x0F	; 15
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     cf0:	e0 91 15 01 	lds	r30, 0x0115
     cf4:	f0 91 16 01 	lds	r31, 0x0116
     cf8:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
		return;
	}
	write_cmd(0x00+column%16); //lower column register
	write_cmd(0x10+column/16); //higher column register
     cfa:	82 95       	swap	r24
     cfc:	8f 70       	andi	r24, 0x0F	; 15
     cfe:	80 5f       	subi	r24, 0xF0	; 240
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     d00:	e0 91 15 01 	lds	r30, 0x0115
     d04:	f0 91 16 01 	lds	r31, 0x0116
     d08:	80 83       	st	Z, r24
     d0a:	08 95       	ret

00000d0c <OLED_pos>:
		write_data(0x00);
		
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
     d0c:	cf 93       	push	r28
     d0e:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
     d10:	88 30       	cpi	r24, 0x08	; 8
     d12:	10 f4       	brcc	.+4      	; 0xd18 <OLED_pos+0xc>
     d14:	66 23       	and	r22, r22
     d16:	4c f4       	brge	.+18     	; 0xd2a <OLED_pos+0x1e>
		printf("Out of range in OLED_pos()");
     d18:	8c eb       	ldi	r24, 0xBC	; 188
     d1a:	92 e0       	ldi	r25, 0x02	; 2
     d1c:	9f 93       	push	r25
     d1e:	8f 93       	push	r24
     d20:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <printf>
		return; 
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	05 c0       	rjmp	.+10     	; 0xd34 <OLED_pos+0x28>
	}
	
	OLED_goto_line(line);
     d2a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <OLED_goto_line>
	OLED_goto_column(column);
     d2e:	8c 2f       	mov	r24, r28
     d30:	0e 94 74 06 	call	0xce8	; 0xce8 <OLED_goto_column>
}
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <OLED_home>:




void OLED_home(){
	OLED_pos(0,0);
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	0e 94 86 06 	call	0xd0c	; 0xd0c <OLED_pos>
     d40:	08 95       	ret

00000d42 <OLED_clear_line>:
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	0e 94 86 06 	call	0xd0c	; 0xd0c <OLED_pos>
     d48:	80 e8       	ldi	r24, 0x80	; 128
     d4a:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     d4c:	e0 91 17 01 	lds	r30, 0x0117
     d50:	f0 91 18 01 	lds	r31, 0x0118
     d54:	10 82       	st	Z, r1
     d56:	01 97       	sbiw	r24, 0x01	; 1
	OLED_pos(0,0);
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	c1 f7       	brne	.-16     	; 0xd4c <OLED_clear_line+0xa>
		write_data(0x00);
		
	}
}
     d5c:	08 95       	ret

00000d5e <OLED_reset>:
	
}



void OLED_reset() {
     d5e:	cf 93       	push	r28
     d60:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
     d62:	8c 2f       	mov	r24, r28
     d64:	0e 94 a1 06 	call	0xd42	; 0xd42 <OLED_clear_line>
     d68:	cf 5f       	subi	r28, 0xFF	; 255
}



void OLED_reset() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
     d6a:	c8 30       	cpi	r28, 0x08	; 8
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <OLED_reset+0x4>
		OLED_clear_line(page);
	}
	OLED_home();
     d6e:	0e 94 9c 06 	call	0xd38	; 0xd38 <OLED_home>
}
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	66 97       	sbiw	r28, 0x16	; 22
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
	
	
	const char addresses[] = {
     d8a:	86 e1       	ldi	r24, 0x16	; 22
     d8c:	e9 e1       	ldi	r30, 0x19	; 25
     d8e:	f1 e0       	ldi	r31, 0x01	; 1
     d90:	de 01       	movw	r26, r28
     d92:	11 96       	adiw	r26, 0x01	; 1
     d94:	01 90       	ld	r0, Z+
     d96:	0d 92       	st	X+, r0
     d98:	8a 95       	dec	r24
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <OLED_init+0x1e>
     d9c:	fe 01       	movw	r30, r28
     d9e:	31 96       	adiw	r30, 0x01	; 1
     da0:	ce 01       	movw	r24, r28
     da2:	47 96       	adiw	r24, 0x17	; 23
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
		write_cmd(addresses[i]);
     da4:	21 91       	ld	r18, Z+
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     da6:	a0 91 15 01 	lds	r26, 0x0115
     daa:	b0 91 16 01 	lds	r27, 0x0116
     dae:	2c 93       	st	X, r18
		0xa6, //set normal display
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
     db0:	e8 17       	cp	r30, r24
     db2:	f9 07       	cpc	r31, r25
     db4:	b9 f7       	brne	.-18     	; 0xda4 <OLED_init+0x2e>
		write_cmd(addresses[i]);
	}
	
	OLED_reset();
     db6:	0e 94 af 06 	call	0xd5e	; 0xd5e <OLED_reset>
	
}
     dba:	66 96       	adiw	r28, 0x16	; 22
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	08 95       	ret

00000dcc <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     dcc:	e0 91 17 01 	lds	r30, 0x0117
     dd0:	f0 91 18 01 	lds	r31, 0x0118
     dd4:	88 e1       	ldi	r24, 0x18	; 24
     dd6:	80 83       	st	Z, r24
     dd8:	e0 91 17 01 	lds	r30, 0x0117
     ddc:	f0 91 18 01 	lds	r31, 0x0118
     de0:	80 83       	st	Z, r24
     de2:	e0 91 17 01 	lds	r30, 0x0117
     de6:	f0 91 18 01 	lds	r31, 0x0118
     dea:	9e e7       	ldi	r25, 0x7E	; 126
     dec:	90 83       	st	Z, r25
     dee:	e0 91 17 01 	lds	r30, 0x0117
     df2:	f0 91 18 01 	lds	r31, 0x0118
     df6:	9c e3       	ldi	r25, 0x3C	; 60
     df8:	90 83       	st	Z, r25
     dfa:	e0 91 17 01 	lds	r30, 0x0117
     dfe:	f0 91 18 01 	lds	r31, 0x0118
     e02:	80 83       	st	Z, r24
     e04:	08 95       	ret

00000e06 <SPI_init>:

void SPI_init(){
	//Configure interrupt0 on the ATmega162 for receiving interrupts from SPI
	//see page 160 in ATmega162
	//enable int0 on the ATmega162
	set_bit(GICR, INT0);
     e06:	8b b7       	in	r24, 0x3b	; 59
     e08:	80 64       	ori	r24, 0x40	; 64
     e0a:	8b bf       	out	0x3b, r24	; 59
	
	//interrupt when low
	clear_bit(MCUCR,ISC01);
     e0c:	85 b7       	in	r24, 0x35	; 53
     e0e:	8d 7f       	andi	r24, 0xFD	; 253
     e10:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     e12:	85 b7       	in	r24, 0x35	; 53
     e14:	8e 7f       	andi	r24, 0xFE	; 254
     e16:	85 bf       	out	0x35, r24	; 53
	

	//set mosi, sck, ss as output, others as input
	set_bit(DDRB, MOSI);
     e18:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
     e1a:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
     e1c:	bc 9a       	sbi	0x17, 4	; 23
	
	
	//set ATmega as master
	set_bit(SPCR, MSTR);
     e1e:	6c 9a       	sbi	0x0d, 4	; 13
	
	//enable SPI
	set_bit(SPCR, SPE);
     e20:	6e 9a       	sbi	0x0d, 6	; 13
	
	//set clock to f_osc/16
	set_bit(SPCR, SPR0);
     e22:	68 9a       	sbi	0x0d, 0	; 13
	clear_bit(SPCR,SPR1);
     e24:	69 98       	cbi	0x0d, 1	; 13
	clear_bit(SPCR, SPI2X);
     e26:	68 98       	cbi	0x0d, 0	; 13
     e28:	08 95       	ret

00000e2a <SPI_send>:
}


void SPI_send(uint8_t data){
	//Start transmission
	SPDR = data;		
     e2a:	8f b9       	out	0x0f, r24	; 15
	//wait for transmission complete SPSR: register with SPIF flag, SPIF: bit set to 1 when data is read
	loop_until_bit_is_set(SPSR, SPIF);
     e2c:	77 9b       	sbis	0x0e, 7	; 14
     e2e:	fe cf       	rjmp	.-4      	; 0xe2c <SPI_send+0x2>
}
     e30:	08 95       	ret

00000e32 <SPI_read>:


char SPI_read(){
	//must send a dummy bit to receive data
	SPI_send(0);
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	0e 94 15 07 	call	0xe2a	; 0xe2a <SPI_send>
	
	loop_until_bit_is_set(SPSR, SPIF);
     e38:	77 9b       	sbis	0x0e, 7	; 14
     e3a:	fe cf       	rjmp	.-4      	; 0xe38 <SPI_read+0x6>
	char data = SPDR;
     e3c:	8f b1       	in	r24, 0x0f	; 15
	return data;
	
}
     e3e:	08 95       	ret

00000e40 <SPI_select>:
	//printf("SPI_TEST: %s\n\n", spi_read_result);
	
}

void SPI_select(){
	clear_bit(PORTB, SS);
     e40:	c4 98       	cbi	0x18, 4	; 24
     e42:	08 95       	ret

00000e44 <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
     e44:	c4 9a       	sbi	0x18, 4	; 24
     e46:	08 95       	ret

00000e48 <SRAM_init>:



void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
     e48:	85 b7       	in	r24, 0x35	; 53
     e4a:	80 68       	ori	r24, 0x80	; 128
     e4c:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
     e4e:	80 b7       	in	r24, 0x30	; 48
     e50:	80 62       	ori	r24, 0x20	; 32
     e52:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
     e54:	80 b7       	in	r24, 0x30	; 48
     e56:	8f 7e       	andi	r24, 0xEF	; 239
     e58:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
     e5a:	80 b7       	in	r24, 0x30	; 48
     e5c:	87 7f       	andi	r24, 0xF7	; 247
     e5e:	80 bf       	out	0x30, r24	; 48
     e60:	08 95       	ret

00000e62 <usart_transmit_to_computer>:
}


void usart_transmit_to_computer(unsigned int data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
     e62:	5d 9b       	sbis	0x0b, 5	; 11
     e64:	fe cf       	rjmp	.-4      	; 0xe62 <usart_transmit_to_computer>
	;
	
	/* Put data into buffer (sends the data) */
	UDR0 = data;
     e66:	8c b9       	out	0x0c, r24	; 12
     e68:	08 95       	ret

00000e6a <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
     e6a:	5f 9b       	sbis	0x0b, 7	; 11
     e6c:	fe cf       	rjmp	.-4      	; 0xe6a <usart_receive_from_computer>
	;
	
	/* Get and return data from buffer */
	return UDR0;
     e6e:	8c b1       	in	r24, 0x0c	; 12
}
     e70:	08 95       	ret

00000e72 <usart_init>:
#include <stdio.h>


void usart_init(unsigned int ubbr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubbr>>8);
     e72:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
     e74:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     e76:	88 e1       	ldi	r24, 0x18	; 24
     e78:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     e7a:	8e e8       	ldi	r24, 0x8E	; 142
     e7c:	80 bd       	out	0x20, r24	; 32
	
	
	/* Enable printf-thing */
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
     e7e:	65 e3       	ldi	r22, 0x35	; 53
     e80:	77 e0       	ldi	r23, 0x07	; 7
     e82:	81 e3       	ldi	r24, 0x31	; 49
     e84:	97 e0       	ldi	r25, 0x07	; 7
     e86:	0e 94 95 08 	call	0x112a	; 0x112a <fdevopen>
     e8a:	08 95       	ret

00000e8c <__divmodhi4>:
     e8c:	97 fb       	bst	r25, 7
     e8e:	07 2e       	mov	r0, r23
     e90:	16 f4       	brtc	.+4      	; 0xe96 <__divmodhi4+0xa>
     e92:	00 94       	com	r0
     e94:	07 d0       	rcall	.+14     	; 0xea4 <__divmodhi4_neg1>
     e96:	77 fd       	sbrc	r23, 7
     e98:	09 d0       	rcall	.+18     	; 0xeac <__divmodhi4_neg2>
     e9a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__udivmodhi4>
     e9e:	07 fc       	sbrc	r0, 7
     ea0:	05 d0       	rcall	.+10     	; 0xeac <__divmodhi4_neg2>
     ea2:	3e f4       	brtc	.+14     	; 0xeb2 <__divmodhi4_exit>

00000ea4 <__divmodhi4_neg1>:
     ea4:	90 95       	com	r25
     ea6:	81 95       	neg	r24
     ea8:	9f 4f       	sbci	r25, 0xFF	; 255
     eaa:	08 95       	ret

00000eac <__divmodhi4_neg2>:
     eac:	70 95       	com	r23
     eae:	61 95       	neg	r22
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255

00000eb2 <__divmodhi4_exit>:
     eb2:	08 95       	ret

00000eb4 <__udivmodhi4>:
     eb4:	aa 1b       	sub	r26, r26
     eb6:	bb 1b       	sub	r27, r27
     eb8:	51 e1       	ldi	r21, 0x11	; 17
     eba:	07 c0       	rjmp	.+14     	; 0xeca <__udivmodhi4_ep>

00000ebc <__udivmodhi4_loop>:
     ebc:	aa 1f       	adc	r26, r26
     ebe:	bb 1f       	adc	r27, r27
     ec0:	a6 17       	cp	r26, r22
     ec2:	b7 07       	cpc	r27, r23
     ec4:	10 f0       	brcs	.+4      	; 0xeca <__udivmodhi4_ep>
     ec6:	a6 1b       	sub	r26, r22
     ec8:	b7 0b       	sbc	r27, r23

00000eca <__udivmodhi4_ep>:
     eca:	88 1f       	adc	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	5a 95       	dec	r21
     ed0:	a9 f7       	brne	.-22     	; 0xebc <__udivmodhi4_loop>
     ed2:	80 95       	com	r24
     ed4:	90 95       	com	r25
     ed6:	bc 01       	movw	r22, r24
     ed8:	cd 01       	movw	r24, r26
     eda:	08 95       	ret

00000edc <malloc>:
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	91 05       	cpc	r25, r1
     ee4:	10 f4       	brcc	.+4      	; 0xeea <malloc+0xe>
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	e0 91 fa 02 	lds	r30, 0x02FA
     eee:	f0 91 fb 02 	lds	r31, 0x02FB
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	a0 e0       	ldi	r26, 0x00	; 0
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	30 97       	sbiw	r30, 0x00	; 0
     efc:	39 f1       	breq	.+78     	; 0xf4c <malloc+0x70>
     efe:	40 81       	ld	r20, Z
     f00:	51 81       	ldd	r21, Z+1	; 0x01
     f02:	48 17       	cp	r20, r24
     f04:	59 07       	cpc	r21, r25
     f06:	b8 f0       	brcs	.+46     	; 0xf36 <malloc+0x5a>
     f08:	48 17       	cp	r20, r24
     f0a:	59 07       	cpc	r21, r25
     f0c:	71 f4       	brne	.+28     	; 0xf2a <malloc+0x4e>
     f0e:	82 81       	ldd	r24, Z+2	; 0x02
     f10:	93 81       	ldd	r25, Z+3	; 0x03
     f12:	10 97       	sbiw	r26, 0x00	; 0
     f14:	29 f0       	breq	.+10     	; 0xf20 <malloc+0x44>
     f16:	13 96       	adiw	r26, 0x03	; 3
     f18:	9c 93       	st	X, r25
     f1a:	8e 93       	st	-X, r24
     f1c:	12 97       	sbiw	r26, 0x02	; 2
     f1e:	2c c0       	rjmp	.+88     	; 0xf78 <malloc+0x9c>
     f20:	90 93 fb 02 	sts	0x02FB, r25
     f24:	80 93 fa 02 	sts	0x02FA, r24
     f28:	27 c0       	rjmp	.+78     	; 0xf78 <malloc+0x9c>
     f2a:	21 15       	cp	r18, r1
     f2c:	31 05       	cpc	r19, r1
     f2e:	31 f0       	breq	.+12     	; 0xf3c <malloc+0x60>
     f30:	42 17       	cp	r20, r18
     f32:	53 07       	cpc	r21, r19
     f34:	18 f0       	brcs	.+6      	; 0xf3c <malloc+0x60>
     f36:	a9 01       	movw	r20, r18
     f38:	db 01       	movw	r26, r22
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <malloc+0x62>
     f3c:	ef 01       	movw	r28, r30
     f3e:	9a 01       	movw	r18, r20
     f40:	bd 01       	movw	r22, r26
     f42:	df 01       	movw	r26, r30
     f44:	02 80       	ldd	r0, Z+2	; 0x02
     f46:	f3 81       	ldd	r31, Z+3	; 0x03
     f48:	e0 2d       	mov	r30, r0
     f4a:	d7 cf       	rjmp	.-82     	; 0xefa <malloc+0x1e>
     f4c:	21 15       	cp	r18, r1
     f4e:	31 05       	cpc	r19, r1
     f50:	f9 f0       	breq	.+62     	; 0xf90 <malloc+0xb4>
     f52:	28 1b       	sub	r18, r24
     f54:	39 0b       	sbc	r19, r25
     f56:	24 30       	cpi	r18, 0x04	; 4
     f58:	31 05       	cpc	r19, r1
     f5a:	80 f4       	brcc	.+32     	; 0xf7c <malloc+0xa0>
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	9b 81       	ldd	r25, Y+3	; 0x03
     f60:	61 15       	cp	r22, r1
     f62:	71 05       	cpc	r23, r1
     f64:	21 f0       	breq	.+8      	; 0xf6e <malloc+0x92>
     f66:	fb 01       	movw	r30, r22
     f68:	93 83       	std	Z+3, r25	; 0x03
     f6a:	82 83       	std	Z+2, r24	; 0x02
     f6c:	04 c0       	rjmp	.+8      	; 0xf76 <malloc+0x9a>
     f6e:	90 93 fb 02 	sts	0x02FB, r25
     f72:	80 93 fa 02 	sts	0x02FA, r24
     f76:	fe 01       	movw	r30, r28
     f78:	32 96       	adiw	r30, 0x02	; 2
     f7a:	44 c0       	rjmp	.+136    	; 0x1004 <malloc+0x128>
     f7c:	fe 01       	movw	r30, r28
     f7e:	e2 0f       	add	r30, r18
     f80:	f3 1f       	adc	r31, r19
     f82:	81 93       	st	Z+, r24
     f84:	91 93       	st	Z+, r25
     f86:	22 50       	subi	r18, 0x02	; 2
     f88:	31 09       	sbc	r19, r1
     f8a:	39 83       	std	Y+1, r19	; 0x01
     f8c:	28 83       	st	Y, r18
     f8e:	3a c0       	rjmp	.+116    	; 0x1004 <malloc+0x128>
     f90:	20 91 f8 02 	lds	r18, 0x02F8
     f94:	30 91 f9 02 	lds	r19, 0x02F9
     f98:	23 2b       	or	r18, r19
     f9a:	41 f4       	brne	.+16     	; 0xfac <malloc+0xd0>
     f9c:	20 91 02 01 	lds	r18, 0x0102
     fa0:	30 91 03 01 	lds	r19, 0x0103
     fa4:	30 93 f9 02 	sts	0x02F9, r19
     fa8:	20 93 f8 02 	sts	0x02F8, r18
     fac:	20 91 00 01 	lds	r18, 0x0100
     fb0:	30 91 01 01 	lds	r19, 0x0101
     fb4:	21 15       	cp	r18, r1
     fb6:	31 05       	cpc	r19, r1
     fb8:	41 f4       	brne	.+16     	; 0xfca <malloc+0xee>
     fba:	2d b7       	in	r18, 0x3d	; 61
     fbc:	3e b7       	in	r19, 0x3e	; 62
     fbe:	40 91 04 01 	lds	r20, 0x0104
     fc2:	50 91 05 01 	lds	r21, 0x0105
     fc6:	24 1b       	sub	r18, r20
     fc8:	35 0b       	sbc	r19, r21
     fca:	e0 91 f8 02 	lds	r30, 0x02F8
     fce:	f0 91 f9 02 	lds	r31, 0x02F9
     fd2:	e2 17       	cp	r30, r18
     fd4:	f3 07       	cpc	r31, r19
     fd6:	a0 f4       	brcc	.+40     	; 0x1000 <malloc+0x124>
     fd8:	2e 1b       	sub	r18, r30
     fda:	3f 0b       	sbc	r19, r31
     fdc:	28 17       	cp	r18, r24
     fde:	39 07       	cpc	r19, r25
     fe0:	78 f0       	brcs	.+30     	; 0x1000 <malloc+0x124>
     fe2:	ac 01       	movw	r20, r24
     fe4:	4e 5f       	subi	r20, 0xFE	; 254
     fe6:	5f 4f       	sbci	r21, 0xFF	; 255
     fe8:	24 17       	cp	r18, r20
     fea:	35 07       	cpc	r19, r21
     fec:	48 f0       	brcs	.+18     	; 0x1000 <malloc+0x124>
     fee:	4e 0f       	add	r20, r30
     ff0:	5f 1f       	adc	r21, r31
     ff2:	50 93 f9 02 	sts	0x02F9, r21
     ff6:	40 93 f8 02 	sts	0x02F8, r20
     ffa:	81 93       	st	Z+, r24
     ffc:	91 93       	st	Z+, r25
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <malloc+0x128>
    1000:	e0 e0       	ldi	r30, 0x00	; 0
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	cf 01       	movw	r24, r30
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret

0000100c <free>:
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	09 f4       	brne	.+2      	; 0x1016 <free+0xa>
    1014:	87 c0       	rjmp	.+270    	; 0x1124 <free+0x118>
    1016:	fc 01       	movw	r30, r24
    1018:	32 97       	sbiw	r30, 0x02	; 2
    101a:	13 82       	std	Z+3, r1	; 0x03
    101c:	12 82       	std	Z+2, r1	; 0x02
    101e:	c0 91 fa 02 	lds	r28, 0x02FA
    1022:	d0 91 fb 02 	lds	r29, 0x02FB
    1026:	20 97       	sbiw	r28, 0x00	; 0
    1028:	81 f4       	brne	.+32     	; 0x104a <free+0x3e>
    102a:	20 81       	ld	r18, Z
    102c:	31 81       	ldd	r19, Z+1	; 0x01
    102e:	28 0f       	add	r18, r24
    1030:	39 1f       	adc	r19, r25
    1032:	80 91 f8 02 	lds	r24, 0x02F8
    1036:	90 91 f9 02 	lds	r25, 0x02F9
    103a:	82 17       	cp	r24, r18
    103c:	93 07       	cpc	r25, r19
    103e:	79 f5       	brne	.+94     	; 0x109e <free+0x92>
    1040:	f0 93 f9 02 	sts	0x02F9, r31
    1044:	e0 93 f8 02 	sts	0x02F8, r30
    1048:	6d c0       	rjmp	.+218    	; 0x1124 <free+0x118>
    104a:	de 01       	movw	r26, r28
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	ae 17       	cp	r26, r30
    1052:	bf 07       	cpc	r27, r31
    1054:	50 f4       	brcc	.+20     	; 0x106a <free+0x5e>
    1056:	12 96       	adiw	r26, 0x02	; 2
    1058:	4d 91       	ld	r20, X+
    105a:	5c 91       	ld	r21, X
    105c:	13 97       	sbiw	r26, 0x03	; 3
    105e:	9d 01       	movw	r18, r26
    1060:	41 15       	cp	r20, r1
    1062:	51 05       	cpc	r21, r1
    1064:	09 f1       	breq	.+66     	; 0x10a8 <free+0x9c>
    1066:	da 01       	movw	r26, r20
    1068:	f3 cf       	rjmp	.-26     	; 0x1050 <free+0x44>
    106a:	b3 83       	std	Z+3, r27	; 0x03
    106c:	a2 83       	std	Z+2, r26	; 0x02
    106e:	40 81       	ld	r20, Z
    1070:	51 81       	ldd	r21, Z+1	; 0x01
    1072:	84 0f       	add	r24, r20
    1074:	95 1f       	adc	r25, r21
    1076:	8a 17       	cp	r24, r26
    1078:	9b 07       	cpc	r25, r27
    107a:	71 f4       	brne	.+28     	; 0x1098 <free+0x8c>
    107c:	8d 91       	ld	r24, X+
    107e:	9c 91       	ld	r25, X
    1080:	11 97       	sbiw	r26, 0x01	; 1
    1082:	84 0f       	add	r24, r20
    1084:	95 1f       	adc	r25, r21
    1086:	02 96       	adiw	r24, 0x02	; 2
    1088:	91 83       	std	Z+1, r25	; 0x01
    108a:	80 83       	st	Z, r24
    108c:	12 96       	adiw	r26, 0x02	; 2
    108e:	8d 91       	ld	r24, X+
    1090:	9c 91       	ld	r25, X
    1092:	13 97       	sbiw	r26, 0x03	; 3
    1094:	93 83       	std	Z+3, r25	; 0x03
    1096:	82 83       	std	Z+2, r24	; 0x02
    1098:	21 15       	cp	r18, r1
    109a:	31 05       	cpc	r19, r1
    109c:	29 f4       	brne	.+10     	; 0x10a8 <free+0x9c>
    109e:	f0 93 fb 02 	sts	0x02FB, r31
    10a2:	e0 93 fa 02 	sts	0x02FA, r30
    10a6:	3e c0       	rjmp	.+124    	; 0x1124 <free+0x118>
    10a8:	d9 01       	movw	r26, r18
    10aa:	13 96       	adiw	r26, 0x03	; 3
    10ac:	fc 93       	st	X, r31
    10ae:	ee 93       	st	-X, r30
    10b0:	12 97       	sbiw	r26, 0x02	; 2
    10b2:	4d 91       	ld	r20, X+
    10b4:	5d 91       	ld	r21, X+
    10b6:	a4 0f       	add	r26, r20
    10b8:	b5 1f       	adc	r27, r21
    10ba:	ea 17       	cp	r30, r26
    10bc:	fb 07       	cpc	r31, r27
    10be:	79 f4       	brne	.+30     	; 0x10de <free+0xd2>
    10c0:	80 81       	ld	r24, Z
    10c2:	91 81       	ldd	r25, Z+1	; 0x01
    10c4:	84 0f       	add	r24, r20
    10c6:	95 1f       	adc	r25, r21
    10c8:	02 96       	adiw	r24, 0x02	; 2
    10ca:	d9 01       	movw	r26, r18
    10cc:	11 96       	adiw	r26, 0x01	; 1
    10ce:	9c 93       	st	X, r25
    10d0:	8e 93       	st	-X, r24
    10d2:	82 81       	ldd	r24, Z+2	; 0x02
    10d4:	93 81       	ldd	r25, Z+3	; 0x03
    10d6:	13 96       	adiw	r26, 0x03	; 3
    10d8:	9c 93       	st	X, r25
    10da:	8e 93       	st	-X, r24
    10dc:	12 97       	sbiw	r26, 0x02	; 2
    10de:	e0 e0       	ldi	r30, 0x00	; 0
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	9b 81       	ldd	r25, Y+3	; 0x03
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	19 f0       	breq	.+6      	; 0x10f0 <free+0xe4>
    10ea:	fe 01       	movw	r30, r28
    10ec:	ec 01       	movw	r28, r24
    10ee:	f9 cf       	rjmp	.-14     	; 0x10e2 <free+0xd6>
    10f0:	ce 01       	movw	r24, r28
    10f2:	02 96       	adiw	r24, 0x02	; 2
    10f4:	28 81       	ld	r18, Y
    10f6:	39 81       	ldd	r19, Y+1	; 0x01
    10f8:	82 0f       	add	r24, r18
    10fa:	93 1f       	adc	r25, r19
    10fc:	20 91 f8 02 	lds	r18, 0x02F8
    1100:	30 91 f9 02 	lds	r19, 0x02F9
    1104:	28 17       	cp	r18, r24
    1106:	39 07       	cpc	r19, r25
    1108:	69 f4       	brne	.+26     	; 0x1124 <free+0x118>
    110a:	30 97       	sbiw	r30, 0x00	; 0
    110c:	29 f4       	brne	.+10     	; 0x1118 <free+0x10c>
    110e:	10 92 fb 02 	sts	0x02FB, r1
    1112:	10 92 fa 02 	sts	0x02FA, r1
    1116:	02 c0       	rjmp	.+4      	; 0x111c <free+0x110>
    1118:	13 82       	std	Z+3, r1	; 0x03
    111a:	12 82       	std	Z+2, r1	; 0x02
    111c:	d0 93 f9 02 	sts	0x02F9, r29
    1120:	c0 93 f8 02 	sts	0x02F8, r28
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <fdevopen>:
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	ec 01       	movw	r28, r24
    1134:	8b 01       	movw	r16, r22
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	31 f4       	brne	.+12     	; 0x1146 <fdevopen+0x1c>
    113a:	61 15       	cp	r22, r1
    113c:	71 05       	cpc	r23, r1
    113e:	19 f4       	brne	.+6      	; 0x1146 <fdevopen+0x1c>
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	38 c0       	rjmp	.+112    	; 0x11b6 <fdevopen+0x8c>
    1146:	6e e0       	ldi	r22, 0x0E	; 14
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 05 0b 	call	0x160a	; 0x160a <calloc>
    1152:	fc 01       	movw	r30, r24
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	a1 f3       	breq	.-24     	; 0x1140 <fdevopen+0x16>
    1158:	80 e8       	ldi	r24, 0x80	; 128
    115a:	83 83       	std	Z+3, r24	; 0x03
    115c:	01 15       	cp	r16, r1
    115e:	11 05       	cpc	r17, r1
    1160:	71 f0       	breq	.+28     	; 0x117e <fdevopen+0x54>
    1162:	13 87       	std	Z+11, r17	; 0x0b
    1164:	02 87       	std	Z+10, r16	; 0x0a
    1166:	81 e8       	ldi	r24, 0x81	; 129
    1168:	83 83       	std	Z+3, r24	; 0x03
    116a:	80 91 fc 02 	lds	r24, 0x02FC
    116e:	90 91 fd 02 	lds	r25, 0x02FD
    1172:	89 2b       	or	r24, r25
    1174:	21 f4       	brne	.+8      	; 0x117e <fdevopen+0x54>
    1176:	f0 93 fd 02 	sts	0x02FD, r31
    117a:	e0 93 fc 02 	sts	0x02FC, r30
    117e:	20 97       	sbiw	r28, 0x00	; 0
    1180:	c9 f0       	breq	.+50     	; 0x11b4 <fdevopen+0x8a>
    1182:	d1 87       	std	Z+9, r29	; 0x09
    1184:	c0 87       	std	Z+8, r28	; 0x08
    1186:	83 81       	ldd	r24, Z+3	; 0x03
    1188:	82 60       	ori	r24, 0x02	; 2
    118a:	83 83       	std	Z+3, r24	; 0x03
    118c:	80 91 fe 02 	lds	r24, 0x02FE
    1190:	90 91 ff 02 	lds	r25, 0x02FF
    1194:	89 2b       	or	r24, r25
    1196:	71 f4       	brne	.+28     	; 0x11b4 <fdevopen+0x8a>
    1198:	f0 93 ff 02 	sts	0x02FF, r31
    119c:	e0 93 fe 02 	sts	0x02FE, r30
    11a0:	80 91 00 03 	lds	r24, 0x0300
    11a4:	90 91 01 03 	lds	r25, 0x0301
    11a8:	89 2b       	or	r24, r25
    11aa:	21 f4       	brne	.+8      	; 0x11b4 <fdevopen+0x8a>
    11ac:	f0 93 01 03 	sts	0x0301, r31
    11b0:	e0 93 00 03 	sts	0x0300, r30
    11b4:	cf 01       	movw	r24, r30
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	08 95       	ret

000011c0 <fprintf>:
    11c0:	a0 e0       	ldi	r26, 0x00	; 0
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e6 ee       	ldi	r30, 0xE6	; 230
    11c6:	f8 e0       	ldi	r31, 0x08	; 8
    11c8:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__prologue_saves__+0x20>
    11cc:	ae 01       	movw	r20, r28
    11ce:	47 5f       	subi	r20, 0xF7	; 247
    11d0:	5f 4f       	sbci	r21, 0xFF	; 255
    11d2:	6f 81       	ldd	r22, Y+7	; 0x07
    11d4:	78 85       	ldd	r23, Y+8	; 0x08
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	9e 81       	ldd	r25, Y+6	; 0x06
    11da:	0e 94 33 09 	call	0x1266	; 0x1266 <vfprintf>
    11de:	e2 e0       	ldi	r30, 0x02	; 2
    11e0:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__epilogue_restores__+0x20>

000011e4 <printf>:
    11e4:	a0 e0       	ldi	r26, 0x00	; 0
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e8 ef       	ldi	r30, 0xF8	; 248
    11ea:	f8 e0       	ldi	r31, 0x08	; 8
    11ec:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__prologue_saves__+0x20>
    11f0:	fe 01       	movw	r30, r28
    11f2:	35 96       	adiw	r30, 0x05	; 5
    11f4:	61 91       	ld	r22, Z+
    11f6:	71 91       	ld	r23, Z+
    11f8:	af 01       	movw	r20, r30
    11fa:	80 91 fe 02 	lds	r24, 0x02FE
    11fe:	90 91 ff 02 	lds	r25, 0x02FF
    1202:	0e 94 33 09 	call	0x1266	; 0x1266 <vfprintf>
    1206:	e2 e0       	ldi	r30, 0x02	; 2
    1208:	0c 94 fa 0b 	jmp	0x17f4	; 0x17f4 <__epilogue_restores__+0x20>

0000120c <puts>:
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	e0 91 fe 02 	lds	r30, 0x02FE
    1218:	f0 91 ff 02 	lds	r31, 0x02FF
    121c:	23 81       	ldd	r18, Z+3	; 0x03
    121e:	21 ff       	sbrs	r18, 1
    1220:	1b c0       	rjmp	.+54     	; 0x1258 <puts+0x4c>
    1222:	ec 01       	movw	r28, r24
    1224:	00 e0       	ldi	r16, 0x00	; 0
    1226:	10 e0       	ldi	r17, 0x00	; 0
    1228:	89 91       	ld	r24, Y+
    122a:	60 91 fe 02 	lds	r22, 0x02FE
    122e:	70 91 ff 02 	lds	r23, 0x02FF
    1232:	db 01       	movw	r26, r22
    1234:	18 96       	adiw	r26, 0x08	; 8
    1236:	ed 91       	ld	r30, X+
    1238:	fc 91       	ld	r31, X
    123a:	19 97       	sbiw	r26, 0x09	; 9
    123c:	88 23       	and	r24, r24
    123e:	31 f0       	breq	.+12     	; 0x124c <puts+0x40>
    1240:	09 95       	icall
    1242:	89 2b       	or	r24, r25
    1244:	89 f3       	breq	.-30     	; 0x1228 <puts+0x1c>
    1246:	0f ef       	ldi	r16, 0xFF	; 255
    1248:	1f ef       	ldi	r17, 0xFF	; 255
    124a:	ee cf       	rjmp	.-36     	; 0x1228 <puts+0x1c>
    124c:	8a e0       	ldi	r24, 0x0A	; 10
    124e:	09 95       	icall
    1250:	89 2b       	or	r24, r25
    1252:	11 f4       	brne	.+4      	; 0x1258 <puts+0x4c>
    1254:	c8 01       	movw	r24, r16
    1256:	02 c0       	rjmp	.+4      	; 0x125c <puts+0x50>
    1258:	8f ef       	ldi	r24, 0xFF	; 255
    125a:	9f ef       	ldi	r25, 0xFF	; 255
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	08 95       	ret

00001266 <vfprintf>:
    1266:	ac e0       	ldi	r26, 0x0C	; 12
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e9 e3       	ldi	r30, 0x39	; 57
    126c:	f9 e0       	ldi	r31, 0x09	; 9
    126e:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__prologue_saves__>
    1272:	7c 01       	movw	r14, r24
    1274:	6b 01       	movw	r12, r22
    1276:	8a 01       	movw	r16, r20
    1278:	fc 01       	movw	r30, r24
    127a:	17 82       	std	Z+7, r1	; 0x07
    127c:	16 82       	std	Z+6, r1	; 0x06
    127e:	83 81       	ldd	r24, Z+3	; 0x03
    1280:	81 ff       	sbrs	r24, 1
    1282:	bd c1       	rjmp	.+890    	; 0x15fe <vfprintf+0x398>
    1284:	ce 01       	movw	r24, r28
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	4c 01       	movw	r8, r24
    128a:	f7 01       	movw	r30, r14
    128c:	93 81       	ldd	r25, Z+3	; 0x03
    128e:	f6 01       	movw	r30, r12
    1290:	93 fd       	sbrc	r25, 3
    1292:	85 91       	lpm	r24, Z+
    1294:	93 ff       	sbrs	r25, 3
    1296:	81 91       	ld	r24, Z+
    1298:	6f 01       	movw	r12, r30
    129a:	88 23       	and	r24, r24
    129c:	09 f4       	brne	.+2      	; 0x12a0 <vfprintf+0x3a>
    129e:	ab c1       	rjmp	.+854    	; 0x15f6 <vfprintf+0x390>
    12a0:	85 32       	cpi	r24, 0x25	; 37
    12a2:	39 f4       	brne	.+14     	; 0x12b2 <vfprintf+0x4c>
    12a4:	93 fd       	sbrc	r25, 3
    12a6:	85 91       	lpm	r24, Z+
    12a8:	93 ff       	sbrs	r25, 3
    12aa:	81 91       	ld	r24, Z+
    12ac:	6f 01       	movw	r12, r30
    12ae:	85 32       	cpi	r24, 0x25	; 37
    12b0:	29 f4       	brne	.+10     	; 0x12bc <vfprintf+0x56>
    12b2:	b7 01       	movw	r22, r14
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    12ba:	e7 cf       	rjmp	.-50     	; 0x128a <vfprintf+0x24>
    12bc:	51 2c       	mov	r5, r1
    12be:	31 2c       	mov	r3, r1
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	20 32       	cpi	r18, 0x20	; 32
    12c4:	a0 f4       	brcc	.+40     	; 0x12ee <vfprintf+0x88>
    12c6:	8b 32       	cpi	r24, 0x2B	; 43
    12c8:	69 f0       	breq	.+26     	; 0x12e4 <vfprintf+0x7e>
    12ca:	30 f4       	brcc	.+12     	; 0x12d8 <vfprintf+0x72>
    12cc:	80 32       	cpi	r24, 0x20	; 32
    12ce:	59 f0       	breq	.+22     	; 0x12e6 <vfprintf+0x80>
    12d0:	83 32       	cpi	r24, 0x23	; 35
    12d2:	69 f4       	brne	.+26     	; 0x12ee <vfprintf+0x88>
    12d4:	20 61       	ori	r18, 0x10	; 16
    12d6:	2c c0       	rjmp	.+88     	; 0x1330 <vfprintf+0xca>
    12d8:	8d 32       	cpi	r24, 0x2D	; 45
    12da:	39 f0       	breq	.+14     	; 0x12ea <vfprintf+0x84>
    12dc:	80 33       	cpi	r24, 0x30	; 48
    12de:	39 f4       	brne	.+14     	; 0x12ee <vfprintf+0x88>
    12e0:	21 60       	ori	r18, 0x01	; 1
    12e2:	26 c0       	rjmp	.+76     	; 0x1330 <vfprintf+0xca>
    12e4:	22 60       	ori	r18, 0x02	; 2
    12e6:	24 60       	ori	r18, 0x04	; 4
    12e8:	23 c0       	rjmp	.+70     	; 0x1330 <vfprintf+0xca>
    12ea:	28 60       	ori	r18, 0x08	; 8
    12ec:	21 c0       	rjmp	.+66     	; 0x1330 <vfprintf+0xca>
    12ee:	27 fd       	sbrc	r18, 7
    12f0:	27 c0       	rjmp	.+78     	; 0x1340 <vfprintf+0xda>
    12f2:	30 ed       	ldi	r19, 0xD0	; 208
    12f4:	38 0f       	add	r19, r24
    12f6:	3a 30       	cpi	r19, 0x0A	; 10
    12f8:	78 f4       	brcc	.+30     	; 0x1318 <vfprintf+0xb2>
    12fa:	26 ff       	sbrs	r18, 6
    12fc:	06 c0       	rjmp	.+12     	; 0x130a <vfprintf+0xa4>
    12fe:	fa e0       	ldi	r31, 0x0A	; 10
    1300:	5f 9e       	mul	r5, r31
    1302:	30 0d       	add	r19, r0
    1304:	11 24       	eor	r1, r1
    1306:	53 2e       	mov	r5, r19
    1308:	13 c0       	rjmp	.+38     	; 0x1330 <vfprintf+0xca>
    130a:	8a e0       	ldi	r24, 0x0A	; 10
    130c:	38 9e       	mul	r3, r24
    130e:	30 0d       	add	r19, r0
    1310:	11 24       	eor	r1, r1
    1312:	33 2e       	mov	r3, r19
    1314:	20 62       	ori	r18, 0x20	; 32
    1316:	0c c0       	rjmp	.+24     	; 0x1330 <vfprintf+0xca>
    1318:	8e 32       	cpi	r24, 0x2E	; 46
    131a:	21 f4       	brne	.+8      	; 0x1324 <vfprintf+0xbe>
    131c:	26 fd       	sbrc	r18, 6
    131e:	6b c1       	rjmp	.+726    	; 0x15f6 <vfprintf+0x390>
    1320:	20 64       	ori	r18, 0x40	; 64
    1322:	06 c0       	rjmp	.+12     	; 0x1330 <vfprintf+0xca>
    1324:	8c 36       	cpi	r24, 0x6C	; 108
    1326:	11 f4       	brne	.+4      	; 0x132c <vfprintf+0xc6>
    1328:	20 68       	ori	r18, 0x80	; 128
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <vfprintf+0xca>
    132c:	88 36       	cpi	r24, 0x68	; 104
    132e:	41 f4       	brne	.+16     	; 0x1340 <vfprintf+0xda>
    1330:	f6 01       	movw	r30, r12
    1332:	93 fd       	sbrc	r25, 3
    1334:	85 91       	lpm	r24, Z+
    1336:	93 ff       	sbrs	r25, 3
    1338:	81 91       	ld	r24, Z+
    133a:	6f 01       	movw	r12, r30
    133c:	81 11       	cpse	r24, r1
    133e:	c1 cf       	rjmp	.-126    	; 0x12c2 <vfprintf+0x5c>
    1340:	98 2f       	mov	r25, r24
    1342:	9f 7d       	andi	r25, 0xDF	; 223
    1344:	95 54       	subi	r25, 0x45	; 69
    1346:	93 30       	cpi	r25, 0x03	; 3
    1348:	28 f4       	brcc	.+10     	; 0x1354 <vfprintf+0xee>
    134a:	0c 5f       	subi	r16, 0xFC	; 252
    134c:	1f 4f       	sbci	r17, 0xFF	; 255
    134e:	ff e3       	ldi	r31, 0x3F	; 63
    1350:	f9 83       	std	Y+1, r31	; 0x01
    1352:	0d c0       	rjmp	.+26     	; 0x136e <vfprintf+0x108>
    1354:	83 36       	cpi	r24, 0x63	; 99
    1356:	31 f0       	breq	.+12     	; 0x1364 <vfprintf+0xfe>
    1358:	83 37       	cpi	r24, 0x73	; 115
    135a:	71 f0       	breq	.+28     	; 0x1378 <vfprintf+0x112>
    135c:	83 35       	cpi	r24, 0x53	; 83
    135e:	09 f0       	breq	.+2      	; 0x1362 <vfprintf+0xfc>
    1360:	5b c0       	rjmp	.+182    	; 0x1418 <vfprintf+0x1b2>
    1362:	22 c0       	rjmp	.+68     	; 0x13a8 <vfprintf+0x142>
    1364:	f8 01       	movw	r30, r16
    1366:	80 81       	ld	r24, Z
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	0e 5f       	subi	r16, 0xFE	; 254
    136c:	1f 4f       	sbci	r17, 0xFF	; 255
    136e:	44 24       	eor	r4, r4
    1370:	43 94       	inc	r4
    1372:	51 2c       	mov	r5, r1
    1374:	54 01       	movw	r10, r8
    1376:	15 c0       	rjmp	.+42     	; 0x13a2 <vfprintf+0x13c>
    1378:	38 01       	movw	r6, r16
    137a:	f2 e0       	ldi	r31, 0x02	; 2
    137c:	6f 0e       	add	r6, r31
    137e:	71 1c       	adc	r7, r1
    1380:	f8 01       	movw	r30, r16
    1382:	a0 80       	ld	r10, Z
    1384:	b1 80       	ldd	r11, Z+1	; 0x01
    1386:	26 ff       	sbrs	r18, 6
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <vfprintf+0x12a>
    138a:	65 2d       	mov	r22, r5
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <vfprintf+0x12e>
    1390:	6f ef       	ldi	r22, 0xFF	; 255
    1392:	7f ef       	ldi	r23, 0xFF	; 255
    1394:	c5 01       	movw	r24, r10
    1396:	2c 87       	std	Y+12, r18	; 0x0c
    1398:	0e 94 33 0b 	call	0x1666	; 0x1666 <strnlen>
    139c:	2c 01       	movw	r4, r24
    139e:	83 01       	movw	r16, r6
    13a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    13a2:	2f 77       	andi	r18, 0x7F	; 127
    13a4:	22 2e       	mov	r2, r18
    13a6:	17 c0       	rjmp	.+46     	; 0x13d6 <vfprintf+0x170>
    13a8:	38 01       	movw	r6, r16
    13aa:	f2 e0       	ldi	r31, 0x02	; 2
    13ac:	6f 0e       	add	r6, r31
    13ae:	71 1c       	adc	r7, r1
    13b0:	f8 01       	movw	r30, r16
    13b2:	a0 80       	ld	r10, Z
    13b4:	b1 80       	ldd	r11, Z+1	; 0x01
    13b6:	26 ff       	sbrs	r18, 6
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <vfprintf+0x15a>
    13ba:	65 2d       	mov	r22, r5
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <vfprintf+0x15e>
    13c0:	6f ef       	ldi	r22, 0xFF	; 255
    13c2:	7f ef       	ldi	r23, 0xFF	; 255
    13c4:	c5 01       	movw	r24, r10
    13c6:	2c 87       	std	Y+12, r18	; 0x0c
    13c8:	0e 94 21 0b 	call	0x1642	; 0x1642 <strnlen_P>
    13cc:	2c 01       	movw	r4, r24
    13ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    13d0:	20 68       	ori	r18, 0x80	; 128
    13d2:	22 2e       	mov	r2, r18
    13d4:	83 01       	movw	r16, r6
    13d6:	23 fc       	sbrc	r2, 3
    13d8:	1b c0       	rjmp	.+54     	; 0x1410 <vfprintf+0x1aa>
    13da:	83 2d       	mov	r24, r3
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	48 16       	cp	r4, r24
    13e0:	59 06       	cpc	r5, r25
    13e2:	b0 f4       	brcc	.+44     	; 0x1410 <vfprintf+0x1aa>
    13e4:	b7 01       	movw	r22, r14
    13e6:	80 e2       	ldi	r24, 0x20	; 32
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    13ee:	3a 94       	dec	r3
    13f0:	f4 cf       	rjmp	.-24     	; 0x13da <vfprintf+0x174>
    13f2:	f5 01       	movw	r30, r10
    13f4:	27 fc       	sbrc	r2, 7
    13f6:	85 91       	lpm	r24, Z+
    13f8:	27 fe       	sbrs	r2, 7
    13fa:	81 91       	ld	r24, Z+
    13fc:	5f 01       	movw	r10, r30
    13fe:	b7 01       	movw	r22, r14
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    1406:	31 10       	cpse	r3, r1
    1408:	3a 94       	dec	r3
    140a:	f1 e0       	ldi	r31, 0x01	; 1
    140c:	4f 1a       	sub	r4, r31
    140e:	51 08       	sbc	r5, r1
    1410:	41 14       	cp	r4, r1
    1412:	51 04       	cpc	r5, r1
    1414:	71 f7       	brne	.-36     	; 0x13f2 <vfprintf+0x18c>
    1416:	e5 c0       	rjmp	.+458    	; 0x15e2 <vfprintf+0x37c>
    1418:	84 36       	cpi	r24, 0x64	; 100
    141a:	11 f0       	breq	.+4      	; 0x1420 <vfprintf+0x1ba>
    141c:	89 36       	cpi	r24, 0x69	; 105
    141e:	39 f5       	brne	.+78     	; 0x146e <vfprintf+0x208>
    1420:	f8 01       	movw	r30, r16
    1422:	27 ff       	sbrs	r18, 7
    1424:	07 c0       	rjmp	.+14     	; 0x1434 <vfprintf+0x1ce>
    1426:	60 81       	ld	r22, Z
    1428:	71 81       	ldd	r23, Z+1	; 0x01
    142a:	82 81       	ldd	r24, Z+2	; 0x02
    142c:	93 81       	ldd	r25, Z+3	; 0x03
    142e:	0c 5f       	subi	r16, 0xFC	; 252
    1430:	1f 4f       	sbci	r17, 0xFF	; 255
    1432:	08 c0       	rjmp	.+16     	; 0x1444 <vfprintf+0x1de>
    1434:	60 81       	ld	r22, Z
    1436:	71 81       	ldd	r23, Z+1	; 0x01
    1438:	88 27       	eor	r24, r24
    143a:	77 fd       	sbrc	r23, 7
    143c:	80 95       	com	r24
    143e:	98 2f       	mov	r25, r24
    1440:	0e 5f       	subi	r16, 0xFE	; 254
    1442:	1f 4f       	sbci	r17, 0xFF	; 255
    1444:	2f 76       	andi	r18, 0x6F	; 111
    1446:	b2 2e       	mov	r11, r18
    1448:	97 ff       	sbrs	r25, 7
    144a:	09 c0       	rjmp	.+18     	; 0x145e <vfprintf+0x1f8>
    144c:	90 95       	com	r25
    144e:	80 95       	com	r24
    1450:	70 95       	com	r23
    1452:	61 95       	neg	r22
    1454:	7f 4f       	sbci	r23, 0xFF	; 255
    1456:	8f 4f       	sbci	r24, 0xFF	; 255
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	20 68       	ori	r18, 0x80	; 128
    145c:	b2 2e       	mov	r11, r18
    145e:	2a e0       	ldi	r18, 0x0A	; 10
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	a4 01       	movw	r20, r8
    1464:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__ultoa_invert>
    1468:	a8 2e       	mov	r10, r24
    146a:	a8 18       	sub	r10, r8
    146c:	44 c0       	rjmp	.+136    	; 0x14f6 <vfprintf+0x290>
    146e:	85 37       	cpi	r24, 0x75	; 117
    1470:	29 f4       	brne	.+10     	; 0x147c <vfprintf+0x216>
    1472:	2f 7e       	andi	r18, 0xEF	; 239
    1474:	b2 2e       	mov	r11, r18
    1476:	2a e0       	ldi	r18, 0x0A	; 10
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	25 c0       	rjmp	.+74     	; 0x14c6 <vfprintf+0x260>
    147c:	f2 2f       	mov	r31, r18
    147e:	f9 7f       	andi	r31, 0xF9	; 249
    1480:	bf 2e       	mov	r11, r31
    1482:	8f 36       	cpi	r24, 0x6F	; 111
    1484:	c1 f0       	breq	.+48     	; 0x14b6 <vfprintf+0x250>
    1486:	18 f4       	brcc	.+6      	; 0x148e <vfprintf+0x228>
    1488:	88 35       	cpi	r24, 0x58	; 88
    148a:	79 f0       	breq	.+30     	; 0x14aa <vfprintf+0x244>
    148c:	b4 c0       	rjmp	.+360    	; 0x15f6 <vfprintf+0x390>
    148e:	80 37       	cpi	r24, 0x70	; 112
    1490:	19 f0       	breq	.+6      	; 0x1498 <vfprintf+0x232>
    1492:	88 37       	cpi	r24, 0x78	; 120
    1494:	21 f0       	breq	.+8      	; 0x149e <vfprintf+0x238>
    1496:	af c0       	rjmp	.+350    	; 0x15f6 <vfprintf+0x390>
    1498:	2f 2f       	mov	r18, r31
    149a:	20 61       	ori	r18, 0x10	; 16
    149c:	b2 2e       	mov	r11, r18
    149e:	b4 fe       	sbrs	r11, 4
    14a0:	0d c0       	rjmp	.+26     	; 0x14bc <vfprintf+0x256>
    14a2:	8b 2d       	mov	r24, r11
    14a4:	84 60       	ori	r24, 0x04	; 4
    14a6:	b8 2e       	mov	r11, r24
    14a8:	09 c0       	rjmp	.+18     	; 0x14bc <vfprintf+0x256>
    14aa:	24 ff       	sbrs	r18, 4
    14ac:	0a c0       	rjmp	.+20     	; 0x14c2 <vfprintf+0x25c>
    14ae:	9f 2f       	mov	r25, r31
    14b0:	96 60       	ori	r25, 0x06	; 6
    14b2:	b9 2e       	mov	r11, r25
    14b4:	06 c0       	rjmp	.+12     	; 0x14c2 <vfprintf+0x25c>
    14b6:	28 e0       	ldi	r18, 0x08	; 8
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <vfprintf+0x260>
    14bc:	20 e1       	ldi	r18, 0x10	; 16
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <vfprintf+0x260>
    14c2:	20 e1       	ldi	r18, 0x10	; 16
    14c4:	32 e0       	ldi	r19, 0x02	; 2
    14c6:	f8 01       	movw	r30, r16
    14c8:	b7 fe       	sbrs	r11, 7
    14ca:	07 c0       	rjmp	.+14     	; 0x14da <vfprintf+0x274>
    14cc:	60 81       	ld	r22, Z
    14ce:	71 81       	ldd	r23, Z+1	; 0x01
    14d0:	82 81       	ldd	r24, Z+2	; 0x02
    14d2:	93 81       	ldd	r25, Z+3	; 0x03
    14d4:	0c 5f       	subi	r16, 0xFC	; 252
    14d6:	1f 4f       	sbci	r17, 0xFF	; 255
    14d8:	06 c0       	rjmp	.+12     	; 0x14e6 <vfprintf+0x280>
    14da:	60 81       	ld	r22, Z
    14dc:	71 81       	ldd	r23, Z+1	; 0x01
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 5f       	subi	r16, 0xFE	; 254
    14e4:	1f 4f       	sbci	r17, 0xFF	; 255
    14e6:	a4 01       	movw	r20, r8
    14e8:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <__ultoa_invert>
    14ec:	a8 2e       	mov	r10, r24
    14ee:	a8 18       	sub	r10, r8
    14f0:	fb 2d       	mov	r31, r11
    14f2:	ff 77       	andi	r31, 0x7F	; 127
    14f4:	bf 2e       	mov	r11, r31
    14f6:	b6 fe       	sbrs	r11, 6
    14f8:	0b c0       	rjmp	.+22     	; 0x1510 <vfprintf+0x2aa>
    14fa:	2b 2d       	mov	r18, r11
    14fc:	2e 7f       	andi	r18, 0xFE	; 254
    14fe:	a5 14       	cp	r10, r5
    1500:	50 f4       	brcc	.+20     	; 0x1516 <vfprintf+0x2b0>
    1502:	b4 fe       	sbrs	r11, 4
    1504:	0a c0       	rjmp	.+20     	; 0x151a <vfprintf+0x2b4>
    1506:	b2 fc       	sbrc	r11, 2
    1508:	08 c0       	rjmp	.+16     	; 0x151a <vfprintf+0x2b4>
    150a:	2b 2d       	mov	r18, r11
    150c:	2e 7e       	andi	r18, 0xEE	; 238
    150e:	05 c0       	rjmp	.+10     	; 0x151a <vfprintf+0x2b4>
    1510:	7a 2c       	mov	r7, r10
    1512:	2b 2d       	mov	r18, r11
    1514:	03 c0       	rjmp	.+6      	; 0x151c <vfprintf+0x2b6>
    1516:	7a 2c       	mov	r7, r10
    1518:	01 c0       	rjmp	.+2      	; 0x151c <vfprintf+0x2b6>
    151a:	75 2c       	mov	r7, r5
    151c:	24 ff       	sbrs	r18, 4
    151e:	0d c0       	rjmp	.+26     	; 0x153a <vfprintf+0x2d4>
    1520:	fe 01       	movw	r30, r28
    1522:	ea 0d       	add	r30, r10
    1524:	f1 1d       	adc	r31, r1
    1526:	80 81       	ld	r24, Z
    1528:	80 33       	cpi	r24, 0x30	; 48
    152a:	11 f4       	brne	.+4      	; 0x1530 <vfprintf+0x2ca>
    152c:	29 7e       	andi	r18, 0xE9	; 233
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <vfprintf+0x2dc>
    1530:	22 ff       	sbrs	r18, 2
    1532:	06 c0       	rjmp	.+12     	; 0x1540 <vfprintf+0x2da>
    1534:	73 94       	inc	r7
    1536:	73 94       	inc	r7
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <vfprintf+0x2dc>
    153a:	82 2f       	mov	r24, r18
    153c:	86 78       	andi	r24, 0x86	; 134
    153e:	09 f0       	breq	.+2      	; 0x1542 <vfprintf+0x2dc>
    1540:	73 94       	inc	r7
    1542:	23 fd       	sbrc	r18, 3
    1544:	13 c0       	rjmp	.+38     	; 0x156c <vfprintf+0x306>
    1546:	20 ff       	sbrs	r18, 0
    1548:	06 c0       	rjmp	.+12     	; 0x1556 <vfprintf+0x2f0>
    154a:	5a 2c       	mov	r5, r10
    154c:	73 14       	cp	r7, r3
    154e:	18 f4       	brcc	.+6      	; 0x1556 <vfprintf+0x2f0>
    1550:	53 0c       	add	r5, r3
    1552:	57 18       	sub	r5, r7
    1554:	73 2c       	mov	r7, r3
    1556:	73 14       	cp	r7, r3
    1558:	68 f4       	brcc	.+26     	; 0x1574 <vfprintf+0x30e>
    155a:	b7 01       	movw	r22, r14
    155c:	80 e2       	ldi	r24, 0x20	; 32
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	2c 87       	std	Y+12, r18	; 0x0c
    1562:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    1566:	73 94       	inc	r7
    1568:	2c 85       	ldd	r18, Y+12	; 0x0c
    156a:	f5 cf       	rjmp	.-22     	; 0x1556 <vfprintf+0x2f0>
    156c:	73 14       	cp	r7, r3
    156e:	10 f4       	brcc	.+4      	; 0x1574 <vfprintf+0x30e>
    1570:	37 18       	sub	r3, r7
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <vfprintf+0x310>
    1574:	31 2c       	mov	r3, r1
    1576:	24 ff       	sbrs	r18, 4
    1578:	12 c0       	rjmp	.+36     	; 0x159e <vfprintf+0x338>
    157a:	b7 01       	movw	r22, r14
    157c:	80 e3       	ldi	r24, 0x30	; 48
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	2c 87       	std	Y+12, r18	; 0x0c
    1582:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    1586:	2c 85       	ldd	r18, Y+12	; 0x0c
    1588:	22 ff       	sbrs	r18, 2
    158a:	17 c0       	rjmp	.+46     	; 0x15ba <vfprintf+0x354>
    158c:	21 ff       	sbrs	r18, 1
    158e:	03 c0       	rjmp	.+6      	; 0x1596 <vfprintf+0x330>
    1590:	88 e5       	ldi	r24, 0x58	; 88
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 c0       	rjmp	.+4      	; 0x159a <vfprintf+0x334>
    1596:	88 e7       	ldi	r24, 0x78	; 120
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	b7 01       	movw	r22, r14
    159c:	0c c0       	rjmp	.+24     	; 0x15b6 <vfprintf+0x350>
    159e:	82 2f       	mov	r24, r18
    15a0:	86 78       	andi	r24, 0x86	; 134
    15a2:	59 f0       	breq	.+22     	; 0x15ba <vfprintf+0x354>
    15a4:	21 fd       	sbrc	r18, 1
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <vfprintf+0x346>
    15a8:	80 e2       	ldi	r24, 0x20	; 32
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <vfprintf+0x348>
    15ac:	8b e2       	ldi	r24, 0x2B	; 43
    15ae:	27 fd       	sbrc	r18, 7
    15b0:	8d e2       	ldi	r24, 0x2D	; 45
    15b2:	b7 01       	movw	r22, r14
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    15ba:	a5 14       	cp	r10, r5
    15bc:	38 f4       	brcc	.+14     	; 0x15cc <vfprintf+0x366>
    15be:	b7 01       	movw	r22, r14
    15c0:	80 e3       	ldi	r24, 0x30	; 48
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    15c8:	5a 94       	dec	r5
    15ca:	f7 cf       	rjmp	.-18     	; 0x15ba <vfprintf+0x354>
    15cc:	aa 94       	dec	r10
    15ce:	f4 01       	movw	r30, r8
    15d0:	ea 0d       	add	r30, r10
    15d2:	f1 1d       	adc	r31, r1
    15d4:	80 81       	ld	r24, Z
    15d6:	b7 01       	movw	r22, r14
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    15de:	a1 10       	cpse	r10, r1
    15e0:	f5 cf       	rjmp	.-22     	; 0x15cc <vfprintf+0x366>
    15e2:	33 20       	and	r3, r3
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <vfprintf+0x382>
    15e6:	51 ce       	rjmp	.-862    	; 0x128a <vfprintf+0x24>
    15e8:	b7 01       	movw	r22, r14
    15ea:	80 e2       	ldi	r24, 0x20	; 32
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 3e 0b 	call	0x167c	; 0x167c <fputc>
    15f2:	3a 94       	dec	r3
    15f4:	f6 cf       	rjmp	.-20     	; 0x15e2 <vfprintf+0x37c>
    15f6:	f7 01       	movw	r30, r14
    15f8:	86 81       	ldd	r24, Z+6	; 0x06
    15fa:	97 81       	ldd	r25, Z+7	; 0x07
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <vfprintf+0x39c>
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	9f ef       	ldi	r25, 0xFF	; 255
    1602:	2c 96       	adiw	r28, 0x0c	; 12
    1604:	e2 e1       	ldi	r30, 0x12	; 18
    1606:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__epilogue_restores__>

0000160a <calloc>:
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	86 9f       	mul	r24, r22
    1614:	80 01       	movw	r16, r0
    1616:	87 9f       	mul	r24, r23
    1618:	10 0d       	add	r17, r0
    161a:	96 9f       	mul	r25, r22
    161c:	10 0d       	add	r17, r0
    161e:	11 24       	eor	r1, r1
    1620:	c8 01       	movw	r24, r16
    1622:	0e 94 6e 07 	call	0xedc	; 0xedc <malloc>
    1626:	ec 01       	movw	r28, r24
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	29 f0       	breq	.+10     	; 0x1636 <calloc+0x2c>
    162c:	a8 01       	movw	r20, r16
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	0e 94 2c 0b 	call	0x1658	; 0x1658 <memset>
    1636:	ce 01       	movw	r24, r28
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	1f 91       	pop	r17
    163e:	0f 91       	pop	r16
    1640:	08 95       	ret

00001642 <strnlen_P>:
    1642:	fc 01       	movw	r30, r24
    1644:	05 90       	lpm	r0, Z+
    1646:	61 50       	subi	r22, 0x01	; 1
    1648:	70 40       	sbci	r23, 0x00	; 0
    164a:	01 10       	cpse	r0, r1
    164c:	d8 f7       	brcc	.-10     	; 0x1644 <strnlen_P+0x2>
    164e:	80 95       	com	r24
    1650:	90 95       	com	r25
    1652:	8e 0f       	add	r24, r30
    1654:	9f 1f       	adc	r25, r31
    1656:	08 95       	ret

00001658 <memset>:
    1658:	dc 01       	movw	r26, r24
    165a:	01 c0       	rjmp	.+2      	; 0x165e <memset+0x6>
    165c:	6d 93       	st	X+, r22
    165e:	41 50       	subi	r20, 0x01	; 1
    1660:	50 40       	sbci	r21, 0x00	; 0
    1662:	e0 f7       	brcc	.-8      	; 0x165c <memset+0x4>
    1664:	08 95       	ret

00001666 <strnlen>:
    1666:	fc 01       	movw	r30, r24
    1668:	61 50       	subi	r22, 0x01	; 1
    166a:	70 40       	sbci	r23, 0x00	; 0
    166c:	01 90       	ld	r0, Z+
    166e:	01 10       	cpse	r0, r1
    1670:	d8 f7       	brcc	.-10     	; 0x1668 <strnlen+0x2>
    1672:	80 95       	com	r24
    1674:	90 95       	com	r25
    1676:	8e 0f       	add	r24, r30
    1678:	9f 1f       	adc	r25, r31
    167a:	08 95       	ret

0000167c <fputc>:
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	18 2f       	mov	r17, r24
    1686:	09 2f       	mov	r16, r25
    1688:	eb 01       	movw	r28, r22
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	81 fd       	sbrc	r24, 1
    168e:	03 c0       	rjmp	.+6      	; 0x1696 <fputc+0x1a>
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	9f ef       	ldi	r25, 0xFF	; 255
    1694:	20 c0       	rjmp	.+64     	; 0x16d6 <fputc+0x5a>
    1696:	82 ff       	sbrs	r24, 2
    1698:	10 c0       	rjmp	.+32     	; 0x16ba <fputc+0x3e>
    169a:	4e 81       	ldd	r20, Y+6	; 0x06
    169c:	5f 81       	ldd	r21, Y+7	; 0x07
    169e:	2c 81       	ldd	r18, Y+4	; 0x04
    16a0:	3d 81       	ldd	r19, Y+5	; 0x05
    16a2:	42 17       	cp	r20, r18
    16a4:	53 07       	cpc	r21, r19
    16a6:	7c f4       	brge	.+30     	; 0x16c6 <fputc+0x4a>
    16a8:	e8 81       	ld	r30, Y
    16aa:	f9 81       	ldd	r31, Y+1	; 0x01
    16ac:	9f 01       	movw	r18, r30
    16ae:	2f 5f       	subi	r18, 0xFF	; 255
    16b0:	3f 4f       	sbci	r19, 0xFF	; 255
    16b2:	39 83       	std	Y+1, r19	; 0x01
    16b4:	28 83       	st	Y, r18
    16b6:	10 83       	st	Z, r17
    16b8:	06 c0       	rjmp	.+12     	; 0x16c6 <fputc+0x4a>
    16ba:	e8 85       	ldd	r30, Y+8	; 0x08
    16bc:	f9 85       	ldd	r31, Y+9	; 0x09
    16be:	81 2f       	mov	r24, r17
    16c0:	09 95       	icall
    16c2:	89 2b       	or	r24, r25
    16c4:	29 f7       	brne	.-54     	; 0x1690 <fputc+0x14>
    16c6:	2e 81       	ldd	r18, Y+6	; 0x06
    16c8:	3f 81       	ldd	r19, Y+7	; 0x07
    16ca:	2f 5f       	subi	r18, 0xFF	; 255
    16cc:	3f 4f       	sbci	r19, 0xFF	; 255
    16ce:	3f 83       	std	Y+7, r19	; 0x07
    16d0:	2e 83       	std	Y+6, r18	; 0x06
    16d2:	81 2f       	mov	r24, r17
    16d4:	90 2f       	mov	r25, r16
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	08 95       	ret

000016e0 <__ultoa_invert>:
    16e0:	fa 01       	movw	r30, r20
    16e2:	aa 27       	eor	r26, r26
    16e4:	28 30       	cpi	r18, 0x08	; 8
    16e6:	51 f1       	breq	.+84     	; 0x173c <__ultoa_invert+0x5c>
    16e8:	20 31       	cpi	r18, 0x10	; 16
    16ea:	81 f1       	breq	.+96     	; 0x174c <__ultoa_invert+0x6c>
    16ec:	e8 94       	clt
    16ee:	6f 93       	push	r22
    16f0:	6e 7f       	andi	r22, 0xFE	; 254
    16f2:	6e 5f       	subi	r22, 0xFE	; 254
    16f4:	7f 4f       	sbci	r23, 0xFF	; 255
    16f6:	8f 4f       	sbci	r24, 0xFF	; 255
    16f8:	9f 4f       	sbci	r25, 0xFF	; 255
    16fa:	af 4f       	sbci	r26, 0xFF	; 255
    16fc:	b1 e0       	ldi	r27, 0x01	; 1
    16fe:	3e d0       	rcall	.+124    	; 0x177c <__ultoa_invert+0x9c>
    1700:	b4 e0       	ldi	r27, 0x04	; 4
    1702:	3c d0       	rcall	.+120    	; 0x177c <__ultoa_invert+0x9c>
    1704:	67 0f       	add	r22, r23
    1706:	78 1f       	adc	r23, r24
    1708:	89 1f       	adc	r24, r25
    170a:	9a 1f       	adc	r25, r26
    170c:	a1 1d       	adc	r26, r1
    170e:	68 0f       	add	r22, r24
    1710:	79 1f       	adc	r23, r25
    1712:	8a 1f       	adc	r24, r26
    1714:	91 1d       	adc	r25, r1
    1716:	a1 1d       	adc	r26, r1
    1718:	6a 0f       	add	r22, r26
    171a:	71 1d       	adc	r23, r1
    171c:	81 1d       	adc	r24, r1
    171e:	91 1d       	adc	r25, r1
    1720:	a1 1d       	adc	r26, r1
    1722:	20 d0       	rcall	.+64     	; 0x1764 <__ultoa_invert+0x84>
    1724:	09 f4       	brne	.+2      	; 0x1728 <__ultoa_invert+0x48>
    1726:	68 94       	set
    1728:	3f 91       	pop	r19
    172a:	2a e0       	ldi	r18, 0x0A	; 10
    172c:	26 9f       	mul	r18, r22
    172e:	11 24       	eor	r1, r1
    1730:	30 19       	sub	r19, r0
    1732:	30 5d       	subi	r19, 0xD0	; 208
    1734:	31 93       	st	Z+, r19
    1736:	de f6       	brtc	.-74     	; 0x16ee <__ultoa_invert+0xe>
    1738:	cf 01       	movw	r24, r30
    173a:	08 95       	ret
    173c:	46 2f       	mov	r20, r22
    173e:	47 70       	andi	r20, 0x07	; 7
    1740:	40 5d       	subi	r20, 0xD0	; 208
    1742:	41 93       	st	Z+, r20
    1744:	b3 e0       	ldi	r27, 0x03	; 3
    1746:	0f d0       	rcall	.+30     	; 0x1766 <__ultoa_invert+0x86>
    1748:	c9 f7       	brne	.-14     	; 0x173c <__ultoa_invert+0x5c>
    174a:	f6 cf       	rjmp	.-20     	; 0x1738 <__ultoa_invert+0x58>
    174c:	46 2f       	mov	r20, r22
    174e:	4f 70       	andi	r20, 0x0F	; 15
    1750:	40 5d       	subi	r20, 0xD0	; 208
    1752:	4a 33       	cpi	r20, 0x3A	; 58
    1754:	18 f0       	brcs	.+6      	; 0x175c <__ultoa_invert+0x7c>
    1756:	49 5d       	subi	r20, 0xD9	; 217
    1758:	31 fd       	sbrc	r19, 1
    175a:	40 52       	subi	r20, 0x20	; 32
    175c:	41 93       	st	Z+, r20
    175e:	02 d0       	rcall	.+4      	; 0x1764 <__ultoa_invert+0x84>
    1760:	a9 f7       	brne	.-22     	; 0x174c <__ultoa_invert+0x6c>
    1762:	ea cf       	rjmp	.-44     	; 0x1738 <__ultoa_invert+0x58>
    1764:	b4 e0       	ldi	r27, 0x04	; 4
    1766:	a6 95       	lsr	r26
    1768:	97 95       	ror	r25
    176a:	87 95       	ror	r24
    176c:	77 95       	ror	r23
    176e:	67 95       	ror	r22
    1770:	ba 95       	dec	r27
    1772:	c9 f7       	brne	.-14     	; 0x1766 <__ultoa_invert+0x86>
    1774:	00 97       	sbiw	r24, 0x00	; 0
    1776:	61 05       	cpc	r22, r1
    1778:	71 05       	cpc	r23, r1
    177a:	08 95       	ret
    177c:	9b 01       	movw	r18, r22
    177e:	ac 01       	movw	r20, r24
    1780:	0a 2e       	mov	r0, r26
    1782:	06 94       	lsr	r0
    1784:	57 95       	ror	r21
    1786:	47 95       	ror	r20
    1788:	37 95       	ror	r19
    178a:	27 95       	ror	r18
    178c:	ba 95       	dec	r27
    178e:	c9 f7       	brne	.-14     	; 0x1782 <__ultoa_invert+0xa2>
    1790:	62 0f       	add	r22, r18
    1792:	73 1f       	adc	r23, r19
    1794:	84 1f       	adc	r24, r20
    1796:	95 1f       	adc	r25, r21
    1798:	a0 1d       	adc	r26, r0
    179a:	08 95       	ret

0000179c <__prologue_saves__>:
    179c:	2f 92       	push	r2
    179e:	3f 92       	push	r3
    17a0:	4f 92       	push	r4
    17a2:	5f 92       	push	r5
    17a4:	6f 92       	push	r6
    17a6:	7f 92       	push	r7
    17a8:	8f 92       	push	r8
    17aa:	9f 92       	push	r9
    17ac:	af 92       	push	r10
    17ae:	bf 92       	push	r11
    17b0:	cf 92       	push	r12
    17b2:	df 92       	push	r13
    17b4:	ef 92       	push	r14
    17b6:	ff 92       	push	r15
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	ca 1b       	sub	r28, r26
    17c6:	db 0b       	sbc	r29, r27
    17c8:	0f b6       	in	r0, 0x3f	; 63
    17ca:	f8 94       	cli
    17cc:	de bf       	out	0x3e, r29	; 62
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	cd bf       	out	0x3d, r28	; 61
    17d2:	09 94       	ijmp

000017d4 <__epilogue_restores__>:
    17d4:	2a 88       	ldd	r2, Y+18	; 0x12
    17d6:	39 88       	ldd	r3, Y+17	; 0x11
    17d8:	48 88       	ldd	r4, Y+16	; 0x10
    17da:	5f 84       	ldd	r5, Y+15	; 0x0f
    17dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    17de:	7d 84       	ldd	r7, Y+13	; 0x0d
    17e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    17e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    17e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    17e6:	b9 84       	ldd	r11, Y+9	; 0x09
    17e8:	c8 84       	ldd	r12, Y+8	; 0x08
    17ea:	df 80       	ldd	r13, Y+7	; 0x07
    17ec:	ee 80       	ldd	r14, Y+6	; 0x06
    17ee:	fd 80       	ldd	r15, Y+5	; 0x05
    17f0:	0c 81       	ldd	r16, Y+4	; 0x04
    17f2:	1b 81       	ldd	r17, Y+3	; 0x03
    17f4:	aa 81       	ldd	r26, Y+2	; 0x02
    17f6:	b9 81       	ldd	r27, Y+1	; 0x01
    17f8:	ce 0f       	add	r28, r30
    17fa:	d1 1d       	adc	r29, r1
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	ed 01       	movw	r28, r26
    1808:	08 95       	ret

0000180a <_exit>:
    180a:	f8 94       	cli

0000180c <__stop_program>:
    180c:	ff cf       	rjmp	.-2      	; 0x180c <__stop_program>
