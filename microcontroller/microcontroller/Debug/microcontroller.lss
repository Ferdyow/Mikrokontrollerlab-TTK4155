
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001de  00800100  000014e6  0000157a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008002de  008002de  00001758  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000298  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b1b  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010dc  00000000  00000000  00004567  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e1a  00000000  00000000  00005643  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000620  00000000  00000000  00006460  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007fb  00000000  00000000  00006a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013a4  00000000  00000000  0000727b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000208  00000000  00000000  0000861f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <usart_receive_from_computer>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 ee       	ldi	r30, 0xE6	; 230
     37c:	f4 e1       	ldi	r31, 0x14	; 20
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 3d       	cpi	r26, 0xDE	; 222
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	ae ed       	ldi	r26, 0xDE	; 222
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 3f       	cpi	r26, 0xF4	; 244
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 27 03 	call	0x64e	; 0x64e <main>
     39e:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
     3a6:	30 98       	cbi	0x06, 0	; 6
     3a8:	08 95       	ret

000003aa <ADC_read>:
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3aa:	84 30       	cpi	r24, 0x04	; 4
     3ac:	40 f4       	brcc	.+16     	; 0x3be <ADC_read+0x14>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
     3ae:	8c 5f       	subi	r24, 0xFC	; 252
     3b0:	80 93 00 14 	sts	0x1400, r24
	
	//wait 'til /INTR is low
	while(test_bit(PINE, PINE0));
     3b4:	28 99       	sbic	0x05, 0	; 5
     3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <ADC_read+0xa>
	//reset interrupt
	inter = 0;
	*/

	//return current value
	return *adc; 
     3b8:	80 91 00 14 	lds	r24, 0x1400
     3bc:	08 95       	ret
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3be:	80 e0       	ldi	r24, 0x00	; 0
	inter = 0;
	*/

	//return current value
	return *adc; 
     3c0:	08 95       	ret

000003c2 <JOY_calibrate>:
	clear_bit(DDRB,PB2);
	clear_bit(SFIOR, PUD);
	JOY_calibrate();
}

void JOY_calibrate(){
     3c2:	bf 92       	push	r11
     3c4:	cf 92       	push	r12
     3c6:	df 92       	push	r13
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
	max.x = 0;
     3d4:	10 92 de 02 	sts	0x02DE, r1
	max.y = 0;
     3d8:	10 92 df 02 	sts	0x02DF, r1
	min.x = 255;
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	80 93 e2 02 	sts	0x02E2, r24
	min.y = 255;
     3e2:	80 93 e3 02 	sts	0x02E3, r24
	uint8_t x;
	uint8_t y;
	OLED_reset();
     3e6:	0e 94 94 03 	call	0x728	; 0x728 <OLED_reset>
	printf("\nMove the joystick to all extreme points.\n");
     3ea:	8f e2       	ldi	r24, 0x2F	; 47
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	0e 94 72 07 	call	0xee4	; 0xee4 <puts>
	printf("Press the joystick when you're done.\n");
     3f2:	89 e5       	ldi	r24, 0x59	; 89
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	0e 94 72 07 	call	0xee4	; 0xee4 <puts>
		// Read sensor values
		x = ADC_read(0);
		y = ADC_read(1);
		
		// Calibrate x
		if (min.x > x) min.x = x; 
     3fa:	02 ee       	ldi	r16, 0xE2	; 226
     3fc:	12 e0       	ldi	r17, 0x02	; 2
		else if (max.x < x) max.x = x;
     3fe:	0f 2e       	mov	r0, r31
     400:	fe ed       	ldi	r31, 0xDE	; 222
     402:	cf 2e       	mov	r12, r31
     404:	f2 e0       	ldi	r31, 0x02	; 2
     406:	df 2e       	mov	r13, r31
     408:	f0 2d       	mov	r31, r0
		
		// Calibrate y
		if (min.y > y) min.y = y;
     40a:	c3 ee       	ldi	r28, 0xE3	; 227
     40c:	d2 e0       	ldi	r29, 0x02	; 2
		else if (max.y < y) max.y = y;		
     40e:	0f 2e       	mov	r0, r31
     410:	ff ed       	ldi	r31, 0xDF	; 223
     412:	ef 2e       	mov	r14, r31
     414:	f2 e0       	ldi	r31, 0x02	; 2
     416:	ff 2e       	mov	r15, r31
     418:	f0 2d       	mov	r31, r0
	uint8_t y;
	OLED_reset();
	printf("\nMove the joystick to all extreme points.\n");
	printf("Press the joystick when you're done.\n");
	//check channels 
	while(test_bit(PINB,PINB2)){
     41a:	1c c0       	rjmp	.+56     	; 0x454 <JOY_calibrate+0x92>
		// Read sensor values
		x = ADC_read(0);
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     422:	b8 2e       	mov	r11, r24
		y = ADC_read(1);
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
		
		// Calibrate x
		if (min.x > x) min.x = x; 
     42a:	f8 01       	movw	r30, r16
     42c:	90 81       	ld	r25, Z
     42e:	b9 16       	cp	r11, r25
     430:	10 f4       	brcc	.+4      	; 0x436 <JOY_calibrate+0x74>
     432:	b0 82       	st	Z, r11
     434:	05 c0       	rjmp	.+10     	; 0x440 <JOY_calibrate+0x7e>
		else if (max.x < x) max.x = x;
     436:	f6 01       	movw	r30, r12
     438:	90 81       	ld	r25, Z
     43a:	9b 15       	cp	r25, r11
     43c:	08 f4       	brcc	.+2      	; 0x440 <JOY_calibrate+0x7e>
     43e:	b0 82       	st	Z, r11
		
		// Calibrate y
		if (min.y > y) min.y = y;
     440:	98 81       	ld	r25, Y
     442:	89 17       	cp	r24, r25
     444:	10 f4       	brcc	.+4      	; 0x44a <JOY_calibrate+0x88>
     446:	88 83       	st	Y, r24
     448:	05 c0       	rjmp	.+10     	; 0x454 <JOY_calibrate+0x92>
		else if (max.y < y) max.y = y;		
     44a:	f7 01       	movw	r30, r14
     44c:	90 81       	ld	r25, Z
     44e:	98 17       	cp	r25, r24
     450:	08 f4       	brcc	.+2      	; 0x454 <JOY_calibrate+0x92>
     452:	80 83       	st	Z, r24
	uint8_t y;
	OLED_reset();
	printf("\nMove the joystick to all extreme points.\n");
	printf("Press the joystick when you're done.\n");
	//check channels 
	while(test_bit(PINB,PINB2)){
     454:	b2 99       	sbic	0x16, 2	; 22
     456:	e2 cf       	rjmp	.-60     	; 0x41c <JOY_calibrate+0x5a>
		if (min.y > y) min.y = y;
		else if (max.y < y) max.y = y;		
	}

	// Find distance from middle to edges (radius)
	rad.x = (max.x - min.x) / 2;
     458:	e0 91 de 02 	lds	r30, 0x02DE
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	60 91 e2 02 	lds	r22, 0x02E2
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	9f 01       	movw	r18, r30
     466:	26 1b       	sub	r18, r22
     468:	37 0b       	sbc	r19, r23
     46a:	c9 01       	movw	r24, r18
     46c:	99 23       	and	r25, r25
     46e:	0c f4       	brge	.+2      	; 0x472 <JOY_calibrate+0xb0>
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	95 95       	asr	r25
     474:	87 95       	ror	r24
     476:	80 93 e0 02 	sts	0x02E0, r24
	rad.y = (max.y - min.y) / 2;
     47a:	40 91 df 02 	lds	r20, 0x02DF
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	20 91 e3 02 	lds	r18, 0x02E3
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	da 01       	movw	r26, r20
     488:	a2 1b       	sub	r26, r18
     48a:	b3 0b       	sbc	r27, r19
     48c:	cd 01       	movw	r24, r26
     48e:	0a f4       	brpl	.+2      	; 0x492 <JOY_calibrate+0xd0>
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	95 95       	asr	r25
     494:	87 95       	ror	r24
     496:	80 93 e1 02 	sts	0x02E1, r24
	
	// Find mid point using edges.
	mid.x = (max.x + min.x) / 2;
     49a:	6e 0f       	add	r22, r30
     49c:	7f 1f       	adc	r23, r31
     49e:	75 95       	asr	r23
     4a0:	67 95       	ror	r22
     4a2:	60 93 e4 02 	sts	0x02E4, r22
	mid.y = (max.y + min.y) / 2;
     4a6:	24 0f       	add	r18, r20
     4a8:	35 1f       	adc	r19, r21
     4aa:	35 95       	asr	r19
     4ac:	27 95       	ror	r18
     4ae:	20 93 e5 02 	sts	0x02E5, r18
}
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	ff 90       	pop	r15
     4bc:	ef 90       	pop	r14
     4be:	df 90       	pop	r13
     4c0:	cf 90       	pop	r12
     4c2:	bf 90       	pop	r11
     4c4:	08 95       	ret

000004c6 <JOY_init>:
	uint8_t y;
} max, min, rad, mid;

void JOY_init(){
	//set pull-up resistors on PORTB for JOY_button
	set_bit(PORTB,PB2);
     4c6:	c2 9a       	sbi	0x18, 2	; 24
	clear_bit(DDRB,PB2);
     4c8:	ba 98       	cbi	0x17, 2	; 23
	clear_bit(SFIOR, PUD);
     4ca:	80 b7       	in	r24, 0x30	; 48
     4cc:	8b 7f       	andi	r24, 0xFB	; 251
     4ce:	80 bf       	out	0x30, r24	; 48
	JOY_calibrate();
     4d0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <JOY_calibrate>
     4d4:	08 95       	ret

000004d6 <JOY_button_pressed>:
	mid.x = (max.x + min.x) / 2;
	mid.y = (max.y + min.y) / 2;
}

bool JOY_button_pressed(button b) {
	switch (b) {
     4d6:	81 30       	cpi	r24, 0x01	; 1
     4d8:	39 f0       	breq	.+14     	; 0x4e8 <JOY_button_pressed+0x12>
     4da:	18 f0       	brcs	.+6      	; 0x4e2 <JOY_button_pressed+0xc>
     4dc:	82 30       	cpi	r24, 0x02	; 2
     4de:	41 f0       	breq	.+16     	; 0x4f0 <JOY_button_pressed+0x1a>
     4e0:	0e c0       	rjmp	.+28     	; 0x4fe <JOY_button_pressed+0x28>
	case 0:
		if (test_bit(PINB, PINB0)) return true;
     4e2:	86 b3       	in	r24, 0x16	; 22
     4e4:	81 70       	andi	r24, 0x01	; 1
     4e6:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return true;
     4e8:	86 b3       	in	r24, 0x16	; 22
     4ea:	86 95       	lsr	r24
     4ec:	81 70       	andi	r24, 0x01	; 1
     4ee:	08 95       	ret
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return true;
     4f0:	86 b3       	in	r24, 0x16	; 22
     4f2:	82 fb       	bst	r24, 2
     4f4:	88 27       	eor	r24, r24
     4f6:	80 f9       	bld	r24, 0
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	89 27       	eor	r24, r25
     4fc:	08 95       	ret
		break;
	}
	return false;
     4fe:	80 e0       	ldi	r24, 0x00	; 0
}
     500:	08 95       	ret

00000502 <JOY_getPosition>:

JOY_position_t JOY_getPosition() {
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
	JOY_position_t JOY_position;
	JOY_position.x = (100 * (ADC_read(X_COORD) - mid.x)) / rad.x;
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     50e:	28 2f       	mov	r18, r24
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	80 91 e4 02 	lds	r24, 0x02E4
     516:	28 1b       	sub	r18, r24
     518:	31 09       	sbc	r19, r1
     51a:	14 e6       	ldi	r17, 0x64	; 100
     51c:	12 9f       	mul	r17, r18
     51e:	c0 01       	movw	r24, r0
     520:	13 9f       	mul	r17, r19
     522:	90 0d       	add	r25, r0
     524:	11 24       	eor	r1, r1
     526:	60 91 e0 02 	lds	r22, 0x02E0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	0e 94 b2 05 	call	0xb64	; 0xb64 <__divmodhi4>
     530:	eb 01       	movw	r28, r22
	JOY_position.y = (100 * (ADC_read(Y_COORD) - mid.y)) / rad.y;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     538:	28 2f       	mov	r18, r24
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	80 91 e5 02 	lds	r24, 0x02E5
     540:	28 1b       	sub	r18, r24
     542:	31 09       	sbc	r19, r1
     544:	12 9f       	mul	r17, r18
     546:	c0 01       	movw	r24, r0
     548:	13 9f       	mul	r17, r19
     54a:	90 0d       	add	r25, r0
     54c:	11 24       	eor	r1, r1
     54e:	60 91 e1 02 	lds	r22, 0x02E1
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	0e 94 b2 05 	call	0xb64	; 0xb64 <__divmodhi4>
     558:	9b 01       	movw	r18, r22
	return JOY_position;
     55a:	be 01       	movw	r22, r28
     55c:	c9 01       	movw	r24, r18
}
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	08 95       	ret

00000566 <JOY_getDirection>:

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
     566:	0e 94 81 02 	call	0x502	; 0x502 <JOY_getPosition>
     56a:	fb 01       	movw	r30, r22
     56c:	ac 01       	movw	r20, r24
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     56e:	9b 01       	movw	r18, r22
     570:	2c 5f       	subi	r18, 0xFC	; 252
     572:	3f 4f       	sbci	r19, 0xFF	; 255
     574:	29 30       	cpi	r18, 0x09	; 9
     576:	31 05       	cpc	r19, r1
     578:	30 f4       	brcc	.+12     	; 0x586 <JOY_getDirection+0x20>
     57a:	9c 01       	movw	r18, r24
     57c:	2c 5f       	subi	r18, 0xFC	; 252
     57e:	3f 4f       	sbci	r19, 0xFF	; 255
     580:	29 30       	cpi	r18, 0x09	; 9
     582:	31 05       	cpc	r19, r1
     584:	e0 f0       	brcs	.+56     	; 0x5be <JOY_getDirection+0x58>

	// The x-coordinate is dominating
	else if (abs(position.x) > abs(position.y)) {
     586:	db 01       	movw	r26, r22
     588:	ff 23       	and	r31, r31
     58a:	24 f4       	brge	.+8      	; 0x594 <JOY_getDirection+0x2e>
     58c:	aa 27       	eor	r26, r26
     58e:	bb 27       	eor	r27, r27
     590:	a6 1b       	sub	r26, r22
     592:	b7 0b       	sbc	r27, r23
     594:	9c 01       	movw	r18, r24
     596:	55 23       	and	r21, r21
     598:	24 f4       	brge	.+8      	; 0x5a2 <JOY_getDirection+0x3c>
     59a:	22 27       	eor	r18, r18
     59c:	33 27       	eor	r19, r19
     59e:	28 1b       	sub	r18, r24
     5a0:	39 0b       	sbc	r19, r25
     5a2:	2a 17       	cp	r18, r26
     5a4:	3b 07       	cpc	r19, r27
     5a6:	34 f4       	brge	.+12     	; 0x5b4 <JOY_getDirection+0x4e>
		// Positive x => RIGHT
		if (position.x > 0) return RIGHT;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	1e 16       	cp	r1, r30
     5ac:	1f 06       	cpc	r1, r31
     5ae:	54 f0       	brlt	.+20     	; 0x5c4 <JOY_getDirection+0x5e>
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	08 95       	ret
		else return LEFT;

	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
     5b4:	14 16       	cp	r1, r20
     5b6:	15 06       	cpc	r1, r21
     5b8:	24 f4       	brge	.+8      	; 0x5c2 <JOY_getDirection+0x5c>
     5ba:	82 e0       	ldi	r24, 0x02	; 2
     5bc:	08 95       	ret

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     5be:	84 e0       	ldi	r24, 0x04	; 4
     5c0:	08 95       	ret
	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
		// Negative y => DOWN
		else return DOWN;
     5c2:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     5c4:	08 95       	ret

000005c6 <MCP2515_read>:
	}
	
	return 0;
}

char MCP2515_read(char address) {
     5c6:	cf 93       	push	r28
     5c8:	c8 2f       	mov	r28, r24
	SPI_select();
     5ca:	0e 94 8c 05 	call	0xb18	; 0xb18 <SPI_select>
	SPI_send(READ);
     5ce:	83 e0       	ldi	r24, 0x03	; 3
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 7d 05 	call	0xafa	; 0xafa <SPI_send>
	SPI_send(address);
     5d6:	8c 2f       	mov	r24, r28
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 7d 05 	call	0xafa	; 0xafa <SPI_send>
	char data = SPI_read();
     5de:	0e 94 81 05 	call	0xb02	; 0xb02 <SPI_read>
     5e2:	c8 2f       	mov	r28, r24
	SPI_deselect();
     5e4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <SPI_deselect>
	return data;
	
	
}
     5e8:	8c 2f       	mov	r24, r28
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <MCP2515_reset>:
	SPI_send(new_data);
	SPI_deselect();
}

void MCP2515_reset() {
	SPI_select();
     5ee:	0e 94 8c 05 	call	0xb18	; 0xb18 <SPI_select>
	SPI_send(RESET);
     5f2:	80 ec       	ldi	r24, 0xC0	; 192
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 7d 05 	call	0xafa	; 0xafa <SPI_send>
	SPI_deselect();
     5fa:	0e 94 8e 05 	call	0xb1c	; 0xb1c <SPI_deselect>
     5fe:	08 95       	ret

00000600 <MCP2515_init>:
#define BIT_MODIFY 0x05
#define RTS_BASE 0x80


uint8_t MCP2515_init() {
	SPI_init();
     600:	0e 94 6b 05 	call	0xad6	; 0xad6 <SPI_init>
	MCP2515_reset();
     604:	0e 94 f7 02 	call	0x5ee	; 0x5ee <MCP2515_reset>
	//check bit 7-5 of MCP_CANSTAT which signify the operation mode
	const uint8_t device_mode = MCP2515_read(MCP_CANSTAT) & MODE_MASK;
     608:	8e e0       	ldi	r24, 0x0E	; 14
     60a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <MCP2515_read>
     60e:	80 7e       	andi	r24, 0xE0	; 224
	
	if (device_mode != MODE_CONFIG) {
     610:	80 38       	cpi	r24, 0x80	; 128
     612:	31 f0       	breq	.+12     	; 0x620 <MCP2515_init+0x20>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 72 07 	call	0xee4	; 0xee4 <puts>
		return 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	08 95       	ret
	}
	
	return 0;
     620:	80 e0       	ldi	r24, 0x00	; 0
}
     622:	08 95       	ret

00000624 <initialize>:
#include <stdio.h>
#include <stdbool.h>


void initialize(void){
	cli();
     624:	f8 94       	cli
	OLED_reset();
     626:	0e 94 94 03 	call	0x728	; 0x728 <OLED_reset>
	usart_init(MYUBRR);
     62a:	8f e1       	ldi	r24, 0x1F	; 31
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <usart_init>
	SRAM_init();
     632:	0e 94 90 05 	call	0xb20	; 0xb20 <SRAM_init>
	ADC_init();
     636:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	JOY_init();
     63a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <JOY_init>
	OLED_init();
     63e:	0e 94 a0 03 	call	0x740	; 0x740 <OLED_init>
	MENU_init();
     642:	0e 94 ff 04 	call	0x9fe	; 0x9fe <MENU_init>
	MCP2515_init();
     646:	0e 94 00 03 	call	0x600	; 0x600 <MCP2515_init>
	sei();
     64a:	78 94       	sei
     64c:	08 95       	ret

0000064e <main>:
}



int main(void) {
	initialize(); 	
     64e:	0e 94 12 03 	call	0x624	; 0x624 <initialize>
	// SRAM_test();
	// ADC_test();
	// JOY_test();
	// OLED_test();
	//MENU_test();
	SPI_test();
     652:	0e 94 88 05 	call	0xb10	; 0xb10 <SPI_test>
int main(void) {
	initialize(); 	
	test();
	
	while(1) {
		MENU_run();
     656:	0e 94 8d 04 	call	0x91a	; 0x91a <MENU_run>
     65a:	fd cf       	rjmp	.-6      	; 0x656 <main+0x8>

0000065c <OLED_print_char>:
	write_cmd(0x81);
	write_cmd(lvl);
}

void OLED_print_char(char c){
	if (c == '\0') return;
     65c:	88 23       	and	r24, r24
     65e:	f9 f0       	breq	.+62     	; 0x69e <OLED_print_char+0x42>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
     660:	e8 2f       	mov	r30, r24
     662:	f0 e0       	ldi	r31, 0x00	; 0
     664:	b0 97       	sbiw	r30, 0x20	; 32
	for (int col = 0; col < FONT_SIZE; col++){
     666:	80 91 06 01 	lds	r24, 0x0106
     66a:	88 23       	and	r24, r24
     66c:	c1 f0       	breq	.+48     	; 0x69e <OLED_print_char+0x42>
     66e:	ee 0f       	add	r30, r30
     670:	ff 1f       	adc	r31, r31
     672:	ee 0f       	add	r30, r30
     674:	ff 1f       	adc	r31, r31
     676:	ee 0f       	add	r30, r30
     678:	ff 1f       	adc	r31, r31
     67a:	e0 59       	subi	r30, 0x90	; 144
     67c:	ff 4f       	sbci	r31, 0xFF	; 255
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	90 e0       	ldi	r25, 0x00	; 0
		write_data(pgm_read_byte(&font8[letter_index][col]));
     682:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     684:	a0 91 09 01 	lds	r26, 0x0109
     688:	b0 91 0a 01 	lds	r27, 0x010A
     68c:	2c 93       	st	X, r18

void OLED_print_char(char c){
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++){
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	31 96       	adiw	r30, 0x01	; 1
     692:	20 91 06 01 	lds	r18, 0x0106
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	82 17       	cp	r24, r18
     69a:	93 07       	cpc	r25, r19
     69c:	94 f3       	brlt	.-28     	; 0x682 <OLED_print_char+0x26>
     69e:	08 95       	ret

000006a0 <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7){
     6a0:	88 30       	cpi	r24, 0x08	; 8
     6a2:	30 f4       	brcc	.+12     	; 0x6b0 <OLED_goto_line+0x10>
		return;
	}
	write_cmd(0xB0+line);
     6a4:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     6a6:	e0 91 07 01 	lds	r30, 0x0107
     6aa:	f0 91 08 01 	lds	r31, 0x0108
     6ae:	80 83       	st	Z, r24
     6b0:	08 95       	ret

000006b2 <OLED_goto_column>:
	}
	write_cmd(0xB0+line);
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
     6b2:	88 23       	and	r24, r24
     6b4:	7c f0       	brlt	.+30     	; 0x6d4 <OLED_goto_column+0x22>
		return;
	}
	write_cmd(0x00+column%16); //lower column register
     6b6:	98 2f       	mov	r25, r24
     6b8:	9f 70       	andi	r25, 0x0F	; 15
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     6ba:	e0 91 07 01 	lds	r30, 0x0107
     6be:	f0 91 08 01 	lds	r31, 0x0108
     6c2:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
		return;
	}
	write_cmd(0x00+column%16); //lower column register
	write_cmd(0x10+column/16); //higher column register
     6c4:	82 95       	swap	r24
     6c6:	8f 70       	andi	r24, 0x0F	; 15
     6c8:	80 5f       	subi	r24, 0xF0	; 240
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     6ca:	e0 91 07 01 	lds	r30, 0x0107
     6ce:	f0 91 08 01 	lds	r31, 0x0108
     6d2:	80 83       	st	Z, r24
     6d4:	08 95       	ret

000006d6 <OLED_pos>:
		write_data(0x00);
		
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
     6d6:	cf 93       	push	r28
     6d8:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
     6da:	88 30       	cpi	r24, 0x08	; 8
     6dc:	10 f4       	brcc	.+4      	; 0x6e2 <OLED_pos+0xc>
     6de:	66 23       	and	r22, r22
     6e0:	4c f4       	brge	.+18     	; 0x6f4 <OLED_pos+0x1e>
		printf("Out of range in OLED_pos()");
     6e2:	81 e3       	ldi	r24, 0x31	; 49
     6e4:	92 e0       	ldi	r25, 0x02	; 2
     6e6:	9f 93       	push	r25
     6e8:	8f 93       	push	r24
     6ea:	0e 94 5e 07 	call	0xebc	; 0xebc <printf>
		return; 
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	05 c0       	rjmp	.+10     	; 0x6fe <OLED_pos+0x28>
	}
	
	OLED_goto_line(line);
     6f4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <OLED_goto_line>
	OLED_goto_column(column);
     6f8:	8c 2f       	mov	r24, r28
     6fa:	0e 94 59 03 	call	0x6b2	; 0x6b2 <OLED_goto_column>
}
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <OLED_home>:




void OLED_home(){
	OLED_pos(0,0);
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <OLED_pos>
     70a:	08 95       	ret

0000070c <OLED_clear_line>:
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <OLED_pos>
     712:	80 e8       	ldi	r24, 0x80	; 128
     714:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     716:	e0 91 09 01 	lds	r30, 0x0109
     71a:	f0 91 0a 01 	lds	r31, 0x010A
     71e:	10 82       	st	Z, r1
     720:	01 97       	sbiw	r24, 0x01	; 1
	OLED_pos(0,0);
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
     722:	00 97       	sbiw	r24, 0x00	; 0
     724:	c1 f7       	brne	.-16     	; 0x716 <OLED_clear_line+0xa>
		write_data(0x00);
		
	}
}
     726:	08 95       	ret

00000728 <OLED_reset>:
	
}



void OLED_reset() {
     728:	cf 93       	push	r28
     72a:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
     72c:	8c 2f       	mov	r24, r28
     72e:	0e 94 86 03 	call	0x70c	; 0x70c <OLED_clear_line>
     732:	cf 5f       	subi	r28, 0xFF	; 255
}



void OLED_reset() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
     734:	c8 30       	cpi	r28, 0x08	; 8
     736:	d1 f7       	brne	.-12     	; 0x72c <OLED_reset+0x4>
		OLED_clear_line(page);
	}
	OLED_home();
     738:	0e 94 81 03 	call	0x702	; 0x702 <OLED_home>
}
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	66 97       	sbiw	r28, 0x16	; 22
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
	
	
	const char addresses[] = {
     754:	86 e1       	ldi	r24, 0x16	; 22
     756:	e9 e1       	ldi	r30, 0x19	; 25
     758:	f1 e0       	ldi	r31, 0x01	; 1
     75a:	de 01       	movw	r26, r28
     75c:	11 96       	adiw	r26, 0x01	; 1
     75e:	01 90       	ld	r0, Z+
     760:	0d 92       	st	X+, r0
     762:	8a 95       	dec	r24
     764:	e1 f7       	brne	.-8      	; 0x75e <OLED_init+0x1e>
     766:	fe 01       	movw	r30, r28
     768:	31 96       	adiw	r30, 0x01	; 1
     76a:	ce 01       	movw	r24, r28
     76c:	47 96       	adiw	r24, 0x17	; 23
		0xaf //display on
	};
	
	const addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
		write_cmd(addresses[i]);
     76e:	21 91       	ld	r18, Z+
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     770:	a0 91 07 01 	lds	r26, 0x0107
     774:	b0 91 08 01 	lds	r27, 0x0108
     778:	2c 93       	st	X, r18
		0xa6, //set normal display
		0xaf //display on
	};
	
	const addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
     77a:	e8 17       	cp	r30, r24
     77c:	f9 07       	cpc	r31, r25
     77e:	b9 f7       	brne	.-18     	; 0x76e <OLED_init+0x2e>
		write_cmd(addresses[i]);
	}
	
	OLED_reset();
     780:	0e 94 94 03 	call	0x728	; 0x728 <OLED_reset>
	
}
     784:	66 96       	adiw	r28, 0x16	; 22
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     796:	e0 91 09 01 	lds	r30, 0x0109
     79a:	f0 91 0a 01 	lds	r31, 0x010A
     79e:	88 e1       	ldi	r24, 0x18	; 24
     7a0:	80 83       	st	Z, r24
     7a2:	e0 91 09 01 	lds	r30, 0x0109
     7a6:	f0 91 0a 01 	lds	r31, 0x010A
     7aa:	80 83       	st	Z, r24
     7ac:	e0 91 09 01 	lds	r30, 0x0109
     7b0:	f0 91 0a 01 	lds	r31, 0x010A
     7b4:	9e e7       	ldi	r25, 0x7E	; 126
     7b6:	90 83       	st	Z, r25
     7b8:	e0 91 09 01 	lds	r30, 0x0109
     7bc:	f0 91 0a 01 	lds	r31, 0x010A
     7c0:	9c e3       	ldi	r25, 0x3C	; 60
     7c2:	90 83       	st	Z, r25
     7c4:	e0 91 09 01 	lds	r30, 0x0109
     7c8:	f0 91 0a 01 	lds	r31, 0x010A
     7cc:	80 83       	st	Z, r24
     7ce:	08 95       	ret

000007d0 <test_function>:
volatile menu_entry* current_node;
volatile menu_entry* selected_node;


void test_function() {
	printf("\n\nHighscore clicked!\n\n");
     7d0:	8c e5       	ldi	r24, 0x5C	; 92
     7d2:	92 e0       	ldi	r25, 0x02	; 2
     7d4:	0e 94 72 07 	call	0xee4	; 0xee4 <puts>
     7d8:	08 95       	ret

000007da <MENU_draw_current_menu>:
	current_node = current_node->parent_node;
	selected_node = current_node->child_node;
	MENU_draw_current_menu();
}

void MENU_draw_current_menu() {
     7da:	df 92       	push	r13
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
	OLED_reset();
     7e8:	0e 94 94 03 	call	0x728	; 0x728 <OLED_reset>
	int output_row = 0;
	
	menu_entry* temp_node = current_node->child_node;
     7ec:	e0 91 e6 02 	lds	r30, 0x02E6
     7f0:	f0 91 e7 02 	lds	r31, 0x02E7
     7f4:	c4 81       	ldd	r28, Z+4	; 0x04
     7f6:	d5 81       	ldd	r29, Z+5	; 0x05
	
	while( temp_node != NULL){
     7f8:	20 97       	sbiw	r28, 0x00	; 0
     7fa:	61 f1       	breq	.+88     	; 0x854 <MENU_draw_current_menu+0x7a>
     7fc:	d1 2c       	mov	r13, r1
		OLED_pos(output_row++, 0);
		if (temp_node == selected_node) {
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
     7fe:	0f 2e       	mov	r0, r31
     800:	f2 e7       	ldi	r31, 0x72	; 114
     802:	ef 2e       	mov	r14, r31
     804:	f2 e0       	ldi	r31, 0x02	; 2
     806:	ff 2e       	mov	r15, r31
     808:	f0 2d       	mov	r31, r0
     80a:	0b e0       	ldi	r16, 0x0B	; 11
     80c:	11 e0       	ldi	r17, 0x01	; 1
	int output_row = 0;
	
	menu_entry* temp_node = current_node->child_node;
	
	while( temp_node != NULL){
		OLED_pos(output_row++, 0);
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	8d 2d       	mov	r24, r13
     812:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <OLED_pos>
		if (temp_node == selected_node) {
     816:	20 91 e8 02 	lds	r18, 0x02E8
     81a:	30 91 e9 02 	lds	r19, 0x02E9
     81e:	c2 17       	cp	r28, r18
     820:	d3 07       	cpc	r29, r19
     822:	11 f4       	brne	.+4      	; 0x828 <MENU_draw_current_menu+0x4e>
			OLED_print_arrow();
     824:	0e 94 cb 03 	call	0x796	; 0x796 <OLED_print_arrow>
		}
		fprintf(OLED, " %s", temp_node->name);
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	8f 93       	push	r24
     82c:	88 81       	ld	r24, Y
     82e:	8f 93       	push	r24
     830:	ff 92       	push	r15
     832:	ef 92       	push	r14
     834:	1f 93       	push	r17
     836:	0f 93       	push	r16
     838:	0e 94 4c 07 	call	0xe98	; 0xe98 <fprintf>
		temp_node = temp_node -> next_sibling_node;
     83c:	0e 80       	ldd	r0, Y+6	; 0x06
     83e:	df 81       	ldd	r29, Y+7	; 0x07
     840:	c0 2d       	mov	r28, r0
     842:	d3 94       	inc	r13
	OLED_reset();
	int output_row = 0;
	
	menu_entry* temp_node = current_node->child_node;
	
	while( temp_node != NULL){
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	20 97       	sbiw	r28, 0x00	; 0
     852:	e9 f6       	brne	.-70     	; 0x80e <MENU_draw_current_menu+0x34>
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	08 95       	ret

00000864 <MENU_select_next>:
	MENU_draw_current_menu();
}


void MENU_select_next() {
	if (selected_node -> next_sibling_node != NULL) {
     864:	e0 91 e8 02 	lds	r30, 0x02E8
     868:	f0 91 e9 02 	lds	r31, 0x02E9
     86c:	86 81       	ldd	r24, Z+6	; 0x06
     86e:	97 81       	ldd	r25, Z+7	; 0x07
     870:	89 2b       	or	r24, r25
     872:	41 f0       	breq	.+16     	; 0x884 <MENU_select_next+0x20>
		selected_node = selected_node -> next_sibling_node;
     874:	86 81       	ldd	r24, Z+6	; 0x06
     876:	97 81       	ldd	r25, Z+7	; 0x07
     878:	90 93 e9 02 	sts	0x02E9, r25
     87c:	80 93 e8 02 	sts	0x02E8, r24
		MENU_draw_current_menu();
     880:	0e 94 ed 03 	call	0x7da	; 0x7da <MENU_draw_current_menu>
     884:	08 95       	ret

00000886 <MENU_select_prev>:
	}
}

void MENU_select_prev() {
	if (selected_node -> prev_sibling_node != NULL) {
     886:	e0 91 e8 02 	lds	r30, 0x02E8
     88a:	f0 91 e9 02 	lds	r31, 0x02E9
     88e:	80 85       	ldd	r24, Z+8	; 0x08
     890:	91 85       	ldd	r25, Z+9	; 0x09
     892:	89 2b       	or	r24, r25
     894:	41 f0       	breq	.+16     	; 0x8a6 <MENU_select_prev+0x20>
		selected_node = selected_node -> prev_sibling_node;
     896:	80 85       	ldd	r24, Z+8	; 0x08
     898:	91 85       	ldd	r25, Z+9	; 0x09
     89a:	90 93 e9 02 	sts	0x02E9, r25
     89e:	80 93 e8 02 	sts	0x02E8, r24
		MENU_draw_current_menu();
     8a2:	0e 94 ed 03 	call	0x7da	; 0x7da <MENU_draw_current_menu>
     8a6:	08 95       	ret

000008a8 <MENU_enter_selection>:
	}
}

void MENU_enter_selection() {
	if (selected_node->function_ptr != NULL) {
     8a8:	e0 91 e8 02 	lds	r30, 0x02E8
     8ac:	f0 91 e9 02 	lds	r31, 0x02E9
     8b0:	82 85       	ldd	r24, Z+10	; 0x0a
     8b2:	93 85       	ldd	r25, Z+11	; 0x0b
     8b4:	89 2b       	or	r24, r25
     8b6:	21 f0       	breq	.+8      	; 0x8c0 <MENU_enter_selection+0x18>
		selected_node->function_ptr();
     8b8:	02 84       	ldd	r0, Z+10	; 0x0a
     8ba:	f3 85       	ldd	r31, Z+11	; 0x0b
     8bc:	e0 2d       	mov	r30, r0
     8be:	09 95       	icall
	}
	
	if (selected_node->child_node == NULL) return;
     8c0:	e0 91 e8 02 	lds	r30, 0x02E8
     8c4:	f0 91 e9 02 	lds	r31, 0x02E9
     8c8:	84 81       	ldd	r24, Z+4	; 0x04
     8ca:	95 81       	ldd	r25, Z+5	; 0x05
     8cc:	89 2b       	or	r24, r25
     8ce:	61 f0       	breq	.+24     	; 0x8e8 <MENU_enter_selection+0x40>
	
	current_node = selected_node;
     8d0:	f0 93 e7 02 	sts	0x02E7, r31
     8d4:	e0 93 e6 02 	sts	0x02E6, r30
	selected_node = current_node->child_node;
     8d8:	84 81       	ldd	r24, Z+4	; 0x04
     8da:	95 81       	ldd	r25, Z+5	; 0x05
     8dc:	90 93 e9 02 	sts	0x02E9, r25
     8e0:	80 93 e8 02 	sts	0x02E8, r24
	MENU_draw_current_menu();
     8e4:	0e 94 ed 03 	call	0x7da	; 0x7da <MENU_draw_current_menu>
     8e8:	08 95       	ret

000008ea <MENU_go_back>:
}

void MENU_go_back() {
	if (current_node->parent_node == NULL) return;
     8ea:	e0 91 e6 02 	lds	r30, 0x02E6
     8ee:	f0 91 e7 02 	lds	r31, 0x02E7
     8f2:	82 81       	ldd	r24, Z+2	; 0x02
     8f4:	93 81       	ldd	r25, Z+3	; 0x03
     8f6:	89 2b       	or	r24, r25
     8f8:	79 f0       	breq	.+30     	; 0x918 <MENU_go_back+0x2e>
	
	current_node = current_node->parent_node;
     8fa:	02 80       	ldd	r0, Z+2	; 0x02
     8fc:	f3 81       	ldd	r31, Z+3	; 0x03
     8fe:	e0 2d       	mov	r30, r0
     900:	f0 93 e7 02 	sts	0x02E7, r31
     904:	e0 93 e6 02 	sts	0x02E6, r30
	selected_node = current_node->child_node;
     908:	84 81       	ldd	r24, Z+4	; 0x04
     90a:	95 81       	ldd	r25, Z+5	; 0x05
     90c:	90 93 e9 02 	sts	0x02E9, r25
     910:	80 93 e8 02 	sts	0x02E8, r24
	MENU_draw_current_menu();
     914:	0e 94 ed 03 	call	0x7da	; 0x7da <MENU_draw_current_menu>
     918:	08 95       	ret

0000091a <MENU_run>:
	_delay_ms(delay);
	MENU_select_prev();
}


void MENU_run() {
     91a:	cf 93       	push	r28
	bool change = false;
	if (JOY_getDirection() == DOWN) {
     91c:	0e 94 b3 02 	call	0x566	; 0x566 <JOY_getDirection>
     920:	83 30       	cpi	r24, 0x03	; 3
     922:	21 f4       	brne	.+8      	; 0x92c <MENU_run+0x12>
		MENU_select_next();
     924:	0e 94 32 04 	call	0x864	; 0x864 <MENU_select_next>
		change = true;
     928:	c1 e0       	ldi	r28, 0x01	; 1
     92a:	09 c0       	rjmp	.+18     	; 0x93e <MENU_run+0x24>
		} else if (JOY_getDirection() == UP) {
     92c:	0e 94 b3 02 	call	0x566	; 0x566 <JOY_getDirection>
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	21 f4       	brne	.+8      	; 0x93c <MENU_run+0x22>
		MENU_select_prev();
     934:	0e 94 43 04 	call	0x886	; 0x886 <MENU_select_prev>
		change = true;
     938:	c1 e0       	ldi	r28, 0x01	; 1
     93a:	01 c0       	rjmp	.+2      	; 0x93e <MENU_run+0x24>
	MENU_select_prev();
}


void MENU_run() {
	bool change = false;
     93c:	c0 e0       	ldi	r28, 0x00	; 0
		} else if (JOY_getDirection() == UP) {
		MENU_select_prev();
		change = true;
	}
	
	if (JOY_button_pressed(JOY_BUTTON)) {
     93e:	82 e0       	ldi	r24, 0x02	; 2
     940:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <JOY_button_pressed>
     944:	88 23       	and	r24, r24
     946:	19 f0       	breq	.+6      	; 0x94e <MENU_run+0x34>
		MENU_enter_selection();
     948:	0e 94 54 04 	call	0x8a8	; 0x8a8 <MENU_enter_selection>
     94c:	0a c0       	rjmp	.+20     	; 0x962 <MENU_run+0x48>
		change = true;
	}
	
	else if (JOY_button_pressed(LEFT_BUTTON)) {
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <JOY_button_pressed>
     954:	88 23       	and	r24, r24
     956:	19 f0       	breq	.+6      	; 0x95e <MENU_run+0x44>
		MENU_go_back();
     958:	0e 94 75 04 	call	0x8ea	; 0x8ea <MENU_go_back>
     95c:	02 c0       	rjmp	.+4      	; 0x962 <MENU_run+0x48>
		change = true;
	}
	
	// Make sure the selection doesn't move multiple places at once.
	if (change){
     95e:	cc 23       	and	r28, r28
     960:	49 f0       	breq	.+18     	; 0x974 <MENU_run+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     962:	22 e3       	ldi	r18, 0x32	; 50
     964:	83 ed       	ldi	r24, 0xD3	; 211
     966:	93 e0       	ldi	r25, 0x03	; 3
     968:	21 50       	subi	r18, 0x01	; 1
     96a:	80 40       	sbci	r24, 0x00	; 0
     96c:	90 40       	sbci	r25, 0x00	; 0
     96e:	e1 f7       	brne	.-8      	; 0x968 <MENU_run+0x4e>
     970:	00 c0       	rjmp	.+0      	; 0x972 <MENU_run+0x58>
     972:	00 c0       	rjmp	.+0      	; 0x974 <MENU_run+0x5a>
		_delay_ms(255);
		change = false;
	}
}
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <add_entry>:



menu_entry* add_entry(menu_entry* parent_node, char* name, void* function_ptr){
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
     986:	7b 01       	movw	r14, r22
     988:	8a 01       	movw	r16, r20
	
	// Create the new node
	menu_entry* new_entry = (menu_entry*) malloc(sizeof(menu_entry));
     98a:	8c e0       	ldi	r24, 0x0C	; 12
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <malloc>
     992:	dc 01       	movw	r26, r24
	new_entry->name = name;
     994:	11 96       	adiw	r26, 0x01	; 1
     996:	fc 92       	st	X, r15
     998:	ee 92       	st	-X, r14
	new_entry->parent_node = parent_node;
     99a:	13 96       	adiw	r26, 0x03	; 3
     99c:	dc 93       	st	X, r29
     99e:	ce 93       	st	-X, r28
     9a0:	12 97       	sbiw	r26, 0x02	; 2
	new_entry->child_node = NULL;  // A new node has no children
     9a2:	15 96       	adiw	r26, 0x05	; 5
     9a4:	1c 92       	st	X, r1
     9a6:	1e 92       	st	-X, r1
     9a8:	14 97       	sbiw	r26, 0x04	; 4
	new_entry->next_sibling_node = NULL;  // The new child is the last child
     9aa:	17 96       	adiw	r26, 0x07	; 7
     9ac:	1c 92       	st	X, r1
     9ae:	1e 92       	st	-X, r1
     9b0:	16 97       	sbiw	r26, 0x06	; 6
	new_entry->prev_sibling_node = NULL;
     9b2:	19 96       	adiw	r26, 0x09	; 9
     9b4:	1c 92       	st	X, r1
     9b6:	1e 92       	st	-X, r1
     9b8:	18 97       	sbiw	r26, 0x08	; 8
	new_entry->function_ptr = function_ptr;
     9ba:	1b 96       	adiw	r26, 0x0b	; 11
     9bc:	1c 93       	st	X, r17
     9be:	0e 93       	st	-X, r16
     9c0:	1a 97       	sbiw	r26, 0x0a	; 10
	
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_entry;
     9c2:	20 97       	sbiw	r28, 0x00	; 0
     9c4:	a1 f0       	breq	.+40     	; 0x9ee <add_entry+0x76>
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
     9c6:	ec 81       	ldd	r30, Y+4	; 0x04
     9c8:	fd 81       	ldd	r31, Y+5	; 0x05
     9ca:	30 97       	sbiw	r30, 0x00	; 0
     9cc:	19 f4       	brne	.+6      	; 0x9d4 <add_entry+0x5c>
		parent_node->child_node = new_entry;
     9ce:	9d 83       	std	Y+5, r25	; 0x05
     9d0:	8c 83       	std	Y+4, r24	; 0x04
     9d2:	0d c0       	rjmp	.+26     	; 0x9ee <add_entry+0x76>
	else {
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
     9d4:	26 81       	ldd	r18, Z+6	; 0x06
     9d6:	37 81       	ldd	r19, Z+7	; 0x07
     9d8:	21 15       	cp	r18, r1
     9da:	31 05       	cpc	r19, r1
     9dc:	11 f0       	breq	.+4      	; 0x9e2 <add_entry+0x6a>
			temp_node = temp_node->next_sibling_node;
     9de:	f9 01       	movw	r30, r18
     9e0:	f9 cf       	rjmp	.-14     	; 0x9d4 <add_entry+0x5c>
		}
		
		// Bind the new node to the current last child to become the new last child.
		temp_node->next_sibling_node = new_entry;
     9e2:	b7 83       	std	Z+7, r27	; 0x07
     9e4:	a6 83       	std	Z+6, r26	; 0x06
		new_entry->prev_sibling_node = temp_node;
     9e6:	19 96       	adiw	r26, 0x09	; 9
     9e8:	fc 93       	st	X, r31
     9ea:	ee 93       	st	-X, r30
     9ec:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	// Parent/child/sibling bindings complete. Return the new node.
	return new_entry;
     9ee:	cd 01       	movw	r24, r26
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	ff 90       	pop	r15
     9fa:	ef 90       	pop	r14
     9fc:	08 95       	ret

000009fe <MENU_init>:

void test_function() {
	printf("\n\nHighscore clicked!\n\n");
}

void MENU_init() {
     9fe:	cf 92       	push	r12
     a00:	df 92       	push	r13
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
	menu_entry* main_menu = add_entry(NULL, "Main menu", NULL);
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	66 e7       	ldi	r22, 0x76	; 118
     a14:	72 e0       	ldi	r23, 0x02	; 2
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 bc 04 	call	0x978	; 0x978 <add_entry>
     a1e:	ec 01       	movw	r28, r24
	
	// Main menu
	menu_entry* play = add_entry(main_menu, "Play game", NULL);
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e8       	ldi	r22, 0x80	; 128
     a26:	72 e0       	ldi	r23, 0x02	; 2
     a28:	0e 94 bc 04 	call	0x978	; 0x978 <add_entry>
     a2c:	6c 01       	movw	r12, r24
	menu_entry* highscore = add_entry(main_menu, "Highscore", test_function);
     a2e:	48 ee       	ldi	r20, 0xE8	; 232
     a30:	53 e0       	ldi	r21, 0x03	; 3
     a32:	6a e8       	ldi	r22, 0x8A	; 138
     a34:	72 e0       	ldi	r23, 0x02	; 2
     a36:	ce 01       	movw	r24, r28
     a38:	0e 94 bc 04 	call	0x978	; 0x978 <add_entry>
	menu_entry* settings = add_entry(main_menu, "Settings", NULL);
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	64 e9       	ldi	r22, 0x94	; 148
     a42:	72 e0       	ldi	r23, 0x02	; 2
     a44:	ce 01       	movw	r24, r28
     a46:	0e 94 bc 04 	call	0x978	; 0x978 <add_entry>
     a4a:	7c 01       	movw	r14, r24
	menu_entry* extras = add_entry(main_menu, "Extra features", NULL);
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	6d e4       	ldi	r22, 0x4D	; 77
     a52:	72 e0       	ldi	r23, 0x02	; 2
     a54:	ce 01       	movw	r24, r28
     a56:	0e 94 bc 04 	call	0x978	; 0x978 <add_entry>
     a5a:	8c 01       	movw	r16, r24
	
	// Sub-menu settings
	menu_entry* brightness = add_entry(settings, "Brightness", NULL);
     a5c:	40 e0       	ldi	r20, 0x00	; 0
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	6d e9       	ldi	r22, 0x9D	; 157
     a62:	72 e0       	ldi	r23, 0x02	; 2
     a64:	c7 01       	movw	r24, r14
     a66:	0e 94 bc 04 	call	0x978	; 0x978 <add_entry>
	menu_entry* font = add_entry(settings, "Set font", NULL);
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	68 ea       	ldi	r22, 0xA8	; 168
     a70:	72 e0       	ldi	r23, 0x02	; 2
     a72:	c7 01       	movw	r24, r14
     a74:	0e 94 bc 04 	call	0x978	; 0x978 <add_entry>
	
	// Sub-menu extras
	menu_entry* keyboard = add_entry(extras, "Keyboard", NULL);
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	50 e0       	ldi	r21, 0x00	; 0
     a7c:	61 eb       	ldi	r22, 0xB1	; 177
     a7e:	72 e0       	ldi	r23, 0x02	; 2
     a80:	c8 01       	movw	r24, r16
     a82:	0e 94 bc 04 	call	0x978	; 0x978 <add_entry>
	menu_entry* mandelbrot = add_entry(extras, "Mandelbrot", NULL);
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	6a eb       	ldi	r22, 0xBA	; 186
     a8c:	72 e0       	ldi	r23, 0x02	; 2
     a8e:	c8 01       	movw	r24, r16
     a90:	0e 94 bc 04 	call	0x978	; 0x978 <add_entry>
	menu_entry* pong = add_entry(extras, "Play pong", NULL);
     a94:	40 e0       	ldi	r20, 0x00	; 0
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	65 ec       	ldi	r22, 0xC5	; 197
     a9a:	72 e0       	ldi	r23, 0x02	; 2
     a9c:	c8 01       	movw	r24, r16
     a9e:	0e 94 bc 04 	call	0x978	; 0x978 <add_entry>
	menu_entry* rcube = add_entry(extras, "rotating cube", NULL);
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	6f ec       	ldi	r22, 0xCF	; 207
     aa8:	72 e0       	ldi	r23, 0x02	; 2
     aaa:	c8 01       	movw	r24, r16
     aac:	0e 94 bc 04 	call	0x978	; 0x978 <add_entry>
	
	current_node = main_menu;
     ab0:	d0 93 e7 02 	sts	0x02E7, r29
     ab4:	c0 93 e6 02 	sts	0x02E6, r28
	selected_node = play;
     ab8:	d0 92 e9 02 	sts	0x02E9, r13
     abc:	c0 92 e8 02 	sts	0x02E8, r12
	MENU_draw_current_menu();
     ac0:	0e 94 ed 03 	call	0x7da	; 0x7da <MENU_draw_current_menu>
}
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	cf 90       	pop	r12
     ad4:	08 95       	ret

00000ad6 <SPI_init>:

void SPI_init(){
	//Configure interrupt0 on the ATmega162 for receiving interrupts from SPI
	//see page 160 in ATmega162
	//enable int0 on the ATmega162
	set_bit(GICR, INT0);
     ad6:	8b b7       	in	r24, 0x3b	; 59
     ad8:	80 64       	ori	r24, 0x40	; 64
     ada:	8b bf       	out	0x3b, r24	; 59
	
	//interrupt when low
	clear_bit(MCUCR,ISC01);
     adc:	85 b7       	in	r24, 0x35	; 53
     ade:	8d 7f       	andi	r24, 0xFD	; 253
     ae0:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     ae2:	85 b7       	in	r24, 0x35	; 53
     ae4:	8e 7f       	andi	r24, 0xFE	; 254
     ae6:	85 bf       	out	0x35, r24	; 53
	

	//set mosi, sck, ss as output, others as input
	set_bit(DDRB, MOSI);
     ae8:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
     aea:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
     aec:	bc 9a       	sbi	0x17, 4	; 23
	
	
	//set ATmega as master
	set_bit(SPCR, MSTR);
     aee:	6c 9a       	sbi	0x0d, 4	; 13
	
	//enable SPI
	set_bit(SPCR, SPE);
     af0:	6e 9a       	sbi	0x0d, 6	; 13
	
	//set clock to f_osc/16
	set_bit(SPCR, SPR0);
     af2:	68 9a       	sbi	0x0d, 0	; 13
	clear_bit(SPCR,SPR1);
     af4:	69 98       	cbi	0x0d, 1	; 13
	clear_bit(SPCR, SPI2X);
     af6:	68 98       	cbi	0x0d, 0	; 13
     af8:	08 95       	ret

00000afa <SPI_send>:
}


void SPI_send(char data){
	//Start transmission
	SPDR = data;
     afa:	8f b9       	out	0x0f, r24	; 15
	
	//wait for transmission complete SPSR: register with SPIF flag, SPIF: bit set to 1 when data is read
	loop_until_bit_is_set(SPSR, SPIF);
     afc:	77 9b       	sbis	0x0e, 7	; 14
     afe:	fe cf       	rjmp	.-4      	; 0xafc <SPI_send+0x2>

	
}
     b00:	08 95       	ret

00000b02 <SPI_read>:


char SPI_read(){
	//must send a dummy bit to receive data
	SPI_send(0);
     b02:	80 e0       	ldi	r24, 0x00	; 0
     b04:	0e 94 7d 05 	call	0xafa	; 0xafa <SPI_send>
	
	loop_until_bit_is_set(SPSR, SPIF);
     b08:	77 9b       	sbis	0x0e, 7	; 14
     b0a:	fe cf       	rjmp	.-4      	; 0xb08 <SPI_read+0x6>
	char data = SPDR;
     b0c:	8f b1       	in	r24, 0x0f	; 15
	return data;
	
}
     b0e:	08 95       	ret

00000b10 <SPI_test>:

void SPI_test() {
	
	SPI_send(0b10010101);
     b10:	85 e9       	ldi	r24, 0x95	; 149
     b12:	0e 94 7d 05 	call	0xafa	; 0xafa <SPI_send>
     b16:	08 95       	ret

00000b18 <SPI_select>:
	//printf("SPI_TEST: %s\n\n", spi_read_result);
	
}

void SPI_select(){
	clear_bit(PORTB, SS);
     b18:	c4 98       	cbi	0x18, 4	; 24
     b1a:	08 95       	ret

00000b1c <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
     b1c:	c4 9a       	sbi	0x18, 4	; 24
     b1e:	08 95       	ret

00000b20 <SRAM_init>:



void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
     b20:	85 b7       	in	r24, 0x35	; 53
     b22:	80 68       	ori	r24, 0x80	; 128
     b24:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
     b26:	80 b7       	in	r24, 0x30	; 48
     b28:	80 62       	ori	r24, 0x20	; 32
     b2a:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
     b2c:	80 b7       	in	r24, 0x30	; 48
     b2e:	8f 7e       	andi	r24, 0xEF	; 239
     b30:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
     b32:	80 b7       	in	r24, 0x30	; 48
     b34:	87 7f       	andi	r24, 0xF7	; 247
     b36:	80 bf       	out	0x30, r24	; 48
     b38:	08 95       	ret

00000b3a <usart_transmit_to_computer>:
}


void usart_transmit_to_computer(unsigned int data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
     b3a:	5d 9b       	sbis	0x0b, 5	; 11
     b3c:	fe cf       	rjmp	.-4      	; 0xb3a <usart_transmit_to_computer>
	;
	
	/* Put data into buffer (sends the data) */
	UDR0 = data;
     b3e:	8c b9       	out	0x0c, r24	; 12
     b40:	08 95       	ret

00000b42 <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
     b42:	5f 9b       	sbis	0x0b, 7	; 11
     b44:	fe cf       	rjmp	.-4      	; 0xb42 <usart_receive_from_computer>
	;
	
	/* Get and return data from buffer */
	return UDR0;
     b46:	8c b1       	in	r24, 0x0c	; 12
}
     b48:	08 95       	ret

00000b4a <usart_init>:
#include <avr/io.h>


void usart_init(unsigned int ubbr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubbr>>8);
     b4a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
     b4c:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     b4e:	88 e1       	ldi	r24, 0x18	; 24
     b50:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     b52:	8e e8       	ldi	r24, 0x8E	; 142
     b54:	80 bd       	out	0x20, r24	; 32
	
	
	/* Enable printf-thing */
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
     b56:	61 ea       	ldi	r22, 0xA1	; 161
     b58:	75 e0       	ldi	r23, 0x05	; 5
     b5a:	8d e9       	ldi	r24, 0x9D	; 157
     b5c:	95 e0       	ldi	r25, 0x05	; 5
     b5e:	0e 94 01 07 	call	0xe02	; 0xe02 <fdevopen>
     b62:	08 95       	ret

00000b64 <__divmodhi4>:
     b64:	97 fb       	bst	r25, 7
     b66:	07 2e       	mov	r0, r23
     b68:	16 f4       	brtc	.+4      	; 0xb6e <__divmodhi4+0xa>
     b6a:	00 94       	com	r0
     b6c:	07 d0       	rcall	.+14     	; 0xb7c <__divmodhi4_neg1>
     b6e:	77 fd       	sbrc	r23, 7
     b70:	09 d0       	rcall	.+18     	; 0xb84 <__divmodhi4_neg2>
     b72:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__udivmodhi4>
     b76:	07 fc       	sbrc	r0, 7
     b78:	05 d0       	rcall	.+10     	; 0xb84 <__divmodhi4_neg2>
     b7a:	3e f4       	brtc	.+14     	; 0xb8a <__divmodhi4_exit>

00000b7c <__divmodhi4_neg1>:
     b7c:	90 95       	com	r25
     b7e:	81 95       	neg	r24
     b80:	9f 4f       	sbci	r25, 0xFF	; 255
     b82:	08 95       	ret

00000b84 <__divmodhi4_neg2>:
     b84:	70 95       	com	r23
     b86:	61 95       	neg	r22
     b88:	7f 4f       	sbci	r23, 0xFF	; 255

00000b8a <__divmodhi4_exit>:
     b8a:	08 95       	ret

00000b8c <__udivmodhi4>:
     b8c:	aa 1b       	sub	r26, r26
     b8e:	bb 1b       	sub	r27, r27
     b90:	51 e1       	ldi	r21, 0x11	; 17
     b92:	07 c0       	rjmp	.+14     	; 0xba2 <__udivmodhi4_ep>

00000b94 <__udivmodhi4_loop>:
     b94:	aa 1f       	adc	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	a6 17       	cp	r26, r22
     b9a:	b7 07       	cpc	r27, r23
     b9c:	10 f0       	brcs	.+4      	; 0xba2 <__udivmodhi4_ep>
     b9e:	a6 1b       	sub	r26, r22
     ba0:	b7 0b       	sbc	r27, r23

00000ba2 <__udivmodhi4_ep>:
     ba2:	88 1f       	adc	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	5a 95       	dec	r21
     ba8:	a9 f7       	brne	.-22     	; 0xb94 <__udivmodhi4_loop>
     baa:	80 95       	com	r24
     bac:	90 95       	com	r25
     bae:	bc 01       	movw	r22, r24
     bb0:	cd 01       	movw	r24, r26
     bb2:	08 95       	ret

00000bb4 <malloc>:
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	91 05       	cpc	r25, r1
     bbc:	10 f4       	brcc	.+4      	; 0xbc2 <malloc+0xe>
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	e0 91 ec 02 	lds	r30, 0x02EC
     bc6:	f0 91 ed 02 	lds	r31, 0x02ED
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	30 97       	sbiw	r30, 0x00	; 0
     bd4:	39 f1       	breq	.+78     	; 0xc24 <malloc+0x70>
     bd6:	40 81       	ld	r20, Z
     bd8:	51 81       	ldd	r21, Z+1	; 0x01
     bda:	48 17       	cp	r20, r24
     bdc:	59 07       	cpc	r21, r25
     bde:	b8 f0       	brcs	.+46     	; 0xc0e <malloc+0x5a>
     be0:	48 17       	cp	r20, r24
     be2:	59 07       	cpc	r21, r25
     be4:	71 f4       	brne	.+28     	; 0xc02 <malloc+0x4e>
     be6:	82 81       	ldd	r24, Z+2	; 0x02
     be8:	93 81       	ldd	r25, Z+3	; 0x03
     bea:	10 97       	sbiw	r26, 0x00	; 0
     bec:	29 f0       	breq	.+10     	; 0xbf8 <malloc+0x44>
     bee:	13 96       	adiw	r26, 0x03	; 3
     bf0:	9c 93       	st	X, r25
     bf2:	8e 93       	st	-X, r24
     bf4:	12 97       	sbiw	r26, 0x02	; 2
     bf6:	2c c0       	rjmp	.+88     	; 0xc50 <malloc+0x9c>
     bf8:	90 93 ed 02 	sts	0x02ED, r25
     bfc:	80 93 ec 02 	sts	0x02EC, r24
     c00:	27 c0       	rjmp	.+78     	; 0xc50 <malloc+0x9c>
     c02:	21 15       	cp	r18, r1
     c04:	31 05       	cpc	r19, r1
     c06:	31 f0       	breq	.+12     	; 0xc14 <malloc+0x60>
     c08:	42 17       	cp	r20, r18
     c0a:	53 07       	cpc	r21, r19
     c0c:	18 f0       	brcs	.+6      	; 0xc14 <malloc+0x60>
     c0e:	a9 01       	movw	r20, r18
     c10:	db 01       	movw	r26, r22
     c12:	01 c0       	rjmp	.+2      	; 0xc16 <malloc+0x62>
     c14:	ef 01       	movw	r28, r30
     c16:	9a 01       	movw	r18, r20
     c18:	bd 01       	movw	r22, r26
     c1a:	df 01       	movw	r26, r30
     c1c:	02 80       	ldd	r0, Z+2	; 0x02
     c1e:	f3 81       	ldd	r31, Z+3	; 0x03
     c20:	e0 2d       	mov	r30, r0
     c22:	d7 cf       	rjmp	.-82     	; 0xbd2 <malloc+0x1e>
     c24:	21 15       	cp	r18, r1
     c26:	31 05       	cpc	r19, r1
     c28:	f9 f0       	breq	.+62     	; 0xc68 <malloc+0xb4>
     c2a:	28 1b       	sub	r18, r24
     c2c:	39 0b       	sbc	r19, r25
     c2e:	24 30       	cpi	r18, 0x04	; 4
     c30:	31 05       	cpc	r19, r1
     c32:	80 f4       	brcc	.+32     	; 0xc54 <malloc+0xa0>
     c34:	8a 81       	ldd	r24, Y+2	; 0x02
     c36:	9b 81       	ldd	r25, Y+3	; 0x03
     c38:	61 15       	cp	r22, r1
     c3a:	71 05       	cpc	r23, r1
     c3c:	21 f0       	breq	.+8      	; 0xc46 <malloc+0x92>
     c3e:	fb 01       	movw	r30, r22
     c40:	93 83       	std	Z+3, r25	; 0x03
     c42:	82 83       	std	Z+2, r24	; 0x02
     c44:	04 c0       	rjmp	.+8      	; 0xc4e <malloc+0x9a>
     c46:	90 93 ed 02 	sts	0x02ED, r25
     c4a:	80 93 ec 02 	sts	0x02EC, r24
     c4e:	fe 01       	movw	r30, r28
     c50:	32 96       	adiw	r30, 0x02	; 2
     c52:	44 c0       	rjmp	.+136    	; 0xcdc <malloc+0x128>
     c54:	fe 01       	movw	r30, r28
     c56:	e2 0f       	add	r30, r18
     c58:	f3 1f       	adc	r31, r19
     c5a:	81 93       	st	Z+, r24
     c5c:	91 93       	st	Z+, r25
     c5e:	22 50       	subi	r18, 0x02	; 2
     c60:	31 09       	sbc	r19, r1
     c62:	39 83       	std	Y+1, r19	; 0x01
     c64:	28 83       	st	Y, r18
     c66:	3a c0       	rjmp	.+116    	; 0xcdc <malloc+0x128>
     c68:	20 91 ea 02 	lds	r18, 0x02EA
     c6c:	30 91 eb 02 	lds	r19, 0x02EB
     c70:	23 2b       	or	r18, r19
     c72:	41 f4       	brne	.+16     	; 0xc84 <malloc+0xd0>
     c74:	20 91 02 01 	lds	r18, 0x0102
     c78:	30 91 03 01 	lds	r19, 0x0103
     c7c:	30 93 eb 02 	sts	0x02EB, r19
     c80:	20 93 ea 02 	sts	0x02EA, r18
     c84:	20 91 00 01 	lds	r18, 0x0100
     c88:	30 91 01 01 	lds	r19, 0x0101
     c8c:	21 15       	cp	r18, r1
     c8e:	31 05       	cpc	r19, r1
     c90:	41 f4       	brne	.+16     	; 0xca2 <malloc+0xee>
     c92:	2d b7       	in	r18, 0x3d	; 61
     c94:	3e b7       	in	r19, 0x3e	; 62
     c96:	40 91 04 01 	lds	r20, 0x0104
     c9a:	50 91 05 01 	lds	r21, 0x0105
     c9e:	24 1b       	sub	r18, r20
     ca0:	35 0b       	sbc	r19, r21
     ca2:	e0 91 ea 02 	lds	r30, 0x02EA
     ca6:	f0 91 eb 02 	lds	r31, 0x02EB
     caa:	e2 17       	cp	r30, r18
     cac:	f3 07       	cpc	r31, r19
     cae:	a0 f4       	brcc	.+40     	; 0xcd8 <malloc+0x124>
     cb0:	2e 1b       	sub	r18, r30
     cb2:	3f 0b       	sbc	r19, r31
     cb4:	28 17       	cp	r18, r24
     cb6:	39 07       	cpc	r19, r25
     cb8:	78 f0       	brcs	.+30     	; 0xcd8 <malloc+0x124>
     cba:	ac 01       	movw	r20, r24
     cbc:	4e 5f       	subi	r20, 0xFE	; 254
     cbe:	5f 4f       	sbci	r21, 0xFF	; 255
     cc0:	24 17       	cp	r18, r20
     cc2:	35 07       	cpc	r19, r21
     cc4:	48 f0       	brcs	.+18     	; 0xcd8 <malloc+0x124>
     cc6:	4e 0f       	add	r20, r30
     cc8:	5f 1f       	adc	r21, r31
     cca:	50 93 eb 02 	sts	0x02EB, r21
     cce:	40 93 ea 02 	sts	0x02EA, r20
     cd2:	81 93       	st	Z+, r24
     cd4:	91 93       	st	Z+, r25
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <malloc+0x128>
     cd8:	e0 e0       	ldi	r30, 0x00	; 0
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	cf 01       	movw	r24, r30
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	08 95       	ret

00000ce4 <free>:
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	09 f4       	brne	.+2      	; 0xcee <free+0xa>
     cec:	87 c0       	rjmp	.+270    	; 0xdfc <free+0x118>
     cee:	fc 01       	movw	r30, r24
     cf0:	32 97       	sbiw	r30, 0x02	; 2
     cf2:	13 82       	std	Z+3, r1	; 0x03
     cf4:	12 82       	std	Z+2, r1	; 0x02
     cf6:	c0 91 ec 02 	lds	r28, 0x02EC
     cfa:	d0 91 ed 02 	lds	r29, 0x02ED
     cfe:	20 97       	sbiw	r28, 0x00	; 0
     d00:	81 f4       	brne	.+32     	; 0xd22 <free+0x3e>
     d02:	20 81       	ld	r18, Z
     d04:	31 81       	ldd	r19, Z+1	; 0x01
     d06:	28 0f       	add	r18, r24
     d08:	39 1f       	adc	r19, r25
     d0a:	80 91 ea 02 	lds	r24, 0x02EA
     d0e:	90 91 eb 02 	lds	r25, 0x02EB
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	79 f5       	brne	.+94     	; 0xd76 <free+0x92>
     d18:	f0 93 eb 02 	sts	0x02EB, r31
     d1c:	e0 93 ea 02 	sts	0x02EA, r30
     d20:	6d c0       	rjmp	.+218    	; 0xdfc <free+0x118>
     d22:	de 01       	movw	r26, r28
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	ae 17       	cp	r26, r30
     d2a:	bf 07       	cpc	r27, r31
     d2c:	50 f4       	brcc	.+20     	; 0xd42 <free+0x5e>
     d2e:	12 96       	adiw	r26, 0x02	; 2
     d30:	4d 91       	ld	r20, X+
     d32:	5c 91       	ld	r21, X
     d34:	13 97       	sbiw	r26, 0x03	; 3
     d36:	9d 01       	movw	r18, r26
     d38:	41 15       	cp	r20, r1
     d3a:	51 05       	cpc	r21, r1
     d3c:	09 f1       	breq	.+66     	; 0xd80 <free+0x9c>
     d3e:	da 01       	movw	r26, r20
     d40:	f3 cf       	rjmp	.-26     	; 0xd28 <free+0x44>
     d42:	b3 83       	std	Z+3, r27	; 0x03
     d44:	a2 83       	std	Z+2, r26	; 0x02
     d46:	40 81       	ld	r20, Z
     d48:	51 81       	ldd	r21, Z+1	; 0x01
     d4a:	84 0f       	add	r24, r20
     d4c:	95 1f       	adc	r25, r21
     d4e:	8a 17       	cp	r24, r26
     d50:	9b 07       	cpc	r25, r27
     d52:	71 f4       	brne	.+28     	; 0xd70 <free+0x8c>
     d54:	8d 91       	ld	r24, X+
     d56:	9c 91       	ld	r25, X
     d58:	11 97       	sbiw	r26, 0x01	; 1
     d5a:	84 0f       	add	r24, r20
     d5c:	95 1f       	adc	r25, r21
     d5e:	02 96       	adiw	r24, 0x02	; 2
     d60:	91 83       	std	Z+1, r25	; 0x01
     d62:	80 83       	st	Z, r24
     d64:	12 96       	adiw	r26, 0x02	; 2
     d66:	8d 91       	ld	r24, X+
     d68:	9c 91       	ld	r25, X
     d6a:	13 97       	sbiw	r26, 0x03	; 3
     d6c:	93 83       	std	Z+3, r25	; 0x03
     d6e:	82 83       	std	Z+2, r24	; 0x02
     d70:	21 15       	cp	r18, r1
     d72:	31 05       	cpc	r19, r1
     d74:	29 f4       	brne	.+10     	; 0xd80 <free+0x9c>
     d76:	f0 93 ed 02 	sts	0x02ED, r31
     d7a:	e0 93 ec 02 	sts	0x02EC, r30
     d7e:	3e c0       	rjmp	.+124    	; 0xdfc <free+0x118>
     d80:	d9 01       	movw	r26, r18
     d82:	13 96       	adiw	r26, 0x03	; 3
     d84:	fc 93       	st	X, r31
     d86:	ee 93       	st	-X, r30
     d88:	12 97       	sbiw	r26, 0x02	; 2
     d8a:	4d 91       	ld	r20, X+
     d8c:	5d 91       	ld	r21, X+
     d8e:	a4 0f       	add	r26, r20
     d90:	b5 1f       	adc	r27, r21
     d92:	ea 17       	cp	r30, r26
     d94:	fb 07       	cpc	r31, r27
     d96:	79 f4       	brne	.+30     	; 0xdb6 <free+0xd2>
     d98:	80 81       	ld	r24, Z
     d9a:	91 81       	ldd	r25, Z+1	; 0x01
     d9c:	84 0f       	add	r24, r20
     d9e:	95 1f       	adc	r25, r21
     da0:	02 96       	adiw	r24, 0x02	; 2
     da2:	d9 01       	movw	r26, r18
     da4:	11 96       	adiw	r26, 0x01	; 1
     da6:	9c 93       	st	X, r25
     da8:	8e 93       	st	-X, r24
     daa:	82 81       	ldd	r24, Z+2	; 0x02
     dac:	93 81       	ldd	r25, Z+3	; 0x03
     dae:	13 96       	adiw	r26, 0x03	; 3
     db0:	9c 93       	st	X, r25
     db2:	8e 93       	st	-X, r24
     db4:	12 97       	sbiw	r26, 0x02	; 2
     db6:	e0 e0       	ldi	r30, 0x00	; 0
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	9b 81       	ldd	r25, Y+3	; 0x03
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	19 f0       	breq	.+6      	; 0xdc8 <free+0xe4>
     dc2:	fe 01       	movw	r30, r28
     dc4:	ec 01       	movw	r28, r24
     dc6:	f9 cf       	rjmp	.-14     	; 0xdba <free+0xd6>
     dc8:	ce 01       	movw	r24, r28
     dca:	02 96       	adiw	r24, 0x02	; 2
     dcc:	28 81       	ld	r18, Y
     dce:	39 81       	ldd	r19, Y+1	; 0x01
     dd0:	82 0f       	add	r24, r18
     dd2:	93 1f       	adc	r25, r19
     dd4:	20 91 ea 02 	lds	r18, 0x02EA
     dd8:	30 91 eb 02 	lds	r19, 0x02EB
     ddc:	28 17       	cp	r18, r24
     dde:	39 07       	cpc	r19, r25
     de0:	69 f4       	brne	.+26     	; 0xdfc <free+0x118>
     de2:	30 97       	sbiw	r30, 0x00	; 0
     de4:	29 f4       	brne	.+10     	; 0xdf0 <free+0x10c>
     de6:	10 92 ed 02 	sts	0x02ED, r1
     dea:	10 92 ec 02 	sts	0x02EC, r1
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <free+0x110>
     df0:	13 82       	std	Z+3, r1	; 0x03
     df2:	12 82       	std	Z+2, r1	; 0x02
     df4:	d0 93 eb 02 	sts	0x02EB, r29
     df8:	c0 93 ea 02 	sts	0x02EA, r28
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <fdevopen>:
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	ec 01       	movw	r28, r24
     e0c:	8b 01       	movw	r16, r22
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	31 f4       	brne	.+12     	; 0xe1e <fdevopen+0x1c>
     e12:	61 15       	cp	r22, r1
     e14:	71 05       	cpc	r23, r1
     e16:	19 f4       	brne	.+6      	; 0xe1e <fdevopen+0x1c>
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	38 c0       	rjmp	.+112    	; 0xe8e <fdevopen+0x8c>
     e1e:	6e e0       	ldi	r22, 0x0E	; 14
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 71 09 	call	0x12e2	; 0x12e2 <calloc>
     e2a:	fc 01       	movw	r30, r24
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	a1 f3       	breq	.-24     	; 0xe18 <fdevopen+0x16>
     e30:	80 e8       	ldi	r24, 0x80	; 128
     e32:	83 83       	std	Z+3, r24	; 0x03
     e34:	01 15       	cp	r16, r1
     e36:	11 05       	cpc	r17, r1
     e38:	71 f0       	breq	.+28     	; 0xe56 <fdevopen+0x54>
     e3a:	13 87       	std	Z+11, r17	; 0x0b
     e3c:	02 87       	std	Z+10, r16	; 0x0a
     e3e:	81 e8       	ldi	r24, 0x81	; 129
     e40:	83 83       	std	Z+3, r24	; 0x03
     e42:	80 91 ee 02 	lds	r24, 0x02EE
     e46:	90 91 ef 02 	lds	r25, 0x02EF
     e4a:	89 2b       	or	r24, r25
     e4c:	21 f4       	brne	.+8      	; 0xe56 <fdevopen+0x54>
     e4e:	f0 93 ef 02 	sts	0x02EF, r31
     e52:	e0 93 ee 02 	sts	0x02EE, r30
     e56:	20 97       	sbiw	r28, 0x00	; 0
     e58:	c9 f0       	breq	.+50     	; 0xe8c <fdevopen+0x8a>
     e5a:	d1 87       	std	Z+9, r29	; 0x09
     e5c:	c0 87       	std	Z+8, r28	; 0x08
     e5e:	83 81       	ldd	r24, Z+3	; 0x03
     e60:	82 60       	ori	r24, 0x02	; 2
     e62:	83 83       	std	Z+3, r24	; 0x03
     e64:	80 91 f0 02 	lds	r24, 0x02F0
     e68:	90 91 f1 02 	lds	r25, 0x02F1
     e6c:	89 2b       	or	r24, r25
     e6e:	71 f4       	brne	.+28     	; 0xe8c <fdevopen+0x8a>
     e70:	f0 93 f1 02 	sts	0x02F1, r31
     e74:	e0 93 f0 02 	sts	0x02F0, r30
     e78:	80 91 f2 02 	lds	r24, 0x02F2
     e7c:	90 91 f3 02 	lds	r25, 0x02F3
     e80:	89 2b       	or	r24, r25
     e82:	21 f4       	brne	.+8      	; 0xe8c <fdevopen+0x8a>
     e84:	f0 93 f3 02 	sts	0x02F3, r31
     e88:	e0 93 f2 02 	sts	0x02F2, r30
     e8c:	cf 01       	movw	r24, r30
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	08 95       	ret

00000e98 <fprintf>:
     e98:	a0 e0       	ldi	r26, 0x00	; 0
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e2 e5       	ldi	r30, 0x52	; 82
     e9e:	f7 e0       	ldi	r31, 0x07	; 7
     ea0:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__prologue_saves__+0x20>
     ea4:	ae 01       	movw	r20, r28
     ea6:	47 5f       	subi	r20, 0xF7	; 247
     ea8:	5f 4f       	sbci	r21, 0xFF	; 255
     eaa:	6f 81       	ldd	r22, Y+7	; 0x07
     eac:	78 85       	ldd	r23, Y+8	; 0x08
     eae:	8d 81       	ldd	r24, Y+5	; 0x05
     eb0:	9e 81       	ldd	r25, Y+6	; 0x06
     eb2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <vfprintf>
     eb6:	e2 e0       	ldi	r30, 0x02	; 2
     eb8:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__epilogue_restores__+0x20>

00000ebc <printf>:
     ebc:	a0 e0       	ldi	r26, 0x00	; 0
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e4 e6       	ldi	r30, 0x64	; 100
     ec2:	f7 e0       	ldi	r31, 0x07	; 7
     ec4:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__prologue_saves__+0x20>
     ec8:	fe 01       	movw	r30, r28
     eca:	35 96       	adiw	r30, 0x05	; 5
     ecc:	61 91       	ld	r22, Z+
     ece:	71 91       	ld	r23, Z+
     ed0:	af 01       	movw	r20, r30
     ed2:	80 91 f0 02 	lds	r24, 0x02F0
     ed6:	90 91 f1 02 	lds	r25, 0x02F1
     eda:	0e 94 9f 07 	call	0xf3e	; 0xf3e <vfprintf>
     ede:	e2 e0       	ldi	r30, 0x02	; 2
     ee0:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <__epilogue_restores__+0x20>

00000ee4 <puts>:
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	e0 91 f0 02 	lds	r30, 0x02F0
     ef0:	f0 91 f1 02 	lds	r31, 0x02F1
     ef4:	23 81       	ldd	r18, Z+3	; 0x03
     ef6:	21 ff       	sbrs	r18, 1
     ef8:	1b c0       	rjmp	.+54     	; 0xf30 <puts+0x4c>
     efa:	ec 01       	movw	r28, r24
     efc:	00 e0       	ldi	r16, 0x00	; 0
     efe:	10 e0       	ldi	r17, 0x00	; 0
     f00:	89 91       	ld	r24, Y+
     f02:	60 91 f0 02 	lds	r22, 0x02F0
     f06:	70 91 f1 02 	lds	r23, 0x02F1
     f0a:	db 01       	movw	r26, r22
     f0c:	18 96       	adiw	r26, 0x08	; 8
     f0e:	ed 91       	ld	r30, X+
     f10:	fc 91       	ld	r31, X
     f12:	19 97       	sbiw	r26, 0x09	; 9
     f14:	88 23       	and	r24, r24
     f16:	31 f0       	breq	.+12     	; 0xf24 <puts+0x40>
     f18:	09 95       	icall
     f1a:	89 2b       	or	r24, r25
     f1c:	89 f3       	breq	.-30     	; 0xf00 <puts+0x1c>
     f1e:	0f ef       	ldi	r16, 0xFF	; 255
     f20:	1f ef       	ldi	r17, 0xFF	; 255
     f22:	ee cf       	rjmp	.-36     	; 0xf00 <puts+0x1c>
     f24:	8a e0       	ldi	r24, 0x0A	; 10
     f26:	09 95       	icall
     f28:	89 2b       	or	r24, r25
     f2a:	11 f4       	brne	.+4      	; 0xf30 <puts+0x4c>
     f2c:	c8 01       	movw	r24, r16
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <puts+0x50>
     f30:	8f ef       	ldi	r24, 0xFF	; 255
     f32:	9f ef       	ldi	r25, 0xFF	; 255
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	08 95       	ret

00000f3e <vfprintf>:
     f3e:	ac e0       	ldi	r26, 0x0C	; 12
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e5 ea       	ldi	r30, 0xA5	; 165
     f44:	f7 e0       	ldi	r31, 0x07	; 7
     f46:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__prologue_saves__>
     f4a:	7c 01       	movw	r14, r24
     f4c:	6b 01       	movw	r12, r22
     f4e:	8a 01       	movw	r16, r20
     f50:	fc 01       	movw	r30, r24
     f52:	17 82       	std	Z+7, r1	; 0x07
     f54:	16 82       	std	Z+6, r1	; 0x06
     f56:	83 81       	ldd	r24, Z+3	; 0x03
     f58:	81 ff       	sbrs	r24, 1
     f5a:	bd c1       	rjmp	.+890    	; 0x12d6 <vfprintf+0x398>
     f5c:	ce 01       	movw	r24, r28
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	4c 01       	movw	r8, r24
     f62:	f7 01       	movw	r30, r14
     f64:	93 81       	ldd	r25, Z+3	; 0x03
     f66:	f6 01       	movw	r30, r12
     f68:	93 fd       	sbrc	r25, 3
     f6a:	85 91       	lpm	r24, Z+
     f6c:	93 ff       	sbrs	r25, 3
     f6e:	81 91       	ld	r24, Z+
     f70:	6f 01       	movw	r12, r30
     f72:	88 23       	and	r24, r24
     f74:	09 f4       	brne	.+2      	; 0xf78 <vfprintf+0x3a>
     f76:	ab c1       	rjmp	.+854    	; 0x12ce <vfprintf+0x390>
     f78:	85 32       	cpi	r24, 0x25	; 37
     f7a:	39 f4       	brne	.+14     	; 0xf8a <vfprintf+0x4c>
     f7c:	93 fd       	sbrc	r25, 3
     f7e:	85 91       	lpm	r24, Z+
     f80:	93 ff       	sbrs	r25, 3
     f82:	81 91       	ld	r24, Z+
     f84:	6f 01       	movw	r12, r30
     f86:	85 32       	cpi	r24, 0x25	; 37
     f88:	29 f4       	brne	.+10     	; 0xf94 <vfprintf+0x56>
     f8a:	b7 01       	movw	r22, r14
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 aa 09 	call	0x1354	; 0x1354 <fputc>
     f92:	e7 cf       	rjmp	.-50     	; 0xf62 <vfprintf+0x24>
     f94:	51 2c       	mov	r5, r1
     f96:	31 2c       	mov	r3, r1
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	20 32       	cpi	r18, 0x20	; 32
     f9c:	a0 f4       	brcc	.+40     	; 0xfc6 <vfprintf+0x88>
     f9e:	8b 32       	cpi	r24, 0x2B	; 43
     fa0:	69 f0       	breq	.+26     	; 0xfbc <vfprintf+0x7e>
     fa2:	30 f4       	brcc	.+12     	; 0xfb0 <vfprintf+0x72>
     fa4:	80 32       	cpi	r24, 0x20	; 32
     fa6:	59 f0       	breq	.+22     	; 0xfbe <vfprintf+0x80>
     fa8:	83 32       	cpi	r24, 0x23	; 35
     faa:	69 f4       	brne	.+26     	; 0xfc6 <vfprintf+0x88>
     fac:	20 61       	ori	r18, 0x10	; 16
     fae:	2c c0       	rjmp	.+88     	; 0x1008 <vfprintf+0xca>
     fb0:	8d 32       	cpi	r24, 0x2D	; 45
     fb2:	39 f0       	breq	.+14     	; 0xfc2 <vfprintf+0x84>
     fb4:	80 33       	cpi	r24, 0x30	; 48
     fb6:	39 f4       	brne	.+14     	; 0xfc6 <vfprintf+0x88>
     fb8:	21 60       	ori	r18, 0x01	; 1
     fba:	26 c0       	rjmp	.+76     	; 0x1008 <vfprintf+0xca>
     fbc:	22 60       	ori	r18, 0x02	; 2
     fbe:	24 60       	ori	r18, 0x04	; 4
     fc0:	23 c0       	rjmp	.+70     	; 0x1008 <vfprintf+0xca>
     fc2:	28 60       	ori	r18, 0x08	; 8
     fc4:	21 c0       	rjmp	.+66     	; 0x1008 <vfprintf+0xca>
     fc6:	27 fd       	sbrc	r18, 7
     fc8:	27 c0       	rjmp	.+78     	; 0x1018 <vfprintf+0xda>
     fca:	30 ed       	ldi	r19, 0xD0	; 208
     fcc:	38 0f       	add	r19, r24
     fce:	3a 30       	cpi	r19, 0x0A	; 10
     fd0:	78 f4       	brcc	.+30     	; 0xff0 <vfprintf+0xb2>
     fd2:	26 ff       	sbrs	r18, 6
     fd4:	06 c0       	rjmp	.+12     	; 0xfe2 <vfprintf+0xa4>
     fd6:	fa e0       	ldi	r31, 0x0A	; 10
     fd8:	5f 9e       	mul	r5, r31
     fda:	30 0d       	add	r19, r0
     fdc:	11 24       	eor	r1, r1
     fde:	53 2e       	mov	r5, r19
     fe0:	13 c0       	rjmp	.+38     	; 0x1008 <vfprintf+0xca>
     fe2:	8a e0       	ldi	r24, 0x0A	; 10
     fe4:	38 9e       	mul	r3, r24
     fe6:	30 0d       	add	r19, r0
     fe8:	11 24       	eor	r1, r1
     fea:	33 2e       	mov	r3, r19
     fec:	20 62       	ori	r18, 0x20	; 32
     fee:	0c c0       	rjmp	.+24     	; 0x1008 <vfprintf+0xca>
     ff0:	8e 32       	cpi	r24, 0x2E	; 46
     ff2:	21 f4       	brne	.+8      	; 0xffc <vfprintf+0xbe>
     ff4:	26 fd       	sbrc	r18, 6
     ff6:	6b c1       	rjmp	.+726    	; 0x12ce <vfprintf+0x390>
     ff8:	20 64       	ori	r18, 0x40	; 64
     ffa:	06 c0       	rjmp	.+12     	; 0x1008 <vfprintf+0xca>
     ffc:	8c 36       	cpi	r24, 0x6C	; 108
     ffe:	11 f4       	brne	.+4      	; 0x1004 <vfprintf+0xc6>
    1000:	20 68       	ori	r18, 0x80	; 128
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <vfprintf+0xca>
    1004:	88 36       	cpi	r24, 0x68	; 104
    1006:	41 f4       	brne	.+16     	; 0x1018 <vfprintf+0xda>
    1008:	f6 01       	movw	r30, r12
    100a:	93 fd       	sbrc	r25, 3
    100c:	85 91       	lpm	r24, Z+
    100e:	93 ff       	sbrs	r25, 3
    1010:	81 91       	ld	r24, Z+
    1012:	6f 01       	movw	r12, r30
    1014:	81 11       	cpse	r24, r1
    1016:	c1 cf       	rjmp	.-126    	; 0xf9a <vfprintf+0x5c>
    1018:	98 2f       	mov	r25, r24
    101a:	9f 7d       	andi	r25, 0xDF	; 223
    101c:	95 54       	subi	r25, 0x45	; 69
    101e:	93 30       	cpi	r25, 0x03	; 3
    1020:	28 f4       	brcc	.+10     	; 0x102c <vfprintf+0xee>
    1022:	0c 5f       	subi	r16, 0xFC	; 252
    1024:	1f 4f       	sbci	r17, 0xFF	; 255
    1026:	ff e3       	ldi	r31, 0x3F	; 63
    1028:	f9 83       	std	Y+1, r31	; 0x01
    102a:	0d c0       	rjmp	.+26     	; 0x1046 <vfprintf+0x108>
    102c:	83 36       	cpi	r24, 0x63	; 99
    102e:	31 f0       	breq	.+12     	; 0x103c <vfprintf+0xfe>
    1030:	83 37       	cpi	r24, 0x73	; 115
    1032:	71 f0       	breq	.+28     	; 0x1050 <vfprintf+0x112>
    1034:	83 35       	cpi	r24, 0x53	; 83
    1036:	09 f0       	breq	.+2      	; 0x103a <vfprintf+0xfc>
    1038:	5b c0       	rjmp	.+182    	; 0x10f0 <vfprintf+0x1b2>
    103a:	22 c0       	rjmp	.+68     	; 0x1080 <vfprintf+0x142>
    103c:	f8 01       	movw	r30, r16
    103e:	80 81       	ld	r24, Z
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	0e 5f       	subi	r16, 0xFE	; 254
    1044:	1f 4f       	sbci	r17, 0xFF	; 255
    1046:	44 24       	eor	r4, r4
    1048:	43 94       	inc	r4
    104a:	51 2c       	mov	r5, r1
    104c:	54 01       	movw	r10, r8
    104e:	15 c0       	rjmp	.+42     	; 0x107a <vfprintf+0x13c>
    1050:	38 01       	movw	r6, r16
    1052:	f2 e0       	ldi	r31, 0x02	; 2
    1054:	6f 0e       	add	r6, r31
    1056:	71 1c       	adc	r7, r1
    1058:	f8 01       	movw	r30, r16
    105a:	a0 80       	ld	r10, Z
    105c:	b1 80       	ldd	r11, Z+1	; 0x01
    105e:	26 ff       	sbrs	r18, 6
    1060:	03 c0       	rjmp	.+6      	; 0x1068 <vfprintf+0x12a>
    1062:	65 2d       	mov	r22, r5
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	02 c0       	rjmp	.+4      	; 0x106c <vfprintf+0x12e>
    1068:	6f ef       	ldi	r22, 0xFF	; 255
    106a:	7f ef       	ldi	r23, 0xFF	; 255
    106c:	c5 01       	movw	r24, r10
    106e:	2c 87       	std	Y+12, r18	; 0x0c
    1070:	0e 94 9f 09 	call	0x133e	; 0x133e <strnlen>
    1074:	2c 01       	movw	r4, r24
    1076:	83 01       	movw	r16, r6
    1078:	2c 85       	ldd	r18, Y+12	; 0x0c
    107a:	2f 77       	andi	r18, 0x7F	; 127
    107c:	22 2e       	mov	r2, r18
    107e:	17 c0       	rjmp	.+46     	; 0x10ae <vfprintf+0x170>
    1080:	38 01       	movw	r6, r16
    1082:	f2 e0       	ldi	r31, 0x02	; 2
    1084:	6f 0e       	add	r6, r31
    1086:	71 1c       	adc	r7, r1
    1088:	f8 01       	movw	r30, r16
    108a:	a0 80       	ld	r10, Z
    108c:	b1 80       	ldd	r11, Z+1	; 0x01
    108e:	26 ff       	sbrs	r18, 6
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <vfprintf+0x15a>
    1092:	65 2d       	mov	r22, r5
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	02 c0       	rjmp	.+4      	; 0x109c <vfprintf+0x15e>
    1098:	6f ef       	ldi	r22, 0xFF	; 255
    109a:	7f ef       	ldi	r23, 0xFF	; 255
    109c:	c5 01       	movw	r24, r10
    109e:	2c 87       	std	Y+12, r18	; 0x0c
    10a0:	0e 94 8d 09 	call	0x131a	; 0x131a <strnlen_P>
    10a4:	2c 01       	movw	r4, r24
    10a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    10a8:	20 68       	ori	r18, 0x80	; 128
    10aa:	22 2e       	mov	r2, r18
    10ac:	83 01       	movw	r16, r6
    10ae:	23 fc       	sbrc	r2, 3
    10b0:	1b c0       	rjmp	.+54     	; 0x10e8 <vfprintf+0x1aa>
    10b2:	83 2d       	mov	r24, r3
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	48 16       	cp	r4, r24
    10b8:	59 06       	cpc	r5, r25
    10ba:	b0 f4       	brcc	.+44     	; 0x10e8 <vfprintf+0x1aa>
    10bc:	b7 01       	movw	r22, r14
    10be:	80 e2       	ldi	r24, 0x20	; 32
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 aa 09 	call	0x1354	; 0x1354 <fputc>
    10c6:	3a 94       	dec	r3
    10c8:	f4 cf       	rjmp	.-24     	; 0x10b2 <vfprintf+0x174>
    10ca:	f5 01       	movw	r30, r10
    10cc:	27 fc       	sbrc	r2, 7
    10ce:	85 91       	lpm	r24, Z+
    10d0:	27 fe       	sbrs	r2, 7
    10d2:	81 91       	ld	r24, Z+
    10d4:	5f 01       	movw	r10, r30
    10d6:	b7 01       	movw	r22, r14
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 aa 09 	call	0x1354	; 0x1354 <fputc>
    10de:	31 10       	cpse	r3, r1
    10e0:	3a 94       	dec	r3
    10e2:	f1 e0       	ldi	r31, 0x01	; 1
    10e4:	4f 1a       	sub	r4, r31
    10e6:	51 08       	sbc	r5, r1
    10e8:	41 14       	cp	r4, r1
    10ea:	51 04       	cpc	r5, r1
    10ec:	71 f7       	brne	.-36     	; 0x10ca <vfprintf+0x18c>
    10ee:	e5 c0       	rjmp	.+458    	; 0x12ba <vfprintf+0x37c>
    10f0:	84 36       	cpi	r24, 0x64	; 100
    10f2:	11 f0       	breq	.+4      	; 0x10f8 <vfprintf+0x1ba>
    10f4:	89 36       	cpi	r24, 0x69	; 105
    10f6:	39 f5       	brne	.+78     	; 0x1146 <vfprintf+0x208>
    10f8:	f8 01       	movw	r30, r16
    10fa:	27 ff       	sbrs	r18, 7
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <vfprintf+0x1ce>
    10fe:	60 81       	ld	r22, Z
    1100:	71 81       	ldd	r23, Z+1	; 0x01
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	0c 5f       	subi	r16, 0xFC	; 252
    1108:	1f 4f       	sbci	r17, 0xFF	; 255
    110a:	08 c0       	rjmp	.+16     	; 0x111c <vfprintf+0x1de>
    110c:	60 81       	ld	r22, Z
    110e:	71 81       	ldd	r23, Z+1	; 0x01
    1110:	88 27       	eor	r24, r24
    1112:	77 fd       	sbrc	r23, 7
    1114:	80 95       	com	r24
    1116:	98 2f       	mov	r25, r24
    1118:	0e 5f       	subi	r16, 0xFE	; 254
    111a:	1f 4f       	sbci	r17, 0xFF	; 255
    111c:	2f 76       	andi	r18, 0x6F	; 111
    111e:	b2 2e       	mov	r11, r18
    1120:	97 ff       	sbrs	r25, 7
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <vfprintf+0x1f8>
    1124:	90 95       	com	r25
    1126:	80 95       	com	r24
    1128:	70 95       	com	r23
    112a:	61 95       	neg	r22
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	8f 4f       	sbci	r24, 0xFF	; 255
    1130:	9f 4f       	sbci	r25, 0xFF	; 255
    1132:	20 68       	ori	r18, 0x80	; 128
    1134:	b2 2e       	mov	r11, r18
    1136:	2a e0       	ldi	r18, 0x0A	; 10
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	a4 01       	movw	r20, r8
    113c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__ultoa_invert>
    1140:	a8 2e       	mov	r10, r24
    1142:	a8 18       	sub	r10, r8
    1144:	44 c0       	rjmp	.+136    	; 0x11ce <vfprintf+0x290>
    1146:	85 37       	cpi	r24, 0x75	; 117
    1148:	29 f4       	brne	.+10     	; 0x1154 <vfprintf+0x216>
    114a:	2f 7e       	andi	r18, 0xEF	; 239
    114c:	b2 2e       	mov	r11, r18
    114e:	2a e0       	ldi	r18, 0x0A	; 10
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	25 c0       	rjmp	.+74     	; 0x119e <vfprintf+0x260>
    1154:	f2 2f       	mov	r31, r18
    1156:	f9 7f       	andi	r31, 0xF9	; 249
    1158:	bf 2e       	mov	r11, r31
    115a:	8f 36       	cpi	r24, 0x6F	; 111
    115c:	c1 f0       	breq	.+48     	; 0x118e <vfprintf+0x250>
    115e:	18 f4       	brcc	.+6      	; 0x1166 <vfprintf+0x228>
    1160:	88 35       	cpi	r24, 0x58	; 88
    1162:	79 f0       	breq	.+30     	; 0x1182 <vfprintf+0x244>
    1164:	b4 c0       	rjmp	.+360    	; 0x12ce <vfprintf+0x390>
    1166:	80 37       	cpi	r24, 0x70	; 112
    1168:	19 f0       	breq	.+6      	; 0x1170 <vfprintf+0x232>
    116a:	88 37       	cpi	r24, 0x78	; 120
    116c:	21 f0       	breq	.+8      	; 0x1176 <vfprintf+0x238>
    116e:	af c0       	rjmp	.+350    	; 0x12ce <vfprintf+0x390>
    1170:	2f 2f       	mov	r18, r31
    1172:	20 61       	ori	r18, 0x10	; 16
    1174:	b2 2e       	mov	r11, r18
    1176:	b4 fe       	sbrs	r11, 4
    1178:	0d c0       	rjmp	.+26     	; 0x1194 <vfprintf+0x256>
    117a:	8b 2d       	mov	r24, r11
    117c:	84 60       	ori	r24, 0x04	; 4
    117e:	b8 2e       	mov	r11, r24
    1180:	09 c0       	rjmp	.+18     	; 0x1194 <vfprintf+0x256>
    1182:	24 ff       	sbrs	r18, 4
    1184:	0a c0       	rjmp	.+20     	; 0x119a <vfprintf+0x25c>
    1186:	9f 2f       	mov	r25, r31
    1188:	96 60       	ori	r25, 0x06	; 6
    118a:	b9 2e       	mov	r11, r25
    118c:	06 c0       	rjmp	.+12     	; 0x119a <vfprintf+0x25c>
    118e:	28 e0       	ldi	r18, 0x08	; 8
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	05 c0       	rjmp	.+10     	; 0x119e <vfprintf+0x260>
    1194:	20 e1       	ldi	r18, 0x10	; 16
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	02 c0       	rjmp	.+4      	; 0x119e <vfprintf+0x260>
    119a:	20 e1       	ldi	r18, 0x10	; 16
    119c:	32 e0       	ldi	r19, 0x02	; 2
    119e:	f8 01       	movw	r30, r16
    11a0:	b7 fe       	sbrs	r11, 7
    11a2:	07 c0       	rjmp	.+14     	; 0x11b2 <vfprintf+0x274>
    11a4:	60 81       	ld	r22, Z
    11a6:	71 81       	ldd	r23, Z+1	; 0x01
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	0c 5f       	subi	r16, 0xFC	; 252
    11ae:	1f 4f       	sbci	r17, 0xFF	; 255
    11b0:	06 c0       	rjmp	.+12     	; 0x11be <vfprintf+0x280>
    11b2:	60 81       	ld	r22, Z
    11b4:	71 81       	ldd	r23, Z+1	; 0x01
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 5f       	subi	r16, 0xFE	; 254
    11bc:	1f 4f       	sbci	r17, 0xFF	; 255
    11be:	a4 01       	movw	r20, r8
    11c0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <__ultoa_invert>
    11c4:	a8 2e       	mov	r10, r24
    11c6:	a8 18       	sub	r10, r8
    11c8:	fb 2d       	mov	r31, r11
    11ca:	ff 77       	andi	r31, 0x7F	; 127
    11cc:	bf 2e       	mov	r11, r31
    11ce:	b6 fe       	sbrs	r11, 6
    11d0:	0b c0       	rjmp	.+22     	; 0x11e8 <vfprintf+0x2aa>
    11d2:	2b 2d       	mov	r18, r11
    11d4:	2e 7f       	andi	r18, 0xFE	; 254
    11d6:	a5 14       	cp	r10, r5
    11d8:	50 f4       	brcc	.+20     	; 0x11ee <vfprintf+0x2b0>
    11da:	b4 fe       	sbrs	r11, 4
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <vfprintf+0x2b4>
    11de:	b2 fc       	sbrc	r11, 2
    11e0:	08 c0       	rjmp	.+16     	; 0x11f2 <vfprintf+0x2b4>
    11e2:	2b 2d       	mov	r18, r11
    11e4:	2e 7e       	andi	r18, 0xEE	; 238
    11e6:	05 c0       	rjmp	.+10     	; 0x11f2 <vfprintf+0x2b4>
    11e8:	7a 2c       	mov	r7, r10
    11ea:	2b 2d       	mov	r18, r11
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <vfprintf+0x2b6>
    11ee:	7a 2c       	mov	r7, r10
    11f0:	01 c0       	rjmp	.+2      	; 0x11f4 <vfprintf+0x2b6>
    11f2:	75 2c       	mov	r7, r5
    11f4:	24 ff       	sbrs	r18, 4
    11f6:	0d c0       	rjmp	.+26     	; 0x1212 <vfprintf+0x2d4>
    11f8:	fe 01       	movw	r30, r28
    11fa:	ea 0d       	add	r30, r10
    11fc:	f1 1d       	adc	r31, r1
    11fe:	80 81       	ld	r24, Z
    1200:	80 33       	cpi	r24, 0x30	; 48
    1202:	11 f4       	brne	.+4      	; 0x1208 <vfprintf+0x2ca>
    1204:	29 7e       	andi	r18, 0xE9	; 233
    1206:	09 c0       	rjmp	.+18     	; 0x121a <vfprintf+0x2dc>
    1208:	22 ff       	sbrs	r18, 2
    120a:	06 c0       	rjmp	.+12     	; 0x1218 <vfprintf+0x2da>
    120c:	73 94       	inc	r7
    120e:	73 94       	inc	r7
    1210:	04 c0       	rjmp	.+8      	; 0x121a <vfprintf+0x2dc>
    1212:	82 2f       	mov	r24, r18
    1214:	86 78       	andi	r24, 0x86	; 134
    1216:	09 f0       	breq	.+2      	; 0x121a <vfprintf+0x2dc>
    1218:	73 94       	inc	r7
    121a:	23 fd       	sbrc	r18, 3
    121c:	13 c0       	rjmp	.+38     	; 0x1244 <vfprintf+0x306>
    121e:	20 ff       	sbrs	r18, 0
    1220:	06 c0       	rjmp	.+12     	; 0x122e <vfprintf+0x2f0>
    1222:	5a 2c       	mov	r5, r10
    1224:	73 14       	cp	r7, r3
    1226:	18 f4       	brcc	.+6      	; 0x122e <vfprintf+0x2f0>
    1228:	53 0c       	add	r5, r3
    122a:	57 18       	sub	r5, r7
    122c:	73 2c       	mov	r7, r3
    122e:	73 14       	cp	r7, r3
    1230:	68 f4       	brcc	.+26     	; 0x124c <vfprintf+0x30e>
    1232:	b7 01       	movw	r22, r14
    1234:	80 e2       	ldi	r24, 0x20	; 32
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	2c 87       	std	Y+12, r18	; 0x0c
    123a:	0e 94 aa 09 	call	0x1354	; 0x1354 <fputc>
    123e:	73 94       	inc	r7
    1240:	2c 85       	ldd	r18, Y+12	; 0x0c
    1242:	f5 cf       	rjmp	.-22     	; 0x122e <vfprintf+0x2f0>
    1244:	73 14       	cp	r7, r3
    1246:	10 f4       	brcc	.+4      	; 0x124c <vfprintf+0x30e>
    1248:	37 18       	sub	r3, r7
    124a:	01 c0       	rjmp	.+2      	; 0x124e <vfprintf+0x310>
    124c:	31 2c       	mov	r3, r1
    124e:	24 ff       	sbrs	r18, 4
    1250:	12 c0       	rjmp	.+36     	; 0x1276 <vfprintf+0x338>
    1252:	b7 01       	movw	r22, r14
    1254:	80 e3       	ldi	r24, 0x30	; 48
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	2c 87       	std	Y+12, r18	; 0x0c
    125a:	0e 94 aa 09 	call	0x1354	; 0x1354 <fputc>
    125e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1260:	22 ff       	sbrs	r18, 2
    1262:	17 c0       	rjmp	.+46     	; 0x1292 <vfprintf+0x354>
    1264:	21 ff       	sbrs	r18, 1
    1266:	03 c0       	rjmp	.+6      	; 0x126e <vfprintf+0x330>
    1268:	88 e5       	ldi	r24, 0x58	; 88
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <vfprintf+0x334>
    126e:	88 e7       	ldi	r24, 0x78	; 120
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	b7 01       	movw	r22, r14
    1274:	0c c0       	rjmp	.+24     	; 0x128e <vfprintf+0x350>
    1276:	82 2f       	mov	r24, r18
    1278:	86 78       	andi	r24, 0x86	; 134
    127a:	59 f0       	breq	.+22     	; 0x1292 <vfprintf+0x354>
    127c:	21 fd       	sbrc	r18, 1
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <vfprintf+0x346>
    1280:	80 e2       	ldi	r24, 0x20	; 32
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <vfprintf+0x348>
    1284:	8b e2       	ldi	r24, 0x2B	; 43
    1286:	27 fd       	sbrc	r18, 7
    1288:	8d e2       	ldi	r24, 0x2D	; 45
    128a:	b7 01       	movw	r22, r14
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 aa 09 	call	0x1354	; 0x1354 <fputc>
    1292:	a5 14       	cp	r10, r5
    1294:	38 f4       	brcc	.+14     	; 0x12a4 <vfprintf+0x366>
    1296:	b7 01       	movw	r22, r14
    1298:	80 e3       	ldi	r24, 0x30	; 48
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 aa 09 	call	0x1354	; 0x1354 <fputc>
    12a0:	5a 94       	dec	r5
    12a2:	f7 cf       	rjmp	.-18     	; 0x1292 <vfprintf+0x354>
    12a4:	aa 94       	dec	r10
    12a6:	f4 01       	movw	r30, r8
    12a8:	ea 0d       	add	r30, r10
    12aa:	f1 1d       	adc	r31, r1
    12ac:	80 81       	ld	r24, Z
    12ae:	b7 01       	movw	r22, r14
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	0e 94 aa 09 	call	0x1354	; 0x1354 <fputc>
    12b6:	a1 10       	cpse	r10, r1
    12b8:	f5 cf       	rjmp	.-22     	; 0x12a4 <vfprintf+0x366>
    12ba:	33 20       	and	r3, r3
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <vfprintf+0x382>
    12be:	51 ce       	rjmp	.-862    	; 0xf62 <vfprintf+0x24>
    12c0:	b7 01       	movw	r22, r14
    12c2:	80 e2       	ldi	r24, 0x20	; 32
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 aa 09 	call	0x1354	; 0x1354 <fputc>
    12ca:	3a 94       	dec	r3
    12cc:	f6 cf       	rjmp	.-20     	; 0x12ba <vfprintf+0x37c>
    12ce:	f7 01       	movw	r30, r14
    12d0:	86 81       	ldd	r24, Z+6	; 0x06
    12d2:	97 81       	ldd	r25, Z+7	; 0x07
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <vfprintf+0x39c>
    12d6:	8f ef       	ldi	r24, 0xFF	; 255
    12d8:	9f ef       	ldi	r25, 0xFF	; 255
    12da:	2c 96       	adiw	r28, 0x0c	; 12
    12dc:	e2 e1       	ldi	r30, 0x12	; 18
    12de:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__epilogue_restores__>

000012e2 <calloc>:
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	86 9f       	mul	r24, r22
    12ec:	80 01       	movw	r16, r0
    12ee:	87 9f       	mul	r24, r23
    12f0:	10 0d       	add	r17, r0
    12f2:	96 9f       	mul	r25, r22
    12f4:	10 0d       	add	r17, r0
    12f6:	11 24       	eor	r1, r1
    12f8:	c8 01       	movw	r24, r16
    12fa:	0e 94 da 05 	call	0xbb4	; 0xbb4 <malloc>
    12fe:	ec 01       	movw	r28, r24
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	29 f0       	breq	.+10     	; 0x130e <calloc+0x2c>
    1304:	a8 01       	movw	r20, r16
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	0e 94 98 09 	call	0x1330	; 0x1330 <memset>
    130e:	ce 01       	movw	r24, r28
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	08 95       	ret

0000131a <strnlen_P>:
    131a:	fc 01       	movw	r30, r24
    131c:	05 90       	lpm	r0, Z+
    131e:	61 50       	subi	r22, 0x01	; 1
    1320:	70 40       	sbci	r23, 0x00	; 0
    1322:	01 10       	cpse	r0, r1
    1324:	d8 f7       	brcc	.-10     	; 0x131c <strnlen_P+0x2>
    1326:	80 95       	com	r24
    1328:	90 95       	com	r25
    132a:	8e 0f       	add	r24, r30
    132c:	9f 1f       	adc	r25, r31
    132e:	08 95       	ret

00001330 <memset>:
    1330:	dc 01       	movw	r26, r24
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <memset+0x6>
    1334:	6d 93       	st	X+, r22
    1336:	41 50       	subi	r20, 0x01	; 1
    1338:	50 40       	sbci	r21, 0x00	; 0
    133a:	e0 f7       	brcc	.-8      	; 0x1334 <memset+0x4>
    133c:	08 95       	ret

0000133e <strnlen>:
    133e:	fc 01       	movw	r30, r24
    1340:	61 50       	subi	r22, 0x01	; 1
    1342:	70 40       	sbci	r23, 0x00	; 0
    1344:	01 90       	ld	r0, Z+
    1346:	01 10       	cpse	r0, r1
    1348:	d8 f7       	brcc	.-10     	; 0x1340 <strnlen+0x2>
    134a:	80 95       	com	r24
    134c:	90 95       	com	r25
    134e:	8e 0f       	add	r24, r30
    1350:	9f 1f       	adc	r25, r31
    1352:	08 95       	ret

00001354 <fputc>:
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	18 2f       	mov	r17, r24
    135e:	09 2f       	mov	r16, r25
    1360:	eb 01       	movw	r28, r22
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	81 fd       	sbrc	r24, 1
    1366:	03 c0       	rjmp	.+6      	; 0x136e <fputc+0x1a>
    1368:	8f ef       	ldi	r24, 0xFF	; 255
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	20 c0       	rjmp	.+64     	; 0x13ae <fputc+0x5a>
    136e:	82 ff       	sbrs	r24, 2
    1370:	10 c0       	rjmp	.+32     	; 0x1392 <fputc+0x3e>
    1372:	4e 81       	ldd	r20, Y+6	; 0x06
    1374:	5f 81       	ldd	r21, Y+7	; 0x07
    1376:	2c 81       	ldd	r18, Y+4	; 0x04
    1378:	3d 81       	ldd	r19, Y+5	; 0x05
    137a:	42 17       	cp	r20, r18
    137c:	53 07       	cpc	r21, r19
    137e:	7c f4       	brge	.+30     	; 0x139e <fputc+0x4a>
    1380:	e8 81       	ld	r30, Y
    1382:	f9 81       	ldd	r31, Y+1	; 0x01
    1384:	9f 01       	movw	r18, r30
    1386:	2f 5f       	subi	r18, 0xFF	; 255
    1388:	3f 4f       	sbci	r19, 0xFF	; 255
    138a:	39 83       	std	Y+1, r19	; 0x01
    138c:	28 83       	st	Y, r18
    138e:	10 83       	st	Z, r17
    1390:	06 c0       	rjmp	.+12     	; 0x139e <fputc+0x4a>
    1392:	e8 85       	ldd	r30, Y+8	; 0x08
    1394:	f9 85       	ldd	r31, Y+9	; 0x09
    1396:	81 2f       	mov	r24, r17
    1398:	09 95       	icall
    139a:	89 2b       	or	r24, r25
    139c:	29 f7       	brne	.-54     	; 0x1368 <fputc+0x14>
    139e:	2e 81       	ldd	r18, Y+6	; 0x06
    13a0:	3f 81       	ldd	r19, Y+7	; 0x07
    13a2:	2f 5f       	subi	r18, 0xFF	; 255
    13a4:	3f 4f       	sbci	r19, 0xFF	; 255
    13a6:	3f 83       	std	Y+7, r19	; 0x07
    13a8:	2e 83       	std	Y+6, r18	; 0x06
    13aa:	81 2f       	mov	r24, r17
    13ac:	90 2f       	mov	r25, r16
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	08 95       	ret

000013b8 <__ultoa_invert>:
    13b8:	fa 01       	movw	r30, r20
    13ba:	aa 27       	eor	r26, r26
    13bc:	28 30       	cpi	r18, 0x08	; 8
    13be:	51 f1       	breq	.+84     	; 0x1414 <__ultoa_invert+0x5c>
    13c0:	20 31       	cpi	r18, 0x10	; 16
    13c2:	81 f1       	breq	.+96     	; 0x1424 <__ultoa_invert+0x6c>
    13c4:	e8 94       	clt
    13c6:	6f 93       	push	r22
    13c8:	6e 7f       	andi	r22, 0xFE	; 254
    13ca:	6e 5f       	subi	r22, 0xFE	; 254
    13cc:	7f 4f       	sbci	r23, 0xFF	; 255
    13ce:	8f 4f       	sbci	r24, 0xFF	; 255
    13d0:	9f 4f       	sbci	r25, 0xFF	; 255
    13d2:	af 4f       	sbci	r26, 0xFF	; 255
    13d4:	b1 e0       	ldi	r27, 0x01	; 1
    13d6:	3e d0       	rcall	.+124    	; 0x1454 <__ultoa_invert+0x9c>
    13d8:	b4 e0       	ldi	r27, 0x04	; 4
    13da:	3c d0       	rcall	.+120    	; 0x1454 <__ultoa_invert+0x9c>
    13dc:	67 0f       	add	r22, r23
    13de:	78 1f       	adc	r23, r24
    13e0:	89 1f       	adc	r24, r25
    13e2:	9a 1f       	adc	r25, r26
    13e4:	a1 1d       	adc	r26, r1
    13e6:	68 0f       	add	r22, r24
    13e8:	79 1f       	adc	r23, r25
    13ea:	8a 1f       	adc	r24, r26
    13ec:	91 1d       	adc	r25, r1
    13ee:	a1 1d       	adc	r26, r1
    13f0:	6a 0f       	add	r22, r26
    13f2:	71 1d       	adc	r23, r1
    13f4:	81 1d       	adc	r24, r1
    13f6:	91 1d       	adc	r25, r1
    13f8:	a1 1d       	adc	r26, r1
    13fa:	20 d0       	rcall	.+64     	; 0x143c <__ultoa_invert+0x84>
    13fc:	09 f4       	brne	.+2      	; 0x1400 <__ultoa_invert+0x48>
    13fe:	68 94       	set
    1400:	3f 91       	pop	r19
    1402:	2a e0       	ldi	r18, 0x0A	; 10
    1404:	26 9f       	mul	r18, r22
    1406:	11 24       	eor	r1, r1
    1408:	30 19       	sub	r19, r0
    140a:	30 5d       	subi	r19, 0xD0	; 208
    140c:	31 93       	st	Z+, r19
    140e:	de f6       	brtc	.-74     	; 0x13c6 <__ultoa_invert+0xe>
    1410:	cf 01       	movw	r24, r30
    1412:	08 95       	ret
    1414:	46 2f       	mov	r20, r22
    1416:	47 70       	andi	r20, 0x07	; 7
    1418:	40 5d       	subi	r20, 0xD0	; 208
    141a:	41 93       	st	Z+, r20
    141c:	b3 e0       	ldi	r27, 0x03	; 3
    141e:	0f d0       	rcall	.+30     	; 0x143e <__ultoa_invert+0x86>
    1420:	c9 f7       	brne	.-14     	; 0x1414 <__ultoa_invert+0x5c>
    1422:	f6 cf       	rjmp	.-20     	; 0x1410 <__ultoa_invert+0x58>
    1424:	46 2f       	mov	r20, r22
    1426:	4f 70       	andi	r20, 0x0F	; 15
    1428:	40 5d       	subi	r20, 0xD0	; 208
    142a:	4a 33       	cpi	r20, 0x3A	; 58
    142c:	18 f0       	brcs	.+6      	; 0x1434 <__ultoa_invert+0x7c>
    142e:	49 5d       	subi	r20, 0xD9	; 217
    1430:	31 fd       	sbrc	r19, 1
    1432:	40 52       	subi	r20, 0x20	; 32
    1434:	41 93       	st	Z+, r20
    1436:	02 d0       	rcall	.+4      	; 0x143c <__ultoa_invert+0x84>
    1438:	a9 f7       	brne	.-22     	; 0x1424 <__ultoa_invert+0x6c>
    143a:	ea cf       	rjmp	.-44     	; 0x1410 <__ultoa_invert+0x58>
    143c:	b4 e0       	ldi	r27, 0x04	; 4
    143e:	a6 95       	lsr	r26
    1440:	97 95       	ror	r25
    1442:	87 95       	ror	r24
    1444:	77 95       	ror	r23
    1446:	67 95       	ror	r22
    1448:	ba 95       	dec	r27
    144a:	c9 f7       	brne	.-14     	; 0x143e <__ultoa_invert+0x86>
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	61 05       	cpc	r22, r1
    1450:	71 05       	cpc	r23, r1
    1452:	08 95       	ret
    1454:	9b 01       	movw	r18, r22
    1456:	ac 01       	movw	r20, r24
    1458:	0a 2e       	mov	r0, r26
    145a:	06 94       	lsr	r0
    145c:	57 95       	ror	r21
    145e:	47 95       	ror	r20
    1460:	37 95       	ror	r19
    1462:	27 95       	ror	r18
    1464:	ba 95       	dec	r27
    1466:	c9 f7       	brne	.-14     	; 0x145a <__ultoa_invert+0xa2>
    1468:	62 0f       	add	r22, r18
    146a:	73 1f       	adc	r23, r19
    146c:	84 1f       	adc	r24, r20
    146e:	95 1f       	adc	r25, r21
    1470:	a0 1d       	adc	r26, r0
    1472:	08 95       	ret

00001474 <__prologue_saves__>:
    1474:	2f 92       	push	r2
    1476:	3f 92       	push	r3
    1478:	4f 92       	push	r4
    147a:	5f 92       	push	r5
    147c:	6f 92       	push	r6
    147e:	7f 92       	push	r7
    1480:	8f 92       	push	r8
    1482:	9f 92       	push	r9
    1484:	af 92       	push	r10
    1486:	bf 92       	push	r11
    1488:	cf 92       	push	r12
    148a:	df 92       	push	r13
    148c:	ef 92       	push	r14
    148e:	ff 92       	push	r15
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	ca 1b       	sub	r28, r26
    149e:	db 0b       	sbc	r29, r27
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	09 94       	ijmp

000014ac <__epilogue_restores__>:
    14ac:	2a 88       	ldd	r2, Y+18	; 0x12
    14ae:	39 88       	ldd	r3, Y+17	; 0x11
    14b0:	48 88       	ldd	r4, Y+16	; 0x10
    14b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    14b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    14b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    14b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    14ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    14bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    14be:	b9 84       	ldd	r11, Y+9	; 0x09
    14c0:	c8 84       	ldd	r12, Y+8	; 0x08
    14c2:	df 80       	ldd	r13, Y+7	; 0x07
    14c4:	ee 80       	ldd	r14, Y+6	; 0x06
    14c6:	fd 80       	ldd	r15, Y+5	; 0x05
    14c8:	0c 81       	ldd	r16, Y+4	; 0x04
    14ca:	1b 81       	ldd	r17, Y+3	; 0x03
    14cc:	aa 81       	ldd	r26, Y+2	; 0x02
    14ce:	b9 81       	ldd	r27, Y+1	; 0x01
    14d0:	ce 0f       	add	r28, r30
    14d2:	d1 1d       	adc	r29, r1
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	ed 01       	movw	r28, r26
    14e0:	08 95       	ret

000014e2 <_exit>:
    14e2:	f8 94       	cli

000014e4 <__stop_program>:
    14e4:	ff cf       	rjmp	.-2      	; 0x14e4 <__stop_program>
