
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002c8  00800100  00002132  000021c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002132  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004c  008003c8  008003c8  0000248e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000248e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000400  00000000  00000000  000024ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004bc0  00000000  00000000  000028ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001a31  00000000  00000000  000074aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001692  00000000  00000000  00008edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b34  00000000  00000000  0000a570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c2f  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000025f8  00000000  00000000  0000bcd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000360  00000000  00000000  0000e2cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	20 54       	subi	r18, 0x40	; 64
      92:	54 38       	cpi	r21, 0x84	; 132
      94:	54 54       	subi	r21, 0x44	; 68
      96:	58 00       	.word	0x0058	; ????
      98:	38 64       	ori	r19, 0x48	; 72
      9a:	54 54       	subi	r21, 0x44	; 68
      9c:	4c 38       	cpi	r20, 0x8C	; 140
      9e:	00 00       	nop
      a0:	20 50       	subi	r18, 0x00	; 0
      a2:	54 55       	subi	r21, 0x54	; 84
      a4:	54 78       	andi	r21, 0x84	; 132
      a6:	40 00       	.word	0x0040	; ????
      a8:	60 18       	sub	r6, r0
      aa:	16 11       	cpse	r17, r6
      ac:	7f 49       	sbci	r23, 0x9F	; 159
      ae:	49 00       	.word	0x0049	; ????
      b0:	5c 22       	and	r5, r28
      b2:	51 49       	sbci	r21, 0x91	; 145
      b4:	45 22       	and	r4, r21
      b6:	1d 00       	.word	0x001d	; ????
      b8:	60 30       	cpi	r22, 0x00	; 0
      ba:	28 25       	eor	r18, r8
      bc:	28 30       	cpi	r18, 0x08	; 8
      be:	60 00       	.word	0x0060	; ????
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <keyboard_unselect_prev+0x44>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e2 e3       	ldi	r30, 0x32	; 50
     37c:	f1 e2       	ldi	r31, 0x21	; 33
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 3c       	cpi	r26, 0xC8	; 200
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	24 e0       	ldi	r18, 0x04	; 4
     38c:	a8 ec       	ldi	r26, 0xC8	; 200
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 31       	cpi	r26, 0x14	; 20
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 4c 09 	call	0x1298	; 0x1298 <main>
     39e:	0c 94 97 10 	jmp	0x212e	; 0x212e <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
     3a6:	30 98       	cbi	0x06, 0	; 6
     3a8:	08 95       	ret

000003aa <ADC_read>:
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3aa:	84 30       	cpi	r24, 0x04	; 4
     3ac:	40 f4       	brcc	.+16     	; 0x3be <ADC_read+0x14>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
     3ae:	8c 5f       	subi	r24, 0xFC	; 252
     3b0:	80 93 00 14 	sts	0x1400, r24
	
	//wait 'til /INTR is low
	while(test_bit(PINE, PINE0));
     3b4:	28 99       	sbic	0x05, 0	; 5
     3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <ADC_read+0xa>
	//reset interrupt
	inter = 0;
	*/

	//return current value
	return *adc; 
     3b8:	80 91 00 14 	lds	r24, 0x1400
     3bc:	08 95       	ret
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3be:	80 e0       	ldi	r24, 0x00	; 0
	inter = 0;
	*/

	//return current value
	return *adc; 
     3c0:	08 95       	ret

000003c2 <brightness_init>:
#include "joy.h"
#include "OLED_driver.h"
#include "defines.h"


brightness_init() {
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
	OLED_reset();
     3ca:	0e 94 bd 09 	call	0x137a	; 0x137a <OLED_reset>
	fprintf(OLED, "%s ", "l_slider:");
     3ce:	8b e5       	ldi	r24, 0x5B	; 91
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	9f 93       	push	r25
     3d4:	8f 93       	push	r24
     3d6:	05 e6       	ldi	r16, 0x65	; 101
     3d8:	11 e0       	ldi	r17, 0x01	; 1
     3da:	1f 93       	push	r17
     3dc:	0f 93       	push	r16
     3de:	c6 e0       	ldi	r28, 0x06	; 6
     3e0:	d1 e0       	ldi	r29, 0x01	; 1
     3e2:	df 93       	push	r29
     3e4:	cf 93       	push	r28
     3e6:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <fprintf>
	OLED_pos(1,0);
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	0e 94 94 09 	call	0x1328	; 0x1328 <OLED_pos>
	fprintf(OLED, "%s ", "sets brightness");
     3f2:	89 e6       	ldi	r24, 0x69	; 105
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	9f 93       	push	r25
     3f8:	8f 93       	push	r24
     3fa:	1f 93       	push	r17
     3fc:	0f 93       	push	r16
     3fe:	df 93       	push	r29
     400:	cf 93       	push	r28
     402:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <fprintf>
	OLED_pos(2,0);
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	0e 94 94 09 	call	0x1328	; 0x1328 <OLED_pos>
	fprintf(OLED, "%s ", "l_button: back");
     40e:	89 e7       	ldi	r24, 0x79	; 121
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	9f 93       	push	r25
     414:	8f 93       	push	r24
     416:	1f 93       	push	r17
     418:	0f 93       	push	r16
     41a:	df 93       	push	r29
     41c:	cf 93       	push	r28
     41e:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <fprintf>
	for (int line = 4; line < 8; line++) {
		OLED_set_line(line);
     422:	84 e0       	ldi	r24, 0x04	; 4
     424:	0e 94 23 0a 	call	0x1446	; 0x1446 <OLED_set_line>
     428:	85 e0       	ldi	r24, 0x05	; 5
     42a:	0e 94 23 0a 	call	0x1446	; 0x1446 <OLED_set_line>
     42e:	86 e0       	ldi	r24, 0x06	; 6
     430:	0e 94 23 0a 	call	0x1446	; 0x1446 <OLED_set_line>
     434:	87 e0       	ldi	r24, 0x07	; 7
     436:	0e 94 23 0a 	call	0x1446	; 0x1446 <OLED_set_line>
     43a:	8d b7       	in	r24, 0x3d	; 61
     43c:	9e b7       	in	r25, 0x3e	; 62
     43e:	42 96       	adiw	r24, 0x12	; 18
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	f8 94       	cli
     444:	9e bf       	out	0x3e, r25	; 62
     446:	0f be       	out	0x3f, r0	; 63
     448:	8d bf       	out	0x3d, r24	; 61
	}
	
}
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	1f 91       	pop	r17
     450:	0f 91       	pop	r16
     452:	08 95       	ret

00000454 <brightness_run>:

brightness_run() {
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
	brightness_init();
     45a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <brightness_init>
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
		slider_position = SLI_getPosition();
		//printf("slider_position %d\n", slider_position.right);
		printf("slider_position (left) %d\n", slider_position.left);
     45e:	c8 e8       	ldi	r28, 0x88	; 136
     460:	d1 e0       	ldi	r29, 0x01	; 1
}

brightness_run() {
	brightness_init();
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     462:	10 c0       	rjmp	.+32     	; 0x484 <brightness_run+0x30>
		slider_position = SLI_getPosition();
     464:	0e 94 aa 03 	call	0x754	; 0x754 <SLI_getPosition>
     468:	16 2f       	mov	r17, r22
		//printf("slider_position %d\n", slider_position.right);
		printf("slider_position (left) %d\n", slider_position.left);
     46a:	7f 93       	push	r23
     46c:	6f 93       	push	r22
     46e:	df 93       	push	r29
     470:	cf 93       	push	r28
     472:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <printf>
		OLED_set_brightness(slider_position.left); //RIGHT funker ikke
     476:	81 2f       	mov	r24, r17
     478:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <OLED_set_brightness>
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
}

brightness_run() {
	brightness_init();
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
     48a:	89 2b       	or	r24, r25
     48c:	59 f3       	breq	.-42     	; 0x464 <brightness_run+0x10>
		slider_position = SLI_getPosition();
		//printf("slider_position %d\n", slider_position.right);
		printf("slider_position (left) %d\n", slider_position.left);
		OLED_set_brightness(slider_position.left); //RIGHT funker ikke
	}
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	1f 91       	pop	r17
     494:	08 95       	ret

00000496 <CAN_int_vect>:
     496:	cf 93       	push	r28
     498:	8c e2       	ldi	r24, 0x2C	; 44
     49a:	0e 94 82 07 	call	0xf04	; 0xf04 <MCP2515_read>
     49e:	c8 2f       	mov	r28, r24
     4a0:	80 ff       	sbrs	r24, 0
     4a2:	0b c0       	rjmp	.+22     	; 0x4ba <CAN_int_vect+0x24>
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	61 e0       	ldi	r22, 0x01	; 1
     4a8:	8c e2       	ldi	r24, 0x2C	; 44
     4aa:	0e 94 94 07 	call	0xf28	; 0xf28 <MCP2515_bit_modify>
     4ae:	21 e0       	ldi	r18, 0x01	; 1
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	30 93 cb 03 	sts	0x03CB, r19
     4b6:	20 93 ca 03 	sts	0x03CA, r18
     4ba:	c1 ff       	sbrs	r28, 1
     4bc:	0b c0       	rjmp	.+22     	; 0x4d4 <CAN_int_vect+0x3e>
     4be:	40 e0       	ldi	r20, 0x00	; 0
     4c0:	62 e0       	ldi	r22, 0x02	; 2
     4c2:	8c e2       	ldi	r24, 0x2C	; 44
     4c4:	0e 94 94 07 	call	0xf28	; 0xf28 <MCP2515_bit_modify>
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	90 93 c9 03 	sts	0x03C9, r25
     4d0:	80 93 c8 03 	sts	0x03C8, r24
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <__vector_1>:
     4d8:	1f 92       	push	r1
     4da:	0f 92       	push	r0
     4dc:	0f b6       	in	r0, 0x3f	; 63
     4de:	0f 92       	push	r0
     4e0:	11 24       	eor	r1, r1
     4e2:	2f 93       	push	r18
     4e4:	3f 93       	push	r19
     4e6:	4f 93       	push	r20
     4e8:	5f 93       	push	r21
     4ea:	6f 93       	push	r22
     4ec:	7f 93       	push	r23
     4ee:	8f 93       	push	r24
     4f0:	9f 93       	push	r25
     4f2:	af 93       	push	r26
     4f4:	bf 93       	push	r27
     4f6:	ef 93       	push	r30
     4f8:	ff 93       	push	r31
     4fa:	0e 94 4b 02 	call	0x496	; 0x496 <CAN_int_vect>
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	bf 91       	pop	r27
     504:	af 91       	pop	r26
     506:	9f 91       	pop	r25
     508:	8f 91       	pop	r24
     50a:	7f 91       	pop	r23
     50c:	6f 91       	pop	r22
     50e:	5f 91       	pop	r21
     510:	4f 91       	pop	r20
     512:	3f 91       	pop	r19
     514:	2f 91       	pop	r18
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <JOY_calibrate>:
	clear_bit(DDRB,PB2);
	clear_bit(SFIOR, PUD);
	JOY_calibrate();
}

void JOY_calibrate(){
     520:	bf 92       	push	r11
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
	max.x = 0;
     532:	10 92 d6 03 	sts	0x03D6, r1
	max.y = 0;
     536:	10 92 d7 03 	sts	0x03D7, r1
	min.x = 255;
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	80 93 da 03 	sts	0x03DA, r24
	min.y = 255;
     540:	80 93 db 03 	sts	0x03DB, r24
	uint8_t x;
	uint8_t y;
	OLED_reset();
     544:	0e 94 bd 09 	call	0x137a	; 0x137a <OLED_reset>
	printf("\nMove the joystick to all extreme points.\n");
     548:	83 ea       	ldi	r24, 0xA3	; 163
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <puts>
	printf("Press the joystick when you're done.\n");
     550:	8d ec       	ldi	r24, 0xCD	; 205
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <puts>
	fprintf(OLED, "%s ", "CALIBRATE JOY"); 
     558:	82 ef       	ldi	r24, 0xF2	; 242
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	9f 93       	push	r25
     55e:	8f 93       	push	r24
     560:	85 e6       	ldi	r24, 0x65	; 101
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	9f 93       	push	r25
     566:	8f 93       	push	r24
     568:	84 e1       	ldi	r24, 0x14	; 20
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	9f 93       	push	r25
     56e:	8f 93       	push	r24
     570:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <fprintf>
	//check channels 
	while(test_bit(PINB,PINB2)){
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
		// Read sensor values
		x = ADC_read(0);
		y = ADC_read(1);
		
		// Calibrate x
		if (min.x > x) min.x = x; 
     580:	0a ed       	ldi	r16, 0xDA	; 218
     582:	13 e0       	ldi	r17, 0x03	; 3
		else if (max.x < x) max.x = x;
     584:	0f 2e       	mov	r0, r31
     586:	f6 ed       	ldi	r31, 0xD6	; 214
     588:	cf 2e       	mov	r12, r31
     58a:	f3 e0       	ldi	r31, 0x03	; 3
     58c:	df 2e       	mov	r13, r31
     58e:	f0 2d       	mov	r31, r0
		
		// Calibrate y
		if (min.y > y) min.y = y;
     590:	cb ed       	ldi	r28, 0xDB	; 219
     592:	d3 e0       	ldi	r29, 0x03	; 3
		else if (max.y < y) max.y = y;		
     594:	0f 2e       	mov	r0, r31
     596:	f7 ed       	ldi	r31, 0xD7	; 215
     598:	ef 2e       	mov	r14, r31
     59a:	f3 e0       	ldi	r31, 0x03	; 3
     59c:	ff 2e       	mov	r15, r31
     59e:	f0 2d       	mov	r31, r0
	OLED_reset();
	printf("\nMove the joystick to all extreme points.\n");
	printf("Press the joystick when you're done.\n");
	fprintf(OLED, "%s ", "CALIBRATE JOY"); 
	//check channels 
	while(test_bit(PINB,PINB2)){
     5a0:	1c c0       	rjmp	.+56     	; 0x5da <JOY_calibrate+0xba>
		// Read sensor values
		x = ADC_read(0);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     5a8:	b8 2e       	mov	r11, r24
		y = ADC_read(1);
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
		
		// Calibrate x
		if (min.x > x) min.x = x; 
     5b0:	f8 01       	movw	r30, r16
     5b2:	90 81       	ld	r25, Z
     5b4:	b9 16       	cp	r11, r25
     5b6:	10 f4       	brcc	.+4      	; 0x5bc <JOY_calibrate+0x9c>
     5b8:	b0 82       	st	Z, r11
     5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <JOY_calibrate+0xa6>
		else if (max.x < x) max.x = x;
     5bc:	f6 01       	movw	r30, r12
     5be:	90 81       	ld	r25, Z
     5c0:	9b 15       	cp	r25, r11
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <JOY_calibrate+0xa6>
     5c4:	b0 82       	st	Z, r11
		
		// Calibrate y
		if (min.y > y) min.y = y;
     5c6:	98 81       	ld	r25, Y
     5c8:	89 17       	cp	r24, r25
     5ca:	10 f4       	brcc	.+4      	; 0x5d0 <JOY_calibrate+0xb0>
     5cc:	88 83       	st	Y, r24
     5ce:	05 c0       	rjmp	.+10     	; 0x5da <JOY_calibrate+0xba>
		else if (max.y < y) max.y = y;		
     5d0:	f7 01       	movw	r30, r14
     5d2:	90 81       	ld	r25, Z
     5d4:	98 17       	cp	r25, r24
     5d6:	08 f4       	brcc	.+2      	; 0x5da <JOY_calibrate+0xba>
     5d8:	80 83       	st	Z, r24
	OLED_reset();
	printf("\nMove the joystick to all extreme points.\n");
	printf("Press the joystick when you're done.\n");
	fprintf(OLED, "%s ", "CALIBRATE JOY"); 
	//check channels 
	while(test_bit(PINB,PINB2)){
     5da:	b2 99       	sbic	0x16, 2	; 22
     5dc:	e2 cf       	rjmp	.-60     	; 0x5a2 <JOY_calibrate+0x82>
		if (min.y > y) min.y = y;
		else if (max.y < y) max.y = y;		
	}

	// Find distance from middle to edges (radius)
	rad.x = (max.x - min.x) / 2;
     5de:	e0 91 d6 03 	lds	r30, 0x03D6
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	60 91 da 03 	lds	r22, 0x03DA
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	9f 01       	movw	r18, r30
     5ec:	26 1b       	sub	r18, r22
     5ee:	37 0b       	sbc	r19, r23
     5f0:	c9 01       	movw	r24, r18
     5f2:	99 23       	and	r25, r25
     5f4:	0c f4       	brge	.+2      	; 0x5f8 <JOY_calibrate+0xd8>
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	95 95       	asr	r25
     5fa:	87 95       	ror	r24
     5fc:	80 93 d8 03 	sts	0x03D8, r24
	rad.y = (max.y - min.y) / 2;
     600:	40 91 d7 03 	lds	r20, 0x03D7
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	20 91 db 03 	lds	r18, 0x03DB
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	da 01       	movw	r26, r20
     60e:	a2 1b       	sub	r26, r18
     610:	b3 0b       	sbc	r27, r19
     612:	cd 01       	movw	r24, r26
     614:	0a f4       	brpl	.+2      	; 0x618 <JOY_calibrate+0xf8>
     616:	01 96       	adiw	r24, 0x01	; 1
     618:	95 95       	asr	r25
     61a:	87 95       	ror	r24
     61c:	80 93 d9 03 	sts	0x03D9, r24
	
	// Find mid point using edges.
	mid.x = (max.x + min.x) / 2;
     620:	6e 0f       	add	r22, r30
     622:	7f 1f       	adc	r23, r31
     624:	75 95       	asr	r23
     626:	67 95       	ror	r22
     628:	60 93 dc 03 	sts	0x03DC, r22
	mid.y = (max.y + min.y) / 2;
     62c:	24 0f       	add	r18, r20
     62e:	35 1f       	adc	r19, r21
     630:	35 95       	asr	r19
     632:	27 95       	ror	r18
     634:	20 93 dd 03 	sts	0x03DD, r18
}
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	df 90       	pop	r13
     646:	cf 90       	pop	r12
     648:	bf 90       	pop	r11
     64a:	08 95       	ret

0000064c <JOY_init>:
	uint8_t y;
} max, min, rad, mid;

void JOY_init(){
	//set pull-up resistors on PORTB for JOY_button
	set_bit(PORTB,PB2);
     64c:	c2 9a       	sbi	0x18, 2	; 24
	clear_bit(DDRB,PB2);
     64e:	ba 98       	cbi	0x17, 2	; 23
	clear_bit(SFIOR, PUD);
     650:	80 b7       	in	r24, 0x30	; 48
     652:	8b 7f       	andi	r24, 0xFB	; 251
     654:	80 bf       	out	0x30, r24	; 48
	JOY_calibrate();
     656:	0e 94 90 02 	call	0x520	; 0x520 <JOY_calibrate>
     65a:	08 95       	ret

0000065c <JOY_button_pressed>:
	mid.x = (max.x + min.x) / 2;
	mid.y = (max.y + min.y) / 2;
}

int JOY_button_pressed(button b) {
	switch (b) {
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	41 f0       	breq	.+16     	; 0x670 <JOY_button_pressed+0x14>
     660:	18 f0       	brcs	.+6      	; 0x668 <JOY_button_pressed+0xc>
     662:	82 30       	cpi	r24, 0x02	; 2
     664:	51 f0       	breq	.+20     	; 0x67a <JOY_button_pressed+0x1e>
     666:	11 c0       	rjmp	.+34     	; 0x68a <JOY_button_pressed+0x2e>
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     668:	86 b3       	in	r24, 0x16	; 22
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return 1;
     670:	86 b3       	in	r24, 0x16	; 22
}

int JOY_button_pressed(button b) {
	switch (b) {
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     672:	86 95       	lsr	r24
     674:	81 70       	andi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return 1;
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return 1;
     67a:	86 b3       	in	r24, 0x16	; 22
     67c:	86 95       	lsr	r24
     67e:	86 95       	lsr	r24
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	89 27       	eor	r24, r25
}

int JOY_button_pressed(button b) {
	switch (b) {
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     684:	81 70       	andi	r24, 0x01	; 1
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	08 95       	ret
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return 1;
		break;
	}
	return 0;
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
}
     68e:	08 95       	ret

00000690 <JOY_getPosition>:

JOY_position_t JOY_getPosition() {
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
	JOY_position_t JOY_position;
	JOY_position.x = (100 * (ADC_read(X_COORD) - mid.x)) / rad.x;
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     69c:	28 2f       	mov	r18, r24
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	80 91 dc 03 	lds	r24, 0x03DC
     6a4:	28 1b       	sub	r18, r24
     6a6:	31 09       	sbc	r19, r1
     6a8:	14 e6       	ldi	r17, 0x64	; 100
     6aa:	12 9f       	mul	r17, r18
     6ac:	c0 01       	movw	r24, r0
     6ae:	13 9f       	mul	r17, r19
     6b0:	90 0d       	add	r25, r0
     6b2:	11 24       	eor	r1, r1
     6b4:	60 91 d8 03 	lds	r22, 0x03D8
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	0e 94 af 0b 	call	0x175e	; 0x175e <__divmodhi4>
     6be:	eb 01       	movw	r28, r22
	JOY_position.y = (100 * (ADC_read(Y_COORD) - mid.y)) / rad.y;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     6c6:	28 2f       	mov	r18, r24
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	80 91 dd 03 	lds	r24, 0x03DD
     6ce:	28 1b       	sub	r18, r24
     6d0:	31 09       	sbc	r19, r1
     6d2:	12 9f       	mul	r17, r18
     6d4:	c0 01       	movw	r24, r0
     6d6:	13 9f       	mul	r17, r19
     6d8:	90 0d       	add	r25, r0
     6da:	11 24       	eor	r1, r1
     6dc:	60 91 d9 03 	lds	r22, 0x03D9
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	0e 94 af 0b 	call	0x175e	; 0x175e <__divmodhi4>
     6e6:	9b 01       	movw	r18, r22
	return JOY_position;
     6e8:	be 01       	movw	r22, r28
     6ea:	c9 01       	movw	r24, r18
}
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	08 95       	ret

000006f4 <JOY_getDirection>:

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
     6f4:	0e 94 48 03 	call	0x690	; 0x690 <JOY_getPosition>
     6f8:	fb 01       	movw	r30, r22
     6fa:	ac 01       	movw	r20, r24
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     6fc:	9b 01       	movw	r18, r22
     6fe:	2c 5f       	subi	r18, 0xFC	; 252
     700:	3f 4f       	sbci	r19, 0xFF	; 255
     702:	29 30       	cpi	r18, 0x09	; 9
     704:	31 05       	cpc	r19, r1
     706:	30 f4       	brcc	.+12     	; 0x714 <JOY_getDirection+0x20>
     708:	9c 01       	movw	r18, r24
     70a:	2c 5f       	subi	r18, 0xFC	; 252
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	29 30       	cpi	r18, 0x09	; 9
     710:	31 05       	cpc	r19, r1
     712:	e0 f0       	brcs	.+56     	; 0x74c <JOY_getDirection+0x58>

	// The x-coordinate is dominating
	else if (abs(position.x) > abs(position.y)) {
     714:	db 01       	movw	r26, r22
     716:	ff 23       	and	r31, r31
     718:	24 f4       	brge	.+8      	; 0x722 <JOY_getDirection+0x2e>
     71a:	aa 27       	eor	r26, r26
     71c:	bb 27       	eor	r27, r27
     71e:	a6 1b       	sub	r26, r22
     720:	b7 0b       	sbc	r27, r23
     722:	9c 01       	movw	r18, r24
     724:	55 23       	and	r21, r21
     726:	24 f4       	brge	.+8      	; 0x730 <JOY_getDirection+0x3c>
     728:	22 27       	eor	r18, r18
     72a:	33 27       	eor	r19, r19
     72c:	28 1b       	sub	r18, r24
     72e:	39 0b       	sbc	r19, r25
     730:	2a 17       	cp	r18, r26
     732:	3b 07       	cpc	r19, r27
     734:	34 f4       	brge	.+12     	; 0x742 <JOY_getDirection+0x4e>
		// Positive x => RIGHT
		if (position.x > 0) return RIGHT;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	1e 16       	cp	r1, r30
     73a:	1f 06       	cpc	r1, r31
     73c:	54 f0       	brlt	.+20     	; 0x752 <JOY_getDirection+0x5e>
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	08 95       	ret
		else return LEFT;

	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
     742:	14 16       	cp	r1, r20
     744:	15 06       	cpc	r1, r21
     746:	24 f4       	brge	.+8      	; 0x750 <JOY_getDirection+0x5c>
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	08 95       	ret

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     74c:	84 e0       	ldi	r24, 0x04	; 4
     74e:	08 95       	ret
	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
		// Negative y => DOWN
		else return DOWN;
     750:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     752:	08 95       	ret

00000754 <SLI_getPosition>:

SLI_position_t SLI_getPosition() {
     754:	cf 93       	push	r28
	SLI_position_t pos;
	pos.left = ADC_read(LEFT_CH);
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     75c:	c8 2f       	mov	r28, r24
	pos.right = ADC_read(RIGHT_CH);
     75e:	83 e0       	ldi	r24, 0x03	; 3
     760:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     764:	28 2f       	mov	r18, r24
	return pos;
     766:	6c 2f       	mov	r22, r28
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	82 2f       	mov	r24, r18
     76c:	90 e0       	ldi	r25, 0x00	; 0
}
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <append_char>:

/* HELPER FUNCTION		*/
/************************************/

void append_char(char c) {
	int len = strlen(written_string);
     772:	ee ed       	ldi	r30, 0xDE	; 222
     774:	f3 e0       	ldi	r31, 0x03	; 3
     776:	01 90       	ld	r0, Z+
     778:	00 20       	and	r0, r0
     77a:	e9 f7       	brne	.-6      	; 0x776 <append_char+0x4>
	written_string[len] = c;
     77c:	31 97       	sbiw	r30, 0x01	; 1
     77e:	80 83       	st	Z, r24
	written_string[len + 1] = '\0';
     780:	11 82       	std	Z+1, r1	; 0x01
	string_position++;
     782:	80 91 d4 03 	lds	r24, 0x03D4
     786:	90 91 d5 03 	lds	r25, 0x03D5
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	90 93 d5 03 	sts	0x03D5, r25
     790:	80 93 d4 03 	sts	0x03D4, r24
     794:	08 95       	ret

00000796 <remove_last_char>:
	fprintf(OLED, "%s", written_string);
	keyboard_goto(pos.y, pos.x);
}

void remove_last_char() {
	written_string[strlen(written_string) - 1] = '\0';
     796:	ee ed       	ldi	r30, 0xDE	; 222
     798:	f3 e0       	ldi	r31, 0x03	; 3
     79a:	01 90       	ld	r0, Z+
     79c:	00 20       	and	r0, r0
     79e:	e9 f7       	brne	.-6      	; 0x79a <remove_last_char+0x4>
     7a0:	32 97       	sbiw	r30, 0x02	; 2
     7a2:	10 82       	st	Z, r1
     7a4:	08 95       	ret

000007a6 <keyboard_goto>:

}

// 5 lines x 16 columns
void keyboard_goto(int line, int column) {
	OLED_pos(line + 3, (column+2) * 8);
     7a6:	6e 5f       	subi	r22, 0xFE	; 254
     7a8:	7f 4f       	sbci	r23, 0xFF	; 255
     7aa:	66 0f       	add	r22, r22
     7ac:	66 0f       	add	r22, r22
     7ae:	66 0f       	add	r22, r22
     7b0:	8d 5f       	subi	r24, 0xFD	; 253
     7b2:	0e 94 94 09 	call	0x1328	; 0x1328 <OLED_pos>
     7b6:	08 95       	ret

000007b8 <print_string>:
	written_string[len + 1] = '\0';
	string_position++;
}

void print_string() {
	OLED_home();
     7b8:	0e 94 aa 09 	call	0x1354	; 0x1354 <OLED_home>
	char print_string[16];
	//memcpy(print_string, written_string[strlen(written_string)-string_position], 16);
	//fprintf(OLED, "%s", print_string);
	fprintf(OLED, "%s", written_string);
     7bc:	64 e2       	ldi	r22, 0x24	; 36
     7be:	71 e0       	ldi	r23, 0x01	; 1
     7c0:	8e ed       	ldi	r24, 0xDE	; 222
     7c2:	93 e0       	ldi	r25, 0x03	; 3
     7c4:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <fputs>
	keyboard_goto(pos.y, pos.x);
     7c8:	60 91 d0 03 	lds	r22, 0x03D0
     7cc:	70 91 d1 03 	lds	r23, 0x03D1
     7d0:	80 91 d2 03 	lds	r24, 0x03D2
     7d4:	90 91 d3 03 	lds	r25, 0x03D3
     7d8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <keyboard_goto>
     7dc:	08 95       	ret

000007de <keyboard_goto_line>:
void keyboard_goto(int line, int column) {
	OLED_pos(line + 3, (column+2) * 8);
}

void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <keyboard_goto>
     7e6:	08 95       	ret

000007e8 <keyboard_init>:
}

/* FUNCTION IMPLEMENTATIONS			*/
/************************************/

void keyboard_init() {
     7e8:	ef 92       	push	r14
     7ea:	ff 92       	push	r15
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
	OLED_reset();
     7f4:	0e 94 bd 09 	call	0x137a	; 0x137a <OLED_reset>
	letters = LETTERS_SMALL;
     7f8:	87 ee       	ldi	r24, 0xE7	; 231
     7fa:	92 e0       	ldi	r25, 0x02	; 2
     7fc:	90 93 23 01 	sts	0x0123, r25
     800:	80 93 22 01 	sts	0x0122, r24
	keyboard_goto_line(0);
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 ef 03 	call	0x7de	; 0x7de <keyboard_goto_line>
	pos.x = 0;
     80c:	10 92 d1 03 	sts	0x03D1, r1
     810:	10 92 d0 03 	sts	0x03D0, r1
	pos.y = 0;
     814:	10 92 d3 03 	sts	0x03D3, r1
     818:	10 92 d2 03 	sts	0x03D2, r1
	strcpy(written_string, "\0");
     81c:	10 92 de 03 	sts	0x03DE, r1

	//The first letter is selected by default
	print_char(letters[0], INVERSE);
     820:	e0 91 22 01 	lds	r30, 0x0122
     824:	f0 91 23 01 	lds	r31, 0x0123
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <print_char>

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     832:	c1 e0       	ldi	r28, 0x01	; 1
     834:	d0 e0       	ldi	r29, 0x00	; 0
		if (i % LINE_LENGTH == 0) {
     836:	0c e0       	ldi	r16, 0x0C	; 12
     838:	10 e0       	ldi	r17, 0x00	; 0
			keyboard_goto_line(++pos.y);
     83a:	0f 2e       	mov	r0, r31
     83c:	f2 ed       	ldi	r31, 0xD2	; 210
     83e:	ef 2e       	mov	r14, r31
     840:	f3 e0       	ldi	r31, 0x03	; 3
     842:	ff 2e       	mov	r15, r31
     844:	f0 2d       	mov	r31, r0
     846:	0e c0       	rjmp	.+28     	; 0x864 <keyboard_init+0x7c>
	//The first letter is selected by default
	print_char(letters[0], INVERSE);

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0) {
     848:	ce 01       	movw	r24, r28
     84a:	b8 01       	movw	r22, r16
     84c:	0e 94 af 0b 	call	0x175e	; 0x175e <__divmodhi4>
     850:	89 2b       	or	r24, r25
     852:	41 f4       	brne	.+16     	; 0x864 <keyboard_init+0x7c>
			keyboard_goto_line(++pos.y);
     854:	f7 01       	movw	r30, r14
     856:	80 81       	ld	r24, Z
     858:	91 81       	ldd	r25, Z+1	; 0x01
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	91 83       	std	Z+1, r25	; 0x01
     85e:	80 83       	st	Z, r24
     860:	0e 94 ef 03 	call	0x7de	; 0x7de <keyboard_goto_line>
		}
		print_char(letters[i], NORMAL);
     864:	e0 91 22 01 	lds	r30, 0x0122
     868:	f0 91 23 01 	lds	r31, 0x0123
     86c:	ec 0f       	add	r30, r28
     86e:	fd 1f       	adc	r31, r29
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	80 81       	ld	r24, Z
     876:	0e 94 76 0b 	call	0x16ec	; 0x16ec <print_char>

	//The first letter is selected by default
	print_char(letters[0], INVERSE);

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     87a:	21 96       	adiw	r28, 0x01	; 1
     87c:	c0 33       	cpi	r28, 0x30	; 48
     87e:	d1 05       	cpc	r29, r1
     880:	19 f7       	brne	.-58     	; 0x848 <keyboard_init+0x60>
			keyboard_goto_line(++pos.y);
		}
		print_char(letters[i], NORMAL);
	}
	//print the tool buttons
	keyboard_goto_line(4);
     882:	84 e0       	ldi	r24, 0x04	; 4
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	0e 94 ef 03 	call	0x7de	; 0x7de <keyboard_goto_line>
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <print_options_bar>

	//reset y-position
	pos.y = 0;
     89e:	10 92 d3 03 	sts	0x03D3, r1
     8a2:	10 92 d2 03 	sts	0x03D2, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a6:	ff ef       	ldi	r31, 0xFF	; 255
     8a8:	2f e7       	ldi	r18, 0x7F	; 127
     8aa:	87 e0       	ldi	r24, 0x07	; 7
     8ac:	f1 50       	subi	r31, 0x01	; 1
     8ae:	20 40       	sbci	r18, 0x00	; 0
     8b0:	80 40       	sbci	r24, 0x00	; 0
     8b2:	e1 f7       	brne	.-8      	; 0x8ac <keyboard_init+0xc4>
     8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <keyboard_init+0xce>
     8b6:	00 00       	nop

	//wait so it doesnt register button pressed right away
	_delay_ms(500);

}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	08 95       	ret

000008c6 <keyboard_print>:


void keyboard_print() {
     8c6:	cf 92       	push	r12
     8c8:	df 92       	push	r13
     8ca:	ef 92       	push	r14
     8cc:	ff 92       	push	r15
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
	keyboard_goto_line(0);
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 ef 03 	call	0x7de	; 0x7de <keyboard_goto_line>
	pos.y = 0;
     8de:	10 92 d3 03 	sts	0x03D3, r1
     8e2:	10 92 d2 03 	sts	0x03D2, r1
     8e6:	01 e0       	ldi	r16, 0x01	; 1
     8e8:	10 e0       	ldi	r17, 0x00	; 0
     8ea:	c0 e0       	ldi	r28, 0x00	; 0
     8ec:	d0 e0       	ldi	r29, 0x00	; 0
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
     8ee:	0f 2e       	mov	r0, r31
     8f0:	fc e0       	ldi	r31, 0x0C	; 12
     8f2:	ef 2e       	mov	r14, r31
     8f4:	f1 2c       	mov	r15, r1
     8f6:	f0 2d       	mov	r31, r0
			keyboard_goto_line(++pos.y);
     8f8:	0f 2e       	mov	r0, r31
     8fa:	f2 ed       	ldi	r31, 0xD2	; 210
     8fc:	cf 2e       	mov	r12, r31
     8fe:	f3 e0       	ldi	r31, 0x03	; 3
     900:	df 2e       	mov	r13, r31
     902:	f0 2d       	mov	r31, r0
     904:	03 c0       	rjmp	.+6      	; 0x90c <keyboard_print+0x46>
     906:	21 96       	adiw	r28, 0x01	; 1
     908:	0f 5f       	subi	r16, 0xFF	; 255
     90a:	1f 4f       	sbci	r17, 0xFF	; 255
void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
     90c:	ce 01       	movw	r24, r28
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 af 0b 	call	0x175e	; 0x175e <__divmodhi4>
     914:	89 2b       	or	r24, r25
     916:	51 f4       	brne	.+20     	; 0x92c <keyboard_print+0x66>
     918:	20 97       	sbiw	r28, 0x00	; 0
     91a:	29 f1       	breq	.+74     	; 0x966 <keyboard_print+0xa0>
			keyboard_goto_line(++pos.y);
     91c:	f6 01       	movw	r30, r12
     91e:	80 81       	ld	r24, Z
     920:	91 81       	ldd	r25, Z+1	; 0x01
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	91 83       	std	Z+1, r25	; 0x01
     926:	80 83       	st	Z, r24
     928:	0e 94 ef 03 	call	0x7de	; 0x7de <keyboard_goto_line>
		}
		print_char(letters[i], NORMAL);
     92c:	e0 91 22 01 	lds	r30, 0x0122
     930:	f0 91 23 01 	lds	r31, 0x0123
     934:	ec 0f       	add	r30, r28
     936:	fd 1f       	adc	r31, r29
     938:	60 e0       	ldi	r22, 0x00	; 0
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	0e 94 76 0b 	call	0x16ec	; 0x16ec <print_char>

void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
     942:	00 33       	cpi	r16, 0x30	; 48
     944:	11 05       	cpc	r17, r1
     946:	fc f2       	brlt	.-66     	; 0x906 <keyboard_print+0x40>
			keyboard_goto_line(++pos.y);
		}
		print_char(letters[i], NORMAL);
	}
	//print the tool buttons
	keyboard_goto_line(4);
     948:	84 e0       	ldi	r24, 0x04	; 4
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 ef 03 	call	0x7de	; 0x7de <keyboard_goto_line>
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <print_options_bar>
     964:	0c c0       	rjmp	.+24     	; 0x97e <keyboard_print+0xb8>
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
			keyboard_goto_line(++pos.y);
		}
		print_char(letters[i], NORMAL);
     966:	e0 91 22 01 	lds	r30, 0x0122
     96a:	f0 91 23 01 	lds	r31, 0x0123
     96e:	ec 0f       	add	r30, r28
     970:	fd 1f       	adc	r31, r29
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	0e 94 76 0b 	call	0x16ec	; 0x16ec <print_char>
     97c:	c4 cf       	rjmp	.-120    	; 0x906 <keyboard_print+0x40>
	//print the tool buttons
	keyboard_goto_line(4);
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);


}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	ff 90       	pop	r15
     988:	ef 90       	pop	r14
     98a:	df 90       	pop	r13
     98c:	cf 90       	pop	r12
     98e:	08 95       	ret

00000990 <toggle_shift>:
void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
	}

void toggle_shift() {
	if (letters == LETTERS_SMALL) {
     990:	80 91 22 01 	lds	r24, 0x0122
     994:	90 91 23 01 	lds	r25, 0x0123
     998:	87 5e       	subi	r24, 0xE7	; 231
     99a:	92 40       	sbci	r25, 0x02	; 2
     99c:	39 f4       	brne	.+14     	; 0x9ac <toggle_shift+0x1c>
		letters = LETTERS_BIG;
     99e:	87 eb       	ldi	r24, 0xB7	; 183
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	90 93 23 01 	sts	0x0123, r25
     9a6:	80 93 22 01 	sts	0x0122, r24
     9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <toggle_shift+0x28>
	}
	else {
		letters = LETTERS_SMALL;
     9ac:	87 ee       	ldi	r24, 0xE7	; 231
     9ae:	92 e0       	ldi	r25, 0x02	; 2
     9b0:	90 93 23 01 	sts	0x0123, r25
     9b4:	80 93 22 01 	sts	0x0122, r24
	}

	keyboard_print();
     9b8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <keyboard_print>
	keyboard_goto_line(4);
     9bc:	84 e0       	ldi	r24, 0x04	; 4
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 ef 03 	call	0x7de	; 0x7de <keyboard_goto_line>
	print_shift(INVERSE);
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <print_shift>
		
	pos.y = 4;
     9cc:	84 e0       	ldi	r24, 0x04	; 4
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	90 93 d3 03 	sts	0x03D3, r25
     9d4:	80 93 d2 03 	sts	0x03D2, r24
	pos.x = 0;
     9d8:	10 92 d1 03 	sts	0x03D1, r1
     9dc:	10 92 d0 03 	sts	0x03D0, r1
     9e0:	08 95       	ret

000009e2 <keyboard_register_position_change>:
}

void keyboard_register_position_change(JOY_direction_t direction) {
	if (direction == NEUTRAL);
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <keyboard_register_position_change+0x6>
     9e6:	8a c0       	rjmp	.+276    	; 0xafc <keyboard_register_position_change+0x11a>
	else if (direction == DOWN && pos.y < 4) {
     9e8:	83 30       	cpi	r24, 0x03	; 3
     9ea:	91 f4       	brne	.+36     	; 0xa10 <keyboard_register_position_change+0x2e>
     9ec:	20 91 d2 03 	lds	r18, 0x03D2
     9f0:	30 91 d3 03 	lds	r19, 0x03D3
     9f4:	24 30       	cpi	r18, 0x04	; 4
     9f6:	31 05       	cpc	r19, r1
     9f8:	bc f5       	brge	.+110    	; 0xa68 <keyboard_register_position_change+0x86>
		prev_pos.y = pos.y++;
     9fa:	c9 01       	movw	r24, r18
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	90 93 d3 03 	sts	0x03D3, r25
     a02:	80 93 d2 03 	sts	0x03D2, r24
     a06:	30 93 cf 03 	sts	0x03CF, r19
     a0a:	20 93 ce 03 	sts	0x03CE, r18
     a0e:	08 95       	ret
	}
	else if (direction == UP && pos.y > 0) {
     a10:	82 30       	cpi	r24, 0x02	; 2
     a12:	a1 f4       	brne	.+40     	; 0xa3c <keyboard_register_position_change+0x5a>
     a14:	80 91 d2 03 	lds	r24, 0x03D2
     a18:	90 91 d3 03 	lds	r25, 0x03D3
     a1c:	18 16       	cp	r1, r24
     a1e:	19 06       	cpc	r1, r25
     a20:	0c f0       	brlt	.+2      	; 0xa24 <keyboard_register_position_change+0x42>
     a22:	6c c0       	rjmp	.+216    	; 0xafc <keyboard_register_position_change+0x11a>
		prev_pos.y = pos.y--;
     a24:	9c 01       	movw	r18, r24
     a26:	21 50       	subi	r18, 0x01	; 1
     a28:	31 09       	sbc	r19, r1
     a2a:	30 93 d3 03 	sts	0x03D3, r19
     a2e:	20 93 d2 03 	sts	0x03D2, r18
     a32:	90 93 cf 03 	sts	0x03CF, r25
     a36:	80 93 ce 03 	sts	0x03CE, r24
     a3a:	08 95       	ret
	}
	else if (direction == LEFT && pos.x > 0) {
     a3c:	81 11       	cpse	r24, r1
     a3e:	14 c0       	rjmp	.+40     	; 0xa68 <keyboard_register_position_change+0x86>
     a40:	80 91 d0 03 	lds	r24, 0x03D0
     a44:	90 91 d1 03 	lds	r25, 0x03D1
     a48:	18 16       	cp	r1, r24
     a4a:	19 06       	cpc	r1, r25
     a4c:	0c f0       	brlt	.+2      	; 0xa50 <keyboard_register_position_change+0x6e>
     a4e:	56 c0       	rjmp	.+172    	; 0xafc <keyboard_register_position_change+0x11a>
		prev_pos.x = pos.x--;
     a50:	9c 01       	movw	r18, r24
     a52:	21 50       	subi	r18, 0x01	; 1
     a54:	31 09       	sbc	r19, r1
     a56:	30 93 d1 03 	sts	0x03D1, r19
     a5a:	20 93 d0 03 	sts	0x03D0, r18
     a5e:	90 93 cd 03 	sts	0x03CD, r25
     a62:	80 93 cc 03 	sts	0x03CC, r24
     a66:	08 95       	ret
	}
	else if (direction == RIGHT && pos.x < LINE_LENGTH - 1) {
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	09 f0       	breq	.+2      	; 0xa6e <keyboard_register_position_change+0x8c>
     a6c:	47 c0       	rjmp	.+142    	; 0xafc <keyboard_register_position_change+0x11a>
     a6e:	80 91 d0 03 	lds	r24, 0x03D0
     a72:	90 91 d1 03 	lds	r25, 0x03D1
     a76:	8b 30       	cpi	r24, 0x0B	; 11
     a78:	91 05       	cpc	r25, r1
     a7a:	0c f0       	brlt	.+2      	; 0xa7e <keyboard_register_position_change+0x9c>
     a7c:	3f c0       	rjmp	.+126    	; 0xafc <keyboard_register_position_change+0x11a>

		if (pos.y == 4) {
     a7e:	20 91 d2 03 	lds	r18, 0x03D2
     a82:	30 91 d3 03 	lds	r19, 0x03D3
     a86:	24 30       	cpi	r18, 0x04	; 4
     a88:	31 05       	cpc	r19, r1
     a8a:	69 f5       	brne	.+90     	; 0xae6 <keyboard_register_position_change+0x104>
			if (pos.x < 2) {
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	91 05       	cpc	r25, r1
     a90:	5c f4       	brge	.+22     	; 0xaa8 <keyboard_register_position_change+0xc6>
				prev_pos.x = 0;
     a92:	10 92 cd 03 	sts	0x03CD, r1
     a96:	10 92 cc 03 	sts	0x03CC, r1
				pos.x = 2;
     a9a:	82 e0       	ldi	r24, 0x02	; 2
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	90 93 d1 03 	sts	0x03D1, r25
     aa2:	80 93 d0 03 	sts	0x03D0, r24
     aa6:	08 95       	ret
			}
			else if (pos.x < 8) {
     aa8:	88 30       	cpi	r24, 0x08	; 8
     aaa:	91 05       	cpc	r25, r1
     aac:	6c f4       	brge	.+26     	; 0xac8 <keyboard_register_position_change+0xe6>
				prev_pos.x = 2;
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	90 93 cd 03 	sts	0x03CD, r25
     ab6:	80 93 cc 03 	sts	0x03CC, r24
				pos.x = 8;
     aba:	88 e0       	ldi	r24, 0x08	; 8
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	90 93 d1 03 	sts	0x03D1, r25
     ac2:	80 93 d0 03 	sts	0x03D0, r24
     ac6:	08 95       	ret
			}
			else if (pos.x < 10) {
     ac8:	0a 97       	sbiw	r24, 0x0a	; 10
     aca:	c4 f4       	brge	.+48     	; 0xafc <keyboard_register_position_change+0x11a>
				prev_pos.x = 8;
     acc:	88 e0       	ldi	r24, 0x08	; 8
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	90 93 cd 03 	sts	0x03CD, r25
     ad4:	80 93 cc 03 	sts	0x03CC, r24
				pos.x = 10;
     ad8:	8a e0       	ldi	r24, 0x0A	; 10
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	90 93 d1 03 	sts	0x03D1, r25
     ae0:	80 93 d0 03 	sts	0x03D0, r24
     ae4:	08 95       	ret
			}
		}
		else {
			prev_pos.x = pos.x++;
     ae6:	9c 01       	movw	r18, r24
     ae8:	2f 5f       	subi	r18, 0xFF	; 255
     aea:	3f 4f       	sbci	r19, 0xFF	; 255
     aec:	30 93 d1 03 	sts	0x03D1, r19
     af0:	20 93 d0 03 	sts	0x03D0, r18
     af4:	90 93 cd 03 	sts	0x03CD, r25
     af8:	80 93 cc 03 	sts	0x03CC, r24
     afc:	08 95       	ret

00000afe <keyboard_unselect_prev>:
}


void keyboard_unselect_prev() {
	//old item is a letter
	if (prev_pos.y < 4) {
     afe:	80 91 ce 03 	lds	r24, 0x03CE
     b02:	90 91 cf 03 	lds	r25, 0x03CF
     b06:	84 30       	cpi	r24, 0x04	; 4
     b08:	91 05       	cpc	r25, r1
     b0a:	34 f5       	brge	.+76     	; 0xb58 <keyboard_unselect_prev+0x5a>
		keyboard_goto(prev_pos.y, prev_pos.x);
     b0c:	60 91 cc 03 	lds	r22, 0x03CC
     b10:	70 91 cd 03 	lds	r23, 0x03CD
     b14:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <keyboard_goto>
		print_char(letters[prev_pos.y * LINE_LENGTH + prev_pos.x], NORMAL);
     b18:	80 91 ce 03 	lds	r24, 0x03CE
     b1c:	90 91 cf 03 	lds	r25, 0x03CF
     b20:	fc 01       	movw	r30, r24
     b22:	ee 0f       	add	r30, r30
     b24:	ff 1f       	adc	r31, r31
     b26:	8e 0f       	add	r24, r30
     b28:	9f 1f       	adc	r25, r31
     b2a:	fc 01       	movw	r30, r24
     b2c:	ee 0f       	add	r30, r30
     b2e:	ff 1f       	adc	r31, r31
     b30:	ee 0f       	add	r30, r30
     b32:	ff 1f       	adc	r31, r31
     b34:	20 91 cc 03 	lds	r18, 0x03CC
     b38:	30 91 cd 03 	lds	r19, 0x03CD
     b3c:	e2 0f       	add	r30, r18
     b3e:	f3 1f       	adc	r31, r19
     b40:	80 91 22 01 	lds	r24, 0x0122
     b44:	90 91 23 01 	lds	r25, 0x0123
     b48:	e8 0f       	add	r30, r24
     b4a:	f9 1f       	adc	r31, r25
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	80 81       	ld	r24, Z
     b52:	0e 94 76 0b 	call	0x16ec	; 0x16ec <print_char>
     b56:	08 95       	ret
	}

	//old item is in toolbar
	else {
		if (prev_pos.x < 2) {
     b58:	20 91 cc 03 	lds	r18, 0x03CC
     b5c:	30 91 cd 03 	lds	r19, 0x03CD
     b60:	22 30       	cpi	r18, 0x02	; 2
     b62:	31 05       	cpc	r19, r1
     b64:	6c f4       	brge	.+26     	; 0xb80 <keyboard_unselect_prev+0x82>
			prev_pos.x = 0;
     b66:	10 92 cd 03 	sts	0x03CD, r1
     b6a:	10 92 cc 03 	sts	0x03CC, r1
			keyboard_goto(prev_pos.y, prev_pos.x);
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <keyboard_goto>
			print_shift(NORMAL);
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <print_shift>
     b7e:	08 95       	ret
		}
		else if (prev_pos.x < 8) {
     b80:	28 30       	cpi	r18, 0x08	; 8
     b82:	31 05       	cpc	r19, r1
     b84:	7c f4       	brge	.+30     	; 0xba4 <keyboard_unselect_prev+0xa6>
			prev_pos.x = 2; //start of spacebar
     b86:	22 e0       	ldi	r18, 0x02	; 2
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	30 93 cd 03 	sts	0x03CD, r19
     b8e:	20 93 cc 03 	sts	0x03CC, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
     b92:	62 e0       	ldi	r22, 0x02	; 2
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <keyboard_goto>
			print_spacebar(NORMAL);
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 21 0b 	call	0x1642	; 0x1642 <print_spacebar>
     ba2:	08 95       	ret
		}
		else if (prev_pos.x < 10) {
     ba4:	2a 30       	cpi	r18, 0x0A	; 10
     ba6:	31 05       	cpc	r19, r1
     ba8:	7c f4       	brge	.+30     	; 0xbc8 <keyboard_unselect_prev+0xca>
			prev_pos.x = 8; //start of left arrow
     baa:	28 e0       	ldi	r18, 0x08	; 8
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	30 93 cd 03 	sts	0x03CD, r19
     bb2:	20 93 cc 03 	sts	0x03CC, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
     bb6:	68 e0       	ldi	r22, 0x08	; 8
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <keyboard_goto>
			print_left_arrow(NORMAL);
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 c9 0a 	call	0x1592	; 0x1592 <print_left_arrow>
     bc6:	08 95       	ret
		}
		else {
			prev_pos.x = 10; //start of right arrow
     bc8:	2a e0       	ldi	r18, 0x0A	; 10
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	30 93 cd 03 	sts	0x03CD, r19
     bd0:	20 93 cc 03 	sts	0x03CC, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
     bd4:	6a e0       	ldi	r22, 0x0A	; 10
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <keyboard_goto>
			print_right_arrow(NORMAL);
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <print_right_arrow>
     be4:	08 95       	ret

00000be6 <keyboard_select_curr>:
	}
}

void keyboard_select_curr() {
	//selected item is a letter
	if (pos.y < 4) {
     be6:	80 91 d2 03 	lds	r24, 0x03D2
     bea:	90 91 d3 03 	lds	r25, 0x03D3
     bee:	84 30       	cpi	r24, 0x04	; 4
     bf0:	91 05       	cpc	r25, r1
     bf2:	34 f5       	brge	.+76     	; 0xc40 <keyboard_select_curr+0x5a>
		keyboard_goto(pos.y, pos.x);
     bf4:	60 91 d0 03 	lds	r22, 0x03D0
     bf8:	70 91 d1 03 	lds	r23, 0x03D1
     bfc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <keyboard_goto>
		print_char(letters[pos.y * LINE_LENGTH + pos.x], INVERSE);
     c00:	80 91 d2 03 	lds	r24, 0x03D2
     c04:	90 91 d3 03 	lds	r25, 0x03D3
     c08:	fc 01       	movw	r30, r24
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	8e 0f       	add	r24, r30
     c10:	9f 1f       	adc	r25, r31
     c12:	fc 01       	movw	r30, r24
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	ee 0f       	add	r30, r30
     c1a:	ff 1f       	adc	r31, r31
     c1c:	20 91 d0 03 	lds	r18, 0x03D0
     c20:	30 91 d1 03 	lds	r19, 0x03D1
     c24:	e2 0f       	add	r30, r18
     c26:	f3 1f       	adc	r31, r19
     c28:	80 91 22 01 	lds	r24, 0x0122
     c2c:	90 91 23 01 	lds	r25, 0x0123
     c30:	e8 0f       	add	r30, r24
     c32:	f9 1f       	adc	r31, r25
     c34:	61 e0       	ldi	r22, 0x01	; 1
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	0e 94 76 0b 	call	0x16ec	; 0x16ec <print_char>
     c3e:	08 95       	ret
	}

	//selected menu item is in toolbar
	else {
		if (pos.x < 2) {
     c40:	20 91 d0 03 	lds	r18, 0x03D0
     c44:	30 91 d1 03 	lds	r19, 0x03D1
     c48:	22 30       	cpi	r18, 0x02	; 2
     c4a:	31 05       	cpc	r19, r1
     c4c:	6c f4       	brge	.+26     	; 0xc68 <keyboard_select_curr+0x82>
			pos.x = 0;
     c4e:	10 92 d1 03 	sts	0x03D1, r1
     c52:	10 92 d0 03 	sts	0x03D0, r1
			keyboard_goto(pos.y, pos.x);
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <keyboard_goto>
			print_shift(INVERSE);
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <print_shift>
     c66:	08 95       	ret
		}
		else if (pos.x < 8) {
     c68:	28 30       	cpi	r18, 0x08	; 8
     c6a:	31 05       	cpc	r19, r1
     c6c:	7c f4       	brge	.+30     	; 0xc8c <keyboard_select_curr+0xa6>
			pos.x = 2; //start of spacebar
     c6e:	22 e0       	ldi	r18, 0x02	; 2
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	30 93 d1 03 	sts	0x03D1, r19
     c76:	20 93 d0 03 	sts	0x03D0, r18
			keyboard_goto(pos.y, pos.x);
     c7a:	62 e0       	ldi	r22, 0x02	; 2
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <keyboard_goto>
			print_spacebar(INVERSE);
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 21 0b 	call	0x1642	; 0x1642 <print_spacebar>
     c8a:	08 95       	ret
		}
		else if (pos.x < 10) {
     c8c:	2a 30       	cpi	r18, 0x0A	; 10
     c8e:	31 05       	cpc	r19, r1
     c90:	7c f4       	brge	.+30     	; 0xcb0 <keyboard_select_curr+0xca>
			pos.x = 8; //start of left arrow
     c92:	28 e0       	ldi	r18, 0x08	; 8
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	30 93 d1 03 	sts	0x03D1, r19
     c9a:	20 93 d0 03 	sts	0x03D0, r18
			keyboard_goto(pos.y, pos.x);
     c9e:	68 e0       	ldi	r22, 0x08	; 8
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <keyboard_goto>
			print_left_arrow(INVERSE);
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 c9 0a 	call	0x1592	; 0x1592 <print_left_arrow>
     cae:	08 95       	ret
		}
		else {
			pos.x = 10; //start of right arrow
     cb0:	2a e0       	ldi	r18, 0x0A	; 10
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	30 93 d1 03 	sts	0x03D1, r19
     cb8:	20 93 d0 03 	sts	0x03D0, r18
			keyboard_goto(pos.y, pos.x);
     cbc:	6a e0       	ldi	r22, 0x0A	; 10
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <keyboard_goto>
			print_right_arrow(INVERSE);
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <print_right_arrow>
     ccc:	08 95       	ret

00000cce <keyboard_item_pressed>:
		}
	}
}

void keyboard_item_pressed() {
	if (pos.y < 4) {
     cce:	80 91 d2 03 	lds	r24, 0x03D2
     cd2:	90 91 d3 03 	lds	r25, 0x03D3
     cd6:	84 30       	cpi	r24, 0x04	; 4
     cd8:	91 05       	cpc	r25, r1
     cda:	e4 f4       	brge	.+56     	; 0xd14 <keyboard_item_pressed+0x46>
		append_char(letters[pos.y * LINE_LENGTH + pos.x]);
     cdc:	fc 01       	movw	r30, r24
     cde:	ee 0f       	add	r30, r30
     ce0:	ff 1f       	adc	r31, r31
     ce2:	8e 0f       	add	r24, r30
     ce4:	9f 1f       	adc	r25, r31
     ce6:	fc 01       	movw	r30, r24
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	ee 0f       	add	r30, r30
     cee:	ff 1f       	adc	r31, r31
     cf0:	20 91 d0 03 	lds	r18, 0x03D0
     cf4:	30 91 d1 03 	lds	r19, 0x03D1
     cf8:	e2 0f       	add	r30, r18
     cfa:	f3 1f       	adc	r31, r19
     cfc:	80 91 22 01 	lds	r24, 0x0122
     d00:	90 91 23 01 	lds	r25, 0x0123
     d04:	e8 0f       	add	r30, r24
     d06:	f9 1f       	adc	r31, r25
     d08:	80 81       	ld	r24, Z
     d0a:	0e 94 b9 03 	call	0x772	; 0x772 <append_char>
		//printf("APPEND written string: %s", written_string);
		//replace with a print function that remembers which part is printed, used with < >
		print_string();
     d0e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <print_string>
     d12:	08 95       	ret
	}
	else {
		if (pos.x < 2) {
     d14:	80 91 d0 03 	lds	r24, 0x03D0
     d18:	90 91 d1 03 	lds	r25, 0x03D1
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	91 05       	cpc	r25, r1
     d20:	1c f4       	brge	.+6      	; 0xd28 <keyboard_item_pressed+0x5a>
			toggle_shift();
     d22:	0e 94 c8 04 	call	0x990	; 0x990 <toggle_shift>
     d26:	08 95       	ret
		}
		else if (pos.x < 8) {
     d28:	88 30       	cpi	r24, 0x08	; 8
     d2a:	91 05       	cpc	r25, r1
     d2c:	34 f4       	brge	.+12     	; 0xd3a <keyboard_item_pressed+0x6c>
			append_char(32);
     d2e:	80 e2       	ldi	r24, 0x20	; 32
     d30:	0e 94 b9 03 	call	0x772	; 0x772 <append_char>
			print_string();
     d34:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <print_string>
     d38:	08 95       	ret
		}
		else if (pos.x < 10 && string_position > 0) {
     d3a:	8a 30       	cpi	r24, 0x0A	; 10
     d3c:	91 05       	cpc	r25, r1
     d3e:	74 f4       	brge	.+28     	; 0xd5c <keyboard_item_pressed+0x8e>
     d40:	20 91 d4 03 	lds	r18, 0x03D4
     d44:	30 91 d5 03 	lds	r19, 0x03D5
     d48:	12 16       	cp	r1, r18
     d4a:	13 06       	cpc	r1, r19
     d4c:	3c f4       	brge	.+14     	; 0xd5c <keyboard_item_pressed+0x8e>
			string_position--;
     d4e:	21 50       	subi	r18, 0x01	; 1
     d50:	31 09       	sbc	r19, r1
     d52:	30 93 d5 03 	sts	0x03D5, r19
     d56:	20 93 d4 03 	sts	0x03D4, r18
     d5a:	08 95       	ret
		}
		else if (pos.x < 12 && string_position < strlen(written_string)) {
     d5c:	0c 97       	sbiw	r24, 0x0c	; 12
     d5e:	a4 f4       	brge	.+40     	; 0xd88 <keyboard_item_pressed+0xba>
     d60:	80 91 d4 03 	lds	r24, 0x03D4
     d64:	90 91 d5 03 	lds	r25, 0x03D5
     d68:	ee ed       	ldi	r30, 0xDE	; 222
     d6a:	f3 e0       	ldi	r31, 0x03	; 3
     d6c:	01 90       	ld	r0, Z+
     d6e:	00 20       	and	r0, r0
     d70:	e9 f7       	brne	.-6      	; 0xd6c <keyboard_item_pressed+0x9e>
     d72:	31 97       	sbiw	r30, 0x01	; 1
     d74:	ee 5d       	subi	r30, 0xDE	; 222
     d76:	f3 40       	sbci	r31, 0x03	; 3
     d78:	8e 17       	cp	r24, r30
     d7a:	9f 07       	cpc	r25, r31
     d7c:	28 f4       	brcc	.+10     	; 0xd88 <keyboard_item_pressed+0xba>
			string_position++;
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	90 93 d5 03 	sts	0x03D5, r25
     d84:	80 93 d4 03 	sts	0x03D4, r24
     d88:	08 95       	ret

00000d8a <keyboard_run>:
	}
}



void keyboard_run() {
     d8a:	4f 92       	push	r4
     d8c:	5f 92       	push	r5
     d8e:	6f 92       	push	r6
     d90:	7f 92       	push	r7
     d92:	8f 92       	push	r8
     d94:	9f 92       	push	r9
     d96:	af 92       	push	r10
     d98:	bf 92       	push	r11
     d9a:	cf 92       	push	r12
     d9c:	df 92       	push	r13
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
	keyboard_init();
     daa:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <keyboard_init>
	while (!JOY_button_pressed(LEFT_BUTTON)) {
		//Check if we switch letter
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
     dae:	0f 2e       	mov	r0, r31
     db0:	fe ec       	ldi	r31, 0xCE	; 206
     db2:	af 2e       	mov	r10, r31
     db4:	f3 e0       	ldi	r31, 0x03	; 3
     db6:	bf 2e       	mov	r11, r31
     db8:	f0 2d       	mov	r31, r0
     dba:	0f 2e       	mov	r0, r31
     dbc:	f2 ed       	ldi	r31, 0xD2	; 210
     dbe:	cf 2e       	mov	r12, r31
     dc0:	f3 e0       	ldi	r31, 0x03	; 3
     dc2:	df 2e       	mov	r13, r31
     dc4:	f0 2d       	mov	r31, r0
			printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
     dc6:	0f 2e       	mov	r0, r31
     dc8:	f0 ed       	ldi	r31, 0xD0	; 208
     dca:	ef 2e       	mov	r14, r31
     dcc:	f3 e0       	ldi	r31, 0x03	; 3
     dce:	ff 2e       	mov	r15, r31
     dd0:	f0 2d       	mov	r31, r0
     dd2:	0c ec       	ldi	r16, 0xCC	; 204
     dd4:	13 e0       	ldi	r17, 0x03	; 3
     dd6:	0f 2e       	mov	r0, r31
     dd8:	f1 e8       	ldi	r31, 0x81	; 129
     dda:	8f 2e       	mov	r8, r31
     ddc:	f2 e0       	ldi	r31, 0x02	; 2
     dde:	9f 2e       	mov	r9, r31
     de0:	f0 2d       	mov	r31, r0
			position_moved = 1;
     de2:	66 24       	eor	r6, r6
     de4:	63 94       	inc	r6
     de6:	71 2c       	mov	r7, r1
     de8:	41 2c       	mov	r4, r1
     dea:	51 2c       	mov	r5, r1

	//detect changes
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
     dec:	74 c0       	rjmp	.+232    	; 0xed6 <keyboard_run+0x14c>
		//Check if we switch letter
		direction = JOY_getDirection();
     dee:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <JOY_getDirection>
		keyboard_register_position_change(direction);
     df2:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <keyboard_register_position_change>
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
     df6:	f5 01       	movw	r30, r10
     df8:	80 81       	ld	r24, Z
     dfa:	91 81       	ldd	r25, Z+1	; 0x01
     dfc:	f6 01       	movw	r30, r12
     dfe:	20 81       	ld	r18, Z
     e00:	31 81       	ldd	r19, Z+1	; 0x01
     e02:	82 17       	cp	r24, r18
     e04:	93 07       	cpc	r25, r19
     e06:	49 f4       	brne	.+18     	; 0xe1a <keyboard_run+0x90>
     e08:	f8 01       	movw	r30, r16
     e0a:	60 81       	ld	r22, Z
     e0c:	71 81       	ldd	r23, Z+1	; 0x01
     e0e:	f7 01       	movw	r30, r14
     e10:	40 81       	ld	r20, Z
     e12:	51 81       	ldd	r21, Z+1	; 0x01
     e14:	64 17       	cp	r22, r20
     e16:	75 07       	cpc	r23, r21
     e18:	71 f1       	breq	.+92     	; 0xe76 <keyboard_run+0xec>
			printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
     e1a:	f7 01       	movw	r30, r14
     e1c:	41 81       	ldd	r20, Z+1	; 0x01
     e1e:	4f 93       	push	r20
     e20:	40 81       	ld	r20, Z
     e22:	4f 93       	push	r20
     e24:	f8 01       	movw	r30, r16
     e26:	41 81       	ldd	r20, Z+1	; 0x01
     e28:	4f 93       	push	r20
     e2a:	40 81       	ld	r20, Z
     e2c:	4f 93       	push	r20
     e2e:	3f 93       	push	r19
     e30:	2f 93       	push	r18
     e32:	9f 93       	push	r25
     e34:	8f 93       	push	r24
     e36:	9f 92       	push	r9
     e38:	8f 92       	push	r8
     e3a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <printf>
			position_moved = 1;
			//unselect the old letter and select the new one
			keyboard_unselect_prev();
     e3e:	0e 94 7f 05 	call	0xafe	; 0xafe <keyboard_unselect_prev>
			keyboard_select_curr();
     e42:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <keyboard_select_curr>

			//Reset position
			prev_pos.x = pos.x;
     e46:	f7 01       	movw	r30, r14
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	f8 01       	movw	r30, r16
     e4e:	91 83       	std	Z+1, r25	; 0x01
     e50:	80 83       	st	Z, r24
			prev_pos.y = pos.y;
     e52:	f6 01       	movw	r30, r12
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
     e58:	f5 01       	movw	r30, r10
     e5a:	91 83       	std	Z+1, r25	; 0x01
     e5c:	80 83       	st	Z, r24
     e5e:	2d b7       	in	r18, 0x3d	; 61
     e60:	3e b7       	in	r19, 0x3e	; 62
     e62:	26 5f       	subi	r18, 0xF6	; 246
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	3e bf       	out	0x3e, r19	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	2d bf       	out	0x3d, r18	; 61
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
			printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
			position_moved = 1;
     e70:	c6 2d       	mov	r28, r6
     e72:	d7 2d       	mov	r29, r7
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <keyboard_run+0xf0>
     e76:	c4 2d       	mov	r28, r4
     e78:	d5 2d       	mov	r29, r5
			prev_pos.y = pos.y;
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
     e80:	89 2b       	or	r24, r25
     e82:	29 f0       	breq	.+10     	; 0xe8e <keyboard_run+0x104>
			button_pressed = 1;
			keyboard_item_pressed();
     e84:	0e 94 67 06 	call	0xcce	; 0xcce <keyboard_item_pressed>
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
			button_pressed = 1;
     e88:	86 2d       	mov	r24, r6
     e8a:	97 2d       	mov	r25, r7
     e8c:	0e c0       	rjmp	.+28     	; 0xeaa <keyboard_run+0x120>
			keyboard_item_pressed();
			
		}
		//check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
     e94:	89 2b       	or	r24, r25
     e96:	39 f0       	breq	.+14     	; 0xea6 <keyboard_run+0x11c>
			button_pressed = 1;
			remove_last_char();
     e98:	0e 94 cb 03 	call	0x796	; 0x796 <remove_last_char>
			//printf("REMOVE written string: %s", written_string);
			print_string();
     e9c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <print_string>
			keyboard_item_pressed();
			
		}
		//check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
			button_pressed = 1;
     ea0:	86 2d       	mov	r24, r6
     ea2:	97 2d       	mov	r25, r7
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <keyboard_run+0x120>
     ea6:	84 2d       	mov	r24, r4
     ea8:	95 2d       	mov	r25, r5
			remove_last_char();
			//printf("REMOVE written string: %s", written_string);
			print_string();
		}
		
		if(position_moved){
     eaa:	cd 2b       	or	r28, r29
     eac:	49 f0       	breq	.+18     	; 0xec0 <keyboard_run+0x136>
     eae:	ef ef       	ldi	r30, 0xFF	; 255
     eb0:	ff eb       	ldi	r31, 0xBF	; 191
     eb2:	23 e0       	ldi	r18, 0x03	; 3
     eb4:	e1 50       	subi	r30, 0x01	; 1
     eb6:	f0 40       	sbci	r31, 0x00	; 0
     eb8:	20 40       	sbci	r18, 0x00	; 0
     eba:	e1 f7       	brne	.-8      	; 0xeb4 <keyboard_run+0x12a>
     ebc:	00 c0       	rjmp	.+0      	; 0xebe <keyboard_run+0x134>
     ebe:	00 00       	nop
			position_moved = 0;
			_delay_ms(250);
		}
		if(button_pressed){
     ec0:	89 2b       	or	r24, r25
     ec2:	49 f0       	breq	.+18     	; 0xed6 <keyboard_run+0x14c>
     ec4:	3f ef       	ldi	r19, 0xFF	; 255
     ec6:	4f e7       	ldi	r20, 0x7F	; 127
     ec8:	87 e0       	ldi	r24, 0x07	; 7
     eca:	31 50       	subi	r19, 0x01	; 1
     ecc:	40 40       	sbci	r20, 0x00	; 0
     ece:	80 40       	sbci	r24, 0x00	; 0
     ed0:	e1 f7       	brne	.-8      	; 0xeca <keyboard_run+0x140>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <keyboard_run+0x14a>
     ed4:	00 00       	nop

	//detect changes
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
     edc:	89 2b       	or	r24, r25
     ede:	09 f4       	brne	.+2      	; 0xee2 <keyboard_run+0x158>
     ee0:	86 cf       	rjmp	.-244    	; 0xdee <keyboard_run+0x64>
		if(button_pressed){
			button_pressed = 0;
			_delay_ms(500);
		}
	}
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	df 90       	pop	r13
     ef0:	cf 90       	pop	r12
     ef2:	bf 90       	pop	r11
     ef4:	af 90       	pop	r10
     ef6:	9f 90       	pop	r9
     ef8:	8f 90       	pop	r8
     efa:	7f 90       	pop	r7
     efc:	6f 90       	pop	r6
     efe:	5f 90       	pop	r5
     f00:	4f 90       	pop	r4
     f02:	08 95       	ret

00000f04 <MCP2515_read>:
     f04:	cf 93       	push	r28
     f06:	c8 2f       	mov	r28, r24
     f08:	0e 94 89 0b 	call	0x1712	; 0x1712 <SPI_select>
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <SPI_send>
     f12:	8c 2f       	mov	r24, r28
     f14:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <SPI_send>
     f18:	0e 94 82 0b 	call	0x1704	; 0x1704 <SPI_read>
     f1c:	c8 2f       	mov	r28, r24
     f1e:	0e 94 8b 0b 	call	0x1716	; 0x1716 <SPI_deselect>
     f22:	8c 2f       	mov	r24, r28
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <MCP2515_bit_modify>:
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	18 2f       	mov	r17, r24
     f30:	d6 2f       	mov	r29, r22
     f32:	c4 2f       	mov	r28, r20
     f34:	0e 94 89 0b 	call	0x1712	; 0x1712 <SPI_select>
     f38:	85 e0       	ldi	r24, 0x05	; 5
     f3a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <SPI_send>
     f3e:	81 2f       	mov	r24, r17
     f40:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <SPI_send>
     f44:	8d 2f       	mov	r24, r29
     f46:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <SPI_send>
     f4a:	8c 2f       	mov	r24, r28
     f4c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <SPI_send>
     f50:	0e 94 8b 0b 	call	0x1716	; 0x1716 <SPI_deselect>
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	08 95       	ret

00000f5c <test_function>:
volatile menu_entry* current_entry;
volatile menu_entry* selected_entry;


void test_function() {
	printf("\n\nHighscore clicked!\n\n");
     f5c:	87 e1       	ldi	r24, 0x17	; 23
     f5e:	93 e0       	ldi	r25, 0x03	; 3
     f60:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <puts>
     f64:	08 95       	ret

00000f66 <MENU_draw_current_menu>:
	current_entry = current_entry->parent_node;
	selected_entry = current_entry->child_node;
	MENU_draw_current_menu();
}

void MENU_draw_current_menu() {
     f66:	df 92       	push	r13
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
	OLED_reset();
     f74:	0e 94 bd 09 	call	0x137a	; 0x137a <OLED_reset>
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
     f78:	e0 91 08 04 	lds	r30, 0x0408
     f7c:	f0 91 09 04 	lds	r31, 0x0409
     f80:	c4 81       	ldd	r28, Z+4	; 0x04
     f82:	d5 81       	ldd	r29, Z+5	; 0x05
	
	while( temp_node != NULL){
     f84:	20 97       	sbiw	r28, 0x00	; 0
     f86:	61 f1       	breq	.+88     	; 0xfe0 <MENU_draw_current_menu+0x7a>
     f88:	d1 2c       	mov	r13, r1
		OLED_pos(output_row++, 0);
		if (temp_node == selected_entry) {
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
     f8a:	0f 2e       	mov	r0, r31
     f8c:	fd e2       	ldi	r31, 0x2D	; 45
     f8e:	ef 2e       	mov	r14, r31
     f90:	f3 e0       	ldi	r31, 0x03	; 3
     f92:	ff 2e       	mov	r15, r31
     f94:	f0 2d       	mov	r31, r0
     f96:	02 e3       	ldi	r16, 0x32	; 50
     f98:	11 e0       	ldi	r17, 0x01	; 1
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
		OLED_pos(output_row++, 0);
     f9a:	60 e0       	ldi	r22, 0x00	; 0
     f9c:	8d 2d       	mov	r24, r13
     f9e:	0e 94 94 09 	call	0x1328	; 0x1328 <OLED_pos>
		if (temp_node == selected_entry) {
     fa2:	20 91 06 04 	lds	r18, 0x0406
     fa6:	30 91 07 04 	lds	r19, 0x0407
     faa:	c2 17       	cp	r28, r18
     fac:	d3 07       	cpc	r29, r19
     fae:	11 f4       	brne	.+4      	; 0xfb4 <MENU_draw_current_menu+0x4e>
			OLED_print_arrow();
     fb0:	0e 94 32 0a 	call	0x1464	; 0x1464 <OLED_print_arrow>
		}
		fprintf(OLED, " %s", temp_node->name);
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	8f 93       	push	r24
     fb8:	88 81       	ld	r24, Y
     fba:	8f 93       	push	r24
     fbc:	ff 92       	push	r15
     fbe:	ef 92       	push	r14
     fc0:	1f 93       	push	r17
     fc2:	0f 93       	push	r16
     fc4:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <fprintf>
		temp_node = temp_node -> next_sibling_node;
     fc8:	0e 80       	ldd	r0, Y+6	; 0x06
     fca:	df 81       	ldd	r29, Y+7	; 0x07
     fcc:	c0 2d       	mov	r28, r0
     fce:	d3 94       	inc	r13
	OLED_reset();
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	20 97       	sbiw	r28, 0x00	; 0
     fde:	e9 f6       	brne	.-70     	; 0xf9a <MENU_draw_current_menu+0x34>
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	08 95       	ret

00000ff0 <MENU_select_next>:
	MENU_draw_current_menu();
}


void MENU_select_next() {
	if (selected_entry -> next_sibling_node != NULL) {
     ff0:	e0 91 06 04 	lds	r30, 0x0406
     ff4:	f0 91 07 04 	lds	r31, 0x0407
     ff8:	86 81       	ldd	r24, Z+6	; 0x06
     ffa:	97 81       	ldd	r25, Z+7	; 0x07
     ffc:	89 2b       	or	r24, r25
     ffe:	41 f0       	breq	.+16     	; 0x1010 <MENU_select_next+0x20>
		selected_entry = selected_entry -> next_sibling_node;
    1000:	86 81       	ldd	r24, Z+6	; 0x06
    1002:	97 81       	ldd	r25, Z+7	; 0x07
    1004:	90 93 07 04 	sts	0x0407, r25
    1008:	80 93 06 04 	sts	0x0406, r24
		MENU_draw_current_menu();
    100c:	0e 94 b3 07 	call	0xf66	; 0xf66 <MENU_draw_current_menu>
    1010:	08 95       	ret

00001012 <MENU_select_prev>:
	}
}

void MENU_select_prev() {
	if (selected_entry -> prev_sibling_node != NULL) {
    1012:	e0 91 06 04 	lds	r30, 0x0406
    1016:	f0 91 07 04 	lds	r31, 0x0407
    101a:	80 85       	ldd	r24, Z+8	; 0x08
    101c:	91 85       	ldd	r25, Z+9	; 0x09
    101e:	89 2b       	or	r24, r25
    1020:	41 f0       	breq	.+16     	; 0x1032 <MENU_select_prev+0x20>
		selected_entry = selected_entry -> prev_sibling_node;
    1022:	80 85       	ldd	r24, Z+8	; 0x08
    1024:	91 85       	ldd	r25, Z+9	; 0x09
    1026:	90 93 07 04 	sts	0x0407, r25
    102a:	80 93 06 04 	sts	0x0406, r24
		MENU_draw_current_menu();
    102e:	0e 94 b3 07 	call	0xf66	; 0xf66 <MENU_draw_current_menu>
    1032:	08 95       	ret

00001034 <MENU_enter_selection>:
	}
}

void MENU_enter_selection() {
	if (selected_entry->function_ptr != NULL) {
    1034:	e0 91 06 04 	lds	r30, 0x0406
    1038:	f0 91 07 04 	lds	r31, 0x0407
    103c:	82 85       	ldd	r24, Z+10	; 0x0a
    103e:	93 85       	ldd	r25, Z+11	; 0x0b
    1040:	89 2b       	or	r24, r25
    1042:	61 f0       	breq	.+24     	; 0x105c <MENU_enter_selection+0x28>
		printf("HEI\n");
    1044:	81 e3       	ldi	r24, 0x31	; 49
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <puts>
		selected_entry->function_ptr();
    104c:	e0 91 06 04 	lds	r30, 0x0406
    1050:	f0 91 07 04 	lds	r31, 0x0407
    1054:	02 84       	ldd	r0, Z+10	; 0x0a
    1056:	f3 85       	ldd	r31, Z+11	; 0x0b
    1058:	e0 2d       	mov	r30, r0
    105a:	09 95       	icall
	}
	
	if (selected_entry->child_node == NULL) return;
    105c:	e0 91 06 04 	lds	r30, 0x0406
    1060:	f0 91 07 04 	lds	r31, 0x0407
    1064:	84 81       	ldd	r24, Z+4	; 0x04
    1066:	95 81       	ldd	r25, Z+5	; 0x05
    1068:	89 2b       	or	r24, r25
    106a:	61 f0       	breq	.+24     	; 0x1084 <MENU_enter_selection+0x50>
	
	current_entry = selected_entry;
    106c:	f0 93 09 04 	sts	0x0409, r31
    1070:	e0 93 08 04 	sts	0x0408, r30
	selected_entry = current_entry->child_node;
    1074:	84 81       	ldd	r24, Z+4	; 0x04
    1076:	95 81       	ldd	r25, Z+5	; 0x05
    1078:	90 93 07 04 	sts	0x0407, r25
    107c:	80 93 06 04 	sts	0x0406, r24
	MENU_draw_current_menu();
    1080:	0e 94 b3 07 	call	0xf66	; 0xf66 <MENU_draw_current_menu>
    1084:	08 95       	ret

00001086 <MENU_go_back>:
}

void MENU_go_back() {
	if (current_entry->parent_node == NULL) return;
    1086:	e0 91 08 04 	lds	r30, 0x0408
    108a:	f0 91 09 04 	lds	r31, 0x0409
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	89 2b       	or	r24, r25
    1094:	79 f0       	breq	.+30     	; 0x10b4 <MENU_go_back+0x2e>
	
	current_entry = current_entry->parent_node;
    1096:	02 80       	ldd	r0, Z+2	; 0x02
    1098:	f3 81       	ldd	r31, Z+3	; 0x03
    109a:	e0 2d       	mov	r30, r0
    109c:	f0 93 09 04 	sts	0x0409, r31
    10a0:	e0 93 08 04 	sts	0x0408, r30
	selected_entry = current_entry->child_node;
    10a4:	84 81       	ldd	r24, Z+4	; 0x04
    10a6:	95 81       	ldd	r25, Z+5	; 0x05
    10a8:	90 93 07 04 	sts	0x0407, r25
    10ac:	80 93 06 04 	sts	0x0406, r24
	MENU_draw_current_menu();
    10b0:	0e 94 b3 07 	call	0xf66	; 0xf66 <MENU_draw_current_menu>
    10b4:	08 95       	ret

000010b6 <MENU_run>:
	_delay_ms(delay);
	MENU_select_prev();
}


void MENU_run() {
    10b6:	cf 93       	push	r28
	bool change = false;
	if (JOY_getDirection() == DOWN) {
    10b8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <JOY_getDirection>
    10bc:	83 30       	cpi	r24, 0x03	; 3
    10be:	21 f4       	brne	.+8      	; 0x10c8 <MENU_run+0x12>
		MENU_select_next();
    10c0:	0e 94 f8 07 	call	0xff0	; 0xff0 <MENU_select_next>
		change = true;
    10c4:	c1 e0       	ldi	r28, 0x01	; 1
    10c6:	09 c0       	rjmp	.+18     	; 0x10da <MENU_run+0x24>
		} else if (JOY_getDirection() == UP) {
    10c8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <JOY_getDirection>
    10cc:	82 30       	cpi	r24, 0x02	; 2
    10ce:	21 f4       	brne	.+8      	; 0x10d8 <MENU_run+0x22>
		MENU_select_prev();
    10d0:	0e 94 09 08 	call	0x1012	; 0x1012 <MENU_select_prev>
		change = true;
    10d4:	c1 e0       	ldi	r28, 0x01	; 1
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <MENU_run+0x24>
	MENU_select_prev();
}


void MENU_run() {
	bool change = false;
    10d8:	c0 e0       	ldi	r28, 0x00	; 0
		} else if (JOY_getDirection() == UP) {
		MENU_select_prev();
		change = true;
	}
	
	if (JOY_button_pressed(JOY_BUTTON)) {
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
    10e0:	89 2b       	or	r24, r25
    10e2:	19 f0       	breq	.+6      	; 0x10ea <MENU_run+0x34>
		MENU_enter_selection();
    10e4:	0e 94 1a 08 	call	0x1034	; 0x1034 <MENU_enter_selection>
    10e8:	0a c0       	rjmp	.+20     	; 0x10fe <MENU_run+0x48>
		change = true;
	}
	
	else if (JOY_button_pressed(LEFT_BUTTON)) {
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	0e 94 2e 03 	call	0x65c	; 0x65c <JOY_button_pressed>
    10f0:	89 2b       	or	r24, r25
    10f2:	19 f0       	breq	.+6      	; 0x10fa <MENU_run+0x44>
		MENU_go_back();
    10f4:	0e 94 43 08 	call	0x1086	; 0x1086 <MENU_go_back>
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <MENU_run+0x48>
		change = true;
	}
	
	// Make sure the selection doesn't move multiple places at once.
	if (change){
    10fa:	cc 23       	and	r28, r28
    10fc:	49 f0       	breq	.+18     	; 0x1110 <MENU_run+0x5a>
    10fe:	22 e3       	ldi	r18, 0x32	; 50
    1100:	83 ed       	ldi	r24, 0xD3	; 211
    1102:	93 e0       	ldi	r25, 0x03	; 3
    1104:	21 50       	subi	r18, 0x01	; 1
    1106:	80 40       	sbci	r24, 0x00	; 0
    1108:	90 40       	sbci	r25, 0x00	; 0
    110a:	e1 f7       	brne	.-8      	; 0x1104 <MENU_run+0x4e>
    110c:	00 c0       	rjmp	.+0      	; 0x110e <MENU_run+0x58>
    110e:	00 c0       	rjmp	.+0      	; 0x1110 <MENU_run+0x5a>
		_delay_ms(255);
		change = false;
	}
}
    1110:	cf 91       	pop	r28
    1112:	08 95       	ret

00001114 <add_entry>:



menu_entry* add_entry(menu_entry* parent_node, char* name, void* function_ptr){
    1114:	ef 92       	push	r14
    1116:	ff 92       	push	r15
    1118:	0f 93       	push	r16
    111a:	1f 93       	push	r17
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	ec 01       	movw	r28, r24
    1122:	7b 01       	movw	r14, r22
    1124:	8a 01       	movw	r16, r20
	
	// Create the new node
	menu_entry* new_entry = (menu_entry*) malloc(sizeof(menu_entry));
    1126:	8c e0       	ldi	r24, 0x0C	; 12
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <malloc>
    112e:	dc 01       	movw	r26, r24
	new_entry->name = name;
    1130:	11 96       	adiw	r26, 0x01	; 1
    1132:	fc 92       	st	X, r15
    1134:	ee 92       	st	-X, r14
	new_entry->parent_node = parent_node;
    1136:	13 96       	adiw	r26, 0x03	; 3
    1138:	dc 93       	st	X, r29
    113a:	ce 93       	st	-X, r28
    113c:	12 97       	sbiw	r26, 0x02	; 2
	new_entry->child_node = NULL;  // A new node has no children
    113e:	15 96       	adiw	r26, 0x05	; 5
    1140:	1c 92       	st	X, r1
    1142:	1e 92       	st	-X, r1
    1144:	14 97       	sbiw	r26, 0x04	; 4
	new_entry->next_sibling_node = NULL;  // The new child is the last child
    1146:	17 96       	adiw	r26, 0x07	; 7
    1148:	1c 92       	st	X, r1
    114a:	1e 92       	st	-X, r1
    114c:	16 97       	sbiw	r26, 0x06	; 6
	new_entry->prev_sibling_node = NULL;
    114e:	19 96       	adiw	r26, 0x09	; 9
    1150:	1c 92       	st	X, r1
    1152:	1e 92       	st	-X, r1
    1154:	18 97       	sbiw	r26, 0x08	; 8
	new_entry->function_ptr = function_ptr;
    1156:	1b 96       	adiw	r26, 0x0b	; 11
    1158:	1c 93       	st	X, r17
    115a:	0e 93       	st	-X, r16
    115c:	1a 97       	sbiw	r26, 0x0a	; 10
	
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_entry;
    115e:	20 97       	sbiw	r28, 0x00	; 0
    1160:	a1 f0       	breq	.+40     	; 0x118a <add_entry+0x76>
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
    1162:	ec 81       	ldd	r30, Y+4	; 0x04
    1164:	fd 81       	ldd	r31, Y+5	; 0x05
    1166:	30 97       	sbiw	r30, 0x00	; 0
    1168:	19 f4       	brne	.+6      	; 0x1170 <add_entry+0x5c>
		parent_node->child_node = new_entry;
    116a:	9d 83       	std	Y+5, r25	; 0x05
    116c:	8c 83       	std	Y+4, r24	; 0x04
    116e:	0d c0       	rjmp	.+26     	; 0x118a <add_entry+0x76>
	else {
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
    1170:	26 81       	ldd	r18, Z+6	; 0x06
    1172:	37 81       	ldd	r19, Z+7	; 0x07
    1174:	21 15       	cp	r18, r1
    1176:	31 05       	cpc	r19, r1
    1178:	11 f0       	breq	.+4      	; 0x117e <add_entry+0x6a>
			//printf("temp_node->next_sibling_node->name: %s\n", temp_node->next_sibling_node->name);
			temp_node = temp_node->next_sibling_node;
    117a:	f9 01       	movw	r30, r18
    117c:	f9 cf       	rjmp	.-14     	; 0x1170 <add_entry+0x5c>
		}
		
		// Bind the new node to the current last child to become the new last child.
		temp_node->next_sibling_node = new_entry;
    117e:	b7 83       	std	Z+7, r27	; 0x07
    1180:	a6 83       	std	Z+6, r26	; 0x06
		new_entry->prev_sibling_node = temp_node;
    1182:	19 96       	adiw	r26, 0x09	; 9
    1184:	fc 93       	st	X, r31
    1186:	ee 93       	st	-X, r30
    1188:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	// Parent/child/sibling bindings complete. Return the new node.
	return new_entry;
    118a:	cd 01       	movw	r24, r26
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	ff 90       	pop	r15
    1196:	ef 90       	pop	r14
    1198:	08 95       	ret

0000119a <MENU_init>:

void test_function() {
	printf("\n\nHighscore clicked!\n\n");
}

void MENU_init() {
    119a:	cf 92       	push	r12
    119c:	df 92       	push	r13
    119e:	ef 92       	push	r14
    11a0:	ff 92       	push	r15
    11a2:	0f 93       	push	r16
    11a4:	1f 93       	push	r17
    11a6:	cf 93       	push	r28
    11a8:	df 93       	push	r29
	menu_entry* main_menu = add_entry(NULL, "Main menu", NULL);
    11aa:	40 e0       	ldi	r20, 0x00	; 0
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	65 e3       	ldi	r22, 0x35	; 53
    11b0:	73 e0       	ldi	r23, 0x03	; 3
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 8a 08 	call	0x1114	; 0x1114 <add_entry>
    11ba:	ec 01       	movw	r28, r24
	
	// Main menu
	menu_entry* play = add_entry(main_menu, "Play game", NULL);
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	6f e3       	ldi	r22, 0x3F	; 63
    11c2:	73 e0       	ldi	r23, 0x03	; 3
    11c4:	0e 94 8a 08 	call	0x1114	; 0x1114 <add_entry>
    11c8:	6c 01       	movw	r12, r24
	menu_entry* highscore = add_entry(main_menu, "Highscore", test_function);
    11ca:	4e ea       	ldi	r20, 0xAE	; 174
    11cc:	57 e0       	ldi	r21, 0x07	; 7
    11ce:	69 e4       	ldi	r22, 0x49	; 73
    11d0:	73 e0       	ldi	r23, 0x03	; 3
    11d2:	ce 01       	movw	r24, r28
    11d4:	0e 94 8a 08 	call	0x1114	; 0x1114 <add_entry>
	menu_entry* settings = add_entry(main_menu, "Settings", NULL);
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	63 e5       	ldi	r22, 0x53	; 83
    11de:	73 e0       	ldi	r23, 0x03	; 3
    11e0:	ce 01       	movw	r24, r28
    11e2:	0e 94 8a 08 	call	0x1114	; 0x1114 <add_entry>
    11e6:	7c 01       	movw	r14, r24
	menu_entry* extras = add_entry(main_menu, "Extra features", NULL);
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	68 eb       	ldi	r22, 0xB8	; 184
    11ee:	73 e0       	ldi	r23, 0x03	; 3
    11f0:	ce 01       	movw	r24, r28
    11f2:	0e 94 8a 08 	call	0x1114	; 0x1114 <add_entry>
    11f6:	8c 01       	movw	r16, r24
	//menu_entry* yolo = add_entry(main_menu, "YOLO", NULL);
	
	
	// Sub-menu settings
	menu_entry* brightness = add_entry(settings, "Brightness", brightness_run);
    11f8:	4a e2       	ldi	r20, 0x2A	; 42
    11fa:	52 e0       	ldi	r21, 0x02	; 2
    11fc:	6c e5       	ldi	r22, 0x5C	; 92
    11fe:	73 e0       	ldi	r23, 0x03	; 3
    1200:	c7 01       	movw	r24, r14
    1202:	0e 94 8a 08 	call	0x1114	; 0x1114 <add_entry>
	menu_entry* font = add_entry(settings, "Set font", NULL);
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	67 e6       	ldi	r22, 0x67	; 103
    120c:	73 e0       	ldi	r23, 0x03	; 3
    120e:	c7 01       	movw	r24, r14
    1210:	0e 94 8a 08 	call	0x1114	; 0x1114 <add_entry>
	
	// Sub-menu extras
	menu_entry* keyboard = add_entry(extras, "Keyboard", keyboard_run);
    1214:	45 ec       	ldi	r20, 0xC5	; 197
    1216:	56 e0       	ldi	r21, 0x06	; 6
    1218:	60 e7       	ldi	r22, 0x70	; 112
    121a:	73 e0       	ldi	r23, 0x03	; 3
    121c:	c8 01       	movw	r24, r16
    121e:	0e 94 8a 08 	call	0x1114	; 0x1114 <add_entry>
	menu_entry* mandelbrot = add_entry(extras, "Mandelbrot", NULL);
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	69 e7       	ldi	r22, 0x79	; 121
    1228:	73 e0       	ldi	r23, 0x03	; 3
    122a:	c8 01       	movw	r24, r16
    122c:	0e 94 8a 08 	call	0x1114	; 0x1114 <add_entry>
	menu_entry* pong = add_entry(extras, "Play pong", NULL);
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	64 e8       	ldi	r22, 0x84	; 132
    1236:	73 e0       	ldi	r23, 0x03	; 3
    1238:	c8 01       	movw	r24, r16
    123a:	0e 94 8a 08 	call	0x1114	; 0x1114 <add_entry>
	menu_entry* rcube = add_entry(extras, "rotating cube", NULL);
    123e:	40 e0       	ldi	r20, 0x00	; 0
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	6e e8       	ldi	r22, 0x8E	; 142
    1244:	73 e0       	ldi	r23, 0x03	; 3
    1246:	c8 01       	movw	r24, r16
    1248:	0e 94 8a 08 	call	0x1114	; 0x1114 <add_entry>
	
	current_entry = main_menu;
    124c:	d0 93 09 04 	sts	0x0409, r29
    1250:	c0 93 08 04 	sts	0x0408, r28
	selected_entry = play;
    1254:	d0 92 07 04 	sts	0x0407, r13
    1258:	c0 92 06 04 	sts	0x0406, r12
	MENU_draw_current_menu();
    125c:	0e 94 b3 07 	call	0xf66	; 0xf66 <MENU_draw_current_menu>
}
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	08 95       	ret

00001272 <initialize>:
#include <stdio.h>
#include <stdbool.h>


void initialize(void){
	cli();
    1272:	f8 94       	cli
	OLED_reset();
    1274:	0e 94 bd 09 	call	0x137a	; 0x137a <OLED_reset>
	usart_init(MYUBRR);
    1278:	8f e1       	ldi	r24, 0x1F	; 31
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <usart_init>
	SRAM_init();
    1280:	0e 94 8d 0b 	call	0x171a	; 0x171a <SRAM_init>
	ADC_init();
    1284:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	JOY_init();
    1288:	0e 94 26 03 	call	0x64c	; 0x64c <JOY_init>
	OLED_init();
    128c:	0e 94 c9 09 	call	0x1392	; 0x1392 <OLED_init>
	MENU_init();
    1290:	0e 94 cd 08 	call	0x119a	; 0x119a <MENU_init>
	//CAN_init();
	sei();
    1294:	78 94       	sei
    1296:	08 95       	ret

00001298 <main>:
	//printf("1. EFGL: 0x%02x\n", MCP2515_read(MCP_EFLG));
	
}

int main(void) {
	initialize();
    1298:	0e 94 39 09 	call	0x1272	; 0x1272 <initialize>
	while(1){
		MENU_run();
    129c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MENU_run>
    12a0:	fd cf       	rjmp	.-6      	; 0x129c <main+0x4>

000012a2 <OLED_print_char>:
	write_cmd(0x81);
	write_cmd(lvl);
}

void OLED_print_char(char c){
	if (c == '\0') return;
    12a2:	88 23       	and	r24, r24
    12a4:	f9 f0       	breq	.+62     	; 0x12e4 <OLED_print_char+0x42>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
    12a6:	e8 2f       	mov	r30, r24
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	b0 97       	sbiw	r30, 0x20	; 32
	for (int col = 0; col < FONT_SIZE; col++){
    12ac:	80 91 40 01 	lds	r24, 0x0140
    12b0:	88 23       	and	r24, r24
    12b2:	c1 f0       	breq	.+48     	; 0x12e4 <OLED_print_char+0x42>
    12b4:	ee 0f       	add	r30, r30
    12b6:	ff 1f       	adc	r31, r31
    12b8:	ee 0f       	add	r30, r30
    12ba:	ff 1f       	adc	r31, r31
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	e0 59       	subi	r30, 0x90	; 144
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
		write_data(pgm_read_byte(&font8[letter_index][col]));
    12c8:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    12ca:	a0 91 43 01 	lds	r26, 0x0143
    12ce:	b0 91 44 01 	lds	r27, 0x0144
    12d2:	2c 93       	st	X, r18

void OLED_print_char(char c){
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++){
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	31 96       	adiw	r30, 0x01	; 1
    12d8:	20 91 40 01 	lds	r18, 0x0140
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	82 17       	cp	r24, r18
    12e0:	93 07       	cpc	r25, r19
    12e2:	94 f3       	brlt	.-28     	; 0x12c8 <OLED_print_char+0x26>
    12e4:	08 95       	ret

000012e6 <write_data>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    12e6:	e0 91 43 01 	lds	r30, 0x0143
    12ea:	f0 91 44 01 	lds	r31, 0x0144
    12ee:	80 83       	st	Z, r24
    12f0:	08 95       	ret

000012f2 <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7){
    12f2:	88 30       	cpi	r24, 0x08	; 8
    12f4:	30 f4       	brcc	.+12     	; 0x1302 <OLED_goto_line+0x10>
		return;
	}
	write_cmd(0xB0+line);
    12f6:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    12f8:	e0 91 41 01 	lds	r30, 0x0141
    12fc:	f0 91 42 01 	lds	r31, 0x0142
    1300:	80 83       	st	Z, r24
    1302:	08 95       	ret

00001304 <OLED_goto_column>:
	}
	write_cmd(0xB0+line);
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
    1304:	88 23       	and	r24, r24
    1306:	7c f0       	brlt	.+30     	; 0x1326 <OLED_goto_column+0x22>
		return;
	}
	write_cmd(0x00+column%16); //lower column register
    1308:	98 2f       	mov	r25, r24
    130a:	9f 70       	andi	r25, 0x0F	; 15
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    130c:	e0 91 41 01 	lds	r30, 0x0141
    1310:	f0 91 42 01 	lds	r31, 0x0142
    1314:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
		return;
	}
	write_cmd(0x00+column%16); //lower column register
	write_cmd(0x10+column/16); //higher column register
    1316:	82 95       	swap	r24
    1318:	8f 70       	andi	r24, 0x0F	; 15
    131a:	80 5f       	subi	r24, 0xF0	; 240
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    131c:	e0 91 41 01 	lds	r30, 0x0141
    1320:	f0 91 42 01 	lds	r31, 0x0142
    1324:	80 83       	st	Z, r24
    1326:	08 95       	ret

00001328 <OLED_pos>:
		write_data(0x00);
		
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
    1328:	cf 93       	push	r28
    132a:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
    132c:	88 30       	cpi	r24, 0x08	; 8
    132e:	10 f4       	brcc	.+4      	; 0x1334 <OLED_pos+0xc>
    1330:	66 23       	and	r22, r22
    1332:	4c f4       	brge	.+18     	; 0x1346 <OLED_pos+0x1e>
		printf("Out of range in OLED_pos()");
    1334:	8c e9       	ldi	r24, 0x9C	; 156
    1336:	93 e0       	ldi	r25, 0x03	; 3
    1338:	9f 93       	push	r25
    133a:	8f 93       	push	r24
    133c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <printf>
		return; 
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	05 c0       	rjmp	.+10     	; 0x1350 <OLED_pos+0x28>
	}
	
	OLED_goto_line(line);
    1346:	0e 94 79 09 	call	0x12f2	; 0x12f2 <OLED_goto_line>
	OLED_goto_column(column);
    134a:	8c 2f       	mov	r24, r28
    134c:	0e 94 82 09 	call	0x1304	; 0x1304 <OLED_goto_column>
}
    1350:	cf 91       	pop	r28
    1352:	08 95       	ret

00001354 <OLED_home>:




void OLED_home(){
	OLED_pos(0,0);
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	0e 94 94 09 	call	0x1328	; 0x1328 <OLED_pos>
    135c:	08 95       	ret

0000135e <OLED_clear_line>:
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	0e 94 94 09 	call	0x1328	; 0x1328 <OLED_pos>
    1364:	80 e8       	ldi	r24, 0x80	; 128
    1366:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1368:	e0 91 43 01 	lds	r30, 0x0143
    136c:	f0 91 44 01 	lds	r31, 0x0144
    1370:	10 82       	st	Z, r1
    1372:	01 97       	sbiw	r24, 0x01	; 1
	OLED_pos(0,0);
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	c1 f7       	brne	.-16     	; 0x1368 <OLED_clear_line+0xa>
		write_data(0x00);
		
	}
}
    1378:	08 95       	ret

0000137a <OLED_reset>:
	
}



void OLED_reset() {
    137a:	cf 93       	push	r28
    137c:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
    137e:	8c 2f       	mov	r24, r28
    1380:	0e 94 af 09 	call	0x135e	; 0x135e <OLED_clear_line>
    1384:	cf 5f       	subi	r28, 0xFF	; 255
}



void OLED_reset() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
    1386:	c8 30       	cpi	r28, 0x08	; 8
    1388:	d1 f7       	brne	.-12     	; 0x137e <OLED_reset+0x4>
		OLED_clear_line(page);
	}
	OLED_home();
    138a:	0e 94 aa 09 	call	0x1354	; 0x1354 <OLED_home>
}
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	66 97       	sbiw	r28, 0x16	; 22
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
	
	
	const char addresses[] = {
    13a6:	86 e1       	ldi	r24, 0x16	; 22
    13a8:	e5 e4       	ldi	r30, 0x45	; 69
    13aa:	f1 e0       	ldi	r31, 0x01	; 1
    13ac:	de 01       	movw	r26, r28
    13ae:	11 96       	adiw	r26, 0x01	; 1
    13b0:	01 90       	ld	r0, Z+
    13b2:	0d 92       	st	X+, r0
    13b4:	8a 95       	dec	r24
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <OLED_init+0x1e>
    13b8:	fe 01       	movw	r30, r28
    13ba:	31 96       	adiw	r30, 0x01	; 1
    13bc:	ce 01       	movw	r24, r28
    13be:	47 96       	adiw	r24, 0x17	; 23
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
		write_cmd(addresses[i]);
    13c0:	21 91       	ld	r18, Z+
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    13c2:	a0 91 41 01 	lds	r26, 0x0141
    13c6:	b0 91 42 01 	lds	r27, 0x0142
    13ca:	2c 93       	st	X, r18
		0xa6, //set normal display
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
    13cc:	e8 17       	cp	r30, r24
    13ce:	f9 07       	cpc	r31, r25
    13d0:	b9 f7       	brne	.-18     	; 0x13c0 <OLED_init+0x2e>
		write_cmd(addresses[i]);
	}
	
	OLED_reset();
    13d2:	0e 94 bd 09 	call	0x137a	; 0x137a <OLED_reset>
	
}
    13d6:	66 96       	adiw	r28, 0x16	; 22
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	08 95       	ret

000013e8 <OLED_set_brightness>:
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    13e8:	e0 91 41 01 	lds	r30, 0x0141
    13ec:	f0 91 42 01 	lds	r31, 0x0142
    13f0:	91 e8       	ldi	r25, 0x81	; 129
    13f2:	90 83       	st	Z, r25
    13f4:	e0 91 41 01 	lds	r30, 0x0141
    13f8:	f0 91 42 01 	lds	r31, 0x0142
    13fc:	80 83       	st	Z, r24
    13fe:	08 95       	ret

00001400 <OLED_print_char_inverse>:
		write_data(pgm_read_byte(&font8[letter_index][col]));
	}
}

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
    1400:	88 23       	and	r24, r24
    1402:	01 f1       	breq	.+64     	; 0x1444 <OLED_print_char_inverse+0x44>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
    1404:	e8 2f       	mov	r30, r24
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	b0 97       	sbiw	r30, 0x20	; 32
	for (int col = 0; col < FONT_SIZE; col++) {
    140a:	80 91 40 01 	lds	r24, 0x0140
    140e:	88 23       	and	r24, r24
    1410:	c9 f0       	breq	.+50     	; 0x1444 <OLED_print_char_inverse+0x44>
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	ee 0f       	add	r30, r30
    1418:	ff 1f       	adc	r31, r31
    141a:	ee 0f       	add	r30, r30
    141c:	ff 1f       	adc	r31, r31
    141e:	e0 59       	subi	r30, 0x90	; 144
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
		write_data(~pgm_read_byte(&font8[letter_index][col]));
    1426:	24 91       	lpm	r18, Z
    1428:	20 95       	com	r18
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    142a:	a0 91 43 01 	lds	r26, 0x0143
    142e:	b0 91 44 01 	lds	r27, 0x0144
    1432:	2c 93       	st	X, r18

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++) {
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	31 96       	adiw	r30, 0x01	; 1
    1438:	20 91 40 01 	lds	r18, 0x0140
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	82 17       	cp	r24, r18
    1440:	93 07       	cpc	r25, r19
    1442:	8c f3       	brlt	.-30     	; 0x1426 <OLED_print_char_inverse+0x26>
    1444:	08 95       	ret

00001446 <OLED_set_line>:
	}
	OLED_home();
}

void OLED_set_line(uint8_t line) {
	OLED_pos(line,0);
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	0e 94 94 09 	call	0x1328	; 0x1328 <OLED_pos>
    144c:	80 e8       	ldi	r24, 0x80	; 128
    144e:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1450:	2f ef       	ldi	r18, 0xFF	; 255
    1452:	e0 91 43 01 	lds	r30, 0x0143
    1456:	f0 91 44 01 	lds	r31, 0x0144
    145a:	20 83       	st	Z, r18
    145c:	01 97       	sbiw	r24, 0x01	; 1
	OLED_home();
}

void OLED_set_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	c1 f7       	brne	.-16     	; 0x1452 <OLED_set_line+0xc>
		write_data(0xFF);
		
	}
}
    1462:	08 95       	ret

00001464 <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1464:	e0 91 43 01 	lds	r30, 0x0143
    1468:	f0 91 44 01 	lds	r31, 0x0144
    146c:	88 e1       	ldi	r24, 0x18	; 24
    146e:	80 83       	st	Z, r24
    1470:	e0 91 43 01 	lds	r30, 0x0143
    1474:	f0 91 44 01 	lds	r31, 0x0144
    1478:	80 83       	st	Z, r24
    147a:	e0 91 43 01 	lds	r30, 0x0143
    147e:	f0 91 44 01 	lds	r31, 0x0144
    1482:	9e e7       	ldi	r25, 0x7E	; 126
    1484:	90 83       	st	Z, r25
    1486:	e0 91 43 01 	lds	r30, 0x0143
    148a:	f0 91 44 01 	lds	r31, 0x0144
    148e:	9c e3       	ldi	r25, 0x3C	; 60
    1490:	90 83       	st	Z, r25
    1492:	e0 91 43 01 	lds	r30, 0x0143
    1496:	f0 91 44 01 	lds	r31, 0x0144
    149a:	80 83       	st	Z, r24
    149c:	08 95       	ret

0000149e <print_blank>:
#include "OLED_driver.h"

#include <stdio.h>
#include <string.h>

void print_blank(int number) {
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
    14a8:	18 16       	cp	r1, r24
    14aa:	19 06       	cpc	r1, r25
    14ac:	54 f4       	brge	.+20     	; 0x14c2 <print_blank+0x24>
    14ae:	c0 e0       	ldi	r28, 0x00	; 0
    14b0:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0x00);
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>

#include <stdio.h>
#include <string.h>

void print_blank(int number) {
	for (int i = 0; i < number; i++) {
    14ba:	21 96       	adiw	r28, 0x01	; 1
    14bc:	c0 17       	cp	r28, r16
    14be:	d1 07       	cpc	r29, r17
    14c0:	c1 f7       	brne	.-16     	; 0x14b2 <print_blank+0x14>
		write_data(0x00);
	}
}
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	08 95       	ret

000014cc <print_fill>:

void print_fill(int number) {
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
    14d6:	18 16       	cp	r1, r24
    14d8:	19 06       	cpc	r1, r25
    14da:	54 f4       	brge	.+20     	; 0x14f0 <print_fill+0x24>
    14dc:	c0 e0       	ldi	r28, 0x00	; 0
    14de:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0xFF);
    14e0:	8f ef       	ldi	r24, 0xFF	; 255
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(0x00);
	}
}

void print_fill(int number) {
	for (int i = 0; i < number; i++) {
    14e8:	21 96       	adiw	r28, 0x01	; 1
    14ea:	c0 17       	cp	r28, r16
    14ec:	d1 07       	cpc	r29, r17
    14ee:	c1 f7       	brne	.-16     	; 0x14e0 <print_fill+0x14>
		write_data(0xFF);
	}
}
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	08 95       	ret

000014fa <print_shift>:

void print_shift(int inverse) {
	if (!inverse) {
    14fa:	89 2b       	or	r24, r25
    14fc:	29 f5       	brne	.+74     	; 0x1548 <print_shift+0x4e>
		print_blank(4);
    14fe:	84 e0       	ldi	r24, 0x04	; 4
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 4f 0a 	call	0x149e	; 0x149e <print_blank>
		//up-arrow
		write_data(0b00010000);
    1506:	80 e1       	ldi	r24, 0x10	; 16
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(0b00011000);
    150e:	88 e1       	ldi	r24, 0x18	; 24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(0b00111100);
    1516:	8c e3       	ldi	r24, 0x3C	; 60
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(0b00111110);
    151e:	8e e3       	ldi	r24, 0x3E	; 62
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(0b00111100);
    1526:	8c e3       	ldi	r24, 0x3C	; 60
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(0b00011000);
    152e:	88 e1       	ldi	r24, 0x18	; 24
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(0b00010000);
    1536:	80 e1       	ldi	r24, 0x10	; 16
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>

		print_blank(5);
    153e:	85 e0       	ldi	r24, 0x05	; 5
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 4f 0a 	call	0x149e	; 0x149e <print_blank>
    1546:	08 95       	ret
	}
	else {
		print_fill(4);
    1548:	84 e0       	ldi	r24, 0x04	; 4
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <print_fill>
		//up-arrow
		write_data(~0b00010000);
    1550:	8f ee       	ldi	r24, 0xEF	; 239
    1552:	9f ef       	ldi	r25, 0xFF	; 255
    1554:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(~0b00011000);
    1558:	87 ee       	ldi	r24, 0xE7	; 231
    155a:	9f ef       	ldi	r25, 0xFF	; 255
    155c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(~0b00111100);
    1560:	83 ec       	ldi	r24, 0xC3	; 195
    1562:	9f ef       	ldi	r25, 0xFF	; 255
    1564:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(~0b00111110);
    1568:	81 ec       	ldi	r24, 0xC1	; 193
    156a:	9f ef       	ldi	r25, 0xFF	; 255
    156c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(~0b00111100);
    1570:	83 ec       	ldi	r24, 0xC3	; 195
    1572:	9f ef       	ldi	r25, 0xFF	; 255
    1574:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(~0b00011000);
    1578:	87 ee       	ldi	r24, 0xE7	; 231
    157a:	9f ef       	ldi	r25, 0xFF	; 255
    157c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(~0b00010000);
    1580:	8f ee       	ldi	r24, 0xEF	; 239
    1582:	9f ef       	ldi	r25, 0xFF	; 255
    1584:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		print_fill(5);
    1588:	85 e0       	ldi	r24, 0x05	; 5
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <print_fill>
    1590:	08 95       	ret

00001592 <print_left_arrow>:
	}
}

void print_left_arrow(int inverse) {
	if (!inverse) {
    1592:	89 2b       	or	r24, r25
    1594:	a9 f4       	brne	.+42     	; 0x15c0 <print_left_arrow+0x2e>
		print_blank(6);
    1596:	86 e0       	ldi	r24, 0x06	; 6
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 94 4f 0a 	call	0x149e	; 0x149e <print_blank>
		//left-arrow

		write_data(0b00010000);
    159e:	80 e1       	ldi	r24, 0x10	; 16
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(0b00111000);
    15a6:	88 e3       	ldi	r24, 0x38	; 56
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(0b01111100);
    15ae:	8c e7       	ldi	r24, 0x7C	; 124
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>

		print_blank(7);
    15b6:	87 e0       	ldi	r24, 0x07	; 7
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 4f 0a 	call	0x149e	; 0x149e <print_blank>
    15be:	08 95       	ret
	}
	else {
		print_fill(6);
    15c0:	86 e0       	ldi	r24, 0x06	; 6
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 66 0a 	call	0x14cc	; 0x14cc <print_fill>
		//left-arrow
		write_data(~0b00010000);
    15c8:	8f ee       	ldi	r24, 0xEF	; 239
    15ca:	9f ef       	ldi	r25, 0xFF	; 255
    15cc:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(~0b00111000);
    15d0:	87 ec       	ldi	r24, 0xC7	; 199
    15d2:	9f ef       	ldi	r25, 0xFF	; 255
    15d4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(~0b01111100);
    15d8:	83 e8       	ldi	r24, 0x83	; 131
    15da:	9f ef       	ldi	r25, 0xFF	; 255
    15dc:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>

		print_fill(7);
    15e0:	87 e0       	ldi	r24, 0x07	; 7
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 66 0a 	call	0x14cc	; 0x14cc <print_fill>
    15e8:	08 95       	ret

000015ea <print_right_arrow>:
	}
}


void print_right_arrow(int inverse) {
	if (!inverse) {
    15ea:	89 2b       	or	r24, r25
    15ec:	a9 f4       	brne	.+42     	; 0x1618 <print_right_arrow+0x2e>
		print_blank(6);
    15ee:	86 e0       	ldi	r24, 0x06	; 6
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 4f 0a 	call	0x149e	; 0x149e <print_blank>

		//right-arrow
		write_data(0b01111100);
    15f6:	8c e7       	ldi	r24, 0x7C	; 124
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(0b00111000);
    15fe:	88 e3       	ldi	r24, 0x38	; 56
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(0b00010000);
    1606:	80 e1       	ldi	r24, 0x10	; 16
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>

		print_blank(7);
    160e:	87 e0       	ldi	r24, 0x07	; 7
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 4f 0a 	call	0x149e	; 0x149e <print_blank>
    1616:	08 95       	ret
	}
	else {
		print_fill(6);
    1618:	86 e0       	ldi	r24, 0x06	; 6
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <print_fill>

		//right-arrow
		write_data(~0b01111100);
    1620:	83 e8       	ldi	r24, 0x83	; 131
    1622:	9f ef       	ldi	r25, 0xFF	; 255
    1624:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(~0b00111000);
    1628:	87 ec       	ldi	r24, 0xC7	; 199
    162a:	9f ef       	ldi	r25, 0xFF	; 255
    162c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
		write_data(~0b00010000);
    1630:	8f ee       	ldi	r24, 0xEF	; 239
    1632:	9f ef       	ldi	r25, 0xFF	; 255
    1634:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>

		print_fill(7);
    1638:	87 e0       	ldi	r24, 0x07	; 7
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <print_fill>
    1640:	08 95       	ret

00001642 <print_spacebar>:
	}
}


void print_spacebar(int inverse) {
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
	if (!inverse) {
    1646:	89 2b       	or	r24, r25
    1648:	d1 f4       	brne	.+52     	; 0x167e <print_spacebar+0x3c>
		print_blank(4);
    164a:	84 e0       	ldi	r24, 0x04	; 4
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 4f 0a 	call	0x149e	; 0x149e <print_blank>

		//spacebar
		write_data(0b00111000);
    1652:	88 e3       	ldi	r24, 0x38	; 56
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
    165a:	c7 e2       	ldi	r28, 0x27	; 39
    165c:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 39;i++) write_data(0b00100000);
    165e:	80 e2       	ldi	r24, 0x20	; 32
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
    1666:	21 97       	sbiw	r28, 0x01	; 1
    1668:	20 97       	sbiw	r28, 0x00	; 0
    166a:	c9 f7       	brne	.-14     	; 0x165e <print_spacebar+0x1c>
		write_data(0b00111000);
    166c:	88 e3       	ldi	r24, 0x38	; 56
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>

		print_blank(5);
    1674:	85 e0       	ldi	r24, 0x05	; 5
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 4f 0a 	call	0x149e	; 0x149e <print_blank>
    167c:	19 c0       	rjmp	.+50     	; 0x16b0 <print_spacebar+0x6e>
	}
	else {
		print_blank(4);
    167e:	84 e0       	ldi	r24, 0x04	; 4
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 4f 0a 	call	0x149e	; 0x149e <print_blank>

		//spacebar
		write_data(~0b00111000);
    1686:	87 ec       	ldi	r24, 0xC7	; 199
    1688:	9f ef       	ldi	r25, 0xFF	; 255
    168a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
    168e:	c7 e2       	ldi	r28, 0x27	; 39
    1690:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 39;i++) write_data(~0b00100000);
    1692:	8f ed       	ldi	r24, 0xDF	; 223
    1694:	9f ef       	ldi	r25, 0xFF	; 255
    1696:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>
    169a:	21 97       	sbiw	r28, 0x01	; 1
    169c:	20 97       	sbiw	r28, 0x00	; 0
    169e:	c9 f7       	brne	.-14     	; 0x1692 <print_spacebar+0x50>
		write_data(~0b00111000);
    16a0:	87 ec       	ldi	r24, 0xC7	; 199
    16a2:	9f ef       	ldi	r25, 0xFF	; 255
    16a4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <write_data>

		print_blank(5);
    16a8:	85 e0       	ldi	r24, 0x05	; 5
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 4f 0a 	call	0x149e	; 0x149e <print_blank>
	}
}
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	08 95       	ret

000016b6 <print_options_bar>:


void print_options_bar(int shift_inverse, int space_inverse, int left_inverse,  int right_inverse) {
    16b6:	ef 92       	push	r14
    16b8:	ff 92       	push	r15
    16ba:	0f 93       	push	r16
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	7b 01       	movw	r14, r22
    16c4:	8a 01       	movw	r16, r20
    16c6:	e9 01       	movw	r28, r18
	print_shift(shift_inverse);
    16c8:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <print_shift>
	print_spacebar(space_inverse);
    16cc:	c7 01       	movw	r24, r14
    16ce:	0e 94 21 0b 	call	0x1642	; 0x1642 <print_spacebar>
	print_left_arrow(left_inverse);
    16d2:	c8 01       	movw	r24, r16
    16d4:	0e 94 c9 0a 	call	0x1592	; 0x1592 <print_left_arrow>
	print_right_arrow(right_inverse);
    16d8:	ce 01       	movw	r24, r28
    16da:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <print_right_arrow>
}
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	ff 90       	pop	r15
    16e8:	ef 90       	pop	r14
    16ea:	08 95       	ret

000016ec <print_char>:

void print_char(char c, int inverse) {
	if (!inverse) {
    16ec:	67 2b       	or	r22, r23
    16ee:	19 f4       	brne	.+6      	; 0x16f6 <print_char+0xa>
		OLED_print_char(c);
    16f0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <OLED_print_char>
    16f4:	08 95       	ret
	}
	else {
		OLED_print_char_inverse(c);
    16f6:	0e 94 00 0a 	call	0x1400	; 0x1400 <OLED_print_char_inverse>
    16fa:	08 95       	ret

000016fc <SPI_send>:
}


void SPI_send(uint8_t data){
	//Start transmission
	SPDR = data;		
    16fc:	8f b9       	out	0x0f, r24	; 15
	//wait for transmission complete SPSR: register with SPIF flag, SPIF: bit set to 1 when data is read
	loop_until_bit_is_set(SPSR, SPIF);
    16fe:	77 9b       	sbis	0x0e, 7	; 14
    1700:	fe cf       	rjmp	.-4      	; 0x16fe <SPI_send+0x2>
}
    1702:	08 95       	ret

00001704 <SPI_read>:


char SPI_read(){
	//must send a dummy bit to receive data
	SPI_send(0);
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <SPI_send>
	
	loop_until_bit_is_set(SPSR, SPIF);
    170a:	77 9b       	sbis	0x0e, 7	; 14
    170c:	fe cf       	rjmp	.-4      	; 0x170a <SPI_read+0x6>
	char data = SPDR;
    170e:	8f b1       	in	r24, 0x0f	; 15
	return data;
	
}
    1710:	08 95       	ret

00001712 <SPI_select>:
	//printf("SPI_TEST: %s\n\n", spi_read_result);
	
}

void SPI_select(){
	clear_bit(PORTB, SS);
    1712:	c4 98       	cbi	0x18, 4	; 24
    1714:	08 95       	ret

00001716 <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
    1716:	c4 9a       	sbi	0x18, 4	; 24
    1718:	08 95       	ret

0000171a <SRAM_init>:



void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
    171a:	85 b7       	in	r24, 0x35	; 53
    171c:	80 68       	ori	r24, 0x80	; 128
    171e:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
    1720:	80 b7       	in	r24, 0x30	; 48
    1722:	80 62       	ori	r24, 0x20	; 32
    1724:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
    1726:	80 b7       	in	r24, 0x30	; 48
    1728:	8f 7e       	andi	r24, 0xEF	; 239
    172a:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
    172c:	80 b7       	in	r24, 0x30	; 48
    172e:	87 7f       	andi	r24, 0xF7	; 247
    1730:	80 bf       	out	0x30, r24	; 48
    1732:	08 95       	ret

00001734 <usart_transmit_to_computer>:
    1734:	5d 9b       	sbis	0x0b, 5	; 11
    1736:	fe cf       	rjmp	.-4      	; 0x1734 <usart_transmit_to_computer>
    1738:	8c b9       	out	0x0c, r24	; 12
    173a:	08 95       	ret

0000173c <usart_receive_from_computer>:
    173c:	5f 9b       	sbis	0x0b, 7	; 11
    173e:	fe cf       	rjmp	.-4      	; 0x173c <usart_receive_from_computer>
    1740:	8c b1       	in	r24, 0x0c	; 12
    1742:	08 95       	ret

00001744 <usart_init>:
    1744:	90 bd       	out	0x20, r25	; 32
    1746:	89 b9       	out	0x09, r24	; 9
    1748:	88 e1       	ldi	r24, 0x18	; 24
    174a:	8a b9       	out	0x0a, r24	; 10
    174c:	8e e8       	ldi	r24, 0x8E	; 142
    174e:	80 bd       	out	0x20, r24	; 32
    1750:	6e e9       	ldi	r22, 0x9E	; 158
    1752:	7b e0       	ldi	r23, 0x0B	; 11
    1754:	8a e9       	ldi	r24, 0x9A	; 154
    1756:	9b e0       	ldi	r25, 0x0B	; 11
    1758:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <fdevopen>
    175c:	08 95       	ret

0000175e <__divmodhi4>:
    175e:	97 fb       	bst	r25, 7
    1760:	07 2e       	mov	r0, r23
    1762:	16 f4       	brtc	.+4      	; 0x1768 <__divmodhi4+0xa>
    1764:	00 94       	com	r0
    1766:	07 d0       	rcall	.+14     	; 0x1776 <__divmodhi4_neg1>
    1768:	77 fd       	sbrc	r23, 7
    176a:	09 d0       	rcall	.+18     	; 0x177e <__divmodhi4_neg2>
    176c:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__udivmodhi4>
    1770:	07 fc       	sbrc	r0, 7
    1772:	05 d0       	rcall	.+10     	; 0x177e <__divmodhi4_neg2>
    1774:	3e f4       	brtc	.+14     	; 0x1784 <__divmodhi4_exit>

00001776 <__divmodhi4_neg1>:
    1776:	90 95       	com	r25
    1778:	81 95       	neg	r24
    177a:	9f 4f       	sbci	r25, 0xFF	; 255
    177c:	08 95       	ret

0000177e <__divmodhi4_neg2>:
    177e:	70 95       	com	r23
    1780:	61 95       	neg	r22
    1782:	7f 4f       	sbci	r23, 0xFF	; 255

00001784 <__divmodhi4_exit>:
    1784:	08 95       	ret

00001786 <__udivmodhi4>:
    1786:	aa 1b       	sub	r26, r26
    1788:	bb 1b       	sub	r27, r27
    178a:	51 e1       	ldi	r21, 0x11	; 17
    178c:	07 c0       	rjmp	.+14     	; 0x179c <__udivmodhi4_ep>

0000178e <__udivmodhi4_loop>:
    178e:	aa 1f       	adc	r26, r26
    1790:	bb 1f       	adc	r27, r27
    1792:	a6 17       	cp	r26, r22
    1794:	b7 07       	cpc	r27, r23
    1796:	10 f0       	brcs	.+4      	; 0x179c <__udivmodhi4_ep>
    1798:	a6 1b       	sub	r26, r22
    179a:	b7 0b       	sbc	r27, r23

0000179c <__udivmodhi4_ep>:
    179c:	88 1f       	adc	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	5a 95       	dec	r21
    17a2:	a9 f7       	brne	.-22     	; 0x178e <__udivmodhi4_loop>
    17a4:	80 95       	com	r24
    17a6:	90 95       	com	r25
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	08 95       	ret

000017ae <malloc>:
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	82 30       	cpi	r24, 0x02	; 2
    17b4:	91 05       	cpc	r25, r1
    17b6:	10 f4       	brcc	.+4      	; 0x17bc <malloc+0xe>
    17b8:	82 e0       	ldi	r24, 0x02	; 2
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	e0 91 0c 04 	lds	r30, 0x040C
    17c0:	f0 91 0d 04 	lds	r31, 0x040D
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	30 97       	sbiw	r30, 0x00	; 0
    17ce:	39 f1       	breq	.+78     	; 0x181e <malloc+0x70>
    17d0:	40 81       	ld	r20, Z
    17d2:	51 81       	ldd	r21, Z+1	; 0x01
    17d4:	48 17       	cp	r20, r24
    17d6:	59 07       	cpc	r21, r25
    17d8:	b8 f0       	brcs	.+46     	; 0x1808 <malloc+0x5a>
    17da:	48 17       	cp	r20, r24
    17dc:	59 07       	cpc	r21, r25
    17de:	71 f4       	brne	.+28     	; 0x17fc <malloc+0x4e>
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	10 97       	sbiw	r26, 0x00	; 0
    17e6:	29 f0       	breq	.+10     	; 0x17f2 <malloc+0x44>
    17e8:	13 96       	adiw	r26, 0x03	; 3
    17ea:	9c 93       	st	X, r25
    17ec:	8e 93       	st	-X, r24
    17ee:	12 97       	sbiw	r26, 0x02	; 2
    17f0:	2c c0       	rjmp	.+88     	; 0x184a <malloc+0x9c>
    17f2:	90 93 0d 04 	sts	0x040D, r25
    17f6:	80 93 0c 04 	sts	0x040C, r24
    17fa:	27 c0       	rjmp	.+78     	; 0x184a <malloc+0x9c>
    17fc:	21 15       	cp	r18, r1
    17fe:	31 05       	cpc	r19, r1
    1800:	31 f0       	breq	.+12     	; 0x180e <malloc+0x60>
    1802:	42 17       	cp	r20, r18
    1804:	53 07       	cpc	r21, r19
    1806:	18 f0       	brcs	.+6      	; 0x180e <malloc+0x60>
    1808:	a9 01       	movw	r20, r18
    180a:	db 01       	movw	r26, r22
    180c:	01 c0       	rjmp	.+2      	; 0x1810 <malloc+0x62>
    180e:	ef 01       	movw	r28, r30
    1810:	9a 01       	movw	r18, r20
    1812:	bd 01       	movw	r22, r26
    1814:	df 01       	movw	r26, r30
    1816:	02 80       	ldd	r0, Z+2	; 0x02
    1818:	f3 81       	ldd	r31, Z+3	; 0x03
    181a:	e0 2d       	mov	r30, r0
    181c:	d7 cf       	rjmp	.-82     	; 0x17cc <malloc+0x1e>
    181e:	21 15       	cp	r18, r1
    1820:	31 05       	cpc	r19, r1
    1822:	f9 f0       	breq	.+62     	; 0x1862 <malloc+0xb4>
    1824:	28 1b       	sub	r18, r24
    1826:	39 0b       	sbc	r19, r25
    1828:	24 30       	cpi	r18, 0x04	; 4
    182a:	31 05       	cpc	r19, r1
    182c:	80 f4       	brcc	.+32     	; 0x184e <malloc+0xa0>
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	9b 81       	ldd	r25, Y+3	; 0x03
    1832:	61 15       	cp	r22, r1
    1834:	71 05       	cpc	r23, r1
    1836:	21 f0       	breq	.+8      	; 0x1840 <malloc+0x92>
    1838:	fb 01       	movw	r30, r22
    183a:	93 83       	std	Z+3, r25	; 0x03
    183c:	82 83       	std	Z+2, r24	; 0x02
    183e:	04 c0       	rjmp	.+8      	; 0x1848 <malloc+0x9a>
    1840:	90 93 0d 04 	sts	0x040D, r25
    1844:	80 93 0c 04 	sts	0x040C, r24
    1848:	fe 01       	movw	r30, r28
    184a:	32 96       	adiw	r30, 0x02	; 2
    184c:	44 c0       	rjmp	.+136    	; 0x18d6 <malloc+0x128>
    184e:	fe 01       	movw	r30, r28
    1850:	e2 0f       	add	r30, r18
    1852:	f3 1f       	adc	r31, r19
    1854:	81 93       	st	Z+, r24
    1856:	91 93       	st	Z+, r25
    1858:	22 50       	subi	r18, 0x02	; 2
    185a:	31 09       	sbc	r19, r1
    185c:	39 83       	std	Y+1, r19	; 0x01
    185e:	28 83       	st	Y, r18
    1860:	3a c0       	rjmp	.+116    	; 0x18d6 <malloc+0x128>
    1862:	20 91 0a 04 	lds	r18, 0x040A
    1866:	30 91 0b 04 	lds	r19, 0x040B
    186a:	23 2b       	or	r18, r19
    186c:	41 f4       	brne	.+16     	; 0x187e <malloc+0xd0>
    186e:	20 91 02 01 	lds	r18, 0x0102
    1872:	30 91 03 01 	lds	r19, 0x0103
    1876:	30 93 0b 04 	sts	0x040B, r19
    187a:	20 93 0a 04 	sts	0x040A, r18
    187e:	20 91 00 01 	lds	r18, 0x0100
    1882:	30 91 01 01 	lds	r19, 0x0101
    1886:	21 15       	cp	r18, r1
    1888:	31 05       	cpc	r19, r1
    188a:	41 f4       	brne	.+16     	; 0x189c <malloc+0xee>
    188c:	2d b7       	in	r18, 0x3d	; 61
    188e:	3e b7       	in	r19, 0x3e	; 62
    1890:	40 91 04 01 	lds	r20, 0x0104
    1894:	50 91 05 01 	lds	r21, 0x0105
    1898:	24 1b       	sub	r18, r20
    189a:	35 0b       	sbc	r19, r21
    189c:	e0 91 0a 04 	lds	r30, 0x040A
    18a0:	f0 91 0b 04 	lds	r31, 0x040B
    18a4:	e2 17       	cp	r30, r18
    18a6:	f3 07       	cpc	r31, r19
    18a8:	a0 f4       	brcc	.+40     	; 0x18d2 <malloc+0x124>
    18aa:	2e 1b       	sub	r18, r30
    18ac:	3f 0b       	sbc	r19, r31
    18ae:	28 17       	cp	r18, r24
    18b0:	39 07       	cpc	r19, r25
    18b2:	78 f0       	brcs	.+30     	; 0x18d2 <malloc+0x124>
    18b4:	ac 01       	movw	r20, r24
    18b6:	4e 5f       	subi	r20, 0xFE	; 254
    18b8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ba:	24 17       	cp	r18, r20
    18bc:	35 07       	cpc	r19, r21
    18be:	48 f0       	brcs	.+18     	; 0x18d2 <malloc+0x124>
    18c0:	4e 0f       	add	r20, r30
    18c2:	5f 1f       	adc	r21, r31
    18c4:	50 93 0b 04 	sts	0x040B, r21
    18c8:	40 93 0a 04 	sts	0x040A, r20
    18cc:	81 93       	st	Z+, r24
    18ce:	91 93       	st	Z+, r25
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <malloc+0x128>
    18d2:	e0 e0       	ldi	r30, 0x00	; 0
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	cf 01       	movw	r24, r30
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	08 95       	ret

000018de <free>:
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	00 97       	sbiw	r24, 0x00	; 0
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <free+0xa>
    18e6:	87 c0       	rjmp	.+270    	; 0x19f6 <free+0x118>
    18e8:	fc 01       	movw	r30, r24
    18ea:	32 97       	sbiw	r30, 0x02	; 2
    18ec:	13 82       	std	Z+3, r1	; 0x03
    18ee:	12 82       	std	Z+2, r1	; 0x02
    18f0:	c0 91 0c 04 	lds	r28, 0x040C
    18f4:	d0 91 0d 04 	lds	r29, 0x040D
    18f8:	20 97       	sbiw	r28, 0x00	; 0
    18fa:	81 f4       	brne	.+32     	; 0x191c <free+0x3e>
    18fc:	20 81       	ld	r18, Z
    18fe:	31 81       	ldd	r19, Z+1	; 0x01
    1900:	28 0f       	add	r18, r24
    1902:	39 1f       	adc	r19, r25
    1904:	80 91 0a 04 	lds	r24, 0x040A
    1908:	90 91 0b 04 	lds	r25, 0x040B
    190c:	82 17       	cp	r24, r18
    190e:	93 07       	cpc	r25, r19
    1910:	79 f5       	brne	.+94     	; 0x1970 <free+0x92>
    1912:	f0 93 0b 04 	sts	0x040B, r31
    1916:	e0 93 0a 04 	sts	0x040A, r30
    191a:	6d c0       	rjmp	.+218    	; 0x19f6 <free+0x118>
    191c:	de 01       	movw	r26, r28
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	ae 17       	cp	r26, r30
    1924:	bf 07       	cpc	r27, r31
    1926:	50 f4       	brcc	.+20     	; 0x193c <free+0x5e>
    1928:	12 96       	adiw	r26, 0x02	; 2
    192a:	4d 91       	ld	r20, X+
    192c:	5c 91       	ld	r21, X
    192e:	13 97       	sbiw	r26, 0x03	; 3
    1930:	9d 01       	movw	r18, r26
    1932:	41 15       	cp	r20, r1
    1934:	51 05       	cpc	r21, r1
    1936:	09 f1       	breq	.+66     	; 0x197a <free+0x9c>
    1938:	da 01       	movw	r26, r20
    193a:	f3 cf       	rjmp	.-26     	; 0x1922 <free+0x44>
    193c:	b3 83       	std	Z+3, r27	; 0x03
    193e:	a2 83       	std	Z+2, r26	; 0x02
    1940:	40 81       	ld	r20, Z
    1942:	51 81       	ldd	r21, Z+1	; 0x01
    1944:	84 0f       	add	r24, r20
    1946:	95 1f       	adc	r25, r21
    1948:	8a 17       	cp	r24, r26
    194a:	9b 07       	cpc	r25, r27
    194c:	71 f4       	brne	.+28     	; 0x196a <free+0x8c>
    194e:	8d 91       	ld	r24, X+
    1950:	9c 91       	ld	r25, X
    1952:	11 97       	sbiw	r26, 0x01	; 1
    1954:	84 0f       	add	r24, r20
    1956:	95 1f       	adc	r25, r21
    1958:	02 96       	adiw	r24, 0x02	; 2
    195a:	91 83       	std	Z+1, r25	; 0x01
    195c:	80 83       	st	Z, r24
    195e:	12 96       	adiw	r26, 0x02	; 2
    1960:	8d 91       	ld	r24, X+
    1962:	9c 91       	ld	r25, X
    1964:	13 97       	sbiw	r26, 0x03	; 3
    1966:	93 83       	std	Z+3, r25	; 0x03
    1968:	82 83       	std	Z+2, r24	; 0x02
    196a:	21 15       	cp	r18, r1
    196c:	31 05       	cpc	r19, r1
    196e:	29 f4       	brne	.+10     	; 0x197a <free+0x9c>
    1970:	f0 93 0d 04 	sts	0x040D, r31
    1974:	e0 93 0c 04 	sts	0x040C, r30
    1978:	3e c0       	rjmp	.+124    	; 0x19f6 <free+0x118>
    197a:	d9 01       	movw	r26, r18
    197c:	13 96       	adiw	r26, 0x03	; 3
    197e:	fc 93       	st	X, r31
    1980:	ee 93       	st	-X, r30
    1982:	12 97       	sbiw	r26, 0x02	; 2
    1984:	4d 91       	ld	r20, X+
    1986:	5d 91       	ld	r21, X+
    1988:	a4 0f       	add	r26, r20
    198a:	b5 1f       	adc	r27, r21
    198c:	ea 17       	cp	r30, r26
    198e:	fb 07       	cpc	r31, r27
    1990:	79 f4       	brne	.+30     	; 0x19b0 <free+0xd2>
    1992:	80 81       	ld	r24, Z
    1994:	91 81       	ldd	r25, Z+1	; 0x01
    1996:	84 0f       	add	r24, r20
    1998:	95 1f       	adc	r25, r21
    199a:	02 96       	adiw	r24, 0x02	; 2
    199c:	d9 01       	movw	r26, r18
    199e:	11 96       	adiw	r26, 0x01	; 1
    19a0:	9c 93       	st	X, r25
    19a2:	8e 93       	st	-X, r24
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	13 96       	adiw	r26, 0x03	; 3
    19aa:	9c 93       	st	X, r25
    19ac:	8e 93       	st	-X, r24
    19ae:	12 97       	sbiw	r26, 0x02	; 2
    19b0:	e0 e0       	ldi	r30, 0x00	; 0
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	9b 81       	ldd	r25, Y+3	; 0x03
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	19 f0       	breq	.+6      	; 0x19c2 <free+0xe4>
    19bc:	fe 01       	movw	r30, r28
    19be:	ec 01       	movw	r28, r24
    19c0:	f9 cf       	rjmp	.-14     	; 0x19b4 <free+0xd6>
    19c2:	ce 01       	movw	r24, r28
    19c4:	02 96       	adiw	r24, 0x02	; 2
    19c6:	28 81       	ld	r18, Y
    19c8:	39 81       	ldd	r19, Y+1	; 0x01
    19ca:	82 0f       	add	r24, r18
    19cc:	93 1f       	adc	r25, r19
    19ce:	20 91 0a 04 	lds	r18, 0x040A
    19d2:	30 91 0b 04 	lds	r19, 0x040B
    19d6:	28 17       	cp	r18, r24
    19d8:	39 07       	cpc	r19, r25
    19da:	69 f4       	brne	.+26     	; 0x19f6 <free+0x118>
    19dc:	30 97       	sbiw	r30, 0x00	; 0
    19de:	29 f4       	brne	.+10     	; 0x19ea <free+0x10c>
    19e0:	10 92 0d 04 	sts	0x040D, r1
    19e4:	10 92 0c 04 	sts	0x040C, r1
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <free+0x110>
    19ea:	13 82       	std	Z+3, r1	; 0x03
    19ec:	12 82       	std	Z+2, r1	; 0x02
    19ee:	d0 93 0b 04 	sts	0x040B, r29
    19f2:	c0 93 0a 04 	sts	0x040A, r28
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	08 95       	ret

000019fc <fdevopen>:
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	ec 01       	movw	r28, r24
    1a06:	8b 01       	movw	r16, r22
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	31 f4       	brne	.+12     	; 0x1a18 <fdevopen+0x1c>
    1a0c:	61 15       	cp	r22, r1
    1a0e:	71 05       	cpc	r23, r1
    1a10:	19 f4       	brne	.+6      	; 0x1a18 <fdevopen+0x1c>
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	38 c0       	rjmp	.+112    	; 0x1a88 <fdevopen+0x8c>
    1a18:	6e e0       	ldi	r22, 0x0E	; 14
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <calloc>
    1a24:	fc 01       	movw	r30, r24
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	a1 f3       	breq	.-24     	; 0x1a12 <fdevopen+0x16>
    1a2a:	80 e8       	ldi	r24, 0x80	; 128
    1a2c:	83 83       	std	Z+3, r24	; 0x03
    1a2e:	01 15       	cp	r16, r1
    1a30:	11 05       	cpc	r17, r1
    1a32:	71 f0       	breq	.+28     	; 0x1a50 <fdevopen+0x54>
    1a34:	13 87       	std	Z+11, r17	; 0x0b
    1a36:	02 87       	std	Z+10, r16	; 0x0a
    1a38:	81 e8       	ldi	r24, 0x81	; 129
    1a3a:	83 83       	std	Z+3, r24	; 0x03
    1a3c:	80 91 0e 04 	lds	r24, 0x040E
    1a40:	90 91 0f 04 	lds	r25, 0x040F
    1a44:	89 2b       	or	r24, r25
    1a46:	21 f4       	brne	.+8      	; 0x1a50 <fdevopen+0x54>
    1a48:	f0 93 0f 04 	sts	0x040F, r31
    1a4c:	e0 93 0e 04 	sts	0x040E, r30
    1a50:	20 97       	sbiw	r28, 0x00	; 0
    1a52:	c9 f0       	breq	.+50     	; 0x1a86 <fdevopen+0x8a>
    1a54:	d1 87       	std	Z+9, r29	; 0x09
    1a56:	c0 87       	std	Z+8, r28	; 0x08
    1a58:	83 81       	ldd	r24, Z+3	; 0x03
    1a5a:	82 60       	ori	r24, 0x02	; 2
    1a5c:	83 83       	std	Z+3, r24	; 0x03
    1a5e:	80 91 10 04 	lds	r24, 0x0410
    1a62:	90 91 11 04 	lds	r25, 0x0411
    1a66:	89 2b       	or	r24, r25
    1a68:	71 f4       	brne	.+28     	; 0x1a86 <fdevopen+0x8a>
    1a6a:	f0 93 11 04 	sts	0x0411, r31
    1a6e:	e0 93 10 04 	sts	0x0410, r30
    1a72:	80 91 12 04 	lds	r24, 0x0412
    1a76:	90 91 13 04 	lds	r25, 0x0413
    1a7a:	89 2b       	or	r24, r25
    1a7c:	21 f4       	brne	.+8      	; 0x1a86 <fdevopen+0x8a>
    1a7e:	f0 93 13 04 	sts	0x0413, r31
    1a82:	e0 93 12 04 	sts	0x0412, r30
    1a86:	cf 01       	movw	r24, r30
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
    1a90:	08 95       	ret

00001a92 <fprintf>:
    1a92:	a0 e0       	ldi	r26, 0x00	; 0
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ef e4       	ldi	r30, 0x4F	; 79
    1a98:	fd e0       	ldi	r31, 0x0D	; 13
    1a9a:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__prologue_saves__+0x20>
    1a9e:	ae 01       	movw	r20, r28
    1aa0:	47 5f       	subi	r20, 0xF7	; 247
    1aa2:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa6:	78 85       	ldd	r23, Y+8	; 0x08
    1aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1aac:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <vfprintf>
    1ab0:	e2 e0       	ldi	r30, 0x02	; 2
    1ab2:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__epilogue_restores__+0x20>

00001ab6 <fputs>:
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	8b 01       	movw	r16, r22
    1ac4:	db 01       	movw	r26, r22
    1ac6:	13 96       	adiw	r26, 0x03	; 3
    1ac8:	2c 91       	ld	r18, X
    1aca:	21 ff       	sbrs	r18, 1
    1acc:	16 c0       	rjmp	.+44     	; 0x1afa <fputs+0x44>
    1ace:	ec 01       	movw	r28, r24
    1ad0:	e1 2c       	mov	r14, r1
    1ad2:	f1 2c       	mov	r15, r1
    1ad4:	89 91       	ld	r24, Y+
    1ad6:	88 23       	and	r24, r24
    1ad8:	71 f0       	breq	.+28     	; 0x1af6 <fputs+0x40>
    1ada:	d8 01       	movw	r26, r16
    1adc:	18 96       	adiw	r26, 0x08	; 8
    1ade:	ed 91       	ld	r30, X+
    1ae0:	fc 91       	ld	r31, X
    1ae2:	19 97       	sbiw	r26, 0x09	; 9
    1ae4:	b8 01       	movw	r22, r16
    1ae6:	09 95       	icall
    1ae8:	89 2b       	or	r24, r25
    1aea:	a1 f3       	breq	.-24     	; 0x1ad4 <fputs+0x1e>
    1aec:	ee 24       	eor	r14, r14
    1aee:	ea 94       	dec	r14
    1af0:	ff 24       	eor	r15, r15
    1af2:	fa 94       	dec	r15
    1af4:	ef cf       	rjmp	.-34     	; 0x1ad4 <fputs+0x1e>
    1af6:	c7 01       	movw	r24, r14
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <fputs+0x48>
    1afa:	8f ef       	ldi	r24, 0xFF	; 255
    1afc:	9f ef       	ldi	r25, 0xFF	; 255
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	e6 e0       	ldi	r30, 0x06	; 6
    1b04:	0c 94 88 10 	jmp	0x2110	; 0x2110 <__epilogue_restores__+0x18>

00001b08 <printf>:
    1b08:	a0 e0       	ldi	r26, 0x00	; 0
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	ea e8       	ldi	r30, 0x8A	; 138
    1b0e:	fd e0       	ldi	r31, 0x0D	; 13
    1b10:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__prologue_saves__+0x20>
    1b14:	fe 01       	movw	r30, r28
    1b16:	35 96       	adiw	r30, 0x05	; 5
    1b18:	61 91       	ld	r22, Z+
    1b1a:	71 91       	ld	r23, Z+
    1b1c:	af 01       	movw	r20, r30
    1b1e:	80 91 10 04 	lds	r24, 0x0410
    1b22:	90 91 11 04 	lds	r25, 0x0411
    1b26:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <vfprintf>
    1b2a:	e2 e0       	ldi	r30, 0x02	; 2
    1b2c:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <__epilogue_restores__+0x20>

00001b30 <puts>:
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	e0 91 10 04 	lds	r30, 0x0410
    1b3c:	f0 91 11 04 	lds	r31, 0x0411
    1b40:	23 81       	ldd	r18, Z+3	; 0x03
    1b42:	21 ff       	sbrs	r18, 1
    1b44:	1b c0       	rjmp	.+54     	; 0x1b7c <puts+0x4c>
    1b46:	ec 01       	movw	r28, r24
    1b48:	00 e0       	ldi	r16, 0x00	; 0
    1b4a:	10 e0       	ldi	r17, 0x00	; 0
    1b4c:	89 91       	ld	r24, Y+
    1b4e:	60 91 10 04 	lds	r22, 0x0410
    1b52:	70 91 11 04 	lds	r23, 0x0411
    1b56:	db 01       	movw	r26, r22
    1b58:	18 96       	adiw	r26, 0x08	; 8
    1b5a:	ed 91       	ld	r30, X+
    1b5c:	fc 91       	ld	r31, X
    1b5e:	19 97       	sbiw	r26, 0x09	; 9
    1b60:	88 23       	and	r24, r24
    1b62:	31 f0       	breq	.+12     	; 0x1b70 <puts+0x40>
    1b64:	09 95       	icall
    1b66:	89 2b       	or	r24, r25
    1b68:	89 f3       	breq	.-30     	; 0x1b4c <puts+0x1c>
    1b6a:	0f ef       	ldi	r16, 0xFF	; 255
    1b6c:	1f ef       	ldi	r17, 0xFF	; 255
    1b6e:	ee cf       	rjmp	.-36     	; 0x1b4c <puts+0x1c>
    1b70:	8a e0       	ldi	r24, 0x0A	; 10
    1b72:	09 95       	icall
    1b74:	89 2b       	or	r24, r25
    1b76:	11 f4       	brne	.+4      	; 0x1b7c <puts+0x4c>
    1b78:	c8 01       	movw	r24, r16
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <puts+0x50>
    1b7c:	8f ef       	ldi	r24, 0xFF	; 255
    1b7e:	9f ef       	ldi	r25, 0xFF	; 255
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	08 95       	ret

00001b8a <vfprintf>:
    1b8a:	ac e0       	ldi	r26, 0x0C	; 12
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	eb ec       	ldi	r30, 0xCB	; 203
    1b90:	fd e0       	ldi	r31, 0x0D	; 13
    1b92:	0c 94 60 10 	jmp	0x20c0	; 0x20c0 <__prologue_saves__>
    1b96:	7c 01       	movw	r14, r24
    1b98:	6b 01       	movw	r12, r22
    1b9a:	8a 01       	movw	r16, r20
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	17 82       	std	Z+7, r1	; 0x07
    1ba0:	16 82       	std	Z+6, r1	; 0x06
    1ba2:	83 81       	ldd	r24, Z+3	; 0x03
    1ba4:	81 ff       	sbrs	r24, 1
    1ba6:	bd c1       	rjmp	.+890    	; 0x1f22 <vfprintf+0x398>
    1ba8:	ce 01       	movw	r24, r28
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	4c 01       	movw	r8, r24
    1bae:	f7 01       	movw	r30, r14
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	f6 01       	movw	r30, r12
    1bb4:	93 fd       	sbrc	r25, 3
    1bb6:	85 91       	lpm	r24, Z+
    1bb8:	93 ff       	sbrs	r25, 3
    1bba:	81 91       	ld	r24, Z+
    1bbc:	6f 01       	movw	r12, r30
    1bbe:	88 23       	and	r24, r24
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <vfprintf+0x3a>
    1bc2:	ab c1       	rjmp	.+854    	; 0x1f1a <vfprintf+0x390>
    1bc4:	85 32       	cpi	r24, 0x25	; 37
    1bc6:	39 f4       	brne	.+14     	; 0x1bd6 <vfprintf+0x4c>
    1bc8:	93 fd       	sbrc	r25, 3
    1bca:	85 91       	lpm	r24, Z+
    1bcc:	93 ff       	sbrs	r25, 3
    1bce:	81 91       	ld	r24, Z+
    1bd0:	6f 01       	movw	r12, r30
    1bd2:	85 32       	cpi	r24, 0x25	; 37
    1bd4:	29 f4       	brne	.+10     	; 0x1be0 <vfprintf+0x56>
    1bd6:	b7 01       	movw	r22, r14
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <fputc>
    1bde:	e7 cf       	rjmp	.-50     	; 0x1bae <vfprintf+0x24>
    1be0:	51 2c       	mov	r5, r1
    1be2:	31 2c       	mov	r3, r1
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	20 32       	cpi	r18, 0x20	; 32
    1be8:	a0 f4       	brcc	.+40     	; 0x1c12 <vfprintf+0x88>
    1bea:	8b 32       	cpi	r24, 0x2B	; 43
    1bec:	69 f0       	breq	.+26     	; 0x1c08 <vfprintf+0x7e>
    1bee:	30 f4       	brcc	.+12     	; 0x1bfc <vfprintf+0x72>
    1bf0:	80 32       	cpi	r24, 0x20	; 32
    1bf2:	59 f0       	breq	.+22     	; 0x1c0a <vfprintf+0x80>
    1bf4:	83 32       	cpi	r24, 0x23	; 35
    1bf6:	69 f4       	brne	.+26     	; 0x1c12 <vfprintf+0x88>
    1bf8:	20 61       	ori	r18, 0x10	; 16
    1bfa:	2c c0       	rjmp	.+88     	; 0x1c54 <vfprintf+0xca>
    1bfc:	8d 32       	cpi	r24, 0x2D	; 45
    1bfe:	39 f0       	breq	.+14     	; 0x1c0e <vfprintf+0x84>
    1c00:	80 33       	cpi	r24, 0x30	; 48
    1c02:	39 f4       	brne	.+14     	; 0x1c12 <vfprintf+0x88>
    1c04:	21 60       	ori	r18, 0x01	; 1
    1c06:	26 c0       	rjmp	.+76     	; 0x1c54 <vfprintf+0xca>
    1c08:	22 60       	ori	r18, 0x02	; 2
    1c0a:	24 60       	ori	r18, 0x04	; 4
    1c0c:	23 c0       	rjmp	.+70     	; 0x1c54 <vfprintf+0xca>
    1c0e:	28 60       	ori	r18, 0x08	; 8
    1c10:	21 c0       	rjmp	.+66     	; 0x1c54 <vfprintf+0xca>
    1c12:	27 fd       	sbrc	r18, 7
    1c14:	27 c0       	rjmp	.+78     	; 0x1c64 <vfprintf+0xda>
    1c16:	30 ed       	ldi	r19, 0xD0	; 208
    1c18:	38 0f       	add	r19, r24
    1c1a:	3a 30       	cpi	r19, 0x0A	; 10
    1c1c:	78 f4       	brcc	.+30     	; 0x1c3c <vfprintf+0xb2>
    1c1e:	26 ff       	sbrs	r18, 6
    1c20:	06 c0       	rjmp	.+12     	; 0x1c2e <vfprintf+0xa4>
    1c22:	fa e0       	ldi	r31, 0x0A	; 10
    1c24:	5f 9e       	mul	r5, r31
    1c26:	30 0d       	add	r19, r0
    1c28:	11 24       	eor	r1, r1
    1c2a:	53 2e       	mov	r5, r19
    1c2c:	13 c0       	rjmp	.+38     	; 0x1c54 <vfprintf+0xca>
    1c2e:	8a e0       	ldi	r24, 0x0A	; 10
    1c30:	38 9e       	mul	r3, r24
    1c32:	30 0d       	add	r19, r0
    1c34:	11 24       	eor	r1, r1
    1c36:	33 2e       	mov	r3, r19
    1c38:	20 62       	ori	r18, 0x20	; 32
    1c3a:	0c c0       	rjmp	.+24     	; 0x1c54 <vfprintf+0xca>
    1c3c:	8e 32       	cpi	r24, 0x2E	; 46
    1c3e:	21 f4       	brne	.+8      	; 0x1c48 <vfprintf+0xbe>
    1c40:	26 fd       	sbrc	r18, 6
    1c42:	6b c1       	rjmp	.+726    	; 0x1f1a <vfprintf+0x390>
    1c44:	20 64       	ori	r18, 0x40	; 64
    1c46:	06 c0       	rjmp	.+12     	; 0x1c54 <vfprintf+0xca>
    1c48:	8c 36       	cpi	r24, 0x6C	; 108
    1c4a:	11 f4       	brne	.+4      	; 0x1c50 <vfprintf+0xc6>
    1c4c:	20 68       	ori	r18, 0x80	; 128
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <vfprintf+0xca>
    1c50:	88 36       	cpi	r24, 0x68	; 104
    1c52:	41 f4       	brne	.+16     	; 0x1c64 <vfprintf+0xda>
    1c54:	f6 01       	movw	r30, r12
    1c56:	93 fd       	sbrc	r25, 3
    1c58:	85 91       	lpm	r24, Z+
    1c5a:	93 ff       	sbrs	r25, 3
    1c5c:	81 91       	ld	r24, Z+
    1c5e:	6f 01       	movw	r12, r30
    1c60:	81 11       	cpse	r24, r1
    1c62:	c1 cf       	rjmp	.-126    	; 0x1be6 <vfprintf+0x5c>
    1c64:	98 2f       	mov	r25, r24
    1c66:	9f 7d       	andi	r25, 0xDF	; 223
    1c68:	95 54       	subi	r25, 0x45	; 69
    1c6a:	93 30       	cpi	r25, 0x03	; 3
    1c6c:	28 f4       	brcc	.+10     	; 0x1c78 <vfprintf+0xee>
    1c6e:	0c 5f       	subi	r16, 0xFC	; 252
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	ff e3       	ldi	r31, 0x3F	; 63
    1c74:	f9 83       	std	Y+1, r31	; 0x01
    1c76:	0d c0       	rjmp	.+26     	; 0x1c92 <vfprintf+0x108>
    1c78:	83 36       	cpi	r24, 0x63	; 99
    1c7a:	31 f0       	breq	.+12     	; 0x1c88 <vfprintf+0xfe>
    1c7c:	83 37       	cpi	r24, 0x73	; 115
    1c7e:	71 f0       	breq	.+28     	; 0x1c9c <vfprintf+0x112>
    1c80:	83 35       	cpi	r24, 0x53	; 83
    1c82:	09 f0       	breq	.+2      	; 0x1c86 <vfprintf+0xfc>
    1c84:	5b c0       	rjmp	.+182    	; 0x1d3c <vfprintf+0x1b2>
    1c86:	22 c0       	rjmp	.+68     	; 0x1ccc <vfprintf+0x142>
    1c88:	f8 01       	movw	r30, r16
    1c8a:	80 81       	ld	r24, Z
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	0e 5f       	subi	r16, 0xFE	; 254
    1c90:	1f 4f       	sbci	r17, 0xFF	; 255
    1c92:	44 24       	eor	r4, r4
    1c94:	43 94       	inc	r4
    1c96:	51 2c       	mov	r5, r1
    1c98:	54 01       	movw	r10, r8
    1c9a:	15 c0       	rjmp	.+42     	; 0x1cc6 <vfprintf+0x13c>
    1c9c:	38 01       	movw	r6, r16
    1c9e:	f2 e0       	ldi	r31, 0x02	; 2
    1ca0:	6f 0e       	add	r6, r31
    1ca2:	71 1c       	adc	r7, r1
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	a0 80       	ld	r10, Z
    1ca8:	b1 80       	ldd	r11, Z+1	; 0x01
    1caa:	26 ff       	sbrs	r18, 6
    1cac:	03 c0       	rjmp	.+6      	; 0x1cb4 <vfprintf+0x12a>
    1cae:	65 2d       	mov	r22, r5
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <vfprintf+0x12e>
    1cb4:	6f ef       	ldi	r22, 0xFF	; 255
    1cb6:	7f ef       	ldi	r23, 0xFF	; 255
    1cb8:	c5 01       	movw	r24, r10
    1cba:	2c 87       	std	Y+12, r18	; 0x0c
    1cbc:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <strnlen>
    1cc0:	2c 01       	movw	r4, r24
    1cc2:	83 01       	movw	r16, r6
    1cc4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cc6:	2f 77       	andi	r18, 0x7F	; 127
    1cc8:	22 2e       	mov	r2, r18
    1cca:	17 c0       	rjmp	.+46     	; 0x1cfa <vfprintf+0x170>
    1ccc:	38 01       	movw	r6, r16
    1cce:	f2 e0       	ldi	r31, 0x02	; 2
    1cd0:	6f 0e       	add	r6, r31
    1cd2:	71 1c       	adc	r7, r1
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	a0 80       	ld	r10, Z
    1cd8:	b1 80       	ldd	r11, Z+1	; 0x01
    1cda:	26 ff       	sbrs	r18, 6
    1cdc:	03 c0       	rjmp	.+6      	; 0x1ce4 <vfprintf+0x15a>
    1cde:	65 2d       	mov	r22, r5
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <vfprintf+0x15e>
    1ce4:	6f ef       	ldi	r22, 0xFF	; 255
    1ce6:	7f ef       	ldi	r23, 0xFF	; 255
    1ce8:	c5 01       	movw	r24, r10
    1cea:	2c 87       	std	Y+12, r18	; 0x0c
    1cec:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <strnlen_P>
    1cf0:	2c 01       	movw	r4, r24
    1cf2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cf4:	20 68       	ori	r18, 0x80	; 128
    1cf6:	22 2e       	mov	r2, r18
    1cf8:	83 01       	movw	r16, r6
    1cfa:	23 fc       	sbrc	r2, 3
    1cfc:	1b c0       	rjmp	.+54     	; 0x1d34 <vfprintf+0x1aa>
    1cfe:	83 2d       	mov	r24, r3
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	48 16       	cp	r4, r24
    1d04:	59 06       	cpc	r5, r25
    1d06:	b0 f4       	brcc	.+44     	; 0x1d34 <vfprintf+0x1aa>
    1d08:	b7 01       	movw	r22, r14
    1d0a:	80 e2       	ldi	r24, 0x20	; 32
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <fputc>
    1d12:	3a 94       	dec	r3
    1d14:	f4 cf       	rjmp	.-24     	; 0x1cfe <vfprintf+0x174>
    1d16:	f5 01       	movw	r30, r10
    1d18:	27 fc       	sbrc	r2, 7
    1d1a:	85 91       	lpm	r24, Z+
    1d1c:	27 fe       	sbrs	r2, 7
    1d1e:	81 91       	ld	r24, Z+
    1d20:	5f 01       	movw	r10, r30
    1d22:	b7 01       	movw	r22, r14
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <fputc>
    1d2a:	31 10       	cpse	r3, r1
    1d2c:	3a 94       	dec	r3
    1d2e:	f1 e0       	ldi	r31, 0x01	; 1
    1d30:	4f 1a       	sub	r4, r31
    1d32:	51 08       	sbc	r5, r1
    1d34:	41 14       	cp	r4, r1
    1d36:	51 04       	cpc	r5, r1
    1d38:	71 f7       	brne	.-36     	; 0x1d16 <vfprintf+0x18c>
    1d3a:	e5 c0       	rjmp	.+458    	; 0x1f06 <vfprintf+0x37c>
    1d3c:	84 36       	cpi	r24, 0x64	; 100
    1d3e:	11 f0       	breq	.+4      	; 0x1d44 <vfprintf+0x1ba>
    1d40:	89 36       	cpi	r24, 0x69	; 105
    1d42:	39 f5       	brne	.+78     	; 0x1d92 <vfprintf+0x208>
    1d44:	f8 01       	movw	r30, r16
    1d46:	27 ff       	sbrs	r18, 7
    1d48:	07 c0       	rjmp	.+14     	; 0x1d58 <vfprintf+0x1ce>
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	0c 5f       	subi	r16, 0xFC	; 252
    1d54:	1f 4f       	sbci	r17, 0xFF	; 255
    1d56:	08 c0       	rjmp	.+16     	; 0x1d68 <vfprintf+0x1de>
    1d58:	60 81       	ld	r22, Z
    1d5a:	71 81       	ldd	r23, Z+1	; 0x01
    1d5c:	88 27       	eor	r24, r24
    1d5e:	77 fd       	sbrc	r23, 7
    1d60:	80 95       	com	r24
    1d62:	98 2f       	mov	r25, r24
    1d64:	0e 5f       	subi	r16, 0xFE	; 254
    1d66:	1f 4f       	sbci	r17, 0xFF	; 255
    1d68:	2f 76       	andi	r18, 0x6F	; 111
    1d6a:	b2 2e       	mov	r11, r18
    1d6c:	97 ff       	sbrs	r25, 7
    1d6e:	09 c0       	rjmp	.+18     	; 0x1d82 <vfprintf+0x1f8>
    1d70:	90 95       	com	r25
    1d72:	80 95       	com	r24
    1d74:	70 95       	com	r23
    1d76:	61 95       	neg	r22
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
    1d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7e:	20 68       	ori	r18, 0x80	; 128
    1d80:	b2 2e       	mov	r11, r18
    1d82:	2a e0       	ldi	r18, 0x0A	; 10
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	a4 01       	movw	r20, r8
    1d88:	0e 94 02 10 	call	0x2004	; 0x2004 <__ultoa_invert>
    1d8c:	a8 2e       	mov	r10, r24
    1d8e:	a8 18       	sub	r10, r8
    1d90:	44 c0       	rjmp	.+136    	; 0x1e1a <vfprintf+0x290>
    1d92:	85 37       	cpi	r24, 0x75	; 117
    1d94:	29 f4       	brne	.+10     	; 0x1da0 <vfprintf+0x216>
    1d96:	2f 7e       	andi	r18, 0xEF	; 239
    1d98:	b2 2e       	mov	r11, r18
    1d9a:	2a e0       	ldi	r18, 0x0A	; 10
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	25 c0       	rjmp	.+74     	; 0x1dea <vfprintf+0x260>
    1da0:	f2 2f       	mov	r31, r18
    1da2:	f9 7f       	andi	r31, 0xF9	; 249
    1da4:	bf 2e       	mov	r11, r31
    1da6:	8f 36       	cpi	r24, 0x6F	; 111
    1da8:	c1 f0       	breq	.+48     	; 0x1dda <vfprintf+0x250>
    1daa:	18 f4       	brcc	.+6      	; 0x1db2 <vfprintf+0x228>
    1dac:	88 35       	cpi	r24, 0x58	; 88
    1dae:	79 f0       	breq	.+30     	; 0x1dce <vfprintf+0x244>
    1db0:	b4 c0       	rjmp	.+360    	; 0x1f1a <vfprintf+0x390>
    1db2:	80 37       	cpi	r24, 0x70	; 112
    1db4:	19 f0       	breq	.+6      	; 0x1dbc <vfprintf+0x232>
    1db6:	88 37       	cpi	r24, 0x78	; 120
    1db8:	21 f0       	breq	.+8      	; 0x1dc2 <vfprintf+0x238>
    1dba:	af c0       	rjmp	.+350    	; 0x1f1a <vfprintf+0x390>
    1dbc:	2f 2f       	mov	r18, r31
    1dbe:	20 61       	ori	r18, 0x10	; 16
    1dc0:	b2 2e       	mov	r11, r18
    1dc2:	b4 fe       	sbrs	r11, 4
    1dc4:	0d c0       	rjmp	.+26     	; 0x1de0 <vfprintf+0x256>
    1dc6:	8b 2d       	mov	r24, r11
    1dc8:	84 60       	ori	r24, 0x04	; 4
    1dca:	b8 2e       	mov	r11, r24
    1dcc:	09 c0       	rjmp	.+18     	; 0x1de0 <vfprintf+0x256>
    1dce:	24 ff       	sbrs	r18, 4
    1dd0:	0a c0       	rjmp	.+20     	; 0x1de6 <vfprintf+0x25c>
    1dd2:	9f 2f       	mov	r25, r31
    1dd4:	96 60       	ori	r25, 0x06	; 6
    1dd6:	b9 2e       	mov	r11, r25
    1dd8:	06 c0       	rjmp	.+12     	; 0x1de6 <vfprintf+0x25c>
    1dda:	28 e0       	ldi	r18, 0x08	; 8
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	05 c0       	rjmp	.+10     	; 0x1dea <vfprintf+0x260>
    1de0:	20 e1       	ldi	r18, 0x10	; 16
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <vfprintf+0x260>
    1de6:	20 e1       	ldi	r18, 0x10	; 16
    1de8:	32 e0       	ldi	r19, 0x02	; 2
    1dea:	f8 01       	movw	r30, r16
    1dec:	b7 fe       	sbrs	r11, 7
    1dee:	07 c0       	rjmp	.+14     	; 0x1dfe <vfprintf+0x274>
    1df0:	60 81       	ld	r22, Z
    1df2:	71 81       	ldd	r23, Z+1	; 0x01
    1df4:	82 81       	ldd	r24, Z+2	; 0x02
    1df6:	93 81       	ldd	r25, Z+3	; 0x03
    1df8:	0c 5f       	subi	r16, 0xFC	; 252
    1dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfc:	06 c0       	rjmp	.+12     	; 0x1e0a <vfprintf+0x280>
    1dfe:	60 81       	ld	r22, Z
    1e00:	71 81       	ldd	r23, Z+1	; 0x01
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	0e 5f       	subi	r16, 0xFE	; 254
    1e08:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0a:	a4 01       	movw	r20, r8
    1e0c:	0e 94 02 10 	call	0x2004	; 0x2004 <__ultoa_invert>
    1e10:	a8 2e       	mov	r10, r24
    1e12:	a8 18       	sub	r10, r8
    1e14:	fb 2d       	mov	r31, r11
    1e16:	ff 77       	andi	r31, 0x7F	; 127
    1e18:	bf 2e       	mov	r11, r31
    1e1a:	b6 fe       	sbrs	r11, 6
    1e1c:	0b c0       	rjmp	.+22     	; 0x1e34 <vfprintf+0x2aa>
    1e1e:	2b 2d       	mov	r18, r11
    1e20:	2e 7f       	andi	r18, 0xFE	; 254
    1e22:	a5 14       	cp	r10, r5
    1e24:	50 f4       	brcc	.+20     	; 0x1e3a <vfprintf+0x2b0>
    1e26:	b4 fe       	sbrs	r11, 4
    1e28:	0a c0       	rjmp	.+20     	; 0x1e3e <vfprintf+0x2b4>
    1e2a:	b2 fc       	sbrc	r11, 2
    1e2c:	08 c0       	rjmp	.+16     	; 0x1e3e <vfprintf+0x2b4>
    1e2e:	2b 2d       	mov	r18, r11
    1e30:	2e 7e       	andi	r18, 0xEE	; 238
    1e32:	05 c0       	rjmp	.+10     	; 0x1e3e <vfprintf+0x2b4>
    1e34:	7a 2c       	mov	r7, r10
    1e36:	2b 2d       	mov	r18, r11
    1e38:	03 c0       	rjmp	.+6      	; 0x1e40 <vfprintf+0x2b6>
    1e3a:	7a 2c       	mov	r7, r10
    1e3c:	01 c0       	rjmp	.+2      	; 0x1e40 <vfprintf+0x2b6>
    1e3e:	75 2c       	mov	r7, r5
    1e40:	24 ff       	sbrs	r18, 4
    1e42:	0d c0       	rjmp	.+26     	; 0x1e5e <vfprintf+0x2d4>
    1e44:	fe 01       	movw	r30, r28
    1e46:	ea 0d       	add	r30, r10
    1e48:	f1 1d       	adc	r31, r1
    1e4a:	80 81       	ld	r24, Z
    1e4c:	80 33       	cpi	r24, 0x30	; 48
    1e4e:	11 f4       	brne	.+4      	; 0x1e54 <vfprintf+0x2ca>
    1e50:	29 7e       	andi	r18, 0xE9	; 233
    1e52:	09 c0       	rjmp	.+18     	; 0x1e66 <vfprintf+0x2dc>
    1e54:	22 ff       	sbrs	r18, 2
    1e56:	06 c0       	rjmp	.+12     	; 0x1e64 <vfprintf+0x2da>
    1e58:	73 94       	inc	r7
    1e5a:	73 94       	inc	r7
    1e5c:	04 c0       	rjmp	.+8      	; 0x1e66 <vfprintf+0x2dc>
    1e5e:	82 2f       	mov	r24, r18
    1e60:	86 78       	andi	r24, 0x86	; 134
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <vfprintf+0x2dc>
    1e64:	73 94       	inc	r7
    1e66:	23 fd       	sbrc	r18, 3
    1e68:	13 c0       	rjmp	.+38     	; 0x1e90 <vfprintf+0x306>
    1e6a:	20 ff       	sbrs	r18, 0
    1e6c:	06 c0       	rjmp	.+12     	; 0x1e7a <vfprintf+0x2f0>
    1e6e:	5a 2c       	mov	r5, r10
    1e70:	73 14       	cp	r7, r3
    1e72:	18 f4       	brcc	.+6      	; 0x1e7a <vfprintf+0x2f0>
    1e74:	53 0c       	add	r5, r3
    1e76:	57 18       	sub	r5, r7
    1e78:	73 2c       	mov	r7, r3
    1e7a:	73 14       	cp	r7, r3
    1e7c:	68 f4       	brcc	.+26     	; 0x1e98 <vfprintf+0x30e>
    1e7e:	b7 01       	movw	r22, r14
    1e80:	80 e2       	ldi	r24, 0x20	; 32
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	2c 87       	std	Y+12, r18	; 0x0c
    1e86:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <fputc>
    1e8a:	73 94       	inc	r7
    1e8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e8e:	f5 cf       	rjmp	.-22     	; 0x1e7a <vfprintf+0x2f0>
    1e90:	73 14       	cp	r7, r3
    1e92:	10 f4       	brcc	.+4      	; 0x1e98 <vfprintf+0x30e>
    1e94:	37 18       	sub	r3, r7
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <vfprintf+0x310>
    1e98:	31 2c       	mov	r3, r1
    1e9a:	24 ff       	sbrs	r18, 4
    1e9c:	12 c0       	rjmp	.+36     	; 0x1ec2 <vfprintf+0x338>
    1e9e:	b7 01       	movw	r22, r14
    1ea0:	80 e3       	ldi	r24, 0x30	; 48
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	2c 87       	std	Y+12, r18	; 0x0c
    1ea6:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <fputc>
    1eaa:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eac:	22 ff       	sbrs	r18, 2
    1eae:	17 c0       	rjmp	.+46     	; 0x1ede <vfprintf+0x354>
    1eb0:	21 ff       	sbrs	r18, 1
    1eb2:	03 c0       	rjmp	.+6      	; 0x1eba <vfprintf+0x330>
    1eb4:	88 e5       	ldi	r24, 0x58	; 88
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <vfprintf+0x334>
    1eba:	88 e7       	ldi	r24, 0x78	; 120
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	b7 01       	movw	r22, r14
    1ec0:	0c c0       	rjmp	.+24     	; 0x1eda <vfprintf+0x350>
    1ec2:	82 2f       	mov	r24, r18
    1ec4:	86 78       	andi	r24, 0x86	; 134
    1ec6:	59 f0       	breq	.+22     	; 0x1ede <vfprintf+0x354>
    1ec8:	21 fd       	sbrc	r18, 1
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <vfprintf+0x346>
    1ecc:	80 e2       	ldi	r24, 0x20	; 32
    1ece:	01 c0       	rjmp	.+2      	; 0x1ed2 <vfprintf+0x348>
    1ed0:	8b e2       	ldi	r24, 0x2B	; 43
    1ed2:	27 fd       	sbrc	r18, 7
    1ed4:	8d e2       	ldi	r24, 0x2D	; 45
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <fputc>
    1ede:	a5 14       	cp	r10, r5
    1ee0:	38 f4       	brcc	.+14     	; 0x1ef0 <vfprintf+0x366>
    1ee2:	b7 01       	movw	r22, r14
    1ee4:	80 e3       	ldi	r24, 0x30	; 48
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <fputc>
    1eec:	5a 94       	dec	r5
    1eee:	f7 cf       	rjmp	.-18     	; 0x1ede <vfprintf+0x354>
    1ef0:	aa 94       	dec	r10
    1ef2:	f4 01       	movw	r30, r8
    1ef4:	ea 0d       	add	r30, r10
    1ef6:	f1 1d       	adc	r31, r1
    1ef8:	80 81       	ld	r24, Z
    1efa:	b7 01       	movw	r22, r14
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <fputc>
    1f02:	a1 10       	cpse	r10, r1
    1f04:	f5 cf       	rjmp	.-22     	; 0x1ef0 <vfprintf+0x366>
    1f06:	33 20       	and	r3, r3
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <vfprintf+0x382>
    1f0a:	51 ce       	rjmp	.-862    	; 0x1bae <vfprintf+0x24>
    1f0c:	b7 01       	movw	r22, r14
    1f0e:	80 e2       	ldi	r24, 0x20	; 32
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <fputc>
    1f16:	3a 94       	dec	r3
    1f18:	f6 cf       	rjmp	.-20     	; 0x1f06 <vfprintf+0x37c>
    1f1a:	f7 01       	movw	r30, r14
    1f1c:	86 81       	ldd	r24, Z+6	; 0x06
    1f1e:	97 81       	ldd	r25, Z+7	; 0x07
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <vfprintf+0x39c>
    1f22:	8f ef       	ldi	r24, 0xFF	; 255
    1f24:	9f ef       	ldi	r25, 0xFF	; 255
    1f26:	2c 96       	adiw	r28, 0x0c	; 12
    1f28:	e2 e1       	ldi	r30, 0x12	; 18
    1f2a:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__epilogue_restores__>

00001f2e <calloc>:
    1f2e:	0f 93       	push	r16
    1f30:	1f 93       	push	r17
    1f32:	cf 93       	push	r28
    1f34:	df 93       	push	r29
    1f36:	86 9f       	mul	r24, r22
    1f38:	80 01       	movw	r16, r0
    1f3a:	87 9f       	mul	r24, r23
    1f3c:	10 0d       	add	r17, r0
    1f3e:	96 9f       	mul	r25, r22
    1f40:	10 0d       	add	r17, r0
    1f42:	11 24       	eor	r1, r1
    1f44:	c8 01       	movw	r24, r16
    1f46:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <malloc>
    1f4a:	ec 01       	movw	r28, r24
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	29 f0       	breq	.+10     	; 0x1f5a <calloc+0x2c>
    1f50:	a8 01       	movw	r20, r16
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	70 e0       	ldi	r23, 0x00	; 0
    1f56:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <memset>
    1f5a:	ce 01       	movw	r24, r28
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	1f 91       	pop	r17
    1f62:	0f 91       	pop	r16
    1f64:	08 95       	ret

00001f66 <strnlen_P>:
    1f66:	fc 01       	movw	r30, r24
    1f68:	05 90       	lpm	r0, Z+
    1f6a:	61 50       	subi	r22, 0x01	; 1
    1f6c:	70 40       	sbci	r23, 0x00	; 0
    1f6e:	01 10       	cpse	r0, r1
    1f70:	d8 f7       	brcc	.-10     	; 0x1f68 <strnlen_P+0x2>
    1f72:	80 95       	com	r24
    1f74:	90 95       	com	r25
    1f76:	8e 0f       	add	r24, r30
    1f78:	9f 1f       	adc	r25, r31
    1f7a:	08 95       	ret

00001f7c <memset>:
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	01 c0       	rjmp	.+2      	; 0x1f82 <memset+0x6>
    1f80:	6d 93       	st	X+, r22
    1f82:	41 50       	subi	r20, 0x01	; 1
    1f84:	50 40       	sbci	r21, 0x00	; 0
    1f86:	e0 f7       	brcc	.-8      	; 0x1f80 <memset+0x4>
    1f88:	08 95       	ret

00001f8a <strnlen>:
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	61 50       	subi	r22, 0x01	; 1
    1f8e:	70 40       	sbci	r23, 0x00	; 0
    1f90:	01 90       	ld	r0, Z+
    1f92:	01 10       	cpse	r0, r1
    1f94:	d8 f7       	brcc	.-10     	; 0x1f8c <strnlen+0x2>
    1f96:	80 95       	com	r24
    1f98:	90 95       	com	r25
    1f9a:	8e 0f       	add	r24, r30
    1f9c:	9f 1f       	adc	r25, r31
    1f9e:	08 95       	ret

00001fa0 <fputc>:
    1fa0:	0f 93       	push	r16
    1fa2:	1f 93       	push	r17
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	18 2f       	mov	r17, r24
    1faa:	09 2f       	mov	r16, r25
    1fac:	eb 01       	movw	r28, r22
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	81 fd       	sbrc	r24, 1
    1fb2:	03 c0       	rjmp	.+6      	; 0x1fba <fputc+0x1a>
    1fb4:	8f ef       	ldi	r24, 0xFF	; 255
    1fb6:	9f ef       	ldi	r25, 0xFF	; 255
    1fb8:	20 c0       	rjmp	.+64     	; 0x1ffa <fputc+0x5a>
    1fba:	82 ff       	sbrs	r24, 2
    1fbc:	10 c0       	rjmp	.+32     	; 0x1fde <fputc+0x3e>
    1fbe:	4e 81       	ldd	r20, Y+6	; 0x06
    1fc0:	5f 81       	ldd	r21, Y+7	; 0x07
    1fc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fc6:	42 17       	cp	r20, r18
    1fc8:	53 07       	cpc	r21, r19
    1fca:	7c f4       	brge	.+30     	; 0x1fea <fputc+0x4a>
    1fcc:	e8 81       	ld	r30, Y
    1fce:	f9 81       	ldd	r31, Y+1	; 0x01
    1fd0:	9f 01       	movw	r18, r30
    1fd2:	2f 5f       	subi	r18, 0xFF	; 255
    1fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd6:	39 83       	std	Y+1, r19	; 0x01
    1fd8:	28 83       	st	Y, r18
    1fda:	10 83       	st	Z, r17
    1fdc:	06 c0       	rjmp	.+12     	; 0x1fea <fputc+0x4a>
    1fde:	e8 85       	ldd	r30, Y+8	; 0x08
    1fe0:	f9 85       	ldd	r31, Y+9	; 0x09
    1fe2:	81 2f       	mov	r24, r17
    1fe4:	09 95       	icall
    1fe6:	89 2b       	or	r24, r25
    1fe8:	29 f7       	brne	.-54     	; 0x1fb4 <fputc+0x14>
    1fea:	2e 81       	ldd	r18, Y+6	; 0x06
    1fec:	3f 81       	ldd	r19, Y+7	; 0x07
    1fee:	2f 5f       	subi	r18, 0xFF	; 255
    1ff0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff2:	3f 83       	std	Y+7, r19	; 0x07
    1ff4:	2e 83       	std	Y+6, r18	; 0x06
    1ff6:	81 2f       	mov	r24, r17
    1ff8:	90 2f       	mov	r25, r16
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	08 95       	ret

00002004 <__ultoa_invert>:
    2004:	fa 01       	movw	r30, r20
    2006:	aa 27       	eor	r26, r26
    2008:	28 30       	cpi	r18, 0x08	; 8
    200a:	51 f1       	breq	.+84     	; 0x2060 <__ultoa_invert+0x5c>
    200c:	20 31       	cpi	r18, 0x10	; 16
    200e:	81 f1       	breq	.+96     	; 0x2070 <__ultoa_invert+0x6c>
    2010:	e8 94       	clt
    2012:	6f 93       	push	r22
    2014:	6e 7f       	andi	r22, 0xFE	; 254
    2016:	6e 5f       	subi	r22, 0xFE	; 254
    2018:	7f 4f       	sbci	r23, 0xFF	; 255
    201a:	8f 4f       	sbci	r24, 0xFF	; 255
    201c:	9f 4f       	sbci	r25, 0xFF	; 255
    201e:	af 4f       	sbci	r26, 0xFF	; 255
    2020:	b1 e0       	ldi	r27, 0x01	; 1
    2022:	3e d0       	rcall	.+124    	; 0x20a0 <__ultoa_invert+0x9c>
    2024:	b4 e0       	ldi	r27, 0x04	; 4
    2026:	3c d0       	rcall	.+120    	; 0x20a0 <__ultoa_invert+0x9c>
    2028:	67 0f       	add	r22, r23
    202a:	78 1f       	adc	r23, r24
    202c:	89 1f       	adc	r24, r25
    202e:	9a 1f       	adc	r25, r26
    2030:	a1 1d       	adc	r26, r1
    2032:	68 0f       	add	r22, r24
    2034:	79 1f       	adc	r23, r25
    2036:	8a 1f       	adc	r24, r26
    2038:	91 1d       	adc	r25, r1
    203a:	a1 1d       	adc	r26, r1
    203c:	6a 0f       	add	r22, r26
    203e:	71 1d       	adc	r23, r1
    2040:	81 1d       	adc	r24, r1
    2042:	91 1d       	adc	r25, r1
    2044:	a1 1d       	adc	r26, r1
    2046:	20 d0       	rcall	.+64     	; 0x2088 <__ultoa_invert+0x84>
    2048:	09 f4       	brne	.+2      	; 0x204c <__ultoa_invert+0x48>
    204a:	68 94       	set
    204c:	3f 91       	pop	r19
    204e:	2a e0       	ldi	r18, 0x0A	; 10
    2050:	26 9f       	mul	r18, r22
    2052:	11 24       	eor	r1, r1
    2054:	30 19       	sub	r19, r0
    2056:	30 5d       	subi	r19, 0xD0	; 208
    2058:	31 93       	st	Z+, r19
    205a:	de f6       	brtc	.-74     	; 0x2012 <__ultoa_invert+0xe>
    205c:	cf 01       	movw	r24, r30
    205e:	08 95       	ret
    2060:	46 2f       	mov	r20, r22
    2062:	47 70       	andi	r20, 0x07	; 7
    2064:	40 5d       	subi	r20, 0xD0	; 208
    2066:	41 93       	st	Z+, r20
    2068:	b3 e0       	ldi	r27, 0x03	; 3
    206a:	0f d0       	rcall	.+30     	; 0x208a <__ultoa_invert+0x86>
    206c:	c9 f7       	brne	.-14     	; 0x2060 <__ultoa_invert+0x5c>
    206e:	f6 cf       	rjmp	.-20     	; 0x205c <__ultoa_invert+0x58>
    2070:	46 2f       	mov	r20, r22
    2072:	4f 70       	andi	r20, 0x0F	; 15
    2074:	40 5d       	subi	r20, 0xD0	; 208
    2076:	4a 33       	cpi	r20, 0x3A	; 58
    2078:	18 f0       	brcs	.+6      	; 0x2080 <__ultoa_invert+0x7c>
    207a:	49 5d       	subi	r20, 0xD9	; 217
    207c:	31 fd       	sbrc	r19, 1
    207e:	40 52       	subi	r20, 0x20	; 32
    2080:	41 93       	st	Z+, r20
    2082:	02 d0       	rcall	.+4      	; 0x2088 <__ultoa_invert+0x84>
    2084:	a9 f7       	brne	.-22     	; 0x2070 <__ultoa_invert+0x6c>
    2086:	ea cf       	rjmp	.-44     	; 0x205c <__ultoa_invert+0x58>
    2088:	b4 e0       	ldi	r27, 0x04	; 4
    208a:	a6 95       	lsr	r26
    208c:	97 95       	ror	r25
    208e:	87 95       	ror	r24
    2090:	77 95       	ror	r23
    2092:	67 95       	ror	r22
    2094:	ba 95       	dec	r27
    2096:	c9 f7       	brne	.-14     	; 0x208a <__ultoa_invert+0x86>
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	61 05       	cpc	r22, r1
    209c:	71 05       	cpc	r23, r1
    209e:	08 95       	ret
    20a0:	9b 01       	movw	r18, r22
    20a2:	ac 01       	movw	r20, r24
    20a4:	0a 2e       	mov	r0, r26
    20a6:	06 94       	lsr	r0
    20a8:	57 95       	ror	r21
    20aa:	47 95       	ror	r20
    20ac:	37 95       	ror	r19
    20ae:	27 95       	ror	r18
    20b0:	ba 95       	dec	r27
    20b2:	c9 f7       	brne	.-14     	; 0x20a6 <__ultoa_invert+0xa2>
    20b4:	62 0f       	add	r22, r18
    20b6:	73 1f       	adc	r23, r19
    20b8:	84 1f       	adc	r24, r20
    20ba:	95 1f       	adc	r25, r21
    20bc:	a0 1d       	adc	r26, r0
    20be:	08 95       	ret

000020c0 <__prologue_saves__>:
    20c0:	2f 92       	push	r2
    20c2:	3f 92       	push	r3
    20c4:	4f 92       	push	r4
    20c6:	5f 92       	push	r5
    20c8:	6f 92       	push	r6
    20ca:	7f 92       	push	r7
    20cc:	8f 92       	push	r8
    20ce:	9f 92       	push	r9
    20d0:	af 92       	push	r10
    20d2:	bf 92       	push	r11
    20d4:	cf 92       	push	r12
    20d6:	df 92       	push	r13
    20d8:	ef 92       	push	r14
    20da:	ff 92       	push	r15
    20dc:	0f 93       	push	r16
    20de:	1f 93       	push	r17
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
    20e8:	ca 1b       	sub	r28, r26
    20ea:	db 0b       	sbc	r29, r27
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	09 94       	ijmp

000020f8 <__epilogue_restores__>:
    20f8:	2a 88       	ldd	r2, Y+18	; 0x12
    20fa:	39 88       	ldd	r3, Y+17	; 0x11
    20fc:	48 88       	ldd	r4, Y+16	; 0x10
    20fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2100:	6e 84       	ldd	r6, Y+14	; 0x0e
    2102:	7d 84       	ldd	r7, Y+13	; 0x0d
    2104:	8c 84       	ldd	r8, Y+12	; 0x0c
    2106:	9b 84       	ldd	r9, Y+11	; 0x0b
    2108:	aa 84       	ldd	r10, Y+10	; 0x0a
    210a:	b9 84       	ldd	r11, Y+9	; 0x09
    210c:	c8 84       	ldd	r12, Y+8	; 0x08
    210e:	df 80       	ldd	r13, Y+7	; 0x07
    2110:	ee 80       	ldd	r14, Y+6	; 0x06
    2112:	fd 80       	ldd	r15, Y+5	; 0x05
    2114:	0c 81       	ldd	r16, Y+4	; 0x04
    2116:	1b 81       	ldd	r17, Y+3	; 0x03
    2118:	aa 81       	ldd	r26, Y+2	; 0x02
    211a:	b9 81       	ldd	r27, Y+1	; 0x01
    211c:	ce 0f       	add	r28, r30
    211e:	d1 1d       	adc	r29, r1
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	ed 01       	movw	r28, r26
    212c:	08 95       	ret

0000212e <_exit>:
    212e:	f8 94       	cli

00002130 <__stop_program>:
    2130:	ff cf       	rjmp	.-2      	; 0x2130 <__stop_program>
