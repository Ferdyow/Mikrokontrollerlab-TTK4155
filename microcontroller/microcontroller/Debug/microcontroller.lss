
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000172  00800100  0000103c  000010d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000103c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800272  00800272  00001242  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001242  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000290  00000000  00000000  0000129e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002948  00000000  00000000  0000152e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000115f  00000000  00000000  00003e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dfe  00000000  00000000  00004fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006a8  00000000  00000000  00005dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007f8  00000000  00000000  0000647c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001612  00000000  00000000  00006c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000200  00000000  00000000  00008286  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_1>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ec e3       	ldi	r30, 0x3C	; 60
      84:	f0 e1       	ldi	r31, 0x10	; 16
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a2 37       	cpi	r26, 0x72	; 114
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	a2 e7       	ldi	r26, 0x72	; 114
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a8 38       	cpi	r26, 0x88	; 136
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 ac 02 	call	0x558	; 0x558 <main>
      a6:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
      ae:	30 98       	cbi	0x06, 0	; 6
      b0:	08 95       	ret

000000b2 <ADC_read>:
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
      b2:	84 30       	cpi	r24, 0x04	; 4
      b4:	40 f4       	brcc	.+16     	; 0xc6 <ADC_read+0x14>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
      b6:	8c 5f       	subi	r24, 0xFC	; 252
      b8:	80 93 00 14 	sts	0x1400, r24
	
	//wait 'til /INTR is low
	while(test_bit(PINE, PINE0));
      bc:	28 99       	sbic	0x05, 0	; 5
      be:	fe cf       	rjmp	.-4      	; 0xbc <ADC_read+0xa>
	//reset interrupt
	inter = 0;
	*/

	//return current value
	return *adc; 
      c0:	80 91 00 14 	lds	r24, 0x1400
      c4:	08 95       	ret
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
      c6:	80 e0       	ldi	r24, 0x00	; 0
	inter = 0;
	*/

	//return current value
	return *adc; 
      c8:	08 95       	ret

000000ca <CAN_int_vect>:
		;
	printf("After transmit complete\n");
	CAN_data_receive(&received_message);
	printf("\n\nSENT:\nlength: %d\nid: %d\n", my_message.length, my_message.id);
	for (uint8_t byte = 0; byte < my_message.length;byte++){
		printf("Data nr. %d: %x\n", byte, my_message.data[byte]);
      ca:	cf 93       	push	r28
      cc:	8c e2       	ldi	r24, 0x2C	; 44
      ce:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MCP2515_read>
      d2:	c8 2f       	mov	r28, r24
      d4:	80 ff       	sbrs	r24, 0
      d6:	0b c0       	rjmp	.+22     	; 0xee <CAN_int_vect+0x24>
      d8:	40 e0       	ldi	r20, 0x00	; 0
      da:	61 e0       	ldi	r22, 0x01	; 1
      dc:	8c e2       	ldi	r24, 0x2C	; 44
      de:	0e 94 08 02 	call	0x410	; 0x410 <MCP2515_bit_modify>
      e2:	21 e0       	ldi	r18, 0x01	; 1
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	30 93 75 02 	sts	0x0275, r19
	while(!CAN_transmit_complete(0))
		;
	printf("After transmit complete\n");
	CAN_data_receive(&received_message);
	printf("\n\nSENT:\nlength: %d\nid: %d\n", my_message.length, my_message.id);
	for (uint8_t byte = 0; byte < my_message.length;byte++){
      ea:	20 93 74 02 	sts	0x0274, r18
      ee:	c1 ff       	sbrs	r28, 1
      f0:	0b c0       	rjmp	.+22     	; 0x108 <CAN_int_vect+0x3e>
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	62 e0       	ldi	r22, 0x02	; 2
      f6:	8c e2       	ldi	r24, 0x2C	; 44
      f8:	0e 94 08 02 	call	0x410	; 0x410 <MCP2515_bit_modify>
		printf("Data nr. %d: %x\n", byte, my_message.data[byte]);
	}
	
	
	printf("\n\nRECEIVED:\n\nlength: %d\nid: %d\n", received_message.length, received_message.id);
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	90 93 73 02 	sts	0x0273, r25
     104:	80 93 72 02 	sts	0x0272, r24
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <__vector_1>:
     10c:	1f 92       	push	r1
     10e:	0f 92       	push	r0
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	0f 92       	push	r0
     114:	11 24       	eor	r1, r1
	for (uint8_t byte = 0; byte < received_message.length;byte++){
     116:	2f 93       	push	r18
     118:	3f 93       	push	r19
     11a:	4f 93       	push	r20
     11c:	5f 93       	push	r21
     11e:	6f 93       	push	r22
     120:	7f 93       	push	r23
     122:	8f 93       	push	r24
     124:	9f 93       	push	r25
     126:	af 93       	push	r26
     128:	bf 93       	push	r27
		printf("Data nr. %d: %x\n", byte, received_message.data[byte]);
     12a:	ef 93       	push	r30
     12c:	ff 93       	push	r31
     12e:	0e 94 65 00 	call	0xca	; 0xca <CAN_int_vect>
     132:	ff 91       	pop	r31
     134:	ef 91       	pop	r30
     136:	bf 91       	pop	r27
     138:	af 91       	pop	r26
     13a:	9f 91       	pop	r25
     13c:	8f 91       	pop	r24
     13e:	7f 91       	pop	r23
     140:	6f 91       	pop	r22
     142:	5f 91       	pop	r21
     144:	4f 91       	pop	r20
     146:	3f 91       	pop	r19
     148:	2f 91       	pop	r18
     14a:	0f 90       	pop	r0
     14c:	0f be       	out	0x3f, r0	; 63
     14e:	0f 90       	pop	r0
     150:	1f 90       	pop	r1
     152:	18 95       	reti

00000154 <CAN_init>:
		printf("Data nr. %d: %x\n", byte, my_message.data[byte]);
	}
	
	
	printf("\n\nRECEIVED:\n\nlength: %d\nid: %d\n", received_message.length, received_message.id);
	for (uint8_t byte = 0; byte < received_message.length;byte++){
     154:	0e 94 2a 02 	call	0x454	; 0x454 <MCP2515_init>
     158:	4f ef       	ldi	r20, 0xFF	; 255
     15a:	64 e6       	ldi	r22, 0x64	; 100
     15c:	80 e6       	ldi	r24, 0x60	; 96
     15e:	0e 94 08 02 	call	0x410	; 0x410 <MCP2515_bit_modify>
     162:	4f ef       	ldi	r20, 0xFF	; 255
     164:	60 e6       	ldi	r22, 0x60	; 96
     166:	80 e7       	ldi	r24, 0x70	; 112
		printf("Data nr. %d: %x\n", byte, received_message.data[byte]);
	}
	MCP2515_bit_modify(MCP_CANCTRL,0xE0, 0x00);
     168:	0e 94 08 02 	call	0x410	; 0x410 <MCP2515_bit_modify>
     16c:	43 e0       	ldi	r20, 0x03	; 3
     16e:	63 e0       	ldi	r22, 0x03	; 3
     170:	8b e2       	ldi	r24, 0x2B	; 43

	
	
	printf("ERROR FLAGS: %x\n", MCP2515_read(MCP_EFLG));
     172:	0e 94 08 02 	call	0x410	; 0x410 <MCP2515_bit_modify>
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	60 ee       	ldi	r22, 0xE0	; 224
     17a:	8f e0       	ldi	r24, 0x0F	; 15
     17c:	0e 94 08 02 	call	0x410	; 0x410 <MCP2515_bit_modify>
     180:	08 95       	ret

00000182 <CAN_message_send>:
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	cf 93       	push	r28

	CAN_message_send(&my_message);
     188:	df 93       	push	r29
     18a:	ec 01       	movw	r28, r24
     18c:	08 81       	ld	r16, Y
     18e:	19 81       	ldd	r17, Y+1	; 0x01
	
	printf("\nCANSTAT after: %x\n", MCP2515_read(MCP_CANSTAT));
     190:	b8 01       	movw	r22, r16
     192:	76 95       	lsr	r23
     194:	67 95       	ror	r22
     196:	76 95       	lsr	r23
     198:	67 95       	ror	r22
     19a:	76 95       	lsr	r23
     19c:	67 95       	ror	r22
     19e:	81 e3       	ldi	r24, 0x31	; 49
     1a0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <MCP2515_write>
     1a4:	60 2f       	mov	r22, r16
	printf("TXCTRL: %x\n", MCP2515_read(MCP_TXB0CTRL));
     1a6:	62 95       	swap	r22
     1a8:	66 0f       	add	r22, r22
     1aa:	60 7e       	andi	r22, 0xE0	; 224
     1ac:	82 e3       	ldi	r24, 0x32	; 50
     1ae:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <MCP2515_write>
     1b2:	6a 81       	ldd	r22, Y+2	; 0x02
     1b4:	85 e3       	ldi	r24, 0x35	; 53
     1b6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <MCP2515_write>
     1ba:	8a 81       	ldd	r24, Y+2	; 0x02
	printf("ERROR FLAGS: %x\n", MCP2515_read(MCP_EFLG));
     1bc:	88 23       	and	r24, r24
     1be:	69 f0       	breq	.+26     	; 0x1da <CAN_message_send+0x58>
     1c0:	10 e0       	ldi	r17, 0x00	; 0
     1c2:	fe 01       	movw	r30, r28
     1c4:	e1 0f       	add	r30, r17
     1c6:	f1 1d       	adc	r31, r1
     1c8:	63 81       	ldd	r22, Z+3	; 0x03
     1ca:	86 e3       	ldi	r24, 0x36	; 54
     1cc:	81 0f       	add	r24, r17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ce:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <MCP2515_write>
     1d2:	1f 5f       	subi	r17, 0xFF	; 255
     1d4:	8a 81       	ldd	r24, Y+2	; 0x02
     1d6:	18 17       	cp	r17, r24
     1d8:	a0 f3       	brcs	.-24     	; 0x1c2 <CAN_message_send+0x40>
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <MCP2515_request_to_send>
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	1f 91       	pop	r17
     1e6:	0f 91       	pop	r16
     1e8:	08 95       	ret

000001ea <CAN_transmit_complete>:
	_delay_ms(500);
	
	/*CAN_error();*/
     1ea:	03 96       	adiw	r24, 0x03	; 3
     1ec:	82 95       	swap	r24
     1ee:	80 7f       	andi	r24, 0xF0	; 240
     1f0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MCP2515_read>
     1f4:	83 fb       	bst	r24, 3
     1f6:	88 27       	eor	r24, r24
     1f8:	80 f9       	bld	r24, 0
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	89 27       	eor	r24, r25
     1fe:	08 95       	ret

00000200 <JOY_calibrate>:
	clear_bit(DDRB,PB2);
	clear_bit(SFIOR, PUD);
	JOY_calibrate();
}

void JOY_calibrate(){
     200:	bf 92       	push	r11
     202:	cf 92       	push	r12
     204:	df 92       	push	r13
     206:	ef 92       	push	r14
     208:	ff 92       	push	r15
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
	max.x = 0;
     212:	10 92 76 02 	sts	0x0276, r1
	max.y = 0;
     216:	10 92 77 02 	sts	0x0277, r1
	min.x = 255;
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	80 93 7a 02 	sts	0x027A, r24
	min.y = 255;
     220:	80 93 7b 02 	sts	0x027B, r24
	uint8_t x;
	uint8_t y;
	OLED_reset();
     224:	0e 94 f5 02 	call	0x5ea	; 0x5ea <OLED_reset>
	printf("\nMove the joystick to all extreme points.\n");
     228:	80 e2       	ldi	r24, 0x20	; 32
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <puts>
	printf("Press the joystick when you're done.\n");
     230:	8a e4       	ldi	r24, 0x4A	; 74
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	0e 94 1d 05 	call	0xa3a	; 0xa3a <puts>
		// Read sensor values
		x = ADC_read(0);
		y = ADC_read(1);
		
		// Calibrate x
		if (min.x > x) min.x = x; 
     238:	0a e7       	ldi	r16, 0x7A	; 122
     23a:	12 e0       	ldi	r17, 0x02	; 2
		else if (max.x < x) max.x = x;
     23c:	0f 2e       	mov	r0, r31
     23e:	f6 e7       	ldi	r31, 0x76	; 118
     240:	cf 2e       	mov	r12, r31
     242:	f2 e0       	ldi	r31, 0x02	; 2
     244:	df 2e       	mov	r13, r31
     246:	f0 2d       	mov	r31, r0
		
		// Calibrate y
		if (min.y > y) min.y = y;
     248:	cb e7       	ldi	r28, 0x7B	; 123
     24a:	d2 e0       	ldi	r29, 0x02	; 2
		else if (max.y < y) max.y = y;		
     24c:	0f 2e       	mov	r0, r31
     24e:	f7 e7       	ldi	r31, 0x77	; 119
     250:	ef 2e       	mov	r14, r31
     252:	f2 e0       	ldi	r31, 0x02	; 2
     254:	ff 2e       	mov	r15, r31
     256:	f0 2d       	mov	r31, r0
	uint8_t y;
	OLED_reset();
	printf("\nMove the joystick to all extreme points.\n");
	printf("Press the joystick when you're done.\n");
	//check channels 
	while(test_bit(PINB,PINB2)){
     258:	1c c0       	rjmp	.+56     	; 0x292 <JOY_calibrate+0x92>
		// Read sensor values
		x = ADC_read(0);
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_read>
     260:	b8 2e       	mov	r11, r24
		y = ADC_read(1);
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_read>
		
		// Calibrate x
		if (min.x > x) min.x = x; 
     268:	f8 01       	movw	r30, r16
     26a:	90 81       	ld	r25, Z
     26c:	b9 16       	cp	r11, r25
     26e:	10 f4       	brcc	.+4      	; 0x274 <JOY_calibrate+0x74>
     270:	b0 82       	st	Z, r11
     272:	05 c0       	rjmp	.+10     	; 0x27e <JOY_calibrate+0x7e>
		else if (max.x < x) max.x = x;
     274:	f6 01       	movw	r30, r12
     276:	90 81       	ld	r25, Z
     278:	9b 15       	cp	r25, r11
     27a:	08 f4       	brcc	.+2      	; 0x27e <JOY_calibrate+0x7e>
     27c:	b0 82       	st	Z, r11
		
		// Calibrate y
		if (min.y > y) min.y = y;
     27e:	98 81       	ld	r25, Y
     280:	89 17       	cp	r24, r25
     282:	10 f4       	brcc	.+4      	; 0x288 <JOY_calibrate+0x88>
     284:	88 83       	st	Y, r24
     286:	05 c0       	rjmp	.+10     	; 0x292 <JOY_calibrate+0x92>
		else if (max.y < y) max.y = y;		
     288:	f7 01       	movw	r30, r14
     28a:	90 81       	ld	r25, Z
     28c:	98 17       	cp	r25, r24
     28e:	08 f4       	brcc	.+2      	; 0x292 <JOY_calibrate+0x92>
     290:	80 83       	st	Z, r24
	uint8_t y;
	OLED_reset();
	printf("\nMove the joystick to all extreme points.\n");
	printf("Press the joystick when you're done.\n");
	//check channels 
	while(test_bit(PINB,PINB2)){
     292:	b2 99       	sbic	0x16, 2	; 22
     294:	e2 cf       	rjmp	.-60     	; 0x25a <JOY_calibrate+0x5a>
		if (min.y > y) min.y = y;
		else if (max.y < y) max.y = y;		
	}

	// Find distance from middle to edges (radius)
	rad.x = (max.x - min.x) / 2;
     296:	e0 91 76 02 	lds	r30, 0x0276
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	60 91 7a 02 	lds	r22, 0x027A
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	9f 01       	movw	r18, r30
     2a4:	26 1b       	sub	r18, r22
     2a6:	37 0b       	sbc	r19, r23
     2a8:	c9 01       	movw	r24, r18
     2aa:	99 23       	and	r25, r25
     2ac:	0c f4       	brge	.+2      	; 0x2b0 <JOY_calibrate+0xb0>
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	95 95       	asr	r25
     2b2:	87 95       	ror	r24
     2b4:	80 93 78 02 	sts	0x0278, r24
	rad.y = (max.y - min.y) / 2;
     2b8:	40 91 77 02 	lds	r20, 0x0277
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	20 91 7b 02 	lds	r18, 0x027B
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	da 01       	movw	r26, r20
     2c6:	a2 1b       	sub	r26, r18
     2c8:	b3 0b       	sbc	r27, r19
     2ca:	cd 01       	movw	r24, r26
     2cc:	0a f4       	brpl	.+2      	; 0x2d0 <JOY_calibrate+0xd0>
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	95 95       	asr	r25
     2d2:	87 95       	ror	r24
     2d4:	80 93 79 02 	sts	0x0279, r24
	
	// Find mid point using edges.
	mid.x = (max.x + min.x) / 2;
     2d8:	6e 0f       	add	r22, r30
     2da:	7f 1f       	adc	r23, r31
     2dc:	75 95       	asr	r23
     2de:	67 95       	ror	r22
     2e0:	60 93 7c 02 	sts	0x027C, r22
	mid.y = (max.y + min.y) / 2;
     2e4:	24 0f       	add	r18, r20
     2e6:	35 1f       	adc	r19, r21
     2e8:	35 95       	asr	r19
     2ea:	27 95       	ror	r18
     2ec:	20 93 7d 02 	sts	0x027D, r18
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	0f 91       	pop	r16
     2f8:	ff 90       	pop	r15
     2fa:	ef 90       	pop	r14
     2fc:	df 90       	pop	r13
     2fe:	cf 90       	pop	r12
     300:	bf 90       	pop	r11
     302:	08 95       	ret

00000304 <JOY_init>:
	uint8_t y;
} max, min, rad, mid;

void JOY_init(){
	//set pull-up resistors on PORTB for JOY_button
	set_bit(PORTB,PB2);
     304:	c2 9a       	sbi	0x18, 2	; 24
	clear_bit(DDRB,PB2);
     306:	ba 98       	cbi	0x17, 2	; 23
	clear_bit(SFIOR, PUD);
     308:	80 b7       	in	r24, 0x30	; 48
     30a:	8b 7f       	andi	r24, 0xFB	; 251
     30c:	80 bf       	out	0x30, r24	; 48
	JOY_calibrate();
     30e:	0e 94 00 01 	call	0x200	; 0x200 <JOY_calibrate>
     312:	08 95       	ret

00000314 <JOY_button_pressed>:
	mid.x = (max.x + min.x) / 2;
	mid.y = (max.y + min.y) / 2;
}

int JOY_button_pressed(button b) {
	switch (b) {
     314:	81 30       	cpi	r24, 0x01	; 1
     316:	41 f0       	breq	.+16     	; 0x328 <JOY_button_pressed+0x14>
     318:	18 f0       	brcs	.+6      	; 0x320 <JOY_button_pressed+0xc>
     31a:	82 30       	cpi	r24, 0x02	; 2
     31c:	51 f0       	breq	.+20     	; 0x332 <JOY_button_pressed+0x1e>
     31e:	11 c0       	rjmp	.+34     	; 0x342 <JOY_button_pressed+0x2e>
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     320:	86 b3       	in	r24, 0x16	; 22
     322:	81 70       	andi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return 1;
     328:	86 b3       	in	r24, 0x16	; 22
}

int JOY_button_pressed(button b) {
	switch (b) {
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     32a:	86 95       	lsr	r24
     32c:	81 70       	andi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return 1;
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return 1;
     332:	86 b3       	in	r24, 0x16	; 22
     334:	86 95       	lsr	r24
     336:	86 95       	lsr	r24
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	89 27       	eor	r24, r25
}

int JOY_button_pressed(button b) {
	switch (b) {
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     33c:	81 70       	andi	r24, 0x01	; 1
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	08 95       	ret
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return 1;
		break;
	}
	return 0;
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
}
     346:	08 95       	ret

00000348 <JOY_getPosition>:

JOY_position_t JOY_getPosition() {
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
	JOY_position_t JOY_position;
	JOY_position.x = (100 * (ADC_read(X_COORD) - mid.x)) / rad.x;
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_read>
     354:	28 2f       	mov	r18, r24
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	80 91 7c 02 	lds	r24, 0x027C
     35c:	28 1b       	sub	r18, r24
     35e:	31 09       	sbc	r19, r1
     360:	14 e6       	ldi	r17, 0x64	; 100
     362:	12 9f       	mul	r17, r18
     364:	c0 01       	movw	r24, r0
     366:	13 9f       	mul	r17, r19
     368:	90 0d       	add	r25, r0
     36a:	11 24       	eor	r1, r1
     36c:	60 91 78 02 	lds	r22, 0x0278
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	0e 94 6f 03 	call	0x6de	; 0x6de <__divmodhi4>
     376:	eb 01       	movw	r28, r22
	JOY_position.y = (100 * (ADC_read(Y_COORD) - mid.y)) / rad.y;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_read>
     37e:	28 2f       	mov	r18, r24
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	80 91 7d 02 	lds	r24, 0x027D
     386:	28 1b       	sub	r18, r24
     388:	31 09       	sbc	r19, r1
     38a:	12 9f       	mul	r17, r18
     38c:	c0 01       	movw	r24, r0
     38e:	13 9f       	mul	r17, r19
     390:	90 0d       	add	r25, r0
     392:	11 24       	eor	r1, r1
     394:	60 91 79 02 	lds	r22, 0x0279
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	0e 94 6f 03 	call	0x6de	; 0x6de <__divmodhi4>
     39e:	9b 01       	movw	r18, r22
	return JOY_position;
     3a0:	be 01       	movw	r22, r28
     3a2:	c9 01       	movw	r24, r18
}
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	08 95       	ret

000003ac <MCP2515_read>:
	}
	
	return 0;
}

char MCP2515_read(char address) {
     3ac:	cf 93       	push	r28
     3ae:	c8 2f       	mov	r28, r24
	SPI_select();
     3b0:	0e 94 49 03 	call	0x692	; 0x692 <SPI_select>
	SPI_send(READ);
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_send>
	SPI_send(address);
     3ba:	8c 2f       	mov	r24, r28
     3bc:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_send>
	char data = SPI_read();
     3c0:	0e 94 42 03 	call	0x684	; 0x684 <SPI_read>
     3c4:	c8 2f       	mov	r28, r24
	SPI_deselect();
     3c6:	0e 94 4b 03 	call	0x696	; 0x696 <SPI_deselect>
	return data;
	
	
}
     3ca:	8c 2f       	mov	r24, r28
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <MCP2515_write>:

void MCP2515_write(char address, char data) {
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	d8 2f       	mov	r29, r24
     3d6:	c6 2f       	mov	r28, r22
	SPI_select();
     3d8:	0e 94 49 03 	call	0x692	; 0x692 <SPI_select>
	SPI_send(WRITE);
     3dc:	82 e0       	ldi	r24, 0x02	; 2
     3de:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_send>
	SPI_send(address);
     3e2:	8d 2f       	mov	r24, r29
     3e4:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_send>
	SPI_send(data);
     3e8:	8c 2f       	mov	r24, r28
     3ea:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_send>
	SPI_deselect();
     3ee:	0e 94 4b 03 	call	0x696	; 0x696 <SPI_deselect>
}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <MCP2515_request_to_send>:

//Buffer states: three bit, setting a 1 on the buffer initiates transmitting from it 
void MCP2515_request_to_send(uint8_t buffer_states) {
     3f8:	cf 93       	push	r28
     3fa:	c8 2f       	mov	r28, r24
	SPI_select();
     3fc:	0e 94 49 03 	call	0x692	; 0x692 <SPI_select>
	SPI_send(RTS_BASE+buffer_states);
     400:	80 e8       	ldi	r24, 0x80	; 128
     402:	8c 0f       	add	r24, r28
     404:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_send>
	SPI_deselect();
     408:	0e 94 4b 03 	call	0x696	; 0x696 <SPI_deselect>
}
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <MCP2515_bit_modify>:

//puts new_data in the selected reg_adress. the function assumes that you are allowed to change every bit in the register
void MCP2515_bit_modify(char reg_address, char masked_bits, char new_data) {
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	18 2f       	mov	r17, r24
     418:	d6 2f       	mov	r29, r22
     41a:	c4 2f       	mov	r28, r20
	SPI_select();
     41c:	0e 94 49 03 	call	0x692	; 0x692 <SPI_select>
	SPI_send(BIT_MODIFY);
     420:	85 e0       	ldi	r24, 0x05	; 5
     422:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_send>
	SPI_send(reg_address);
     426:	81 2f       	mov	r24, r17
     428:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_send>
	SPI_send(masked_bits);
     42c:	8d 2f       	mov	r24, r29
     42e:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_send>
	SPI_send(new_data);
     432:	8c 2f       	mov	r24, r28
     434:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_send>
	SPI_deselect();
     438:	0e 94 4b 03 	call	0x696	; 0x696 <SPI_deselect>
}
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	08 95       	ret

00000444 <MCP2515_reset>:

void MCP2515_reset() {
	SPI_select();
     444:	0e 94 49 03 	call	0x692	; 0x692 <SPI_select>
	SPI_send(RESET);
     448:	80 ec       	ldi	r24, 0xC0	; 192
     44a:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_send>
	SPI_deselect();
     44e:	0e 94 4b 03 	call	0x696	; 0x696 <SPI_deselect>
     452:	08 95       	ret

00000454 <MCP2515_init>:
#define BIT_MODIFY 0x05
#define RTS_BASE 0x80


uint8_t MCP2515_init() {
	SPI_init();
     454:	0e 94 2c 03 	call	0x658	; 0x658 <SPI_init>
	MCP2515_reset();
     458:	0e 94 22 02 	call	0x444	; 0x444 <MCP2515_reset>
	//check bit 7-5 of MCP_CANSTAT which signify the operation mode
	const uint8_t device_mode = MCP2515_read(MCP_CANSTAT) & MODE_MASK;
     45c:	8e e0       	ldi	r24, 0x0E	; 14
     45e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MCP2515_read>
     462:	80 7e       	andi	r24, 0xE0	; 224
	if (device_mode != MODE_CONFIG) {
     464:	80 38       	cpi	r24, 0x80	; 128
     466:	31 f0       	breq	.+12     	; 0x474 <MCP2515_init+0x20>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
     468:	80 ef       	ldi	r24, 0xF0	; 240
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <puts>
		return 1;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	08 95       	ret
	}
	
	return 0;
     474:	80 e0       	ldi	r24, 0x00	; 0
}
     476:	08 95       	ret

00000478 <initialize>:
#include <stdio.h>
#include <stdbool.h>


void initialize(void){
	cli();
     478:	f8 94       	cli
	OLED_reset();
     47a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <OLED_reset>
	usart_init(MYUBRR);
     47e:	8f e1       	ldi	r24, 0x1F	; 31
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 62 03 	call	0x6c4	; 0x6c4 <usart_init>
	SRAM_init();
     486:	0e 94 4d 03 	call	0x69a	; 0x69a <SRAM_init>
	ADC_init();
     48a:	0e 94 57 00 	call	0xae	; 0xae <ADC_init>
	JOY_init();
     48e:	0e 94 82 01 	call	0x304	; 0x304 <JOY_init>
	OLED_init();
     492:	0e 94 01 03 	call	0x602	; 0x602 <OLED_init>
	//MENU_init();
	CAN_init();
     496:	0e 94 aa 00 	call	0x154	; 0x154 <CAN_init>
	sei();
     49a:	78 94       	sei
     49c:	08 95       	ret

0000049e <send_joystick_pos>:
	}
	
	
}

void send_joystick_pos(){
     49e:	cf 92       	push	r12
     4a0:	df 92       	push	r13
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	2b 97       	sbiw	r28, 0x0b	; 11
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
	can_message msg;
	msg.id  = 0;
     4be:	1a 82       	std	Y+2, r1	; 0x02
     4c0:	19 82       	std	Y+1, r1	; 0x01
	msg.length = 3;
     4c2:	83 e0       	ldi	r24, 0x03	; 3
     4c4:	8b 83       	std	Y+3, r24	; 0x03
	JOY_position_t pos;
	
	pos = JOY_getPosition();
     4c6:	0e 94 a4 01 	call	0x348	; 0x348 <JOY_getPosition>
     4ca:	f6 2e       	mov	r15, r22
     4cc:	d7 2e       	mov	r13, r23
     4ce:	e8 2e       	mov	r14, r24
     4d0:	c9 2e       	mov	r12, r25
	msg.data[0] = pos.x;
     4d2:	6c 83       	std	Y+4, r22	; 0x04
	msg.data[1] = pos.y;
     4d4:	8d 83       	std	Y+5, r24	; 0x05
	
	//contains 000 0 JOYSTICK RIGHT LEFT button
	msg.data[2] = JOY_button_pressed(JOY_BUTTON) << JOY_BUTTON | JOY_button_pressed(RIGHT_BUTTON) << RIGHT_BUTTON  | JOY_button_pressed(LEFT_BUTTON) << LEFT_BUTTON;
     4d6:	82 e0       	ldi	r24, 0x02	; 2
     4d8:	0e 94 8a 01 	call	0x314	; 0x314 <JOY_button_pressed>
     4dc:	8c 01       	movw	r16, r24
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	0e 94 8a 01 	call	0x314	; 0x314 <JOY_button_pressed>
     4e4:	00 0f       	add	r16, r16
     4e6:	11 1f       	adc	r17, r17
     4e8:	00 0f       	add	r16, r16
     4ea:	11 1f       	adc	r17, r17
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	08 2b       	or	r16, r24
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 8a 01 	call	0x314	; 0x314 <JOY_button_pressed>
     4f8:	80 2b       	or	r24, r16
     4fa:	8e 83       	std	Y+6, r24	; 0x06
	printf("SENDING:\nx: %d\ty:%d \tbuttons: %d	\n\n", pos.x, pos.y, msg.data[2]);
     4fc:	28 2f       	mov	r18, r24
     4fe:	33 27       	eor	r19, r19
     500:	27 fd       	sbrc	r18, 7
     502:	30 95       	com	r19
     504:	3f 93       	push	r19
     506:	8f 93       	push	r24
     508:	cf 92       	push	r12
     50a:	ef 92       	push	r14
     50c:	df 92       	push	r13
     50e:	ff 92       	push	r15
     510:	82 e2       	ldi	r24, 0x22	; 34
     512:	92 e0       	ldi	r25, 0x02	; 2
     514:	9f 93       	push	r25
     516:	8f 93       	push	r24
     518:	0e 94 09 05 	call	0xa12	; 0xa12 <printf>
	//printf("BUTTONS: \t%2d\t\t%2d\t\t%2d\n", test_bit(PINB, PINB0), test_bit(PINB, PINB1), !test_bit(PINB, PINB2));
	CAN_message_send(&msg);
     51c:	ce 01       	movw	r24, r28
     51e:	01 96       	adiw	r24, 0x01	; 1
     520:	0e 94 c1 00 	call	0x182	; 0x182 <CAN_message_send>
	while(!CAN_transmit_complete(TB0))
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 f5 00 	call	0x1ea	; 0x1ea <CAN_transmit_complete>
     536:	88 23       	and	r24, r24
     538:	d1 f3       	breq	.-12     	; 0x52e <__stack+0x2f>
		;
	//printf("1. EFGL: 0x%02x\n", MCP2515_read(MCP_EFLG));
	
}
     53a:	2b 96       	adiw	r28, 0x0b	; 11
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	1f 91       	pop	r17
     54c:	0f 91       	pop	r16
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	df 90       	pop	r13
     554:	cf 90       	pop	r12
     556:	08 95       	ret

00000558 <main>:

int main(void) {
	initialize();
     558:	0e 94 3c 02 	call	0x478	; 0x478 <initialize>
	while(1){
		//MENU_run();
		send_joystick_pos();
     55c:	0e 94 4f 02 	call	0x49e	; 0x49e <send_joystick_pos>
     560:	fd cf       	rjmp	.-6      	; 0x55c <main+0x4>

00000562 <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7){
     562:	88 30       	cpi	r24, 0x08	; 8
     564:	30 f4       	brcc	.+12     	; 0x572 <OLED_goto_line+0x10>
		return;
	}
	write_cmd(0xB0+line);
     566:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     568:	e0 91 06 01 	lds	r30, 0x0106
     56c:	f0 91 07 01 	lds	r31, 0x0107
     570:	80 83       	st	Z, r24
     572:	08 95       	ret

00000574 <OLED_goto_column>:
	}
	write_cmd(0xB0+line);
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
     574:	88 23       	and	r24, r24
     576:	7c f0       	brlt	.+30     	; 0x596 <OLED_goto_column+0x22>
		return;
	}
	write_cmd(0x00+column%16); //lower column register
     578:	98 2f       	mov	r25, r24
     57a:	9f 70       	andi	r25, 0x0F	; 15
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     57c:	e0 91 06 01 	lds	r30, 0x0106
     580:	f0 91 07 01 	lds	r31, 0x0107
     584:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
		return;
	}
	write_cmd(0x00+column%16); //lower column register
	write_cmd(0x10+column/16); //higher column register
     586:	82 95       	swap	r24
     588:	8f 70       	andi	r24, 0x0F	; 15
     58a:	80 5f       	subi	r24, 0xF0	; 240
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     58c:	e0 91 06 01 	lds	r30, 0x0106
     590:	f0 91 07 01 	lds	r31, 0x0107
     594:	80 83       	st	Z, r24
     596:	08 95       	ret

00000598 <OLED_pos>:
		write_data(0x00);
		
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
     598:	cf 93       	push	r28
     59a:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
     59c:	88 30       	cpi	r24, 0x08	; 8
     59e:	10 f4       	brcc	.+4      	; 0x5a4 <OLED_pos+0xc>
     5a0:	66 23       	and	r22, r22
     5a2:	4c f4       	brge	.+18     	; 0x5b6 <OLED_pos+0x1e>
		printf("Out of range in OLED_pos()");
     5a4:	86 e4       	ldi	r24, 0x46	; 70
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	0e 94 09 05 	call	0xa12	; 0xa12 <printf>
		return; 
     5b0:	0f 90       	pop	r0
     5b2:	0f 90       	pop	r0
     5b4:	05 c0       	rjmp	.+10     	; 0x5c0 <OLED_pos+0x28>
	}
	
	OLED_goto_line(line);
     5b6:	0e 94 b1 02 	call	0x562	; 0x562 <OLED_goto_line>
	OLED_goto_column(column);
     5ba:	8c 2f       	mov	r24, r28
     5bc:	0e 94 ba 02 	call	0x574	; 0x574 <OLED_goto_column>
}
     5c0:	cf 91       	pop	r28
     5c2:	08 95       	ret

000005c4 <OLED_home>:




void OLED_home(){
	OLED_pos(0,0);
     5c4:	60 e0       	ldi	r22, 0x00	; 0
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	0e 94 cc 02 	call	0x598	; 0x598 <OLED_pos>
     5cc:	08 95       	ret

000005ce <OLED_clear_line>:
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	0e 94 cc 02 	call	0x598	; 0x598 <OLED_pos>
     5d4:	80 e8       	ldi	r24, 0x80	; 128
     5d6:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     5d8:	e0 91 08 01 	lds	r30, 0x0108
     5dc:	f0 91 09 01 	lds	r31, 0x0109
     5e0:	10 82       	st	Z, r1
     5e2:	01 97       	sbiw	r24, 0x01	; 1
	OLED_pos(0,0);
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	c1 f7       	brne	.-16     	; 0x5d8 <OLED_clear_line+0xa>
		write_data(0x00);
		
	}
}
     5e8:	08 95       	ret

000005ea <OLED_reset>:
	
}



void OLED_reset() {
     5ea:	cf 93       	push	r28
     5ec:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
     5ee:	8c 2f       	mov	r24, r28
     5f0:	0e 94 e7 02 	call	0x5ce	; 0x5ce <OLED_clear_line>
     5f4:	cf 5f       	subi	r28, 0xFF	; 255
}



void OLED_reset() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
     5f6:	c8 30       	cpi	r28, 0x08	; 8
     5f8:	d1 f7       	brne	.-12     	; 0x5ee <OLED_reset+0x4>
		OLED_clear_line(page);
	}
	OLED_home();
     5fa:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <OLED_home>
}
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	66 97       	sbiw	r28, 0x16	; 22
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
	
	
	const char addresses[] = {
     616:	86 e1       	ldi	r24, 0x16	; 22
     618:	ea e0       	ldi	r30, 0x0A	; 10
     61a:	f1 e0       	ldi	r31, 0x01	; 1
     61c:	de 01       	movw	r26, r28
     61e:	11 96       	adiw	r26, 0x01	; 1
     620:	01 90       	ld	r0, Z+
     622:	0d 92       	st	X+, r0
     624:	8a 95       	dec	r24
     626:	e1 f7       	brne	.-8      	; 0x620 <OLED_init+0x1e>
     628:	fe 01       	movw	r30, r28
     62a:	31 96       	adiw	r30, 0x01	; 1
     62c:	ce 01       	movw	r24, r28
     62e:	47 96       	adiw	r24, 0x17	; 23
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
		write_cmd(addresses[i]);
     630:	21 91       	ld	r18, Z+
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     632:	a0 91 06 01 	lds	r26, 0x0106
     636:	b0 91 07 01 	lds	r27, 0x0107
     63a:	2c 93       	st	X, r18
		0xa6, //set normal display
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
     63c:	e8 17       	cp	r30, r24
     63e:	f9 07       	cpc	r31, r25
     640:	b9 f7       	brne	.-18     	; 0x630 <OLED_init+0x2e>
		write_cmd(addresses[i]);
	}
	
	OLED_reset();
     642:	0e 94 f5 02 	call	0x5ea	; 0x5ea <OLED_reset>
	
}
     646:	66 96       	adiw	r28, 0x16	; 22
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	cd bf       	out	0x3d, r28	; 61
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <SPI_init>:

void SPI_init(){
	//Configure interrupt0 on the ATmega162 for receiving interrupts from SPI
	//see page 160 in ATmega162
	//enable int0 on the ATmega162
	set_bit(GICR, INT0);
     658:	8b b7       	in	r24, 0x3b	; 59
     65a:	80 64       	ori	r24, 0x40	; 64
     65c:	8b bf       	out	0x3b, r24	; 59
	
	//interrupt when low
	clear_bit(MCUCR,ISC01);
     65e:	85 b7       	in	r24, 0x35	; 53
     660:	8d 7f       	andi	r24, 0xFD	; 253
     662:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     664:	85 b7       	in	r24, 0x35	; 53
     666:	8e 7f       	andi	r24, 0xFE	; 254
     668:	85 bf       	out	0x35, r24	; 53
	

	//set mosi, sck, ss as output, others as input
	set_bit(DDRB, MOSI);
     66a:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
     66c:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
     66e:	bc 9a       	sbi	0x17, 4	; 23
	
	
	//set ATmega as master
	set_bit(SPCR, MSTR);
     670:	6c 9a       	sbi	0x0d, 4	; 13
	
	//enable SPI
	set_bit(SPCR, SPE);
     672:	6e 9a       	sbi	0x0d, 6	; 13
	
	//set clock to f_osc/16
	set_bit(SPCR, SPR0);
     674:	68 9a       	sbi	0x0d, 0	; 13
	clear_bit(SPCR,SPR1);
     676:	69 98       	cbi	0x0d, 1	; 13
	clear_bit(SPCR, SPI2X);
     678:	68 98       	cbi	0x0d, 0	; 13
     67a:	08 95       	ret

0000067c <SPI_send>:
}


void SPI_send(uint8_t data){
	//Start transmission
	SPDR = data;		
     67c:	8f b9       	out	0x0f, r24	; 15
	//wait for transmission complete SPSR: register with SPIF flag, SPIF: bit set to 1 when data is read
	loop_until_bit_is_set(SPSR, SPIF);
     67e:	77 9b       	sbis	0x0e, 7	; 14
     680:	fe cf       	rjmp	.-4      	; 0x67e <SPI_send+0x2>
}
     682:	08 95       	ret

00000684 <SPI_read>:


char SPI_read(){
	//must send a dummy bit to receive data
	SPI_send(0);
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	0e 94 3e 03 	call	0x67c	; 0x67c <SPI_send>
	
	loop_until_bit_is_set(SPSR, SPIF);
     68a:	77 9b       	sbis	0x0e, 7	; 14
     68c:	fe cf       	rjmp	.-4      	; 0x68a <SPI_read+0x6>
	char data = SPDR;
     68e:	8f b1       	in	r24, 0x0f	; 15
	return data;
	
}
     690:	08 95       	ret

00000692 <SPI_select>:
	//printf("SPI_TEST: %s\n\n", spi_read_result);
	
}

void SPI_select(){
	clear_bit(PORTB, SS);
     692:	c4 98       	cbi	0x18, 4	; 24
     694:	08 95       	ret

00000696 <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
     696:	c4 9a       	sbi	0x18, 4	; 24
     698:	08 95       	ret

0000069a <SRAM_init>:



void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
     69a:	85 b7       	in	r24, 0x35	; 53
     69c:	80 68       	ori	r24, 0x80	; 128
     69e:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
     6a0:	80 b7       	in	r24, 0x30	; 48
     6a2:	80 62       	ori	r24, 0x20	; 32
     6a4:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
     6a6:	80 b7       	in	r24, 0x30	; 48
     6a8:	8f 7e       	andi	r24, 0xEF	; 239
     6aa:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
     6ac:	80 b7       	in	r24, 0x30	; 48
     6ae:	87 7f       	andi	r24, 0xF7	; 247
     6b0:	80 bf       	out	0x30, r24	; 48
     6b2:	08 95       	ret

000006b4 <usart_transmit_to_computer>:
}


void usart_transmit_to_computer(unsigned int data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
     6b4:	5d 9b       	sbis	0x0b, 5	; 11
     6b6:	fe cf       	rjmp	.-4      	; 0x6b4 <usart_transmit_to_computer>
	;
	
	/* Put data into buffer (sends the data) */
	UDR0 = data;
     6b8:	8c b9       	out	0x0c, r24	; 12
     6ba:	08 95       	ret

000006bc <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
     6bc:	5f 9b       	sbis	0x0b, 7	; 11
     6be:	fe cf       	rjmp	.-4      	; 0x6bc <usart_receive_from_computer>
	;
	
	/* Get and return data from buffer */
	return UDR0;
     6c0:	8c b1       	in	r24, 0x0c	; 12
}
     6c2:	08 95       	ret

000006c4 <usart_init>:
#include <stdio.h>


void usart_init(unsigned int ubbr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubbr>>8);
     6c4:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
     6c6:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     6c8:	88 e1       	ldi	r24, 0x18	; 24
     6ca:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     6cc:	8e e8       	ldi	r24, 0x8E	; 142
     6ce:	80 bd       	out	0x20, r24	; 32
	
	
	/* Enable printf-thing */
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
     6d0:	6e e5       	ldi	r22, 0x5E	; 94
     6d2:	73 e0       	ldi	r23, 0x03	; 3
     6d4:	8a e5       	ldi	r24, 0x5A	; 90
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	0e 94 be 04 	call	0x97c	; 0x97c <fdevopen>
     6dc:	08 95       	ret

000006de <__divmodhi4>:
     6de:	97 fb       	bst	r25, 7
     6e0:	07 2e       	mov	r0, r23
     6e2:	16 f4       	brtc	.+4      	; 0x6e8 <__divmodhi4+0xa>
     6e4:	00 94       	com	r0
     6e6:	07 d0       	rcall	.+14     	; 0x6f6 <__divmodhi4_neg1>
     6e8:	77 fd       	sbrc	r23, 7
     6ea:	09 d0       	rcall	.+18     	; 0x6fe <__divmodhi4_neg2>
     6ec:	0e 94 83 03 	call	0x706	; 0x706 <__udivmodhi4>
     6f0:	07 fc       	sbrc	r0, 7
     6f2:	05 d0       	rcall	.+10     	; 0x6fe <__divmodhi4_neg2>
     6f4:	3e f4       	brtc	.+14     	; 0x704 <__divmodhi4_exit>

000006f6 <__divmodhi4_neg1>:
     6f6:	90 95       	com	r25
     6f8:	81 95       	neg	r24
     6fa:	9f 4f       	sbci	r25, 0xFF	; 255
     6fc:	08 95       	ret

000006fe <__divmodhi4_neg2>:
     6fe:	70 95       	com	r23
     700:	61 95       	neg	r22
     702:	7f 4f       	sbci	r23, 0xFF	; 255

00000704 <__divmodhi4_exit>:
     704:	08 95       	ret

00000706 <__udivmodhi4>:
     706:	aa 1b       	sub	r26, r26
     708:	bb 1b       	sub	r27, r27
     70a:	51 e1       	ldi	r21, 0x11	; 17
     70c:	07 c0       	rjmp	.+14     	; 0x71c <__udivmodhi4_ep>

0000070e <__udivmodhi4_loop>:
     70e:	aa 1f       	adc	r26, r26
     710:	bb 1f       	adc	r27, r27
     712:	a6 17       	cp	r26, r22
     714:	b7 07       	cpc	r27, r23
     716:	10 f0       	brcs	.+4      	; 0x71c <__udivmodhi4_ep>
     718:	a6 1b       	sub	r26, r22
     71a:	b7 0b       	sbc	r27, r23

0000071c <__udivmodhi4_ep>:
     71c:	88 1f       	adc	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	5a 95       	dec	r21
     722:	a9 f7       	brne	.-22     	; 0x70e <__udivmodhi4_loop>
     724:	80 95       	com	r24
     726:	90 95       	com	r25
     728:	bc 01       	movw	r22, r24
     72a:	cd 01       	movw	r24, r26
     72c:	08 95       	ret

0000072e <malloc>:
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	82 30       	cpi	r24, 0x02	; 2
     734:	91 05       	cpc	r25, r1
     736:	10 f4       	brcc	.+4      	; 0x73c <malloc+0xe>
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	e0 91 80 02 	lds	r30, 0x0280
     740:	f0 91 81 02 	lds	r31, 0x0281
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	30 97       	sbiw	r30, 0x00	; 0
     74e:	39 f1       	breq	.+78     	; 0x79e <malloc+0x70>
     750:	40 81       	ld	r20, Z
     752:	51 81       	ldd	r21, Z+1	; 0x01
     754:	48 17       	cp	r20, r24
     756:	59 07       	cpc	r21, r25
     758:	b8 f0       	brcs	.+46     	; 0x788 <malloc+0x5a>
     75a:	48 17       	cp	r20, r24
     75c:	59 07       	cpc	r21, r25
     75e:	71 f4       	brne	.+28     	; 0x77c <malloc+0x4e>
     760:	82 81       	ldd	r24, Z+2	; 0x02
     762:	93 81       	ldd	r25, Z+3	; 0x03
     764:	10 97       	sbiw	r26, 0x00	; 0
     766:	29 f0       	breq	.+10     	; 0x772 <malloc+0x44>
     768:	13 96       	adiw	r26, 0x03	; 3
     76a:	9c 93       	st	X, r25
     76c:	8e 93       	st	-X, r24
     76e:	12 97       	sbiw	r26, 0x02	; 2
     770:	2c c0       	rjmp	.+88     	; 0x7ca <malloc+0x9c>
     772:	90 93 81 02 	sts	0x0281, r25
     776:	80 93 80 02 	sts	0x0280, r24
     77a:	27 c0       	rjmp	.+78     	; 0x7ca <malloc+0x9c>
     77c:	21 15       	cp	r18, r1
     77e:	31 05       	cpc	r19, r1
     780:	31 f0       	breq	.+12     	; 0x78e <malloc+0x60>
     782:	42 17       	cp	r20, r18
     784:	53 07       	cpc	r21, r19
     786:	18 f0       	brcs	.+6      	; 0x78e <malloc+0x60>
     788:	a9 01       	movw	r20, r18
     78a:	db 01       	movw	r26, r22
     78c:	01 c0       	rjmp	.+2      	; 0x790 <malloc+0x62>
     78e:	ef 01       	movw	r28, r30
     790:	9a 01       	movw	r18, r20
     792:	bd 01       	movw	r22, r26
     794:	df 01       	movw	r26, r30
     796:	02 80       	ldd	r0, Z+2	; 0x02
     798:	f3 81       	ldd	r31, Z+3	; 0x03
     79a:	e0 2d       	mov	r30, r0
     79c:	d7 cf       	rjmp	.-82     	; 0x74c <malloc+0x1e>
     79e:	21 15       	cp	r18, r1
     7a0:	31 05       	cpc	r19, r1
     7a2:	f9 f0       	breq	.+62     	; 0x7e2 <malloc+0xb4>
     7a4:	28 1b       	sub	r18, r24
     7a6:	39 0b       	sbc	r19, r25
     7a8:	24 30       	cpi	r18, 0x04	; 4
     7aa:	31 05       	cpc	r19, r1
     7ac:	80 f4       	brcc	.+32     	; 0x7ce <malloc+0xa0>
     7ae:	8a 81       	ldd	r24, Y+2	; 0x02
     7b0:	9b 81       	ldd	r25, Y+3	; 0x03
     7b2:	61 15       	cp	r22, r1
     7b4:	71 05       	cpc	r23, r1
     7b6:	21 f0       	breq	.+8      	; 0x7c0 <malloc+0x92>
     7b8:	fb 01       	movw	r30, r22
     7ba:	93 83       	std	Z+3, r25	; 0x03
     7bc:	82 83       	std	Z+2, r24	; 0x02
     7be:	04 c0       	rjmp	.+8      	; 0x7c8 <malloc+0x9a>
     7c0:	90 93 81 02 	sts	0x0281, r25
     7c4:	80 93 80 02 	sts	0x0280, r24
     7c8:	fe 01       	movw	r30, r28
     7ca:	32 96       	adiw	r30, 0x02	; 2
     7cc:	44 c0       	rjmp	.+136    	; 0x856 <malloc+0x128>
     7ce:	fe 01       	movw	r30, r28
     7d0:	e2 0f       	add	r30, r18
     7d2:	f3 1f       	adc	r31, r19
     7d4:	81 93       	st	Z+, r24
     7d6:	91 93       	st	Z+, r25
     7d8:	22 50       	subi	r18, 0x02	; 2
     7da:	31 09       	sbc	r19, r1
     7dc:	39 83       	std	Y+1, r19	; 0x01
     7de:	28 83       	st	Y, r18
     7e0:	3a c0       	rjmp	.+116    	; 0x856 <malloc+0x128>
     7e2:	20 91 7e 02 	lds	r18, 0x027E
     7e6:	30 91 7f 02 	lds	r19, 0x027F
     7ea:	23 2b       	or	r18, r19
     7ec:	41 f4       	brne	.+16     	; 0x7fe <malloc+0xd0>
     7ee:	20 91 02 01 	lds	r18, 0x0102
     7f2:	30 91 03 01 	lds	r19, 0x0103
     7f6:	30 93 7f 02 	sts	0x027F, r19
     7fa:	20 93 7e 02 	sts	0x027E, r18
     7fe:	20 91 00 01 	lds	r18, 0x0100
     802:	30 91 01 01 	lds	r19, 0x0101
     806:	21 15       	cp	r18, r1
     808:	31 05       	cpc	r19, r1
     80a:	41 f4       	brne	.+16     	; 0x81c <malloc+0xee>
     80c:	2d b7       	in	r18, 0x3d	; 61
     80e:	3e b7       	in	r19, 0x3e	; 62
     810:	40 91 04 01 	lds	r20, 0x0104
     814:	50 91 05 01 	lds	r21, 0x0105
     818:	24 1b       	sub	r18, r20
     81a:	35 0b       	sbc	r19, r21
     81c:	e0 91 7e 02 	lds	r30, 0x027E
     820:	f0 91 7f 02 	lds	r31, 0x027F
     824:	e2 17       	cp	r30, r18
     826:	f3 07       	cpc	r31, r19
     828:	a0 f4       	brcc	.+40     	; 0x852 <malloc+0x124>
     82a:	2e 1b       	sub	r18, r30
     82c:	3f 0b       	sbc	r19, r31
     82e:	28 17       	cp	r18, r24
     830:	39 07       	cpc	r19, r25
     832:	78 f0       	brcs	.+30     	; 0x852 <malloc+0x124>
     834:	ac 01       	movw	r20, r24
     836:	4e 5f       	subi	r20, 0xFE	; 254
     838:	5f 4f       	sbci	r21, 0xFF	; 255
     83a:	24 17       	cp	r18, r20
     83c:	35 07       	cpc	r19, r21
     83e:	48 f0       	brcs	.+18     	; 0x852 <malloc+0x124>
     840:	4e 0f       	add	r20, r30
     842:	5f 1f       	adc	r21, r31
     844:	50 93 7f 02 	sts	0x027F, r21
     848:	40 93 7e 02 	sts	0x027E, r20
     84c:	81 93       	st	Z+, r24
     84e:	91 93       	st	Z+, r25
     850:	02 c0       	rjmp	.+4      	; 0x856 <malloc+0x128>
     852:	e0 e0       	ldi	r30, 0x00	; 0
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	cf 01       	movw	r24, r30
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <free>:
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	00 97       	sbiw	r24, 0x00	; 0
     864:	09 f4       	brne	.+2      	; 0x868 <free+0xa>
     866:	87 c0       	rjmp	.+270    	; 0x976 <free+0x118>
     868:	fc 01       	movw	r30, r24
     86a:	32 97       	sbiw	r30, 0x02	; 2
     86c:	13 82       	std	Z+3, r1	; 0x03
     86e:	12 82       	std	Z+2, r1	; 0x02
     870:	c0 91 80 02 	lds	r28, 0x0280
     874:	d0 91 81 02 	lds	r29, 0x0281
     878:	20 97       	sbiw	r28, 0x00	; 0
     87a:	81 f4       	brne	.+32     	; 0x89c <free+0x3e>
     87c:	20 81       	ld	r18, Z
     87e:	31 81       	ldd	r19, Z+1	; 0x01
     880:	28 0f       	add	r18, r24
     882:	39 1f       	adc	r19, r25
     884:	80 91 7e 02 	lds	r24, 0x027E
     888:	90 91 7f 02 	lds	r25, 0x027F
     88c:	82 17       	cp	r24, r18
     88e:	93 07       	cpc	r25, r19
     890:	79 f5       	brne	.+94     	; 0x8f0 <free+0x92>
     892:	f0 93 7f 02 	sts	0x027F, r31
     896:	e0 93 7e 02 	sts	0x027E, r30
     89a:	6d c0       	rjmp	.+218    	; 0x976 <free+0x118>
     89c:	de 01       	movw	r26, r28
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	ae 17       	cp	r26, r30
     8a4:	bf 07       	cpc	r27, r31
     8a6:	50 f4       	brcc	.+20     	; 0x8bc <free+0x5e>
     8a8:	12 96       	adiw	r26, 0x02	; 2
     8aa:	4d 91       	ld	r20, X+
     8ac:	5c 91       	ld	r21, X
     8ae:	13 97       	sbiw	r26, 0x03	; 3
     8b0:	9d 01       	movw	r18, r26
     8b2:	41 15       	cp	r20, r1
     8b4:	51 05       	cpc	r21, r1
     8b6:	09 f1       	breq	.+66     	; 0x8fa <free+0x9c>
     8b8:	da 01       	movw	r26, r20
     8ba:	f3 cf       	rjmp	.-26     	; 0x8a2 <free+0x44>
     8bc:	b3 83       	std	Z+3, r27	; 0x03
     8be:	a2 83       	std	Z+2, r26	; 0x02
     8c0:	40 81       	ld	r20, Z
     8c2:	51 81       	ldd	r21, Z+1	; 0x01
     8c4:	84 0f       	add	r24, r20
     8c6:	95 1f       	adc	r25, r21
     8c8:	8a 17       	cp	r24, r26
     8ca:	9b 07       	cpc	r25, r27
     8cc:	71 f4       	brne	.+28     	; 0x8ea <free+0x8c>
     8ce:	8d 91       	ld	r24, X+
     8d0:	9c 91       	ld	r25, X
     8d2:	11 97       	sbiw	r26, 0x01	; 1
     8d4:	84 0f       	add	r24, r20
     8d6:	95 1f       	adc	r25, r21
     8d8:	02 96       	adiw	r24, 0x02	; 2
     8da:	91 83       	std	Z+1, r25	; 0x01
     8dc:	80 83       	st	Z, r24
     8de:	12 96       	adiw	r26, 0x02	; 2
     8e0:	8d 91       	ld	r24, X+
     8e2:	9c 91       	ld	r25, X
     8e4:	13 97       	sbiw	r26, 0x03	; 3
     8e6:	93 83       	std	Z+3, r25	; 0x03
     8e8:	82 83       	std	Z+2, r24	; 0x02
     8ea:	21 15       	cp	r18, r1
     8ec:	31 05       	cpc	r19, r1
     8ee:	29 f4       	brne	.+10     	; 0x8fa <free+0x9c>
     8f0:	f0 93 81 02 	sts	0x0281, r31
     8f4:	e0 93 80 02 	sts	0x0280, r30
     8f8:	3e c0       	rjmp	.+124    	; 0x976 <free+0x118>
     8fa:	d9 01       	movw	r26, r18
     8fc:	13 96       	adiw	r26, 0x03	; 3
     8fe:	fc 93       	st	X, r31
     900:	ee 93       	st	-X, r30
     902:	12 97       	sbiw	r26, 0x02	; 2
     904:	4d 91       	ld	r20, X+
     906:	5d 91       	ld	r21, X+
     908:	a4 0f       	add	r26, r20
     90a:	b5 1f       	adc	r27, r21
     90c:	ea 17       	cp	r30, r26
     90e:	fb 07       	cpc	r31, r27
     910:	79 f4       	brne	.+30     	; 0x930 <free+0xd2>
     912:	80 81       	ld	r24, Z
     914:	91 81       	ldd	r25, Z+1	; 0x01
     916:	84 0f       	add	r24, r20
     918:	95 1f       	adc	r25, r21
     91a:	02 96       	adiw	r24, 0x02	; 2
     91c:	d9 01       	movw	r26, r18
     91e:	11 96       	adiw	r26, 0x01	; 1
     920:	9c 93       	st	X, r25
     922:	8e 93       	st	-X, r24
     924:	82 81       	ldd	r24, Z+2	; 0x02
     926:	93 81       	ldd	r25, Z+3	; 0x03
     928:	13 96       	adiw	r26, 0x03	; 3
     92a:	9c 93       	st	X, r25
     92c:	8e 93       	st	-X, r24
     92e:	12 97       	sbiw	r26, 0x02	; 2
     930:	e0 e0       	ldi	r30, 0x00	; 0
     932:	f0 e0       	ldi	r31, 0x00	; 0
     934:	8a 81       	ldd	r24, Y+2	; 0x02
     936:	9b 81       	ldd	r25, Y+3	; 0x03
     938:	00 97       	sbiw	r24, 0x00	; 0
     93a:	19 f0       	breq	.+6      	; 0x942 <free+0xe4>
     93c:	fe 01       	movw	r30, r28
     93e:	ec 01       	movw	r28, r24
     940:	f9 cf       	rjmp	.-14     	; 0x934 <free+0xd6>
     942:	ce 01       	movw	r24, r28
     944:	02 96       	adiw	r24, 0x02	; 2
     946:	28 81       	ld	r18, Y
     948:	39 81       	ldd	r19, Y+1	; 0x01
     94a:	82 0f       	add	r24, r18
     94c:	93 1f       	adc	r25, r19
     94e:	20 91 7e 02 	lds	r18, 0x027E
     952:	30 91 7f 02 	lds	r19, 0x027F
     956:	28 17       	cp	r18, r24
     958:	39 07       	cpc	r19, r25
     95a:	69 f4       	brne	.+26     	; 0x976 <free+0x118>
     95c:	30 97       	sbiw	r30, 0x00	; 0
     95e:	29 f4       	brne	.+10     	; 0x96a <free+0x10c>
     960:	10 92 81 02 	sts	0x0281, r1
     964:	10 92 80 02 	sts	0x0280, r1
     968:	02 c0       	rjmp	.+4      	; 0x96e <free+0x110>
     96a:	13 82       	std	Z+3, r1	; 0x03
     96c:	12 82       	std	Z+2, r1	; 0x02
     96e:	d0 93 7f 02 	sts	0x027F, r29
     972:	c0 93 7e 02 	sts	0x027E, r28
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <fdevopen>:
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
     986:	8b 01       	movw	r16, r22
     988:	00 97       	sbiw	r24, 0x00	; 0
     98a:	31 f4       	brne	.+12     	; 0x998 <fdevopen+0x1c>
     98c:	61 15       	cp	r22, r1
     98e:	71 05       	cpc	r23, r1
     990:	19 f4       	brne	.+6      	; 0x998 <fdevopen+0x1c>
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	38 c0       	rjmp	.+112    	; 0xa08 <fdevopen+0x8c>
     998:	6e e0       	ldi	r22, 0x0E	; 14
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 1c 07 	call	0xe38	; 0xe38 <calloc>
     9a4:	fc 01       	movw	r30, r24
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	a1 f3       	breq	.-24     	; 0x992 <fdevopen+0x16>
     9aa:	80 e8       	ldi	r24, 0x80	; 128
     9ac:	83 83       	std	Z+3, r24	; 0x03
     9ae:	01 15       	cp	r16, r1
     9b0:	11 05       	cpc	r17, r1
     9b2:	71 f0       	breq	.+28     	; 0x9d0 <fdevopen+0x54>
     9b4:	13 87       	std	Z+11, r17	; 0x0b
     9b6:	02 87       	std	Z+10, r16	; 0x0a
     9b8:	81 e8       	ldi	r24, 0x81	; 129
     9ba:	83 83       	std	Z+3, r24	; 0x03
     9bc:	80 91 82 02 	lds	r24, 0x0282
     9c0:	90 91 83 02 	lds	r25, 0x0283
     9c4:	89 2b       	or	r24, r25
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <fdevopen+0x54>
     9c8:	f0 93 83 02 	sts	0x0283, r31
     9cc:	e0 93 82 02 	sts	0x0282, r30
     9d0:	20 97       	sbiw	r28, 0x00	; 0
     9d2:	c9 f0       	breq	.+50     	; 0xa06 <fdevopen+0x8a>
     9d4:	d1 87       	std	Z+9, r29	; 0x09
     9d6:	c0 87       	std	Z+8, r28	; 0x08
     9d8:	83 81       	ldd	r24, Z+3	; 0x03
     9da:	82 60       	ori	r24, 0x02	; 2
     9dc:	83 83       	std	Z+3, r24	; 0x03
     9de:	80 91 84 02 	lds	r24, 0x0284
     9e2:	90 91 85 02 	lds	r25, 0x0285
     9e6:	89 2b       	or	r24, r25
     9e8:	71 f4       	brne	.+28     	; 0xa06 <fdevopen+0x8a>
     9ea:	f0 93 85 02 	sts	0x0285, r31
     9ee:	e0 93 84 02 	sts	0x0284, r30
     9f2:	80 91 86 02 	lds	r24, 0x0286
     9f6:	90 91 87 02 	lds	r25, 0x0287
     9fa:	89 2b       	or	r24, r25
     9fc:	21 f4       	brne	.+8      	; 0xa06 <fdevopen+0x8a>
     9fe:	f0 93 87 02 	sts	0x0287, r31
     a02:	e0 93 86 02 	sts	0x0286, r30
     a06:	cf 01       	movw	r24, r30
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	1f 91       	pop	r17
     a0e:	0f 91       	pop	r16
     a10:	08 95       	ret

00000a12 <printf>:
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	ef e0       	ldi	r30, 0x0F	; 15
     a18:	f5 e0       	ldi	r31, 0x05	; 5
     a1a:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__prologue_saves__+0x20>
     a1e:	fe 01       	movw	r30, r28
     a20:	35 96       	adiw	r30, 0x05	; 5
     a22:	61 91       	ld	r22, Z+
     a24:	71 91       	ld	r23, Z+
     a26:	af 01       	movw	r20, r30
     a28:	80 91 84 02 	lds	r24, 0x0284
     a2c:	90 91 85 02 	lds	r25, 0x0285
     a30:	0e 94 4a 05 	call	0xa94	; 0xa94 <vfprintf>
     a34:	e2 e0       	ldi	r30, 0x02	; 2
     a36:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__epilogue_restores__+0x20>

00000a3a <puts>:
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	e0 91 84 02 	lds	r30, 0x0284
     a46:	f0 91 85 02 	lds	r31, 0x0285
     a4a:	23 81       	ldd	r18, Z+3	; 0x03
     a4c:	21 ff       	sbrs	r18, 1
     a4e:	1b c0       	rjmp	.+54     	; 0xa86 <puts+0x4c>
     a50:	ec 01       	movw	r28, r24
     a52:	00 e0       	ldi	r16, 0x00	; 0
     a54:	10 e0       	ldi	r17, 0x00	; 0
     a56:	89 91       	ld	r24, Y+
     a58:	60 91 84 02 	lds	r22, 0x0284
     a5c:	70 91 85 02 	lds	r23, 0x0285
     a60:	db 01       	movw	r26, r22
     a62:	18 96       	adiw	r26, 0x08	; 8
     a64:	ed 91       	ld	r30, X+
     a66:	fc 91       	ld	r31, X
     a68:	19 97       	sbiw	r26, 0x09	; 9
     a6a:	88 23       	and	r24, r24
     a6c:	31 f0       	breq	.+12     	; 0xa7a <puts+0x40>
     a6e:	09 95       	icall
     a70:	89 2b       	or	r24, r25
     a72:	89 f3       	breq	.-30     	; 0xa56 <puts+0x1c>
     a74:	0f ef       	ldi	r16, 0xFF	; 255
     a76:	1f ef       	ldi	r17, 0xFF	; 255
     a78:	ee cf       	rjmp	.-36     	; 0xa56 <puts+0x1c>
     a7a:	8a e0       	ldi	r24, 0x0A	; 10
     a7c:	09 95       	icall
     a7e:	89 2b       	or	r24, r25
     a80:	11 f4       	brne	.+4      	; 0xa86 <puts+0x4c>
     a82:	c8 01       	movw	r24, r16
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <puts+0x50>
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	9f ef       	ldi	r25, 0xFF	; 255
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	1f 91       	pop	r17
     a90:	0f 91       	pop	r16
     a92:	08 95       	ret

00000a94 <vfprintf>:
     a94:	ac e0       	ldi	r26, 0x0C	; 12
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	e0 e5       	ldi	r30, 0x50	; 80
     a9a:	f5 e0       	ldi	r31, 0x05	; 5
     a9c:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__prologue_saves__>
     aa0:	7c 01       	movw	r14, r24
     aa2:	6b 01       	movw	r12, r22
     aa4:	8a 01       	movw	r16, r20
     aa6:	fc 01       	movw	r30, r24
     aa8:	17 82       	std	Z+7, r1	; 0x07
     aaa:	16 82       	std	Z+6, r1	; 0x06
     aac:	83 81       	ldd	r24, Z+3	; 0x03
     aae:	81 ff       	sbrs	r24, 1
     ab0:	bd c1       	rjmp	.+890    	; 0xe2c <vfprintf+0x398>
     ab2:	ce 01       	movw	r24, r28
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	4c 01       	movw	r8, r24
     ab8:	f7 01       	movw	r30, r14
     aba:	93 81       	ldd	r25, Z+3	; 0x03
     abc:	f6 01       	movw	r30, r12
     abe:	93 fd       	sbrc	r25, 3
     ac0:	85 91       	lpm	r24, Z+
     ac2:	93 ff       	sbrs	r25, 3
     ac4:	81 91       	ld	r24, Z+
     ac6:	6f 01       	movw	r12, r30
     ac8:	88 23       	and	r24, r24
     aca:	09 f4       	brne	.+2      	; 0xace <vfprintf+0x3a>
     acc:	ab c1       	rjmp	.+854    	; 0xe24 <vfprintf+0x390>
     ace:	85 32       	cpi	r24, 0x25	; 37
     ad0:	39 f4       	brne	.+14     	; 0xae0 <vfprintf+0x4c>
     ad2:	93 fd       	sbrc	r25, 3
     ad4:	85 91       	lpm	r24, Z+
     ad6:	93 ff       	sbrs	r25, 3
     ad8:	81 91       	ld	r24, Z+
     ada:	6f 01       	movw	r12, r30
     adc:	85 32       	cpi	r24, 0x25	; 37
     ade:	29 f4       	brne	.+10     	; 0xaea <vfprintf+0x56>
     ae0:	b7 01       	movw	r22, r14
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 55 07 	call	0xeaa	; 0xeaa <fputc>
     ae8:	e7 cf       	rjmp	.-50     	; 0xab8 <vfprintf+0x24>
     aea:	51 2c       	mov	r5, r1
     aec:	31 2c       	mov	r3, r1
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	20 32       	cpi	r18, 0x20	; 32
     af2:	a0 f4       	brcc	.+40     	; 0xb1c <vfprintf+0x88>
     af4:	8b 32       	cpi	r24, 0x2B	; 43
     af6:	69 f0       	breq	.+26     	; 0xb12 <vfprintf+0x7e>
     af8:	30 f4       	brcc	.+12     	; 0xb06 <vfprintf+0x72>
     afa:	80 32       	cpi	r24, 0x20	; 32
     afc:	59 f0       	breq	.+22     	; 0xb14 <vfprintf+0x80>
     afe:	83 32       	cpi	r24, 0x23	; 35
     b00:	69 f4       	brne	.+26     	; 0xb1c <vfprintf+0x88>
     b02:	20 61       	ori	r18, 0x10	; 16
     b04:	2c c0       	rjmp	.+88     	; 0xb5e <vfprintf+0xca>
     b06:	8d 32       	cpi	r24, 0x2D	; 45
     b08:	39 f0       	breq	.+14     	; 0xb18 <vfprintf+0x84>
     b0a:	80 33       	cpi	r24, 0x30	; 48
     b0c:	39 f4       	brne	.+14     	; 0xb1c <vfprintf+0x88>
     b0e:	21 60       	ori	r18, 0x01	; 1
     b10:	26 c0       	rjmp	.+76     	; 0xb5e <vfprintf+0xca>
     b12:	22 60       	ori	r18, 0x02	; 2
     b14:	24 60       	ori	r18, 0x04	; 4
     b16:	23 c0       	rjmp	.+70     	; 0xb5e <vfprintf+0xca>
     b18:	28 60       	ori	r18, 0x08	; 8
     b1a:	21 c0       	rjmp	.+66     	; 0xb5e <vfprintf+0xca>
     b1c:	27 fd       	sbrc	r18, 7
     b1e:	27 c0       	rjmp	.+78     	; 0xb6e <vfprintf+0xda>
     b20:	30 ed       	ldi	r19, 0xD0	; 208
     b22:	38 0f       	add	r19, r24
     b24:	3a 30       	cpi	r19, 0x0A	; 10
     b26:	78 f4       	brcc	.+30     	; 0xb46 <vfprintf+0xb2>
     b28:	26 ff       	sbrs	r18, 6
     b2a:	06 c0       	rjmp	.+12     	; 0xb38 <vfprintf+0xa4>
     b2c:	fa e0       	ldi	r31, 0x0A	; 10
     b2e:	5f 9e       	mul	r5, r31
     b30:	30 0d       	add	r19, r0
     b32:	11 24       	eor	r1, r1
     b34:	53 2e       	mov	r5, r19
     b36:	13 c0       	rjmp	.+38     	; 0xb5e <vfprintf+0xca>
     b38:	8a e0       	ldi	r24, 0x0A	; 10
     b3a:	38 9e       	mul	r3, r24
     b3c:	30 0d       	add	r19, r0
     b3e:	11 24       	eor	r1, r1
     b40:	33 2e       	mov	r3, r19
     b42:	20 62       	ori	r18, 0x20	; 32
     b44:	0c c0       	rjmp	.+24     	; 0xb5e <vfprintf+0xca>
     b46:	8e 32       	cpi	r24, 0x2E	; 46
     b48:	21 f4       	brne	.+8      	; 0xb52 <vfprintf+0xbe>
     b4a:	26 fd       	sbrc	r18, 6
     b4c:	6b c1       	rjmp	.+726    	; 0xe24 <vfprintf+0x390>
     b4e:	20 64       	ori	r18, 0x40	; 64
     b50:	06 c0       	rjmp	.+12     	; 0xb5e <vfprintf+0xca>
     b52:	8c 36       	cpi	r24, 0x6C	; 108
     b54:	11 f4       	brne	.+4      	; 0xb5a <vfprintf+0xc6>
     b56:	20 68       	ori	r18, 0x80	; 128
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <vfprintf+0xca>
     b5a:	88 36       	cpi	r24, 0x68	; 104
     b5c:	41 f4       	brne	.+16     	; 0xb6e <vfprintf+0xda>
     b5e:	f6 01       	movw	r30, r12
     b60:	93 fd       	sbrc	r25, 3
     b62:	85 91       	lpm	r24, Z+
     b64:	93 ff       	sbrs	r25, 3
     b66:	81 91       	ld	r24, Z+
     b68:	6f 01       	movw	r12, r30
     b6a:	81 11       	cpse	r24, r1
     b6c:	c1 cf       	rjmp	.-126    	; 0xaf0 <vfprintf+0x5c>
     b6e:	98 2f       	mov	r25, r24
     b70:	9f 7d       	andi	r25, 0xDF	; 223
     b72:	95 54       	subi	r25, 0x45	; 69
     b74:	93 30       	cpi	r25, 0x03	; 3
     b76:	28 f4       	brcc	.+10     	; 0xb82 <vfprintf+0xee>
     b78:	0c 5f       	subi	r16, 0xFC	; 252
     b7a:	1f 4f       	sbci	r17, 0xFF	; 255
     b7c:	ff e3       	ldi	r31, 0x3F	; 63
     b7e:	f9 83       	std	Y+1, r31	; 0x01
     b80:	0d c0       	rjmp	.+26     	; 0xb9c <vfprintf+0x108>
     b82:	83 36       	cpi	r24, 0x63	; 99
     b84:	31 f0       	breq	.+12     	; 0xb92 <vfprintf+0xfe>
     b86:	83 37       	cpi	r24, 0x73	; 115
     b88:	71 f0       	breq	.+28     	; 0xba6 <vfprintf+0x112>
     b8a:	83 35       	cpi	r24, 0x53	; 83
     b8c:	09 f0       	breq	.+2      	; 0xb90 <vfprintf+0xfc>
     b8e:	5b c0       	rjmp	.+182    	; 0xc46 <vfprintf+0x1b2>
     b90:	22 c0       	rjmp	.+68     	; 0xbd6 <vfprintf+0x142>
     b92:	f8 01       	movw	r30, r16
     b94:	80 81       	ld	r24, Z
     b96:	89 83       	std	Y+1, r24	; 0x01
     b98:	0e 5f       	subi	r16, 0xFE	; 254
     b9a:	1f 4f       	sbci	r17, 0xFF	; 255
     b9c:	44 24       	eor	r4, r4
     b9e:	43 94       	inc	r4
     ba0:	51 2c       	mov	r5, r1
     ba2:	54 01       	movw	r10, r8
     ba4:	15 c0       	rjmp	.+42     	; 0xbd0 <vfprintf+0x13c>
     ba6:	38 01       	movw	r6, r16
     ba8:	f2 e0       	ldi	r31, 0x02	; 2
     baa:	6f 0e       	add	r6, r31
     bac:	71 1c       	adc	r7, r1
     bae:	f8 01       	movw	r30, r16
     bb0:	a0 80       	ld	r10, Z
     bb2:	b1 80       	ldd	r11, Z+1	; 0x01
     bb4:	26 ff       	sbrs	r18, 6
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <vfprintf+0x12a>
     bb8:	65 2d       	mov	r22, r5
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <vfprintf+0x12e>
     bbe:	6f ef       	ldi	r22, 0xFF	; 255
     bc0:	7f ef       	ldi	r23, 0xFF	; 255
     bc2:	c5 01       	movw	r24, r10
     bc4:	2c 87       	std	Y+12, r18	; 0x0c
     bc6:	0e 94 4a 07 	call	0xe94	; 0xe94 <strnlen>
     bca:	2c 01       	movw	r4, r24
     bcc:	83 01       	movw	r16, r6
     bce:	2c 85       	ldd	r18, Y+12	; 0x0c
     bd0:	2f 77       	andi	r18, 0x7F	; 127
     bd2:	22 2e       	mov	r2, r18
     bd4:	17 c0       	rjmp	.+46     	; 0xc04 <vfprintf+0x170>
     bd6:	38 01       	movw	r6, r16
     bd8:	f2 e0       	ldi	r31, 0x02	; 2
     bda:	6f 0e       	add	r6, r31
     bdc:	71 1c       	adc	r7, r1
     bde:	f8 01       	movw	r30, r16
     be0:	a0 80       	ld	r10, Z
     be2:	b1 80       	ldd	r11, Z+1	; 0x01
     be4:	26 ff       	sbrs	r18, 6
     be6:	03 c0       	rjmp	.+6      	; 0xbee <vfprintf+0x15a>
     be8:	65 2d       	mov	r22, r5
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	02 c0       	rjmp	.+4      	; 0xbf2 <vfprintf+0x15e>
     bee:	6f ef       	ldi	r22, 0xFF	; 255
     bf0:	7f ef       	ldi	r23, 0xFF	; 255
     bf2:	c5 01       	movw	r24, r10
     bf4:	2c 87       	std	Y+12, r18	; 0x0c
     bf6:	0e 94 38 07 	call	0xe70	; 0xe70 <strnlen_P>
     bfa:	2c 01       	movw	r4, r24
     bfc:	2c 85       	ldd	r18, Y+12	; 0x0c
     bfe:	20 68       	ori	r18, 0x80	; 128
     c00:	22 2e       	mov	r2, r18
     c02:	83 01       	movw	r16, r6
     c04:	23 fc       	sbrc	r2, 3
     c06:	1b c0       	rjmp	.+54     	; 0xc3e <vfprintf+0x1aa>
     c08:	83 2d       	mov	r24, r3
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	48 16       	cp	r4, r24
     c0e:	59 06       	cpc	r5, r25
     c10:	b0 f4       	brcc	.+44     	; 0xc3e <vfprintf+0x1aa>
     c12:	b7 01       	movw	r22, r14
     c14:	80 e2       	ldi	r24, 0x20	; 32
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 55 07 	call	0xeaa	; 0xeaa <fputc>
     c1c:	3a 94       	dec	r3
     c1e:	f4 cf       	rjmp	.-24     	; 0xc08 <vfprintf+0x174>
     c20:	f5 01       	movw	r30, r10
     c22:	27 fc       	sbrc	r2, 7
     c24:	85 91       	lpm	r24, Z+
     c26:	27 fe       	sbrs	r2, 7
     c28:	81 91       	ld	r24, Z+
     c2a:	5f 01       	movw	r10, r30
     c2c:	b7 01       	movw	r22, r14
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 55 07 	call	0xeaa	; 0xeaa <fputc>
     c34:	31 10       	cpse	r3, r1
     c36:	3a 94       	dec	r3
     c38:	f1 e0       	ldi	r31, 0x01	; 1
     c3a:	4f 1a       	sub	r4, r31
     c3c:	51 08       	sbc	r5, r1
     c3e:	41 14       	cp	r4, r1
     c40:	51 04       	cpc	r5, r1
     c42:	71 f7       	brne	.-36     	; 0xc20 <vfprintf+0x18c>
     c44:	e5 c0       	rjmp	.+458    	; 0xe10 <vfprintf+0x37c>
     c46:	84 36       	cpi	r24, 0x64	; 100
     c48:	11 f0       	breq	.+4      	; 0xc4e <vfprintf+0x1ba>
     c4a:	89 36       	cpi	r24, 0x69	; 105
     c4c:	39 f5       	brne	.+78     	; 0xc9c <vfprintf+0x208>
     c4e:	f8 01       	movw	r30, r16
     c50:	27 ff       	sbrs	r18, 7
     c52:	07 c0       	rjmp	.+14     	; 0xc62 <vfprintf+0x1ce>
     c54:	60 81       	ld	r22, Z
     c56:	71 81       	ldd	r23, Z+1	; 0x01
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	93 81       	ldd	r25, Z+3	; 0x03
     c5c:	0c 5f       	subi	r16, 0xFC	; 252
     c5e:	1f 4f       	sbci	r17, 0xFF	; 255
     c60:	08 c0       	rjmp	.+16     	; 0xc72 <vfprintf+0x1de>
     c62:	60 81       	ld	r22, Z
     c64:	71 81       	ldd	r23, Z+1	; 0x01
     c66:	88 27       	eor	r24, r24
     c68:	77 fd       	sbrc	r23, 7
     c6a:	80 95       	com	r24
     c6c:	98 2f       	mov	r25, r24
     c6e:	0e 5f       	subi	r16, 0xFE	; 254
     c70:	1f 4f       	sbci	r17, 0xFF	; 255
     c72:	2f 76       	andi	r18, 0x6F	; 111
     c74:	b2 2e       	mov	r11, r18
     c76:	97 ff       	sbrs	r25, 7
     c78:	09 c0       	rjmp	.+18     	; 0xc8c <vfprintf+0x1f8>
     c7a:	90 95       	com	r25
     c7c:	80 95       	com	r24
     c7e:	70 95       	com	r23
     c80:	61 95       	neg	r22
     c82:	7f 4f       	sbci	r23, 0xFF	; 255
     c84:	8f 4f       	sbci	r24, 0xFF	; 255
     c86:	9f 4f       	sbci	r25, 0xFF	; 255
     c88:	20 68       	ori	r18, 0x80	; 128
     c8a:	b2 2e       	mov	r11, r18
     c8c:	2a e0       	ldi	r18, 0x0A	; 10
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	a4 01       	movw	r20, r8
     c92:	0e 94 87 07 	call	0xf0e	; 0xf0e <__ultoa_invert>
     c96:	a8 2e       	mov	r10, r24
     c98:	a8 18       	sub	r10, r8
     c9a:	44 c0       	rjmp	.+136    	; 0xd24 <vfprintf+0x290>
     c9c:	85 37       	cpi	r24, 0x75	; 117
     c9e:	29 f4       	brne	.+10     	; 0xcaa <vfprintf+0x216>
     ca0:	2f 7e       	andi	r18, 0xEF	; 239
     ca2:	b2 2e       	mov	r11, r18
     ca4:	2a e0       	ldi	r18, 0x0A	; 10
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	25 c0       	rjmp	.+74     	; 0xcf4 <vfprintf+0x260>
     caa:	f2 2f       	mov	r31, r18
     cac:	f9 7f       	andi	r31, 0xF9	; 249
     cae:	bf 2e       	mov	r11, r31
     cb0:	8f 36       	cpi	r24, 0x6F	; 111
     cb2:	c1 f0       	breq	.+48     	; 0xce4 <vfprintf+0x250>
     cb4:	18 f4       	brcc	.+6      	; 0xcbc <vfprintf+0x228>
     cb6:	88 35       	cpi	r24, 0x58	; 88
     cb8:	79 f0       	breq	.+30     	; 0xcd8 <vfprintf+0x244>
     cba:	b4 c0       	rjmp	.+360    	; 0xe24 <vfprintf+0x390>
     cbc:	80 37       	cpi	r24, 0x70	; 112
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <vfprintf+0x232>
     cc0:	88 37       	cpi	r24, 0x78	; 120
     cc2:	21 f0       	breq	.+8      	; 0xccc <vfprintf+0x238>
     cc4:	af c0       	rjmp	.+350    	; 0xe24 <vfprintf+0x390>
     cc6:	2f 2f       	mov	r18, r31
     cc8:	20 61       	ori	r18, 0x10	; 16
     cca:	b2 2e       	mov	r11, r18
     ccc:	b4 fe       	sbrs	r11, 4
     cce:	0d c0       	rjmp	.+26     	; 0xcea <vfprintf+0x256>
     cd0:	8b 2d       	mov	r24, r11
     cd2:	84 60       	ori	r24, 0x04	; 4
     cd4:	b8 2e       	mov	r11, r24
     cd6:	09 c0       	rjmp	.+18     	; 0xcea <vfprintf+0x256>
     cd8:	24 ff       	sbrs	r18, 4
     cda:	0a c0       	rjmp	.+20     	; 0xcf0 <vfprintf+0x25c>
     cdc:	9f 2f       	mov	r25, r31
     cde:	96 60       	ori	r25, 0x06	; 6
     ce0:	b9 2e       	mov	r11, r25
     ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <vfprintf+0x25c>
     ce4:	28 e0       	ldi	r18, 0x08	; 8
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	05 c0       	rjmp	.+10     	; 0xcf4 <vfprintf+0x260>
     cea:	20 e1       	ldi	r18, 0x10	; 16
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <vfprintf+0x260>
     cf0:	20 e1       	ldi	r18, 0x10	; 16
     cf2:	32 e0       	ldi	r19, 0x02	; 2
     cf4:	f8 01       	movw	r30, r16
     cf6:	b7 fe       	sbrs	r11, 7
     cf8:	07 c0       	rjmp	.+14     	; 0xd08 <vfprintf+0x274>
     cfa:	60 81       	ld	r22, Z
     cfc:	71 81       	ldd	r23, Z+1	; 0x01
     cfe:	82 81       	ldd	r24, Z+2	; 0x02
     d00:	93 81       	ldd	r25, Z+3	; 0x03
     d02:	0c 5f       	subi	r16, 0xFC	; 252
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	06 c0       	rjmp	.+12     	; 0xd14 <vfprintf+0x280>
     d08:	60 81       	ld	r22, Z
     d0a:	71 81       	ldd	r23, Z+1	; 0x01
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	0e 5f       	subi	r16, 0xFE	; 254
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	a4 01       	movw	r20, r8
     d16:	0e 94 87 07 	call	0xf0e	; 0xf0e <__ultoa_invert>
     d1a:	a8 2e       	mov	r10, r24
     d1c:	a8 18       	sub	r10, r8
     d1e:	fb 2d       	mov	r31, r11
     d20:	ff 77       	andi	r31, 0x7F	; 127
     d22:	bf 2e       	mov	r11, r31
     d24:	b6 fe       	sbrs	r11, 6
     d26:	0b c0       	rjmp	.+22     	; 0xd3e <vfprintf+0x2aa>
     d28:	2b 2d       	mov	r18, r11
     d2a:	2e 7f       	andi	r18, 0xFE	; 254
     d2c:	a5 14       	cp	r10, r5
     d2e:	50 f4       	brcc	.+20     	; 0xd44 <vfprintf+0x2b0>
     d30:	b4 fe       	sbrs	r11, 4
     d32:	0a c0       	rjmp	.+20     	; 0xd48 <vfprintf+0x2b4>
     d34:	b2 fc       	sbrc	r11, 2
     d36:	08 c0       	rjmp	.+16     	; 0xd48 <vfprintf+0x2b4>
     d38:	2b 2d       	mov	r18, r11
     d3a:	2e 7e       	andi	r18, 0xEE	; 238
     d3c:	05 c0       	rjmp	.+10     	; 0xd48 <vfprintf+0x2b4>
     d3e:	7a 2c       	mov	r7, r10
     d40:	2b 2d       	mov	r18, r11
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <vfprintf+0x2b6>
     d44:	7a 2c       	mov	r7, r10
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <vfprintf+0x2b6>
     d48:	75 2c       	mov	r7, r5
     d4a:	24 ff       	sbrs	r18, 4
     d4c:	0d c0       	rjmp	.+26     	; 0xd68 <vfprintf+0x2d4>
     d4e:	fe 01       	movw	r30, r28
     d50:	ea 0d       	add	r30, r10
     d52:	f1 1d       	adc	r31, r1
     d54:	80 81       	ld	r24, Z
     d56:	80 33       	cpi	r24, 0x30	; 48
     d58:	11 f4       	brne	.+4      	; 0xd5e <vfprintf+0x2ca>
     d5a:	29 7e       	andi	r18, 0xE9	; 233
     d5c:	09 c0       	rjmp	.+18     	; 0xd70 <vfprintf+0x2dc>
     d5e:	22 ff       	sbrs	r18, 2
     d60:	06 c0       	rjmp	.+12     	; 0xd6e <vfprintf+0x2da>
     d62:	73 94       	inc	r7
     d64:	73 94       	inc	r7
     d66:	04 c0       	rjmp	.+8      	; 0xd70 <vfprintf+0x2dc>
     d68:	82 2f       	mov	r24, r18
     d6a:	86 78       	andi	r24, 0x86	; 134
     d6c:	09 f0       	breq	.+2      	; 0xd70 <vfprintf+0x2dc>
     d6e:	73 94       	inc	r7
     d70:	23 fd       	sbrc	r18, 3
     d72:	13 c0       	rjmp	.+38     	; 0xd9a <vfprintf+0x306>
     d74:	20 ff       	sbrs	r18, 0
     d76:	06 c0       	rjmp	.+12     	; 0xd84 <vfprintf+0x2f0>
     d78:	5a 2c       	mov	r5, r10
     d7a:	73 14       	cp	r7, r3
     d7c:	18 f4       	brcc	.+6      	; 0xd84 <vfprintf+0x2f0>
     d7e:	53 0c       	add	r5, r3
     d80:	57 18       	sub	r5, r7
     d82:	73 2c       	mov	r7, r3
     d84:	73 14       	cp	r7, r3
     d86:	68 f4       	brcc	.+26     	; 0xda2 <vfprintf+0x30e>
     d88:	b7 01       	movw	r22, r14
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	2c 87       	std	Y+12, r18	; 0x0c
     d90:	0e 94 55 07 	call	0xeaa	; 0xeaa <fputc>
     d94:	73 94       	inc	r7
     d96:	2c 85       	ldd	r18, Y+12	; 0x0c
     d98:	f5 cf       	rjmp	.-22     	; 0xd84 <vfprintf+0x2f0>
     d9a:	73 14       	cp	r7, r3
     d9c:	10 f4       	brcc	.+4      	; 0xda2 <vfprintf+0x30e>
     d9e:	37 18       	sub	r3, r7
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <vfprintf+0x310>
     da2:	31 2c       	mov	r3, r1
     da4:	24 ff       	sbrs	r18, 4
     da6:	12 c0       	rjmp	.+36     	; 0xdcc <vfprintf+0x338>
     da8:	b7 01       	movw	r22, r14
     daa:	80 e3       	ldi	r24, 0x30	; 48
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	2c 87       	std	Y+12, r18	; 0x0c
     db0:	0e 94 55 07 	call	0xeaa	; 0xeaa <fputc>
     db4:	2c 85       	ldd	r18, Y+12	; 0x0c
     db6:	22 ff       	sbrs	r18, 2
     db8:	17 c0       	rjmp	.+46     	; 0xde8 <vfprintf+0x354>
     dba:	21 ff       	sbrs	r18, 1
     dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <vfprintf+0x330>
     dbe:	88 e5       	ldi	r24, 0x58	; 88
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0x334>
     dc4:	88 e7       	ldi	r24, 0x78	; 120
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	b7 01       	movw	r22, r14
     dca:	0c c0       	rjmp	.+24     	; 0xde4 <vfprintf+0x350>
     dcc:	82 2f       	mov	r24, r18
     dce:	86 78       	andi	r24, 0x86	; 134
     dd0:	59 f0       	breq	.+22     	; 0xde8 <vfprintf+0x354>
     dd2:	21 fd       	sbrc	r18, 1
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <vfprintf+0x346>
     dd6:	80 e2       	ldi	r24, 0x20	; 32
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <vfprintf+0x348>
     dda:	8b e2       	ldi	r24, 0x2B	; 43
     ddc:	27 fd       	sbrc	r18, 7
     dde:	8d e2       	ldi	r24, 0x2D	; 45
     de0:	b7 01       	movw	r22, r14
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 55 07 	call	0xeaa	; 0xeaa <fputc>
     de8:	a5 14       	cp	r10, r5
     dea:	38 f4       	brcc	.+14     	; 0xdfa <vfprintf+0x366>
     dec:	b7 01       	movw	r22, r14
     dee:	80 e3       	ldi	r24, 0x30	; 48
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 55 07 	call	0xeaa	; 0xeaa <fputc>
     df6:	5a 94       	dec	r5
     df8:	f7 cf       	rjmp	.-18     	; 0xde8 <vfprintf+0x354>
     dfa:	aa 94       	dec	r10
     dfc:	f4 01       	movw	r30, r8
     dfe:	ea 0d       	add	r30, r10
     e00:	f1 1d       	adc	r31, r1
     e02:	80 81       	ld	r24, Z
     e04:	b7 01       	movw	r22, r14
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 55 07 	call	0xeaa	; 0xeaa <fputc>
     e0c:	a1 10       	cpse	r10, r1
     e0e:	f5 cf       	rjmp	.-22     	; 0xdfa <vfprintf+0x366>
     e10:	33 20       	and	r3, r3
     e12:	09 f4       	brne	.+2      	; 0xe16 <vfprintf+0x382>
     e14:	51 ce       	rjmp	.-862    	; 0xab8 <vfprintf+0x24>
     e16:	b7 01       	movw	r22, r14
     e18:	80 e2       	ldi	r24, 0x20	; 32
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	0e 94 55 07 	call	0xeaa	; 0xeaa <fputc>
     e20:	3a 94       	dec	r3
     e22:	f6 cf       	rjmp	.-20     	; 0xe10 <vfprintf+0x37c>
     e24:	f7 01       	movw	r30, r14
     e26:	86 81       	ldd	r24, Z+6	; 0x06
     e28:	97 81       	ldd	r25, Z+7	; 0x07
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <vfprintf+0x39c>
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	9f ef       	ldi	r25, 0xFF	; 255
     e30:	2c 96       	adiw	r28, 0x0c	; 12
     e32:	e2 e1       	ldi	r30, 0x12	; 18
     e34:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__epilogue_restores__>

00000e38 <calloc>:
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	86 9f       	mul	r24, r22
     e42:	80 01       	movw	r16, r0
     e44:	87 9f       	mul	r24, r23
     e46:	10 0d       	add	r17, r0
     e48:	96 9f       	mul	r25, r22
     e4a:	10 0d       	add	r17, r0
     e4c:	11 24       	eor	r1, r1
     e4e:	c8 01       	movw	r24, r16
     e50:	0e 94 97 03 	call	0x72e	; 0x72e <malloc>
     e54:	ec 01       	movw	r28, r24
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	29 f0       	breq	.+10     	; 0xe64 <calloc+0x2c>
     e5a:	a8 01       	movw	r20, r16
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	0e 94 43 07 	call	0xe86	; 0xe86 <memset>
     e64:	ce 01       	movw	r24, r28
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	08 95       	ret

00000e70 <strnlen_P>:
     e70:	fc 01       	movw	r30, r24
     e72:	05 90       	lpm	r0, Z+
     e74:	61 50       	subi	r22, 0x01	; 1
     e76:	70 40       	sbci	r23, 0x00	; 0
     e78:	01 10       	cpse	r0, r1
     e7a:	d8 f7       	brcc	.-10     	; 0xe72 <strnlen_P+0x2>
     e7c:	80 95       	com	r24
     e7e:	90 95       	com	r25
     e80:	8e 0f       	add	r24, r30
     e82:	9f 1f       	adc	r25, r31
     e84:	08 95       	ret

00000e86 <memset>:
     e86:	dc 01       	movw	r26, r24
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <memset+0x6>
     e8a:	6d 93       	st	X+, r22
     e8c:	41 50       	subi	r20, 0x01	; 1
     e8e:	50 40       	sbci	r21, 0x00	; 0
     e90:	e0 f7       	brcc	.-8      	; 0xe8a <memset+0x4>
     e92:	08 95       	ret

00000e94 <strnlen>:
     e94:	fc 01       	movw	r30, r24
     e96:	61 50       	subi	r22, 0x01	; 1
     e98:	70 40       	sbci	r23, 0x00	; 0
     e9a:	01 90       	ld	r0, Z+
     e9c:	01 10       	cpse	r0, r1
     e9e:	d8 f7       	brcc	.-10     	; 0xe96 <strnlen+0x2>
     ea0:	80 95       	com	r24
     ea2:	90 95       	com	r25
     ea4:	8e 0f       	add	r24, r30
     ea6:	9f 1f       	adc	r25, r31
     ea8:	08 95       	ret

00000eaa <fputc>:
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	18 2f       	mov	r17, r24
     eb4:	09 2f       	mov	r16, r25
     eb6:	eb 01       	movw	r28, r22
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	81 fd       	sbrc	r24, 1
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <fputc+0x1a>
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	9f ef       	ldi	r25, 0xFF	; 255
     ec2:	20 c0       	rjmp	.+64     	; 0xf04 <fputc+0x5a>
     ec4:	82 ff       	sbrs	r24, 2
     ec6:	10 c0       	rjmp	.+32     	; 0xee8 <fputc+0x3e>
     ec8:	4e 81       	ldd	r20, Y+6	; 0x06
     eca:	5f 81       	ldd	r21, Y+7	; 0x07
     ecc:	2c 81       	ldd	r18, Y+4	; 0x04
     ece:	3d 81       	ldd	r19, Y+5	; 0x05
     ed0:	42 17       	cp	r20, r18
     ed2:	53 07       	cpc	r21, r19
     ed4:	7c f4       	brge	.+30     	; 0xef4 <fputc+0x4a>
     ed6:	e8 81       	ld	r30, Y
     ed8:	f9 81       	ldd	r31, Y+1	; 0x01
     eda:	9f 01       	movw	r18, r30
     edc:	2f 5f       	subi	r18, 0xFF	; 255
     ede:	3f 4f       	sbci	r19, 0xFF	; 255
     ee0:	39 83       	std	Y+1, r19	; 0x01
     ee2:	28 83       	st	Y, r18
     ee4:	10 83       	st	Z, r17
     ee6:	06 c0       	rjmp	.+12     	; 0xef4 <fputc+0x4a>
     ee8:	e8 85       	ldd	r30, Y+8	; 0x08
     eea:	f9 85       	ldd	r31, Y+9	; 0x09
     eec:	81 2f       	mov	r24, r17
     eee:	09 95       	icall
     ef0:	89 2b       	or	r24, r25
     ef2:	29 f7       	brne	.-54     	; 0xebe <fputc+0x14>
     ef4:	2e 81       	ldd	r18, Y+6	; 0x06
     ef6:	3f 81       	ldd	r19, Y+7	; 0x07
     ef8:	2f 5f       	subi	r18, 0xFF	; 255
     efa:	3f 4f       	sbci	r19, 0xFF	; 255
     efc:	3f 83       	std	Y+7, r19	; 0x07
     efe:	2e 83       	std	Y+6, r18	; 0x06
     f00:	81 2f       	mov	r24, r17
     f02:	90 2f       	mov	r25, r16
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	08 95       	ret

00000f0e <__ultoa_invert>:
     f0e:	fa 01       	movw	r30, r20
     f10:	aa 27       	eor	r26, r26
     f12:	28 30       	cpi	r18, 0x08	; 8
     f14:	51 f1       	breq	.+84     	; 0xf6a <__ultoa_invert+0x5c>
     f16:	20 31       	cpi	r18, 0x10	; 16
     f18:	81 f1       	breq	.+96     	; 0xf7a <__ultoa_invert+0x6c>
     f1a:	e8 94       	clt
     f1c:	6f 93       	push	r22
     f1e:	6e 7f       	andi	r22, 0xFE	; 254
     f20:	6e 5f       	subi	r22, 0xFE	; 254
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	8f 4f       	sbci	r24, 0xFF	; 255
     f26:	9f 4f       	sbci	r25, 0xFF	; 255
     f28:	af 4f       	sbci	r26, 0xFF	; 255
     f2a:	b1 e0       	ldi	r27, 0x01	; 1
     f2c:	3e d0       	rcall	.+124    	; 0xfaa <__ultoa_invert+0x9c>
     f2e:	b4 e0       	ldi	r27, 0x04	; 4
     f30:	3c d0       	rcall	.+120    	; 0xfaa <__ultoa_invert+0x9c>
     f32:	67 0f       	add	r22, r23
     f34:	78 1f       	adc	r23, r24
     f36:	89 1f       	adc	r24, r25
     f38:	9a 1f       	adc	r25, r26
     f3a:	a1 1d       	adc	r26, r1
     f3c:	68 0f       	add	r22, r24
     f3e:	79 1f       	adc	r23, r25
     f40:	8a 1f       	adc	r24, r26
     f42:	91 1d       	adc	r25, r1
     f44:	a1 1d       	adc	r26, r1
     f46:	6a 0f       	add	r22, r26
     f48:	71 1d       	adc	r23, r1
     f4a:	81 1d       	adc	r24, r1
     f4c:	91 1d       	adc	r25, r1
     f4e:	a1 1d       	adc	r26, r1
     f50:	20 d0       	rcall	.+64     	; 0xf92 <__ultoa_invert+0x84>
     f52:	09 f4       	brne	.+2      	; 0xf56 <__ultoa_invert+0x48>
     f54:	68 94       	set
     f56:	3f 91       	pop	r19
     f58:	2a e0       	ldi	r18, 0x0A	; 10
     f5a:	26 9f       	mul	r18, r22
     f5c:	11 24       	eor	r1, r1
     f5e:	30 19       	sub	r19, r0
     f60:	30 5d       	subi	r19, 0xD0	; 208
     f62:	31 93       	st	Z+, r19
     f64:	de f6       	brtc	.-74     	; 0xf1c <__ultoa_invert+0xe>
     f66:	cf 01       	movw	r24, r30
     f68:	08 95       	ret
     f6a:	46 2f       	mov	r20, r22
     f6c:	47 70       	andi	r20, 0x07	; 7
     f6e:	40 5d       	subi	r20, 0xD0	; 208
     f70:	41 93       	st	Z+, r20
     f72:	b3 e0       	ldi	r27, 0x03	; 3
     f74:	0f d0       	rcall	.+30     	; 0xf94 <__ultoa_invert+0x86>
     f76:	c9 f7       	brne	.-14     	; 0xf6a <__ultoa_invert+0x5c>
     f78:	f6 cf       	rjmp	.-20     	; 0xf66 <__ultoa_invert+0x58>
     f7a:	46 2f       	mov	r20, r22
     f7c:	4f 70       	andi	r20, 0x0F	; 15
     f7e:	40 5d       	subi	r20, 0xD0	; 208
     f80:	4a 33       	cpi	r20, 0x3A	; 58
     f82:	18 f0       	brcs	.+6      	; 0xf8a <__ultoa_invert+0x7c>
     f84:	49 5d       	subi	r20, 0xD9	; 217
     f86:	31 fd       	sbrc	r19, 1
     f88:	40 52       	subi	r20, 0x20	; 32
     f8a:	41 93       	st	Z+, r20
     f8c:	02 d0       	rcall	.+4      	; 0xf92 <__ultoa_invert+0x84>
     f8e:	a9 f7       	brne	.-22     	; 0xf7a <__ultoa_invert+0x6c>
     f90:	ea cf       	rjmp	.-44     	; 0xf66 <__ultoa_invert+0x58>
     f92:	b4 e0       	ldi	r27, 0x04	; 4
     f94:	a6 95       	lsr	r26
     f96:	97 95       	ror	r25
     f98:	87 95       	ror	r24
     f9a:	77 95       	ror	r23
     f9c:	67 95       	ror	r22
     f9e:	ba 95       	dec	r27
     fa0:	c9 f7       	brne	.-14     	; 0xf94 <__ultoa_invert+0x86>
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	61 05       	cpc	r22, r1
     fa6:	71 05       	cpc	r23, r1
     fa8:	08 95       	ret
     faa:	9b 01       	movw	r18, r22
     fac:	ac 01       	movw	r20, r24
     fae:	0a 2e       	mov	r0, r26
     fb0:	06 94       	lsr	r0
     fb2:	57 95       	ror	r21
     fb4:	47 95       	ror	r20
     fb6:	37 95       	ror	r19
     fb8:	27 95       	ror	r18
     fba:	ba 95       	dec	r27
     fbc:	c9 f7       	brne	.-14     	; 0xfb0 <__ultoa_invert+0xa2>
     fbe:	62 0f       	add	r22, r18
     fc0:	73 1f       	adc	r23, r19
     fc2:	84 1f       	adc	r24, r20
     fc4:	95 1f       	adc	r25, r21
     fc6:	a0 1d       	adc	r26, r0
     fc8:	08 95       	ret

00000fca <__prologue_saves__>:
     fca:	2f 92       	push	r2
     fcc:	3f 92       	push	r3
     fce:	4f 92       	push	r4
     fd0:	5f 92       	push	r5
     fd2:	6f 92       	push	r6
     fd4:	7f 92       	push	r7
     fd6:	8f 92       	push	r8
     fd8:	9f 92       	push	r9
     fda:	af 92       	push	r10
     fdc:	bf 92       	push	r11
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	ca 1b       	sub	r28, r26
     ff4:	db 0b       	sbc	r29, r27
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	09 94       	ijmp

00001002 <__epilogue_restores__>:
    1002:	2a 88       	ldd	r2, Y+18	; 0x12
    1004:	39 88       	ldd	r3, Y+17	; 0x11
    1006:	48 88       	ldd	r4, Y+16	; 0x10
    1008:	5f 84       	ldd	r5, Y+15	; 0x0f
    100a:	6e 84       	ldd	r6, Y+14	; 0x0e
    100c:	7d 84       	ldd	r7, Y+13	; 0x0d
    100e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1010:	9b 84       	ldd	r9, Y+11	; 0x0b
    1012:	aa 84       	ldd	r10, Y+10	; 0x0a
    1014:	b9 84       	ldd	r11, Y+9	; 0x09
    1016:	c8 84       	ldd	r12, Y+8	; 0x08
    1018:	df 80       	ldd	r13, Y+7	; 0x07
    101a:	ee 80       	ldd	r14, Y+6	; 0x06
    101c:	fd 80       	ldd	r15, Y+5	; 0x05
    101e:	0c 81       	ldd	r16, Y+4	; 0x04
    1020:	1b 81       	ldd	r17, Y+3	; 0x03
    1022:	aa 81       	ldd	r26, Y+2	; 0x02
    1024:	b9 81       	ldd	r27, Y+1	; 0x01
    1026:	ce 0f       	add	r28, r30
    1028:	d1 1d       	adc	r29, r1
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	ed 01       	movw	r28, r26
    1036:	08 95       	ret

00001038 <_exit>:
    1038:	f8 94       	cli

0000103a <__stop_program>:
    103a:	ff cf       	rjmp	.-2      	; 0x103a <__stop_program>
