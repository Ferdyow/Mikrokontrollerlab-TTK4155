
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ae  00800100  000018c6  0000195a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  008003ae  008003ae  00001c08  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f8  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003440  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000142f  00000000  00000000  0000539c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000112c  00000000  00000000  000067cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000804  00000000  00000000  000078f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000092d  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ab5  00000000  00000000  00008a29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000288  00000000  00000000  0000a4de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 02 02 	jmp	0x404	; 0x404 <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <MENU_run+0x38>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 ec       	ldi	r30, 0xC6	; 198
     37c:	f8 e1       	ldi	r31, 0x18	; 24
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 3a       	cpi	r26, 0xAE	; 174
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	ae ea       	ldi	r26, 0xAE	; 174
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a8 3c       	cpi	r26, 0xC8	; 200
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 a1 06 	call	0xd42	; 0xd42 <main>
     39e:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
     3a6:	30 98       	cbi	0x06, 0	; 6
     3a8:	08 95       	ret

000003aa <ADC_read>:
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3aa:	84 30       	cpi	r24, 0x04	; 4
     3ac:	40 f4       	brcc	.+16     	; 0x3be <ADC_read+0x14>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
     3ae:	8c 5f       	subi	r24, 0xFC	; 252
     3b0:	80 93 00 14 	sts	0x1400, r24
	
	//wait 'til /INTR is low
	while(test_bit(PINE, PINE0));
     3b4:	28 99       	sbic	0x05, 0	; 5
     3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <ADC_read+0xa>
	//reset interrupt
	inter = 0;
	*/

	//return current value
	return *adc; 
     3b8:	80 91 00 14 	lds	r24, 0x1400
     3bc:	08 95       	ret
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3be:	80 e0       	ldi	r24, 0x00	; 0
	inter = 0;
	*/

	//return current value
	return *adc; 
     3c0:	08 95       	ret

000003c2 <CAN_int_vect>:
ISR(INT0_vect){
	CAN_int_vect();
}


void CAN_int_vect() {
     3c2:	cf 93       	push	r28
	uint8_t int_flags = MCP2515_read(MCP_CANINTF);
     3c4:	8c e2       	ldi	r24, 0x2C	; 44
     3c6:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <MCP2515_read>
     3ca:	c8 2f       	mov	r28, r24
	if(int_flags & MCP_RX0IF){
     3cc:	80 ff       	sbrs	r24, 0
     3ce:	0b c0       	rjmp	.+22     	; 0x3e6 <CAN_int_vect+0x24>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	8c e2       	ldi	r24, 0x2C	; 44
     3d6:	0e 94 ac 04 	call	0x958	; 0x958 <MCP2515_bit_modify>
		flag_RX0 = 1;
     3da:	21 e0       	ldi	r18, 0x01	; 1
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	30 93 b1 03 	sts	0x03B1, r19
     3e2:	20 93 b0 03 	sts	0x03B0, r18
	}
			
	if(int_flags & MCP_RX1IF){
     3e6:	c1 ff       	sbrs	r28, 1
     3e8:	0b c0       	rjmp	.+22     	; 0x400 <CAN_int_vect+0x3e>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	8c e2       	ldi	r24, 0x2C	; 44
     3f0:	0e 94 ac 04 	call	0x958	; 0x958 <MCP2515_bit_modify>
		flag_RX1 = 1;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	90 93 af 03 	sts	0x03AF, r25
     3fc:	80 93 ae 03 	sts	0x03AE, r24
	}
			
	
	
}
     400:	cf 91       	pop	r28
     402:	08 95       	ret

00000404 <__vector_1>:

volatile int flag_RX0 = 0;
volatile int flag_RX1 = 0;

//interrupt service routine
ISR(INT0_vect){
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
     40e:	2f 93       	push	r18
     410:	3f 93       	push	r19
     412:	4f 93       	push	r20
     414:	5f 93       	push	r21
     416:	6f 93       	push	r22
     418:	7f 93       	push	r23
     41a:	8f 93       	push	r24
     41c:	9f 93       	push	r25
     41e:	af 93       	push	r26
     420:	bf 93       	push	r27
     422:	ef 93       	push	r30
     424:	ff 93       	push	r31
	CAN_int_vect();
     426:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <CAN_int_vect>
}
     42a:	ff 91       	pop	r31
     42c:	ef 91       	pop	r30
     42e:	bf 91       	pop	r27
     430:	af 91       	pop	r26
     432:	9f 91       	pop	r25
     434:	8f 91       	pop	r24
     436:	7f 91       	pop	r23
     438:	6f 91       	pop	r22
     43a:	5f 91       	pop	r21
     43c:	4f 91       	pop	r20
     43e:	3f 91       	pop	r19
     440:	2f 91       	pop	r18
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <CAN_init>:
//hex to binary is left as an exercise to the reader :)
void CAN_init() {
	
	//enable external interrupt on ATmega162
	//enable interrupt on MCP2515
	MCP2515_init();
     44c:	0e 94 ce 04 	call	0x99c	; 0x99c <MCP2515_init>
	
	//enable rollover: message will rollover to RX1 if RX0 is full
	//also sets filter for RXB0 to only accept all transmission
	MCP2515_bit_modify(MCP_RXB0CTRL, 0x64, 0xFF);  //0b 0010 0100
     450:	4f ef       	ldi	r20, 0xFF	; 255
     452:	64 e6       	ldi	r22, 0x64	; 100
     454:	80 e6       	ldi	r24, 0x60	; 96
     456:	0e 94 ac 04 	call	0x958	; 0x958 <MCP2515_bit_modify>

	
	//set filter for RXB1 to accept all transmission
	MCP2515_bit_modify(MCP_RXB1CTRL, 0x60, 0xFF);
     45a:	4f ef       	ldi	r20, 0xFF	; 255
     45c:	60 e6       	ldi	r22, 0x60	; 96
     45e:	80 e7       	ldi	r24, 0x70	; 112
     460:	0e 94 ac 04 	call	0x958	; 0x958 <MCP2515_bit_modify>
	

	//CANINTE contains the interrupt enable bits for each individual interrupt
	//CANINTF cointains the interrupt flags for each interrupt source. this should be cleared by a bit_modify
	
	MCP2515_bit_modify(MCP_CANINTE,0x03, 0x03);
     464:	43 e0       	ldi	r20, 0x03	; 3
     466:	63 e0       	ldi	r22, 0x03	; 3
     468:	8b e2       	ldi	r24, 0x2B	; 43
     46a:	0e 94 ac 04 	call	0x958	; 0x958 <MCP2515_bit_modify>
	//interrupts for RX1, RX0 enabled
	
	//set loopback mode: 0x40
	//later use normal mode 0x00
	MCP2515_bit_modify(MCP_CANCTRL,0xE0, 0x00);
     46e:	40 e0       	ldi	r20, 0x00	; 0
     470:	60 ee       	ldi	r22, 0xE0	; 224
     472:	8f e0       	ldi	r24, 0x0F	; 15
     474:	0e 94 ac 04 	call	0x958	; 0x958 <MCP2515_bit_modify>
     478:	08 95       	ret

0000047a <CAN_message_send>:
	
	

}

void CAN_message_send(can_message* msg) {
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	ec 01       	movw	r28, r24
	//transmit is done using the TX registers, have to check which transmit_buffer_register we are writing from 
	uint8_t buffer_numb = 0; //Not sure how this logic is done yet


	//transmit the correct ID
	uint8_t id_high = msg->id / 8;
     484:	08 81       	ld	r16, Y
     486:	19 81       	ldd	r17, Y+1	; 0x01
     488:	b8 01       	movw	r22, r16
     48a:	76 95       	lsr	r23
     48c:	67 95       	ror	r22
     48e:	76 95       	lsr	r23
     490:	67 95       	ror	r22
     492:	76 95       	lsr	r23
     494:	67 95       	ror	r22
	uint8_t id_low = msg->id % 8;

	MCP2515_write(MCP_TXB0SIDH + BUFFER_LENGTH * buffer_numb, id_high);
     496:	81 e3       	ldi	r24, 0x31	; 49
     498:	0e 94 8c 04 	call	0x918	; 0x918 <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL + BUFFER_LENGTH * buffer_numb, (id_low << 5));
     49c:	60 2f       	mov	r22, r16
     49e:	62 95       	swap	r22
     4a0:	66 0f       	add	r22, r22
     4a2:	60 7e       	andi	r22, 0xE0	; 224
     4a4:	82 e3       	ldi	r24, 0x32	; 50
     4a6:	0e 94 8c 04 	call	0x918	; 0x918 <MCP2515_write>
	//resten av TXB0SIDL er 0 siden vi har standard identifier

	//transmit the data length
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);
     4aa:	6a 81       	ldd	r22, Y+2	; 0x02
     4ac:	85 e3       	ldi	r24, 0x35	; 53
     4ae:	0e 94 8c 04 	call	0x918	; 0x918 <MCP2515_write>

	//transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	88 23       	and	r24, r24
     4b6:	69 f0       	breq	.+26     	; 0x4d2 <CAN_message_send+0x58>
     4b8:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
     4ba:	fe 01       	movw	r30, r28
     4bc:	e1 0f       	add	r30, r17
     4be:	f1 1d       	adc	r31, r1
     4c0:	63 81       	ldd	r22, Z+3	; 0x03
     4c2:	86 e3       	ldi	r24, 0x36	; 54
     4c4:	81 0f       	add	r24, r17
     4c6:	0e 94 8c 04 	call	0x918	; 0x918 <MCP2515_write>

	//transmit the data length
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);

	//transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     4ca:	1f 5f       	subi	r17, 0xFF	; 255
     4cc:	8a 81       	ldd	r24, Y+2	; 0x02
     4ce:	18 17       	cp	r17, r24
     4d0:	a0 f3       	brcs	.-24     	; 0x4ba <CAN_message_send+0x40>
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
	}
	
	uint8_t buffer_states = (uint8_t)(1 << buffer_numb);
	MCP2515_request_to_send(buffer_states);
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	0e 94 a0 04 	call	0x940	; 0x940 <MCP2515_request_to_send>
	
	
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	08 95       	ret

000004e2 <CAN_transmit_complete>:
	
	
}


bool CAN_transmit_complete(int transmit_buffer_numb) {
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	ec 01       	movw	r28, r24
	const int address = MCP_TXB0CTRL + BUFFER_LENGTH * transmit_buffer_numb;
	
	printf("CANSTAT: 0x%02x\n", MCP2515_read(MCP_CANSTAT));
     4e8:	8e e0       	ldi	r24, 0x0E	; 14
     4ea:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <MCP2515_read>
     4ee:	1f 92       	push	r1
     4f0:	8f 93       	push	r24
     4f2:	27 e7       	ldi	r18, 0x77	; 119
     4f4:	31 e0       	ldi	r19, 0x01	; 1
     4f6:	3f 93       	push	r19
     4f8:	2f 93       	push	r18
     4fa:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
	
}


bool CAN_transmit_complete(int transmit_buffer_numb) {
	const int address = MCP_TXB0CTRL + BUFFER_LENGTH * transmit_buffer_numb;
     4fe:	23 96       	adiw	r28, 0x03	; 3
     500:	c2 95       	swap	r28
     502:	d2 95       	swap	r29
     504:	d0 7f       	andi	r29, 0xF0	; 240
     506:	dc 27       	eor	r29, r28
     508:	c0 7f       	andi	r28, 0xF0	; 240
     50a:	dc 27       	eor	r29, r28
	
	printf("CANSTAT: 0x%02x\n", MCP2515_read(MCP_CANSTAT));
	
	printf("TXB0CTRL: 0x%02x\n", MCP2515_read(address));
     50c:	8c 2f       	mov	r24, r28
     50e:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <MCP2515_read>
     512:	1f 92       	push	r1
     514:	8f 93       	push	r24
     516:	88 e8       	ldi	r24, 0x88	; 136
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	9f 93       	push	r25
     51c:	8f 93       	push	r24
     51e:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
	
	if(MCP2515_read(address) & MCP_TXREQ){
     522:	8c 2f       	mov	r24, r28
     524:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <MCP2515_read>
     528:	83 fb       	bst	r24, 3
     52a:	88 27       	eor	r24, r24
     52c:	80 f9       	bld	r24, 0
     52e:	2d b7       	in	r18, 0x3d	; 61
     530:	3e b7       	in	r19, 0x3e	; 62
     532:	28 5f       	subi	r18, 0xF8	; 248
     534:	3f 4f       	sbci	r19, 0xFF	; 255
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	3e bf       	out	0x3e, r19	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	2d bf       	out	0x3d, r18	; 61
		return false;
	}
	
	return true; 
}
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	89 27       	eor	r24, r25
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	08 95       	ret

0000054a <CAN_data_receive>:


void CAN_data_receive(can_message* received_msg){
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	8c 01       	movw	r16, r24
	int receive_buffer_numb;
	if(flag_RX0){
     55a:	80 91 b0 03 	lds	r24, 0x03B0
     55e:	90 91 b1 03 	lds	r25, 0x03B1
     562:	89 2b       	or	r24, r25
     564:	51 f4       	brne	.+20     	; 0x57a <CAN_data_receive+0x30>
		receive_buffer_numb = 0;
	}
	else if(flag_RX1){
     566:	80 91 ae 03 	lds	r24, 0x03AE
     56a:	90 91 af 03 	lds	r25, 0x03AF
     56e:	89 2b       	or	r24, r25
     570:	09 f4       	brne	.+2      	; 0x574 <CAN_data_receive+0x2a>
     572:	46 c0       	rjmp	.+140    	; 0x600 <CAN_data_receive+0xb6>
		receive_buffer_numb = 1;
     574:	c1 e0       	ldi	r28, 0x01	; 1
     576:	d0 e0       	ldi	r29, 0x00	; 0
     578:	02 c0       	rjmp	.+4      	; 0x57e <CAN_data_receive+0x34>


void CAN_data_receive(can_message* received_msg){
	int receive_buffer_numb;
	if(flag_RX0){
		receive_buffer_numb = 0;
     57a:	c0 e0       	ldi	r28, 0x00	; 0
     57c:	d0 e0       	ldi	r29, 0x00	; 0
		receive_buffer_numb = 1;
	}
	else{
		return;
	}
	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_numb);
     57e:	fc 2e       	mov	r15, r28
     580:	ff 0c       	add	r15, r15
     582:	ff 0c       	add	r15, r15
     584:	ff 0c       	add	r15, r15
     586:	ff 0c       	add	r15, r15
     588:	81 e6       	ldi	r24, 0x61	; 97
     58a:	8f 0d       	add	r24, r15
     58c:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <MCP2515_read>
     590:	e8 2e       	mov	r14, r24
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_numb);
     592:	82 e6       	ldi	r24, 0x62	; 98
     594:	8f 0d       	add	r24, r15
     596:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <MCP2515_read>
	/*
		id_low:	    X XXXX LLL
		id_high: HHHH HHHH
		id:		 HHHH HHHH LLL
	*/
	received_msg->id = (id_high << 3) + id_low; 
     59a:	2e 2d       	mov	r18, r14
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	22 0f       	add	r18, r18
     5a0:	33 1f       	adc	r19, r19
     5a2:	22 0f       	add	r18, r18
     5a4:	33 1f       	adc	r19, r19
     5a6:	22 0f       	add	r18, r18
     5a8:	33 1f       	adc	r19, r19
	}
	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_numb);
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_numb);
	
	//only want the last 3 bits
	id_low = id_low >> 5;
     5aa:	82 95       	swap	r24
     5ac:	86 95       	lsr	r24
     5ae:	87 70       	andi	r24, 0x07	; 7
	/*
		id_low:	    X XXXX LLL
		id_high: HHHH HHHH
		id:		 HHHH HHHH LLL
	*/
	received_msg->id = (id_high << 3) + id_low; 
     5b0:	28 0f       	add	r18, r24
     5b2:	31 1d       	adc	r19, r1
     5b4:	f8 01       	movw	r30, r16
     5b6:	31 83       	std	Z+1, r19	; 0x01
     5b8:	20 83       	st	Z, r18
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_numb) % (1<<3));
     5ba:	85 e6       	ldi	r24, 0x65	; 101
     5bc:	8f 0d       	add	r24, r15
     5be:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <MCP2515_read>
     5c2:	87 70       	andi	r24, 0x07	; 7
     5c4:	f8 01       	movw	r30, r16
     5c6:	82 83       	std	Z+2, r24	; 0x02
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     5c8:	88 23       	and	r24, r24
     5ca:	d1 f0       	breq	.+52     	; 0x600 <CAN_data_receive+0xb6>
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_numb;
     5cc:	7e 01       	movw	r14, r28
     5ce:	ee 0c       	add	r14, r14
     5d0:	ff 1c       	adc	r15, r15
     5d2:	ee 0c       	add	r14, r14
     5d4:	ff 1c       	adc	r15, r15
     5d6:	ee 0c       	add	r14, r14
     5d8:	ff 1c       	adc	r15, r15
     5da:	ee 0c       	add	r14, r14
     5dc:	ff 1c       	adc	r15, r15
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_numb) % (1<<3));
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     5de:	d1 2c       	mov	r13, r1
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_numb;
     5e0:	cd 2d       	mov	r28, r13
     5e2:	d0 e0       	ldi	r29, 0x00	; 0
     5e4:	ce 01       	movw	r24, r28
     5e6:	8a 59       	subi	r24, 0x9A	; 154
     5e8:	9f 4f       	sbci	r25, 0xFF	; 255
		received_msg->data[byte] = MCP2515_read(address);
     5ea:	8e 0d       	add	r24, r14
     5ec:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <MCP2515_read>
     5f0:	c0 0f       	add	r28, r16
     5f2:	d1 1f       	adc	r29, r17
     5f4:	8b 83       	std	Y+3, r24	; 0x03
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_numb) % (1<<3));
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     5f6:	d3 94       	inc	r13
     5f8:	f8 01       	movw	r30, r16
     5fa:	82 81       	ldd	r24, Z+2	; 0x02
     5fc:	d8 16       	cp	r13, r24
     5fe:	80 f3       	brcs	.-32     	; 0x5e0 <CAN_data_receive+0x96>

	
	
	
	
}
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	ef 90       	pop	r14
     60c:	df 90       	pop	r13
     60e:	08 95       	ret

00000610 <CAN_test>:



void CAN_test(){
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	66 97       	sbiw	r28, 0x16	; 22
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
	//TEST IN LOOPBACK MODE
	MCP2515_bit_modify(MCP_CANCTRL, 0xE0, 0x40);
     62a:	40 e4       	ldi	r20, 0x40	; 64
     62c:	60 ee       	ldi	r22, 0xE0	; 224
     62e:	8f e0       	ldi	r24, 0x0F	; 15
     630:	0e 94 ac 04 	call	0x958	; 0x958 <MCP2515_bit_modify>
	printf("\nCANSTAT before: %x\n", MCP2515_read(MCP_CANSTAT));
     634:	8e e0       	ldi	r24, 0x0E	; 14
     636:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <MCP2515_read>
     63a:	1f 92       	push	r1
     63c:	8f 93       	push	r24
     63e:	8a e9       	ldi	r24, 0x9A	; 154
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	9f 93       	push	r25
     644:	8f 93       	push	r24
     646:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
	while(!CAN_transmit_complete(TB0)){}
     64a:	0f 90       	pop	r0
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CAN_transmit_complete>
     65a:	88 23       	and	r24, r24
     65c:	d1 f3       	breq	.-12     	; 0x652 <CAN_test+0x42>
	can_message my_message;
	can_message received_message;
	my_message.id = 150;
     65e:	86 e9       	ldi	r24, 0x96	; 150
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	9a 83       	std	Y+2, r25	; 0x02
     664:	89 83       	std	Y+1, r24	; 0x01
	my_message.length = 3;
     666:	83 e0       	ldi	r24, 0x03	; 3
     668:	8b 83       	std	Y+3, r24	; 0x03
	my_message.data[0] = 0x00;
     66a:	1c 82       	std	Y+4, r1	; 0x04
	my_message.data[1] = 0xFF;
     66c:	8f ef       	ldi	r24, 0xFF	; 255
     66e:	8d 83       	std	Y+5, r24	; 0x05
	my_message.data[2] = 0x55;
     670:	85 e5       	ldi	r24, 0x55	; 85
     672:	8e 83       	std	Y+6, r24	; 0x06
	CAN_message_send(&my_message);
     674:	ce 01       	movw	r24, r28
     676:	01 96       	adiw	r24, 0x01	; 1
     678:	0e 94 3d 02 	call	0x47a	; 0x47a <CAN_message_send>
	printf("Before transmit complete");
     67c:	8f ea       	ldi	r24, 0xAF	; 175
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
	int i = 0;
	while(!CAN_transmit_complete(0)) {
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	0e 94 71 02 	call	0x4e2	; 0x4e2 <CAN_transmit_complete>
		break;
	} //Her sitter den fast i loopback
	printf("After transmit complete");
     690:	88 ec       	ldi	r24, 0xC8	; 200
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	9f 93       	push	r25
     696:	8f 93       	push	r24
     698:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
	CAN_data_receive(&received_message);
     69c:	ce 01       	movw	r24, r28
     69e:	0c 96       	adiw	r24, 0x0c	; 12
     6a0:	0e 94 a5 02 	call	0x54a	; 0x54a <CAN_data_receive>
	printf("\n\nSENT:\nlength: %d\nid: %d\n", my_message.length, my_message.id);
     6a4:	8a 81       	ldd	r24, Y+2	; 0x02
     6a6:	8f 93       	push	r24
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	8f 93       	push	r24
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	1f 92       	push	r1
     6b0:	8f 93       	push	r24
     6b2:	80 ee       	ldi	r24, 0xE0	; 224
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	9f 93       	push	r25
     6b8:	8f 93       	push	r24
     6ba:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
	for (uint8_t byte = 0; byte < my_message.length;byte++){
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	88 23       	and	r24, r24
     6cc:	e1 f0       	breq	.+56     	; 0x706 <CAN_test+0xf6>
     6ce:	f1 2c       	mov	r15, r1
		printf("Data nr. %d: %x\n", byte, my_message.data[byte]);
     6d0:	0b ef       	ldi	r16, 0xFB	; 251
     6d2:	11 e0       	ldi	r17, 0x01	; 1
     6d4:	e4 e0       	ldi	r30, 0x04	; 4
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	ec 0f       	add	r30, r28
     6da:	fd 1f       	adc	r31, r29
     6dc:	ef 0d       	add	r30, r15
     6de:	f1 1d       	adc	r31, r1
     6e0:	80 81       	ld	r24, Z
     6e2:	1f 92       	push	r1
     6e4:	8f 93       	push	r24
     6e6:	1f 92       	push	r1
     6e8:	ff 92       	push	r15
     6ea:	1f 93       	push	r17
     6ec:	0f 93       	push	r16
     6ee:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
		break;
	} //Her sitter den fast i loopback
	printf("After transmit complete");
	CAN_data_receive(&received_message);
	printf("\n\nSENT:\nlength: %d\nid: %d\n", my_message.length, my_message.id);
	for (uint8_t byte = 0; byte < my_message.length;byte++){
     6f2:	f3 94       	inc	r15
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	8b 81       	ldd	r24, Y+3	; 0x03
     702:	f8 16       	cp	r15, r24
     704:	38 f3       	brcs	.-50     	; 0x6d4 <CAN_test+0xc4>
		printf("Data nr. %d: %x\n", byte, my_message.data[byte]);
	}
	
	
	printf("\n\nRECEIVED:\n\nlength: %d\nid: %d\n", received_message.length, received_message.id);
     706:	8d 85       	ldd	r24, Y+13	; 0x0d
     708:	8f 93       	push	r24
     70a:	8c 85       	ldd	r24, Y+12	; 0x0c
     70c:	8f 93       	push	r24
     70e:	8e 85       	ldd	r24, Y+14	; 0x0e
     710:	1f 92       	push	r1
     712:	8f 93       	push	r24
     714:	8c e0       	ldi	r24, 0x0C	; 12
     716:	92 e0       	ldi	r25, 0x02	; 2
     718:	9f 93       	push	r25
     71a:	8f 93       	push	r24
     71c:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
	for (uint8_t byte = 0; byte < received_message.length;byte++){
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	8e 85       	ldd	r24, Y+14	; 0x0e
     72e:	88 23       	and	r24, r24
     730:	e1 f0       	breq	.+56     	; 0x76a <CAN_test+0x15a>
     732:	f1 2c       	mov	r15, r1
		printf("Data nr. %d: %x\n", byte, received_message.data[byte]);
     734:	0b ef       	ldi	r16, 0xFB	; 251
     736:	11 e0       	ldi	r17, 0x01	; 1
     738:	ef e0       	ldi	r30, 0x0F	; 15
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	ec 0f       	add	r30, r28
     73e:	fd 1f       	adc	r31, r29
     740:	ef 0d       	add	r30, r15
     742:	f1 1d       	adc	r31, r1
     744:	80 81       	ld	r24, Z
     746:	1f 92       	push	r1
     748:	8f 93       	push	r24
     74a:	1f 92       	push	r1
     74c:	ff 92       	push	r15
     74e:	1f 93       	push	r17
     750:	0f 93       	push	r16
     752:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
		printf("Data nr. %d: %x\n", byte, my_message.data[byte]);
	}
	
	
	printf("\n\nRECEIVED:\n\nlength: %d\nid: %d\n", received_message.length, received_message.id);
	for (uint8_t byte = 0; byte < received_message.length;byte++){
     756:	f3 94       	inc	r15
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	8e 85       	ldd	r24, Y+14	; 0x0e
     766:	f8 16       	cp	r15, r24
     768:	38 f3       	brcs	.-50     	; 0x738 <CAN_test+0x128>
		printf("Data nr. %d: %x\n", byte, received_message.data[byte]);
	}
	MCP2515_bit_modify(MCP_CANCTRL,0xE0, 0x00);
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	60 ee       	ldi	r22, 0xE0	; 224
     76e:	8f e0       	ldi	r24, 0x0F	; 15
     770:	0e 94 ac 04 	call	0x958	; 0x958 <MCP2515_bit_modify>

	
	
	printf("ERROR FLAGS: %x\n", MCP2515_read(MCP_EFLG));
     774:	8d e2       	ldi	r24, 0x2D	; 45
     776:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <MCP2515_read>
     77a:	1f 92       	push	r1
     77c:	8f 93       	push	r24
     77e:	0c e2       	ldi	r16, 0x2C	; 44
     780:	12 e0       	ldi	r17, 0x02	; 2
     782:	1f 93       	push	r17
     784:	0f 93       	push	r16
     786:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>

	CAN_message_send(&my_message);
     78a:	ce 01       	movw	r24, r28
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	0e 94 3d 02 	call	0x47a	; 0x47a <CAN_message_send>
		
	printf("\nCANSTAT after: %x\n", MCP2515_read(MCP_CANSTAT));
     792:	8e e0       	ldi	r24, 0x0E	; 14
     794:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <MCP2515_read>
     798:	1f 92       	push	r1
     79a:	8f 93       	push	r24
     79c:	8d e3       	ldi	r24, 0x3D	; 61
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	9f 93       	push	r25
     7a2:	8f 93       	push	r24
     7a4:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
	printf("TXCTRL: %x\n", MCP2515_read(MCP_TXB0CTRL));
     7a8:	80 e3       	ldi	r24, 0x30	; 48
     7aa:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <MCP2515_read>
     7ae:	1f 92       	push	r1
     7b0:	8f 93       	push	r24
     7b2:	81 e5       	ldi	r24, 0x51	; 81
     7b4:	92 e0       	ldi	r25, 0x02	; 2
     7b6:	9f 93       	push	r25
     7b8:	8f 93       	push	r24
     7ba:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
	printf("ERROR FLAGS: %x\n", MCP2515_read(MCP_EFLG));
     7be:	8d e2       	ldi	r24, 0x2D	; 45
     7c0:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <MCP2515_read>
     7c4:	1f 92       	push	r1
     7c6:	8f 93       	push	r24
     7c8:	1f 93       	push	r17
     7ca:	0f 93       	push	r16
     7cc:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7d0:	9f ef       	ldi	r25, 0xFF	; 255
     7d2:	2f e7       	ldi	r18, 0x7F	; 127
     7d4:	87 e0       	ldi	r24, 0x07	; 7
     7d6:	91 50       	subi	r25, 0x01	; 1
     7d8:	20 40       	sbci	r18, 0x00	; 0
     7da:	80 40       	sbci	r24, 0x00	; 0
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <CAN_test+0x1c6>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <CAN_test+0x1d0>
     7e0:	00 00       	nop
     7e2:	0f b6       	in	r0, 0x3f	; 63
     7e4:	f8 94       	cli
     7e6:	de bf       	out	0x3e, r29	; 62
     7e8:	0f be       	out	0x3f, r0	; 63
     7ea:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(500);

	
	
	/*CAN_error();*/
     7ec:	66 96       	adiw	r28, 0x16	; 22
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	08 95       	ret

00000804 <JOY_button_pressed>:
	mid.x = (max.x + min.x) / 2;
	mid.y = (max.y + min.y) / 2;
}

bool JOY_button_pressed(button b) {
	switch (b) {
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	39 f0       	breq	.+14     	; 0x816 <JOY_button_pressed+0x12>
     808:	18 f0       	brcs	.+6      	; 0x810 <JOY_button_pressed+0xc>
     80a:	82 30       	cpi	r24, 0x02	; 2
     80c:	41 f0       	breq	.+16     	; 0x81e <JOY_button_pressed+0x1a>
     80e:	0e c0       	rjmp	.+28     	; 0x82c <JOY_button_pressed+0x28>
	case 0:
		if (test_bit(PINB, PINB0)) return true;
     810:	86 b3       	in	r24, 0x16	; 22
     812:	81 70       	andi	r24, 0x01	; 1
     814:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return true;
     816:	86 b3       	in	r24, 0x16	; 22
     818:	86 95       	lsr	r24
     81a:	81 70       	andi	r24, 0x01	; 1
     81c:	08 95       	ret
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return true;
     81e:	86 b3       	in	r24, 0x16	; 22
     820:	82 fb       	bst	r24, 2
     822:	88 27       	eor	r24, r24
     824:	80 f9       	bld	r24, 0
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	89 27       	eor	r24, r25
     82a:	08 95       	ret
		break;
	}
	return false;
     82c:	80 e0       	ldi	r24, 0x00	; 0
}
     82e:	08 95       	ret

00000830 <JOY_getPosition>:

JOY_position_t JOY_getPosition() {
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
	JOY_position_t JOY_position;
	JOY_position.x = (100 * (ADC_read(X_COORD) - mid.x)) / rad.x;
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     83c:	28 2f       	mov	r18, r24
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	80 91 b8 03 	lds	r24, 0x03B8
     844:	28 1b       	sub	r18, r24
     846:	31 09       	sbc	r19, r1
     848:	14 e6       	ldi	r17, 0x64	; 100
     84a:	12 9f       	mul	r17, r18
     84c:	c0 01       	movw	r24, r0
     84e:	13 9f       	mul	r17, r19
     850:	90 0d       	add	r25, r0
     852:	11 24       	eor	r1, r1
     854:	60 91 b4 03 	lds	r22, 0x03B4
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	0e 94 a2 07 	call	0xf44	; 0xf44 <__divmodhi4>
     85e:	eb 01       	movw	r28, r22
	JOY_position.y = (100 * (ADC_read(Y_COORD) - mid.y)) / rad.y;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ADC_read>
     866:	28 2f       	mov	r18, r24
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	80 91 b9 03 	lds	r24, 0x03B9
     86e:	28 1b       	sub	r18, r24
     870:	31 09       	sbc	r19, r1
     872:	12 9f       	mul	r17, r18
     874:	c0 01       	movw	r24, r0
     876:	13 9f       	mul	r17, r19
     878:	90 0d       	add	r25, r0
     87a:	11 24       	eor	r1, r1
     87c:	60 91 b5 03 	lds	r22, 0x03B5
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	0e 94 a2 07 	call	0xf44	; 0xf44 <__divmodhi4>
     886:	9b 01       	movw	r18, r22
	return JOY_position;
     888:	be 01       	movw	r22, r28
     88a:	c9 01       	movw	r24, r18
}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	08 95       	ret

00000894 <JOY_getDirection>:

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
     894:	0e 94 18 04 	call	0x830	; 0x830 <JOY_getPosition>
     898:	fb 01       	movw	r30, r22
     89a:	ac 01       	movw	r20, r24
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     89c:	9b 01       	movw	r18, r22
     89e:	2c 5f       	subi	r18, 0xFC	; 252
     8a0:	3f 4f       	sbci	r19, 0xFF	; 255
     8a2:	29 30       	cpi	r18, 0x09	; 9
     8a4:	31 05       	cpc	r19, r1
     8a6:	30 f4       	brcc	.+12     	; 0x8b4 <JOY_getDirection+0x20>
     8a8:	9c 01       	movw	r18, r24
     8aa:	2c 5f       	subi	r18, 0xFC	; 252
     8ac:	3f 4f       	sbci	r19, 0xFF	; 255
     8ae:	29 30       	cpi	r18, 0x09	; 9
     8b0:	31 05       	cpc	r19, r1
     8b2:	e0 f0       	brcs	.+56     	; 0x8ec <JOY_getDirection+0x58>

	// The x-coordinate is dominating
	else if (abs(position.x) > abs(position.y)) {
     8b4:	db 01       	movw	r26, r22
     8b6:	ff 23       	and	r31, r31
     8b8:	24 f4       	brge	.+8      	; 0x8c2 <JOY_getDirection+0x2e>
     8ba:	aa 27       	eor	r26, r26
     8bc:	bb 27       	eor	r27, r27
     8be:	a6 1b       	sub	r26, r22
     8c0:	b7 0b       	sbc	r27, r23
     8c2:	9c 01       	movw	r18, r24
     8c4:	55 23       	and	r21, r21
     8c6:	24 f4       	brge	.+8      	; 0x8d0 <JOY_getDirection+0x3c>
     8c8:	22 27       	eor	r18, r18
     8ca:	33 27       	eor	r19, r19
     8cc:	28 1b       	sub	r18, r24
     8ce:	39 0b       	sbc	r19, r25
     8d0:	2a 17       	cp	r18, r26
     8d2:	3b 07       	cpc	r19, r27
     8d4:	34 f4       	brge	.+12     	; 0x8e2 <JOY_getDirection+0x4e>
		// Positive x => RIGHT
		if (position.x > 0) return RIGHT;
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	1e 16       	cp	r1, r30
     8da:	1f 06       	cpc	r1, r31
     8dc:	54 f0       	brlt	.+20     	; 0x8f2 <JOY_getDirection+0x5e>
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	08 95       	ret
		else return LEFT;

	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
     8e2:	14 16       	cp	r1, r20
     8e4:	15 06       	cpc	r1, r21
     8e6:	24 f4       	brge	.+8      	; 0x8f0 <JOY_getDirection+0x5c>
     8e8:	82 e0       	ldi	r24, 0x02	; 2
     8ea:	08 95       	ret

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     8ec:	84 e0       	ldi	r24, 0x04	; 4
     8ee:	08 95       	ret
	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
		// Negative y => DOWN
		else return DOWN;
     8f0:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     8f2:	08 95       	ret

000008f4 <MCP2515_read>:
	}
	
	return 0;
}

char MCP2515_read(char address) {
     8f4:	cf 93       	push	r28
     8f6:	c8 2f       	mov	r28, r24
	SPI_select();
     8f8:	0e 94 7c 07 	call	0xef8	; 0xef8 <SPI_select>
	SPI_send(READ);
     8fc:	83 e0       	ldi	r24, 0x03	; 3
     8fe:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send>
	SPI_send(address);
     902:	8c 2f       	mov	r24, r28
     904:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send>
	char data = SPI_read();
     908:	0e 94 75 07 	call	0xeea	; 0xeea <SPI_read>
     90c:	c8 2f       	mov	r28, r24
	SPI_deselect();
     90e:	0e 94 7e 07 	call	0xefc	; 0xefc <SPI_deselect>
	return data;
	
	
}
     912:	8c 2f       	mov	r24, r28
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <MCP2515_write>:

void MCP2515_write(char address, char data) {
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	d8 2f       	mov	r29, r24
     91e:	c6 2f       	mov	r28, r22
	SPI_select();
     920:	0e 94 7c 07 	call	0xef8	; 0xef8 <SPI_select>
	SPI_send(WRITE);
     924:	82 e0       	ldi	r24, 0x02	; 2
     926:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send>
	SPI_send(address);
     92a:	8d 2f       	mov	r24, r29
     92c:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send>
	SPI_send(data);
     930:	8c 2f       	mov	r24, r28
     932:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send>
	SPI_deselect();
     936:	0e 94 7e 07 	call	0xefc	; 0xefc <SPI_deselect>
}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	08 95       	ret

00000940 <MCP2515_request_to_send>:

//Buffer states: three bit, setting a 1 on the buffer initiates transmitting from it 
void MCP2515_request_to_send(uint8_t buffer_states) {
     940:	cf 93       	push	r28
     942:	c8 2f       	mov	r28, r24
	SPI_select();
     944:	0e 94 7c 07 	call	0xef8	; 0xef8 <SPI_select>
	SPI_send(RTS_BASE+buffer_states);
     948:	80 e8       	ldi	r24, 0x80	; 128
     94a:	8c 0f       	add	r24, r28
     94c:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send>
	SPI_deselect();
     950:	0e 94 7e 07 	call	0xefc	; 0xefc <SPI_deselect>
}
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <MCP2515_bit_modify>:

//puts new_data in the selected reg_adress. the function assumes that you are allowed to change every bit in the register
void MCP2515_bit_modify(char reg_address, char masked_bits, char new_data) {
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	18 2f       	mov	r17, r24
     960:	d6 2f       	mov	r29, r22
     962:	c4 2f       	mov	r28, r20
	SPI_select();
     964:	0e 94 7c 07 	call	0xef8	; 0xef8 <SPI_select>
	SPI_send(BIT_MODIFY);
     968:	85 e0       	ldi	r24, 0x05	; 5
     96a:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send>
	SPI_send(reg_address);
     96e:	81 2f       	mov	r24, r17
     970:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send>
	SPI_send(masked_bits);
     974:	8d 2f       	mov	r24, r29
     976:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send>
	SPI_send(new_data);
     97a:	8c 2f       	mov	r24, r28
     97c:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send>
	SPI_deselect();
     980:	0e 94 7e 07 	call	0xefc	; 0xefc <SPI_deselect>
}
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	1f 91       	pop	r17
     98a:	08 95       	ret

0000098c <MCP2515_reset>:

void MCP2515_reset() {
	SPI_select();
     98c:	0e 94 7c 07 	call	0xef8	; 0xef8 <SPI_select>
	SPI_send(RESET);
     990:	80 ec       	ldi	r24, 0xC0	; 192
     992:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send>
	SPI_deselect();
     996:	0e 94 7e 07 	call	0xefc	; 0xefc <SPI_deselect>
     99a:	08 95       	ret

0000099c <MCP2515_init>:
#define BIT_MODIFY 0x05
#define RTS_BASE 0x80


uint8_t MCP2515_init() {
	SPI_init();
     99c:	0e 94 5f 07 	call	0xebe	; 0xebe <SPI_init>
	MCP2515_reset();
     9a0:	0e 94 c6 04 	call	0x98c	; 0x98c <MCP2515_reset>
	//check bit 7-5 of MCP_CANSTAT which signify the operation mode
	const uint8_t device_mode = MCP2515_read(MCP_CANSTAT) & MODE_MASK;
     9a4:	8e e0       	ldi	r24, 0x0E	; 14
     9a6:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <MCP2515_read>
     9aa:	80 7e       	andi	r24, 0xE0	; 224
	if (device_mode != MODE_CONFIG) {
     9ac:	80 38       	cpi	r24, 0x80	; 128
     9ae:	31 f0       	breq	.+12     	; 0x9bc <MCP2515_init+0x20>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
     9b0:	8d e5       	ldi	r24, 0x5D	; 93
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	0e 94 62 09 	call	0x12c4	; 0x12c4 <puts>
		return 1;
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	08 95       	ret
	}
	
	return 0;
     9bc:	80 e0       	ldi	r24, 0x00	; 0
}
     9be:	08 95       	ret

000009c0 <test_function>:
volatile menu_entry* current_entry;
volatile menu_entry* selected_entry;


void test_function() {
	printf("\n\nHighscore clicked!\n\n");
     9c0:	8f e8       	ldi	r24, 0x8F	; 143
     9c2:	92 e0       	ldi	r25, 0x02	; 2
     9c4:	0e 94 62 09 	call	0x12c4	; 0x12c4 <puts>
     9c8:	08 95       	ret

000009ca <MENU_draw_current_menu>:
	current_entry = current_entry->parent_node;
	selected_entry = current_entry->child_node;
	MENU_draw_current_menu();
}

void MENU_draw_current_menu() {
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
	OLED_reset();
     9d8:	0e 94 0b 07 	call	0xe16	; 0xe16 <OLED_reset>
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
     9dc:	e0 91 bc 03 	lds	r30, 0x03BC
     9e0:	f0 91 bd 03 	lds	r31, 0x03BD
     9e4:	c4 81       	ldd	r28, Z+4	; 0x04
     9e6:	d5 81       	ldd	r29, Z+5	; 0x05
	
	while( temp_node != NULL){
     9e8:	20 97       	sbiw	r28, 0x00	; 0
     9ea:	61 f1       	breq	.+88     	; 0xa44 <MENU_draw_current_menu+0x7a>
     9ec:	d1 2c       	mov	r13, r1
		OLED_pos(output_row++, 0);
		if (temp_node == selected_entry) {
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
     9ee:	0f 2e       	mov	r0, r31
     9f0:	f5 ea       	ldi	r31, 0xA5	; 165
     9f2:	ef 2e       	mov	r14, r31
     9f4:	f2 e0       	ldi	r31, 0x02	; 2
     9f6:	ff 2e       	mov	r15, r31
     9f8:	f0 2d       	mov	r31, r0
     9fa:	06 e0       	ldi	r16, 0x06	; 6
     9fc:	11 e0       	ldi	r17, 0x01	; 1
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
		OLED_pos(output_row++, 0);
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	8d 2d       	mov	r24, r13
     a02:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <OLED_pos>
		if (temp_node == selected_entry) {
     a06:	20 91 ba 03 	lds	r18, 0x03BA
     a0a:	30 91 bb 03 	lds	r19, 0x03BB
     a0e:	c2 17       	cp	r28, r18
     a10:	d3 07       	cpc	r29, r19
     a12:	11 f4       	brne	.+4      	; 0xa18 <MENU_draw_current_menu+0x4e>
			OLED_print_arrow();
     a14:	0e 94 42 07 	call	0xe84	; 0xe84 <OLED_print_arrow>
		}
		fprintf(OLED, " %s", temp_node->name);
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	8f 93       	push	r24
     a1c:	88 81       	ld	r24, Y
     a1e:	8f 93       	push	r24
     a20:	ff 92       	push	r15
     a22:	ef 92       	push	r14
     a24:	1f 93       	push	r17
     a26:	0f 93       	push	r16
     a28:	0e 94 3c 09 	call	0x1278	; 0x1278 <fprintf>
		temp_node = temp_node -> next_sibling_node;
     a2c:	0e 80       	ldd	r0, Y+6	; 0x06
     a2e:	df 81       	ldd	r29, Y+7	; 0x07
     a30:	c0 2d       	mov	r28, r0
     a32:	d3 94       	inc	r13
	OLED_reset();
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	20 97       	sbiw	r28, 0x00	; 0
     a42:	e9 f6       	brne	.-70     	; 0x9fe <MENU_draw_current_menu+0x34>
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	08 95       	ret

00000a54 <MENU_select_next>:
	MENU_draw_current_menu();
}


void MENU_select_next() {
	if (selected_entry -> next_sibling_node != NULL) {
     a54:	e0 91 ba 03 	lds	r30, 0x03BA
     a58:	f0 91 bb 03 	lds	r31, 0x03BB
     a5c:	86 81       	ldd	r24, Z+6	; 0x06
     a5e:	97 81       	ldd	r25, Z+7	; 0x07
     a60:	89 2b       	or	r24, r25
     a62:	41 f0       	breq	.+16     	; 0xa74 <MENU_select_next+0x20>
		selected_entry = selected_entry -> next_sibling_node;
     a64:	86 81       	ldd	r24, Z+6	; 0x06
     a66:	97 81       	ldd	r25, Z+7	; 0x07
     a68:	90 93 bb 03 	sts	0x03BB, r25
     a6c:	80 93 ba 03 	sts	0x03BA, r24
		MENU_draw_current_menu();
     a70:	0e 94 e5 04 	call	0x9ca	; 0x9ca <MENU_draw_current_menu>
     a74:	08 95       	ret

00000a76 <MENU_select_prev>:
	}
}

void MENU_select_prev() {
	if (selected_entry -> prev_sibling_node != NULL) {
     a76:	e0 91 ba 03 	lds	r30, 0x03BA
     a7a:	f0 91 bb 03 	lds	r31, 0x03BB
     a7e:	80 85       	ldd	r24, Z+8	; 0x08
     a80:	91 85       	ldd	r25, Z+9	; 0x09
     a82:	89 2b       	or	r24, r25
     a84:	41 f0       	breq	.+16     	; 0xa96 <MENU_select_prev+0x20>
		selected_entry = selected_entry -> prev_sibling_node;
     a86:	80 85       	ldd	r24, Z+8	; 0x08
     a88:	91 85       	ldd	r25, Z+9	; 0x09
     a8a:	90 93 bb 03 	sts	0x03BB, r25
     a8e:	80 93 ba 03 	sts	0x03BA, r24
		MENU_draw_current_menu();
     a92:	0e 94 e5 04 	call	0x9ca	; 0x9ca <MENU_draw_current_menu>
     a96:	08 95       	ret

00000a98 <MENU_enter_selection>:
	}
}

void MENU_enter_selection() {
	if (selected_entry->function_ptr != NULL) {
     a98:	e0 91 ba 03 	lds	r30, 0x03BA
     a9c:	f0 91 bb 03 	lds	r31, 0x03BB
     aa0:	82 85       	ldd	r24, Z+10	; 0x0a
     aa2:	93 85       	ldd	r25, Z+11	; 0x0b
     aa4:	89 2b       	or	r24, r25
     aa6:	21 f0       	breq	.+8      	; 0xab0 <MENU_enter_selection+0x18>
		selected_entry->function_ptr();
     aa8:	02 84       	ldd	r0, Z+10	; 0x0a
     aaa:	f3 85       	ldd	r31, Z+11	; 0x0b
     aac:	e0 2d       	mov	r30, r0
     aae:	09 95       	icall
	}
	
	if (selected_entry->child_node == NULL) return;
     ab0:	e0 91 ba 03 	lds	r30, 0x03BA
     ab4:	f0 91 bb 03 	lds	r31, 0x03BB
     ab8:	84 81       	ldd	r24, Z+4	; 0x04
     aba:	95 81       	ldd	r25, Z+5	; 0x05
     abc:	89 2b       	or	r24, r25
     abe:	61 f0       	breq	.+24     	; 0xad8 <MENU_enter_selection+0x40>
	
	current_entry = selected_entry;
     ac0:	f0 93 bd 03 	sts	0x03BD, r31
     ac4:	e0 93 bc 03 	sts	0x03BC, r30
	selected_entry = current_entry->child_node;
     ac8:	84 81       	ldd	r24, Z+4	; 0x04
     aca:	95 81       	ldd	r25, Z+5	; 0x05
     acc:	90 93 bb 03 	sts	0x03BB, r25
     ad0:	80 93 ba 03 	sts	0x03BA, r24
	MENU_draw_current_menu();
     ad4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <MENU_draw_current_menu>
     ad8:	08 95       	ret

00000ada <MENU_go_back>:
}

void MENU_go_back() {
	if (current_entry->parent_node == NULL) return;
     ada:	e0 91 bc 03 	lds	r30, 0x03BC
     ade:	f0 91 bd 03 	lds	r31, 0x03BD
     ae2:	82 81       	ldd	r24, Z+2	; 0x02
     ae4:	93 81       	ldd	r25, Z+3	; 0x03
     ae6:	89 2b       	or	r24, r25
     ae8:	79 f0       	breq	.+30     	; 0xb08 <MENU_go_back+0x2e>
	
	current_entry = current_entry->parent_node;
     aea:	02 80       	ldd	r0, Z+2	; 0x02
     aec:	f3 81       	ldd	r31, Z+3	; 0x03
     aee:	e0 2d       	mov	r30, r0
     af0:	f0 93 bd 03 	sts	0x03BD, r31
     af4:	e0 93 bc 03 	sts	0x03BC, r30
	selected_entry = current_entry->child_node;
     af8:	84 81       	ldd	r24, Z+4	; 0x04
     afa:	95 81       	ldd	r25, Z+5	; 0x05
     afc:	90 93 bb 03 	sts	0x03BB, r25
     b00:	80 93 ba 03 	sts	0x03BA, r24
	MENU_draw_current_menu();
     b04:	0e 94 e5 04 	call	0x9ca	; 0x9ca <MENU_draw_current_menu>
     b08:	08 95       	ret

00000b0a <MENU_run>:
	_delay_ms(delay);
	MENU_select_prev();
}


void MENU_run() {
     b0a:	cf 93       	push	r28
	bool change = false;
	if (JOY_getDirection() == DOWN) {
     b0c:	0e 94 4a 04 	call	0x894	; 0x894 <JOY_getDirection>
     b10:	83 30       	cpi	r24, 0x03	; 3
     b12:	21 f4       	brne	.+8      	; 0xb1c <MENU_run+0x12>
		MENU_select_next();
     b14:	0e 94 2a 05 	call	0xa54	; 0xa54 <MENU_select_next>
		change = true;
     b18:	c1 e0       	ldi	r28, 0x01	; 1
     b1a:	09 c0       	rjmp	.+18     	; 0xb2e <MENU_run+0x24>
		} else if (JOY_getDirection() == UP) {
     b1c:	0e 94 4a 04 	call	0x894	; 0x894 <JOY_getDirection>
     b20:	82 30       	cpi	r24, 0x02	; 2
     b22:	21 f4       	brne	.+8      	; 0xb2c <MENU_run+0x22>
		MENU_select_prev();
     b24:	0e 94 3b 05 	call	0xa76	; 0xa76 <MENU_select_prev>
		change = true;
     b28:	c1 e0       	ldi	r28, 0x01	; 1
     b2a:	01 c0       	rjmp	.+2      	; 0xb2e <MENU_run+0x24>
	MENU_select_prev();
}


void MENU_run() {
	bool change = false;
     b2c:	c0 e0       	ldi	r28, 0x00	; 0
		} else if (JOY_getDirection() == UP) {
		MENU_select_prev();
		change = true;
	}
	
	if (JOY_button_pressed(JOY_BUTTON)) {
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	0e 94 02 04 	call	0x804	; 0x804 <JOY_button_pressed>
     b34:	88 23       	and	r24, r24
     b36:	19 f0       	breq	.+6      	; 0xb3e <MENU_run+0x34>
		MENU_enter_selection();
     b38:	0e 94 4c 05 	call	0xa98	; 0xa98 <MENU_enter_selection>
     b3c:	0a c0       	rjmp	.+20     	; 0xb52 <MENU_run+0x48>
		change = true;
	}
	
	else if (JOY_button_pressed(LEFT_BUTTON)) {
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	0e 94 02 04 	call	0x804	; 0x804 <JOY_button_pressed>
     b44:	88 23       	and	r24, r24
     b46:	19 f0       	breq	.+6      	; 0xb4e <MENU_run+0x44>
		MENU_go_back();
     b48:	0e 94 6d 05 	call	0xada	; 0xada <MENU_go_back>
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <MENU_run+0x48>
		change = true;
	}
	
	// Make sure the selection doesn't move multiple places at once.
	if (change){
     b4e:	cc 23       	and	r28, r28
     b50:	49 f0       	breq	.+18     	; 0xb64 <MENU_run+0x5a>
     b52:	22 e3       	ldi	r18, 0x32	; 50
     b54:	83 ed       	ldi	r24, 0xD3	; 211
     b56:	93 e0       	ldi	r25, 0x03	; 3
     b58:	21 50       	subi	r18, 0x01	; 1
     b5a:	80 40       	sbci	r24, 0x00	; 0
     b5c:	90 40       	sbci	r25, 0x00	; 0
     b5e:	e1 f7       	brne	.-8      	; 0xb58 <MENU_run+0x4e>
     b60:	00 c0       	rjmp	.+0      	; 0xb62 <MENU_run+0x58>
     b62:	00 c0       	rjmp	.+0      	; 0xb64 <MENU_run+0x5a>
		_delay_ms(255);
		change = false;
	}
}
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <add_entry>:



menu_entry* add_entry(menu_entry* parent_node, char* name, void* function_ptr){
     b68:	cf 92       	push	r12
     b6a:	df 92       	push	r13
     b6c:	ef 92       	push	r14
     b6e:	ff 92       	push	r15
     b70:	0f 93       	push	r16
     b72:	1f 93       	push	r17
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	8c 01       	movw	r16, r24
     b7a:	6b 01       	movw	r12, r22
     b7c:	ea 01       	movw	r28, r20
	
	// Create the new node
	menu_entry* new_entry = (menu_entry*) malloc(sizeof(menu_entry));
     b7e:	8c e0       	ldi	r24, 0x0C	; 12
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 ca 07 	call	0xf94	; 0xf94 <malloc>
     b86:	7c 01       	movw	r14, r24
	new_entry->name = name;
     b88:	fc 01       	movw	r30, r24
     b8a:	d1 82       	std	Z+1, r13	; 0x01
     b8c:	c0 82       	st	Z, r12
	new_entry->parent_node = parent_node;
     b8e:	13 83       	std	Z+3, r17	; 0x03
     b90:	02 83       	std	Z+2, r16	; 0x02
	new_entry->child_node = NULL;  // A new node has no children
     b92:	15 82       	std	Z+5, r1	; 0x05
     b94:	14 82       	std	Z+4, r1	; 0x04
	new_entry->next_sibling_node = NULL;  // The new child is the last child
     b96:	17 82       	std	Z+7, r1	; 0x07
     b98:	16 82       	std	Z+6, r1	; 0x06
	new_entry->prev_sibling_node = NULL;
     b9a:	11 86       	std	Z+9, r1	; 0x09
     b9c:	10 86       	std	Z+8, r1	; 0x08
	new_entry->function_ptr = function_ptr;
     b9e:	d3 87       	std	Z+11, r29	; 0x0b
     ba0:	c2 87       	std	Z+10, r28	; 0x0a
	
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_entry;
     ba2:	01 15       	cp	r16, r1
     ba4:	11 05       	cpc	r17, r1
     ba6:	41 f1       	breq	.+80     	; 0xbf8 <add_entry+0x90>
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
     ba8:	f8 01       	movw	r30, r16
     baa:	c4 81       	ldd	r28, Z+4	; 0x04
     bac:	d5 81       	ldd	r29, Z+5	; 0x05
     bae:	20 97       	sbiw	r28, 0x00	; 0
     bb0:	29 f0       	breq	.+10     	; 0xbbc <add_entry+0x54>
	else {
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
     bb2:	ee 81       	ldd	r30, Y+6	; 0x06
     bb4:	ff 81       	ldd	r31, Y+7	; 0x07
     bb6:	30 97       	sbiw	r30, 0x00	; 0
     bb8:	29 f4       	brne	.+10     	; 0xbc4 <add_entry+0x5c>
     bba:	19 c0       	rjmp	.+50     	; 0xbee <add_entry+0x86>
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_entry;
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
		parent_node->child_node = new_entry;
     bbc:	f8 01       	movw	r30, r16
     bbe:	95 83       	std	Z+5, r25	; 0x05
     bc0:	84 83       	std	Z+4, r24	; 0x04
     bc2:	1a c0       	rjmp	.+52     	; 0xbf8 <add_entry+0x90>
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
			printf("temp_node->next_sibling_node->name: %s\n", temp_node->next_sibling_node->name);
     bc4:	09 ea       	ldi	r16, 0xA9	; 169
     bc6:	12 e0       	ldi	r17, 0x02	; 2
     bc8:	81 81       	ldd	r24, Z+1	; 0x01
     bca:	8f 93       	push	r24
     bcc:	80 81       	ld	r24, Z
     bce:	8f 93       	push	r24
     bd0:	1f 93       	push	r17
     bd2:	0f 93       	push	r16
     bd4:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
			temp_node = temp_node->next_sibling_node;
     bd8:	0e 80       	ldd	r0, Y+6	; 0x06
     bda:	df 81       	ldd	r29, Y+7	; 0x07
     bdc:	c0 2d       	mov	r28, r0
	else {
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
     bde:	ee 81       	ldd	r30, Y+6	; 0x06
     be0:	ff 81       	ldd	r31, Y+7	; 0x07
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	30 97       	sbiw	r30, 0x00	; 0
     bec:	69 f7       	brne	.-38     	; 0xbc8 <add_entry+0x60>
			printf("temp_node->next_sibling_node->name: %s\n", temp_node->next_sibling_node->name);
			temp_node = temp_node->next_sibling_node;
		}
		
		// Bind the new node to the current last child to become the new last child.
		temp_node->next_sibling_node = new_entry;
     bee:	ff 82       	std	Y+7, r15	; 0x07
     bf0:	ee 82       	std	Y+6, r14	; 0x06
		new_entry->prev_sibling_node = temp_node;
     bf2:	f7 01       	movw	r30, r14
     bf4:	d1 87       	std	Z+9, r29	; 0x09
     bf6:	c0 87       	std	Z+8, r28	; 0x08
	}
	
	// Parent/child/sibling bindings complete. Return the new node.
	return new_entry;
     bf8:	c7 01       	movw	r24, r14
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	cf 90       	pop	r12
     c0a:	08 95       	ret

00000c0c <MENU_init>:

void test_function() {
	printf("\n\nHighscore clicked!\n\n");
}

void MENU_init() {
     c0c:	cf 92       	push	r12
     c0e:	df 92       	push	r13
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
	menu_entry* main_menu = add_entry(NULL, "Main menu", NULL);
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	61 ed       	ldi	r22, 0xD1	; 209
     c22:	72 e0       	ldi	r23, 0x02	; 2
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 b4 05 	call	0xb68	; 0xb68 <add_entry>
     c2c:	ec 01       	movw	r28, r24
	
	// Main menu
	menu_entry* play = add_entry(main_menu, "Play game", NULL);
     c2e:	40 e0       	ldi	r20, 0x00	; 0
     c30:	50 e0       	ldi	r21, 0x00	; 0
     c32:	6b ed       	ldi	r22, 0xDB	; 219
     c34:	72 e0       	ldi	r23, 0x02	; 2
     c36:	0e 94 b4 05 	call	0xb68	; 0xb68 <add_entry>
     c3a:	6c 01       	movw	r12, r24
	menu_entry* highscore = add_entry(main_menu, "Highscore", test_function);
     c3c:	40 ee       	ldi	r20, 0xE0	; 224
     c3e:	54 e0       	ldi	r21, 0x04	; 4
     c40:	65 ee       	ldi	r22, 0xE5	; 229
     c42:	72 e0       	ldi	r23, 0x02	; 2
     c44:	ce 01       	movw	r24, r28
     c46:	0e 94 b4 05 	call	0xb68	; 0xb68 <add_entry>
	menu_entry* settings = add_entry(main_menu, "Settings", NULL);
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	6f ee       	ldi	r22, 0xEF	; 239
     c50:	72 e0       	ldi	r23, 0x02	; 2
     c52:	ce 01       	movw	r24, r28
     c54:	0e 94 b4 05 	call	0xb68	; 0xb68 <add_entry>
     c58:	7c 01       	movw	r14, r24
	menu_entry* extras = add_entry(main_menu, "Extra features", NULL);
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	6f e9       	ldi	r22, 0x9F	; 159
     c60:	73 e0       	ldi	r23, 0x03	; 3
     c62:	ce 01       	movw	r24, r28
     c64:	0e 94 b4 05 	call	0xb68	; 0xb68 <add_entry>
     c68:	8c 01       	movw	r16, r24
	menu_entry* yolo = add_entry(main_menu, "YOLO", NULL);
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	68 ef       	ldi	r22, 0xF8	; 248
     c70:	72 e0       	ldi	r23, 0x02	; 2
     c72:	ce 01       	movw	r24, r28
     c74:	0e 94 b4 05 	call	0xb68	; 0xb68 <add_entry>
	
	
	// Sub-menu settings
	menu_entry* brightness = add_entry(settings, "Brightness", NULL);
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	6d ef       	ldi	r22, 0xFD	; 253
     c7e:	72 e0       	ldi	r23, 0x02	; 2
     c80:	c7 01       	movw	r24, r14
     c82:	0e 94 b4 05 	call	0xb68	; 0xb68 <add_entry>
	menu_entry* font = add_entry(settings, "Set font", NULL);
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	68 e0       	ldi	r22, 0x08	; 8
     c8c:	73 e0       	ldi	r23, 0x03	; 3
     c8e:	c7 01       	movw	r24, r14
     c90:	0e 94 b4 05 	call	0xb68	; 0xb68 <add_entry>
	
	// Sub-menu extras
	menu_entry* keyboard = add_entry(extras, "Keyboard", NULL);
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	61 e1       	ldi	r22, 0x11	; 17
     c9a:	73 e0       	ldi	r23, 0x03	; 3
     c9c:	c8 01       	movw	r24, r16
     c9e:	0e 94 b4 05 	call	0xb68	; 0xb68 <add_entry>
	menu_entry* mandelbrot = add_entry(extras, "Mandelbrot", NULL);
     ca2:	40 e0       	ldi	r20, 0x00	; 0
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	6a e1       	ldi	r22, 0x1A	; 26
     ca8:	73 e0       	ldi	r23, 0x03	; 3
     caa:	c8 01       	movw	r24, r16
     cac:	0e 94 b4 05 	call	0xb68	; 0xb68 <add_entry>
	menu_entry* pong = add_entry(extras, "Play pong", NULL);
     cb0:	40 e0       	ldi	r20, 0x00	; 0
     cb2:	50 e0       	ldi	r21, 0x00	; 0
     cb4:	65 e2       	ldi	r22, 0x25	; 37
     cb6:	73 e0       	ldi	r23, 0x03	; 3
     cb8:	c8 01       	movw	r24, r16
     cba:	0e 94 b4 05 	call	0xb68	; 0xb68 <add_entry>
	menu_entry* rcube = add_entry(extras, "rotating cube", NULL);
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	6f e2       	ldi	r22, 0x2F	; 47
     cc4:	73 e0       	ldi	r23, 0x03	; 3
     cc6:	c8 01       	movw	r24, r16
     cc8:	0e 94 b4 05 	call	0xb68	; 0xb68 <add_entry>
	
	current_entry = main_menu;
     ccc:	d0 93 bd 03 	sts	0x03BD, r29
     cd0:	c0 93 bc 03 	sts	0x03BC, r28
	selected_entry = play;
     cd4:	d0 92 bb 03 	sts	0x03BB, r13
     cd8:	c0 92 ba 03 	sts	0x03BA, r12
	MENU_draw_current_menu();
     cdc:	0e 94 e5 04 	call	0x9ca	; 0x9ca <MENU_draw_current_menu>
}
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	df 90       	pop	r13
     cee:	cf 90       	pop	r12
     cf0:	08 95       	ret

00000cf2 <initialize>:
#include <stdio.h>
#include <stdbool.h>


void initialize(void){
	cli();
     cf2:	f8 94       	cli
	OLED_reset();
     cf4:	0e 94 0b 07 	call	0xe16	; 0xe16 <OLED_reset>
	usart_init(MYUBRR);
     cf8:	8f e1       	ldi	r24, 0x1F	; 31
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	0e 94 95 07 	call	0xf2a	; 0xf2a <usart_init>
	SRAM_init();
     d00:	0e 94 80 07 	call	0xf00	; 0xf00 <SRAM_init>
	ADC_init();
     d04:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	//JOY_init();
	OLED_init();
     d08:	0e 94 17 07 	call	0xe2e	; 0xe2e <OLED_init>
	MENU_init();
     d0c:	0e 94 06 06 	call	0xc0c	; 0xc0c <MENU_init>
	CAN_init();
     d10:	0e 94 26 02 	call	0x44c	; 0x44c <CAN_init>
	
	sei();
     d14:	78 94       	sei
     d16:	08 95       	ret

00000d18 <test>:
	// ADC_test();
	// JOY_test();
	// OLED_test();
	//MENU_test();
	//SPI_test();
	printf("Before CAN_test");
     d18:	8d e3       	ldi	r24, 0x3D	; 61
     d1a:	93 e0       	ldi	r25, 0x03	; 3
     d1c:	9f 93       	push	r25
     d1e:	8f 93       	push	r24
     d20:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
	CAN_test();
     d24:	0e 94 08 03 	call	0x610	; 0x610 <CAN_test>
	printf("After CAN_test");
     d28:	8d e4       	ldi	r24, 0x4D	; 77
     d2a:	93 e0       	ldi	r25, 0x03	; 3
     d2c:	9f 93       	push	r25
     d2e:	8f 93       	push	r24
     d30:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
	my_message.data[2] = 0x55;
	
	while(1) {
		//while(!CAN_transmit_complete(TB0)){}
		//CAN_message_send(&my_message);
		MENU_run();
     d3c:	0e 94 85 05 	call	0xb0a	; 0xb0a <MENU_run>
     d40:	fd cf       	rjmp	.-6      	; 0xd3c <test+0x24>

00000d42 <main>:
	printf("1. EFGL: 0x%02x\n", MCP2515_read(MCP_EFLG));
	
}

int main(void) {
	initialize(); 
     d42:	0e 94 79 06 	call	0xcf2	; 0xcf2 <initialize>
	//send_joystick_pos();
	test();
     d46:	0e 94 8c 06 	call	0xd18	; 0xd18 <test>

00000d4a <OLED_print_char>:
	write_cmd(0x81);
	write_cmd(lvl);
}

void OLED_print_char(char c){
	if (c == '\0') return;
     d4a:	88 23       	and	r24, r24
     d4c:	f9 f0       	breq	.+62     	; 0xd8c <OLED_print_char+0x42>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
     d4e:	e8 2f       	mov	r30, r24
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	b0 97       	sbiw	r30, 0x20	; 32
	for (int col = 0; col < FONT_SIZE; col++){
     d54:	80 91 14 01 	lds	r24, 0x0114
     d58:	88 23       	and	r24, r24
     d5a:	c1 f0       	breq	.+48     	; 0xd8c <OLED_print_char+0x42>
     d5c:	ee 0f       	add	r30, r30
     d5e:	ff 1f       	adc	r31, r31
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	ee 0f       	add	r30, r30
     d66:	ff 1f       	adc	r31, r31
     d68:	e0 59       	subi	r30, 0x90	; 144
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
		write_data(pgm_read_byte(&font8[letter_index][col]));
     d70:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     d72:	a0 91 17 01 	lds	r26, 0x0117
     d76:	b0 91 18 01 	lds	r27, 0x0118
     d7a:	2c 93       	st	X, r18

void OLED_print_char(char c){
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++){
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	31 96       	adiw	r30, 0x01	; 1
     d80:	20 91 14 01 	lds	r18, 0x0114
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	82 17       	cp	r24, r18
     d88:	93 07       	cpc	r25, r19
     d8a:	94 f3       	brlt	.-28     	; 0xd70 <OLED_print_char+0x26>
     d8c:	08 95       	ret

00000d8e <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7){
     d8e:	88 30       	cpi	r24, 0x08	; 8
     d90:	30 f4       	brcc	.+12     	; 0xd9e <OLED_goto_line+0x10>
		return;
	}
	write_cmd(0xB0+line);
     d92:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     d94:	e0 91 15 01 	lds	r30, 0x0115
     d98:	f0 91 16 01 	lds	r31, 0x0116
     d9c:	80 83       	st	Z, r24
     d9e:	08 95       	ret

00000da0 <OLED_goto_column>:
	}
	write_cmd(0xB0+line);
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
     da0:	88 23       	and	r24, r24
     da2:	7c f0       	brlt	.+30     	; 0xdc2 <OLED_goto_column+0x22>
		return;
	}
	write_cmd(0x00+column%16); //lower column register
     da4:	98 2f       	mov	r25, r24
     da6:	9f 70       	andi	r25, 0x0F	; 15
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     da8:	e0 91 15 01 	lds	r30, 0x0115
     dac:	f0 91 16 01 	lds	r31, 0x0116
     db0:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
		return;
	}
	write_cmd(0x00+column%16); //lower column register
	write_cmd(0x10+column/16); //higher column register
     db2:	82 95       	swap	r24
     db4:	8f 70       	andi	r24, 0x0F	; 15
     db6:	80 5f       	subi	r24, 0xF0	; 240
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     db8:	e0 91 15 01 	lds	r30, 0x0115
     dbc:	f0 91 16 01 	lds	r31, 0x0116
     dc0:	80 83       	st	Z, r24
     dc2:	08 95       	ret

00000dc4 <OLED_pos>:
		write_data(0x00);
		
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
     dc4:	cf 93       	push	r28
     dc6:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
     dc8:	88 30       	cpi	r24, 0x08	; 8
     dca:	10 f4       	brcc	.+4      	; 0xdd0 <OLED_pos+0xc>
     dcc:	66 23       	and	r22, r22
     dce:	4c f4       	brge	.+18     	; 0xde2 <OLED_pos+0x1e>
		printf("Out of range in OLED_pos()");
     dd0:	83 e8       	ldi	r24, 0x83	; 131
     dd2:	93 e0       	ldi	r25, 0x03	; 3
     dd4:	9f 93       	push	r25
     dd6:	8f 93       	push	r24
     dd8:	0e 94 4e 09 	call	0x129c	; 0x129c <printf>
		return; 
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	05 c0       	rjmp	.+10     	; 0xdec <OLED_pos+0x28>
	}
	
	OLED_goto_line(line);
     de2:	0e 94 c7 06 	call	0xd8e	; 0xd8e <OLED_goto_line>
	OLED_goto_column(column);
     de6:	8c 2f       	mov	r24, r28
     de8:	0e 94 d0 06 	call	0xda0	; 0xda0 <OLED_goto_column>
}
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <OLED_home>:




void OLED_home(){
	OLED_pos(0,0);
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <OLED_pos>
     df8:	08 95       	ret

00000dfa <OLED_clear_line>:
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <OLED_pos>
     e00:	80 e8       	ldi	r24, 0x80	; 128
     e02:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     e04:	e0 91 17 01 	lds	r30, 0x0117
     e08:	f0 91 18 01 	lds	r31, 0x0118
     e0c:	10 82       	st	Z, r1
     e0e:	01 97       	sbiw	r24, 0x01	; 1
	OLED_pos(0,0);
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	c1 f7       	brne	.-16     	; 0xe04 <OLED_clear_line+0xa>
		write_data(0x00);
		
	}
}
     e14:	08 95       	ret

00000e16 <OLED_reset>:
	
}



void OLED_reset() {
     e16:	cf 93       	push	r28
     e18:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
     e1a:	8c 2f       	mov	r24, r28
     e1c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <OLED_clear_line>
     e20:	cf 5f       	subi	r28, 0xFF	; 255
}



void OLED_reset() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
     e22:	c8 30       	cpi	r28, 0x08	; 8
     e24:	d1 f7       	brne	.-12     	; 0xe1a <OLED_reset+0x4>
		OLED_clear_line(page);
	}
	OLED_home();
     e26:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <OLED_home>
}
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	66 97       	sbiw	r28, 0x16	; 22
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	
	
	const char addresses[] = {
     e42:	86 e1       	ldi	r24, 0x16	; 22
     e44:	e9 e1       	ldi	r30, 0x19	; 25
     e46:	f1 e0       	ldi	r31, 0x01	; 1
     e48:	de 01       	movw	r26, r28
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	01 90       	ld	r0, Z+
     e4e:	0d 92       	st	X+, r0
     e50:	8a 95       	dec	r24
     e52:	e1 f7       	brne	.-8      	; 0xe4c <OLED_init+0x1e>
     e54:	fe 01       	movw	r30, r28
     e56:	31 96       	adiw	r30, 0x01	; 1
     e58:	ce 01       	movw	r24, r28
     e5a:	47 96       	adiw	r24, 0x17	; 23
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
		write_cmd(addresses[i]);
     e5c:	21 91       	ld	r18, Z+
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     e5e:	a0 91 15 01 	lds	r26, 0x0115
     e62:	b0 91 16 01 	lds	r27, 0x0116
     e66:	2c 93       	st	X, r18
		0xa6, //set normal display
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
     e68:	e8 17       	cp	r30, r24
     e6a:	f9 07       	cpc	r31, r25
     e6c:	b9 f7       	brne	.-18     	; 0xe5c <OLED_init+0x2e>
		write_cmd(addresses[i]);
	}
	
	OLED_reset();
     e6e:	0e 94 0b 07 	call	0xe16	; 0xe16 <OLED_reset>
	
}
     e72:	66 96       	adiw	r28, 0x16	; 22
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	08 95       	ret

00000e84 <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     e84:	e0 91 17 01 	lds	r30, 0x0117
     e88:	f0 91 18 01 	lds	r31, 0x0118
     e8c:	88 e1       	ldi	r24, 0x18	; 24
     e8e:	80 83       	st	Z, r24
     e90:	e0 91 17 01 	lds	r30, 0x0117
     e94:	f0 91 18 01 	lds	r31, 0x0118
     e98:	80 83       	st	Z, r24
     e9a:	e0 91 17 01 	lds	r30, 0x0117
     e9e:	f0 91 18 01 	lds	r31, 0x0118
     ea2:	9e e7       	ldi	r25, 0x7E	; 126
     ea4:	90 83       	st	Z, r25
     ea6:	e0 91 17 01 	lds	r30, 0x0117
     eaa:	f0 91 18 01 	lds	r31, 0x0118
     eae:	9c e3       	ldi	r25, 0x3C	; 60
     eb0:	90 83       	st	Z, r25
     eb2:	e0 91 17 01 	lds	r30, 0x0117
     eb6:	f0 91 18 01 	lds	r31, 0x0118
     eba:	80 83       	st	Z, r24
     ebc:	08 95       	ret

00000ebe <SPI_init>:

void SPI_init(){
	//Configure interrupt0 on the ATmega162 for receiving interrupts from SPI
	//see page 160 in ATmega162
	//enable int0 on the ATmega162
	set_bit(GICR, INT0);
     ebe:	8b b7       	in	r24, 0x3b	; 59
     ec0:	80 64       	ori	r24, 0x40	; 64
     ec2:	8b bf       	out	0x3b, r24	; 59
	
	//interrupt when low
	clear_bit(MCUCR,ISC01);
     ec4:	85 b7       	in	r24, 0x35	; 53
     ec6:	8d 7f       	andi	r24, 0xFD	; 253
     ec8:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     eca:	85 b7       	in	r24, 0x35	; 53
     ecc:	8e 7f       	andi	r24, 0xFE	; 254
     ece:	85 bf       	out	0x35, r24	; 53
	

	//set mosi, sck, ss as output, others as input
	set_bit(DDRB, MOSI);
     ed0:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
     ed2:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
     ed4:	bc 9a       	sbi	0x17, 4	; 23
	
	
	//set ATmega as master
	set_bit(SPCR, MSTR);
     ed6:	6c 9a       	sbi	0x0d, 4	; 13
	
	//enable SPI
	set_bit(SPCR, SPE);
     ed8:	6e 9a       	sbi	0x0d, 6	; 13
	
	//set clock to f_osc/16
	set_bit(SPCR, SPR0);
     eda:	68 9a       	sbi	0x0d, 0	; 13
	clear_bit(SPCR,SPR1);
     edc:	69 98       	cbi	0x0d, 1	; 13
	clear_bit(SPCR, SPI2X);
     ede:	68 98       	cbi	0x0d, 0	; 13
     ee0:	08 95       	ret

00000ee2 <SPI_send>:
}


void SPI_send(uint8_t data){
	//Start transmission
	SPDR = data;		
     ee2:	8f b9       	out	0x0f, r24	; 15
	//wait for transmission complete SPSR: register with SPIF flag, SPIF: bit set to 1 when data is read
	loop_until_bit_is_set(SPSR, SPIF);
     ee4:	77 9b       	sbis	0x0e, 7	; 14
     ee6:	fe cf       	rjmp	.-4      	; 0xee4 <SPI_send+0x2>
}
     ee8:	08 95       	ret

00000eea <SPI_read>:


char SPI_read(){
	//must send a dummy bit to receive data
	SPI_send(0);
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	0e 94 71 07 	call	0xee2	; 0xee2 <SPI_send>
	
	loop_until_bit_is_set(SPSR, SPIF);
     ef0:	77 9b       	sbis	0x0e, 7	; 14
     ef2:	fe cf       	rjmp	.-4      	; 0xef0 <SPI_read+0x6>
	char data = SPDR;
     ef4:	8f b1       	in	r24, 0x0f	; 15
	return data;
	
}
     ef6:	08 95       	ret

00000ef8 <SPI_select>:
	//printf("SPI_TEST: %s\n\n", spi_read_result);
	
}

void SPI_select(){
	clear_bit(PORTB, SS);
     ef8:	c4 98       	cbi	0x18, 4	; 24
     efa:	08 95       	ret

00000efc <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
     efc:	c4 9a       	sbi	0x18, 4	; 24
     efe:	08 95       	ret

00000f00 <SRAM_init>:



void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
     f00:	85 b7       	in	r24, 0x35	; 53
     f02:	80 68       	ori	r24, 0x80	; 128
     f04:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
     f06:	80 b7       	in	r24, 0x30	; 48
     f08:	80 62       	ori	r24, 0x20	; 32
     f0a:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
     f0c:	80 b7       	in	r24, 0x30	; 48
     f0e:	8f 7e       	andi	r24, 0xEF	; 239
     f10:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
     f12:	80 b7       	in	r24, 0x30	; 48
     f14:	87 7f       	andi	r24, 0xF7	; 247
     f16:	80 bf       	out	0x30, r24	; 48
     f18:	08 95       	ret

00000f1a <usart_transmit_to_computer>:
}


void usart_transmit_to_computer(unsigned int data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
     f1a:	5d 9b       	sbis	0x0b, 5	; 11
     f1c:	fe cf       	rjmp	.-4      	; 0xf1a <usart_transmit_to_computer>
	;
	
	/* Put data into buffer (sends the data) */
	UDR0 = data;
     f1e:	8c b9       	out	0x0c, r24	; 12
     f20:	08 95       	ret

00000f22 <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
     f22:	5f 9b       	sbis	0x0b, 7	; 11
     f24:	fe cf       	rjmp	.-4      	; 0xf22 <usart_receive_from_computer>
	;
	
	/* Get and return data from buffer */
	return UDR0;
     f26:	8c b1       	in	r24, 0x0c	; 12
}
     f28:	08 95       	ret

00000f2a <usart_init>:
#include <stdio.h>


void usart_init(unsigned int ubbr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubbr>>8);
     f2a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
     f2c:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
     f2e:	88 e1       	ldi	r24, 0x18	; 24
     f30:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     f32:	8e e8       	ldi	r24, 0x8E	; 142
     f34:	80 bd       	out	0x20, r24	; 32
	
	
	/* Enable printf-thing */
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
     f36:	61 e9       	ldi	r22, 0x91	; 145
     f38:	77 e0       	ldi	r23, 0x07	; 7
     f3a:	8d e8       	ldi	r24, 0x8D	; 141
     f3c:	97 e0       	ldi	r25, 0x07	; 7
     f3e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <fdevopen>
     f42:	08 95       	ret

00000f44 <__divmodhi4>:
     f44:	97 fb       	bst	r25, 7
     f46:	07 2e       	mov	r0, r23
     f48:	16 f4       	brtc	.+4      	; 0xf4e <__divmodhi4+0xa>
     f4a:	00 94       	com	r0
     f4c:	07 d0       	rcall	.+14     	; 0xf5c <__divmodhi4_neg1>
     f4e:	77 fd       	sbrc	r23, 7
     f50:	09 d0       	rcall	.+18     	; 0xf64 <__divmodhi4_neg2>
     f52:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__udivmodhi4>
     f56:	07 fc       	sbrc	r0, 7
     f58:	05 d0       	rcall	.+10     	; 0xf64 <__divmodhi4_neg2>
     f5a:	3e f4       	brtc	.+14     	; 0xf6a <__divmodhi4_exit>

00000f5c <__divmodhi4_neg1>:
     f5c:	90 95       	com	r25
     f5e:	81 95       	neg	r24
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	08 95       	ret

00000f64 <__divmodhi4_neg2>:
     f64:	70 95       	com	r23
     f66:	61 95       	neg	r22
     f68:	7f 4f       	sbci	r23, 0xFF	; 255

00000f6a <__divmodhi4_exit>:
     f6a:	08 95       	ret

00000f6c <__udivmodhi4>:
     f6c:	aa 1b       	sub	r26, r26
     f6e:	bb 1b       	sub	r27, r27
     f70:	51 e1       	ldi	r21, 0x11	; 17
     f72:	07 c0       	rjmp	.+14     	; 0xf82 <__udivmodhi4_ep>

00000f74 <__udivmodhi4_loop>:
     f74:	aa 1f       	adc	r26, r26
     f76:	bb 1f       	adc	r27, r27
     f78:	a6 17       	cp	r26, r22
     f7a:	b7 07       	cpc	r27, r23
     f7c:	10 f0       	brcs	.+4      	; 0xf82 <__udivmodhi4_ep>
     f7e:	a6 1b       	sub	r26, r22
     f80:	b7 0b       	sbc	r27, r23

00000f82 <__udivmodhi4_ep>:
     f82:	88 1f       	adc	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	5a 95       	dec	r21
     f88:	a9 f7       	brne	.-22     	; 0xf74 <__udivmodhi4_loop>
     f8a:	80 95       	com	r24
     f8c:	90 95       	com	r25
     f8e:	bc 01       	movw	r22, r24
     f90:	cd 01       	movw	r24, r26
     f92:	08 95       	ret

00000f94 <malloc>:
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	91 05       	cpc	r25, r1
     f9c:	10 f4       	brcc	.+4      	; 0xfa2 <malloc+0xe>
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	e0 91 c0 03 	lds	r30, 0x03C0
     fa6:	f0 91 c1 03 	lds	r31, 0x03C1
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	30 97       	sbiw	r30, 0x00	; 0
     fb4:	39 f1       	breq	.+78     	; 0x1004 <malloc+0x70>
     fb6:	40 81       	ld	r20, Z
     fb8:	51 81       	ldd	r21, Z+1	; 0x01
     fba:	48 17       	cp	r20, r24
     fbc:	59 07       	cpc	r21, r25
     fbe:	b8 f0       	brcs	.+46     	; 0xfee <malloc+0x5a>
     fc0:	48 17       	cp	r20, r24
     fc2:	59 07       	cpc	r21, r25
     fc4:	71 f4       	brne	.+28     	; 0xfe2 <malloc+0x4e>
     fc6:	82 81       	ldd	r24, Z+2	; 0x02
     fc8:	93 81       	ldd	r25, Z+3	; 0x03
     fca:	10 97       	sbiw	r26, 0x00	; 0
     fcc:	29 f0       	breq	.+10     	; 0xfd8 <malloc+0x44>
     fce:	13 96       	adiw	r26, 0x03	; 3
     fd0:	9c 93       	st	X, r25
     fd2:	8e 93       	st	-X, r24
     fd4:	12 97       	sbiw	r26, 0x02	; 2
     fd6:	2c c0       	rjmp	.+88     	; 0x1030 <malloc+0x9c>
     fd8:	90 93 c1 03 	sts	0x03C1, r25
     fdc:	80 93 c0 03 	sts	0x03C0, r24
     fe0:	27 c0       	rjmp	.+78     	; 0x1030 <malloc+0x9c>
     fe2:	21 15       	cp	r18, r1
     fe4:	31 05       	cpc	r19, r1
     fe6:	31 f0       	breq	.+12     	; 0xff4 <malloc+0x60>
     fe8:	42 17       	cp	r20, r18
     fea:	53 07       	cpc	r21, r19
     fec:	18 f0       	brcs	.+6      	; 0xff4 <malloc+0x60>
     fee:	a9 01       	movw	r20, r18
     ff0:	db 01       	movw	r26, r22
     ff2:	01 c0       	rjmp	.+2      	; 0xff6 <malloc+0x62>
     ff4:	ef 01       	movw	r28, r30
     ff6:	9a 01       	movw	r18, r20
     ff8:	bd 01       	movw	r22, r26
     ffa:	df 01       	movw	r26, r30
     ffc:	02 80       	ldd	r0, Z+2	; 0x02
     ffe:	f3 81       	ldd	r31, Z+3	; 0x03
    1000:	e0 2d       	mov	r30, r0
    1002:	d7 cf       	rjmp	.-82     	; 0xfb2 <malloc+0x1e>
    1004:	21 15       	cp	r18, r1
    1006:	31 05       	cpc	r19, r1
    1008:	f9 f0       	breq	.+62     	; 0x1048 <malloc+0xb4>
    100a:	28 1b       	sub	r18, r24
    100c:	39 0b       	sbc	r19, r25
    100e:	24 30       	cpi	r18, 0x04	; 4
    1010:	31 05       	cpc	r19, r1
    1012:	80 f4       	brcc	.+32     	; 0x1034 <malloc+0xa0>
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	9b 81       	ldd	r25, Y+3	; 0x03
    1018:	61 15       	cp	r22, r1
    101a:	71 05       	cpc	r23, r1
    101c:	21 f0       	breq	.+8      	; 0x1026 <malloc+0x92>
    101e:	fb 01       	movw	r30, r22
    1020:	93 83       	std	Z+3, r25	; 0x03
    1022:	82 83       	std	Z+2, r24	; 0x02
    1024:	04 c0       	rjmp	.+8      	; 0x102e <malloc+0x9a>
    1026:	90 93 c1 03 	sts	0x03C1, r25
    102a:	80 93 c0 03 	sts	0x03C0, r24
    102e:	fe 01       	movw	r30, r28
    1030:	32 96       	adiw	r30, 0x02	; 2
    1032:	44 c0       	rjmp	.+136    	; 0x10bc <malloc+0x128>
    1034:	fe 01       	movw	r30, r28
    1036:	e2 0f       	add	r30, r18
    1038:	f3 1f       	adc	r31, r19
    103a:	81 93       	st	Z+, r24
    103c:	91 93       	st	Z+, r25
    103e:	22 50       	subi	r18, 0x02	; 2
    1040:	31 09       	sbc	r19, r1
    1042:	39 83       	std	Y+1, r19	; 0x01
    1044:	28 83       	st	Y, r18
    1046:	3a c0       	rjmp	.+116    	; 0x10bc <malloc+0x128>
    1048:	20 91 be 03 	lds	r18, 0x03BE
    104c:	30 91 bf 03 	lds	r19, 0x03BF
    1050:	23 2b       	or	r18, r19
    1052:	41 f4       	brne	.+16     	; 0x1064 <malloc+0xd0>
    1054:	20 91 02 01 	lds	r18, 0x0102
    1058:	30 91 03 01 	lds	r19, 0x0103
    105c:	30 93 bf 03 	sts	0x03BF, r19
    1060:	20 93 be 03 	sts	0x03BE, r18
    1064:	20 91 00 01 	lds	r18, 0x0100
    1068:	30 91 01 01 	lds	r19, 0x0101
    106c:	21 15       	cp	r18, r1
    106e:	31 05       	cpc	r19, r1
    1070:	41 f4       	brne	.+16     	; 0x1082 <malloc+0xee>
    1072:	2d b7       	in	r18, 0x3d	; 61
    1074:	3e b7       	in	r19, 0x3e	; 62
    1076:	40 91 04 01 	lds	r20, 0x0104
    107a:	50 91 05 01 	lds	r21, 0x0105
    107e:	24 1b       	sub	r18, r20
    1080:	35 0b       	sbc	r19, r21
    1082:	e0 91 be 03 	lds	r30, 0x03BE
    1086:	f0 91 bf 03 	lds	r31, 0x03BF
    108a:	e2 17       	cp	r30, r18
    108c:	f3 07       	cpc	r31, r19
    108e:	a0 f4       	brcc	.+40     	; 0x10b8 <malloc+0x124>
    1090:	2e 1b       	sub	r18, r30
    1092:	3f 0b       	sbc	r19, r31
    1094:	28 17       	cp	r18, r24
    1096:	39 07       	cpc	r19, r25
    1098:	78 f0       	brcs	.+30     	; 0x10b8 <malloc+0x124>
    109a:	ac 01       	movw	r20, r24
    109c:	4e 5f       	subi	r20, 0xFE	; 254
    109e:	5f 4f       	sbci	r21, 0xFF	; 255
    10a0:	24 17       	cp	r18, r20
    10a2:	35 07       	cpc	r19, r21
    10a4:	48 f0       	brcs	.+18     	; 0x10b8 <malloc+0x124>
    10a6:	4e 0f       	add	r20, r30
    10a8:	5f 1f       	adc	r21, r31
    10aa:	50 93 bf 03 	sts	0x03BF, r21
    10ae:	40 93 be 03 	sts	0x03BE, r20
    10b2:	81 93       	st	Z+, r24
    10b4:	91 93       	st	Z+, r25
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <malloc+0x128>
    10b8:	e0 e0       	ldi	r30, 0x00	; 0
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	cf 01       	movw	r24, r30
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <free>:
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	00 97       	sbiw	r24, 0x00	; 0
    10ca:	09 f4       	brne	.+2      	; 0x10ce <free+0xa>
    10cc:	87 c0       	rjmp	.+270    	; 0x11dc <free+0x118>
    10ce:	fc 01       	movw	r30, r24
    10d0:	32 97       	sbiw	r30, 0x02	; 2
    10d2:	13 82       	std	Z+3, r1	; 0x03
    10d4:	12 82       	std	Z+2, r1	; 0x02
    10d6:	c0 91 c0 03 	lds	r28, 0x03C0
    10da:	d0 91 c1 03 	lds	r29, 0x03C1
    10de:	20 97       	sbiw	r28, 0x00	; 0
    10e0:	81 f4       	brne	.+32     	; 0x1102 <free+0x3e>
    10e2:	20 81       	ld	r18, Z
    10e4:	31 81       	ldd	r19, Z+1	; 0x01
    10e6:	28 0f       	add	r18, r24
    10e8:	39 1f       	adc	r19, r25
    10ea:	80 91 be 03 	lds	r24, 0x03BE
    10ee:	90 91 bf 03 	lds	r25, 0x03BF
    10f2:	82 17       	cp	r24, r18
    10f4:	93 07       	cpc	r25, r19
    10f6:	79 f5       	brne	.+94     	; 0x1156 <free+0x92>
    10f8:	f0 93 bf 03 	sts	0x03BF, r31
    10fc:	e0 93 be 03 	sts	0x03BE, r30
    1100:	6d c0       	rjmp	.+218    	; 0x11dc <free+0x118>
    1102:	de 01       	movw	r26, r28
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	ae 17       	cp	r26, r30
    110a:	bf 07       	cpc	r27, r31
    110c:	50 f4       	brcc	.+20     	; 0x1122 <free+0x5e>
    110e:	12 96       	adiw	r26, 0x02	; 2
    1110:	4d 91       	ld	r20, X+
    1112:	5c 91       	ld	r21, X
    1114:	13 97       	sbiw	r26, 0x03	; 3
    1116:	9d 01       	movw	r18, r26
    1118:	41 15       	cp	r20, r1
    111a:	51 05       	cpc	r21, r1
    111c:	09 f1       	breq	.+66     	; 0x1160 <free+0x9c>
    111e:	da 01       	movw	r26, r20
    1120:	f3 cf       	rjmp	.-26     	; 0x1108 <free+0x44>
    1122:	b3 83       	std	Z+3, r27	; 0x03
    1124:	a2 83       	std	Z+2, r26	; 0x02
    1126:	40 81       	ld	r20, Z
    1128:	51 81       	ldd	r21, Z+1	; 0x01
    112a:	84 0f       	add	r24, r20
    112c:	95 1f       	adc	r25, r21
    112e:	8a 17       	cp	r24, r26
    1130:	9b 07       	cpc	r25, r27
    1132:	71 f4       	brne	.+28     	; 0x1150 <free+0x8c>
    1134:	8d 91       	ld	r24, X+
    1136:	9c 91       	ld	r25, X
    1138:	11 97       	sbiw	r26, 0x01	; 1
    113a:	84 0f       	add	r24, r20
    113c:	95 1f       	adc	r25, r21
    113e:	02 96       	adiw	r24, 0x02	; 2
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	80 83       	st	Z, r24
    1144:	12 96       	adiw	r26, 0x02	; 2
    1146:	8d 91       	ld	r24, X+
    1148:	9c 91       	ld	r25, X
    114a:	13 97       	sbiw	r26, 0x03	; 3
    114c:	93 83       	std	Z+3, r25	; 0x03
    114e:	82 83       	std	Z+2, r24	; 0x02
    1150:	21 15       	cp	r18, r1
    1152:	31 05       	cpc	r19, r1
    1154:	29 f4       	brne	.+10     	; 0x1160 <free+0x9c>
    1156:	f0 93 c1 03 	sts	0x03C1, r31
    115a:	e0 93 c0 03 	sts	0x03C0, r30
    115e:	3e c0       	rjmp	.+124    	; 0x11dc <free+0x118>
    1160:	d9 01       	movw	r26, r18
    1162:	13 96       	adiw	r26, 0x03	; 3
    1164:	fc 93       	st	X, r31
    1166:	ee 93       	st	-X, r30
    1168:	12 97       	sbiw	r26, 0x02	; 2
    116a:	4d 91       	ld	r20, X+
    116c:	5d 91       	ld	r21, X+
    116e:	a4 0f       	add	r26, r20
    1170:	b5 1f       	adc	r27, r21
    1172:	ea 17       	cp	r30, r26
    1174:	fb 07       	cpc	r31, r27
    1176:	79 f4       	brne	.+30     	; 0x1196 <free+0xd2>
    1178:	80 81       	ld	r24, Z
    117a:	91 81       	ldd	r25, Z+1	; 0x01
    117c:	84 0f       	add	r24, r20
    117e:	95 1f       	adc	r25, r21
    1180:	02 96       	adiw	r24, 0x02	; 2
    1182:	d9 01       	movw	r26, r18
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	9c 93       	st	X, r25
    1188:	8e 93       	st	-X, r24
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	13 96       	adiw	r26, 0x03	; 3
    1190:	9c 93       	st	X, r25
    1192:	8e 93       	st	-X, r24
    1194:	12 97       	sbiw	r26, 0x02	; 2
    1196:	e0 e0       	ldi	r30, 0x00	; 0
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	9b 81       	ldd	r25, Y+3	; 0x03
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	19 f0       	breq	.+6      	; 0x11a8 <free+0xe4>
    11a2:	fe 01       	movw	r30, r28
    11a4:	ec 01       	movw	r28, r24
    11a6:	f9 cf       	rjmp	.-14     	; 0x119a <free+0xd6>
    11a8:	ce 01       	movw	r24, r28
    11aa:	02 96       	adiw	r24, 0x02	; 2
    11ac:	28 81       	ld	r18, Y
    11ae:	39 81       	ldd	r19, Y+1	; 0x01
    11b0:	82 0f       	add	r24, r18
    11b2:	93 1f       	adc	r25, r19
    11b4:	20 91 be 03 	lds	r18, 0x03BE
    11b8:	30 91 bf 03 	lds	r19, 0x03BF
    11bc:	28 17       	cp	r18, r24
    11be:	39 07       	cpc	r19, r25
    11c0:	69 f4       	brne	.+26     	; 0x11dc <free+0x118>
    11c2:	30 97       	sbiw	r30, 0x00	; 0
    11c4:	29 f4       	brne	.+10     	; 0x11d0 <free+0x10c>
    11c6:	10 92 c1 03 	sts	0x03C1, r1
    11ca:	10 92 c0 03 	sts	0x03C0, r1
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <free+0x110>
    11d0:	13 82       	std	Z+3, r1	; 0x03
    11d2:	12 82       	std	Z+2, r1	; 0x02
    11d4:	d0 93 bf 03 	sts	0x03BF, r29
    11d8:	c0 93 be 03 	sts	0x03BE, r28
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	08 95       	ret

000011e2 <fdevopen>:
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	ec 01       	movw	r28, r24
    11ec:	8b 01       	movw	r16, r22
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	31 f4       	brne	.+12     	; 0x11fe <fdevopen+0x1c>
    11f2:	61 15       	cp	r22, r1
    11f4:	71 05       	cpc	r23, r1
    11f6:	19 f4       	brne	.+6      	; 0x11fe <fdevopen+0x1c>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	38 c0       	rjmp	.+112    	; 0x126e <fdevopen+0x8c>
    11fe:	6e e0       	ldi	r22, 0x0E	; 14
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <calloc>
    120a:	fc 01       	movw	r30, r24
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	a1 f3       	breq	.-24     	; 0x11f8 <fdevopen+0x16>
    1210:	80 e8       	ldi	r24, 0x80	; 128
    1212:	83 83       	std	Z+3, r24	; 0x03
    1214:	01 15       	cp	r16, r1
    1216:	11 05       	cpc	r17, r1
    1218:	71 f0       	breq	.+28     	; 0x1236 <fdevopen+0x54>
    121a:	13 87       	std	Z+11, r17	; 0x0b
    121c:	02 87       	std	Z+10, r16	; 0x0a
    121e:	81 e8       	ldi	r24, 0x81	; 129
    1220:	83 83       	std	Z+3, r24	; 0x03
    1222:	80 91 c2 03 	lds	r24, 0x03C2
    1226:	90 91 c3 03 	lds	r25, 0x03C3
    122a:	89 2b       	or	r24, r25
    122c:	21 f4       	brne	.+8      	; 0x1236 <fdevopen+0x54>
    122e:	f0 93 c3 03 	sts	0x03C3, r31
    1232:	e0 93 c2 03 	sts	0x03C2, r30
    1236:	20 97       	sbiw	r28, 0x00	; 0
    1238:	c9 f0       	breq	.+50     	; 0x126c <fdevopen+0x8a>
    123a:	d1 87       	std	Z+9, r29	; 0x09
    123c:	c0 87       	std	Z+8, r28	; 0x08
    123e:	83 81       	ldd	r24, Z+3	; 0x03
    1240:	82 60       	ori	r24, 0x02	; 2
    1242:	83 83       	std	Z+3, r24	; 0x03
    1244:	80 91 c4 03 	lds	r24, 0x03C4
    1248:	90 91 c5 03 	lds	r25, 0x03C5
    124c:	89 2b       	or	r24, r25
    124e:	71 f4       	brne	.+28     	; 0x126c <fdevopen+0x8a>
    1250:	f0 93 c5 03 	sts	0x03C5, r31
    1254:	e0 93 c4 03 	sts	0x03C4, r30
    1258:	80 91 c6 03 	lds	r24, 0x03C6
    125c:	90 91 c7 03 	lds	r25, 0x03C7
    1260:	89 2b       	or	r24, r25
    1262:	21 f4       	brne	.+8      	; 0x126c <fdevopen+0x8a>
    1264:	f0 93 c7 03 	sts	0x03C7, r31
    1268:	e0 93 c6 03 	sts	0x03C6, r30
    126c:	cf 01       	movw	r24, r30
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	08 95       	ret

00001278 <fprintf>:
    1278:	a0 e0       	ldi	r26, 0x00	; 0
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e2 e4       	ldi	r30, 0x42	; 66
    127e:	f9 e0       	ldi	r31, 0x09	; 9
    1280:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__prologue_saves__+0x20>
    1284:	ae 01       	movw	r20, r28
    1286:	47 5f       	subi	r20, 0xF7	; 247
    1288:	5f 4f       	sbci	r21, 0xFF	; 255
    128a:	6f 81       	ldd	r22, Y+7	; 0x07
    128c:	78 85       	ldd	r23, Y+8	; 0x08
    128e:	8d 81       	ldd	r24, Y+5	; 0x05
    1290:	9e 81       	ldd	r25, Y+6	; 0x06
    1292:	0e 94 8f 09 	call	0x131e	; 0x131e <vfprintf>
    1296:	e2 e0       	ldi	r30, 0x02	; 2
    1298:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__epilogue_restores__+0x20>

0000129c <printf>:
    129c:	a0 e0       	ldi	r26, 0x00	; 0
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e4 e5       	ldi	r30, 0x54	; 84
    12a2:	f9 e0       	ldi	r31, 0x09	; 9
    12a4:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__prologue_saves__+0x20>
    12a8:	fe 01       	movw	r30, r28
    12aa:	35 96       	adiw	r30, 0x05	; 5
    12ac:	61 91       	ld	r22, Z+
    12ae:	71 91       	ld	r23, Z+
    12b0:	af 01       	movw	r20, r30
    12b2:	80 91 c4 03 	lds	r24, 0x03C4
    12b6:	90 91 c5 03 	lds	r25, 0x03C5
    12ba:	0e 94 8f 09 	call	0x131e	; 0x131e <vfprintf>
    12be:	e2 e0       	ldi	r30, 0x02	; 2
    12c0:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__epilogue_restores__+0x20>

000012c4 <puts>:
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	e0 91 c4 03 	lds	r30, 0x03C4
    12d0:	f0 91 c5 03 	lds	r31, 0x03C5
    12d4:	23 81       	ldd	r18, Z+3	; 0x03
    12d6:	21 ff       	sbrs	r18, 1
    12d8:	1b c0       	rjmp	.+54     	; 0x1310 <puts+0x4c>
    12da:	ec 01       	movw	r28, r24
    12dc:	00 e0       	ldi	r16, 0x00	; 0
    12de:	10 e0       	ldi	r17, 0x00	; 0
    12e0:	89 91       	ld	r24, Y+
    12e2:	60 91 c4 03 	lds	r22, 0x03C4
    12e6:	70 91 c5 03 	lds	r23, 0x03C5
    12ea:	db 01       	movw	r26, r22
    12ec:	18 96       	adiw	r26, 0x08	; 8
    12ee:	ed 91       	ld	r30, X+
    12f0:	fc 91       	ld	r31, X
    12f2:	19 97       	sbiw	r26, 0x09	; 9
    12f4:	88 23       	and	r24, r24
    12f6:	31 f0       	breq	.+12     	; 0x1304 <puts+0x40>
    12f8:	09 95       	icall
    12fa:	89 2b       	or	r24, r25
    12fc:	89 f3       	breq	.-30     	; 0x12e0 <puts+0x1c>
    12fe:	0f ef       	ldi	r16, 0xFF	; 255
    1300:	1f ef       	ldi	r17, 0xFF	; 255
    1302:	ee cf       	rjmp	.-36     	; 0x12e0 <puts+0x1c>
    1304:	8a e0       	ldi	r24, 0x0A	; 10
    1306:	09 95       	icall
    1308:	89 2b       	or	r24, r25
    130a:	11 f4       	brne	.+4      	; 0x1310 <puts+0x4c>
    130c:	c8 01       	movw	r24, r16
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <puts+0x50>
    1310:	8f ef       	ldi	r24, 0xFF	; 255
    1312:	9f ef       	ldi	r25, 0xFF	; 255
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	08 95       	ret

0000131e <vfprintf>:
    131e:	ac e0       	ldi	r26, 0x0C	; 12
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e5 e9       	ldi	r30, 0x95	; 149
    1324:	f9 e0       	ldi	r31, 0x09	; 9
    1326:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__prologue_saves__>
    132a:	7c 01       	movw	r14, r24
    132c:	6b 01       	movw	r12, r22
    132e:	8a 01       	movw	r16, r20
    1330:	fc 01       	movw	r30, r24
    1332:	17 82       	std	Z+7, r1	; 0x07
    1334:	16 82       	std	Z+6, r1	; 0x06
    1336:	83 81       	ldd	r24, Z+3	; 0x03
    1338:	81 ff       	sbrs	r24, 1
    133a:	bd c1       	rjmp	.+890    	; 0x16b6 <vfprintf+0x398>
    133c:	ce 01       	movw	r24, r28
    133e:	01 96       	adiw	r24, 0x01	; 1
    1340:	4c 01       	movw	r8, r24
    1342:	f7 01       	movw	r30, r14
    1344:	93 81       	ldd	r25, Z+3	; 0x03
    1346:	f6 01       	movw	r30, r12
    1348:	93 fd       	sbrc	r25, 3
    134a:	85 91       	lpm	r24, Z+
    134c:	93 ff       	sbrs	r25, 3
    134e:	81 91       	ld	r24, Z+
    1350:	6f 01       	movw	r12, r30
    1352:	88 23       	and	r24, r24
    1354:	09 f4       	brne	.+2      	; 0x1358 <vfprintf+0x3a>
    1356:	ab c1       	rjmp	.+854    	; 0x16ae <vfprintf+0x390>
    1358:	85 32       	cpi	r24, 0x25	; 37
    135a:	39 f4       	brne	.+14     	; 0x136a <vfprintf+0x4c>
    135c:	93 fd       	sbrc	r25, 3
    135e:	85 91       	lpm	r24, Z+
    1360:	93 ff       	sbrs	r25, 3
    1362:	81 91       	ld	r24, Z+
    1364:	6f 01       	movw	r12, r30
    1366:	85 32       	cpi	r24, 0x25	; 37
    1368:	29 f4       	brne	.+10     	; 0x1374 <vfprintf+0x56>
    136a:	b7 01       	movw	r22, r14
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <fputc>
    1372:	e7 cf       	rjmp	.-50     	; 0x1342 <vfprintf+0x24>
    1374:	51 2c       	mov	r5, r1
    1376:	31 2c       	mov	r3, r1
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	20 32       	cpi	r18, 0x20	; 32
    137c:	a0 f4       	brcc	.+40     	; 0x13a6 <vfprintf+0x88>
    137e:	8b 32       	cpi	r24, 0x2B	; 43
    1380:	69 f0       	breq	.+26     	; 0x139c <vfprintf+0x7e>
    1382:	30 f4       	brcc	.+12     	; 0x1390 <vfprintf+0x72>
    1384:	80 32       	cpi	r24, 0x20	; 32
    1386:	59 f0       	breq	.+22     	; 0x139e <vfprintf+0x80>
    1388:	83 32       	cpi	r24, 0x23	; 35
    138a:	69 f4       	brne	.+26     	; 0x13a6 <vfprintf+0x88>
    138c:	20 61       	ori	r18, 0x10	; 16
    138e:	2c c0       	rjmp	.+88     	; 0x13e8 <vfprintf+0xca>
    1390:	8d 32       	cpi	r24, 0x2D	; 45
    1392:	39 f0       	breq	.+14     	; 0x13a2 <vfprintf+0x84>
    1394:	80 33       	cpi	r24, 0x30	; 48
    1396:	39 f4       	brne	.+14     	; 0x13a6 <vfprintf+0x88>
    1398:	21 60       	ori	r18, 0x01	; 1
    139a:	26 c0       	rjmp	.+76     	; 0x13e8 <vfprintf+0xca>
    139c:	22 60       	ori	r18, 0x02	; 2
    139e:	24 60       	ori	r18, 0x04	; 4
    13a0:	23 c0       	rjmp	.+70     	; 0x13e8 <vfprintf+0xca>
    13a2:	28 60       	ori	r18, 0x08	; 8
    13a4:	21 c0       	rjmp	.+66     	; 0x13e8 <vfprintf+0xca>
    13a6:	27 fd       	sbrc	r18, 7
    13a8:	27 c0       	rjmp	.+78     	; 0x13f8 <vfprintf+0xda>
    13aa:	30 ed       	ldi	r19, 0xD0	; 208
    13ac:	38 0f       	add	r19, r24
    13ae:	3a 30       	cpi	r19, 0x0A	; 10
    13b0:	78 f4       	brcc	.+30     	; 0x13d0 <vfprintf+0xb2>
    13b2:	26 ff       	sbrs	r18, 6
    13b4:	06 c0       	rjmp	.+12     	; 0x13c2 <vfprintf+0xa4>
    13b6:	fa e0       	ldi	r31, 0x0A	; 10
    13b8:	5f 9e       	mul	r5, r31
    13ba:	30 0d       	add	r19, r0
    13bc:	11 24       	eor	r1, r1
    13be:	53 2e       	mov	r5, r19
    13c0:	13 c0       	rjmp	.+38     	; 0x13e8 <vfprintf+0xca>
    13c2:	8a e0       	ldi	r24, 0x0A	; 10
    13c4:	38 9e       	mul	r3, r24
    13c6:	30 0d       	add	r19, r0
    13c8:	11 24       	eor	r1, r1
    13ca:	33 2e       	mov	r3, r19
    13cc:	20 62       	ori	r18, 0x20	; 32
    13ce:	0c c0       	rjmp	.+24     	; 0x13e8 <vfprintf+0xca>
    13d0:	8e 32       	cpi	r24, 0x2E	; 46
    13d2:	21 f4       	brne	.+8      	; 0x13dc <vfprintf+0xbe>
    13d4:	26 fd       	sbrc	r18, 6
    13d6:	6b c1       	rjmp	.+726    	; 0x16ae <vfprintf+0x390>
    13d8:	20 64       	ori	r18, 0x40	; 64
    13da:	06 c0       	rjmp	.+12     	; 0x13e8 <vfprintf+0xca>
    13dc:	8c 36       	cpi	r24, 0x6C	; 108
    13de:	11 f4       	brne	.+4      	; 0x13e4 <vfprintf+0xc6>
    13e0:	20 68       	ori	r18, 0x80	; 128
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <vfprintf+0xca>
    13e4:	88 36       	cpi	r24, 0x68	; 104
    13e6:	41 f4       	brne	.+16     	; 0x13f8 <vfprintf+0xda>
    13e8:	f6 01       	movw	r30, r12
    13ea:	93 fd       	sbrc	r25, 3
    13ec:	85 91       	lpm	r24, Z+
    13ee:	93 ff       	sbrs	r25, 3
    13f0:	81 91       	ld	r24, Z+
    13f2:	6f 01       	movw	r12, r30
    13f4:	81 11       	cpse	r24, r1
    13f6:	c1 cf       	rjmp	.-126    	; 0x137a <vfprintf+0x5c>
    13f8:	98 2f       	mov	r25, r24
    13fa:	9f 7d       	andi	r25, 0xDF	; 223
    13fc:	95 54       	subi	r25, 0x45	; 69
    13fe:	93 30       	cpi	r25, 0x03	; 3
    1400:	28 f4       	brcc	.+10     	; 0x140c <vfprintf+0xee>
    1402:	0c 5f       	subi	r16, 0xFC	; 252
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	ff e3       	ldi	r31, 0x3F	; 63
    1408:	f9 83       	std	Y+1, r31	; 0x01
    140a:	0d c0       	rjmp	.+26     	; 0x1426 <vfprintf+0x108>
    140c:	83 36       	cpi	r24, 0x63	; 99
    140e:	31 f0       	breq	.+12     	; 0x141c <vfprintf+0xfe>
    1410:	83 37       	cpi	r24, 0x73	; 115
    1412:	71 f0       	breq	.+28     	; 0x1430 <vfprintf+0x112>
    1414:	83 35       	cpi	r24, 0x53	; 83
    1416:	09 f0       	breq	.+2      	; 0x141a <vfprintf+0xfc>
    1418:	5b c0       	rjmp	.+182    	; 0x14d0 <vfprintf+0x1b2>
    141a:	22 c0       	rjmp	.+68     	; 0x1460 <vfprintf+0x142>
    141c:	f8 01       	movw	r30, r16
    141e:	80 81       	ld	r24, Z
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	0e 5f       	subi	r16, 0xFE	; 254
    1424:	1f 4f       	sbci	r17, 0xFF	; 255
    1426:	44 24       	eor	r4, r4
    1428:	43 94       	inc	r4
    142a:	51 2c       	mov	r5, r1
    142c:	54 01       	movw	r10, r8
    142e:	15 c0       	rjmp	.+42     	; 0x145a <vfprintf+0x13c>
    1430:	38 01       	movw	r6, r16
    1432:	f2 e0       	ldi	r31, 0x02	; 2
    1434:	6f 0e       	add	r6, r31
    1436:	71 1c       	adc	r7, r1
    1438:	f8 01       	movw	r30, r16
    143a:	a0 80       	ld	r10, Z
    143c:	b1 80       	ldd	r11, Z+1	; 0x01
    143e:	26 ff       	sbrs	r18, 6
    1440:	03 c0       	rjmp	.+6      	; 0x1448 <vfprintf+0x12a>
    1442:	65 2d       	mov	r22, r5
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	02 c0       	rjmp	.+4      	; 0x144c <vfprintf+0x12e>
    1448:	6f ef       	ldi	r22, 0xFF	; 255
    144a:	7f ef       	ldi	r23, 0xFF	; 255
    144c:	c5 01       	movw	r24, r10
    144e:	2c 87       	std	Y+12, r18	; 0x0c
    1450:	0e 94 8f 0b 	call	0x171e	; 0x171e <strnlen>
    1454:	2c 01       	movw	r4, r24
    1456:	83 01       	movw	r16, r6
    1458:	2c 85       	ldd	r18, Y+12	; 0x0c
    145a:	2f 77       	andi	r18, 0x7F	; 127
    145c:	22 2e       	mov	r2, r18
    145e:	17 c0       	rjmp	.+46     	; 0x148e <vfprintf+0x170>
    1460:	38 01       	movw	r6, r16
    1462:	f2 e0       	ldi	r31, 0x02	; 2
    1464:	6f 0e       	add	r6, r31
    1466:	71 1c       	adc	r7, r1
    1468:	f8 01       	movw	r30, r16
    146a:	a0 80       	ld	r10, Z
    146c:	b1 80       	ldd	r11, Z+1	; 0x01
    146e:	26 ff       	sbrs	r18, 6
    1470:	03 c0       	rjmp	.+6      	; 0x1478 <vfprintf+0x15a>
    1472:	65 2d       	mov	r22, r5
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	02 c0       	rjmp	.+4      	; 0x147c <vfprintf+0x15e>
    1478:	6f ef       	ldi	r22, 0xFF	; 255
    147a:	7f ef       	ldi	r23, 0xFF	; 255
    147c:	c5 01       	movw	r24, r10
    147e:	2c 87       	std	Y+12, r18	; 0x0c
    1480:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <strnlen_P>
    1484:	2c 01       	movw	r4, r24
    1486:	2c 85       	ldd	r18, Y+12	; 0x0c
    1488:	20 68       	ori	r18, 0x80	; 128
    148a:	22 2e       	mov	r2, r18
    148c:	83 01       	movw	r16, r6
    148e:	23 fc       	sbrc	r2, 3
    1490:	1b c0       	rjmp	.+54     	; 0x14c8 <vfprintf+0x1aa>
    1492:	83 2d       	mov	r24, r3
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	48 16       	cp	r4, r24
    1498:	59 06       	cpc	r5, r25
    149a:	b0 f4       	brcc	.+44     	; 0x14c8 <vfprintf+0x1aa>
    149c:	b7 01       	movw	r22, r14
    149e:	80 e2       	ldi	r24, 0x20	; 32
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	0e 94 9a 0b 	call	0x1734	; 0x1734 <fputc>
    14a6:	3a 94       	dec	r3
    14a8:	f4 cf       	rjmp	.-24     	; 0x1492 <vfprintf+0x174>
    14aa:	f5 01       	movw	r30, r10
    14ac:	27 fc       	sbrc	r2, 7
    14ae:	85 91       	lpm	r24, Z+
    14b0:	27 fe       	sbrs	r2, 7
    14b2:	81 91       	ld	r24, Z+
    14b4:	5f 01       	movw	r10, r30
    14b6:	b7 01       	movw	r22, r14
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	0e 94 9a 0b 	call	0x1734	; 0x1734 <fputc>
    14be:	31 10       	cpse	r3, r1
    14c0:	3a 94       	dec	r3
    14c2:	f1 e0       	ldi	r31, 0x01	; 1
    14c4:	4f 1a       	sub	r4, r31
    14c6:	51 08       	sbc	r5, r1
    14c8:	41 14       	cp	r4, r1
    14ca:	51 04       	cpc	r5, r1
    14cc:	71 f7       	brne	.-36     	; 0x14aa <vfprintf+0x18c>
    14ce:	e5 c0       	rjmp	.+458    	; 0x169a <vfprintf+0x37c>
    14d0:	84 36       	cpi	r24, 0x64	; 100
    14d2:	11 f0       	breq	.+4      	; 0x14d8 <vfprintf+0x1ba>
    14d4:	89 36       	cpi	r24, 0x69	; 105
    14d6:	39 f5       	brne	.+78     	; 0x1526 <vfprintf+0x208>
    14d8:	f8 01       	movw	r30, r16
    14da:	27 ff       	sbrs	r18, 7
    14dc:	07 c0       	rjmp	.+14     	; 0x14ec <vfprintf+0x1ce>
    14de:	60 81       	ld	r22, Z
    14e0:	71 81       	ldd	r23, Z+1	; 0x01
    14e2:	82 81       	ldd	r24, Z+2	; 0x02
    14e4:	93 81       	ldd	r25, Z+3	; 0x03
    14e6:	0c 5f       	subi	r16, 0xFC	; 252
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	08 c0       	rjmp	.+16     	; 0x14fc <vfprintf+0x1de>
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	88 27       	eor	r24, r24
    14f2:	77 fd       	sbrc	r23, 7
    14f4:	80 95       	com	r24
    14f6:	98 2f       	mov	r25, r24
    14f8:	0e 5f       	subi	r16, 0xFE	; 254
    14fa:	1f 4f       	sbci	r17, 0xFF	; 255
    14fc:	2f 76       	andi	r18, 0x6F	; 111
    14fe:	b2 2e       	mov	r11, r18
    1500:	97 ff       	sbrs	r25, 7
    1502:	09 c0       	rjmp	.+18     	; 0x1516 <vfprintf+0x1f8>
    1504:	90 95       	com	r25
    1506:	80 95       	com	r24
    1508:	70 95       	com	r23
    150a:	61 95       	neg	r22
    150c:	7f 4f       	sbci	r23, 0xFF	; 255
    150e:	8f 4f       	sbci	r24, 0xFF	; 255
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	20 68       	ori	r18, 0x80	; 128
    1514:	b2 2e       	mov	r11, r18
    1516:	2a e0       	ldi	r18, 0x0A	; 10
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	a4 01       	movw	r20, r8
    151c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__ultoa_invert>
    1520:	a8 2e       	mov	r10, r24
    1522:	a8 18       	sub	r10, r8
    1524:	44 c0       	rjmp	.+136    	; 0x15ae <vfprintf+0x290>
    1526:	85 37       	cpi	r24, 0x75	; 117
    1528:	29 f4       	brne	.+10     	; 0x1534 <vfprintf+0x216>
    152a:	2f 7e       	andi	r18, 0xEF	; 239
    152c:	b2 2e       	mov	r11, r18
    152e:	2a e0       	ldi	r18, 0x0A	; 10
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	25 c0       	rjmp	.+74     	; 0x157e <vfprintf+0x260>
    1534:	f2 2f       	mov	r31, r18
    1536:	f9 7f       	andi	r31, 0xF9	; 249
    1538:	bf 2e       	mov	r11, r31
    153a:	8f 36       	cpi	r24, 0x6F	; 111
    153c:	c1 f0       	breq	.+48     	; 0x156e <vfprintf+0x250>
    153e:	18 f4       	brcc	.+6      	; 0x1546 <vfprintf+0x228>
    1540:	88 35       	cpi	r24, 0x58	; 88
    1542:	79 f0       	breq	.+30     	; 0x1562 <vfprintf+0x244>
    1544:	b4 c0       	rjmp	.+360    	; 0x16ae <vfprintf+0x390>
    1546:	80 37       	cpi	r24, 0x70	; 112
    1548:	19 f0       	breq	.+6      	; 0x1550 <vfprintf+0x232>
    154a:	88 37       	cpi	r24, 0x78	; 120
    154c:	21 f0       	breq	.+8      	; 0x1556 <vfprintf+0x238>
    154e:	af c0       	rjmp	.+350    	; 0x16ae <vfprintf+0x390>
    1550:	2f 2f       	mov	r18, r31
    1552:	20 61       	ori	r18, 0x10	; 16
    1554:	b2 2e       	mov	r11, r18
    1556:	b4 fe       	sbrs	r11, 4
    1558:	0d c0       	rjmp	.+26     	; 0x1574 <vfprintf+0x256>
    155a:	8b 2d       	mov	r24, r11
    155c:	84 60       	ori	r24, 0x04	; 4
    155e:	b8 2e       	mov	r11, r24
    1560:	09 c0       	rjmp	.+18     	; 0x1574 <vfprintf+0x256>
    1562:	24 ff       	sbrs	r18, 4
    1564:	0a c0       	rjmp	.+20     	; 0x157a <vfprintf+0x25c>
    1566:	9f 2f       	mov	r25, r31
    1568:	96 60       	ori	r25, 0x06	; 6
    156a:	b9 2e       	mov	r11, r25
    156c:	06 c0       	rjmp	.+12     	; 0x157a <vfprintf+0x25c>
    156e:	28 e0       	ldi	r18, 0x08	; 8
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	05 c0       	rjmp	.+10     	; 0x157e <vfprintf+0x260>
    1574:	20 e1       	ldi	r18, 0x10	; 16
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	02 c0       	rjmp	.+4      	; 0x157e <vfprintf+0x260>
    157a:	20 e1       	ldi	r18, 0x10	; 16
    157c:	32 e0       	ldi	r19, 0x02	; 2
    157e:	f8 01       	movw	r30, r16
    1580:	b7 fe       	sbrs	r11, 7
    1582:	07 c0       	rjmp	.+14     	; 0x1592 <vfprintf+0x274>
    1584:	60 81       	ld	r22, Z
    1586:	71 81       	ldd	r23, Z+1	; 0x01
    1588:	82 81       	ldd	r24, Z+2	; 0x02
    158a:	93 81       	ldd	r25, Z+3	; 0x03
    158c:	0c 5f       	subi	r16, 0xFC	; 252
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	06 c0       	rjmp	.+12     	; 0x159e <vfprintf+0x280>
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	0e 5f       	subi	r16, 0xFE	; 254
    159c:	1f 4f       	sbci	r17, 0xFF	; 255
    159e:	a4 01       	movw	r20, r8
    15a0:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__ultoa_invert>
    15a4:	a8 2e       	mov	r10, r24
    15a6:	a8 18       	sub	r10, r8
    15a8:	fb 2d       	mov	r31, r11
    15aa:	ff 77       	andi	r31, 0x7F	; 127
    15ac:	bf 2e       	mov	r11, r31
    15ae:	b6 fe       	sbrs	r11, 6
    15b0:	0b c0       	rjmp	.+22     	; 0x15c8 <vfprintf+0x2aa>
    15b2:	2b 2d       	mov	r18, r11
    15b4:	2e 7f       	andi	r18, 0xFE	; 254
    15b6:	a5 14       	cp	r10, r5
    15b8:	50 f4       	brcc	.+20     	; 0x15ce <vfprintf+0x2b0>
    15ba:	b4 fe       	sbrs	r11, 4
    15bc:	0a c0       	rjmp	.+20     	; 0x15d2 <vfprintf+0x2b4>
    15be:	b2 fc       	sbrc	r11, 2
    15c0:	08 c0       	rjmp	.+16     	; 0x15d2 <vfprintf+0x2b4>
    15c2:	2b 2d       	mov	r18, r11
    15c4:	2e 7e       	andi	r18, 0xEE	; 238
    15c6:	05 c0       	rjmp	.+10     	; 0x15d2 <vfprintf+0x2b4>
    15c8:	7a 2c       	mov	r7, r10
    15ca:	2b 2d       	mov	r18, r11
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <vfprintf+0x2b6>
    15ce:	7a 2c       	mov	r7, r10
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <vfprintf+0x2b6>
    15d2:	75 2c       	mov	r7, r5
    15d4:	24 ff       	sbrs	r18, 4
    15d6:	0d c0       	rjmp	.+26     	; 0x15f2 <vfprintf+0x2d4>
    15d8:	fe 01       	movw	r30, r28
    15da:	ea 0d       	add	r30, r10
    15dc:	f1 1d       	adc	r31, r1
    15de:	80 81       	ld	r24, Z
    15e0:	80 33       	cpi	r24, 0x30	; 48
    15e2:	11 f4       	brne	.+4      	; 0x15e8 <vfprintf+0x2ca>
    15e4:	29 7e       	andi	r18, 0xE9	; 233
    15e6:	09 c0       	rjmp	.+18     	; 0x15fa <vfprintf+0x2dc>
    15e8:	22 ff       	sbrs	r18, 2
    15ea:	06 c0       	rjmp	.+12     	; 0x15f8 <vfprintf+0x2da>
    15ec:	73 94       	inc	r7
    15ee:	73 94       	inc	r7
    15f0:	04 c0       	rjmp	.+8      	; 0x15fa <vfprintf+0x2dc>
    15f2:	82 2f       	mov	r24, r18
    15f4:	86 78       	andi	r24, 0x86	; 134
    15f6:	09 f0       	breq	.+2      	; 0x15fa <vfprintf+0x2dc>
    15f8:	73 94       	inc	r7
    15fa:	23 fd       	sbrc	r18, 3
    15fc:	13 c0       	rjmp	.+38     	; 0x1624 <vfprintf+0x306>
    15fe:	20 ff       	sbrs	r18, 0
    1600:	06 c0       	rjmp	.+12     	; 0x160e <vfprintf+0x2f0>
    1602:	5a 2c       	mov	r5, r10
    1604:	73 14       	cp	r7, r3
    1606:	18 f4       	brcc	.+6      	; 0x160e <vfprintf+0x2f0>
    1608:	53 0c       	add	r5, r3
    160a:	57 18       	sub	r5, r7
    160c:	73 2c       	mov	r7, r3
    160e:	73 14       	cp	r7, r3
    1610:	68 f4       	brcc	.+26     	; 0x162c <vfprintf+0x30e>
    1612:	b7 01       	movw	r22, r14
    1614:	80 e2       	ldi	r24, 0x20	; 32
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	2c 87       	std	Y+12, r18	; 0x0c
    161a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <fputc>
    161e:	73 94       	inc	r7
    1620:	2c 85       	ldd	r18, Y+12	; 0x0c
    1622:	f5 cf       	rjmp	.-22     	; 0x160e <vfprintf+0x2f0>
    1624:	73 14       	cp	r7, r3
    1626:	10 f4       	brcc	.+4      	; 0x162c <vfprintf+0x30e>
    1628:	37 18       	sub	r3, r7
    162a:	01 c0       	rjmp	.+2      	; 0x162e <vfprintf+0x310>
    162c:	31 2c       	mov	r3, r1
    162e:	24 ff       	sbrs	r18, 4
    1630:	12 c0       	rjmp	.+36     	; 0x1656 <vfprintf+0x338>
    1632:	b7 01       	movw	r22, r14
    1634:	80 e3       	ldi	r24, 0x30	; 48
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	2c 87       	std	Y+12, r18	; 0x0c
    163a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <fputc>
    163e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1640:	22 ff       	sbrs	r18, 2
    1642:	17 c0       	rjmp	.+46     	; 0x1672 <vfprintf+0x354>
    1644:	21 ff       	sbrs	r18, 1
    1646:	03 c0       	rjmp	.+6      	; 0x164e <vfprintf+0x330>
    1648:	88 e5       	ldi	r24, 0x58	; 88
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <vfprintf+0x334>
    164e:	88 e7       	ldi	r24, 0x78	; 120
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	b7 01       	movw	r22, r14
    1654:	0c c0       	rjmp	.+24     	; 0x166e <vfprintf+0x350>
    1656:	82 2f       	mov	r24, r18
    1658:	86 78       	andi	r24, 0x86	; 134
    165a:	59 f0       	breq	.+22     	; 0x1672 <vfprintf+0x354>
    165c:	21 fd       	sbrc	r18, 1
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <vfprintf+0x346>
    1660:	80 e2       	ldi	r24, 0x20	; 32
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <vfprintf+0x348>
    1664:	8b e2       	ldi	r24, 0x2B	; 43
    1666:	27 fd       	sbrc	r18, 7
    1668:	8d e2       	ldi	r24, 0x2D	; 45
    166a:	b7 01       	movw	r22, r14
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <fputc>
    1672:	a5 14       	cp	r10, r5
    1674:	38 f4       	brcc	.+14     	; 0x1684 <vfprintf+0x366>
    1676:	b7 01       	movw	r22, r14
    1678:	80 e3       	ldi	r24, 0x30	; 48
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <fputc>
    1680:	5a 94       	dec	r5
    1682:	f7 cf       	rjmp	.-18     	; 0x1672 <vfprintf+0x354>
    1684:	aa 94       	dec	r10
    1686:	f4 01       	movw	r30, r8
    1688:	ea 0d       	add	r30, r10
    168a:	f1 1d       	adc	r31, r1
    168c:	80 81       	ld	r24, Z
    168e:	b7 01       	movw	r22, r14
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 94 9a 0b 	call	0x1734	; 0x1734 <fputc>
    1696:	a1 10       	cpse	r10, r1
    1698:	f5 cf       	rjmp	.-22     	; 0x1684 <vfprintf+0x366>
    169a:	33 20       	and	r3, r3
    169c:	09 f4       	brne	.+2      	; 0x16a0 <vfprintf+0x382>
    169e:	51 ce       	rjmp	.-862    	; 0x1342 <vfprintf+0x24>
    16a0:	b7 01       	movw	r22, r14
    16a2:	80 e2       	ldi	r24, 0x20	; 32
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 9a 0b 	call	0x1734	; 0x1734 <fputc>
    16aa:	3a 94       	dec	r3
    16ac:	f6 cf       	rjmp	.-20     	; 0x169a <vfprintf+0x37c>
    16ae:	f7 01       	movw	r30, r14
    16b0:	86 81       	ldd	r24, Z+6	; 0x06
    16b2:	97 81       	ldd	r25, Z+7	; 0x07
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <vfprintf+0x39c>
    16b6:	8f ef       	ldi	r24, 0xFF	; 255
    16b8:	9f ef       	ldi	r25, 0xFF	; 255
    16ba:	2c 96       	adiw	r28, 0x0c	; 12
    16bc:	e2 e1       	ldi	r30, 0x12	; 18
    16be:	0c 94 46 0c 	jmp	0x188c	; 0x188c <__epilogue_restores__>

000016c2 <calloc>:
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	86 9f       	mul	r24, r22
    16cc:	80 01       	movw	r16, r0
    16ce:	87 9f       	mul	r24, r23
    16d0:	10 0d       	add	r17, r0
    16d2:	96 9f       	mul	r25, r22
    16d4:	10 0d       	add	r17, r0
    16d6:	11 24       	eor	r1, r1
    16d8:	c8 01       	movw	r24, r16
    16da:	0e 94 ca 07 	call	0xf94	; 0xf94 <malloc>
    16de:	ec 01       	movw	r28, r24
    16e0:	00 97       	sbiw	r24, 0x00	; 0
    16e2:	29 f0       	breq	.+10     	; 0x16ee <calloc+0x2c>
    16e4:	a8 01       	movw	r20, r16
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	0e 94 88 0b 	call	0x1710	; 0x1710 <memset>
    16ee:	ce 01       	movw	r24, r28
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	08 95       	ret

000016fa <strnlen_P>:
    16fa:	fc 01       	movw	r30, r24
    16fc:	05 90       	lpm	r0, Z+
    16fe:	61 50       	subi	r22, 0x01	; 1
    1700:	70 40       	sbci	r23, 0x00	; 0
    1702:	01 10       	cpse	r0, r1
    1704:	d8 f7       	brcc	.-10     	; 0x16fc <strnlen_P+0x2>
    1706:	80 95       	com	r24
    1708:	90 95       	com	r25
    170a:	8e 0f       	add	r24, r30
    170c:	9f 1f       	adc	r25, r31
    170e:	08 95       	ret

00001710 <memset>:
    1710:	dc 01       	movw	r26, r24
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <memset+0x6>
    1714:	6d 93       	st	X+, r22
    1716:	41 50       	subi	r20, 0x01	; 1
    1718:	50 40       	sbci	r21, 0x00	; 0
    171a:	e0 f7       	brcc	.-8      	; 0x1714 <memset+0x4>
    171c:	08 95       	ret

0000171e <strnlen>:
    171e:	fc 01       	movw	r30, r24
    1720:	61 50       	subi	r22, 0x01	; 1
    1722:	70 40       	sbci	r23, 0x00	; 0
    1724:	01 90       	ld	r0, Z+
    1726:	01 10       	cpse	r0, r1
    1728:	d8 f7       	brcc	.-10     	; 0x1720 <strnlen+0x2>
    172a:	80 95       	com	r24
    172c:	90 95       	com	r25
    172e:	8e 0f       	add	r24, r30
    1730:	9f 1f       	adc	r25, r31
    1732:	08 95       	ret

00001734 <fputc>:
    1734:	0f 93       	push	r16
    1736:	1f 93       	push	r17
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	18 2f       	mov	r17, r24
    173e:	09 2f       	mov	r16, r25
    1740:	eb 01       	movw	r28, r22
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	81 fd       	sbrc	r24, 1
    1746:	03 c0       	rjmp	.+6      	; 0x174e <fputc+0x1a>
    1748:	8f ef       	ldi	r24, 0xFF	; 255
    174a:	9f ef       	ldi	r25, 0xFF	; 255
    174c:	20 c0       	rjmp	.+64     	; 0x178e <fputc+0x5a>
    174e:	82 ff       	sbrs	r24, 2
    1750:	10 c0       	rjmp	.+32     	; 0x1772 <fputc+0x3e>
    1752:	4e 81       	ldd	r20, Y+6	; 0x06
    1754:	5f 81       	ldd	r21, Y+7	; 0x07
    1756:	2c 81       	ldd	r18, Y+4	; 0x04
    1758:	3d 81       	ldd	r19, Y+5	; 0x05
    175a:	42 17       	cp	r20, r18
    175c:	53 07       	cpc	r21, r19
    175e:	7c f4       	brge	.+30     	; 0x177e <fputc+0x4a>
    1760:	e8 81       	ld	r30, Y
    1762:	f9 81       	ldd	r31, Y+1	; 0x01
    1764:	9f 01       	movw	r18, r30
    1766:	2f 5f       	subi	r18, 0xFF	; 255
    1768:	3f 4f       	sbci	r19, 0xFF	; 255
    176a:	39 83       	std	Y+1, r19	; 0x01
    176c:	28 83       	st	Y, r18
    176e:	10 83       	st	Z, r17
    1770:	06 c0       	rjmp	.+12     	; 0x177e <fputc+0x4a>
    1772:	e8 85       	ldd	r30, Y+8	; 0x08
    1774:	f9 85       	ldd	r31, Y+9	; 0x09
    1776:	81 2f       	mov	r24, r17
    1778:	09 95       	icall
    177a:	89 2b       	or	r24, r25
    177c:	29 f7       	brne	.-54     	; 0x1748 <fputc+0x14>
    177e:	2e 81       	ldd	r18, Y+6	; 0x06
    1780:	3f 81       	ldd	r19, Y+7	; 0x07
    1782:	2f 5f       	subi	r18, 0xFF	; 255
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	3f 83       	std	Y+7, r19	; 0x07
    1788:	2e 83       	std	Y+6, r18	; 0x06
    178a:	81 2f       	mov	r24, r17
    178c:	90 2f       	mov	r25, r16
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	08 95       	ret

00001798 <__ultoa_invert>:
    1798:	fa 01       	movw	r30, r20
    179a:	aa 27       	eor	r26, r26
    179c:	28 30       	cpi	r18, 0x08	; 8
    179e:	51 f1       	breq	.+84     	; 0x17f4 <__ultoa_invert+0x5c>
    17a0:	20 31       	cpi	r18, 0x10	; 16
    17a2:	81 f1       	breq	.+96     	; 0x1804 <__ultoa_invert+0x6c>
    17a4:	e8 94       	clt
    17a6:	6f 93       	push	r22
    17a8:	6e 7f       	andi	r22, 0xFE	; 254
    17aa:	6e 5f       	subi	r22, 0xFE	; 254
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	8f 4f       	sbci	r24, 0xFF	; 255
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
    17b2:	af 4f       	sbci	r26, 0xFF	; 255
    17b4:	b1 e0       	ldi	r27, 0x01	; 1
    17b6:	3e d0       	rcall	.+124    	; 0x1834 <__ultoa_invert+0x9c>
    17b8:	b4 e0       	ldi	r27, 0x04	; 4
    17ba:	3c d0       	rcall	.+120    	; 0x1834 <__ultoa_invert+0x9c>
    17bc:	67 0f       	add	r22, r23
    17be:	78 1f       	adc	r23, r24
    17c0:	89 1f       	adc	r24, r25
    17c2:	9a 1f       	adc	r25, r26
    17c4:	a1 1d       	adc	r26, r1
    17c6:	68 0f       	add	r22, r24
    17c8:	79 1f       	adc	r23, r25
    17ca:	8a 1f       	adc	r24, r26
    17cc:	91 1d       	adc	r25, r1
    17ce:	a1 1d       	adc	r26, r1
    17d0:	6a 0f       	add	r22, r26
    17d2:	71 1d       	adc	r23, r1
    17d4:	81 1d       	adc	r24, r1
    17d6:	91 1d       	adc	r25, r1
    17d8:	a1 1d       	adc	r26, r1
    17da:	20 d0       	rcall	.+64     	; 0x181c <__ultoa_invert+0x84>
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <__ultoa_invert+0x48>
    17de:	68 94       	set
    17e0:	3f 91       	pop	r19
    17e2:	2a e0       	ldi	r18, 0x0A	; 10
    17e4:	26 9f       	mul	r18, r22
    17e6:	11 24       	eor	r1, r1
    17e8:	30 19       	sub	r19, r0
    17ea:	30 5d       	subi	r19, 0xD0	; 208
    17ec:	31 93       	st	Z+, r19
    17ee:	de f6       	brtc	.-74     	; 0x17a6 <__ultoa_invert+0xe>
    17f0:	cf 01       	movw	r24, r30
    17f2:	08 95       	ret
    17f4:	46 2f       	mov	r20, r22
    17f6:	47 70       	andi	r20, 0x07	; 7
    17f8:	40 5d       	subi	r20, 0xD0	; 208
    17fa:	41 93       	st	Z+, r20
    17fc:	b3 e0       	ldi	r27, 0x03	; 3
    17fe:	0f d0       	rcall	.+30     	; 0x181e <__ultoa_invert+0x86>
    1800:	c9 f7       	brne	.-14     	; 0x17f4 <__ultoa_invert+0x5c>
    1802:	f6 cf       	rjmp	.-20     	; 0x17f0 <__ultoa_invert+0x58>
    1804:	46 2f       	mov	r20, r22
    1806:	4f 70       	andi	r20, 0x0F	; 15
    1808:	40 5d       	subi	r20, 0xD0	; 208
    180a:	4a 33       	cpi	r20, 0x3A	; 58
    180c:	18 f0       	brcs	.+6      	; 0x1814 <__ultoa_invert+0x7c>
    180e:	49 5d       	subi	r20, 0xD9	; 217
    1810:	31 fd       	sbrc	r19, 1
    1812:	40 52       	subi	r20, 0x20	; 32
    1814:	41 93       	st	Z+, r20
    1816:	02 d0       	rcall	.+4      	; 0x181c <__ultoa_invert+0x84>
    1818:	a9 f7       	brne	.-22     	; 0x1804 <__ultoa_invert+0x6c>
    181a:	ea cf       	rjmp	.-44     	; 0x17f0 <__ultoa_invert+0x58>
    181c:	b4 e0       	ldi	r27, 0x04	; 4
    181e:	a6 95       	lsr	r26
    1820:	97 95       	ror	r25
    1822:	87 95       	ror	r24
    1824:	77 95       	ror	r23
    1826:	67 95       	ror	r22
    1828:	ba 95       	dec	r27
    182a:	c9 f7       	brne	.-14     	; 0x181e <__ultoa_invert+0x86>
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	61 05       	cpc	r22, r1
    1830:	71 05       	cpc	r23, r1
    1832:	08 95       	ret
    1834:	9b 01       	movw	r18, r22
    1836:	ac 01       	movw	r20, r24
    1838:	0a 2e       	mov	r0, r26
    183a:	06 94       	lsr	r0
    183c:	57 95       	ror	r21
    183e:	47 95       	ror	r20
    1840:	37 95       	ror	r19
    1842:	27 95       	ror	r18
    1844:	ba 95       	dec	r27
    1846:	c9 f7       	brne	.-14     	; 0x183a <__ultoa_invert+0xa2>
    1848:	62 0f       	add	r22, r18
    184a:	73 1f       	adc	r23, r19
    184c:	84 1f       	adc	r24, r20
    184e:	95 1f       	adc	r25, r21
    1850:	a0 1d       	adc	r26, r0
    1852:	08 95       	ret

00001854 <__prologue_saves__>:
    1854:	2f 92       	push	r2
    1856:	3f 92       	push	r3
    1858:	4f 92       	push	r4
    185a:	5f 92       	push	r5
    185c:	6f 92       	push	r6
    185e:	7f 92       	push	r7
    1860:	8f 92       	push	r8
    1862:	9f 92       	push	r9
    1864:	af 92       	push	r10
    1866:	bf 92       	push	r11
    1868:	cf 92       	push	r12
    186a:	df 92       	push	r13
    186c:	ef 92       	push	r14
    186e:	ff 92       	push	r15
    1870:	0f 93       	push	r16
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	ca 1b       	sub	r28, r26
    187e:	db 0b       	sbc	r29, r27
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	09 94       	ijmp

0000188c <__epilogue_restores__>:
    188c:	2a 88       	ldd	r2, Y+18	; 0x12
    188e:	39 88       	ldd	r3, Y+17	; 0x11
    1890:	48 88       	ldd	r4, Y+16	; 0x10
    1892:	5f 84       	ldd	r5, Y+15	; 0x0f
    1894:	6e 84       	ldd	r6, Y+14	; 0x0e
    1896:	7d 84       	ldd	r7, Y+13	; 0x0d
    1898:	8c 84       	ldd	r8, Y+12	; 0x0c
    189a:	9b 84       	ldd	r9, Y+11	; 0x0b
    189c:	aa 84       	ldd	r10, Y+10	; 0x0a
    189e:	b9 84       	ldd	r11, Y+9	; 0x09
    18a0:	c8 84       	ldd	r12, Y+8	; 0x08
    18a2:	df 80       	ldd	r13, Y+7	; 0x07
    18a4:	ee 80       	ldd	r14, Y+6	; 0x06
    18a6:	fd 80       	ldd	r15, Y+5	; 0x05
    18a8:	0c 81       	ldd	r16, Y+4	; 0x04
    18aa:	1b 81       	ldd	r17, Y+3	; 0x03
    18ac:	aa 81       	ldd	r26, Y+2	; 0x02
    18ae:	b9 81       	ldd	r27, Y+1	; 0x01
    18b0:	ce 0f       	add	r28, r30
    18b2:	d1 1d       	adc	r29, r1
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	ed 01       	movw	r28, r26
    18c0:	08 95       	ret

000018c2 <_exit>:
    18c2:	f8 94       	cli

000018c4 <__stop_program>:
    18c4:	ff cf       	rjmp	.-2      	; 0x18c4 <__stop_program>
