
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000244  00800100  00001b50  00001be4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800344  00800344  00001e28  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000398  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000426c  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001875  00000000  00000000  00006488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014a6  00000000  00000000  00007cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000990  00000000  00000000  000091a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ae0  00000000  00000000  00009b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ff5  00000000  00000000  0000a614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f0  00000000  00000000  0000c609  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cc 01 	jmp	0x398	; 0x398 <__ctors_end>
       4:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__vector_1>
       8:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
       c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      10:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      14:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      18:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      1c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      20:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      24:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      28:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      2c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      30:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      34:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      38:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      3c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      40:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      44:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      48:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      4c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      50:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      54:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      58:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      5c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      60:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      64:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      68:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>
      6c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <MENU_draw_current_menu+0x1e>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????
     368:	24 2e       	mov	r2, r20
     36a:	6b 6b       	ori	r22, 0xBB	; 187
     36c:	3a 12       	cpse	r3, r26
     36e:	00 00       	nop
     370:	46 66       	ori	r20, 0x66	; 102
     372:	30 18       	sub	r3, r0
     374:	0c 66       	ori	r16, 0x6C	; 108
     376:	62 00       	.word	0x0062	; ????
     378:	30 7a       	andi	r19, 0xA0	; 160
     37a:	4f 5d       	subi	r20, 0xDF	; 223
     37c:	37 7a       	andi	r19, 0xA7	; 167
     37e:	48 00       	.word	0x0048	; ????
     380:	04 07       	cpc	r16, r20
     382:	03 00       	.word	0x0003	; ????
     384:	00 00       	nop
     386:	00 00       	nop
     388:	00 1c       	adc	r0, r0
     38a:	3e 63       	ori	r19, 0x3E	; 62
     38c:	41 00       	.word	0x0041	; ????
     38e:	00 00       	nop
     390:	00 41       	sbci	r16, 0x10	; 16
     392:	63 3e       	cpi	r22, 0xE3	; 227
     394:	1c 00       	.word	0x001c	; ????
	...

00000398 <__ctors_end>:
     398:	11 24       	eor	r1, r1
     39a:	1f be       	out	0x3f, r1	; 63
     39c:	cf ef       	ldi	r28, 0xFF	; 255
     39e:	d4 e0       	ldi	r29, 0x04	; 4
     3a0:	de bf       	out	0x3e, r29	; 62
     3a2:	cd bf       	out	0x3d, r28	; 61

000003a4 <__do_copy_data>:
     3a4:	13 e0       	ldi	r17, 0x03	; 3
     3a6:	a0 e0       	ldi	r26, 0x00	; 0
     3a8:	b1 e0       	ldi	r27, 0x01	; 1
     3aa:	e0 e5       	ldi	r30, 0x50	; 80
     3ac:	fb e1       	ldi	r31, 0x1B	; 27
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <__do_copy_data+0x10>
     3b0:	05 90       	lpm	r0, Z+
     3b2:	0d 92       	st	X+, r0
     3b4:	a4 34       	cpi	r26, 0x44	; 68
     3b6:	b1 07       	cpc	r27, r17
     3b8:	d9 f7       	brne	.-10     	; 0x3b0 <__do_copy_data+0xc>

000003ba <__do_clear_bss>:
     3ba:	23 e0       	ldi	r18, 0x03	; 3
     3bc:	a4 e4       	ldi	r26, 0x44	; 68
     3be:	b3 e0       	ldi	r27, 0x03	; 3
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <.do_clear_bss_start>

000003c2 <.do_clear_bss_loop>:
     3c2:	1d 92       	st	X+, r1

000003c4 <.do_clear_bss_start>:
     3c4:	a2 36       	cpi	r26, 0x62	; 98
     3c6:	b2 07       	cpc	r27, r18
     3c8:	e1 f7       	brne	.-8      	; 0x3c2 <.do_clear_bss_loop>
     3ca:	0e 94 2b 07 	call	0xe56	; 0xe56 <main>
     3ce:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <_exit>

000003d2 <__bad_interrupt>:
     3d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d6 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
     3d6:	30 98       	cbi	0x06, 0	; 6
     3d8:	08 95       	ret

000003da <ADC_read>:
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3da:	84 30       	cpi	r24, 0x04	; 4
     3dc:	40 f4       	brcc	.+16     	; 0x3ee <ADC_read+0x14>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
     3de:	8c 5f       	subi	r24, 0xFC	; 252
     3e0:	80 93 00 14 	sts	0x1400, r24
	
	//wait 'til /INTR is low
	while(test_bit(PINE, PINE0));
     3e4:	28 99       	sbic	0x05, 0	; 5
     3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <ADC_read+0xa>
	//reset interrupt
	inter = 0;
	*/

	//return current value
	return *adc; 
     3e8:	80 91 00 14 	lds	r24, 0x1400
     3ec:	08 95       	ret
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     3ee:	80 e0       	ldi	r24, 0x00	; 0
	inter = 0;
	*/

	//return current value
	return *adc; 
     3f0:	08 95       	ret

000003f2 <brightness_init>:
#include "OLED_driver.h"
#include "defines.h"


brightness_init() {
	OLED_reset();
     3f2:	0e 94 9c 07 	call	0xf38	; 0xf38 <OLED_reset>
	fprintf(OLED, "%s\0", "l_slider:");
     3f6:	26 e0       	ldi	r18, 0x06	; 6
     3f8:	31 e0       	ldi	r19, 0x01	; 1
     3fa:	49 e0       	ldi	r20, 0x09	; 9
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	70 e0       	ldi	r23, 0x00	; 0
     402:	8f e4       	ldi	r24, 0x4F	; 79
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <fwrite>
	OLED_pos(1,0);
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	0e 94 73 07 	call	0xee6	; 0xee6 <OLED_pos>
	fprintf(OLED, "%s\0", "sets brightness");
     412:	26 e0       	ldi	r18, 0x06	; 6
     414:	31 e0       	ldi	r19, 0x01	; 1
     416:	4f e0       	ldi	r20, 0x0F	; 15
     418:	50 e0       	ldi	r21, 0x00	; 0
     41a:	61 e0       	ldi	r22, 0x01	; 1
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	89 e5       	ldi	r24, 0x59	; 89
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <fwrite>
	OLED_pos(2,0);
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	0e 94 73 07 	call	0xee6	; 0xee6 <OLED_pos>
	fprintf(OLED, "%s\0", "l_button: back");
     42e:	26 e0       	ldi	r18, 0x06	; 6
     430:	31 e0       	ldi	r19, 0x01	; 1
     432:	4e e0       	ldi	r20, 0x0E	; 14
     434:	50 e0       	ldi	r21, 0x00	; 0
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	89 e6       	ldi	r24, 0x69	; 105
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <fwrite>
	for (int line = 4; line < 8; line++) {
		OLED_set_line(line);
     442:	84 e0       	ldi	r24, 0x04	; 4
     444:	0e 94 26 08 	call	0x104c	; 0x104c <OLED_set_line>
     448:	85 e0       	ldi	r24, 0x05	; 5
     44a:	0e 94 26 08 	call	0x104c	; 0x104c <OLED_set_line>
     44e:	86 e0       	ldi	r24, 0x06	; 6
     450:	0e 94 26 08 	call	0x104c	; 0x104c <OLED_set_line>
     454:	87 e0       	ldi	r24, 0x07	; 7
     456:	0e 94 26 08 	call	0x104c	; 0x104c <OLED_set_line>
	}
	
}
     45a:	08 95       	ret

0000045c <brightness_run>:

brightness_run() {
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
	brightness_init();
     462:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <brightness_init>
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
		slider_position = SLI_getPosition();
		//printf("slider_position %d\n", slider_position.right);
		printf("slider_position (left) %d\n", slider_position.left);
     466:	c8 e7       	ldi	r28, 0x78	; 120
     468:	d1 e0       	ldi	r29, 0x01	; 1
}

brightness_run() {
	brightness_init();
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     46a:	10 c0       	rjmp	.+32     	; 0x48c <brightness_run+0x30>
		slider_position = SLI_getPosition();
     46c:	0e 94 9a 03 	call	0x734	; 0x734 <SLI_getPosition>
     470:	16 2f       	mov	r17, r22
		//printf("slider_position %d\n", slider_position.right);
		printf("slider_position (left) %d\n", slider_position.left);
     472:	7f 93       	push	r23
     474:	6f 93       	push	r22
     476:	df 93       	push	r29
     478:	cf 93       	push	r28
     47a:	0e 94 8c 0a 	call	0x1518	; 0x1518 <printf>
		OLED_set_brightness(slider_position.left); //RIGHT funker ikke
     47e:	81 2f       	mov	r24, r17
     480:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <OLED_set_brightness>
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	0f 90       	pop	r0
}

brightness_run() {
	brightness_init();
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 1e 03 	call	0x63c	; 0x63c <JOY_button_pressed>
     492:	89 2b       	or	r24, r25
     494:	59 f3       	breq	.-42     	; 0x46c <brightness_run+0x10>
		slider_position = SLI_getPosition();
		//printf("slider_position %d\n", slider_position.right);
		printf("slider_position (left) %d\n", slider_position.left);
		OLED_set_brightness(slider_position.left); //RIGHT funker ikke
	}
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	08 95       	ret

0000049e <CAN_int_vect>:
ISR(INT0_vect){
	CAN_int_vect();
}


void CAN_int_vect() {
     49e:	cf 93       	push	r28
	uint8_t int_flags = MCP2515_read(MCP_CANINTF);
     4a0:	8c e2       	ldi	r24, 0x2C	; 44
     4a2:	0e 94 61 05 	call	0xac2	; 0xac2 <MCP2515_read>
     4a6:	c8 2f       	mov	r28, r24
	if(int_flags & MCP_RX0IF){
     4a8:	80 ff       	sbrs	r24, 0
     4aa:	0b c0       	rjmp	.+22     	; 0x4c2 <CAN_int_vect+0x24>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     4ac:	40 e0       	ldi	r20, 0x00	; 0
     4ae:	61 e0       	ldi	r22, 0x01	; 1
     4b0:	8c e2       	ldi	r24, 0x2C	; 44
     4b2:	0e 94 73 05 	call	0xae6	; 0xae6 <MCP2515_bit_modify>
		flag_RX0 = 1;
     4b6:	21 e0       	ldi	r18, 0x01	; 1
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	30 93 47 03 	sts	0x0347, r19
     4be:	20 93 46 03 	sts	0x0346, r18
	}
			
	if(int_flags & MCP_RX1IF){
     4c2:	c1 ff       	sbrs	r28, 1
     4c4:	0b c0       	rjmp	.+22     	; 0x4dc <CAN_int_vect+0x3e>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	62 e0       	ldi	r22, 0x02	; 2
     4ca:	8c e2       	ldi	r24, 0x2C	; 44
     4cc:	0e 94 73 05 	call	0xae6	; 0xae6 <MCP2515_bit_modify>
		flag_RX1 = 1;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	90 93 45 03 	sts	0x0345, r25
     4d8:	80 93 44 03 	sts	0x0344, r24
	}
			
	
	
}
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <__vector_1>:

volatile int flag_RX0 = 0;
volatile int flag_RX1 = 0;

//interrupt service routine
ISR(INT0_vect){
     4e0:	1f 92       	push	r1
     4e2:	0f 92       	push	r0
     4e4:	0f b6       	in	r0, 0x3f	; 63
     4e6:	0f 92       	push	r0
     4e8:	11 24       	eor	r1, r1
     4ea:	2f 93       	push	r18
     4ec:	3f 93       	push	r19
     4ee:	4f 93       	push	r20
     4f0:	5f 93       	push	r21
     4f2:	6f 93       	push	r22
     4f4:	7f 93       	push	r23
     4f6:	8f 93       	push	r24
     4f8:	9f 93       	push	r25
     4fa:	af 93       	push	r26
     4fc:	bf 93       	push	r27
     4fe:	ef 93       	push	r30
     500:	ff 93       	push	r31
	CAN_int_vect();
     502:	0e 94 4f 02 	call	0x49e	; 0x49e <CAN_int_vect>
}
     506:	ff 91       	pop	r31
     508:	ef 91       	pop	r30
     50a:	bf 91       	pop	r27
     50c:	af 91       	pop	r26
     50e:	9f 91       	pop	r25
     510:	8f 91       	pop	r24
     512:	7f 91       	pop	r23
     514:	6f 91       	pop	r22
     516:	5f 91       	pop	r21
     518:	4f 91       	pop	r20
     51a:	3f 91       	pop	r19
     51c:	2f 91       	pop	r18
     51e:	0f 90       	pop	r0
     520:	0f be       	out	0x3f, r0	; 63
     522:	0f 90       	pop	r0
     524:	1f 90       	pop	r1
     526:	18 95       	reti

00000528 <JOY_calibrate>:
	clear_bit(DDRB,PB2);
	clear_bit(SFIOR, PUD);
	JOY_calibrate();
}

void JOY_calibrate(){
     528:	bf 92       	push	r11
     52a:	cf 92       	push	r12
     52c:	df 92       	push	r13
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	0f 93       	push	r16
     534:	1f 93       	push	r17
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
	max.x = 0;
     53a:	10 92 4c 03 	sts	0x034C, r1
	max.y = 0;
     53e:	10 92 4d 03 	sts	0x034D, r1
	min.x = 255;
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	80 93 50 03 	sts	0x0350, r24
	min.y = 255;
     548:	80 93 51 03 	sts	0x0351, r24
	uint8_t x;
	uint8_t y;
	OLED_reset();
     54c:	0e 94 9c 07 	call	0xf38	; 0xf38 <OLED_reset>
	printf("\nMove the joystick to all extreme points.\n");
     550:	83 e9       	ldi	r24, 0x93	; 147
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 a7 0a 	call	0x154e	; 0x154e <puts>
	printf("Press the joystick when you're done.\n");
     558:	8d eb       	ldi	r24, 0xBD	; 189
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	0e 94 a7 0a 	call	0x154e	; 0x154e <puts>
		// Read sensor values
		x = ADC_read(0);
		y = ADC_read(1);
		
		// Calibrate x
		if (min.x > x) min.x = x; 
     560:	00 e5       	ldi	r16, 0x50	; 80
     562:	13 e0       	ldi	r17, 0x03	; 3
		else if (max.x < x) max.x = x;
     564:	0f 2e       	mov	r0, r31
     566:	fc e4       	ldi	r31, 0x4C	; 76
     568:	cf 2e       	mov	r12, r31
     56a:	f3 e0       	ldi	r31, 0x03	; 3
     56c:	df 2e       	mov	r13, r31
     56e:	f0 2d       	mov	r31, r0
		
		// Calibrate y
		if (min.y > y) min.y = y;
     570:	c1 e5       	ldi	r28, 0x51	; 81
     572:	d3 e0       	ldi	r29, 0x03	; 3
		else if (max.y < y) max.y = y;		
     574:	0f 2e       	mov	r0, r31
     576:	fd e4       	ldi	r31, 0x4D	; 77
     578:	ef 2e       	mov	r14, r31
     57a:	f3 e0       	ldi	r31, 0x03	; 3
     57c:	ff 2e       	mov	r15, r31
     57e:	f0 2d       	mov	r31, r0
	uint8_t y;
	OLED_reset();
	printf("\nMove the joystick to all extreme points.\n");
	printf("Press the joystick when you're done.\n");
	//check channels 
	while(test_bit(PINB,PINB2)){
     580:	1c c0       	rjmp	.+56     	; 0x5ba <JOY_calibrate+0x92>
		// Read sensor values
		x = ADC_read(0);
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	0e 94 ed 01 	call	0x3da	; 0x3da <ADC_read>
     588:	b8 2e       	mov	r11, r24
		y = ADC_read(1);
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	0e 94 ed 01 	call	0x3da	; 0x3da <ADC_read>
		
		// Calibrate x
		if (min.x > x) min.x = x; 
     590:	f8 01       	movw	r30, r16
     592:	90 81       	ld	r25, Z
     594:	b9 16       	cp	r11, r25
     596:	10 f4       	brcc	.+4      	; 0x59c <JOY_calibrate+0x74>
     598:	b0 82       	st	Z, r11
     59a:	05 c0       	rjmp	.+10     	; 0x5a6 <JOY_calibrate+0x7e>
		else if (max.x < x) max.x = x;
     59c:	f6 01       	movw	r30, r12
     59e:	90 81       	ld	r25, Z
     5a0:	9b 15       	cp	r25, r11
     5a2:	08 f4       	brcc	.+2      	; 0x5a6 <JOY_calibrate+0x7e>
     5a4:	b0 82       	st	Z, r11
		
		// Calibrate y
		if (min.y > y) min.y = y;
     5a6:	98 81       	ld	r25, Y
     5a8:	89 17       	cp	r24, r25
     5aa:	10 f4       	brcc	.+4      	; 0x5b0 <JOY_calibrate+0x88>
     5ac:	88 83       	st	Y, r24
     5ae:	05 c0       	rjmp	.+10     	; 0x5ba <JOY_calibrate+0x92>
		else if (max.y < y) max.y = y;		
     5b0:	f7 01       	movw	r30, r14
     5b2:	90 81       	ld	r25, Z
     5b4:	98 17       	cp	r25, r24
     5b6:	08 f4       	brcc	.+2      	; 0x5ba <JOY_calibrate+0x92>
     5b8:	80 83       	st	Z, r24
	uint8_t y;
	OLED_reset();
	printf("\nMove the joystick to all extreme points.\n");
	printf("Press the joystick when you're done.\n");
	//check channels 
	while(test_bit(PINB,PINB2)){
     5ba:	b2 99       	sbic	0x16, 2	; 22
     5bc:	e2 cf       	rjmp	.-60     	; 0x582 <JOY_calibrate+0x5a>
		if (min.y > y) min.y = y;
		else if (max.y < y) max.y = y;		
	}

	// Find distance from middle to edges (radius)
	rad.x = (max.x - min.x) / 2;
     5be:	e0 91 4c 03 	lds	r30, 0x034C
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	60 91 50 03 	lds	r22, 0x0350
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	9f 01       	movw	r18, r30
     5cc:	26 1b       	sub	r18, r22
     5ce:	37 0b       	sbc	r19, r23
     5d0:	c9 01       	movw	r24, r18
     5d2:	99 23       	and	r25, r25
     5d4:	0c f4       	brge	.+2      	; 0x5d8 <JOY_calibrate+0xb0>
     5d6:	01 96       	adiw	r24, 0x01	; 1
     5d8:	95 95       	asr	r25
     5da:	87 95       	ror	r24
     5dc:	80 93 4e 03 	sts	0x034E, r24
	rad.y = (max.y - min.y) / 2;
     5e0:	40 91 4d 03 	lds	r20, 0x034D
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	20 91 51 03 	lds	r18, 0x0351
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	da 01       	movw	r26, r20
     5ee:	a2 1b       	sub	r26, r18
     5f0:	b3 0b       	sbc	r27, r19
     5f2:	cd 01       	movw	r24, r26
     5f4:	0a f4       	brpl	.+2      	; 0x5f8 <JOY_calibrate+0xd0>
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	95 95       	asr	r25
     5fa:	87 95       	ror	r24
     5fc:	80 93 4f 03 	sts	0x034F, r24
	
	// Find mid point using edges.
	mid.x = (max.x + min.x) / 2;
     600:	6e 0f       	add	r22, r30
     602:	7f 1f       	adc	r23, r31
     604:	75 95       	asr	r23
     606:	67 95       	ror	r22
     608:	60 93 52 03 	sts	0x0352, r22
	mid.y = (max.y + min.y) / 2;
     60c:	24 0f       	add	r18, r20
     60e:	35 1f       	adc	r19, r21
     610:	35 95       	asr	r19
     612:	27 95       	ror	r18
     614:	20 93 53 03 	sts	0x0353, r18
}
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	df 90       	pop	r13
     626:	cf 90       	pop	r12
     628:	bf 90       	pop	r11
     62a:	08 95       	ret

0000062c <JOY_init>:
	uint8_t y;
} max, min, rad, mid;

void JOY_init(){
	//set pull-up resistors on PORTB for JOY_button
	set_bit(PORTB,PB2);
     62c:	c2 9a       	sbi	0x18, 2	; 24
	clear_bit(DDRB,PB2);
     62e:	ba 98       	cbi	0x17, 2	; 23
	clear_bit(SFIOR, PUD);
     630:	80 b7       	in	r24, 0x30	; 48
     632:	8b 7f       	andi	r24, 0xFB	; 251
     634:	80 bf       	out	0x30, r24	; 48
	JOY_calibrate();
     636:	0e 94 94 02 	call	0x528	; 0x528 <JOY_calibrate>
     63a:	08 95       	ret

0000063c <JOY_button_pressed>:
	mid.x = (max.x + min.x) / 2;
	mid.y = (max.y + min.y) / 2;
}

int JOY_button_pressed(button b) {
	switch (b) {
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	41 f0       	breq	.+16     	; 0x650 <JOY_button_pressed+0x14>
     640:	18 f0       	brcs	.+6      	; 0x648 <JOY_button_pressed+0xc>
     642:	82 30       	cpi	r24, 0x02	; 2
     644:	51 f0       	breq	.+20     	; 0x65a <JOY_button_pressed+0x1e>
     646:	11 c0       	rjmp	.+34     	; 0x66a <JOY_button_pressed+0x2e>
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     648:	86 b3       	in	r24, 0x16	; 22
     64a:	81 70       	andi	r24, 0x01	; 1
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return 1;
     650:	86 b3       	in	r24, 0x16	; 22
}

int JOY_button_pressed(button b) {
	switch (b) {
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     652:	86 95       	lsr	r24
     654:	81 70       	andi	r24, 0x01	; 1
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	08 95       	ret
		break;
	case 1:
		if (test_bit(PINB, PINB1)) return 1;
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return 1;
     65a:	86 b3       	in	r24, 0x16	; 22
     65c:	86 95       	lsr	r24
     65e:	86 95       	lsr	r24
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	89 27       	eor	r24, r25
}

int JOY_button_pressed(button b) {
	switch (b) {
	case 0:
		if (test_bit(PINB, PINB0)) return 1;
     664:	81 70       	andi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	08 95       	ret
		break;
	case 2:
		if (!test_bit(PINB, PINB2)) return 1;
		break;
	}
	return 0;
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
}
     66e:	08 95       	ret

00000670 <JOY_getPosition>:

JOY_position_t JOY_getPosition() {
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
	JOY_position_t JOY_position;
	JOY_position.x = (100 * (ADC_read(X_COORD) - mid.x)) / rad.x;
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	0e 94 ed 01 	call	0x3da	; 0x3da <ADC_read>
     67c:	28 2f       	mov	r18, r24
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	80 91 52 03 	lds	r24, 0x0352
     684:	28 1b       	sub	r18, r24
     686:	31 09       	sbc	r19, r1
     688:	14 e6       	ldi	r17, 0x64	; 100
     68a:	12 9f       	mul	r17, r18
     68c:	c0 01       	movw	r24, r0
     68e:	13 9f       	mul	r17, r19
     690:	90 0d       	add	r25, r0
     692:	11 24       	eor	r1, r1
     694:	60 91 4e 03 	lds	r22, 0x034E
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	0e 94 83 08 	call	0x1106	; 0x1106 <__divmodhi4>
     69e:	eb 01       	movw	r28, r22
	JOY_position.y = (100 * (ADC_read(Y_COORD) - mid.y)) / rad.y;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	0e 94 ed 01 	call	0x3da	; 0x3da <ADC_read>
     6a6:	28 2f       	mov	r18, r24
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	80 91 53 03 	lds	r24, 0x0353
     6ae:	28 1b       	sub	r18, r24
     6b0:	31 09       	sbc	r19, r1
     6b2:	12 9f       	mul	r17, r18
     6b4:	c0 01       	movw	r24, r0
     6b6:	13 9f       	mul	r17, r19
     6b8:	90 0d       	add	r25, r0
     6ba:	11 24       	eor	r1, r1
     6bc:	60 91 4f 03 	lds	r22, 0x034F
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	0e 94 83 08 	call	0x1106	; 0x1106 <__divmodhi4>
     6c6:	9b 01       	movw	r18, r22
	return JOY_position;
     6c8:	be 01       	movw	r22, r28
     6ca:	c9 01       	movw	r24, r18
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	08 95       	ret

000006d4 <JOY_getDirection>:

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
     6d4:	0e 94 38 03 	call	0x670	; 0x670 <JOY_getPosition>
     6d8:	fb 01       	movw	r30, r22
     6da:	ac 01       	movw	r20, r24
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     6dc:	9b 01       	movw	r18, r22
     6de:	2c 5f       	subi	r18, 0xFC	; 252
     6e0:	3f 4f       	sbci	r19, 0xFF	; 255
     6e2:	29 30       	cpi	r18, 0x09	; 9
     6e4:	31 05       	cpc	r19, r1
     6e6:	30 f4       	brcc	.+12     	; 0x6f4 <JOY_getDirection+0x20>
     6e8:	9c 01       	movw	r18, r24
     6ea:	2c 5f       	subi	r18, 0xFC	; 252
     6ec:	3f 4f       	sbci	r19, 0xFF	; 255
     6ee:	29 30       	cpi	r18, 0x09	; 9
     6f0:	31 05       	cpc	r19, r1
     6f2:	e0 f0       	brcs	.+56     	; 0x72c <JOY_getDirection+0x58>

	// The x-coordinate is dominating
	else if (abs(position.x) > abs(position.y)) {
     6f4:	db 01       	movw	r26, r22
     6f6:	ff 23       	and	r31, r31
     6f8:	24 f4       	brge	.+8      	; 0x702 <JOY_getDirection+0x2e>
     6fa:	aa 27       	eor	r26, r26
     6fc:	bb 27       	eor	r27, r27
     6fe:	a6 1b       	sub	r26, r22
     700:	b7 0b       	sbc	r27, r23
     702:	9c 01       	movw	r18, r24
     704:	55 23       	and	r21, r21
     706:	24 f4       	brge	.+8      	; 0x710 <JOY_getDirection+0x3c>
     708:	22 27       	eor	r18, r18
     70a:	33 27       	eor	r19, r19
     70c:	28 1b       	sub	r18, r24
     70e:	39 0b       	sbc	r19, r25
     710:	2a 17       	cp	r18, r26
     712:	3b 07       	cpc	r19, r27
     714:	34 f4       	brge	.+12     	; 0x722 <JOY_getDirection+0x4e>
		// Positive x => RIGHT
		if (position.x > 0) return RIGHT;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	1e 16       	cp	r1, r30
     71a:	1f 06       	cpc	r1, r31
     71c:	54 f0       	brlt	.+20     	; 0x732 <JOY_getDirection+0x5e>
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	08 95       	ret
		else return LEFT;

	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
     722:	14 16       	cp	r1, r20
     724:	15 06       	cpc	r1, r21
     726:	24 f4       	brge	.+8      	; 0x730 <JOY_getDirection+0x5c>
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	08 95       	ret

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     72c:	84 e0       	ldi	r24, 0x04	; 4
     72e:	08 95       	ret
	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
		// Negative y => DOWN
		else return DOWN;
     730:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     732:	08 95       	ret

00000734 <SLI_getPosition>:

SLI_position_t SLI_getPosition() {
     734:	cf 93       	push	r28
	SLI_position_t pos;
	pos.left = ADC_read(LEFT_CH);
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	0e 94 ed 01 	call	0x3da	; 0x3da <ADC_read>
     73c:	c8 2f       	mov	r28, r24
	pos.right = ADC_read(RIGHT_CH);
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	0e 94 ed 01 	call	0x3da	; 0x3da <ADC_read>
     744:	28 2f       	mov	r18, r24
	return pos;
     746:	6c 2f       	mov	r22, r28
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	82 2f       	mov	r24, r18
     74c:	90 e0       	ldi	r25, 0x00	; 0
}
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <print_blank>:
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '!', '?',
	'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', ')', '+',
	'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', '(', ''', '-',
	'Z', 'X', 'C', 'V', 'B', 'N', 'M', ',', '.', ';', ':', '#'
};

     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	8c 01       	movw	r16, r24
char* letters = LETTERS_SMALL;
     75c:	18 16       	cp	r1, r24
     75e:	19 06       	cpc	r1, r25
     760:	54 f4       	brge	.+20     	; 0x776 <print_blank+0x24>
     762:	c0 e0       	ldi	r28, 0x00	; 0
     764:	d0 e0       	ldi	r29, 0x00	; 0
char*  written_string = "";
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
	'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', ')', '+',
	'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', '(', ''', '-',
	'Z', 'X', 'C', 'V', 'B', 'N', 'M', ',', '.', ';', ':', '#'
};

char* letters = LETTERS_SMALL;
     76e:	21 96       	adiw	r28, 0x01	; 1
     770:	c0 17       	cp	r28, r16
     772:	d1 07       	cpc	r29, r17
     774:	c1 f7       	brne	.-16     	; 0x766 <print_blank+0x14>
char*  written_string = "";

typedef struct {
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	08 95       	ret

00000780 <print_shift>:
position pos = {0,0};

void print_blank(int number) {
	for (int i = 0; i < number; i++) {
		write_data(0x00);
	}
     780:	84 e0       	ldi	r24, 0x04	; 4
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 a9 03 	call	0x752	; 0x752 <print_blank>
}

     788:	80 e1       	ldi	r24, 0x10	; 16
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
void print_fill(int number) {
     790:	88 e1       	ldi	r24, 0x18	; 24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
	for (int i = 0; i < number; i++) {
     798:	8c e3       	ldi	r24, 0x3C	; 60
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
		write_data(0xFF);
     7a0:	8e e3       	ldi	r24, 0x3E	; 62
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
	}
     7a8:	8c e3       	ldi	r24, 0x3C	; 60
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
}
     7b0:	88 e1       	ldi	r24, 0x18	; 24
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>

     7b8:	80 e1       	ldi	r24, 0x10	; 16
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
void print_shift() {
	print_blank(4);
     7c0:	84 e0       	ldi	r24, 0x04	; 4
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 a9 03 	call	0x752	; 0x752 <print_blank>
     7c8:	08 95       	ret

000007ca <print_left_arrow>:
	//up-arrow
	write_data(0b00010000);
	write_data(0b00011000);
	write_data(0b00111100);
     7ca:	86 e0       	ldi	r24, 0x06	; 6
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 a9 03 	call	0x752	; 0x752 <print_blank>
	write_data(0b00111110);
	write_data(0b00111100);
	write_data(0b00011000);
     7d2:	80 e1       	ldi	r24, 0x10	; 16
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
	write_data(0b00010000);
     7da:	88 e3       	ldi	r24, 0x38	; 56
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>

     7e2:	8c e7       	ldi	r24, 0x7C	; 124
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
	print_blank(4);
}
     7ea:	86 e0       	ldi	r24, 0x06	; 6
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 a9 03 	call	0x752	; 0x752 <print_blank>
     7f2:	08 95       	ret

000007f4 <print_right_arrow>:

void print_shift_inverse() {
	print_fill(4);

     7f4:	86 e0       	ldi	r24, 0x06	; 6
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	0e 94 a9 03 	call	0x752	; 0x752 <print_blank>
	//up-arrow
	write_data(~0b00001000);
	write_data(~0b00011000);
     7fc:	8c e7       	ldi	r24, 0x7C	; 124
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
	write_data(~0b00111100);
     804:	88 e3       	ldi	r24, 0x38	; 56
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
	write_data(~0b01111100);
     80c:	80 e1       	ldi	r24, 0x10	; 16
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
	write_data(~0b00111100);
	write_data(~0b00011000);
	write_data(~0b00001000);

	print_fill(4);
}
     814:	86 e0       	ldi	r24, 0x06	; 6
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 a9 03 	call	0x752	; 0x752 <print_blank>
     81c:	08 95       	ret

0000081e <print_spacebar>:

void print_left_arrow() {
	left_arrow = { 0b00010000,  }
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29

     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 a9 03 	call	0x752	; 0x752 <print_blank>
	print_blank(6);
	//left-arrow
	
     82a:	88 e3       	ldi	r24, 0x38	; 56
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
     832:	c7 e2       	ldi	r28, 0x27	; 39
     834:	d0 e0       	ldi	r29, 0x00	; 0
	write_data(0b00010000);
     836:	80 e2       	ldi	r24, 0x20	; 32
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
     83e:	21 97       	sbiw	r28, 0x01	; 1
     840:	20 97       	sbiw	r28, 0x00	; 0
     842:	c9 f7       	brne	.-14     	; 0x836 <print_spacebar+0x18>
	write_data(0b00111000);
     844:	88 e3       	ldi	r24, 0x38	; 56
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 52 07 	call	0xea4	; 0xea4 <write_data>
	write_data(0b01111100);
	
     84c:	84 e0       	ldi	r24, 0x04	; 4
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 a9 03 	call	0x752	; 0x752 <print_blank>
	print_blank(6);
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <print_options_bar>:
}

void print_left_arrow_inverse() {
	print_fill(6);
     85a:	0e 94 c0 03 	call	0x780	; 0x780 <print_shift>
	//left-arrow
     85e:	0e 94 0f 04 	call	0x81e	; 0x81e <print_spacebar>
	write_data(~0b00010000);
     862:	0e 94 e5 03 	call	0x7ca	; 0x7ca <print_left_arrow>
	write_data(~0b00111000);
     866:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <print_right_arrow>
     86a:	08 95       	ret

0000086c <keyboard_goto>:
	write_data(~0b01111100);

	print_fill(6)
}
     86c:	6e 5f       	subi	r22, 0xFE	; 254
     86e:	7f 4f       	sbci	r23, 0xFF	; 255
     870:	66 0f       	add	r22, r22
     872:	66 0f       	add	r22, r22
     874:	66 0f       	add	r22, r22
     876:	8e 5f       	subi	r24, 0xFE	; 254
     878:	0e 94 73 07 	call	0xee6	; 0xee6 <OLED_pos>
     87c:	08 95       	ret

0000087e <keyboard_goto_line>:

void print_right_arrow() {
	print_blank(6);

     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	0e 94 36 04 	call	0x86c	; 0x86c <keyboard_goto>
     886:	08 95       	ret

00000888 <keyboard_init>:
	//left-arrow
	write_data(0b01111100);
	write_data(0b00111000);
	write_data(0b00010000);
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29

     894:	0e 94 9c 07 	call	0xf38	; 0xf38 <OLED_reset>

     898:	83 e6       	ldi	r24, 0x63	; 99
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	90 93 17 01 	sts	0x0117, r25
     8a0:	80 93 16 01 	sts	0x0116, r24

     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 3f 04 	call	0x87e	; 0x87e <keyboard_goto_line>
	
     8ac:	10 92 49 03 	sts	0x0349, r1
     8b0:	10 92 48 03 	sts	0x0348, r1

     8b4:	10 92 4b 03 	sts	0x034B, r1
     8b8:	10 92 4a 03 	sts	0x034A, r1
	print_blank(6);
}

     8bc:	e0 91 16 01 	lds	r30, 0x0116
     8c0:	f0 91 17 01 	lds	r31, 0x0117
     8c4:	80 81       	ld	r24, Z
     8c6:	0e 94 df 07 	call	0xfbe	; 0xfbe <OLED_print_char_inverse>
void print_right_arrow_inverse() {
	print_fill(6);

	//left-arrow
     8ca:	c1 e0       	ldi	r28, 0x01	; 1
     8cc:	d0 e0       	ldi	r29, 0x00	; 0
	write_data(~0b01111100);
     8ce:	0c e0       	ldi	r16, 0x0C	; 12
     8d0:	10 e0       	ldi	r17, 0x00	; 0
	write_data(~0b00111000);
     8d2:	0f 2e       	mov	r0, r31
     8d4:	fa e4       	ldi	r31, 0x4A	; 74
     8d6:	ef 2e       	mov	r14, r31
     8d8:	f3 e0       	ldi	r31, 0x03	; 3
     8da:	ff 2e       	mov	r15, r31
     8dc:	f0 2d       	mov	r31, r0
     8de:	12 c0       	rjmp	.+36     	; 0x904 <keyboard_init+0x7c>

void print_right_arrow_inverse() {
	print_fill(6);

	//left-arrow
	write_data(~0b01111100);
     8e0:	ce 01       	movw	r24, r28
     8e2:	b8 01       	movw	r22, r16
     8e4:	0e 94 83 08 	call	0x1106	; 0x1106 <__divmodhi4>
     8e8:	89 2b       	or	r24, r25
     8ea:	61 f4       	brne	.+24     	; 0x904 <keyboard_init+0x7c>
	write_data(~0b00111000);
     8ec:	f7 01       	movw	r30, r14
     8ee:	80 81       	ld	r24, Z
     8f0:	91 81       	ldd	r25, Z+1	; 0x01
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	91 83       	std	Z+1, r25	; 0x01
     8f6:	80 83       	st	Z, r24
     8f8:	0e 94 3f 04 	call	0x87e	; 0x87e <keyboard_goto_line>
	write_data(~0b00010000);
     8fc:	8a e0       	ldi	r24, 0x0A	; 10
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 a0 0a 	call	0x1540	; 0x1540 <putchar>

	print_fill(6);
     904:	e0 91 16 01 	lds	r30, 0x0116
     908:	f0 91 17 01 	lds	r31, 0x0117
     90c:	ec 0f       	add	r30, r28
     90e:	fd 1f       	adc	r31, r29
     910:	80 81       	ld	r24, Z
     912:	0e 94 30 07 	call	0xe60	; 0xe60 <OLED_print_char>
}
     916:	e0 91 16 01 	lds	r30, 0x0116
     91a:	f0 91 17 01 	lds	r31, 0x0117
     91e:	ec 0f       	add	r30, r28
     920:	fd 1f       	adc	r31, r29
     922:	80 81       	ld	r24, Z
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0e 94 a0 0a 	call	0x1540	; 0x1540 <putchar>
}

void print_right_arrow_inverse() {
	print_fill(6);

	//left-arrow
     92a:	21 96       	adiw	r28, 0x01	; 1
     92c:	c0 33       	cpi	r28, 0x30	; 48
     92e:	d1 05       	cpc	r29, r1
     930:	b9 f6       	brne	.-82     	; 0x8e0 <keyboard_init+0x58>

	print_fill(6);
}


void print_spacebar() {
     932:	85 e0       	ldi	r24, 0x05	; 5
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 3f 04 	call	0x87e	; 0x87e <keyboard_goto_line>
	print_blank(4);
     93a:	0e 94 2d 04 	call	0x85a	; 0x85a <print_options_bar>

	//spacebar
	write_data(0b00111000);
     93e:	10 92 4b 03 	sts	0x034B, r1
     942:	10 92 4a 03 	sts	0x034A, r1
	for (int i = 0; i < 39;i++) write_data(0b00100000);
	write_data(0b00111000);
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <keyboard_run>:

	print_blank(4);
     954:	bf 92       	push	r11
     956:	cf 92       	push	r12
     958:	df 92       	push	r13
     95a:	ef 92       	push	r14
     95c:	ff 92       	push	r15
     95e:	0f 93       	push	r16
     960:	1f 93       	push	r17
     962:	cf 93       	push	r28
     964:	df 93       	push	r29
}
     966:	0e 94 44 04 	call	0x888	; 0x888 <keyboard_init>
	print_spacebar();
	print_left_arrow();
	print_right_arrow();
}

// 5 lines x 16 columns
     96a:	0f 2e       	mov	r0, r31
     96c:	f8 e4       	ldi	r31, 0x48	; 72
     96e:	cf 2e       	mov	r12, r31
     970:	f3 e0       	ldi	r31, 0x03	; 3
     972:	df 2e       	mov	r13, r31
     974:	f0 2d       	mov	r31, r0
	print_blank(4);
}


void print_options_bar() {
	print_shift();
     976:	0a e4       	ldi	r16, 0x4A	; 74
     978:	13 e0       	ldi	r17, 0x03	; 3
}

void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
	}

     97a:	0f 2e       	mov	r0, r31
     97c:	fd e0       	ldi	r31, 0x0D	; 13
     97e:	bf 2e       	mov	r11, r31
     980:	f0 2d       	mov	r31, r0
void print_spacebar_inverse() {
	print_blank(4);

	//spacebar
	write_data(~0b00011100);
	for (int i = 0; i < 39;i++) write_data(~0b00000100);
     982:	8f c0       	rjmp	.+286    	; 0xaa2 <keyboard_run+0x14e>
	write_data(~0b00011100);

	print_blank(4);
     984:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <JOY_getDirection>
}
     988:	84 30       	cpi	r24, 0x04	; 4
     98a:	d1 f1       	breq	.+116    	; 0xa00 <keyboard_run+0xac>

     98c:	83 30       	cpi	r24, 0x03	; 3
     98e:	61 f4       	brne	.+24     	; 0x9a8 <keyboard_run+0x54>
     990:	f8 01       	movw	r30, r16
     992:	20 81       	ld	r18, Z
     994:	31 81       	ldd	r19, Z+1	; 0x01
     996:	25 30       	cpi	r18, 0x05	; 5
     998:	31 05       	cpc	r19, r1
     99a:	24 f5       	brge	.+72     	; 0x9e4 <keyboard_run+0x90>

     99c:	c9 01       	movw	r24, r18
     99e:	01 96       	adiw	r24, 0x01	; 1
     9a0:	91 83       	std	Z+1, r25	; 0x01
     9a2:	80 83       	st	Z, r24
     9a4:	e9 01       	movw	r28, r18
     9a6:	2c c0       	rjmp	.+88     	; 0xa00 <keyboard_run+0xac>
void print_options_bar() {
	print_shift();
     9a8:	82 30       	cpi	r24, 0x02	; 2
     9aa:	69 f4       	brne	.+26     	; 0x9c6 <keyboard_run+0x72>
     9ac:	f8 01       	movw	r30, r16
     9ae:	80 81       	ld	r24, Z
     9b0:	91 81       	ldd	r25, Z+1	; 0x01
     9b2:	18 16       	cp	r1, r24
     9b4:	19 06       	cpc	r1, r25
     9b6:	24 f5       	brge	.+72     	; 0xa00 <keyboard_run+0xac>
	print_spacebar();
     9b8:	9c 01       	movw	r18, r24
     9ba:	21 50       	subi	r18, 0x01	; 1
     9bc:	31 09       	sbc	r19, r1
     9be:	31 83       	std	Z+1, r19	; 0x01
     9c0:	20 83       	st	Z, r18
     9c2:	ec 01       	movw	r28, r24
     9c4:	1d c0       	rjmp	.+58     	; 0xa00 <keyboard_run+0xac>
	print_left_arrow();
	print_right_arrow();
     9c6:	81 11       	cpse	r24, r1
     9c8:	0d c0       	rjmp	.+26     	; 0x9e4 <keyboard_run+0x90>
     9ca:	f6 01       	movw	r30, r12
     9cc:	80 81       	ld	r24, Z
     9ce:	91 81       	ldd	r25, Z+1	; 0x01
     9d0:	18 16       	cp	r1, r24
     9d2:	19 06       	cpc	r1, r25
     9d4:	ac f4       	brge	.+42     	; 0xa00 <keyboard_run+0xac>
}
     9d6:	9c 01       	movw	r18, r24
     9d8:	21 50       	subi	r18, 0x01	; 1
     9da:	31 09       	sbc	r19, r1
     9dc:	31 83       	std	Z+1, r19	; 0x01
     9de:	20 83       	st	Z, r18
     9e0:	7c 01       	movw	r14, r24
     9e2:	0e c0       	rjmp	.+28     	; 0xa00 <keyboard_run+0xac>

// 5 lines x 16 columns
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	61 f4       	brne	.+24     	; 0xa00 <keyboard_run+0xac>
     9e8:	f6 01       	movw	r30, r12
     9ea:	80 81       	ld	r24, Z
     9ec:	91 81       	ldd	r25, Z+1	; 0x01
     9ee:	8c 30       	cpi	r24, 0x0C	; 12
     9f0:	91 05       	cpc	r25, r1
     9f2:	34 f4       	brge	.+12     	; 0xa00 <keyboard_run+0xac>
void keyboard_goto(int line, int column) {
     9f4:	9c 01       	movw	r18, r24
     9f6:	2f 5f       	subi	r18, 0xFF	; 255
     9f8:	3f 4f       	sbci	r19, 0xFF	; 255
     9fa:	31 83       	std	Z+1, r19	; 0x01
     9fc:	20 83       	st	Z, r18
     9fe:	7c 01       	movw	r14, r24
	OLED_pos(line + 2, (column+2) * 8);
}

void keyboard_goto_line(int line) {
     a00:	f8 01       	movw	r30, r16
     a02:	80 81       	ld	r24, Z
     a04:	91 81       	ldd	r25, Z+1	; 0x01
     a06:	8c 17       	cp	r24, r28
     a08:	9d 07       	cpc	r25, r29
     a0a:	31 f4       	brne	.+12     	; 0xa18 <keyboard_run+0xc4>
     a0c:	f6 01       	movw	r30, r12
     a0e:	80 81       	ld	r24, Z
     a10:	91 81       	ldd	r25, Z+1	; 0x01
     a12:	8e 15       	cp	r24, r14
     a14:	9f 05       	cpc	r25, r15
     a16:	31 f1       	breq	.+76     	; 0xa64 <keyboard_run+0x110>
		keyboard_goto(line, 0);
	}
     a18:	fe 01       	movw	r30, r28
     a1a:	ee 0f       	add	r30, r30
     a1c:	ff 1f       	adc	r31, r31
     a1e:	ec 0f       	add	r30, r28
     a20:	fd 1f       	adc	r31, r29
     a22:	ee 0f       	add	r30, r30
     a24:	ff 1f       	adc	r31, r31
     a26:	ee 0f       	add	r30, r30
     a28:	ff 1f       	adc	r31, r31
     a2a:	ee 0d       	add	r30, r14
     a2c:	ff 1d       	adc	r31, r15
     a2e:	80 91 16 01 	lds	r24, 0x0116
     a32:	90 91 17 01 	lds	r25, 0x0117
     a36:	e8 0f       	add	r30, r24
     a38:	f9 1f       	adc	r31, r25
     a3a:	80 81       	ld	r24, Z
     a3c:	0e 94 30 07 	call	0xe60	; 0xe60 <OLED_print_char>

     a40:	20 91 4a 03 	lds	r18, 0x034A
     a44:	30 91 4b 03 	lds	r19, 0x034B
     a48:	b2 9e       	mul	r11, r18
     a4a:	c0 01       	movw	r24, r0
     a4c:	b3 9e       	mul	r11, r19
     a4e:	90 0d       	add	r25, r0
     a50:	11 24       	eor	r1, r1
     a52:	e0 91 16 01 	lds	r30, 0x0116
     a56:	f0 91 17 01 	lds	r31, 0x0117
     a5a:	e8 0f       	add	r30, r24
     a5c:	f9 1f       	adc	r31, r25
     a5e:	80 81       	ld	r24, Z
     a60:	0e 94 df 07 	call	0xfbe	; 0xfbe <OLED_print_char_inverse>

void keyboard_init() {
	OLED_reset();
	letters = LETTERS_SMALL;
	keyboard_goto_line(0);
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	0e 94 1e 03 	call	0x63c	; 0x63c <JOY_button_pressed>
     a6a:	89 2b       	or	r24, r25
     a6c:	59 f0       	breq	.+22     	; 0xa84 <keyboard_run+0x130>
	pos.x = 0;
	pos.y = 0;
     a6e:	0e 94 89 07 	call	0xf12	; 0xf12 <OLED_home>

	//The first letter is selected by default
     a72:	68 e1       	ldi	r22, 0x18	; 24
     a74:	71 e0       	ldi	r23, 0x01	; 1
     a76:	80 91 14 01 	lds	r24, 0x0114
     a7a:	90 91 15 01 	lds	r25, 0x0115
     a7e:	0e 94 2f 0a 	call	0x145e	; 0x145e <fputs>
     a82:	0f c0       	rjmp	.+30     	; 0xaa2 <keyboard_run+0x14e>
	OLED_print_char_inverse(letters[0]);
	//OLED_print_char(letters[0]);

     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	0e 94 1e 03 	call	0x63c	; 0x63c <JOY_button_pressed>
     a8a:	89 2b       	or	r24, r25
     a8c:	51 f0       	breq	.+20     	; 0xaa2 <keyboard_run+0x14e>
	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     a8e:	0e 94 89 07 	call	0xf12	; 0xf12 <OLED_home>
		if (i % LINE_LENGTH == 0) {
     a92:	68 e1       	ldi	r22, 0x18	; 24
     a94:	71 e0       	ldi	r23, 0x01	; 1
     a96:	80 91 14 01 	lds	r24, 0x0114
     a9a:	90 91 15 01 	lds	r25, 0x0115
     a9e:	0e 94 2f 0a 	call	0x145e	; 0x145e <fputs>
void print_spacebar_inverse() {
	print_blank(4);

	//spacebar
	write_data(~0b00011100);
	for (int i = 0; i < 39;i++) write_data(~0b00000100);
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	0e 94 1e 03 	call	0x63c	; 0x63c <JOY_button_pressed>
     aa8:	89 2b       	or	r24, r25
     aaa:	09 f4       	brne	.+2      	; 0xaae <keyboard_run+0x15a>
     aac:	6b cf       	rjmp	.-298    	; 0x984 <keyboard_run+0x30>
	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0) {
			keyboard_goto_line(++pos.y);
			printf("\n");
		}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	bf 90       	pop	r11
     ac0:	08 95       	ret

00000ac2 <MCP2515_read>:
	}
	
	return 0;
}

char MCP2515_read(char address) {
     ac2:	cf 93       	push	r28
     ac4:	c8 2f       	mov	r28, r24
	SPI_select();
     ac6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <SPI_select>
	SPI_send(READ);
     aca:	83 e0       	ldi	r24, 0x03	; 3
     acc:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SPI_send>
	SPI_send(address);
     ad0:	8c 2f       	mov	r24, r28
     ad2:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SPI_send>
	char data = SPI_read();
     ad6:	0e 94 56 08 	call	0x10ac	; 0x10ac <SPI_read>
     ada:	c8 2f       	mov	r28, r24
	SPI_deselect();
     adc:	0e 94 5f 08 	call	0x10be	; 0x10be <SPI_deselect>
	return data;
	
	
}
     ae0:	8c 2f       	mov	r24, r28
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <MCP2515_bit_modify>:
	SPI_send(RTS_BASE+buffer_states);
	SPI_deselect();
}

//puts new_data in the selected reg_adress. the function assumes that you are allowed to change every bit in the register
void MCP2515_bit_modify(char reg_address, char masked_bits, char new_data) {
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	18 2f       	mov	r17, r24
     aee:	d6 2f       	mov	r29, r22
     af0:	c4 2f       	mov	r28, r20
	SPI_select();
     af2:	0e 94 5d 08 	call	0x10ba	; 0x10ba <SPI_select>
	SPI_send(BIT_MODIFY);
     af6:	85 e0       	ldi	r24, 0x05	; 5
     af8:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SPI_send>
	SPI_send(reg_address);
     afc:	81 2f       	mov	r24, r17
     afe:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SPI_send>
	SPI_send(masked_bits);
     b02:	8d 2f       	mov	r24, r29
     b04:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SPI_send>
	SPI_send(new_data);
     b08:	8c 2f       	mov	r24, r28
     b0a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SPI_send>
	SPI_deselect();
     b0e:	0e 94 5f 08 	call	0x10be	; 0x10be <SPI_deselect>
}
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	08 95       	ret

00000b1a <test_function>:
volatile menu_entry* current_entry;
volatile menu_entry* selected_entry;


void test_function() {
	printf("\n\nHighscore clicked!\n\n");
     b1a:	83 e9       	ldi	r24, 0x93	; 147
     b1c:	92 e0       	ldi	r25, 0x02	; 2
     b1e:	0e 94 a7 0a 	call	0x154e	; 0x154e <puts>
     b22:	08 95       	ret

00000b24 <MENU_draw_current_menu>:
	current_entry = current_entry->parent_node;
	selected_entry = current_entry->child_node;
	MENU_draw_current_menu();
}

void MENU_draw_current_menu() {
     b24:	df 92       	push	r13
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
	OLED_reset();
     b32:	0e 94 9c 07 	call	0xf38	; 0xf38 <OLED_reset>
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
     b36:	e0 91 56 03 	lds	r30, 0x0356
     b3a:	f0 91 57 03 	lds	r31, 0x0357
     b3e:	c4 81       	ldd	r28, Z+4	; 0x04
     b40:	d5 81       	ldd	r29, Z+5	; 0x05
	
	while( temp_node != NULL){
     b42:	20 97       	sbiw	r28, 0x00	; 0
     b44:	61 f1       	breq	.+88     	; 0xb9e <MENU_draw_current_menu+0x7a>
     b46:	d1 2c       	mov	r13, r1
		OLED_pos(output_row++, 0);
		if (temp_node == selected_entry) {
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
     b48:	0f 2e       	mov	r0, r31
     b4a:	f9 ea       	ldi	r31, 0xA9	; 169
     b4c:	ef 2e       	mov	r14, r31
     b4e:	f2 e0       	ldi	r31, 0x02	; 2
     b50:	ff 2e       	mov	r15, r31
     b52:	f0 2d       	mov	r31, r0
     b54:	06 e2       	ldi	r16, 0x26	; 38
     b56:	11 e0       	ldi	r17, 0x01	; 1
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
		OLED_pos(output_row++, 0);
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	8d 2d       	mov	r24, r13
     b5c:	0e 94 73 07 	call	0xee6	; 0xee6 <OLED_pos>
		if (temp_node == selected_entry) {
     b60:	20 91 54 03 	lds	r18, 0x0354
     b64:	30 91 55 03 	lds	r19, 0x0355
     b68:	c2 17       	cp	r28, r18
     b6a:	d3 07       	cpc	r29, r19
     b6c:	11 f4       	brne	.+4      	; 0xb72 <MENU_draw_current_menu+0x4e>
			OLED_print_arrow();
     b6e:	0e 94 35 08 	call	0x106a	; 0x106a <OLED_print_arrow>
		}
		fprintf(OLED, " %s", temp_node->name);
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	8f 93       	push	r24
     b76:	88 81       	ld	r24, Y
     b78:	8f 93       	push	r24
     b7a:	ff 92       	push	r15
     b7c:	ef 92       	push	r14
     b7e:	1f 93       	push	r17
     b80:	0f 93       	push	r16
     b82:	0e 94 1d 0a 	call	0x143a	; 0x143a <fprintf>
		temp_node = temp_node -> next_sibling_node;
     b86:	0e 80       	ldd	r0, Y+6	; 0x06
     b88:	df 81       	ldd	r29, Y+7	; 0x07
     b8a:	c0 2d       	mov	r28, r0
     b8c:	d3 94       	inc	r13
	OLED_reset();
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	20 97       	sbiw	r28, 0x00	; 0
     b9c:	e9 f6       	brne	.-70     	; 0xb58 <MENU_draw_current_menu+0x34>
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	ff 90       	pop	r15
     ba8:	ef 90       	pop	r14
     baa:	df 90       	pop	r13
     bac:	08 95       	ret

00000bae <MENU_select_next>:
	MENU_draw_current_menu();
}


void MENU_select_next() {
	if (selected_entry -> next_sibling_node != NULL) {
     bae:	e0 91 54 03 	lds	r30, 0x0354
     bb2:	f0 91 55 03 	lds	r31, 0x0355
     bb6:	86 81       	ldd	r24, Z+6	; 0x06
     bb8:	97 81       	ldd	r25, Z+7	; 0x07
     bba:	89 2b       	or	r24, r25
     bbc:	41 f0       	breq	.+16     	; 0xbce <MENU_select_next+0x20>
		selected_entry = selected_entry -> next_sibling_node;
     bbe:	86 81       	ldd	r24, Z+6	; 0x06
     bc0:	97 81       	ldd	r25, Z+7	; 0x07
     bc2:	90 93 55 03 	sts	0x0355, r25
     bc6:	80 93 54 03 	sts	0x0354, r24
		MENU_draw_current_menu();
     bca:	0e 94 92 05 	call	0xb24	; 0xb24 <MENU_draw_current_menu>
     bce:	08 95       	ret

00000bd0 <MENU_select_prev>:
	}
}

void MENU_select_prev() {
	if (selected_entry -> prev_sibling_node != NULL) {
     bd0:	e0 91 54 03 	lds	r30, 0x0354
     bd4:	f0 91 55 03 	lds	r31, 0x0355
     bd8:	80 85       	ldd	r24, Z+8	; 0x08
     bda:	91 85       	ldd	r25, Z+9	; 0x09
     bdc:	89 2b       	or	r24, r25
     bde:	41 f0       	breq	.+16     	; 0xbf0 <MENU_select_prev+0x20>
		selected_entry = selected_entry -> prev_sibling_node;
     be0:	80 85       	ldd	r24, Z+8	; 0x08
     be2:	91 85       	ldd	r25, Z+9	; 0x09
     be4:	90 93 55 03 	sts	0x0355, r25
     be8:	80 93 54 03 	sts	0x0354, r24
		MENU_draw_current_menu();
     bec:	0e 94 92 05 	call	0xb24	; 0xb24 <MENU_draw_current_menu>
     bf0:	08 95       	ret

00000bf2 <MENU_enter_selection>:
	}
}

void MENU_enter_selection() {
	if (selected_entry->function_ptr != NULL) {
     bf2:	e0 91 54 03 	lds	r30, 0x0354
     bf6:	f0 91 55 03 	lds	r31, 0x0355
     bfa:	82 85       	ldd	r24, Z+10	; 0x0a
     bfc:	93 85       	ldd	r25, Z+11	; 0x0b
     bfe:	89 2b       	or	r24, r25
     c00:	61 f0       	breq	.+24     	; 0xc1a <MENU_enter_selection+0x28>
		printf("HEI\n");
     c02:	8d ea       	ldi	r24, 0xAD	; 173
     c04:	92 e0       	ldi	r25, 0x02	; 2
     c06:	0e 94 a7 0a 	call	0x154e	; 0x154e <puts>
		selected_entry->function_ptr();
     c0a:	e0 91 54 03 	lds	r30, 0x0354
     c0e:	f0 91 55 03 	lds	r31, 0x0355
     c12:	02 84       	ldd	r0, Z+10	; 0x0a
     c14:	f3 85       	ldd	r31, Z+11	; 0x0b
     c16:	e0 2d       	mov	r30, r0
     c18:	09 95       	icall
	}
	
	if (selected_entry->child_node == NULL) return;
     c1a:	e0 91 54 03 	lds	r30, 0x0354
     c1e:	f0 91 55 03 	lds	r31, 0x0355
     c22:	84 81       	ldd	r24, Z+4	; 0x04
     c24:	95 81       	ldd	r25, Z+5	; 0x05
     c26:	89 2b       	or	r24, r25
     c28:	61 f0       	breq	.+24     	; 0xc42 <MENU_enter_selection+0x50>
	
	current_entry = selected_entry;
     c2a:	f0 93 57 03 	sts	0x0357, r31
     c2e:	e0 93 56 03 	sts	0x0356, r30
	selected_entry = current_entry->child_node;
     c32:	84 81       	ldd	r24, Z+4	; 0x04
     c34:	95 81       	ldd	r25, Z+5	; 0x05
     c36:	90 93 55 03 	sts	0x0355, r25
     c3a:	80 93 54 03 	sts	0x0354, r24
	MENU_draw_current_menu();
     c3e:	0e 94 92 05 	call	0xb24	; 0xb24 <MENU_draw_current_menu>
     c42:	08 95       	ret

00000c44 <MENU_go_back>:
}

void MENU_go_back() {
	if (current_entry->parent_node == NULL) return;
     c44:	e0 91 56 03 	lds	r30, 0x0356
     c48:	f0 91 57 03 	lds	r31, 0x0357
     c4c:	82 81       	ldd	r24, Z+2	; 0x02
     c4e:	93 81       	ldd	r25, Z+3	; 0x03
     c50:	89 2b       	or	r24, r25
     c52:	79 f0       	breq	.+30     	; 0xc72 <MENU_go_back+0x2e>
	
	current_entry = current_entry->parent_node;
     c54:	02 80       	ldd	r0, Z+2	; 0x02
     c56:	f3 81       	ldd	r31, Z+3	; 0x03
     c58:	e0 2d       	mov	r30, r0
     c5a:	f0 93 57 03 	sts	0x0357, r31
     c5e:	e0 93 56 03 	sts	0x0356, r30
	selected_entry = current_entry->child_node;
     c62:	84 81       	ldd	r24, Z+4	; 0x04
     c64:	95 81       	ldd	r25, Z+5	; 0x05
     c66:	90 93 55 03 	sts	0x0355, r25
     c6a:	80 93 54 03 	sts	0x0354, r24
	MENU_draw_current_menu();
     c6e:	0e 94 92 05 	call	0xb24	; 0xb24 <MENU_draw_current_menu>
     c72:	08 95       	ret

00000c74 <MENU_run>:
	_delay_ms(delay);
	MENU_select_prev();
}


void MENU_run() {
     c74:	cf 93       	push	r28
	bool change = false;
	if (JOY_getDirection() == DOWN) {
     c76:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <JOY_getDirection>
     c7a:	83 30       	cpi	r24, 0x03	; 3
     c7c:	21 f4       	brne	.+8      	; 0xc86 <MENU_run+0x12>
		MENU_select_next();
     c7e:	0e 94 d7 05 	call	0xbae	; 0xbae <MENU_select_next>
		change = true;
     c82:	c1 e0       	ldi	r28, 0x01	; 1
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <MENU_run+0x24>
		} else if (JOY_getDirection() == UP) {
     c86:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <JOY_getDirection>
     c8a:	82 30       	cpi	r24, 0x02	; 2
     c8c:	21 f4       	brne	.+8      	; 0xc96 <MENU_run+0x22>
		MENU_select_prev();
     c8e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <MENU_select_prev>
		change = true;
     c92:	c1 e0       	ldi	r28, 0x01	; 1
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <MENU_run+0x24>
	MENU_select_prev();
}


void MENU_run() {
	bool change = false;
     c96:	c0 e0       	ldi	r28, 0x00	; 0
		} else if (JOY_getDirection() == UP) {
		MENU_select_prev();
		change = true;
	}
	
	if (JOY_button_pressed(JOY_BUTTON)) {
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	0e 94 1e 03 	call	0x63c	; 0x63c <JOY_button_pressed>
     c9e:	89 2b       	or	r24, r25
     ca0:	19 f0       	breq	.+6      	; 0xca8 <MENU_run+0x34>
		MENU_enter_selection();
     ca2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <MENU_enter_selection>
     ca6:	0a c0       	rjmp	.+20     	; 0xcbc <MENU_run+0x48>
		change = true;
	}
	
	else if (JOY_button_pressed(LEFT_BUTTON)) {
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	0e 94 1e 03 	call	0x63c	; 0x63c <JOY_button_pressed>
     cae:	89 2b       	or	r24, r25
     cb0:	19 f0       	breq	.+6      	; 0xcb8 <MENU_run+0x44>
		MENU_go_back();
     cb2:	0e 94 22 06 	call	0xc44	; 0xc44 <MENU_go_back>
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <MENU_run+0x48>
		change = true;
	}
	
	// Make sure the selection doesn't move multiple places at once.
	if (change){
     cb8:	cc 23       	and	r28, r28
     cba:	49 f0       	breq	.+18     	; 0xcce <MENU_run+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cbc:	22 e3       	ldi	r18, 0x32	; 50
     cbe:	83 ed       	ldi	r24, 0xD3	; 211
     cc0:	93 e0       	ldi	r25, 0x03	; 3
     cc2:	21 50       	subi	r18, 0x01	; 1
     cc4:	80 40       	sbci	r24, 0x00	; 0
     cc6:	90 40       	sbci	r25, 0x00	; 0
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <MENU_run+0x4e>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <MENU_run+0x58>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <MENU_run+0x5a>
		_delay_ms(255);
		change = false;
	}
}
     cce:	cf 91       	pop	r28
     cd0:	08 95       	ret

00000cd2 <add_entry>:



menu_entry* add_entry(menu_entry* parent_node, char* name, void* function_ptr){
     cd2:	ef 92       	push	r14
     cd4:	ff 92       	push	r15
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	ec 01       	movw	r28, r24
     ce0:	7b 01       	movw	r14, r22
     ce2:	8a 01       	movw	r16, r20
	
	// Create the new node
	menu_entry* new_entry = (menu_entry*) malloc(sizeof(menu_entry));
     ce4:	8c e0       	ldi	r24, 0x0C	; 12
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	0e 94 ab 08 	call	0x1156	; 0x1156 <malloc>
     cec:	dc 01       	movw	r26, r24
	new_entry->name = name;
     cee:	11 96       	adiw	r26, 0x01	; 1
     cf0:	fc 92       	st	X, r15
     cf2:	ee 92       	st	-X, r14
	new_entry->parent_node = parent_node;
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	dc 93       	st	X, r29
     cf8:	ce 93       	st	-X, r28
     cfa:	12 97       	sbiw	r26, 0x02	; 2
	new_entry->child_node = NULL;  // A new node has no children
     cfc:	15 96       	adiw	r26, 0x05	; 5
     cfe:	1c 92       	st	X, r1
     d00:	1e 92       	st	-X, r1
     d02:	14 97       	sbiw	r26, 0x04	; 4
	new_entry->next_sibling_node = NULL;  // The new child is the last child
     d04:	17 96       	adiw	r26, 0x07	; 7
     d06:	1c 92       	st	X, r1
     d08:	1e 92       	st	-X, r1
     d0a:	16 97       	sbiw	r26, 0x06	; 6
	new_entry->prev_sibling_node = NULL;
     d0c:	19 96       	adiw	r26, 0x09	; 9
     d0e:	1c 92       	st	X, r1
     d10:	1e 92       	st	-X, r1
     d12:	18 97       	sbiw	r26, 0x08	; 8
	new_entry->function_ptr = function_ptr;
     d14:	1b 96       	adiw	r26, 0x0b	; 11
     d16:	1c 93       	st	X, r17
     d18:	0e 93       	st	-X, r16
     d1a:	1a 97       	sbiw	r26, 0x0a	; 10
	
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_entry;
     d1c:	20 97       	sbiw	r28, 0x00	; 0
     d1e:	a1 f0       	breq	.+40     	; 0xd48 <add_entry+0x76>
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
     d20:	ec 81       	ldd	r30, Y+4	; 0x04
     d22:	fd 81       	ldd	r31, Y+5	; 0x05
     d24:	30 97       	sbiw	r30, 0x00	; 0
     d26:	19 f4       	brne	.+6      	; 0xd2e <add_entry+0x5c>
		parent_node->child_node = new_entry;
     d28:	9d 83       	std	Y+5, r25	; 0x05
     d2a:	8c 83       	std	Y+4, r24	; 0x04
     d2c:	0d c0       	rjmp	.+26     	; 0xd48 <add_entry+0x76>
	else {
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
     d2e:	26 81       	ldd	r18, Z+6	; 0x06
     d30:	37 81       	ldd	r19, Z+7	; 0x07
     d32:	21 15       	cp	r18, r1
     d34:	31 05       	cpc	r19, r1
     d36:	11 f0       	breq	.+4      	; 0xd3c <add_entry+0x6a>
			//printf("temp_node->next_sibling_node->name: %s\n", temp_node->next_sibling_node->name);
			temp_node = temp_node->next_sibling_node;
     d38:	f9 01       	movw	r30, r18
     d3a:	f9 cf       	rjmp	.-14     	; 0xd2e <add_entry+0x5c>
		}
		
		// Bind the new node to the current last child to become the new last child.
		temp_node->next_sibling_node = new_entry;
     d3c:	b7 83       	std	Z+7, r27	; 0x07
     d3e:	a6 83       	std	Z+6, r26	; 0x06
		new_entry->prev_sibling_node = temp_node;
     d40:	19 96       	adiw	r26, 0x09	; 9
     d42:	fc 93       	st	X, r31
     d44:	ee 93       	st	-X, r30
     d46:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	// Parent/child/sibling bindings complete. Return the new node.
	return new_entry;
     d48:	cd 01       	movw	r24, r26
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	ff 90       	pop	r15
     d54:	ef 90       	pop	r14
     d56:	08 95       	ret

00000d58 <MENU_init>:

void test_function() {
	printf("\n\nHighscore clicked!\n\n");
}

void MENU_init() {
     d58:	cf 92       	push	r12
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
	menu_entry* main_menu = add_entry(NULL, "Main menu", NULL);
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	61 eb       	ldi	r22, 0xB1	; 177
     d6e:	72 e0       	ldi	r23, 0x02	; 2
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 69 06 	call	0xcd2	; 0xcd2 <add_entry>
     d78:	ec 01       	movw	r28, r24
	
	// Main menu
	menu_entry* play = add_entry(main_menu, "Play game", NULL);
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	50 e0       	ldi	r21, 0x00	; 0
     d7e:	6b eb       	ldi	r22, 0xBB	; 187
     d80:	72 e0       	ldi	r23, 0x02	; 2
     d82:	0e 94 69 06 	call	0xcd2	; 0xcd2 <add_entry>
     d86:	6c 01       	movw	r12, r24
	menu_entry* highscore = add_entry(main_menu, "Highscore", test_function);
     d88:	4d e8       	ldi	r20, 0x8D	; 141
     d8a:	55 e0       	ldi	r21, 0x05	; 5
     d8c:	65 ec       	ldi	r22, 0xC5	; 197
     d8e:	72 e0       	ldi	r23, 0x02	; 2
     d90:	ce 01       	movw	r24, r28
     d92:	0e 94 69 06 	call	0xcd2	; 0xcd2 <add_entry>
	menu_entry* settings = add_entry(main_menu, "Settings", NULL);
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	6f ec       	ldi	r22, 0xCF	; 207
     d9c:	72 e0       	ldi	r23, 0x02	; 2
     d9e:	ce 01       	movw	r24, r28
     da0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <add_entry>
     da4:	7c 01       	movw	r14, r24
	menu_entry* extras = add_entry(main_menu, "Extra features", NULL);
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	64 e3       	ldi	r22, 0x34	; 52
     dac:	73 e0       	ldi	r23, 0x03	; 3
     dae:	ce 01       	movw	r24, r28
     db0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <add_entry>
     db4:	8c 01       	movw	r16, r24
	//menu_entry* yolo = add_entry(main_menu, "YOLO", NULL);
	
	
	// Sub-menu settings
	menu_entry* brightness = add_entry(settings, "Brightness", brightness_run);
     db6:	4e e2       	ldi	r20, 0x2E	; 46
     db8:	52 e0       	ldi	r21, 0x02	; 2
     dba:	68 ed       	ldi	r22, 0xD8	; 216
     dbc:	72 e0       	ldi	r23, 0x02	; 2
     dbe:	c7 01       	movw	r24, r14
     dc0:	0e 94 69 06 	call	0xcd2	; 0xcd2 <add_entry>
	menu_entry* font = add_entry(settings, "Set font", NULL);
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	63 ee       	ldi	r22, 0xE3	; 227
     dca:	72 e0       	ldi	r23, 0x02	; 2
     dcc:	c7 01       	movw	r24, r14
     dce:	0e 94 69 06 	call	0xcd2	; 0xcd2 <add_entry>
	
	// Sub-menu extras
	menu_entry* keyboard = add_entry(extras, "Keyboard", keyboard_run);
     dd2:	4a ea       	ldi	r20, 0xAA	; 170
     dd4:	54 e0       	ldi	r21, 0x04	; 4
     dd6:	6c ee       	ldi	r22, 0xEC	; 236
     dd8:	72 e0       	ldi	r23, 0x02	; 2
     dda:	c8 01       	movw	r24, r16
     ddc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <add_entry>
	menu_entry* mandelbrot = add_entry(extras, "Mandelbrot", NULL);
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	65 ef       	ldi	r22, 0xF5	; 245
     de6:	72 e0       	ldi	r23, 0x02	; 2
     de8:	c8 01       	movw	r24, r16
     dea:	0e 94 69 06 	call	0xcd2	; 0xcd2 <add_entry>
	menu_entry* pong = add_entry(extras, "Play pong", NULL);
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	50 e0       	ldi	r21, 0x00	; 0
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	73 e0       	ldi	r23, 0x03	; 3
     df6:	c8 01       	movw	r24, r16
     df8:	0e 94 69 06 	call	0xcd2	; 0xcd2 <add_entry>
	menu_entry* rcube = add_entry(extras, "rotating cube", NULL);
     dfc:	40 e0       	ldi	r20, 0x00	; 0
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	6a e0       	ldi	r22, 0x0A	; 10
     e02:	73 e0       	ldi	r23, 0x03	; 3
     e04:	c8 01       	movw	r24, r16
     e06:	0e 94 69 06 	call	0xcd2	; 0xcd2 <add_entry>
	
	current_entry = main_menu;
     e0a:	d0 93 57 03 	sts	0x0357, r29
     e0e:	c0 93 56 03 	sts	0x0356, r28
	selected_entry = play;
     e12:	d0 92 55 03 	sts	0x0355, r13
     e16:	c0 92 54 03 	sts	0x0354, r12
	MENU_draw_current_menu();
     e1a:	0e 94 92 05 	call	0xb24	; 0xb24 <MENU_draw_current_menu>
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	1f 91       	pop	r17
     e24:	0f 91       	pop	r16
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	df 90       	pop	r13
     e2c:	cf 90       	pop	r12
     e2e:	08 95       	ret

00000e30 <initialize>:
#include <stdio.h>
#include <stdbool.h>


void initialize(void){
	cli();
     e30:	f8 94       	cli
	OLED_reset();
     e32:	0e 94 9c 07 	call	0xf38	; 0xf38 <OLED_reset>
	usart_init(MYUBRR);
     e36:	8f e1       	ldi	r24, 0x1F	; 31
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 76 08 	call	0x10ec	; 0x10ec <usart_init>
	SRAM_init();
     e3e:	0e 94 61 08 	call	0x10c2	; 0x10c2 <SRAM_init>
	ADC_init();
     e42:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <ADC_init>
	JOY_init();
     e46:	0e 94 16 03 	call	0x62c	; 0x62c <JOY_init>
	OLED_init();
     e4a:	0e 94 a8 07 	call	0xf50	; 0xf50 <OLED_init>
	MENU_init();
     e4e:	0e 94 ac 06 	call	0xd58	; 0xd58 <MENU_init>
	//CAN_init();
	sei();
     e52:	78 94       	sei
     e54:	08 95       	ret

00000e56 <main>:
	//printf("1. EFGL: 0x%02x\n", MCP2515_read(MCP_EFLG));
	
}

int main(void) {
	initialize();
     e56:	0e 94 18 07 	call	0xe30	; 0xe30 <initialize>
	while(1){
		MENU_run();
     e5a:	0e 94 3a 06 	call	0xc74	; 0xc74 <MENU_run>
     e5e:	fd cf       	rjmp	.-6      	; 0xe5a <main+0x4>

00000e60 <OLED_print_char>:
	write_cmd(0x81);
	write_cmd(lvl);
}

void OLED_print_char(char c){
	if (c == '\0') return;
     e60:	88 23       	and	r24, r24
     e62:	f9 f0       	breq	.+62     	; 0xea2 <OLED_print_char+0x42>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
     e64:	e8 2f       	mov	r30, r24
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	b0 97       	sbiw	r30, 0x20	; 32
	for (int col = 0; col < FONT_SIZE; col++){
     e6a:	80 91 34 01 	lds	r24, 0x0134
     e6e:	88 23       	and	r24, r24
     e70:	c1 f0       	breq	.+48     	; 0xea2 <OLED_print_char+0x42>
     e72:	ee 0f       	add	r30, r30
     e74:	ff 1f       	adc	r31, r31
     e76:	ee 0f       	add	r30, r30
     e78:	ff 1f       	adc	r31, r31
     e7a:	ee 0f       	add	r30, r30
     e7c:	ff 1f       	adc	r31, r31
     e7e:	e0 59       	subi	r30, 0x90	; 144
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
		write_data(pgm_read_byte(&font8[letter_index][col]));
     e86:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     e88:	a0 91 37 01 	lds	r26, 0x0137
     e8c:	b0 91 38 01 	lds	r27, 0x0138
     e90:	2c 93       	st	X, r18

void OLED_print_char(char c){
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++){
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	31 96       	adiw	r30, 0x01	; 1
     e96:	20 91 34 01 	lds	r18, 0x0134
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	82 17       	cp	r24, r18
     e9e:	93 07       	cpc	r25, r19
     ea0:	94 f3       	brlt	.-28     	; 0xe86 <OLED_print_char+0x26>
     ea2:	08 95       	ret

00000ea4 <write_data>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     ea4:	e0 91 37 01 	lds	r30, 0x0137
     ea8:	f0 91 38 01 	lds	r31, 0x0138
     eac:	80 83       	st	Z, r24
     eae:	08 95       	ret

00000eb0 <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7){
     eb0:	88 30       	cpi	r24, 0x08	; 8
     eb2:	30 f4       	brcc	.+12     	; 0xec0 <OLED_goto_line+0x10>
		return;
	}
	write_cmd(0xB0+line);
     eb4:	80 55       	subi	r24, 0x50	; 80
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     eb6:	e0 91 35 01 	lds	r30, 0x0135
     eba:	f0 91 36 01 	lds	r31, 0x0136
     ebe:	80 83       	st	Z, r24
     ec0:	08 95       	ret

00000ec2 <OLED_goto_column>:
	}
	write_cmd(0xB0+line);
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
     ec2:	88 23       	and	r24, r24
     ec4:	7c f0       	brlt	.+30     	; 0xee4 <OLED_goto_column+0x22>
		return;
	}
	write_cmd(0x00+column%16); //lower column register
     ec6:	98 2f       	mov	r25, r24
     ec8:	9f 70       	andi	r25, 0x0F	; 15
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     eca:	e0 91 35 01 	lds	r30, 0x0135
     ece:	f0 91 36 01 	lds	r31, 0x0136
     ed2:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127){
		return;
	}
	write_cmd(0x00+column%16); //lower column register
	write_cmd(0x10+column/16); //higher column register
     ed4:	82 95       	swap	r24
     ed6:	8f 70       	andi	r24, 0x0F	; 15
     ed8:	80 5f       	subi	r24, 0xF0	; 240
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     eda:	e0 91 35 01 	lds	r30, 0x0135
     ede:	f0 91 36 01 	lds	r31, 0x0136
     ee2:	80 83       	st	Z, r24
     ee4:	08 95       	ret

00000ee6 <OLED_pos>:
		write_data(0x00);
		
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
     ee6:	cf 93       	push	r28
     ee8:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
     eea:	88 30       	cpi	r24, 0x08	; 8
     eec:	10 f4       	brcc	.+4      	; 0xef2 <OLED_pos+0xc>
     eee:	66 23       	and	r22, r22
     ef0:	4c f4       	brge	.+18     	; 0xf04 <OLED_pos+0x1e>
		printf("Out of range in OLED_pos()");
     ef2:	88 e1       	ldi	r24, 0x18	; 24
     ef4:	93 e0       	ldi	r25, 0x03	; 3
     ef6:	9f 93       	push	r25
     ef8:	8f 93       	push	r24
     efa:	0e 94 8c 0a 	call	0x1518	; 0x1518 <printf>
		return; 
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <OLED_pos+0x28>
	}
	
	OLED_goto_line(line);
     f04:	0e 94 58 07 	call	0xeb0	; 0xeb0 <OLED_goto_line>
	OLED_goto_column(column);
     f08:	8c 2f       	mov	r24, r28
     f0a:	0e 94 61 07 	call	0xec2	; 0xec2 <OLED_goto_column>
}
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <OLED_home>:




void OLED_home(){
	OLED_pos(0,0);
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	0e 94 73 07 	call	0xee6	; 0xee6 <OLED_pos>
     f1a:	08 95       	ret

00000f1c <OLED_clear_line>:
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	0e 94 73 07 	call	0xee6	; 0xee6 <OLED_pos>
     f22:	80 e8       	ldi	r24, 0x80	; 128
     f24:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
     f26:	e0 91 37 01 	lds	r30, 0x0137
     f2a:	f0 91 38 01 	lds	r31, 0x0138
     f2e:	10 82       	st	Z, r1
     f30:	01 97       	sbiw	r24, 0x01	; 1
	OLED_pos(0,0);
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	c1 f7       	brne	.-16     	; 0xf26 <OLED_clear_line+0xa>
		write_data(0x00);
		
	}
}
     f36:	08 95       	ret

00000f38 <OLED_reset>:
	
}



void OLED_reset() {
     f38:	cf 93       	push	r28
     f3a:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
     f3c:	8c 2f       	mov	r24, r28
     f3e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <OLED_clear_line>
     f42:	cf 5f       	subi	r28, 0xFF	; 255
}



void OLED_reset() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
     f44:	c8 30       	cpi	r28, 0x08	; 8
     f46:	d1 f7       	brne	.-12     	; 0xf3c <OLED_reset+0x4>
		OLED_clear_line(page);
	}
	OLED_home();
     f48:	0e 94 89 07 	call	0xf12	; 0xf12 <OLED_home>
}
     f4c:	cf 91       	pop	r28
     f4e:	08 95       	ret

00000f50 <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	66 97       	sbiw	r28, 0x16	; 22
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
	
	
	const char addresses[] = {
     f64:	86 e1       	ldi	r24, 0x16	; 22
     f66:	e9 e3       	ldi	r30, 0x39	; 57
     f68:	f1 e0       	ldi	r31, 0x01	; 1
     f6a:	de 01       	movw	r26, r28
     f6c:	11 96       	adiw	r26, 0x01	; 1
     f6e:	01 90       	ld	r0, Z+
     f70:	0d 92       	st	X+, r0
     f72:	8a 95       	dec	r24
     f74:	e1 f7       	brne	.-8      	; 0xf6e <OLED_init+0x1e>
     f76:	fe 01       	movw	r30, r28
     f78:	31 96       	adiw	r30, 0x01	; 1
     f7a:	ce 01       	movw	r24, r28
     f7c:	47 96       	adiw	r24, 0x17	; 23
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
		write_cmd(addresses[i]);
     f7e:	21 91       	ld	r18, Z+
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     f80:	a0 91 35 01 	lds	r26, 0x0135
     f84:	b0 91 36 01 	lds	r27, 0x0136
     f88:	2c 93       	st	X, r18
		0xa6, //set normal display
		0xaf //display on
	};
	
	const int addresses_length = sizeof(addresses)/sizeof(addresses[0]);
	for (int i = 0; i < addresses_length; i++) {
     f8a:	e8 17       	cp	r30, r24
     f8c:	f9 07       	cpc	r31, r25
     f8e:	b9 f7       	brne	.-18     	; 0xf7e <OLED_init+0x2e>
		write_cmd(addresses[i]);
	}
	
	OLED_reset();
     f90:	0e 94 9c 07 	call	0xf38	; 0xf38 <OLED_reset>
	
}
     f94:	66 96       	adiw	r28, 0x16	; 22
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	08 95       	ret

00000fa6 <OLED_set_brightness>:
void write_data(uint8_t data); //write_data
void OLED_print_arrow();


void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
     fa6:	e0 91 35 01 	lds	r30, 0x0135
     faa:	f0 91 36 01 	lds	r31, 0x0136
     fae:	91 e8       	ldi	r25, 0x81	; 129
     fb0:	90 83       	st	Z, r25
     fb2:	e0 91 35 01 	lds	r30, 0x0135
     fb6:	f0 91 36 01 	lds	r31, 0x0136
     fba:	80 83       	st	Z, r24
     fbc:	08 95       	ret

00000fbe <OLED_print_char_inverse>:
		write_data(pgm_read_byte(&font8[letter_index][col]));
	}
}

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
     fbe:	88 23       	and	r24, r24
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <OLED_print_char_inverse+0x6>
     fc2:	43 c0       	rjmp	.+134    	; 0x104a <OLED_print_char_inverse+0x8c>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++) {
		write_data(~pgm_read_byte(&font8[letter_index][col]));
     fc4:	88 3d       	cpi	r24, 0xD8	; 216
     fc6:	d1 f0       	breq	.+52     	; 0xffc <OLED_print_char_inverse+0x3e>
     fc8:	28 f4       	brcc	.+10     	; 0xfd4 <OLED_print_char_inverse+0x16>
     fca:	85 3c       	cpi	r24, 0xC5	; 197
     fcc:	d1 f0       	breq	.+52     	; 0x1002 <OLED_print_char_inverse+0x44>
     fce:	86 3c       	cpi	r24, 0xC6	; 198
     fd0:	91 f0       	breq	.+36     	; 0xff6 <OLED_print_char_inverse+0x38>
     fd2:	06 c0       	rjmp	.+12     	; 0xfe0 <OLED_print_char_inverse+0x22>
     fd4:	86 3e       	cpi	r24, 0xE6	; 230
     fd6:	c1 f0       	breq	.+48     	; 0x1008 <OLED_print_char_inverse+0x4a>
     fd8:	88 3f       	cpi	r24, 0xF8	; 248
     fda:	39 f0       	breq	.+14     	; 0xfea <OLED_print_char_inverse+0x2c>
     fdc:	85 3e       	cpi	r24, 0xE5	; 229
     fde:	41 f0       	breq	.+16     	; 0xff0 <OLED_print_char_inverse+0x32>
}

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
     fe0:	48 2f       	mov	r20, r24
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	40 52       	subi	r20, 0x20	; 32
     fe6:	51 09       	sbc	r21, r1
     fe8:	11 c0       	rjmp	.+34     	; 0x100c <OLED_print_char_inverse+0x4e>
		write_data(~pgm_read_byte(&font8[letter_index][col]));
	}
}



     fea:	40 e6       	ldi	r20, 0x60	; 96
     fec:	50 e0       	ldi	r21, 0x00	; 0
//for testing purposes
     fee:	0e c0       	rjmp	.+28     	; 0x100c <OLED_print_char_inverse+0x4e>
void OLED_set_screen() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
     ff0:	41 e6       	ldi	r20, 0x61	; 97
     ff2:	50 e0       	ldi	r21, 0x00	; 0
		OLED_set_line(page);
     ff4:	0b c0       	rjmp	.+22     	; 0x100c <OLED_print_char_inverse+0x4e>
	}
	OLED_home();
     ff6:	42 e6       	ldi	r20, 0x62	; 98
     ff8:	50 e0       	ldi	r21, 0x00	; 0
}
     ffa:	08 c0       	rjmp	.+16     	; 0x100c <OLED_print_char_inverse+0x4e>

void OLED_set_line(uint8_t line) {
     ffc:	43 e6       	ldi	r20, 0x63	; 99
     ffe:	50 e0       	ldi	r21, 0x00	; 0
	OLED_pos(line,0);
    1000:	05 c0       	rjmp	.+10     	; 0x100c <OLED_print_char_inverse+0x4e>
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
		write_data(0xFF);
    1002:	44 e6       	ldi	r20, 0x64	; 100
    1004:	50 e0       	ldi	r21, 0x00	; 0
		
    1006:	02 c0       	rjmp	.+4      	; 0x100c <OLED_print_char_inverse+0x4e>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++) {
		write_data(~pgm_read_byte(&font8[letter_index][col]));
	}
}
    1008:	4f e5       	ldi	r20, 0x5F	; 95
    100a:	50 e0       	ldi	r21, 0x00	; 0
		
	}
}

void OLED_test(){
	
    100c:	80 91 34 01 	lds	r24, 0x0134
    1010:	88 23       	and	r24, r24
    1012:	d9 f0       	breq	.+54     	; 0x104a <OLED_print_char_inverse+0x8c>
    1014:	44 0f       	add	r20, r20
    1016:	55 1f       	adc	r21, r21
    1018:	44 0f       	add	r20, r20
    101a:	55 1f       	adc	r21, r21
    101c:	44 0f       	add	r20, r20
    101e:	55 1f       	adc	r21, r21
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	40 59       	subi	r20, 0x90	; 144
    1026:	5f 4f       	sbci	r21, 0xFF	; 255
    1028:	fa 01       	movw	r30, r20
    102a:	e8 0f       	add	r30, r24
    102c:	f9 1f       	adc	r31, r25
	//test brightness
    102e:	e4 91       	lpm	r30, Z
    1030:	e0 95       	com	r30
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1032:	a0 91 37 01 	lds	r26, 0x0137
    1036:	b0 91 38 01 	lds	r27, 0x0138
    103a:	ec 93       	st	X, r30
		
	}
}

void OLED_test(){
	
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	20 91 34 01 	lds	r18, 0x0134
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	82 17       	cp	r24, r18
    1046:	93 07       	cpc	r25, r19
    1048:	7c f3       	brlt	.-34     	; 0x1028 <OLED_print_char_inverse+0x6a>
    104a:	08 95       	ret

0000104c <OLED_set_line>:
	//
	//OLED_goto_line(5);
	//write_data(0xFF);
	//
	//OLED_pos(3,100);
	//write_data(0x55);
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	0e 94 73 07 	call	0xee6	; 0xee6 <OLED_pos>
    1052:	80 e8       	ldi	r24, 0x80	; 128
    1054:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1056:	2f ef       	ldi	r18, 0xFF	; 255
    1058:	e0 91 37 01 	lds	r30, 0x0137
    105c:	f0 91 38 01 	lds	r31, 0x0138
    1060:	20 83       	st	Z, r18
    1062:	01 97       	sbiw	r24, 0x01	; 1
	//OLED_goto_line(5);
	//write_data(0xFF);
	//
	//OLED_pos(3,100);
	//write_data(0x55);
	
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	c1 f7       	brne	.-16     	; 0x1058 <OLED_set_line+0xc>
	OLED_reset();
	//for (char c = 'a'; c <= 'z'; c++){
		//OLED_print_char(c);
	//}
    1068:	08 95       	ret

0000106a <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    106a:	e0 91 37 01 	lds	r30, 0x0137
    106e:	f0 91 38 01 	lds	r31, 0x0138
    1072:	88 e1       	ldi	r24, 0x18	; 24
    1074:	80 83       	st	Z, r24
    1076:	e0 91 37 01 	lds	r30, 0x0137
    107a:	f0 91 38 01 	lds	r31, 0x0138
    107e:	80 83       	st	Z, r24
    1080:	e0 91 37 01 	lds	r30, 0x0137
    1084:	f0 91 38 01 	lds	r31, 0x0138
    1088:	9e e7       	ldi	r25, 0x7E	; 126
    108a:	90 83       	st	Z, r25
    108c:	e0 91 37 01 	lds	r30, 0x0137
    1090:	f0 91 38 01 	lds	r31, 0x0138
    1094:	9c e3       	ldi	r25, 0x3C	; 60
    1096:	90 83       	st	Z, r25
    1098:	e0 91 37 01 	lds	r30, 0x0137
    109c:	f0 91 38 01 	lds	r31, 0x0138
    10a0:	80 83       	st	Z, r24
    10a2:	08 95       	ret

000010a4 <SPI_send>:
}


void SPI_send(uint8_t data){
	//Start transmission
	SPDR = data;		
    10a4:	8f b9       	out	0x0f, r24	; 15
	//wait for transmission complete SPSR: register with SPIF flag, SPIF: bit set to 1 when data is read
	loop_until_bit_is_set(SPSR, SPIF);
    10a6:	77 9b       	sbis	0x0e, 7	; 14
    10a8:	fe cf       	rjmp	.-4      	; 0x10a6 <SPI_send+0x2>
}
    10aa:	08 95       	ret

000010ac <SPI_read>:


char SPI_read(){
	//must send a dummy bit to receive data
	SPI_send(0);
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SPI_send>
	
	loop_until_bit_is_set(SPSR, SPIF);
    10b2:	77 9b       	sbis	0x0e, 7	; 14
    10b4:	fe cf       	rjmp	.-4      	; 0x10b2 <SPI_read+0x6>
	char data = SPDR;
    10b6:	8f b1       	in	r24, 0x0f	; 15
	return data;
	
}
    10b8:	08 95       	ret

000010ba <SPI_select>:
	//printf("SPI_TEST: %s\n\n", spi_read_result);
	
}

void SPI_select(){
	clear_bit(PORTB, SS);
    10ba:	c4 98       	cbi	0x18, 4	; 24
    10bc:	08 95       	ret

000010be <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
    10be:	c4 9a       	sbi	0x18, 4	; 24
    10c0:	08 95       	ret

000010c2 <SRAM_init>:



void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
    10c2:	85 b7       	in	r24, 0x35	; 53
    10c4:	80 68       	ori	r24, 0x80	; 128
    10c6:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
    10c8:	80 b7       	in	r24, 0x30	; 48
    10ca:	80 62       	ori	r24, 0x20	; 32
    10cc:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
    10ce:	80 b7       	in	r24, 0x30	; 48
    10d0:	8f 7e       	andi	r24, 0xEF	; 239
    10d2:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
    10d4:	80 b7       	in	r24, 0x30	; 48
    10d6:	87 7f       	andi	r24, 0xF7	; 247
    10d8:	80 bf       	out	0x30, r24	; 48
    10da:	08 95       	ret

000010dc <usart_transmit_to_computer>:
}


void usart_transmit_to_computer(unsigned int data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
    10dc:	5d 9b       	sbis	0x0b, 5	; 11
    10de:	fe cf       	rjmp	.-4      	; 0x10dc <usart_transmit_to_computer>
	;
	
	/* Put data into buffer (sends the data) */
	UDR0 = data;
    10e0:	8c b9       	out	0x0c, r24	; 12
    10e2:	08 95       	ret

000010e4 <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
    10e4:	5f 9b       	sbis	0x0b, 7	; 11
    10e6:	fe cf       	rjmp	.-4      	; 0x10e4 <usart_receive_from_computer>
	;
	
	/* Get and return data from buffer */
	return UDR0;
    10e8:	8c b1       	in	r24, 0x0c	; 12
}
    10ea:	08 95       	ret

000010ec <usart_init>:
#include <stdio.h>


void usart_init(unsigned int ubbr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubbr>>8);
    10ec:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
    10ee:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    10f0:	88 e1       	ldi	r24, 0x18	; 24
    10f2:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    10f4:	8e e8       	ldi	r24, 0x8E	; 142
    10f6:	80 bd       	out	0x20, r24	; 32
	
	
	/* Enable printf-thing */
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
    10f8:	62 e7       	ldi	r22, 0x72	; 114
    10fa:	78 e0       	ldi	r23, 0x08	; 8
    10fc:	8e e6       	ldi	r24, 0x6E	; 110
    10fe:	98 e0       	ldi	r25, 0x08	; 8
    1100:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <fdevopen>
    1104:	08 95       	ret

00001106 <__divmodhi4>:
    1106:	97 fb       	bst	r25, 7
    1108:	07 2e       	mov	r0, r23
    110a:	16 f4       	brtc	.+4      	; 0x1110 <__divmodhi4+0xa>
    110c:	00 94       	com	r0
    110e:	07 d0       	rcall	.+14     	; 0x111e <__divmodhi4_neg1>
    1110:	77 fd       	sbrc	r23, 7
    1112:	09 d0       	rcall	.+18     	; 0x1126 <__divmodhi4_neg2>
    1114:	0e 94 97 08 	call	0x112e	; 0x112e <__udivmodhi4>
    1118:	07 fc       	sbrc	r0, 7
    111a:	05 d0       	rcall	.+10     	; 0x1126 <__divmodhi4_neg2>
    111c:	3e f4       	brtc	.+14     	; 0x112c <__divmodhi4_exit>

0000111e <__divmodhi4_neg1>:
    111e:	90 95       	com	r25
    1120:	81 95       	neg	r24
    1122:	9f 4f       	sbci	r25, 0xFF	; 255
    1124:	08 95       	ret

00001126 <__divmodhi4_neg2>:
    1126:	70 95       	com	r23
    1128:	61 95       	neg	r22
    112a:	7f 4f       	sbci	r23, 0xFF	; 255

0000112c <__divmodhi4_exit>:
    112c:	08 95       	ret

0000112e <__udivmodhi4>:
    112e:	aa 1b       	sub	r26, r26
    1130:	bb 1b       	sub	r27, r27
    1132:	51 e1       	ldi	r21, 0x11	; 17
    1134:	07 c0       	rjmp	.+14     	; 0x1144 <__udivmodhi4_ep>

00001136 <__udivmodhi4_loop>:
    1136:	aa 1f       	adc	r26, r26
    1138:	bb 1f       	adc	r27, r27
    113a:	a6 17       	cp	r26, r22
    113c:	b7 07       	cpc	r27, r23
    113e:	10 f0       	brcs	.+4      	; 0x1144 <__udivmodhi4_ep>
    1140:	a6 1b       	sub	r26, r22
    1142:	b7 0b       	sbc	r27, r23

00001144 <__udivmodhi4_ep>:
    1144:	88 1f       	adc	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	5a 95       	dec	r21
    114a:	a9 f7       	brne	.-22     	; 0x1136 <__udivmodhi4_loop>
    114c:	80 95       	com	r24
    114e:	90 95       	com	r25
    1150:	bc 01       	movw	r22, r24
    1152:	cd 01       	movw	r24, r26
    1154:	08 95       	ret

00001156 <malloc>:
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	82 30       	cpi	r24, 0x02	; 2
    115c:	91 05       	cpc	r25, r1
    115e:	10 f4       	brcc	.+4      	; 0x1164 <malloc+0xe>
    1160:	82 e0       	ldi	r24, 0x02	; 2
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	e0 91 5a 03 	lds	r30, 0x035A
    1168:	f0 91 5b 03 	lds	r31, 0x035B
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	a0 e0       	ldi	r26, 0x00	; 0
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	30 97       	sbiw	r30, 0x00	; 0
    1176:	39 f1       	breq	.+78     	; 0x11c6 <malloc+0x70>
    1178:	40 81       	ld	r20, Z
    117a:	51 81       	ldd	r21, Z+1	; 0x01
    117c:	48 17       	cp	r20, r24
    117e:	59 07       	cpc	r21, r25
    1180:	b8 f0       	brcs	.+46     	; 0x11b0 <malloc+0x5a>
    1182:	48 17       	cp	r20, r24
    1184:	59 07       	cpc	r21, r25
    1186:	71 f4       	brne	.+28     	; 0x11a4 <malloc+0x4e>
    1188:	82 81       	ldd	r24, Z+2	; 0x02
    118a:	93 81       	ldd	r25, Z+3	; 0x03
    118c:	10 97       	sbiw	r26, 0x00	; 0
    118e:	29 f0       	breq	.+10     	; 0x119a <malloc+0x44>
    1190:	13 96       	adiw	r26, 0x03	; 3
    1192:	9c 93       	st	X, r25
    1194:	8e 93       	st	-X, r24
    1196:	12 97       	sbiw	r26, 0x02	; 2
    1198:	2c c0       	rjmp	.+88     	; 0x11f2 <malloc+0x9c>
    119a:	90 93 5b 03 	sts	0x035B, r25
    119e:	80 93 5a 03 	sts	0x035A, r24
    11a2:	27 c0       	rjmp	.+78     	; 0x11f2 <malloc+0x9c>
    11a4:	21 15       	cp	r18, r1
    11a6:	31 05       	cpc	r19, r1
    11a8:	31 f0       	breq	.+12     	; 0x11b6 <malloc+0x60>
    11aa:	42 17       	cp	r20, r18
    11ac:	53 07       	cpc	r21, r19
    11ae:	18 f0       	brcs	.+6      	; 0x11b6 <malloc+0x60>
    11b0:	a9 01       	movw	r20, r18
    11b2:	db 01       	movw	r26, r22
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <malloc+0x62>
    11b6:	ef 01       	movw	r28, r30
    11b8:	9a 01       	movw	r18, r20
    11ba:	bd 01       	movw	r22, r26
    11bc:	df 01       	movw	r26, r30
    11be:	02 80       	ldd	r0, Z+2	; 0x02
    11c0:	f3 81       	ldd	r31, Z+3	; 0x03
    11c2:	e0 2d       	mov	r30, r0
    11c4:	d7 cf       	rjmp	.-82     	; 0x1174 <malloc+0x1e>
    11c6:	21 15       	cp	r18, r1
    11c8:	31 05       	cpc	r19, r1
    11ca:	f9 f0       	breq	.+62     	; 0x120a <malloc+0xb4>
    11cc:	28 1b       	sub	r18, r24
    11ce:	39 0b       	sbc	r19, r25
    11d0:	24 30       	cpi	r18, 0x04	; 4
    11d2:	31 05       	cpc	r19, r1
    11d4:	80 f4       	brcc	.+32     	; 0x11f6 <malloc+0xa0>
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	9b 81       	ldd	r25, Y+3	; 0x03
    11da:	61 15       	cp	r22, r1
    11dc:	71 05       	cpc	r23, r1
    11de:	21 f0       	breq	.+8      	; 0x11e8 <malloc+0x92>
    11e0:	fb 01       	movw	r30, r22
    11e2:	93 83       	std	Z+3, r25	; 0x03
    11e4:	82 83       	std	Z+2, r24	; 0x02
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <malloc+0x9a>
    11e8:	90 93 5b 03 	sts	0x035B, r25
    11ec:	80 93 5a 03 	sts	0x035A, r24
    11f0:	fe 01       	movw	r30, r28
    11f2:	32 96       	adiw	r30, 0x02	; 2
    11f4:	44 c0       	rjmp	.+136    	; 0x127e <malloc+0x128>
    11f6:	fe 01       	movw	r30, r28
    11f8:	e2 0f       	add	r30, r18
    11fa:	f3 1f       	adc	r31, r19
    11fc:	81 93       	st	Z+, r24
    11fe:	91 93       	st	Z+, r25
    1200:	22 50       	subi	r18, 0x02	; 2
    1202:	31 09       	sbc	r19, r1
    1204:	39 83       	std	Y+1, r19	; 0x01
    1206:	28 83       	st	Y, r18
    1208:	3a c0       	rjmp	.+116    	; 0x127e <malloc+0x128>
    120a:	20 91 58 03 	lds	r18, 0x0358
    120e:	30 91 59 03 	lds	r19, 0x0359
    1212:	23 2b       	or	r18, r19
    1214:	41 f4       	brne	.+16     	; 0x1226 <malloc+0xd0>
    1216:	20 91 02 01 	lds	r18, 0x0102
    121a:	30 91 03 01 	lds	r19, 0x0103
    121e:	30 93 59 03 	sts	0x0359, r19
    1222:	20 93 58 03 	sts	0x0358, r18
    1226:	20 91 00 01 	lds	r18, 0x0100
    122a:	30 91 01 01 	lds	r19, 0x0101
    122e:	21 15       	cp	r18, r1
    1230:	31 05       	cpc	r19, r1
    1232:	41 f4       	brne	.+16     	; 0x1244 <malloc+0xee>
    1234:	2d b7       	in	r18, 0x3d	; 61
    1236:	3e b7       	in	r19, 0x3e	; 62
    1238:	40 91 04 01 	lds	r20, 0x0104
    123c:	50 91 05 01 	lds	r21, 0x0105
    1240:	24 1b       	sub	r18, r20
    1242:	35 0b       	sbc	r19, r21
    1244:	e0 91 58 03 	lds	r30, 0x0358
    1248:	f0 91 59 03 	lds	r31, 0x0359
    124c:	e2 17       	cp	r30, r18
    124e:	f3 07       	cpc	r31, r19
    1250:	a0 f4       	brcc	.+40     	; 0x127a <malloc+0x124>
    1252:	2e 1b       	sub	r18, r30
    1254:	3f 0b       	sbc	r19, r31
    1256:	28 17       	cp	r18, r24
    1258:	39 07       	cpc	r19, r25
    125a:	78 f0       	brcs	.+30     	; 0x127a <malloc+0x124>
    125c:	ac 01       	movw	r20, r24
    125e:	4e 5f       	subi	r20, 0xFE	; 254
    1260:	5f 4f       	sbci	r21, 0xFF	; 255
    1262:	24 17       	cp	r18, r20
    1264:	35 07       	cpc	r19, r21
    1266:	48 f0       	brcs	.+18     	; 0x127a <malloc+0x124>
    1268:	4e 0f       	add	r20, r30
    126a:	5f 1f       	adc	r21, r31
    126c:	50 93 59 03 	sts	0x0359, r21
    1270:	40 93 58 03 	sts	0x0358, r20
    1274:	81 93       	st	Z+, r24
    1276:	91 93       	st	Z+, r25
    1278:	02 c0       	rjmp	.+4      	; 0x127e <malloc+0x128>
    127a:	e0 e0       	ldi	r30, 0x00	; 0
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	cf 01       	movw	r24, r30
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	08 95       	ret

00001286 <free>:
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	09 f4       	brne	.+2      	; 0x1290 <free+0xa>
    128e:	87 c0       	rjmp	.+270    	; 0x139e <free+0x118>
    1290:	fc 01       	movw	r30, r24
    1292:	32 97       	sbiw	r30, 0x02	; 2
    1294:	13 82       	std	Z+3, r1	; 0x03
    1296:	12 82       	std	Z+2, r1	; 0x02
    1298:	c0 91 5a 03 	lds	r28, 0x035A
    129c:	d0 91 5b 03 	lds	r29, 0x035B
    12a0:	20 97       	sbiw	r28, 0x00	; 0
    12a2:	81 f4       	brne	.+32     	; 0x12c4 <free+0x3e>
    12a4:	20 81       	ld	r18, Z
    12a6:	31 81       	ldd	r19, Z+1	; 0x01
    12a8:	28 0f       	add	r18, r24
    12aa:	39 1f       	adc	r19, r25
    12ac:	80 91 58 03 	lds	r24, 0x0358
    12b0:	90 91 59 03 	lds	r25, 0x0359
    12b4:	82 17       	cp	r24, r18
    12b6:	93 07       	cpc	r25, r19
    12b8:	79 f5       	brne	.+94     	; 0x1318 <free+0x92>
    12ba:	f0 93 59 03 	sts	0x0359, r31
    12be:	e0 93 58 03 	sts	0x0358, r30
    12c2:	6d c0       	rjmp	.+218    	; 0x139e <free+0x118>
    12c4:	de 01       	movw	r26, r28
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	ae 17       	cp	r26, r30
    12cc:	bf 07       	cpc	r27, r31
    12ce:	50 f4       	brcc	.+20     	; 0x12e4 <free+0x5e>
    12d0:	12 96       	adiw	r26, 0x02	; 2
    12d2:	4d 91       	ld	r20, X+
    12d4:	5c 91       	ld	r21, X
    12d6:	13 97       	sbiw	r26, 0x03	; 3
    12d8:	9d 01       	movw	r18, r26
    12da:	41 15       	cp	r20, r1
    12dc:	51 05       	cpc	r21, r1
    12de:	09 f1       	breq	.+66     	; 0x1322 <free+0x9c>
    12e0:	da 01       	movw	r26, r20
    12e2:	f3 cf       	rjmp	.-26     	; 0x12ca <free+0x44>
    12e4:	b3 83       	std	Z+3, r27	; 0x03
    12e6:	a2 83       	std	Z+2, r26	; 0x02
    12e8:	40 81       	ld	r20, Z
    12ea:	51 81       	ldd	r21, Z+1	; 0x01
    12ec:	84 0f       	add	r24, r20
    12ee:	95 1f       	adc	r25, r21
    12f0:	8a 17       	cp	r24, r26
    12f2:	9b 07       	cpc	r25, r27
    12f4:	71 f4       	brne	.+28     	; 0x1312 <free+0x8c>
    12f6:	8d 91       	ld	r24, X+
    12f8:	9c 91       	ld	r25, X
    12fa:	11 97       	sbiw	r26, 0x01	; 1
    12fc:	84 0f       	add	r24, r20
    12fe:	95 1f       	adc	r25, r21
    1300:	02 96       	adiw	r24, 0x02	; 2
    1302:	91 83       	std	Z+1, r25	; 0x01
    1304:	80 83       	st	Z, r24
    1306:	12 96       	adiw	r26, 0x02	; 2
    1308:	8d 91       	ld	r24, X+
    130a:	9c 91       	ld	r25, X
    130c:	13 97       	sbiw	r26, 0x03	; 3
    130e:	93 83       	std	Z+3, r25	; 0x03
    1310:	82 83       	std	Z+2, r24	; 0x02
    1312:	21 15       	cp	r18, r1
    1314:	31 05       	cpc	r19, r1
    1316:	29 f4       	brne	.+10     	; 0x1322 <free+0x9c>
    1318:	f0 93 5b 03 	sts	0x035B, r31
    131c:	e0 93 5a 03 	sts	0x035A, r30
    1320:	3e c0       	rjmp	.+124    	; 0x139e <free+0x118>
    1322:	d9 01       	movw	r26, r18
    1324:	13 96       	adiw	r26, 0x03	; 3
    1326:	fc 93       	st	X, r31
    1328:	ee 93       	st	-X, r30
    132a:	12 97       	sbiw	r26, 0x02	; 2
    132c:	4d 91       	ld	r20, X+
    132e:	5d 91       	ld	r21, X+
    1330:	a4 0f       	add	r26, r20
    1332:	b5 1f       	adc	r27, r21
    1334:	ea 17       	cp	r30, r26
    1336:	fb 07       	cpc	r31, r27
    1338:	79 f4       	brne	.+30     	; 0x1358 <free+0xd2>
    133a:	80 81       	ld	r24, Z
    133c:	91 81       	ldd	r25, Z+1	; 0x01
    133e:	84 0f       	add	r24, r20
    1340:	95 1f       	adc	r25, r21
    1342:	02 96       	adiw	r24, 0x02	; 2
    1344:	d9 01       	movw	r26, r18
    1346:	11 96       	adiw	r26, 0x01	; 1
    1348:	9c 93       	st	X, r25
    134a:	8e 93       	st	-X, r24
    134c:	82 81       	ldd	r24, Z+2	; 0x02
    134e:	93 81       	ldd	r25, Z+3	; 0x03
    1350:	13 96       	adiw	r26, 0x03	; 3
    1352:	9c 93       	st	X, r25
    1354:	8e 93       	st	-X, r24
    1356:	12 97       	sbiw	r26, 0x02	; 2
    1358:	e0 e0       	ldi	r30, 0x00	; 0
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	9b 81       	ldd	r25, Y+3	; 0x03
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	19 f0       	breq	.+6      	; 0x136a <free+0xe4>
    1364:	fe 01       	movw	r30, r28
    1366:	ec 01       	movw	r28, r24
    1368:	f9 cf       	rjmp	.-14     	; 0x135c <free+0xd6>
    136a:	ce 01       	movw	r24, r28
    136c:	02 96       	adiw	r24, 0x02	; 2
    136e:	28 81       	ld	r18, Y
    1370:	39 81       	ldd	r19, Y+1	; 0x01
    1372:	82 0f       	add	r24, r18
    1374:	93 1f       	adc	r25, r19
    1376:	20 91 58 03 	lds	r18, 0x0358
    137a:	30 91 59 03 	lds	r19, 0x0359
    137e:	28 17       	cp	r18, r24
    1380:	39 07       	cpc	r19, r25
    1382:	69 f4       	brne	.+26     	; 0x139e <free+0x118>
    1384:	30 97       	sbiw	r30, 0x00	; 0
    1386:	29 f4       	brne	.+10     	; 0x1392 <free+0x10c>
    1388:	10 92 5b 03 	sts	0x035B, r1
    138c:	10 92 5a 03 	sts	0x035A, r1
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <free+0x110>
    1392:	13 82       	std	Z+3, r1	; 0x03
    1394:	12 82       	std	Z+2, r1	; 0x02
    1396:	d0 93 59 03 	sts	0x0359, r29
    139a:	c0 93 58 03 	sts	0x0358, r28
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	08 95       	ret

000013a4 <fdevopen>:
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	ec 01       	movw	r28, r24
    13ae:	8b 01       	movw	r16, r22
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	31 f4       	brne	.+12     	; 0x13c0 <fdevopen+0x1c>
    13b4:	61 15       	cp	r22, r1
    13b6:	71 05       	cpc	r23, r1
    13b8:	19 f4       	brne	.+6      	; 0x13c0 <fdevopen+0x1c>
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	38 c0       	rjmp	.+112    	; 0x1430 <fdevopen+0x8c>
    13c0:	6e e0       	ldi	r22, 0x0E	; 14
    13c2:	70 e0       	ldi	r23, 0x00	; 0
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 a6 0c 	call	0x194c	; 0x194c <calloc>
    13cc:	fc 01       	movw	r30, r24
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	a1 f3       	breq	.-24     	; 0x13ba <fdevopen+0x16>
    13d2:	80 e8       	ldi	r24, 0x80	; 128
    13d4:	83 83       	std	Z+3, r24	; 0x03
    13d6:	01 15       	cp	r16, r1
    13d8:	11 05       	cpc	r17, r1
    13da:	71 f0       	breq	.+28     	; 0x13f8 <fdevopen+0x54>
    13dc:	13 87       	std	Z+11, r17	; 0x0b
    13de:	02 87       	std	Z+10, r16	; 0x0a
    13e0:	81 e8       	ldi	r24, 0x81	; 129
    13e2:	83 83       	std	Z+3, r24	; 0x03
    13e4:	80 91 5c 03 	lds	r24, 0x035C
    13e8:	90 91 5d 03 	lds	r25, 0x035D
    13ec:	89 2b       	or	r24, r25
    13ee:	21 f4       	brne	.+8      	; 0x13f8 <fdevopen+0x54>
    13f0:	f0 93 5d 03 	sts	0x035D, r31
    13f4:	e0 93 5c 03 	sts	0x035C, r30
    13f8:	20 97       	sbiw	r28, 0x00	; 0
    13fa:	c9 f0       	breq	.+50     	; 0x142e <fdevopen+0x8a>
    13fc:	d1 87       	std	Z+9, r29	; 0x09
    13fe:	c0 87       	std	Z+8, r28	; 0x08
    1400:	83 81       	ldd	r24, Z+3	; 0x03
    1402:	82 60       	ori	r24, 0x02	; 2
    1404:	83 83       	std	Z+3, r24	; 0x03
    1406:	80 91 5e 03 	lds	r24, 0x035E
    140a:	90 91 5f 03 	lds	r25, 0x035F
    140e:	89 2b       	or	r24, r25
    1410:	71 f4       	brne	.+28     	; 0x142e <fdevopen+0x8a>
    1412:	f0 93 5f 03 	sts	0x035F, r31
    1416:	e0 93 5e 03 	sts	0x035E, r30
    141a:	80 91 60 03 	lds	r24, 0x0360
    141e:	90 91 61 03 	lds	r25, 0x0361
    1422:	89 2b       	or	r24, r25
    1424:	21 f4       	brne	.+8      	; 0x142e <fdevopen+0x8a>
    1426:	f0 93 61 03 	sts	0x0361, r31
    142a:	e0 93 60 03 	sts	0x0360, r30
    142e:	cf 01       	movw	r24, r30
    1430:	df 91       	pop	r29
    1432:	cf 91       	pop	r28
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	08 95       	ret

0000143a <fprintf>:
    143a:	a0 e0       	ldi	r26, 0x00	; 0
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e3 e2       	ldi	r30, 0x23	; 35
    1440:	fa e0       	ldi	r31, 0x0A	; 10
    1442:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__prologue_saves__+0x20>
    1446:	ae 01       	movw	r20, r28
    1448:	47 5f       	subi	r20, 0xF7	; 247
    144a:	5f 4f       	sbci	r21, 0xFF	; 255
    144c:	6f 81       	ldd	r22, Y+7	; 0x07
    144e:	78 85       	ldd	r23, Y+8	; 0x08
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	9e 81       	ldd	r25, Y+6	; 0x06
    1454:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <vfprintf>
    1458:	e2 e0       	ldi	r30, 0x02	; 2
    145a:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__epilogue_restores__+0x20>

0000145e <fputs>:
    145e:	ef 92       	push	r14
    1460:	ff 92       	push	r15
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	8b 01       	movw	r16, r22
    146c:	db 01       	movw	r26, r22
    146e:	13 96       	adiw	r26, 0x03	; 3
    1470:	2c 91       	ld	r18, X
    1472:	21 ff       	sbrs	r18, 1
    1474:	16 c0       	rjmp	.+44     	; 0x14a2 <fputs+0x44>
    1476:	ec 01       	movw	r28, r24
    1478:	e1 2c       	mov	r14, r1
    147a:	f1 2c       	mov	r15, r1
    147c:	89 91       	ld	r24, Y+
    147e:	88 23       	and	r24, r24
    1480:	71 f0       	breq	.+28     	; 0x149e <fputs+0x40>
    1482:	d8 01       	movw	r26, r16
    1484:	18 96       	adiw	r26, 0x08	; 8
    1486:	ed 91       	ld	r30, X+
    1488:	fc 91       	ld	r31, X
    148a:	19 97       	sbiw	r26, 0x09	; 9
    148c:	b8 01       	movw	r22, r16
    148e:	09 95       	icall
    1490:	89 2b       	or	r24, r25
    1492:	a1 f3       	breq	.-24     	; 0x147c <fputs+0x1e>
    1494:	ee 24       	eor	r14, r14
    1496:	ea 94       	dec	r14
    1498:	ff 24       	eor	r15, r15
    149a:	fa 94       	dec	r15
    149c:	ef cf       	rjmp	.-34     	; 0x147c <fputs+0x1e>
    149e:	c7 01       	movw	r24, r14
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <fputs+0x48>
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	9f ef       	ldi	r25, 0xFF	; 255
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	e6 e0       	ldi	r30, 0x06	; 6
    14ac:	0c 94 97 0d 	jmp	0x1b2e	; 0x1b2e <__epilogue_restores__+0x18>

000014b0 <fwrite>:
    14b0:	a0 e0       	ldi	r26, 0x00	; 0
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	ee e5       	ldi	r30, 0x5E	; 94
    14b6:	fa e0       	ldi	r31, 0x0A	; 10
    14b8:	0c 94 75 0d 	jmp	0x1aea	; 0x1aea <__prologue_saves__+0xc>
    14bc:	6b 01       	movw	r12, r22
    14be:	4a 01       	movw	r8, r20
    14c0:	79 01       	movw	r14, r18
    14c2:	d9 01       	movw	r26, r18
    14c4:	13 96       	adiw	r26, 0x03	; 3
    14c6:	2c 91       	ld	r18, X
    14c8:	21 ff       	sbrs	r18, 1
    14ca:	1d c0       	rjmp	.+58     	; 0x1506 <fwrite+0x56>
    14cc:	c0 e0       	ldi	r28, 0x00	; 0
    14ce:	d0 e0       	ldi	r29, 0x00	; 0
    14d0:	c8 15       	cp	r28, r8
    14d2:	d9 05       	cpc	r29, r9
    14d4:	d9 f0       	breq	.+54     	; 0x150c <fwrite+0x5c>
    14d6:	8c 01       	movw	r16, r24
    14d8:	5c 01       	movw	r10, r24
    14da:	ac 0c       	add	r10, r12
    14dc:	bd 1c       	adc	r11, r13
    14de:	c8 01       	movw	r24, r16
    14e0:	0a 15       	cp	r16, r10
    14e2:	1b 05       	cpc	r17, r11
    14e4:	71 f0       	breq	.+28     	; 0x1502 <fwrite+0x52>
    14e6:	0f 5f       	subi	r16, 0xFF	; 255
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	d7 01       	movw	r26, r14
    14ec:	18 96       	adiw	r26, 0x08	; 8
    14ee:	ed 91       	ld	r30, X+
    14f0:	fc 91       	ld	r31, X
    14f2:	19 97       	sbiw	r26, 0x09	; 9
    14f4:	b7 01       	movw	r22, r14
    14f6:	dc 01       	movw	r26, r24
    14f8:	8c 91       	ld	r24, X
    14fa:	09 95       	icall
    14fc:	89 2b       	or	r24, r25
    14fe:	79 f3       	breq	.-34     	; 0x14de <fwrite+0x2e>
    1500:	05 c0       	rjmp	.+10     	; 0x150c <fwrite+0x5c>
    1502:	21 96       	adiw	r28, 0x01	; 1
    1504:	e5 cf       	rjmp	.-54     	; 0x14d0 <fwrite+0x20>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	01 c0       	rjmp	.+2      	; 0x150e <fwrite+0x5e>
    150c:	ce 01       	movw	r24, r28
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	ec e0       	ldi	r30, 0x0C	; 12
    1514:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <__epilogue_restores__+0xc>

00001518 <printf>:
    1518:	a0 e0       	ldi	r26, 0x00	; 0
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e2 e9       	ldi	r30, 0x92	; 146
    151e:	fa e0       	ldi	r31, 0x0A	; 10
    1520:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__prologue_saves__+0x20>
    1524:	fe 01       	movw	r30, r28
    1526:	35 96       	adiw	r30, 0x05	; 5
    1528:	61 91       	ld	r22, Z+
    152a:	71 91       	ld	r23, Z+
    152c:	af 01       	movw	r20, r30
    152e:	80 91 5e 03 	lds	r24, 0x035E
    1532:	90 91 5f 03 	lds	r25, 0x035F
    1536:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <vfprintf>
    153a:	e2 e0       	ldi	r30, 0x02	; 2
    153c:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__epilogue_restores__+0x20>

00001540 <putchar>:
    1540:	60 91 5e 03 	lds	r22, 0x035E
    1544:	70 91 5f 03 	lds	r23, 0x035F
    1548:	0e 94 df 0c 	call	0x19be	; 0x19be <fputc>
    154c:	08 95       	ret

0000154e <puts>:
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	e0 91 5e 03 	lds	r30, 0x035E
    155a:	f0 91 5f 03 	lds	r31, 0x035F
    155e:	23 81       	ldd	r18, Z+3	; 0x03
    1560:	21 ff       	sbrs	r18, 1
    1562:	1b c0       	rjmp	.+54     	; 0x159a <puts+0x4c>
    1564:	ec 01       	movw	r28, r24
    1566:	00 e0       	ldi	r16, 0x00	; 0
    1568:	10 e0       	ldi	r17, 0x00	; 0
    156a:	89 91       	ld	r24, Y+
    156c:	60 91 5e 03 	lds	r22, 0x035E
    1570:	70 91 5f 03 	lds	r23, 0x035F
    1574:	db 01       	movw	r26, r22
    1576:	18 96       	adiw	r26, 0x08	; 8
    1578:	ed 91       	ld	r30, X+
    157a:	fc 91       	ld	r31, X
    157c:	19 97       	sbiw	r26, 0x09	; 9
    157e:	88 23       	and	r24, r24
    1580:	31 f0       	breq	.+12     	; 0x158e <puts+0x40>
    1582:	09 95       	icall
    1584:	89 2b       	or	r24, r25
    1586:	89 f3       	breq	.-30     	; 0x156a <puts+0x1c>
    1588:	0f ef       	ldi	r16, 0xFF	; 255
    158a:	1f ef       	ldi	r17, 0xFF	; 255
    158c:	ee cf       	rjmp	.-36     	; 0x156a <puts+0x1c>
    158e:	8a e0       	ldi	r24, 0x0A	; 10
    1590:	09 95       	icall
    1592:	89 2b       	or	r24, r25
    1594:	11 f4       	brne	.+4      	; 0x159a <puts+0x4c>
    1596:	c8 01       	movw	r24, r16
    1598:	02 c0       	rjmp	.+4      	; 0x159e <puts+0x50>
    159a:	8f ef       	ldi	r24, 0xFF	; 255
    159c:	9f ef       	ldi	r25, 0xFF	; 255
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	08 95       	ret

000015a8 <vfprintf>:
    15a8:	ac e0       	ldi	r26, 0x0C	; 12
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	ea ed       	ldi	r30, 0xDA	; 218
    15ae:	fa e0       	ldi	r31, 0x0A	; 10
    15b0:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__prologue_saves__>
    15b4:	7c 01       	movw	r14, r24
    15b6:	6b 01       	movw	r12, r22
    15b8:	8a 01       	movw	r16, r20
    15ba:	fc 01       	movw	r30, r24
    15bc:	17 82       	std	Z+7, r1	; 0x07
    15be:	16 82       	std	Z+6, r1	; 0x06
    15c0:	83 81       	ldd	r24, Z+3	; 0x03
    15c2:	81 ff       	sbrs	r24, 1
    15c4:	bd c1       	rjmp	.+890    	; 0x1940 <vfprintf+0x398>
    15c6:	ce 01       	movw	r24, r28
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	4c 01       	movw	r8, r24
    15cc:	f7 01       	movw	r30, r14
    15ce:	93 81       	ldd	r25, Z+3	; 0x03
    15d0:	f6 01       	movw	r30, r12
    15d2:	93 fd       	sbrc	r25, 3
    15d4:	85 91       	lpm	r24, Z+
    15d6:	93 ff       	sbrs	r25, 3
    15d8:	81 91       	ld	r24, Z+
    15da:	6f 01       	movw	r12, r30
    15dc:	88 23       	and	r24, r24
    15de:	09 f4       	brne	.+2      	; 0x15e2 <vfprintf+0x3a>
    15e0:	ab c1       	rjmp	.+854    	; 0x1938 <vfprintf+0x390>
    15e2:	85 32       	cpi	r24, 0x25	; 37
    15e4:	39 f4       	brne	.+14     	; 0x15f4 <vfprintf+0x4c>
    15e6:	93 fd       	sbrc	r25, 3
    15e8:	85 91       	lpm	r24, Z+
    15ea:	93 ff       	sbrs	r25, 3
    15ec:	81 91       	ld	r24, Z+
    15ee:	6f 01       	movw	r12, r30
    15f0:	85 32       	cpi	r24, 0x25	; 37
    15f2:	29 f4       	brne	.+10     	; 0x15fe <vfprintf+0x56>
    15f4:	b7 01       	movw	r22, r14
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	0e 94 df 0c 	call	0x19be	; 0x19be <fputc>
    15fc:	e7 cf       	rjmp	.-50     	; 0x15cc <vfprintf+0x24>
    15fe:	51 2c       	mov	r5, r1
    1600:	31 2c       	mov	r3, r1
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	20 32       	cpi	r18, 0x20	; 32
    1606:	a0 f4       	brcc	.+40     	; 0x1630 <vfprintf+0x88>
    1608:	8b 32       	cpi	r24, 0x2B	; 43
    160a:	69 f0       	breq	.+26     	; 0x1626 <vfprintf+0x7e>
    160c:	30 f4       	brcc	.+12     	; 0x161a <vfprintf+0x72>
    160e:	80 32       	cpi	r24, 0x20	; 32
    1610:	59 f0       	breq	.+22     	; 0x1628 <vfprintf+0x80>
    1612:	83 32       	cpi	r24, 0x23	; 35
    1614:	69 f4       	brne	.+26     	; 0x1630 <vfprintf+0x88>
    1616:	20 61       	ori	r18, 0x10	; 16
    1618:	2c c0       	rjmp	.+88     	; 0x1672 <vfprintf+0xca>
    161a:	8d 32       	cpi	r24, 0x2D	; 45
    161c:	39 f0       	breq	.+14     	; 0x162c <vfprintf+0x84>
    161e:	80 33       	cpi	r24, 0x30	; 48
    1620:	39 f4       	brne	.+14     	; 0x1630 <vfprintf+0x88>
    1622:	21 60       	ori	r18, 0x01	; 1
    1624:	26 c0       	rjmp	.+76     	; 0x1672 <vfprintf+0xca>
    1626:	22 60       	ori	r18, 0x02	; 2
    1628:	24 60       	ori	r18, 0x04	; 4
    162a:	23 c0       	rjmp	.+70     	; 0x1672 <vfprintf+0xca>
    162c:	28 60       	ori	r18, 0x08	; 8
    162e:	21 c0       	rjmp	.+66     	; 0x1672 <vfprintf+0xca>
    1630:	27 fd       	sbrc	r18, 7
    1632:	27 c0       	rjmp	.+78     	; 0x1682 <vfprintf+0xda>
    1634:	30 ed       	ldi	r19, 0xD0	; 208
    1636:	38 0f       	add	r19, r24
    1638:	3a 30       	cpi	r19, 0x0A	; 10
    163a:	78 f4       	brcc	.+30     	; 0x165a <vfprintf+0xb2>
    163c:	26 ff       	sbrs	r18, 6
    163e:	06 c0       	rjmp	.+12     	; 0x164c <vfprintf+0xa4>
    1640:	fa e0       	ldi	r31, 0x0A	; 10
    1642:	5f 9e       	mul	r5, r31
    1644:	30 0d       	add	r19, r0
    1646:	11 24       	eor	r1, r1
    1648:	53 2e       	mov	r5, r19
    164a:	13 c0       	rjmp	.+38     	; 0x1672 <vfprintf+0xca>
    164c:	8a e0       	ldi	r24, 0x0A	; 10
    164e:	38 9e       	mul	r3, r24
    1650:	30 0d       	add	r19, r0
    1652:	11 24       	eor	r1, r1
    1654:	33 2e       	mov	r3, r19
    1656:	20 62       	ori	r18, 0x20	; 32
    1658:	0c c0       	rjmp	.+24     	; 0x1672 <vfprintf+0xca>
    165a:	8e 32       	cpi	r24, 0x2E	; 46
    165c:	21 f4       	brne	.+8      	; 0x1666 <vfprintf+0xbe>
    165e:	26 fd       	sbrc	r18, 6
    1660:	6b c1       	rjmp	.+726    	; 0x1938 <vfprintf+0x390>
    1662:	20 64       	ori	r18, 0x40	; 64
    1664:	06 c0       	rjmp	.+12     	; 0x1672 <vfprintf+0xca>
    1666:	8c 36       	cpi	r24, 0x6C	; 108
    1668:	11 f4       	brne	.+4      	; 0x166e <vfprintf+0xc6>
    166a:	20 68       	ori	r18, 0x80	; 128
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <vfprintf+0xca>
    166e:	88 36       	cpi	r24, 0x68	; 104
    1670:	41 f4       	brne	.+16     	; 0x1682 <vfprintf+0xda>
    1672:	f6 01       	movw	r30, r12
    1674:	93 fd       	sbrc	r25, 3
    1676:	85 91       	lpm	r24, Z+
    1678:	93 ff       	sbrs	r25, 3
    167a:	81 91       	ld	r24, Z+
    167c:	6f 01       	movw	r12, r30
    167e:	81 11       	cpse	r24, r1
    1680:	c1 cf       	rjmp	.-126    	; 0x1604 <vfprintf+0x5c>
    1682:	98 2f       	mov	r25, r24
    1684:	9f 7d       	andi	r25, 0xDF	; 223
    1686:	95 54       	subi	r25, 0x45	; 69
    1688:	93 30       	cpi	r25, 0x03	; 3
    168a:	28 f4       	brcc	.+10     	; 0x1696 <vfprintf+0xee>
    168c:	0c 5f       	subi	r16, 0xFC	; 252
    168e:	1f 4f       	sbci	r17, 0xFF	; 255
    1690:	ff e3       	ldi	r31, 0x3F	; 63
    1692:	f9 83       	std	Y+1, r31	; 0x01
    1694:	0d c0       	rjmp	.+26     	; 0x16b0 <vfprintf+0x108>
    1696:	83 36       	cpi	r24, 0x63	; 99
    1698:	31 f0       	breq	.+12     	; 0x16a6 <vfprintf+0xfe>
    169a:	83 37       	cpi	r24, 0x73	; 115
    169c:	71 f0       	breq	.+28     	; 0x16ba <vfprintf+0x112>
    169e:	83 35       	cpi	r24, 0x53	; 83
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <vfprintf+0xfc>
    16a2:	5b c0       	rjmp	.+182    	; 0x175a <vfprintf+0x1b2>
    16a4:	22 c0       	rjmp	.+68     	; 0x16ea <vfprintf+0x142>
    16a6:	f8 01       	movw	r30, r16
    16a8:	80 81       	ld	r24, Z
    16aa:	89 83       	std	Y+1, r24	; 0x01
    16ac:	0e 5f       	subi	r16, 0xFE	; 254
    16ae:	1f 4f       	sbci	r17, 0xFF	; 255
    16b0:	44 24       	eor	r4, r4
    16b2:	43 94       	inc	r4
    16b4:	51 2c       	mov	r5, r1
    16b6:	54 01       	movw	r10, r8
    16b8:	15 c0       	rjmp	.+42     	; 0x16e4 <vfprintf+0x13c>
    16ba:	38 01       	movw	r6, r16
    16bc:	f2 e0       	ldi	r31, 0x02	; 2
    16be:	6f 0e       	add	r6, r31
    16c0:	71 1c       	adc	r7, r1
    16c2:	f8 01       	movw	r30, r16
    16c4:	a0 80       	ld	r10, Z
    16c6:	b1 80       	ldd	r11, Z+1	; 0x01
    16c8:	26 ff       	sbrs	r18, 6
    16ca:	03 c0       	rjmp	.+6      	; 0x16d2 <vfprintf+0x12a>
    16cc:	65 2d       	mov	r22, r5
    16ce:	70 e0       	ldi	r23, 0x00	; 0
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <vfprintf+0x12e>
    16d2:	6f ef       	ldi	r22, 0xFF	; 255
    16d4:	7f ef       	ldi	r23, 0xFF	; 255
    16d6:	c5 01       	movw	r24, r10
    16d8:	2c 87       	std	Y+12, r18	; 0x0c
    16da:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <strnlen>
    16de:	2c 01       	movw	r4, r24
    16e0:	83 01       	movw	r16, r6
    16e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    16e4:	2f 77       	andi	r18, 0x7F	; 127
    16e6:	22 2e       	mov	r2, r18
    16e8:	17 c0       	rjmp	.+46     	; 0x1718 <vfprintf+0x170>
    16ea:	38 01       	movw	r6, r16
    16ec:	f2 e0       	ldi	r31, 0x02	; 2
    16ee:	6f 0e       	add	r6, r31
    16f0:	71 1c       	adc	r7, r1
    16f2:	f8 01       	movw	r30, r16
    16f4:	a0 80       	ld	r10, Z
    16f6:	b1 80       	ldd	r11, Z+1	; 0x01
    16f8:	26 ff       	sbrs	r18, 6
    16fa:	03 c0       	rjmp	.+6      	; 0x1702 <vfprintf+0x15a>
    16fc:	65 2d       	mov	r22, r5
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <vfprintf+0x15e>
    1702:	6f ef       	ldi	r22, 0xFF	; 255
    1704:	7f ef       	ldi	r23, 0xFF	; 255
    1706:	c5 01       	movw	r24, r10
    1708:	2c 87       	std	Y+12, r18	; 0x0c
    170a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <strnlen_P>
    170e:	2c 01       	movw	r4, r24
    1710:	2c 85       	ldd	r18, Y+12	; 0x0c
    1712:	20 68       	ori	r18, 0x80	; 128
    1714:	22 2e       	mov	r2, r18
    1716:	83 01       	movw	r16, r6
    1718:	23 fc       	sbrc	r2, 3
    171a:	1b c0       	rjmp	.+54     	; 0x1752 <vfprintf+0x1aa>
    171c:	83 2d       	mov	r24, r3
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	48 16       	cp	r4, r24
    1722:	59 06       	cpc	r5, r25
    1724:	b0 f4       	brcc	.+44     	; 0x1752 <vfprintf+0x1aa>
    1726:	b7 01       	movw	r22, r14
    1728:	80 e2       	ldi	r24, 0x20	; 32
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 94 df 0c 	call	0x19be	; 0x19be <fputc>
    1730:	3a 94       	dec	r3
    1732:	f4 cf       	rjmp	.-24     	; 0x171c <vfprintf+0x174>
    1734:	f5 01       	movw	r30, r10
    1736:	27 fc       	sbrc	r2, 7
    1738:	85 91       	lpm	r24, Z+
    173a:	27 fe       	sbrs	r2, 7
    173c:	81 91       	ld	r24, Z+
    173e:	5f 01       	movw	r10, r30
    1740:	b7 01       	movw	r22, r14
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	0e 94 df 0c 	call	0x19be	; 0x19be <fputc>
    1748:	31 10       	cpse	r3, r1
    174a:	3a 94       	dec	r3
    174c:	f1 e0       	ldi	r31, 0x01	; 1
    174e:	4f 1a       	sub	r4, r31
    1750:	51 08       	sbc	r5, r1
    1752:	41 14       	cp	r4, r1
    1754:	51 04       	cpc	r5, r1
    1756:	71 f7       	brne	.-36     	; 0x1734 <vfprintf+0x18c>
    1758:	e5 c0       	rjmp	.+458    	; 0x1924 <vfprintf+0x37c>
    175a:	84 36       	cpi	r24, 0x64	; 100
    175c:	11 f0       	breq	.+4      	; 0x1762 <vfprintf+0x1ba>
    175e:	89 36       	cpi	r24, 0x69	; 105
    1760:	39 f5       	brne	.+78     	; 0x17b0 <vfprintf+0x208>
    1762:	f8 01       	movw	r30, r16
    1764:	27 ff       	sbrs	r18, 7
    1766:	07 c0       	rjmp	.+14     	; 0x1776 <vfprintf+0x1ce>
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	0c 5f       	subi	r16, 0xFC	; 252
    1772:	1f 4f       	sbci	r17, 0xFF	; 255
    1774:	08 c0       	rjmp	.+16     	; 0x1786 <vfprintf+0x1de>
    1776:	60 81       	ld	r22, Z
    1778:	71 81       	ldd	r23, Z+1	; 0x01
    177a:	88 27       	eor	r24, r24
    177c:	77 fd       	sbrc	r23, 7
    177e:	80 95       	com	r24
    1780:	98 2f       	mov	r25, r24
    1782:	0e 5f       	subi	r16, 0xFE	; 254
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	2f 76       	andi	r18, 0x6F	; 111
    1788:	b2 2e       	mov	r11, r18
    178a:	97 ff       	sbrs	r25, 7
    178c:	09 c0       	rjmp	.+18     	; 0x17a0 <vfprintf+0x1f8>
    178e:	90 95       	com	r25
    1790:	80 95       	com	r24
    1792:	70 95       	com	r23
    1794:	61 95       	neg	r22
    1796:	7f 4f       	sbci	r23, 0xFF	; 255
    1798:	8f 4f       	sbci	r24, 0xFF	; 255
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	20 68       	ori	r18, 0x80	; 128
    179e:	b2 2e       	mov	r11, r18
    17a0:	2a e0       	ldi	r18, 0x0A	; 10
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	a4 01       	movw	r20, r8
    17a6:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__ultoa_invert>
    17aa:	a8 2e       	mov	r10, r24
    17ac:	a8 18       	sub	r10, r8
    17ae:	44 c0       	rjmp	.+136    	; 0x1838 <vfprintf+0x290>
    17b0:	85 37       	cpi	r24, 0x75	; 117
    17b2:	29 f4       	brne	.+10     	; 0x17be <vfprintf+0x216>
    17b4:	2f 7e       	andi	r18, 0xEF	; 239
    17b6:	b2 2e       	mov	r11, r18
    17b8:	2a e0       	ldi	r18, 0x0A	; 10
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	25 c0       	rjmp	.+74     	; 0x1808 <vfprintf+0x260>
    17be:	f2 2f       	mov	r31, r18
    17c0:	f9 7f       	andi	r31, 0xF9	; 249
    17c2:	bf 2e       	mov	r11, r31
    17c4:	8f 36       	cpi	r24, 0x6F	; 111
    17c6:	c1 f0       	breq	.+48     	; 0x17f8 <vfprintf+0x250>
    17c8:	18 f4       	brcc	.+6      	; 0x17d0 <vfprintf+0x228>
    17ca:	88 35       	cpi	r24, 0x58	; 88
    17cc:	79 f0       	breq	.+30     	; 0x17ec <vfprintf+0x244>
    17ce:	b4 c0       	rjmp	.+360    	; 0x1938 <vfprintf+0x390>
    17d0:	80 37       	cpi	r24, 0x70	; 112
    17d2:	19 f0       	breq	.+6      	; 0x17da <vfprintf+0x232>
    17d4:	88 37       	cpi	r24, 0x78	; 120
    17d6:	21 f0       	breq	.+8      	; 0x17e0 <vfprintf+0x238>
    17d8:	af c0       	rjmp	.+350    	; 0x1938 <vfprintf+0x390>
    17da:	2f 2f       	mov	r18, r31
    17dc:	20 61       	ori	r18, 0x10	; 16
    17de:	b2 2e       	mov	r11, r18
    17e0:	b4 fe       	sbrs	r11, 4
    17e2:	0d c0       	rjmp	.+26     	; 0x17fe <vfprintf+0x256>
    17e4:	8b 2d       	mov	r24, r11
    17e6:	84 60       	ori	r24, 0x04	; 4
    17e8:	b8 2e       	mov	r11, r24
    17ea:	09 c0       	rjmp	.+18     	; 0x17fe <vfprintf+0x256>
    17ec:	24 ff       	sbrs	r18, 4
    17ee:	0a c0       	rjmp	.+20     	; 0x1804 <vfprintf+0x25c>
    17f0:	9f 2f       	mov	r25, r31
    17f2:	96 60       	ori	r25, 0x06	; 6
    17f4:	b9 2e       	mov	r11, r25
    17f6:	06 c0       	rjmp	.+12     	; 0x1804 <vfprintf+0x25c>
    17f8:	28 e0       	ldi	r18, 0x08	; 8
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	05 c0       	rjmp	.+10     	; 0x1808 <vfprintf+0x260>
    17fe:	20 e1       	ldi	r18, 0x10	; 16
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <vfprintf+0x260>
    1804:	20 e1       	ldi	r18, 0x10	; 16
    1806:	32 e0       	ldi	r19, 0x02	; 2
    1808:	f8 01       	movw	r30, r16
    180a:	b7 fe       	sbrs	r11, 7
    180c:	07 c0       	rjmp	.+14     	; 0x181c <vfprintf+0x274>
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	82 81       	ldd	r24, Z+2	; 0x02
    1814:	93 81       	ldd	r25, Z+3	; 0x03
    1816:	0c 5f       	subi	r16, 0xFC	; 252
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	06 c0       	rjmp	.+12     	; 0x1828 <vfprintf+0x280>
    181c:	60 81       	ld	r22, Z
    181e:	71 81       	ldd	r23, Z+1	; 0x01
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 5f       	subi	r16, 0xFE	; 254
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	a4 01       	movw	r20, r8
    182a:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__ultoa_invert>
    182e:	a8 2e       	mov	r10, r24
    1830:	a8 18       	sub	r10, r8
    1832:	fb 2d       	mov	r31, r11
    1834:	ff 77       	andi	r31, 0x7F	; 127
    1836:	bf 2e       	mov	r11, r31
    1838:	b6 fe       	sbrs	r11, 6
    183a:	0b c0       	rjmp	.+22     	; 0x1852 <vfprintf+0x2aa>
    183c:	2b 2d       	mov	r18, r11
    183e:	2e 7f       	andi	r18, 0xFE	; 254
    1840:	a5 14       	cp	r10, r5
    1842:	50 f4       	brcc	.+20     	; 0x1858 <vfprintf+0x2b0>
    1844:	b4 fe       	sbrs	r11, 4
    1846:	0a c0       	rjmp	.+20     	; 0x185c <vfprintf+0x2b4>
    1848:	b2 fc       	sbrc	r11, 2
    184a:	08 c0       	rjmp	.+16     	; 0x185c <vfprintf+0x2b4>
    184c:	2b 2d       	mov	r18, r11
    184e:	2e 7e       	andi	r18, 0xEE	; 238
    1850:	05 c0       	rjmp	.+10     	; 0x185c <vfprintf+0x2b4>
    1852:	7a 2c       	mov	r7, r10
    1854:	2b 2d       	mov	r18, r11
    1856:	03 c0       	rjmp	.+6      	; 0x185e <vfprintf+0x2b6>
    1858:	7a 2c       	mov	r7, r10
    185a:	01 c0       	rjmp	.+2      	; 0x185e <vfprintf+0x2b6>
    185c:	75 2c       	mov	r7, r5
    185e:	24 ff       	sbrs	r18, 4
    1860:	0d c0       	rjmp	.+26     	; 0x187c <vfprintf+0x2d4>
    1862:	fe 01       	movw	r30, r28
    1864:	ea 0d       	add	r30, r10
    1866:	f1 1d       	adc	r31, r1
    1868:	80 81       	ld	r24, Z
    186a:	80 33       	cpi	r24, 0x30	; 48
    186c:	11 f4       	brne	.+4      	; 0x1872 <vfprintf+0x2ca>
    186e:	29 7e       	andi	r18, 0xE9	; 233
    1870:	09 c0       	rjmp	.+18     	; 0x1884 <vfprintf+0x2dc>
    1872:	22 ff       	sbrs	r18, 2
    1874:	06 c0       	rjmp	.+12     	; 0x1882 <vfprintf+0x2da>
    1876:	73 94       	inc	r7
    1878:	73 94       	inc	r7
    187a:	04 c0       	rjmp	.+8      	; 0x1884 <vfprintf+0x2dc>
    187c:	82 2f       	mov	r24, r18
    187e:	86 78       	andi	r24, 0x86	; 134
    1880:	09 f0       	breq	.+2      	; 0x1884 <vfprintf+0x2dc>
    1882:	73 94       	inc	r7
    1884:	23 fd       	sbrc	r18, 3
    1886:	13 c0       	rjmp	.+38     	; 0x18ae <vfprintf+0x306>
    1888:	20 ff       	sbrs	r18, 0
    188a:	06 c0       	rjmp	.+12     	; 0x1898 <vfprintf+0x2f0>
    188c:	5a 2c       	mov	r5, r10
    188e:	73 14       	cp	r7, r3
    1890:	18 f4       	brcc	.+6      	; 0x1898 <vfprintf+0x2f0>
    1892:	53 0c       	add	r5, r3
    1894:	57 18       	sub	r5, r7
    1896:	73 2c       	mov	r7, r3
    1898:	73 14       	cp	r7, r3
    189a:	68 f4       	brcc	.+26     	; 0x18b6 <vfprintf+0x30e>
    189c:	b7 01       	movw	r22, r14
    189e:	80 e2       	ldi	r24, 0x20	; 32
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	2c 87       	std	Y+12, r18	; 0x0c
    18a4:	0e 94 df 0c 	call	0x19be	; 0x19be <fputc>
    18a8:	73 94       	inc	r7
    18aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ac:	f5 cf       	rjmp	.-22     	; 0x1898 <vfprintf+0x2f0>
    18ae:	73 14       	cp	r7, r3
    18b0:	10 f4       	brcc	.+4      	; 0x18b6 <vfprintf+0x30e>
    18b2:	37 18       	sub	r3, r7
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <vfprintf+0x310>
    18b6:	31 2c       	mov	r3, r1
    18b8:	24 ff       	sbrs	r18, 4
    18ba:	12 c0       	rjmp	.+36     	; 0x18e0 <vfprintf+0x338>
    18bc:	b7 01       	movw	r22, r14
    18be:	80 e3       	ldi	r24, 0x30	; 48
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	2c 87       	std	Y+12, r18	; 0x0c
    18c4:	0e 94 df 0c 	call	0x19be	; 0x19be <fputc>
    18c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ca:	22 ff       	sbrs	r18, 2
    18cc:	17 c0       	rjmp	.+46     	; 0x18fc <vfprintf+0x354>
    18ce:	21 ff       	sbrs	r18, 1
    18d0:	03 c0       	rjmp	.+6      	; 0x18d8 <vfprintf+0x330>
    18d2:	88 e5       	ldi	r24, 0x58	; 88
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <vfprintf+0x334>
    18d8:	88 e7       	ldi	r24, 0x78	; 120
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	b7 01       	movw	r22, r14
    18de:	0c c0       	rjmp	.+24     	; 0x18f8 <vfprintf+0x350>
    18e0:	82 2f       	mov	r24, r18
    18e2:	86 78       	andi	r24, 0x86	; 134
    18e4:	59 f0       	breq	.+22     	; 0x18fc <vfprintf+0x354>
    18e6:	21 fd       	sbrc	r18, 1
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <vfprintf+0x346>
    18ea:	80 e2       	ldi	r24, 0x20	; 32
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <vfprintf+0x348>
    18ee:	8b e2       	ldi	r24, 0x2B	; 43
    18f0:	27 fd       	sbrc	r18, 7
    18f2:	8d e2       	ldi	r24, 0x2D	; 45
    18f4:	b7 01       	movw	r22, r14
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 df 0c 	call	0x19be	; 0x19be <fputc>
    18fc:	a5 14       	cp	r10, r5
    18fe:	38 f4       	brcc	.+14     	; 0x190e <vfprintf+0x366>
    1900:	b7 01       	movw	r22, r14
    1902:	80 e3       	ldi	r24, 0x30	; 48
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	0e 94 df 0c 	call	0x19be	; 0x19be <fputc>
    190a:	5a 94       	dec	r5
    190c:	f7 cf       	rjmp	.-18     	; 0x18fc <vfprintf+0x354>
    190e:	aa 94       	dec	r10
    1910:	f4 01       	movw	r30, r8
    1912:	ea 0d       	add	r30, r10
    1914:	f1 1d       	adc	r31, r1
    1916:	80 81       	ld	r24, Z
    1918:	b7 01       	movw	r22, r14
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 df 0c 	call	0x19be	; 0x19be <fputc>
    1920:	a1 10       	cpse	r10, r1
    1922:	f5 cf       	rjmp	.-22     	; 0x190e <vfprintf+0x366>
    1924:	33 20       	and	r3, r3
    1926:	09 f4       	brne	.+2      	; 0x192a <vfprintf+0x382>
    1928:	51 ce       	rjmp	.-862    	; 0x15cc <vfprintf+0x24>
    192a:	b7 01       	movw	r22, r14
    192c:	80 e2       	ldi	r24, 0x20	; 32
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	0e 94 df 0c 	call	0x19be	; 0x19be <fputc>
    1934:	3a 94       	dec	r3
    1936:	f6 cf       	rjmp	.-20     	; 0x1924 <vfprintf+0x37c>
    1938:	f7 01       	movw	r30, r14
    193a:	86 81       	ldd	r24, Z+6	; 0x06
    193c:	97 81       	ldd	r25, Z+7	; 0x07
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <vfprintf+0x39c>
    1940:	8f ef       	ldi	r24, 0xFF	; 255
    1942:	9f ef       	ldi	r25, 0xFF	; 255
    1944:	2c 96       	adiw	r28, 0x0c	; 12
    1946:	e2 e1       	ldi	r30, 0x12	; 18
    1948:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__epilogue_restores__>

0000194c <calloc>:
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	86 9f       	mul	r24, r22
    1956:	80 01       	movw	r16, r0
    1958:	87 9f       	mul	r24, r23
    195a:	10 0d       	add	r17, r0
    195c:	96 9f       	mul	r25, r22
    195e:	10 0d       	add	r17, r0
    1960:	11 24       	eor	r1, r1
    1962:	c8 01       	movw	r24, r16
    1964:	0e 94 ab 08 	call	0x1156	; 0x1156 <malloc>
    1968:	ec 01       	movw	r28, r24
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	29 f0       	breq	.+10     	; 0x1978 <calloc+0x2c>
    196e:	a8 01       	movw	r20, r16
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	0e 94 cd 0c 	call	0x199a	; 0x199a <memset>
    1978:	ce 01       	movw	r24, r28
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	08 95       	ret

00001984 <strnlen_P>:
    1984:	fc 01       	movw	r30, r24
    1986:	05 90       	lpm	r0, Z+
    1988:	61 50       	subi	r22, 0x01	; 1
    198a:	70 40       	sbci	r23, 0x00	; 0
    198c:	01 10       	cpse	r0, r1
    198e:	d8 f7       	brcc	.-10     	; 0x1986 <strnlen_P+0x2>
    1990:	80 95       	com	r24
    1992:	90 95       	com	r25
    1994:	8e 0f       	add	r24, r30
    1996:	9f 1f       	adc	r25, r31
    1998:	08 95       	ret

0000199a <memset>:
    199a:	dc 01       	movw	r26, r24
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <memset+0x6>
    199e:	6d 93       	st	X+, r22
    19a0:	41 50       	subi	r20, 0x01	; 1
    19a2:	50 40       	sbci	r21, 0x00	; 0
    19a4:	e0 f7       	brcc	.-8      	; 0x199e <memset+0x4>
    19a6:	08 95       	ret

000019a8 <strnlen>:
    19a8:	fc 01       	movw	r30, r24
    19aa:	61 50       	subi	r22, 0x01	; 1
    19ac:	70 40       	sbci	r23, 0x00	; 0
    19ae:	01 90       	ld	r0, Z+
    19b0:	01 10       	cpse	r0, r1
    19b2:	d8 f7       	brcc	.-10     	; 0x19aa <strnlen+0x2>
    19b4:	80 95       	com	r24
    19b6:	90 95       	com	r25
    19b8:	8e 0f       	add	r24, r30
    19ba:	9f 1f       	adc	r25, r31
    19bc:	08 95       	ret

000019be <fputc>:
    19be:	0f 93       	push	r16
    19c0:	1f 93       	push	r17
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	18 2f       	mov	r17, r24
    19c8:	09 2f       	mov	r16, r25
    19ca:	eb 01       	movw	r28, r22
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	81 fd       	sbrc	r24, 1
    19d0:	03 c0       	rjmp	.+6      	; 0x19d8 <fputc+0x1a>
    19d2:	8f ef       	ldi	r24, 0xFF	; 255
    19d4:	9f ef       	ldi	r25, 0xFF	; 255
    19d6:	20 c0       	rjmp	.+64     	; 0x1a18 <fputc+0x5a>
    19d8:	82 ff       	sbrs	r24, 2
    19da:	10 c0       	rjmp	.+32     	; 0x19fc <fputc+0x3e>
    19dc:	4e 81       	ldd	r20, Y+6	; 0x06
    19de:	5f 81       	ldd	r21, Y+7	; 0x07
    19e0:	2c 81       	ldd	r18, Y+4	; 0x04
    19e2:	3d 81       	ldd	r19, Y+5	; 0x05
    19e4:	42 17       	cp	r20, r18
    19e6:	53 07       	cpc	r21, r19
    19e8:	7c f4       	brge	.+30     	; 0x1a08 <fputc+0x4a>
    19ea:	e8 81       	ld	r30, Y
    19ec:	f9 81       	ldd	r31, Y+1	; 0x01
    19ee:	9f 01       	movw	r18, r30
    19f0:	2f 5f       	subi	r18, 0xFF	; 255
    19f2:	3f 4f       	sbci	r19, 0xFF	; 255
    19f4:	39 83       	std	Y+1, r19	; 0x01
    19f6:	28 83       	st	Y, r18
    19f8:	10 83       	st	Z, r17
    19fa:	06 c0       	rjmp	.+12     	; 0x1a08 <fputc+0x4a>
    19fc:	e8 85       	ldd	r30, Y+8	; 0x08
    19fe:	f9 85       	ldd	r31, Y+9	; 0x09
    1a00:	81 2f       	mov	r24, r17
    1a02:	09 95       	icall
    1a04:	89 2b       	or	r24, r25
    1a06:	29 f7       	brne	.-54     	; 0x19d2 <fputc+0x14>
    1a08:	2e 81       	ldd	r18, Y+6	; 0x06
    1a0a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a0c:	2f 5f       	subi	r18, 0xFF	; 255
    1a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a10:	3f 83       	std	Y+7, r19	; 0x07
    1a12:	2e 83       	std	Y+6, r18	; 0x06
    1a14:	81 2f       	mov	r24, r17
    1a16:	90 2f       	mov	r25, r16
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	1f 91       	pop	r17
    1a1e:	0f 91       	pop	r16
    1a20:	08 95       	ret

00001a22 <__ultoa_invert>:
    1a22:	fa 01       	movw	r30, r20
    1a24:	aa 27       	eor	r26, r26
    1a26:	28 30       	cpi	r18, 0x08	; 8
    1a28:	51 f1       	breq	.+84     	; 0x1a7e <__ultoa_invert+0x5c>
    1a2a:	20 31       	cpi	r18, 0x10	; 16
    1a2c:	81 f1       	breq	.+96     	; 0x1a8e <__ultoa_invert+0x6c>
    1a2e:	e8 94       	clt
    1a30:	6f 93       	push	r22
    1a32:	6e 7f       	andi	r22, 0xFE	; 254
    1a34:	6e 5f       	subi	r22, 0xFE	; 254
    1a36:	7f 4f       	sbci	r23, 0xFF	; 255
    1a38:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3c:	af 4f       	sbci	r26, 0xFF	; 255
    1a3e:	b1 e0       	ldi	r27, 0x01	; 1
    1a40:	3e d0       	rcall	.+124    	; 0x1abe <__ultoa_invert+0x9c>
    1a42:	b4 e0       	ldi	r27, 0x04	; 4
    1a44:	3c d0       	rcall	.+120    	; 0x1abe <__ultoa_invert+0x9c>
    1a46:	67 0f       	add	r22, r23
    1a48:	78 1f       	adc	r23, r24
    1a4a:	89 1f       	adc	r24, r25
    1a4c:	9a 1f       	adc	r25, r26
    1a4e:	a1 1d       	adc	r26, r1
    1a50:	68 0f       	add	r22, r24
    1a52:	79 1f       	adc	r23, r25
    1a54:	8a 1f       	adc	r24, r26
    1a56:	91 1d       	adc	r25, r1
    1a58:	a1 1d       	adc	r26, r1
    1a5a:	6a 0f       	add	r22, r26
    1a5c:	71 1d       	adc	r23, r1
    1a5e:	81 1d       	adc	r24, r1
    1a60:	91 1d       	adc	r25, r1
    1a62:	a1 1d       	adc	r26, r1
    1a64:	20 d0       	rcall	.+64     	; 0x1aa6 <__ultoa_invert+0x84>
    1a66:	09 f4       	brne	.+2      	; 0x1a6a <__ultoa_invert+0x48>
    1a68:	68 94       	set
    1a6a:	3f 91       	pop	r19
    1a6c:	2a e0       	ldi	r18, 0x0A	; 10
    1a6e:	26 9f       	mul	r18, r22
    1a70:	11 24       	eor	r1, r1
    1a72:	30 19       	sub	r19, r0
    1a74:	30 5d       	subi	r19, 0xD0	; 208
    1a76:	31 93       	st	Z+, r19
    1a78:	de f6       	brtc	.-74     	; 0x1a30 <__ultoa_invert+0xe>
    1a7a:	cf 01       	movw	r24, r30
    1a7c:	08 95       	ret
    1a7e:	46 2f       	mov	r20, r22
    1a80:	47 70       	andi	r20, 0x07	; 7
    1a82:	40 5d       	subi	r20, 0xD0	; 208
    1a84:	41 93       	st	Z+, r20
    1a86:	b3 e0       	ldi	r27, 0x03	; 3
    1a88:	0f d0       	rcall	.+30     	; 0x1aa8 <__ultoa_invert+0x86>
    1a8a:	c9 f7       	brne	.-14     	; 0x1a7e <__ultoa_invert+0x5c>
    1a8c:	f6 cf       	rjmp	.-20     	; 0x1a7a <__ultoa_invert+0x58>
    1a8e:	46 2f       	mov	r20, r22
    1a90:	4f 70       	andi	r20, 0x0F	; 15
    1a92:	40 5d       	subi	r20, 0xD0	; 208
    1a94:	4a 33       	cpi	r20, 0x3A	; 58
    1a96:	18 f0       	brcs	.+6      	; 0x1a9e <__ultoa_invert+0x7c>
    1a98:	49 5d       	subi	r20, 0xD9	; 217
    1a9a:	31 fd       	sbrc	r19, 1
    1a9c:	40 52       	subi	r20, 0x20	; 32
    1a9e:	41 93       	st	Z+, r20
    1aa0:	02 d0       	rcall	.+4      	; 0x1aa6 <__ultoa_invert+0x84>
    1aa2:	a9 f7       	brne	.-22     	; 0x1a8e <__ultoa_invert+0x6c>
    1aa4:	ea cf       	rjmp	.-44     	; 0x1a7a <__ultoa_invert+0x58>
    1aa6:	b4 e0       	ldi	r27, 0x04	; 4
    1aa8:	a6 95       	lsr	r26
    1aaa:	97 95       	ror	r25
    1aac:	87 95       	ror	r24
    1aae:	77 95       	ror	r23
    1ab0:	67 95       	ror	r22
    1ab2:	ba 95       	dec	r27
    1ab4:	c9 f7       	brne	.-14     	; 0x1aa8 <__ultoa_invert+0x86>
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	61 05       	cpc	r22, r1
    1aba:	71 05       	cpc	r23, r1
    1abc:	08 95       	ret
    1abe:	9b 01       	movw	r18, r22
    1ac0:	ac 01       	movw	r20, r24
    1ac2:	0a 2e       	mov	r0, r26
    1ac4:	06 94       	lsr	r0
    1ac6:	57 95       	ror	r21
    1ac8:	47 95       	ror	r20
    1aca:	37 95       	ror	r19
    1acc:	27 95       	ror	r18
    1ace:	ba 95       	dec	r27
    1ad0:	c9 f7       	brne	.-14     	; 0x1ac4 <__ultoa_invert+0xa2>
    1ad2:	62 0f       	add	r22, r18
    1ad4:	73 1f       	adc	r23, r19
    1ad6:	84 1f       	adc	r24, r20
    1ad8:	95 1f       	adc	r25, r21
    1ada:	a0 1d       	adc	r26, r0
    1adc:	08 95       	ret

00001ade <__prologue_saves__>:
    1ade:	2f 92       	push	r2
    1ae0:	3f 92       	push	r3
    1ae2:	4f 92       	push	r4
    1ae4:	5f 92       	push	r5
    1ae6:	6f 92       	push	r6
    1ae8:	7f 92       	push	r7
    1aea:	8f 92       	push	r8
    1aec:	9f 92       	push	r9
    1aee:	af 92       	push	r10
    1af0:	bf 92       	push	r11
    1af2:	cf 92       	push	r12
    1af4:	df 92       	push	r13
    1af6:	ef 92       	push	r14
    1af8:	ff 92       	push	r15
    1afa:	0f 93       	push	r16
    1afc:	1f 93       	push	r17
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	ca 1b       	sub	r28, r26
    1b08:	db 0b       	sbc	r29, r27
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
    1b14:	09 94       	ijmp

00001b16 <__epilogue_restores__>:
    1b16:	2a 88       	ldd	r2, Y+18	; 0x12
    1b18:	39 88       	ldd	r3, Y+17	; 0x11
    1b1a:	48 88       	ldd	r4, Y+16	; 0x10
    1b1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b20:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b22:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b24:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b26:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b28:	b9 84       	ldd	r11, Y+9	; 0x09
    1b2a:	c8 84       	ldd	r12, Y+8	; 0x08
    1b2c:	df 80       	ldd	r13, Y+7	; 0x07
    1b2e:	ee 80       	ldd	r14, Y+6	; 0x06
    1b30:	fd 80       	ldd	r15, Y+5	; 0x05
    1b32:	0c 81       	ldd	r16, Y+4	; 0x04
    1b34:	1b 81       	ldd	r17, Y+3	; 0x03
    1b36:	aa 81       	ldd	r26, Y+2	; 0x02
    1b38:	b9 81       	ldd	r27, Y+1	; 0x01
    1b3a:	ce 0f       	add	r28, r30
    1b3c:	d1 1d       	adc	r29, r1
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	ed 01       	movw	r28, r26
    1b4a:	08 95       	ret

00001b4c <_exit>:
    1b4c:	f8 94       	cli

00001b4e <__stop_program>:
    1b4e:	ff cf       	rjmp	.-2      	; 0x1b4e <__stop_program>
