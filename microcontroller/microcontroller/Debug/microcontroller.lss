
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002da  00800100  000026ce  00002762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000056  008003da  008003da  00002a3c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a3c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000438  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004d63  00000000  00000000  00002ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001bf9  00000000  00000000  00007c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000017b2  00000000  00000000  0000982c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000bfc  00000000  00000000  0000afe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cc4  00000000  00000000  0000bbdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002b73  00000000  00000000  0000c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000370  00000000  00000000  0000f413  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__ctors_end>
       4:	0c 94 89 02 	jmp	0x512	; 0x512 <__vector_1>
       8:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
       c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      10:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      14:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      18:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      1c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      20:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      24:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      28:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      2c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      30:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      34:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      38:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      3c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      40:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      44:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      48:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      4c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      50:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      54:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      58:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      5c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      60:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      64:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      68:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      6c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>

00000070 <LETTERS_BIG>:
      70:	30 31 32 33 34 35 36 37 38 39 21 3f 51 57 45 52     0123456789!?QWER
      80:	54 59 55 49 4f 50 29 2b 41 53 44 46 47 48 4a 4b     TYUIOP)+ASDFGHJK
      90:	4c 28 27 2d 5a 58 43 56 42 4e 4d 2c 2e 3b 3a 23     L('-ZXCVBNM,.;:#

000000a0 <LETTERS_SMALL>:
      a0:	30 31 32 33 34 35 36 37 38 39 21 3f 71 77 65 72     0123456789!?qwer
      b0:	74 79 75 69 6f 70 26 2b 61 73 64 66 67 68 6a 6b     tyuiop&+asdfghjk
      c0:	6c 25 24 2d 7a 78 63 76 62 6e 6d 2c 2e 3b 3a 23     l%$-zxcvbnm,.;:#

000000d0 <font8>:
	...
      d8:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
      e8:	14 7f 7f 14 7f 7f 14 00 20 54 54 38 54 54 58 00     ........ TT8TTX.
      f8:	38 64 54 54 4c 38 00 00 20 50 54 55 54 78 40 00     8dTTL8.. PTUTx@.
     108:	60 18 16 11 7f 49 49 00 5c 22 51 49 45 22 1d 00     `....II.\"QIE"..
     118:	60 30 28 25 28 30 60 00 08 2a 3e 1c 1c 3e 2a 08     `0(%(0`..*>..>*.
     128:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     138:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     148:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     158:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     168:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     178:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     188:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     198:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1a8:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1b8:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1c8:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1d8:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     1e8:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     1f8:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     208:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     218:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     228:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     238:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     248:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     258:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     268:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     278:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     288:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     298:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2a8:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2b8:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2c8:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2d8:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     2e8:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     2f8:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     308:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     318:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     328:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     338:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     348:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     358:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     368:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     378:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     388:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     398:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3a8:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3b8:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

000003c8 <__ctors_end>:
     3c8:	11 24       	eor	r1, r1
     3ca:	1f be       	out	0x3f, r1	; 63
     3cc:	cf ef       	ldi	r28, 0xFF	; 255
     3ce:	d4 e0       	ldi	r29, 0x04	; 4
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	cd bf       	out	0x3d, r28	; 61

000003d4 <__do_copy_data>:
     3d4:	13 e0       	ldi	r17, 0x03	; 3
     3d6:	a0 e0       	ldi	r26, 0x00	; 0
     3d8:	b1 e0       	ldi	r27, 0x01	; 1
     3da:	ee ec       	ldi	r30, 0xCE	; 206
     3dc:	f6 e2       	ldi	r31, 0x26	; 38
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <__do_copy_data+0x10>
     3e0:	05 90       	lpm	r0, Z+
     3e2:	0d 92       	st	X+, r0
     3e4:	aa 3d       	cpi	r26, 0xDA	; 218
     3e6:	b1 07       	cpc	r27, r17
     3e8:	d9 f7       	brne	.-10     	; 0x3e0 <__do_copy_data+0xc>

000003ea <__do_clear_bss>:
     3ea:	24 e0       	ldi	r18, 0x04	; 4
     3ec:	aa ed       	ldi	r26, 0xDA	; 218
     3ee:	b3 e0       	ldi	r27, 0x03	; 3
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <.do_clear_bss_start>

000003f2 <.do_clear_bss_loop>:
     3f2:	1d 92       	st	X+, r1

000003f4 <.do_clear_bss_start>:
     3f4:	a0 33       	cpi	r26, 0x30	; 48
     3f6:	b2 07       	cpc	r27, r18
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <.do_clear_bss_loop>
     3fa:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <main>
     3fe:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <_exit>

00000402 <__bad_interrupt>:
     402:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000406 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
     406:	30 98       	cbi	0x06, 0	; 6
     408:	08 95       	ret

0000040a <ADC_read>:
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     40a:	84 30       	cpi	r24, 0x04	; 4
     40c:	40 f4       	brcc	.+16     	; 0x41e <ADC_read+0x14>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
     40e:	8c 5f       	subi	r24, 0xFC	; 252
     410:	80 93 00 14 	sts	0x1400, r24
	
	//wait 'til /INTR is low
	while(test_bit(PINE, PINE0));
     414:	28 99       	sbic	0x05, 0	; 5
     416:	fe cf       	rjmp	.-4      	; 0x414 <ADC_read+0xa>
	//reset interrupt
	inter = 0;
	*/

	//return current value
	return *adc; 
     418:	80 91 00 14 	lds	r24, 0x1400
     41c:	08 95       	ret
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     41e:	80 e0       	ldi	r24, 0x00	; 0
	inter = 0;
	*/

	//return current value
	return *adc; 
     420:	08 95       	ret

00000422 <brightness_init>:
#include "joy.h"
#include "OLED_driver.h"
#include "defines.h"


void brightness_init(void) {
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
	OLED_reset();
     42a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <OLED_reset>
	fprintf(OLED, "%s ", "l_slider:");
     42e:	89 e6       	ldi	r24, 0x69	; 105
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	9f 93       	push	r25
     434:	8f 93       	push	r24
     436:	03 e7       	ldi	r16, 0x73	; 115
     438:	11 e0       	ldi	r17, 0x01	; 1
     43a:	1f 93       	push	r17
     43c:	0f 93       	push	r16
     43e:	c6 e0       	ldi	r28, 0x06	; 6
     440:	d1 e0       	ldi	r29, 0x01	; 1
     442:	df 93       	push	r29
     444:	cf 93       	push	r28
     446:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
	OLED_pos(1,0);
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	0e 94 29 0c 	call	0x1852	; 0x1852 <OLED_pos>
	fprintf(OLED, "%s ", "sets brightness");
     452:	87 e7       	ldi	r24, 0x77	; 119
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	9f 93       	push	r25
     458:	8f 93       	push	r24
     45a:	1f 93       	push	r17
     45c:	0f 93       	push	r16
     45e:	df 93       	push	r29
     460:	cf 93       	push	r28
     462:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
	OLED_pos(2,0);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	0e 94 29 0c 	call	0x1852	; 0x1852 <OLED_pos>
	fprintf(OLED, "%s ", "l_button: back");
     46e:	87 e8       	ldi	r24, 0x87	; 135
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	9f 93       	push	r25
     474:	8f 93       	push	r24
     476:	1f 93       	push	r17
     478:	0f 93       	push	r16
     47a:	df 93       	push	r29
     47c:	cf 93       	push	r28
     47e:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
	for (int line = 4; line < 8; line++) {
		OLED_set_line(line);
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	0e 94 df 0c 	call	0x19be	; 0x19be <OLED_set_line>
     488:	85 e0       	ldi	r24, 0x05	; 5
     48a:	0e 94 df 0c 	call	0x19be	; 0x19be <OLED_set_line>
     48e:	86 e0       	ldi	r24, 0x06	; 6
     490:	0e 94 df 0c 	call	0x19be	; 0x19be <OLED_set_line>
     494:	87 e0       	ldi	r24, 0x07	; 7
     496:	0e 94 df 0c 	call	0x19be	; 0x19be <OLED_set_line>
     49a:	8d b7       	in	r24, 0x3d	; 61
     49c:	9e b7       	in	r25, 0x3e	; 62
     49e:	42 96       	adiw	r24, 0x12	; 18
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	9e bf       	out	0x3e, r25	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	8d bf       	out	0x3d, r24	; 61
	}
	
}
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	08 95       	ret

000004b4 <brightness_run>:

void brightness_run(void) {
	brightness_init();
     4b4:	0e 94 11 02 	call	0x422	; 0x422 <brightness_init>
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <brightness_run+0x10>
		slider_position = SLI_getPosition();
     4ba:	0e 94 2c 06 	call	0xc58	; 0xc58 <SLI_getPosition>
     4be:	86 2f       	mov	r24, r22
		//printf("slider_position (left) %d\n", slider_position.left);
		OLED_set_brightness(slider_position.left); 
     4c0:	0e 94 b8 0c 	call	0x1970	; 0x1970 <OLED_set_brightness>
}

void brightness_run(void) {
	brightness_init();
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	0e 94 b0 05 	call	0xb60	; 0xb60 <JOY_button_pressed>
     4ca:	89 2b       	or	r24, r25
     4cc:	b1 f3       	breq	.-20     	; 0x4ba <brightness_run+0x6>
		slider_position = SLI_getPosition();
		//printf("slider_position (left) %d\n", slider_position.left);
		OLED_set_brightness(slider_position.left); 
	}
     4ce:	08 95       	ret

000004d0 <CAN_int_vect>:
ISR(INT0_vect){
	CAN_int_vect();
}


void CAN_int_vect() {
     4d0:	cf 93       	push	r28
	uint8_t int_flags = MCP2515_read(MCP_CANINTF);
     4d2:	8c e2       	ldi	r24, 0x2C	; 44
     4d4:	0e 94 0d 0a 	call	0x141a	; 0x141a <MCP2515_read>
     4d8:	c8 2f       	mov	r28, r24
	if(int_flags & MCP_RX0IF){
     4da:	80 ff       	sbrs	r24, 0
     4dc:	0b c0       	rjmp	.+22     	; 0x4f4 <CAN_int_vect+0x24>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	61 e0       	ldi	r22, 0x01	; 1
     4e2:	8c e2       	ldi	r24, 0x2C	; 44
     4e4:	0e 94 3f 0a 	call	0x147e	; 0x147e <MCP2515_bit_modify>
		flag_RX0 = 1;
     4e8:	21 e0       	ldi	r18, 0x01	; 1
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	30 93 dd 03 	sts	0x03DD, r19
     4f0:	20 93 dc 03 	sts	0x03DC, r18
	}
			
	if(int_flags & MCP_RX1IF){
     4f4:	c1 ff       	sbrs	r28, 1
     4f6:	0b c0       	rjmp	.+22     	; 0x50e <__stack+0xf>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	62 e0       	ldi	r22, 0x02	; 2
     4fc:	8c e2       	ldi	r24, 0x2C	; 44
     4fe:	0e 94 3f 0a 	call	0x147e	; 0x147e <MCP2515_bit_modify>
		flag_RX1 = 1;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	90 93 db 03 	sts	0x03DB, r25
     50a:	80 93 da 03 	sts	0x03DA, r24
	}
			
	
	
}
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <__vector_1>:

volatile int flag_RX0 = 0;
volatile int flag_RX1 = 0;

//interrupt service routine
ISR(INT0_vect){
     512:	1f 92       	push	r1
     514:	0f 92       	push	r0
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	0f 92       	push	r0
     51a:	11 24       	eor	r1, r1
     51c:	2f 93       	push	r18
     51e:	3f 93       	push	r19
     520:	4f 93       	push	r20
     522:	5f 93       	push	r21
     524:	6f 93       	push	r22
     526:	7f 93       	push	r23
     528:	8f 93       	push	r24
     52a:	9f 93       	push	r25
     52c:	af 93       	push	r26
     52e:	bf 93       	push	r27
     530:	ef 93       	push	r30
     532:	ff 93       	push	r31
	CAN_int_vect();
     534:	0e 94 68 02 	call	0x4d0	; 0x4d0 <CAN_int_vect>
}
     538:	ff 91       	pop	r31
     53a:	ef 91       	pop	r30
     53c:	bf 91       	pop	r27
     53e:	af 91       	pop	r26
     540:	9f 91       	pop	r25
     542:	8f 91       	pop	r24
     544:	7f 91       	pop	r23
     546:	6f 91       	pop	r22
     548:	5f 91       	pop	r21
     54a:	4f 91       	pop	r20
     54c:	3f 91       	pop	r19
     54e:	2f 91       	pop	r18
     550:	0f 90       	pop	r0
     552:	0f be       	out	0x3f, r0	; 63
     554:	0f 90       	pop	r0
     556:	1f 90       	pop	r1
     558:	18 95       	reti

0000055a <CAN_init>:
//hex to binary is left as an exercise to the reader :)
void CAN_init() {
	
	//enable external interrupt on ATmega162
	//enable interrupt on MCP2515
	MCP2515_init();
     55a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MCP2515_init>
	
	//enable rollover: message will rollover to RX1 if RX0 is full
	//also sets filter for RXB0 to only accept all transmission
	MCP2515_bit_modify(MCP_RXB0CTRL, 0x64, 0xFF);  //0b 0010 0100
     55e:	4f ef       	ldi	r20, 0xFF	; 255
     560:	64 e6       	ldi	r22, 0x64	; 100
     562:	80 e6       	ldi	r24, 0x60	; 96
     564:	0e 94 3f 0a 	call	0x147e	; 0x147e <MCP2515_bit_modify>

	
	//set filter for RXB1 to accept all transmission
	MCP2515_bit_modify(MCP_RXB1CTRL, 0x60, 0xFF);
     568:	4f ef       	ldi	r20, 0xFF	; 255
     56a:	60 e6       	ldi	r22, 0x60	; 96
     56c:	80 e7       	ldi	r24, 0x70	; 112
     56e:	0e 94 3f 0a 	call	0x147e	; 0x147e <MCP2515_bit_modify>
	

	//CANINTE contains the interrupt enable bits for each individual interrupt
	//CANINTF cointains the interrupt flags for each interrupt source. this should be cleared by a bit_modify
	
	MCP2515_bit_modify(MCP_CANINTE,0x03, 0x03);
     572:	43 e0       	ldi	r20, 0x03	; 3
     574:	63 e0       	ldi	r22, 0x03	; 3
     576:	8b e2       	ldi	r24, 0x2B	; 43
     578:	0e 94 3f 0a 	call	0x147e	; 0x147e <MCP2515_bit_modify>
	//interrupts for RX1, RX0 enabled
	
	//set loopback mode: 0x40
	//later use normal mode 0x00
	MCP2515_bit_modify(MCP_CANCTRL,0xE0, 0x00);
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	60 ee       	ldi	r22, 0xE0	; 224
     580:	8f e0       	ldi	r24, 0x0F	; 15
     582:	0e 94 3f 0a 	call	0x147e	; 0x147e <MCP2515_bit_modify>
     586:	08 95       	ret

00000588 <CAN_message_send>:
	
	

}

void CAN_message_send(can_message* msg) {
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ec 01       	movw	r28, r24
	//transmit is done using the TX registers, have to check which transmit_buffer_register we are writing from 
	uint8_t buffer_numb = 0; //Not sure how this logic is done yet


	//transmit the correct ID
	uint8_t id_high = msg->id / 8;
     592:	08 81       	ld	r16, Y
     594:	19 81       	ldd	r17, Y+1	; 0x01
     596:	b8 01       	movw	r22, r16
     598:	76 95       	lsr	r23
     59a:	67 95       	ror	r22
     59c:	76 95       	lsr	r23
     59e:	67 95       	ror	r22
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
	uint8_t id_low = msg->id % 8;

	MCP2515_write(MCP_TXB0SIDH + BUFFER_LENGTH * buffer_numb, id_high);
     5a4:	81 e3       	ldi	r24, 0x31	; 49
     5a6:	0e 94 1f 0a 	call	0x143e	; 0x143e <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL + BUFFER_LENGTH * buffer_numb, (id_low << 5));
     5aa:	60 2f       	mov	r22, r16
     5ac:	62 95       	swap	r22
     5ae:	66 0f       	add	r22, r22
     5b0:	60 7e       	andi	r22, 0xE0	; 224
     5b2:	82 e3       	ldi	r24, 0x32	; 50
     5b4:	0e 94 1f 0a 	call	0x143e	; 0x143e <MCP2515_write>
	//resten av TXB0SIDL er 0 siden vi har standard identifier

	//transmit the data length
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);
     5b8:	6a 81       	ldd	r22, Y+2	; 0x02
     5ba:	85 e3       	ldi	r24, 0x35	; 53
     5bc:	0e 94 1f 0a 	call	0x143e	; 0x143e <MCP2515_write>

	//transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     5c0:	8a 81       	ldd	r24, Y+2	; 0x02
     5c2:	88 23       	and	r24, r24
     5c4:	69 f0       	breq	.+26     	; 0x5e0 <CAN_message_send+0x58>
     5c6:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
     5c8:	fe 01       	movw	r30, r28
     5ca:	e1 0f       	add	r30, r17
     5cc:	f1 1d       	adc	r31, r1
     5ce:	63 81       	ldd	r22, Z+3	; 0x03
     5d0:	86 e3       	ldi	r24, 0x36	; 54
     5d2:	81 0f       	add	r24, r17
     5d4:	0e 94 1f 0a 	call	0x143e	; 0x143e <MCP2515_write>

	//transmit the data length
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);

	//transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     5d8:	1f 5f       	subi	r17, 0xFF	; 255
     5da:	8a 81       	ldd	r24, Y+2	; 0x02
     5dc:	18 17       	cp	r17, r24
     5de:	a0 f3       	brcs	.-24     	; 0x5c8 <CAN_message_send+0x40>
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
	}
	
	uint8_t buffer_states = (uint8_t)(1 << buffer_numb);
	MCP2515_request_to_send(buffer_states);
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	0e 94 33 0a 	call	0x1466	; 0x1466 <MCP2515_request_to_send>
	
	
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	08 95       	ret

000005f0 <CAN_transmit_complete>:
	
}


bool CAN_transmit_complete(int transmit_buffer_numb) {
	const int address = MCP_TXB0CTRL + BUFFER_LENGTH * transmit_buffer_numb;
     5f0:	03 96       	adiw	r24, 0x03	; 3
	
	//printf("CANSTAT: 0x%02x\n", MCP2515_read(MCP_CANSTAT));
	
	//printf("TXB0CTRL: 0x%02x\n", MCP2515_read(address));
	
	if(MCP2515_read(address) & MCP_TXREQ){
     5f2:	82 95       	swap	r24
     5f4:	80 7f       	andi	r24, 0xF0	; 240
     5f6:	0e 94 0d 0a 	call	0x141a	; 0x141a <MCP2515_read>
     5fa:	83 fb       	bst	r24, 3
     5fc:	88 27       	eor	r24, r24
     5fe:	80 f9       	bld	r24, 0
		return false;
	}
	
	return true; 
}
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	89 27       	eor	r24, r25
     604:	08 95       	ret

00000606 <CAN_data_receive>:


void CAN_data_receive(can_message* received_msg){
     606:	df 92       	push	r13
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	8c 01       	movw	r16, r24
	cli();
     616:	f8 94       	cli
	int receive_buffer_numb;
	if(flag_RX0){
     618:	80 91 dc 03 	lds	r24, 0x03DC
     61c:	90 91 dd 03 	lds	r25, 0x03DD
     620:	89 2b       	or	r24, r25
     622:	39 f0       	breq	.+14     	; 0x632 <CAN_data_receive+0x2c>
		receive_buffer_numb = 0;
		flag_RX0 = 0;
     624:	10 92 dd 03 	sts	0x03DD, r1
     628:	10 92 dc 03 	sts	0x03DC, r1

void CAN_data_receive(can_message* received_msg){
	cli();
	int receive_buffer_numb;
	if(flag_RX0){
		receive_buffer_numb = 0;
     62c:	c0 e0       	ldi	r28, 0x00	; 0
     62e:	d0 e0       	ldi	r29, 0x00	; 0
     630:	11 c0       	rjmp	.+34     	; 0x654 <CAN_data_receive+0x4e>
		flag_RX0 = 0;
	}
	else if(flag_RX1){
     632:	80 91 da 03 	lds	r24, 0x03DA
     636:	90 91 db 03 	lds	r25, 0x03DB
     63a:	89 2b       	or	r24, r25
     63c:	39 f0       	breq	.+14     	; 0x64c <CAN_data_receive+0x46>
		receive_buffer_numb = 1;
		flag_RX1 = 0;
     63e:	10 92 db 03 	sts	0x03DB, r1
     642:	10 92 da 03 	sts	0x03DA, r1
	if(flag_RX0){
		receive_buffer_numb = 0;
		flag_RX0 = 0;
	}
	else if(flag_RX1){
		receive_buffer_numb = 1;
     646:	c1 e0       	ldi	r28, 0x01	; 1
     648:	d0 e0       	ldi	r29, 0x00	; 0
     64a:	04 c0       	rjmp	.+8      	; 0x654 <CAN_data_receive+0x4e>
		flag_RX1 = 0;
	}
	else{
		received_msg->length = 0;
     64c:	f8 01       	movw	r30, r16
     64e:	12 82       	std	Z+2, r1	; 0x02
		sei();
     650:	78 94       	sei
		return;
     652:	42 c0       	rjmp	.+132    	; 0x6d8 <CAN_data_receive+0xd2>
	}
	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_numb);
     654:	fc 2e       	mov	r15, r28
     656:	ff 0c       	add	r15, r15
     658:	ff 0c       	add	r15, r15
     65a:	ff 0c       	add	r15, r15
     65c:	ff 0c       	add	r15, r15
     65e:	81 e6       	ldi	r24, 0x61	; 97
     660:	8f 0d       	add	r24, r15
     662:	0e 94 0d 0a 	call	0x141a	; 0x141a <MCP2515_read>
     666:	e8 2e       	mov	r14, r24
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_numb);
     668:	82 e6       	ldi	r24, 0x62	; 98
     66a:	8f 0d       	add	r24, r15
     66c:	0e 94 0d 0a 	call	0x141a	; 0x141a <MCP2515_read>
	/*
		id_low:	    X XXXX LLL
		id_high: HHHH HHHH
		id:		 HHHH HHHH LLL
	*/
	received_msg->id = (id_high << 3) + id_low; 
     670:	2e 2d       	mov	r18, r14
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	22 0f       	add	r18, r18
     676:	33 1f       	adc	r19, r19
     678:	22 0f       	add	r18, r18
     67a:	33 1f       	adc	r19, r19
     67c:	22 0f       	add	r18, r18
     67e:	33 1f       	adc	r19, r19
	}
	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_numb);
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_numb);
	
	//only want the last 3 bits
	id_low = id_low >> 5;
     680:	82 95       	swap	r24
     682:	86 95       	lsr	r24
     684:	87 70       	andi	r24, 0x07	; 7
	/*
		id_low:	    X XXXX LLL
		id_high: HHHH HHHH
		id:		 HHHH HHHH LLL
	*/
	received_msg->id = (id_high << 3) + id_low; 
     686:	28 0f       	add	r18, r24
     688:	31 1d       	adc	r19, r1
     68a:	f8 01       	movw	r30, r16
     68c:	31 83       	std	Z+1, r19	; 0x01
     68e:	20 83       	st	Z, r18
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_numb) % (1<<3));
     690:	85 e6       	ldi	r24, 0x65	; 101
     692:	8f 0d       	add	r24, r15
     694:	0e 94 0d 0a 	call	0x141a	; 0x141a <MCP2515_read>
     698:	87 70       	andi	r24, 0x07	; 7
     69a:	f8 01       	movw	r30, r16
     69c:	82 83       	std	Z+2, r24	; 0x02
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     69e:	88 23       	and	r24, r24
     6a0:	d1 f0       	breq	.+52     	; 0x6d6 <CAN_data_receive+0xd0>
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_numb;
     6a2:	7e 01       	movw	r14, r28
     6a4:	ee 0c       	add	r14, r14
     6a6:	ff 1c       	adc	r15, r15
     6a8:	ee 0c       	add	r14, r14
     6aa:	ff 1c       	adc	r15, r15
     6ac:	ee 0c       	add	r14, r14
     6ae:	ff 1c       	adc	r15, r15
     6b0:	ee 0c       	add	r14, r14
     6b2:	ff 1c       	adc	r15, r15
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_numb) % (1<<3));
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     6b4:	d1 2c       	mov	r13, r1
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_numb;
     6b6:	cd 2d       	mov	r28, r13
     6b8:	d0 e0       	ldi	r29, 0x00	; 0
     6ba:	ce 01       	movw	r24, r28
     6bc:	8a 59       	subi	r24, 0x9A	; 154
     6be:	9f 4f       	sbci	r25, 0xFF	; 255
		received_msg->data[byte] = MCP2515_read(address);
     6c0:	8e 0d       	add	r24, r14
     6c2:	0e 94 0d 0a 	call	0x141a	; 0x141a <MCP2515_read>
     6c6:	c0 0f       	add	r28, r16
     6c8:	d1 1f       	adc	r29, r17
     6ca:	8b 83       	std	Y+3, r24	; 0x03
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_numb) % (1<<3));
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     6cc:	d3 94       	inc	r13
     6ce:	f8 01       	movw	r30, r16
     6d0:	82 81       	ldd	r24, Z+2	; 0x02
     6d2:	d8 16       	cp	r13, r24
     6d4:	80 f3       	brcs	.-32     	; 0x6b6 <CAN_data_receive+0xb0>
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_numb;
		received_msg->data[byte] = MCP2515_read(address);
	}

	sei();
     6d6:	78 94       	sei
	
	
	
}
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	df 90       	pop	r13
     6e6:	08 95       	ret

000006e8 <send_control_input>:
		send_control_input();
		receive_score();
	}
}

void send_control_input(void) {
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	2b 97       	sbiw	r28, 0x0b	; 11
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
	can_message control_input;
	control_input.id = 0;
     702:	1a 82       	std	Y+2, r1	; 0x02
     704:	19 82       	std	Y+1, r1	; 0x01
	control_input.length = 5;
     706:	85 e0       	ldi	r24, 0x05	; 5
     708:	8b 83       	std	Y+3, r24	; 0x03
	
	JOY_position_t joy_position = JOY_getPosition();
     70a:	0e 94 ca 05 	call	0xb94	; 0xb94 <JOY_getPosition>
	control_input.data[JOYSTICK_X] = joy_position.x;
     70e:	6c 83       	std	Y+4, r22	; 0x04
	control_input.data[JOYSTICK_Y] = joy_position.y;
     710:	8d 83       	std	Y+5, r24	; 0x05
	
	SLI_position_t sli_position = SLI_getPosition();
     712:	0e 94 2c 06 	call	0xc58	; 0xc58 <SLI_getPosition>
	control_input.data[SLIDER_LEFT] = sli_position.left;
     716:	6e 83       	std	Y+6, r22	; 0x06
	control_input.data[SLIDER_RIGHT] = sli_position.right;
     718:	8f 83       	std	Y+7, r24	; 0x07
	
	int joy_button = JOY_button_pressed(JOY_BUTTON) << JOY_BUTTON;
     71a:	82 e0       	ldi	r24, 0x02	; 2
     71c:	0e 94 b0 05 	call	0xb60	; 0xb60 <JOY_button_pressed>
     720:	8c 01       	movw	r16, r24
	int left_button = JOY_button_pressed(LEFT_BUTTON) << LEFT_BUTTON;
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 b0 05 	call	0xb60	; 0xb60 <JOY_button_pressed>
     728:	f8 2e       	mov	r15, r24
	int right_button = JOY_button_pressed(RIGHT_BUTTON) << RIGHT_BUTTON;
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	0e 94 b0 05 	call	0xb60	; 0xb60 <JOY_button_pressed>
	
	SLI_position_t sli_position = SLI_getPosition();
	control_input.data[SLIDER_LEFT] = sli_position.left;
	control_input.data[SLIDER_RIGHT] = sli_position.right;
	
	int joy_button = JOY_button_pressed(JOY_BUTTON) << JOY_BUTTON;
     730:	00 0f       	add	r16, r16
     732:	11 1f       	adc	r17, r17
     734:	00 0f       	add	r16, r16
     736:	11 1f       	adc	r17, r17
	int left_button = JOY_button_pressed(LEFT_BUTTON) << LEFT_BUTTON;
	int right_button = JOY_button_pressed(RIGHT_BUTTON) << RIGHT_BUTTON;
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
	control_input.data[BUTTONS] = joy_button | left_button | right_button;
     73c:	08 2b       	or	r16, r24
     73e:	f0 2a       	or	r15, r16
     740:	f8 86       	std	Y+8, r15	; 0x08
	CAN_message_send(&control_input);
     742:	ce 01       	movw	r24, r28
     744:	01 96       	adiw	r24, 0x01	; 1
     746:	0e 94 c4 02 	call	0x588	; 0x588 <CAN_message_send>
	while(!CAN_transmit_complete(TB0));
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <CAN_transmit_complete>
     752:	88 23       	and	r24, r24
     754:	d1 f3       	breq	.-12     	; 0x74a <send_control_input+0x62>
}
     756:	2b 96       	adiw	r28, 0x0b	; 11
     758:	0f b6       	in	r0, 0x3f	; 63
     75a:	f8 94       	cli
     75c:	de bf       	out	0x3e, r29	; 62
     75e:	0f be       	out	0x3f, r0	; 63
     760:	cd bf       	out	0x3d, r28	; 61
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	08 95       	ret

0000076e <receive_score>:

void receive_score(void){
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	cd b7       	in	r28, 0x3d	; 61
     778:	de b7       	in	r29, 0x3e	; 62
     77a:	2b 97       	sbiw	r28, 0x0b	; 11
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	f8 94       	cli
     780:	de bf       	out	0x3e, r29	; 62
     782:	0f be       	out	0x3f, r0	; 63
     784:	cd bf       	out	0x3d, r28	; 61
	can_message score_message;
	score_message.length = 0;
     786:	1b 82       	std	Y+3, r1	; 0x03
	
	CAN_data_receive(&score_message);
     788:	ce 01       	movw	r24, r28
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	0e 94 03 03 	call	0x606	; 0x606 <CAN_data_receive>
	//printf("score msg 0: %d \tscore msg 1: %d\n", score_message.data[0], score_message.data[1]);
	if(score_message.length){
     790:	8b 81       	ldd	r24, Y+3	; 0x03
     792:	88 23       	and	r24, r24
     794:	09 f4       	brne	.+2      	; 0x798 <receive_score+0x2a>
     796:	5c c0       	rjmp	.+184    	; 0x850 <receive_score+0xe2>
	score = ((uint8_t)(score_message.data[0]) << 8) |(uint8_t) score_message.data[1];
     798:	8c 81       	ldd	r24, Y+4	; 0x04
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	98 2f       	mov	r25, r24
     79e:	88 27       	eor	r24, r24
     7a0:	2d 81       	ldd	r18, Y+5	; 0x05
     7a2:	82 2b       	or	r24, r18
     7a4:	90 93 e1 03 	sts	0x03E1, r25
     7a8:	80 93 e0 03 	sts	0x03E0, r24
	if (score > highscore){
     7ac:	20 91 e0 03 	lds	r18, 0x03E0
     7b0:	30 91 e1 03 	lds	r19, 0x03E1
     7b4:	80 91 de 03 	lds	r24, 0x03DE
     7b8:	90 91 df 03 	lds	r25, 0x03DF
     7bc:	82 17       	cp	r24, r18
     7be:	93 07       	cpc	r25, r19
     7c0:	44 f4       	brge	.+16     	; 0x7d2 <receive_score+0x64>
		highscore = score;
     7c2:	80 91 e0 03 	lds	r24, 0x03E0
     7c6:	90 91 e1 03 	lds	r25, 0x03E1
     7ca:	90 93 df 03 	sts	0x03DF, r25
     7ce:	80 93 de 03 	sts	0x03DE, r24
	}
	OLED_reset_cursor();
     7d2:	0e 94 3b 0c 	call	0x1876	; 0x1876 <OLED_reset_cursor>
	printf("seconds %d.%d\n", score/10, score%10);
     7d6:	80 91 e0 03 	lds	r24, 0x03E0
     7da:	90 91 e1 03 	lds	r25, 0x03E1
     7de:	20 91 e0 03 	lds	r18, 0x03E0
     7e2:	30 91 e1 03 	lds	r19, 0x03E1
     7e6:	0a e0       	ldi	r16, 0x0A	; 10
     7e8:	10 e0       	ldi	r17, 0x00	; 0
     7ea:	b8 01       	movw	r22, r16
     7ec:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divmodhi4>
     7f0:	9f 93       	push	r25
     7f2:	8f 93       	push	r24
     7f4:	c9 01       	movw	r24, r18
     7f6:	b8 01       	movw	r22, r16
     7f8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divmodhi4>
     7fc:	7f 93       	push	r23
     7fe:	6f 93       	push	r22
     800:	86 e9       	ldi	r24, 0x96	; 150
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	0e 94 84 10 	call	0x2108	; 0x2108 <printf>
	fprintf(OLED, "time: %d.%d    ", score/10, score%10);
     80c:	80 91 e0 03 	lds	r24, 0x03E0
     810:	90 91 e1 03 	lds	r25, 0x03E1
     814:	20 91 e0 03 	lds	r18, 0x03E0
     818:	30 91 e1 03 	lds	r19, 0x03E1
     81c:	b8 01       	movw	r22, r16
     81e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divmodhi4>
     822:	9f 93       	push	r25
     824:	8f 93       	push	r24
     826:	c9 01       	movw	r24, r18
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divmodhi4>
     82e:	7f 93       	push	r23
     830:	6f 93       	push	r22
     832:	85 ea       	ldi	r24, 0xA5	; 165
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	9f 93       	push	r25
     838:	8f 93       	push	r24
     83a:	84 e1       	ldi	r24, 0x14	; 20
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	9f 93       	push	r25
     840:	8f 93       	push	r24
     842:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
	
	//int ir_disrupted = score_message.data[2];
	//if(ir_disrupted){
	//	set_highscore();
	//}
}
     850:	2b 96       	adiw	r28, 0x0b	; 11
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	08 95       	ret

00000866 <game_play>:
volatile int highscore = 0;

void send_control_input(void);
void receive_score(void);

void game_play() {
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
	OLED_reset();
     86a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <OLED_reset>
	fprintf(OLED, "\n\n%s \n", "lButton: quit");
     86e:	85 eb       	ldi	r24, 0xB5	; 181
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	9f 93       	push	r25
     874:	8f 93       	push	r24
     876:	83 ec       	ldi	r24, 0xC3	; 195
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	9f 93       	push	r25
     87c:	8f 93       	push	r24
     87e:	c4 e1       	ldi	r28, 0x14	; 20
     880:	d1 e0       	ldi	r29, 0x01	; 1
     882:	df 93       	push	r29
     884:	cf 93       	push	r28
     886:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
	fprintf(OLED, "%s \n", "jButton: shoot");
     88a:	8a ec       	ldi	r24, 0xCA	; 202
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	9f 93       	push	r25
     890:	8f 93       	push	r24
     892:	85 ec       	ldi	r24, 0xC5	; 197
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	9f 93       	push	r25
     898:	8f 93       	push	r24
     89a:	df 93       	push	r29
     89c:	cf 93       	push	r28
     89e:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a2:	8f ef       	ldi	r24, 0xFF	; 255
     8a4:	9f e7       	ldi	r25, 0x7F	; 127
     8a6:	27 e0       	ldi	r18, 0x07	; 7
     8a8:	81 50       	subi	r24, 0x01	; 1
     8aa:	90 40       	sbci	r25, 0x00	; 0
     8ac:	20 40       	sbci	r18, 0x00	; 0
     8ae:	e1 f7       	brne	.-8      	; 0x8a8 <game_play+0x42>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <game_play+0x4c>
     8b2:	00 00       	nop
     8b4:	8d b7       	in	r24, 0x3d	; 61
     8b6:	9e b7       	in	r25, 0x3e	; 62
     8b8:	0c 96       	adiw	r24, 0x0c	; 12
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	9e bf       	out	0x3e, r25	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	8d bf       	out	0x3d, r24	; 61
     8c4:	04 c0       	rjmp	.+8      	; 0x8ce <game_play+0x68>
	//fprintf(OLED, "%s ", "r_slider: angle\n");
	//fprintf(OLED, "%s ", "x-axis: move\n");
	_delay_ms(500);						//makes sure first press does not trigger solenoid
	while(!JOY_button_pressed(LEFT_BUTTON)){
		send_control_input();
     8c6:	0e 94 74 03 	call	0x6e8	; 0x6e8 <send_control_input>
		receive_score();
     8ca:	0e 94 b7 03 	call	0x76e	; 0x76e <receive_score>
	fprintf(OLED, "\n\n%s \n", "lButton: quit");
	fprintf(OLED, "%s \n", "jButton: shoot");
	//fprintf(OLED, "%s ", "r_slider: angle\n");
	//fprintf(OLED, "%s ", "x-axis: move\n");
	_delay_ms(500);						//makes sure first press does not trigger solenoid
	while(!JOY_button_pressed(LEFT_BUTTON)){
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 b0 05 	call	0xb60	; 0xb60 <JOY_button_pressed>
     8d4:	89 2b       	or	r24, r25
     8d6:	b9 f3       	breq	.-18     	; 0x8c6 <game_play+0x60>
		send_control_input();
		receive_score();
	}
}
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	08 95       	ret

000008de <print_highscore>:
	//if(ir_disrupted){
	//	set_highscore();
	//}
}

void print_highscore(){
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
	OLED_reset();
     8e2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <OLED_reset>
	printf("HIGHSCORE:%d.%d seconds\n", highscore/10, highscore%10);
     8e6:	80 91 de 03 	lds	r24, 0x03DE
     8ea:	90 91 df 03 	lds	r25, 0x03DF
     8ee:	20 91 de 03 	lds	r18, 0x03DE
     8f2:	30 91 df 03 	lds	r19, 0x03DF
     8f6:	ca e0       	ldi	r28, 0x0A	; 10
     8f8:	d0 e0       	ldi	r29, 0x00	; 0
     8fa:	be 01       	movw	r22, r28
     8fc:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divmodhi4>
     900:	9f 93       	push	r25
     902:	8f 93       	push	r24
     904:	c9 01       	movw	r24, r18
     906:	be 01       	movw	r22, r28
     908:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divmodhi4>
     90c:	7f 93       	push	r23
     90e:	6f 93       	push	r22
     910:	89 ed       	ldi	r24, 0xD9	; 217
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	9f 93       	push	r25
     916:	8f 93       	push	r24
     918:	0e 94 84 10 	call	0x2108	; 0x2108 <printf>
	fprintf(OLED, "   HIGHSCORE:\n  %d.%d seconds\n", highscore/10, highscore%10);
     91c:	80 91 de 03 	lds	r24, 0x03DE
     920:	90 91 df 03 	lds	r25, 0x03DF
     924:	20 91 de 03 	lds	r18, 0x03DE
     928:	30 91 df 03 	lds	r19, 0x03DF
     92c:	be 01       	movw	r22, r28
     92e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divmodhi4>
     932:	9f 93       	push	r25
     934:	8f 93       	push	r24
     936:	c9 01       	movw	r24, r18
     938:	be 01       	movw	r22, r28
     93a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divmodhi4>
     93e:	7f 93       	push	r23
     940:	6f 93       	push	r22
     942:	82 ef       	ldi	r24, 0xF2	; 242
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	9f 93       	push	r25
     948:	8f 93       	push	r24
     94a:	c4 e1       	ldi	r28, 0x14	; 20
     94c:	d1 e0       	ldi	r29, 0x01	; 1
     94e:	df 93       	push	r29
     950:	cf 93       	push	r28
     952:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
	fprintf(OLED, "\n\n\n\n %s", "lButton: back");
     956:	81 e1       	ldi	r24, 0x11	; 17
     958:	92 e0       	ldi	r25, 0x02	; 2
     95a:	9f 93       	push	r25
     95c:	8f 93       	push	r24
     95e:	8f e1       	ldi	r24, 0x1F	; 31
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	9f 93       	push	r25
     964:	8f 93       	push	r24
     966:	df 93       	push	r29
     968:	cf 93       	push	r28
     96a:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
	while(!JOY_button_pressed(LEFT_BUTTON)){}
     96e:	8d b7       	in	r24, 0x3d	; 61
     970:	9e b7       	in	r25, 0x3e	; 62
     972:	44 96       	adiw	r24, 0x14	; 20
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	9e bf       	out	0x3e, r25	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	8d bf       	out	0x3d, r24	; 61
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	0e 94 b0 05 	call	0xb60	; 0xb60 <JOY_button_pressed>
     984:	89 2b       	or	r24, r25
     986:	d9 f3       	breq	.-10     	; 0x97e <print_highscore+0xa0>
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <JOY_print_calibration_status>:
	clear_bit(DDRB,PB2);
	clear_bit(SFIOR, PUD);
	JOY_calibrate(calibraton_mode);
}

void JOY_print_calibration_status() {
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
	OLED_reset();
     992:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <OLED_reset>
	fprintf(OLED, "%s\n", "Calibrate JOY");
     996:	87 e2       	ldi	r24, 0x27	; 39
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	9f 93       	push	r25
     99c:	8f 93       	push	r24
     99e:	86 e7       	ldi	r24, 0x76	; 118
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	9f 93       	push	r25
     9a4:	8f 93       	push	r24
     9a6:	c2 e2       	ldi	r28, 0x22	; 34
     9a8:	d1 e0       	ldi	r29, 0x01	; 1
     9aa:	df 93       	push	r29
     9ac:	cf 93       	push	r28
     9ae:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
	fprintf(OLED, "x_max: %6d\n", max.x);
     9b2:	80 91 f2 03 	lds	r24, 0x03F2
     9b6:	1f 92       	push	r1
     9b8:	8f 93       	push	r24
     9ba:	85 e3       	ldi	r24, 0x35	; 53
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	9f 93       	push	r25
     9c0:	8f 93       	push	r24
     9c2:	df 93       	push	r29
     9c4:	cf 93       	push	r28
     9c6:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
	fprintf(OLED, "x_min: %6d\n", min.x);
     9ca:	80 91 f6 03 	lds	r24, 0x03F6
     9ce:	1f 92       	push	r1
     9d0:	8f 93       	push	r24
     9d2:	81 e4       	ldi	r24, 0x41	; 65
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	9f 93       	push	r25
     9d8:	8f 93       	push	r24
     9da:	df 93       	push	r29
     9dc:	cf 93       	push	r28
     9de:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
	fprintf(OLED, "y_max: %6d\n", max.y);
     9e2:	80 91 f3 03 	lds	r24, 0x03F3
     9e6:	1f 92       	push	r1
     9e8:	8f 93       	push	r24
     9ea:	8d e4       	ldi	r24, 0x4D	; 77
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	9f 93       	push	r25
     9f0:	8f 93       	push	r24
     9f2:	df 93       	push	r29
     9f4:	cf 93       	push	r28
     9f6:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
	fprintf(OLED, "y_min: %6d\n", min.y);
     9fa:	80 91 f7 03 	lds	r24, 0x03F7
     9fe:	1f 92       	push	r1
     a00:	8f 93       	push	r24
     a02:	89 e5       	ldi	r24, 0x59	; 89
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	9f 93       	push	r25
     a08:	8f 93       	push	r24
     a0a:	df 93       	push	r29
     a0c:	cf 93       	push	r28
     a0e:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
	fprintf(OLED, "\n%s\n", "Click when done");
     a12:	85 e6       	ldi	r24, 0x65	; 101
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	9f 93       	push	r25
     a18:	8f 93       	push	r24
     a1a:	85 e7       	ldi	r24, 0x75	; 117
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	9f 93       	push	r25
     a20:	8f 93       	push	r24
     a22:	df 93       	push	r29
     a24:	cf 93       	push	r28
     a26:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
     a2a:	8d b7       	in	r24, 0x3d	; 61
     a2c:	9e b7       	in	r25, 0x3e	; 62
     a2e:	84 96       	adiw	r24, 0x24	; 36
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	9e bf       	out	0x3e, r25	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	8d bf       	out	0x3d, r24	; 61
}
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	08 95       	ret

00000a40 <JOY_calibrate>:

void JOY_calibrate(int calibraton_mode){
     a40:	bf 92       	push	r11
     a42:	cf 92       	push	r12
     a44:	df 92       	push	r13
     a46:	ef 92       	push	r14
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
	max.x = JOY_DEFAULT_MAX_X;
     a52:	2f ef       	ldi	r18, 0xFF	; 255
     a54:	20 93 f2 03 	sts	0x03F2, r18
	max.y = JOY_DEFAULT_MAX_Y;
     a58:	20 93 f3 03 	sts	0x03F3, r18
	min.x = JOY_DEFAULT_MIN_X;
     a5c:	10 92 f6 03 	sts	0x03F6, r1
	min.y = JOY_DEFAULT_MIN_Y;
     a60:	10 92 f7 03 	sts	0x03F7, r1
	
	if (calibraton_mode == CALIBRATION_MANUAL) {
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	e9 f5       	brne	.+122    	; 0xae2 <JOY_calibrate+0xa2>
		// Loop while joystick button is not pressed.
		while(test_bit(PINB,PINB2)) {
     a68:	b2 9b       	sbis	0x16, 2	; 22
     a6a:	3b c0       	rjmp	.+118    	; 0xae2 <JOY_calibrate+0xa2>
			// Read sensor values
			uint8_t x = ADC_read(X_COORD);
			uint8_t y = ADC_read(Y_COORD);
			
			// Find max and min values for x and y:
			max.x = MAX(x, max.x);
     a6c:	0f 2e       	mov	r0, r31
     a6e:	f2 ef       	ldi	r31, 0xF2	; 242
     a70:	cf 2e       	mov	r12, r31
     a72:	f3 e0       	ldi	r31, 0x03	; 3
     a74:	df 2e       	mov	r13, r31
     a76:	f0 2d       	mov	r31, r0
			max.y = MAX(y, max.y);
     a78:	0f 2e       	mov	r0, r31
     a7a:	f3 ef       	ldi	r31, 0xF3	; 243
     a7c:	ef 2e       	mov	r14, r31
     a7e:	f3 e0       	ldi	r31, 0x03	; 3
     a80:	ff 2e       	mov	r15, r31
     a82:	f0 2d       	mov	r31, r0
			min.x = MIN(x, min.x);
     a84:	06 ef       	ldi	r16, 0xF6	; 246
     a86:	13 e0       	ldi	r17, 0x03	; 3
			min.y = MIN(y, min.y);
     a88:	c7 ef       	ldi	r28, 0xF7	; 247
     a8a:	d3 e0       	ldi	r29, 0x03	; 3
	
	if (calibraton_mode == CALIBRATION_MANUAL) {
		// Loop while joystick button is not pressed.
		while(test_bit(PINB,PINB2)) {
			// Read sensor values
			uint8_t x = ADC_read(X_COORD);
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     a92:	b8 2e       	mov	r11, r24
			uint8_t y = ADC_read(Y_COORD);
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
			
			// Find max and min values for x and y:
			max.x = MAX(x, max.x);
     a9a:	f6 01       	movw	r30, r12
     a9c:	20 81       	ld	r18, Z
     a9e:	9b 2d       	mov	r25, r11
     aa0:	b2 16       	cp	r11, r18
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <JOY_calibrate+0x66>
     aa4:	92 2f       	mov	r25, r18
     aa6:	f6 01       	movw	r30, r12
     aa8:	90 83       	st	Z, r25
			max.y = MAX(y, max.y);
     aaa:	f7 01       	movw	r30, r14
     aac:	20 81       	ld	r18, Z
     aae:	98 2f       	mov	r25, r24
     ab0:	82 17       	cp	r24, r18
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <JOY_calibrate+0x76>
     ab4:	92 2f       	mov	r25, r18
     ab6:	f7 01       	movw	r30, r14
     ab8:	90 83       	st	Z, r25
			min.x = MIN(x, min.x);
     aba:	f8 01       	movw	r30, r16
     abc:	90 81       	ld	r25, Z
     abe:	9b 15       	cp	r25, r11
     ac0:	08 f4       	brcc	.+2      	; 0xac4 <JOY_calibrate+0x84>
     ac2:	b9 2e       	mov	r11, r25
     ac4:	f8 01       	movw	r30, r16
     ac6:	b0 82       	st	Z, r11
			min.y = MIN(y, min.y);
     ac8:	98 81       	ld	r25, Y
     aca:	98 17       	cp	r25, r24
     acc:	08 f4       	brcc	.+2      	; 0xad0 <JOY_calibrate+0x90>
     ace:	89 2f       	mov	r24, r25
     ad0:	88 83       	st	Y, r24
			
			JOY_print_calibration_status();
     ad2:	0e 94 c7 04 	call	0x98e	; 0x98e <JOY_print_calibration_status>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 ef       	ldi	r25, 0xF0	; 240
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	f1 f7       	brne	.-4      	; 0xada <JOY_calibrate+0x9a>
	min.x = JOY_DEFAULT_MIN_X;
	min.y = JOY_DEFAULT_MIN_Y;
	
	if (calibraton_mode == CALIBRATION_MANUAL) {
		// Loop while joystick button is not pressed.
		while(test_bit(PINB,PINB2)) {
     ade:	b2 99       	sbic	0x16, 2	; 22
     ae0:	d5 cf       	rjmp	.-86     	; 0xa8c <JOY_calibrate+0x4c>
			_delay_ms(50);
		}
	}
	
	// Find distance from middle to edges (radius)
	rad.x = (max.x - min.x) / 2;
     ae2:	e0 91 f2 03 	lds	r30, 0x03F2
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	60 91 f6 03 	lds	r22, 0x03F6
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	9f 01       	movw	r18, r30
     af0:	26 1b       	sub	r18, r22
     af2:	37 0b       	sbc	r19, r23
     af4:	c9 01       	movw	r24, r18
     af6:	99 23       	and	r25, r25
     af8:	0c f4       	brge	.+2      	; 0xafc <JOY_calibrate+0xbc>
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	95 95       	asr	r25
     afe:	87 95       	ror	r24
     b00:	80 93 f4 03 	sts	0x03F4, r24
	rad.y = (max.y - min.y) / 2;
     b04:	40 91 f3 03 	lds	r20, 0x03F3
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	20 91 f7 03 	lds	r18, 0x03F7
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	da 01       	movw	r26, r20
     b12:	a2 1b       	sub	r26, r18
     b14:	b3 0b       	sbc	r27, r19
     b16:	cd 01       	movw	r24, r26
     b18:	0a f4       	brpl	.+2      	; 0xb1c <JOY_calibrate+0xdc>
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	95 95       	asr	r25
     b1e:	87 95       	ror	r24
     b20:	80 93 f5 03 	sts	0x03F5, r24
		
	// Find mid point using edges.
	mid.x = (max.x + min.x) / 2;
     b24:	6e 0f       	add	r22, r30
     b26:	7f 1f       	adc	r23, r31
     b28:	75 95       	asr	r23
     b2a:	67 95       	ror	r22
     b2c:	60 93 f8 03 	sts	0x03F8, r22
	mid.y = (max.y + min.y) / 2;
     b30:	24 0f       	add	r18, r20
     b32:	35 1f       	adc	r19, r21
     b34:	35 95       	asr	r19
     b36:	27 95       	ror	r18
     b38:	20 93 f9 03 	sts	0x03F9, r18
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	df 90       	pop	r13
     b4a:	cf 90       	pop	r12
     b4c:	bf 90       	pop	r11
     b4e:	08 95       	ret

00000b50 <JOY_init>:
	uint8_t y;
} max, min, rad, mid;

void JOY_init(int calibraton_mode){
	//set pull-up resistors on PORTB for JOY_button
	set_bit(PORTB,PB2);
     b50:	c2 9a       	sbi	0x18, 2	; 24
	clear_bit(DDRB,PB2);
     b52:	ba 98       	cbi	0x17, 2	; 23
	clear_bit(SFIOR, PUD);
     b54:	20 b7       	in	r18, 0x30	; 48
     b56:	2b 7f       	andi	r18, 0xFB	; 251
     b58:	20 bf       	out	0x30, r18	; 48
	JOY_calibrate(calibraton_mode);
     b5a:	0e 94 20 05 	call	0xa40	; 0xa40 <JOY_calibrate>
     b5e:	08 95       	ret

00000b60 <JOY_button_pressed>:
	mid.x = (max.x + min.x) / 2;
	mid.y = (max.y + min.y) / 2;
}

int JOY_button_pressed(button b) {
	switch (b) {
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	41 f0       	breq	.+16     	; 0xb74 <JOY_button_pressed+0x14>
     b64:	18 f0       	brcs	.+6      	; 0xb6c <JOY_button_pressed+0xc>
     b66:	82 30       	cpi	r24, 0x02	; 2
     b68:	51 f0       	breq	.+20     	; 0xb7e <JOY_button_pressed+0x1e>
     b6a:	11 c0       	rjmp	.+34     	; 0xb8e <JOY_button_pressed+0x2e>
	case LEFT_BUTTON:
		if (test_bit(PINB, PINB0)) return 1;
     b6c:	86 b3       	in	r24, 0x16	; 22
     b6e:	81 70       	andi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	08 95       	ret
		break;
	case RIGHT_BUTTON:
		if (test_bit(PINB, PINB1)) return 1;
     b74:	86 b3       	in	r24, 0x16	; 22
}

int JOY_button_pressed(button b) {
	switch (b) {
	case LEFT_BUTTON:
		if (test_bit(PINB, PINB0)) return 1;
     b76:	86 95       	lsr	r24
     b78:	81 70       	andi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	08 95       	ret
		break;
	case RIGHT_BUTTON:
		if (test_bit(PINB, PINB1)) return 1;
		break;
	case JOY_BUTTON:
		if (!test_bit(PINB, PINB2)) return 1;
     b7e:	86 b3       	in	r24, 0x16	; 22
     b80:	86 95       	lsr	r24
     b82:	86 95       	lsr	r24
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	89 27       	eor	r24, r25
}

int JOY_button_pressed(button b) {
	switch (b) {
	case LEFT_BUTTON:
		if (test_bit(PINB, PINB0)) return 1;
     b88:	81 70       	andi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	08 95       	ret
		break;
	case JOY_BUTTON:
		if (!test_bit(PINB, PINB2)) return 1;
		break;
	}
	return 0;
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	90 e0       	ldi	r25, 0x00	; 0
}
     b92:	08 95       	ret

00000b94 <JOY_getPosition>:

JOY_position_t JOY_getPosition() {
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
	JOY_position_t JOY_position;
	JOY_position.x = (100 * (ADC_read(X_COORD) - mid.x)) / rad.x;
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     ba0:	28 2f       	mov	r18, r24
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	80 91 f8 03 	lds	r24, 0x03F8
     ba8:	28 1b       	sub	r18, r24
     baa:	31 09       	sbc	r19, r1
     bac:	14 e6       	ldi	r17, 0x64	; 100
     bae:	12 9f       	mul	r17, r18
     bb0:	c0 01       	movw	r24, r0
     bb2:	13 9f       	mul	r17, r19
     bb4:	90 0d       	add	r25, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	60 91 f4 03 	lds	r22, 0x03F4
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divmodhi4>
     bc2:	eb 01       	movw	r28, r22
	JOY_position.y = (100 * (ADC_read(Y_COORD) - mid.y)) / rad.y;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	80 91 f9 03 	lds	r24, 0x03F9
     bd2:	28 1b       	sub	r18, r24
     bd4:	31 09       	sbc	r19, r1
     bd6:	12 9f       	mul	r17, r18
     bd8:	c0 01       	movw	r24, r0
     bda:	13 9f       	mul	r17, r19
     bdc:	90 0d       	add	r25, r0
     bde:	11 24       	eor	r1, r1
     be0:	60 91 f5 03 	lds	r22, 0x03F5
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divmodhi4>
     bea:	9b 01       	movw	r18, r22
	//printf("x: %d, y: %d\n", JOY_position.x, JOY_position.y);
	return JOY_position;
     bec:	be 01       	movw	r22, r28
     bee:	c9 01       	movw	r24, r18
}
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	08 95       	ret

00000bf8 <JOY_getDirection>:

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
     bf8:	0e 94 ca 05 	call	0xb94	; 0xb94 <JOY_getPosition>
     bfc:	fb 01       	movw	r30, r22
     bfe:	ac 01       	movw	r20, r24
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     c00:	9b 01       	movw	r18, r22
     c02:	2c 5f       	subi	r18, 0xFC	; 252
     c04:	3f 4f       	sbci	r19, 0xFF	; 255
     c06:	29 30       	cpi	r18, 0x09	; 9
     c08:	31 05       	cpc	r19, r1
     c0a:	30 f4       	brcc	.+12     	; 0xc18 <JOY_getDirection+0x20>
     c0c:	9c 01       	movw	r18, r24
     c0e:	2c 5f       	subi	r18, 0xFC	; 252
     c10:	3f 4f       	sbci	r19, 0xFF	; 255
     c12:	29 30       	cpi	r18, 0x09	; 9
     c14:	31 05       	cpc	r19, r1
     c16:	e0 f0       	brcs	.+56     	; 0xc50 <JOY_getDirection+0x58>

	// The x-coordinate is dominating
	else if (abs(position.x) > abs(position.y)) {
     c18:	db 01       	movw	r26, r22
     c1a:	ff 23       	and	r31, r31
     c1c:	24 f4       	brge	.+8      	; 0xc26 <JOY_getDirection+0x2e>
     c1e:	aa 27       	eor	r26, r26
     c20:	bb 27       	eor	r27, r27
     c22:	a6 1b       	sub	r26, r22
     c24:	b7 0b       	sbc	r27, r23
     c26:	9c 01       	movw	r18, r24
     c28:	55 23       	and	r21, r21
     c2a:	24 f4       	brge	.+8      	; 0xc34 <JOY_getDirection+0x3c>
     c2c:	22 27       	eor	r18, r18
     c2e:	33 27       	eor	r19, r19
     c30:	28 1b       	sub	r18, r24
     c32:	39 0b       	sbc	r19, r25
     c34:	2a 17       	cp	r18, r26
     c36:	3b 07       	cpc	r19, r27
     c38:	34 f4       	brge	.+12     	; 0xc46 <JOY_getDirection+0x4e>
		// Positive x => RIGHT
		if (position.x > 0) return RIGHT;
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	1e 16       	cp	r1, r30
     c3e:	1f 06       	cpc	r1, r31
     c40:	54 f0       	brlt	.+20     	; 0xc56 <JOY_getDirection+0x5e>
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	08 95       	ret
		else return LEFT;

	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
     c46:	14 16       	cp	r1, r20
     c48:	15 06       	cpc	r1, r21
     c4a:	24 f4       	brge	.+8      	; 0xc54 <JOY_getDirection+0x5c>
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	08 95       	ret

JOY_direction_t JOY_getDirection() {
	JOY_position_t position = JOY_getPosition();
	
	// The JOYstick is within {(-5, -5), (5, 5)}, and the position is considered neutral.
	if (abs(position.x) < 5 && abs(position.y) < 5) return NEUTRAL;
     c50:	84 e0       	ldi	r24, 0x04	; 4
     c52:	08 95       	ret
	// The y-coordinate is dominating
	} else {
		// Positive y => UP
		if (position.y > 0) return UP;
		// Negative y => DOWN
		else return DOWN;
     c54:	83 e0       	ldi	r24, 0x03	; 3
	}
}
     c56:	08 95       	ret

00000c58 <SLI_getPosition>:

SLI_position_t SLI_getPosition() {
     c58:	cf 93       	push	r28
	SLI_position_t pos;
	pos.left = ADC_read(LEFT_CH);
     c5a:	82 e0       	ldi	r24, 0x02	; 2
     c5c:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     c60:	c8 2f       	mov	r28, r24
	pos.right = ADC_read(RIGHT_CH);
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     c68:	28 2f       	mov	r18, r24
	return pos;
     c6a:	6c 2f       	mov	r22, r28
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	82 2f       	mov	r24, r18
     c70:	90 e0       	ldi	r25, 0x00	; 0
}
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <append_char>:


/* PRINT STRING FUNCTION   */

void append_char(char c) {
	int len = strlen(written_string);
     c76:	ea ef       	ldi	r30, 0xFA	; 250
     c78:	f3 e0       	ldi	r31, 0x03	; 3
     c7a:	01 90       	ld	r0, Z+
     c7c:	00 20       	and	r0, r0
     c7e:	e9 f7       	brne	.-6      	; 0xc7a <append_char+0x4>
     c80:	31 97       	sbiw	r30, 0x01	; 1
     c82:	ea 5f       	subi	r30, 0xFA	; 250
     c84:	f3 40       	sbci	r31, 0x03	; 3
	if (len < MAX_STRING_SIZE){
     c86:	e8 32       	cpi	r30, 0x28	; 40
     c88:	f1 05       	cpc	r31, r1
     c8a:	6c f4       	brge	.+26     	; 0xca6 <append_char+0x30>
		written_string[len] = c;
     c8c:	e6 50       	subi	r30, 0x06	; 6
     c8e:	fc 4f       	sbci	r31, 0xFC	; 252
     c90:	80 83       	st	Z, r24
		written_string[len + 1] = '\0';
     c92:	11 82       	std	Z+1, r1	; 0x01
		string_position++;
     c94:	80 91 ec 03 	lds	r24, 0x03EC
     c98:	90 91 ed 03 	lds	r25, 0x03ED
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	90 93 ed 03 	sts	0x03ED, r25
     ca2:	80 93 ec 03 	sts	0x03EC, r24
     ca6:	08 95       	ret

00000ca8 <remove_last_char>:
	
	keyboard_goto(pos.y, pos.x);
}

void remove_last_char() {
	if (strlen(written_string) > 0){
     ca8:	80 91 fa 03 	lds	r24, 0x03FA
     cac:	88 23       	and	r24, r24
     cae:	39 f0       	breq	.+14     	; 0xcbe <remove_last_char+0x16>
		written_string[strlen(written_string) - 1] = '\0';
     cb0:	ea ef       	ldi	r30, 0xFA	; 250
     cb2:	f3 e0       	ldi	r31, 0x03	; 3
     cb4:	01 90       	ld	r0, Z+
     cb6:	00 20       	and	r0, r0
     cb8:	e9 f7       	brne	.-6      	; 0xcb4 <remove_last_char+0xc>
     cba:	32 97       	sbiw	r30, 0x02	; 2
     cbc:	10 82       	st	Z, r1
     cbe:	08 95       	ret

00000cc0 <keyboard_goto>:

}

// 5 lines x 16 columns
void keyboard_goto(int line, int column) {
	OLED_pos(line + 3, (column+2) * 8);
     cc0:	6e 5f       	subi	r22, 0xFE	; 254
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	66 0f       	add	r22, r22
     cc6:	66 0f       	add	r22, r22
     cc8:	66 0f       	add	r22, r22
     cca:	8d 5f       	subi	r24, 0xFD	; 253
     ccc:	0e 94 29 0c 	call	0x1852	; 0x1852 <OLED_pos>
     cd0:	08 95       	ret

00000cd2 <print_string>:
		string_position++;
	}

}

void print_string() {
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
	OLED_reset_cursor();
     cd6:	0e 94 3b 0c 	call	0x1876	; 0x1876 <OLED_reset_cursor>
	//char print_string[16];
	//memcpy(print_string, written_string[strlen(written_string)-string_position], 16);
	//fprintf(OLED, "%s", print_string);
	fprintf(OLED, "%s", written_string);
     cda:	62 e3       	ldi	r22, 0x32	; 50
     cdc:	71 e0       	ldi	r23, 0x01	; 1
     cde:	8a ef       	ldi	r24, 0xFA	; 250
     ce0:	93 e0       	ldi	r25, 0x03	; 3
     ce2:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <fputs>
	for (int i = strlen(written_string); i < 16; i++){
     ce6:	ca ef       	ldi	r28, 0xFA	; 250
     ce8:	d3 e0       	ldi	r29, 0x03	; 3
     cea:	09 90       	ld	r0, Y+
     cec:	00 20       	and	r0, r0
     cee:	e9 f7       	brne	.-6      	; 0xcea <print_string+0x18>
     cf0:	21 97       	sbiw	r28, 0x01	; 1
     cf2:	ca 5f       	subi	r28, 0xFA	; 250
     cf4:	d3 40       	sbci	r29, 0x03	; 3
     cf6:	c0 31       	cpi	r28, 0x10	; 16
     cf8:	d1 05       	cpc	r29, r1
     cfa:	54 f4       	brge	.+20     	; 0xd10 <print_string+0x3e>
		fprintf(OLED, " ");
     cfc:	62 e3       	ldi	r22, 0x32	; 50
     cfe:	71 e0       	ldi	r23, 0x01	; 1
     d00:	80 e2       	ldi	r24, 0x20	; 32
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 29 10 	call	0x2052	; 0x2052 <fputc>
	OLED_reset_cursor();
	//char print_string[16];
	//memcpy(print_string, written_string[strlen(written_string)-string_position], 16);
	//fprintf(OLED, "%s", print_string);
	fprintf(OLED, "%s", written_string);
	for (int i = strlen(written_string); i < 16; i++){
     d08:	21 96       	adiw	r28, 0x01	; 1
     d0a:	c0 31       	cpi	r28, 0x10	; 16
     d0c:	d1 05       	cpc	r29, r1
     d0e:	b1 f7       	brne	.-20     	; 0xcfc <print_string+0x2a>
		fprintf(OLED, " ");
	}
	
	//set block at current pointer position
	int pointer = MIN(strlen(written_string)%16,15)*8;
     d10:	ea ef       	ldi	r30, 0xFA	; 250
     d12:	f3 e0       	ldi	r31, 0x03	; 3
     d14:	01 90       	ld	r0, Z+
     d16:	00 20       	and	r0, r0
     d18:	e9 f7       	brne	.-6      	; 0xd14 <print_string+0x42>
     d1a:	31 97       	sbiw	r30, 0x01	; 1
     d1c:	ea 5f       	subi	r30, 0xFA	; 250
     d1e:	f3 40       	sbci	r31, 0x03	; 3
     d20:	ef 70       	andi	r30, 0x0F	; 15
     d22:	ff 27       	eor	r31, r31
     d24:	bf 01       	movw	r22, r30
     d26:	66 0f       	add	r22, r22
     d28:	77 1f       	adc	r23, r23
     d2a:	66 0f       	add	r22, r22
     d2c:	77 1f       	adc	r23, r23
     d2e:	66 0f       	add	r22, r22
     d30:	77 1f       	adc	r23, r23
	OLED_pos(0, pointer);
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	0e 94 29 0c 	call	0x1852	; 0x1852 <OLED_pos>
	print_fill(8);
     d38:	88 e0       	ldi	r24, 0x08	; 8
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <print_fill>
	
	blinking_pos_on = 0;
     d40:	10 92 eb 03 	sts	0x03EB, r1
     d44:	10 92 ea 03 	sts	0x03EA, r1
	
	keyboard_goto(pos.y, pos.x);
     d48:	60 91 e6 03 	lds	r22, 0x03E6
     d4c:	70 91 e7 03 	lds	r23, 0x03E7
     d50:	80 91 e8 03 	lds	r24, 0x03E8
     d54:	90 91 e9 03 	lds	r25, 0x03E9
     d58:	0e 94 60 06 	call	0xcc0	; 0xcc0 <keyboard_goto>
}
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <keyboard_goto_line>:
void keyboard_goto(int line, int column) {
	OLED_pos(line + 3, (column+2) * 8);
}

void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	0e 94 60 06 	call	0xcc0	; 0xcc0 <keyboard_goto>
     d6a:	08 95       	ret

00000d6c <keyboard_init>:
}

/* FUNCTION IMPLEMENTATIONS			*/
/************************************/

void keyboard_init() {
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
	OLED_reset();
     d78:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <OLED_reset>
	print_string();
     d7c:	0e 94 69 06 	call	0xcd2	; 0xcd2 <print_string>
	letters = (char*)LETTERS_SMALL;
     d80:	80 ea       	ldi	r24, 0xA0	; 160
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	90 93 31 01 	sts	0x0131, r25
     d88:	80 93 30 01 	sts	0x0130, r24
	keyboard_goto_line(0);
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 b1 06 	call	0xd62	; 0xd62 <keyboard_goto_line>
	pos.x = 0;
     d94:	10 92 e7 03 	sts	0x03E7, r1
     d98:	10 92 e6 03 	sts	0x03E6, r1
	pos.y = 0;
     d9c:	10 92 e9 03 	sts	0x03E9, r1
     da0:	10 92 e8 03 	sts	0x03E8, r1
	strcpy(written_string, "\0");
     da4:	10 92 fa 03 	sts	0x03FA, r1

	//The first letter is selected by default
	print_char(pgm_read_byte(&letters[0]), INVERSE);
     da8:	e0 91 30 01 	lds	r30, 0x0130
     dac:	f0 91 31 01 	lds	r31, 0x0131
     db0:	84 91       	lpm	r24, Z
     db2:	61 e0       	ldi	r22, 0x01	; 1
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <print_char>

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     dba:	c1 e0       	ldi	r28, 0x01	; 1
     dbc:	d0 e0       	ldi	r29, 0x00	; 0
		if (i % LINE_LENGTH == 0) {
     dbe:	0c e0       	ldi	r16, 0x0C	; 12
     dc0:	10 e0       	ldi	r17, 0x00	; 0
			keyboard_goto_line(++pos.y);
     dc2:	0f 2e       	mov	r0, r31
     dc4:	f8 ee       	ldi	r31, 0xE8	; 232
     dc6:	ef 2e       	mov	r14, r31
     dc8:	f3 e0       	ldi	r31, 0x03	; 3
     dca:	ff 2e       	mov	r15, r31
     dcc:	f0 2d       	mov	r31, r0
     dce:	0e c0       	rjmp	.+28     	; 0xdec <keyboard_init+0x80>
	//The first letter is selected by default
	print_char(pgm_read_byte(&letters[0]), INVERSE);

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0) {
     dd0:	ce 01       	movw	r24, r28
     dd2:	b8 01       	movw	r22, r16
     dd4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divmodhi4>
     dd8:	89 2b       	or	r24, r25
     dda:	41 f4       	brne	.+16     	; 0xdec <keyboard_init+0x80>
			keyboard_goto_line(++pos.y);
     ddc:	f7 01       	movw	r30, r14
     dde:	80 81       	ld	r24, Z
     de0:	91 81       	ldd	r25, Z+1	; 0x01
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	91 83       	std	Z+1, r25	; 0x01
     de6:	80 83       	st	Z, r24
     de8:	0e 94 b1 06 	call	0xd62	; 0xd62 <keyboard_goto_line>
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
     dec:	e0 91 30 01 	lds	r30, 0x0130
     df0:	f0 91 31 01 	lds	r31, 0x0131
     df4:	ec 0f       	add	r30, r28
     df6:	fd 1f       	adc	r31, r29
     df8:	84 91       	lpm	r24, Z
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	70 e0       	ldi	r23, 0x00	; 0
     dfe:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <print_char>

	//The first letter is selected by default
	print_char(pgm_read_byte(&letters[0]), INVERSE);

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     e02:	21 96       	adiw	r28, 0x01	; 1
     e04:	c0 33       	cpi	r28, 0x30	; 48
     e06:	d1 05       	cpc	r29, r1
     e08:	19 f7       	brne	.-58     	; 0xdd0 <keyboard_init+0x64>
			keyboard_goto_line(++pos.y);
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
	}
	//print the tool buttons
	keyboard_goto_line(4);
     e0a:	84 e0       	ldi	r24, 0x04	; 4
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 b1 06 	call	0xd62	; 0xd62 <keyboard_goto_line>
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <print_options_bar>

	//reset y-position
	pos.y = 0;
     e26:	10 92 e9 03 	sts	0x03E9, r1
     e2a:	10 92 e8 03 	sts	0x03E8, r1
     e2e:	ff ef       	ldi	r31, 0xFF	; 255
     e30:	2f e7       	ldi	r18, 0x7F	; 127
     e32:	87 e0       	ldi	r24, 0x07	; 7
     e34:	f1 50       	subi	r31, 0x01	; 1
     e36:	20 40       	sbci	r18, 0x00	; 0
     e38:	80 40       	sbci	r24, 0x00	; 0
     e3a:	e1 f7       	brne	.-8      	; 0xe34 <keyboard_init+0xc8>
     e3c:	00 c0       	rjmp	.+0      	; 0xe3e <keyboard_init+0xd2>
     e3e:	00 00       	nop

	//ignore button pressed right away
	_delay_ms(500);

}
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	08 95       	ret

00000e4e <keyboard_print>:


void keyboard_print() {
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
	keyboard_goto_line(0);
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 b1 06 	call	0xd62	; 0xd62 <keyboard_goto_line>
	pos.y = 0;
     e62:	10 92 e9 03 	sts	0x03E9, r1
     e66:	10 92 e8 03 	sts	0x03E8, r1
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
     e6a:	c0 e0       	ldi	r28, 0x00	; 0
     e6c:	d0 e0       	ldi	r29, 0x00	; 0
		if (i % LINE_LENGTH == 0 && i != 0) {
     e6e:	0c e0       	ldi	r16, 0x0C	; 12
     e70:	10 e0       	ldi	r17, 0x00	; 0
			keyboard_goto_line(++pos.y);
     e72:	0f 2e       	mov	r0, r31
     e74:	f8 ee       	ldi	r31, 0xE8	; 232
     e76:	ef 2e       	mov	r14, r31
     e78:	f3 e0       	ldi	r31, 0x03	; 3
     e7a:	ff 2e       	mov	r15, r31
     e7c:	f0 2d       	mov	r31, r0
     e7e:	10 c0       	rjmp	.+32     	; 0xea0 <keyboard_print+0x52>
void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
     e80:	ce 01       	movw	r24, r28
     e82:	b8 01       	movw	r22, r16
     e84:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divmodhi4>
     e88:	89 2b       	or	r24, r25
     e8a:	51 f4       	brne	.+20     	; 0xea0 <keyboard_print+0x52>
     e8c:	20 97       	sbiw	r28, 0x00	; 0
     e8e:	41 f0       	breq	.+16     	; 0xea0 <keyboard_print+0x52>
			keyboard_goto_line(++pos.y);
     e90:	f7 01       	movw	r30, r14
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	01 96       	adiw	r24, 0x01	; 1
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	80 83       	st	Z, r24
     e9c:	0e 94 b1 06 	call	0xd62	; 0xd62 <keyboard_goto_line>
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
     ea0:	e0 91 30 01 	lds	r30, 0x0130
     ea4:	f0 91 31 01 	lds	r31, 0x0131
     ea8:	ec 0f       	add	r30, r28
     eaa:	fd 1f       	adc	r31, r29
     eac:	84 91       	lpm	r24, Z
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <print_char>

void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
     eb6:	21 96       	adiw	r28, 0x01	; 1
     eb8:	c0 33       	cpi	r28, 0x30	; 48
     eba:	d1 05       	cpc	r29, r1
     ebc:	09 f7       	brne	.-62     	; 0xe80 <keyboard_print+0x32>
			keyboard_goto_line(++pos.y);
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
	}
	//print the tool buttons
	keyboard_goto_line(4);
     ebe:	84 e0       	ldi	r24, 0x04	; 4
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 b1 06 	call	0xd62	; 0xd62 <keyboard_goto_line>
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <print_options_bar>


}
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	08 95       	ret

00000ee8 <toggle_shift>:
void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
	}

void toggle_shift() {
	if (letters == LETTERS_SMALL) {
     ee8:	80 91 30 01 	lds	r24, 0x0130
     eec:	90 91 31 01 	lds	r25, 0x0131
     ef0:	80 5a       	subi	r24, 0xA0	; 160
     ef2:	90 40       	sbci	r25, 0x00	; 0
     ef4:	39 f4       	brne	.+14     	; 0xf04 <toggle_shift+0x1c>
		letters = (char*)LETTERS_BIG;
     ef6:	80 e7       	ldi	r24, 0x70	; 112
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	90 93 31 01 	sts	0x0131, r25
     efe:	80 93 30 01 	sts	0x0130, r24
     f02:	06 c0       	rjmp	.+12     	; 0xf10 <toggle_shift+0x28>
	}
	else {
		letters = (char*)LETTERS_SMALL;
     f04:	80 ea       	ldi	r24, 0xA0	; 160
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	90 93 31 01 	sts	0x0131, r25
     f0c:	80 93 30 01 	sts	0x0130, r24
	}

	keyboard_print();
     f10:	0e 94 27 07 	call	0xe4e	; 0xe4e <keyboard_print>
	keyboard_goto_line(4);
     f14:	84 e0       	ldi	r24, 0x04	; 4
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 b1 06 	call	0xd62	; 0xd62 <keyboard_goto_line>
	print_shift(INVERSE);
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <print_shift>
		
	pos.y = 4;
     f24:	84 e0       	ldi	r24, 0x04	; 4
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	90 93 e9 03 	sts	0x03E9, r25
     f2c:	80 93 e8 03 	sts	0x03E8, r24
	pos.x = 0;
     f30:	10 92 e7 03 	sts	0x03E7, r1
     f34:	10 92 e6 03 	sts	0x03E6, r1
     f38:	08 95       	ret

00000f3a <keyboard_register_position_change>:
}

void keyboard_register_position_change(JOY_direction_t direction) {
	if (direction == NEUTRAL);
     f3a:	84 30       	cpi	r24, 0x04	; 4
     f3c:	09 f4       	brne	.+2      	; 0xf40 <keyboard_register_position_change+0x6>
     f3e:	8a c0       	rjmp	.+276    	; 0x1054 <keyboard_register_position_change+0x11a>
	else if (direction == DOWN && pos.y < 4) {
     f40:	83 30       	cpi	r24, 0x03	; 3
     f42:	91 f4       	brne	.+36     	; 0xf68 <keyboard_register_position_change+0x2e>
     f44:	20 91 e8 03 	lds	r18, 0x03E8
     f48:	30 91 e9 03 	lds	r19, 0x03E9
     f4c:	24 30       	cpi	r18, 0x04	; 4
     f4e:	31 05       	cpc	r19, r1
     f50:	bc f5       	brge	.+110    	; 0xfc0 <keyboard_register_position_change+0x86>
		prev_pos.y = pos.y++;
     f52:	c9 01       	movw	r24, r18
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	90 93 e9 03 	sts	0x03E9, r25
     f5a:	80 93 e8 03 	sts	0x03E8, r24
     f5e:	30 93 e5 03 	sts	0x03E5, r19
     f62:	20 93 e4 03 	sts	0x03E4, r18
     f66:	08 95       	ret
	}
	else if (direction == UP && pos.y > 0) {
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	a1 f4       	brne	.+40     	; 0xf94 <keyboard_register_position_change+0x5a>
     f6c:	80 91 e8 03 	lds	r24, 0x03E8
     f70:	90 91 e9 03 	lds	r25, 0x03E9
     f74:	18 16       	cp	r1, r24
     f76:	19 06       	cpc	r1, r25
     f78:	0c f0       	brlt	.+2      	; 0xf7c <keyboard_register_position_change+0x42>
     f7a:	6c c0       	rjmp	.+216    	; 0x1054 <keyboard_register_position_change+0x11a>
		prev_pos.y = pos.y--;
     f7c:	9c 01       	movw	r18, r24
     f7e:	21 50       	subi	r18, 0x01	; 1
     f80:	31 09       	sbc	r19, r1
     f82:	30 93 e9 03 	sts	0x03E9, r19
     f86:	20 93 e8 03 	sts	0x03E8, r18
     f8a:	90 93 e5 03 	sts	0x03E5, r25
     f8e:	80 93 e4 03 	sts	0x03E4, r24
     f92:	08 95       	ret
	}
	else if (direction == LEFT && pos.x > 0) {
     f94:	81 11       	cpse	r24, r1
     f96:	14 c0       	rjmp	.+40     	; 0xfc0 <keyboard_register_position_change+0x86>
     f98:	80 91 e6 03 	lds	r24, 0x03E6
     f9c:	90 91 e7 03 	lds	r25, 0x03E7
     fa0:	18 16       	cp	r1, r24
     fa2:	19 06       	cpc	r1, r25
     fa4:	0c f0       	brlt	.+2      	; 0xfa8 <keyboard_register_position_change+0x6e>
     fa6:	56 c0       	rjmp	.+172    	; 0x1054 <keyboard_register_position_change+0x11a>
		prev_pos.x = pos.x--;
     fa8:	9c 01       	movw	r18, r24
     faa:	21 50       	subi	r18, 0x01	; 1
     fac:	31 09       	sbc	r19, r1
     fae:	30 93 e7 03 	sts	0x03E7, r19
     fb2:	20 93 e6 03 	sts	0x03E6, r18
     fb6:	90 93 e3 03 	sts	0x03E3, r25
     fba:	80 93 e2 03 	sts	0x03E2, r24
     fbe:	08 95       	ret
	}
	else if (direction == RIGHT && pos.x < LINE_LENGTH - 1) {
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <keyboard_register_position_change+0x8c>
     fc4:	47 c0       	rjmp	.+142    	; 0x1054 <keyboard_register_position_change+0x11a>
     fc6:	80 91 e6 03 	lds	r24, 0x03E6
     fca:	90 91 e7 03 	lds	r25, 0x03E7
     fce:	8b 30       	cpi	r24, 0x0B	; 11
     fd0:	91 05       	cpc	r25, r1
     fd2:	0c f0       	brlt	.+2      	; 0xfd6 <keyboard_register_position_change+0x9c>
     fd4:	3f c0       	rjmp	.+126    	; 0x1054 <keyboard_register_position_change+0x11a>

		if (pos.y == 4) {
     fd6:	20 91 e8 03 	lds	r18, 0x03E8
     fda:	30 91 e9 03 	lds	r19, 0x03E9
     fde:	24 30       	cpi	r18, 0x04	; 4
     fe0:	31 05       	cpc	r19, r1
     fe2:	69 f5       	brne	.+90     	; 0x103e <keyboard_register_position_change+0x104>
			if (pos.x < 2) {
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	91 05       	cpc	r25, r1
     fe8:	5c f4       	brge	.+22     	; 0x1000 <keyboard_register_position_change+0xc6>
				prev_pos.x = 0;
     fea:	10 92 e3 03 	sts	0x03E3, r1
     fee:	10 92 e2 03 	sts	0x03E2, r1
				pos.x = 2;
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	90 93 e7 03 	sts	0x03E7, r25
     ffa:	80 93 e6 03 	sts	0x03E6, r24
     ffe:	08 95       	ret
			}
			else if (pos.x < 8) {
    1000:	88 30       	cpi	r24, 0x08	; 8
    1002:	91 05       	cpc	r25, r1
    1004:	6c f4       	brge	.+26     	; 0x1020 <keyboard_register_position_change+0xe6>
				prev_pos.x = 2;
    1006:	82 e0       	ldi	r24, 0x02	; 2
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	90 93 e3 03 	sts	0x03E3, r25
    100e:	80 93 e2 03 	sts	0x03E2, r24
				pos.x = 8;
    1012:	88 e0       	ldi	r24, 0x08	; 8
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	90 93 e7 03 	sts	0x03E7, r25
    101a:	80 93 e6 03 	sts	0x03E6, r24
    101e:	08 95       	ret
			}
			else if (pos.x < 10) {
    1020:	0a 97       	sbiw	r24, 0x0a	; 10
    1022:	c4 f4       	brge	.+48     	; 0x1054 <keyboard_register_position_change+0x11a>
				prev_pos.x = 8;
    1024:	88 e0       	ldi	r24, 0x08	; 8
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	90 93 e3 03 	sts	0x03E3, r25
    102c:	80 93 e2 03 	sts	0x03E2, r24
				pos.x = 10;
    1030:	8a e0       	ldi	r24, 0x0A	; 10
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	90 93 e7 03 	sts	0x03E7, r25
    1038:	80 93 e6 03 	sts	0x03E6, r24
    103c:	08 95       	ret
			}
		}
		else {
			prev_pos.x = pos.x++;
    103e:	9c 01       	movw	r18, r24
    1040:	2f 5f       	subi	r18, 0xFF	; 255
    1042:	3f 4f       	sbci	r19, 0xFF	; 255
    1044:	30 93 e7 03 	sts	0x03E7, r19
    1048:	20 93 e6 03 	sts	0x03E6, r18
    104c:	90 93 e3 03 	sts	0x03E3, r25
    1050:	80 93 e2 03 	sts	0x03E2, r24
    1054:	08 95       	ret

00001056 <keyboard_unselect_prev>:
		}
	}
}


void keyboard_unselect_prev() {
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
	//old item is a letter
	if (prev_pos.y < 4) {
    105a:	80 91 e4 03 	lds	r24, 0x03E4
    105e:	90 91 e5 03 	lds	r25, 0x03E5
    1062:	84 30       	cpi	r24, 0x04	; 4
    1064:	91 05       	cpc	r25, r1
    1066:	24 f5       	brge	.+72     	; 0x10b0 <keyboard_unselect_prev+0x5a>
		keyboard_goto(prev_pos.y, prev_pos.x);
    1068:	c2 ee       	ldi	r28, 0xE2	; 226
    106a:	d3 e0       	ldi	r29, 0x03	; 3
    106c:	68 81       	ld	r22, Y
    106e:	79 81       	ldd	r23, Y+1	; 0x01
    1070:	0e 94 60 06 	call	0xcc0	; 0xcc0 <keyboard_goto>
		print_char(pgm_read_byte(&letters[prev_pos.y * LINE_LENGTH + prev_pos.x]), NORMAL);
    1074:	80 91 e4 03 	lds	r24, 0x03E4
    1078:	90 91 e5 03 	lds	r25, 0x03E5
    107c:	fc 01       	movw	r30, r24
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	8e 0f       	add	r24, r30
    1084:	9f 1f       	adc	r25, r31
    1086:	fc 01       	movw	r30, r24
    1088:	ee 0f       	add	r30, r30
    108a:	ff 1f       	adc	r31, r31
    108c:	ee 0f       	add	r30, r30
    108e:	ff 1f       	adc	r31, r31
    1090:	28 81       	ld	r18, Y
    1092:	39 81       	ldd	r19, Y+1	; 0x01
    1094:	e2 0f       	add	r30, r18
    1096:	f3 1f       	adc	r31, r19
    1098:	80 91 30 01 	lds	r24, 0x0130
    109c:	90 91 31 01 	lds	r25, 0x0131
    10a0:	e8 0f       	add	r30, r24
    10a2:	f9 1f       	adc	r31, r25
    10a4:	84 91       	lpm	r24, Z
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <print_char>
    10ae:	46 c0       	rjmp	.+140    	; 0x113c <keyboard_unselect_prev+0xe6>
	}

	//old item is in toolbar
	else {
		if (prev_pos.x < 2) {
    10b0:	20 91 e2 03 	lds	r18, 0x03E2
    10b4:	30 91 e3 03 	lds	r19, 0x03E3
    10b8:	22 30       	cpi	r18, 0x02	; 2
    10ba:	31 05       	cpc	r19, r1
    10bc:	6c f4       	brge	.+26     	; 0x10d8 <keyboard_unselect_prev+0x82>
			prev_pos.x = 0;
    10be:	10 92 e3 03 	sts	0x03E3, r1
    10c2:	10 92 e2 03 	sts	0x03E2, r1
			keyboard_goto(prev_pos.y, prev_pos.x);
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	0e 94 60 06 	call	0xcc0	; 0xcc0 <keyboard_goto>
			print_shift(NORMAL);
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <print_shift>
    10d6:	32 c0       	rjmp	.+100    	; 0x113c <keyboard_unselect_prev+0xe6>
		}
		else if (prev_pos.x < 8) {
    10d8:	28 30       	cpi	r18, 0x08	; 8
    10da:	31 05       	cpc	r19, r1
    10dc:	7c f4       	brge	.+30     	; 0x10fc <keyboard_unselect_prev+0xa6>
			prev_pos.x = 2; //start of spacebar
    10de:	22 e0       	ldi	r18, 0x02	; 2
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	30 93 e3 03 	sts	0x03E3, r19
    10e6:	20 93 e2 03 	sts	0x03E2, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
    10ea:	62 e0       	ldi	r22, 0x02	; 2
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	0e 94 60 06 	call	0xcc0	; 0xcc0 <keyboard_goto>
			print_spacebar(NORMAL);
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <print_spacebar>
    10fa:	20 c0       	rjmp	.+64     	; 0x113c <keyboard_unselect_prev+0xe6>
		}
		else if (prev_pos.x < 10) {
    10fc:	2a 30       	cpi	r18, 0x0A	; 10
    10fe:	31 05       	cpc	r19, r1
    1100:	7c f4       	brge	.+30     	; 0x1120 <keyboard_unselect_prev+0xca>
			prev_pos.x = 8; //start of left arrow
    1102:	28 e0       	ldi	r18, 0x08	; 8
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	30 93 e3 03 	sts	0x03E3, r19
    110a:	20 93 e2 03 	sts	0x03E2, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
    110e:	68 e0       	ldi	r22, 0x08	; 8
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	0e 94 60 06 	call	0xcc0	; 0xcc0 <keyboard_goto>
			print_left_arrow(NORMAL);
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <print_left_arrow>
    111e:	0e c0       	rjmp	.+28     	; 0x113c <keyboard_unselect_prev+0xe6>
		}
		else {
			prev_pos.x = 10; //start of right arrow
    1120:	2a e0       	ldi	r18, 0x0A	; 10
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	30 93 e3 03 	sts	0x03E3, r19
    1128:	20 93 e2 03 	sts	0x03E2, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
    112c:	6a e0       	ldi	r22, 0x0A	; 10
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	0e 94 60 06 	call	0xcc0	; 0xcc0 <keyboard_goto>
			print_right_arrow(NORMAL);
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <print_right_arrow>
		}
	}
}
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <keyboard_select_curr>:

void keyboard_select_curr() {
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
	//selected item is a letter
	if (pos.y < 4) {
    1146:	80 91 e8 03 	lds	r24, 0x03E8
    114a:	90 91 e9 03 	lds	r25, 0x03E9
    114e:	84 30       	cpi	r24, 0x04	; 4
    1150:	91 05       	cpc	r25, r1
    1152:	24 f5       	brge	.+72     	; 0x119c <keyboard_select_curr+0x5a>
		keyboard_goto(pos.y, pos.x);
    1154:	c6 ee       	ldi	r28, 0xE6	; 230
    1156:	d3 e0       	ldi	r29, 0x03	; 3
    1158:	68 81       	ld	r22, Y
    115a:	79 81       	ldd	r23, Y+1	; 0x01
    115c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <keyboard_goto>
		print_char(pgm_read_byte(&letters[pos.y * LINE_LENGTH + pos.x]), INVERSE);
    1160:	80 91 e8 03 	lds	r24, 0x03E8
    1164:	90 91 e9 03 	lds	r25, 0x03E9
    1168:	fc 01       	movw	r30, r24
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	8e 0f       	add	r24, r30
    1170:	9f 1f       	adc	r25, r31
    1172:	fc 01       	movw	r30, r24
    1174:	ee 0f       	add	r30, r30
    1176:	ff 1f       	adc	r31, r31
    1178:	ee 0f       	add	r30, r30
    117a:	ff 1f       	adc	r31, r31
    117c:	28 81       	ld	r18, Y
    117e:	39 81       	ldd	r19, Y+1	; 0x01
    1180:	e2 0f       	add	r30, r18
    1182:	f3 1f       	adc	r31, r19
    1184:	80 91 30 01 	lds	r24, 0x0130
    1188:	90 91 31 01 	lds	r25, 0x0131
    118c:	e8 0f       	add	r30, r24
    118e:	f9 1f       	adc	r31, r25
    1190:	84 91       	lpm	r24, Z
    1192:	61 e0       	ldi	r22, 0x01	; 1
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <print_char>
    119a:	46 c0       	rjmp	.+140    	; 0x1228 <keyboard_select_curr+0xe6>
	}

	//selected menu item is in toolbar
	else {
		if (pos.x < 2) {
    119c:	20 91 e6 03 	lds	r18, 0x03E6
    11a0:	30 91 e7 03 	lds	r19, 0x03E7
    11a4:	22 30       	cpi	r18, 0x02	; 2
    11a6:	31 05       	cpc	r19, r1
    11a8:	6c f4       	brge	.+26     	; 0x11c4 <keyboard_select_curr+0x82>
			pos.x = 0;
    11aa:	10 92 e7 03 	sts	0x03E7, r1
    11ae:	10 92 e6 03 	sts	0x03E6, r1
			keyboard_goto(pos.y, pos.x);
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <keyboard_goto>
			print_shift(INVERSE);
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <print_shift>
    11c2:	32 c0       	rjmp	.+100    	; 0x1228 <keyboard_select_curr+0xe6>
		}
		else if (pos.x < 8) {
    11c4:	28 30       	cpi	r18, 0x08	; 8
    11c6:	31 05       	cpc	r19, r1
    11c8:	7c f4       	brge	.+30     	; 0x11e8 <keyboard_select_curr+0xa6>
			pos.x = 2; //start of spacebar
    11ca:	22 e0       	ldi	r18, 0x02	; 2
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	30 93 e7 03 	sts	0x03E7, r19
    11d2:	20 93 e6 03 	sts	0x03E6, r18
			keyboard_goto(pos.y, pos.x);
    11d6:	62 e0       	ldi	r22, 0x02	; 2
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	0e 94 60 06 	call	0xcc0	; 0xcc0 <keyboard_goto>
			print_spacebar(INVERSE);
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <print_spacebar>
    11e6:	20 c0       	rjmp	.+64     	; 0x1228 <keyboard_select_curr+0xe6>
		}
		else if (pos.x < 10) {
    11e8:	2a 30       	cpi	r18, 0x0A	; 10
    11ea:	31 05       	cpc	r19, r1
    11ec:	7c f4       	brge	.+30     	; 0x120c <keyboard_select_curr+0xca>
			pos.x = 8; //start of left arrow
    11ee:	28 e0       	ldi	r18, 0x08	; 8
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	30 93 e7 03 	sts	0x03E7, r19
    11f6:	20 93 e6 03 	sts	0x03E6, r18
			keyboard_goto(pos.y, pos.x);
    11fa:	68 e0       	ldi	r22, 0x08	; 8
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	0e 94 60 06 	call	0xcc0	; 0xcc0 <keyboard_goto>
			print_left_arrow(INVERSE);
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <print_left_arrow>
    120a:	0e c0       	rjmp	.+28     	; 0x1228 <keyboard_select_curr+0xe6>
		}
		else {
			pos.x = 10; //start of right arrow
    120c:	2a e0       	ldi	r18, 0x0A	; 10
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	30 93 e7 03 	sts	0x03E7, r19
    1214:	20 93 e6 03 	sts	0x03E6, r18
			keyboard_goto(pos.y, pos.x);
    1218:	6a e0       	ldi	r22, 0x0A	; 10
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <keyboard_goto>
			print_right_arrow(INVERSE);
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <print_right_arrow>
		}
	}
}
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	08 95       	ret

0000122e <keyboard_item_pressed>:


void keyboard_item_pressed() {
	if (pos.y < 4) {
    122e:	80 91 e8 03 	lds	r24, 0x03E8
    1232:	90 91 e9 03 	lds	r25, 0x03E9
    1236:	84 30       	cpi	r24, 0x04	; 4
    1238:	91 05       	cpc	r25, r1
    123a:	e4 f4       	brge	.+56     	; 0x1274 <keyboard_item_pressed+0x46>
		append_char(pgm_read_byte(&letters[pos.y * LINE_LENGTH + pos.x]));
    123c:	fc 01       	movw	r30, r24
    123e:	ee 0f       	add	r30, r30
    1240:	ff 1f       	adc	r31, r31
    1242:	8e 0f       	add	r24, r30
    1244:	9f 1f       	adc	r25, r31
    1246:	fc 01       	movw	r30, r24
    1248:	ee 0f       	add	r30, r30
    124a:	ff 1f       	adc	r31, r31
    124c:	ee 0f       	add	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	20 91 e6 03 	lds	r18, 0x03E6
    1254:	30 91 e7 03 	lds	r19, 0x03E7
    1258:	e2 0f       	add	r30, r18
    125a:	f3 1f       	adc	r31, r19
    125c:	80 91 30 01 	lds	r24, 0x0130
    1260:	90 91 31 01 	lds	r25, 0x0131
    1264:	e8 0f       	add	r30, r24
    1266:	f9 1f       	adc	r31, r25
    1268:	84 91       	lpm	r24, Z
    126a:	0e 94 3b 06 	call	0xc76	; 0xc76 <append_char>
		//printf("APPEND written string: %s", written_string);
		//replace with a print function that remembers which part is printed, used with < >
		print_string();
    126e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <print_string>
    1272:	08 95       	ret
	}
	else {
		if (pos.x < 2) {
    1274:	80 91 e6 03 	lds	r24, 0x03E6
    1278:	90 91 e7 03 	lds	r25, 0x03E7
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	91 05       	cpc	r25, r1
    1280:	1c f4       	brge	.+6      	; 0x1288 <keyboard_item_pressed+0x5a>
			toggle_shift();
    1282:	0e 94 74 07 	call	0xee8	; 0xee8 <toggle_shift>
    1286:	08 95       	ret
		}
		else if (pos.x < 8) {
    1288:	88 30       	cpi	r24, 0x08	; 8
    128a:	91 05       	cpc	r25, r1
    128c:	34 f4       	brge	.+12     	; 0x129a <keyboard_item_pressed+0x6c>
			append_char(32);
    128e:	80 e2       	ldi	r24, 0x20	; 32
    1290:	0e 94 3b 06 	call	0xc76	; 0xc76 <append_char>
			print_string();
    1294:	0e 94 69 06 	call	0xcd2	; 0xcd2 <print_string>
    1298:	08 95       	ret
		}
		
		//last two probably not working
		else if (pos.x < 10 && string_position > 0) {
    129a:	8a 30       	cpi	r24, 0x0A	; 10
    129c:	91 05       	cpc	r25, r1
    129e:	74 f4       	brge	.+28     	; 0x12bc <keyboard_item_pressed+0x8e>
    12a0:	20 91 ec 03 	lds	r18, 0x03EC
    12a4:	30 91 ed 03 	lds	r19, 0x03ED
    12a8:	12 16       	cp	r1, r18
    12aa:	13 06       	cpc	r1, r19
    12ac:	3c f4       	brge	.+14     	; 0x12bc <keyboard_item_pressed+0x8e>
			string_position--;
    12ae:	21 50       	subi	r18, 0x01	; 1
    12b0:	31 09       	sbc	r19, r1
    12b2:	30 93 ed 03 	sts	0x03ED, r19
    12b6:	20 93 ec 03 	sts	0x03EC, r18
    12ba:	08 95       	ret
		}
		else if (pos.x < 12 && string_position < strlen(written_string)) {
    12bc:	0c 97       	sbiw	r24, 0x0c	; 12
    12be:	a4 f4       	brge	.+40     	; 0x12e8 <keyboard_item_pressed+0xba>
    12c0:	80 91 ec 03 	lds	r24, 0x03EC
    12c4:	90 91 ed 03 	lds	r25, 0x03ED
    12c8:	ea ef       	ldi	r30, 0xFA	; 250
    12ca:	f3 e0       	ldi	r31, 0x03	; 3
    12cc:	01 90       	ld	r0, Z+
    12ce:	00 20       	and	r0, r0
    12d0:	e9 f7       	brne	.-6      	; 0x12cc <keyboard_item_pressed+0x9e>
    12d2:	31 97       	sbiw	r30, 0x01	; 1
    12d4:	ea 5f       	subi	r30, 0xFA	; 250
    12d6:	f3 40       	sbci	r31, 0x03	; 3
    12d8:	8e 17       	cp	r24, r30
    12da:	9f 07       	cpc	r25, r31
    12dc:	28 f4       	brcc	.+10     	; 0x12e8 <keyboard_item_pressed+0xba>
			string_position++;
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	90 93 ed 03 	sts	0x03ED, r25
    12e4:	80 93 ec 03 	sts	0x03EC, r24
    12e8:	08 95       	ret

000012ea <keyboard_run>:
	}
}



void keyboard_run() {
    12ea:	6f 92       	push	r6
    12ec:	7f 92       	push	r7
    12ee:	8f 92       	push	r8
    12f0:	9f 92       	push	r9
    12f2:	af 92       	push	r10
    12f4:	bf 92       	push	r11
    12f6:	cf 92       	push	r12
    12f8:	df 92       	push	r13
    12fa:	ef 92       	push	r14
    12fc:	ff 92       	push	r15
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
	keyboard_init();
    1306:	0e 94 b6 06 	call	0xd6c	; 0xd6c <keyboard_init>
	while (!JOY_button_pressed(LEFT_BUTTON)) {
		//Check if we switch letter
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
    130a:	0f 2e       	mov	r0, r31
    130c:	f4 ee       	ldi	r31, 0xE4	; 228
    130e:	ef 2e       	mov	r14, r31
    1310:	f3 e0       	ldi	r31, 0x03	; 3
    1312:	ff 2e       	mov	r15, r31
    1314:	f0 2d       	mov	r31, r0
    1316:	08 ee       	ldi	r16, 0xE8	; 232
    1318:	13 e0       	ldi	r17, 0x03	; 3
			//unselect the old letter and select the new one
			keyboard_unselect_prev();
			keyboard_select_curr();

			//Reset position
			prev_pos.x = pos.x;
    131a:	0f 2e       	mov	r0, r31
    131c:	f2 ee       	ldi	r31, 0xE2	; 226
    131e:	af 2e       	mov	r10, r31
    1320:	f3 e0       	ldi	r31, 0x03	; 3
    1322:	bf 2e       	mov	r11, r31
    1324:	f0 2d       	mov	r31, r0
    1326:	0f 2e       	mov	r0, r31
    1328:	f6 ee       	ldi	r31, 0xE6	; 230
    132a:	cf 2e       	mov	r12, r31
    132c:	f3 e0       	ldi	r31, 0x03	; 3
    132e:	df 2e       	mov	r13, r31
    1330:	f0 2d       	mov	r31, r0
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
			//printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
			position_moved = 1;
    1332:	88 24       	eor	r8, r8
    1334:	83 94       	inc	r8
    1336:	91 2c       	mov	r9, r1
    1338:	61 2c       	mov	r6, r1
    133a:	71 2c       	mov	r7, r1

	//detect changes
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
    133c:	59 c0       	rjmp	.+178    	; 0x13f0 <keyboard_run+0x106>
		//Check if we switch letter
		direction = JOY_getDirection();
    133e:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <JOY_getDirection>
		keyboard_register_position_change(direction);
    1342:	0e 94 9d 07 	call	0xf3a	; 0xf3a <keyboard_register_position_change>
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
    1346:	f7 01       	movw	r30, r14
    1348:	20 81       	ld	r18, Z
    134a:	31 81       	ldd	r19, Z+1	; 0x01
    134c:	f8 01       	movw	r30, r16
    134e:	80 81       	ld	r24, Z
    1350:	91 81       	ldd	r25, Z+1	; 0x01
    1352:	28 17       	cp	r18, r24
    1354:	39 07       	cpc	r19, r25
    1356:	49 f4       	brne	.+18     	; 0x136a <keyboard_run+0x80>
    1358:	f5 01       	movw	r30, r10
    135a:	20 81       	ld	r18, Z
    135c:	31 81       	ldd	r19, Z+1	; 0x01
    135e:	f6 01       	movw	r30, r12
    1360:	80 81       	ld	r24, Z
    1362:	91 81       	ldd	r25, Z+1	; 0x01
    1364:	28 17       	cp	r18, r24
    1366:	39 07       	cpc	r19, r25
    1368:	99 f0       	breq	.+38     	; 0x1390 <keyboard_run+0xa6>
			//printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
			position_moved = 1;
			//unselect the old letter and select the new one
			keyboard_unselect_prev();
    136a:	0e 94 2b 08 	call	0x1056	; 0x1056 <keyboard_unselect_prev>
			keyboard_select_curr();
    136e:	0e 94 a1 08 	call	0x1142	; 0x1142 <keyboard_select_curr>

			//Reset position
			prev_pos.x = pos.x;
    1372:	f6 01       	movw	r30, r12
    1374:	80 81       	ld	r24, Z
    1376:	91 81       	ldd	r25, Z+1	; 0x01
    1378:	f5 01       	movw	r30, r10
    137a:	91 83       	std	Z+1, r25	; 0x01
    137c:	80 83       	st	Z, r24
			prev_pos.y = pos.y;
    137e:	f8 01       	movw	r30, r16
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	f7 01       	movw	r30, r14
    1386:	91 83       	std	Z+1, r25	; 0x01
    1388:	80 83       	st	Z, r24
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
			//printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
			position_moved = 1;
    138a:	c8 2d       	mov	r28, r8
    138c:	d9 2d       	mov	r29, r9
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <keyboard_run+0xaa>
    1390:	c6 2d       	mov	r28, r6
    1392:	d7 2d       	mov	r29, r7
			prev_pos.y = pos.y;
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	0e 94 b0 05 	call	0xb60	; 0xb60 <JOY_button_pressed>
    139a:	89 2b       	or	r24, r25
    139c:	29 f0       	breq	.+10     	; 0x13a8 <keyboard_run+0xbe>
			button_pressed = 1;
			keyboard_item_pressed();
    139e:	0e 94 17 09 	call	0x122e	; 0x122e <keyboard_item_pressed>
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
			button_pressed = 1;
    13a2:	88 2d       	mov	r24, r8
    13a4:	99 2d       	mov	r25, r9
    13a6:	0e c0       	rjmp	.+28     	; 0x13c4 <keyboard_run+0xda>
			keyboard_item_pressed();
			
		}
		//check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	0e 94 b0 05 	call	0xb60	; 0xb60 <JOY_button_pressed>
    13ae:	89 2b       	or	r24, r25
    13b0:	39 f0       	breq	.+14     	; 0x13c0 <keyboard_run+0xd6>
			button_pressed = 1;
			//not working
			remove_last_char();
    13b2:	0e 94 54 06 	call	0xca8	; 0xca8 <remove_last_char>
			//printf("REMOVE written string: %s", written_string);
			print_string();
    13b6:	0e 94 69 06 	call	0xcd2	; 0xcd2 <print_string>
			keyboard_item_pressed();
			
		}
		//check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
			button_pressed = 1;
    13ba:	88 2d       	mov	r24, r8
    13bc:	99 2d       	mov	r25, r9
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <keyboard_run+0xda>
    13c0:	86 2d       	mov	r24, r6
    13c2:	97 2d       	mov	r25, r7
			//OLED_pos(0, pointer);
			//print_blank(8);
			//blinking_pos_on = 1;
		//}
		
		if(position_moved){
    13c4:	cd 2b       	or	r28, r29
    13c6:	49 f0       	breq	.+18     	; 0x13da <keyboard_run+0xf0>
    13c8:	ef ef       	ldi	r30, 0xFF	; 255
    13ca:	ff eb       	ldi	r31, 0xBF	; 191
    13cc:	23 e0       	ldi	r18, 0x03	; 3
    13ce:	e1 50       	subi	r30, 0x01	; 1
    13d0:	f0 40       	sbci	r31, 0x00	; 0
    13d2:	20 40       	sbci	r18, 0x00	; 0
    13d4:	e1 f7       	brne	.-8      	; 0x13ce <keyboard_run+0xe4>
    13d6:	00 c0       	rjmp	.+0      	; 0x13d8 <keyboard_run+0xee>
    13d8:	00 00       	nop
			position_moved = 0;
			_delay_ms(250);
		}
		if(button_pressed){
    13da:	89 2b       	or	r24, r25
    13dc:	49 f0       	breq	.+18     	; 0x13f0 <keyboard_run+0x106>
    13de:	3f ef       	ldi	r19, 0xFF	; 255
    13e0:	4f e7       	ldi	r20, 0x7F	; 127
    13e2:	87 e0       	ldi	r24, 0x07	; 7
    13e4:	31 50       	subi	r19, 0x01	; 1
    13e6:	40 40       	sbci	r20, 0x00	; 0
    13e8:	80 40       	sbci	r24, 0x00	; 0
    13ea:	e1 f7       	brne	.-8      	; 0x13e4 <keyboard_run+0xfa>
    13ec:	00 c0       	rjmp	.+0      	; 0x13ee <keyboard_run+0x104>
    13ee:	00 00       	nop

	//detect changes
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	0e 94 b0 05 	call	0xb60	; 0xb60 <JOY_button_pressed>
    13f6:	89 2b       	or	r24, r25
    13f8:	09 f4       	brne	.+2      	; 0x13fc <keyboard_run+0x112>
    13fa:	a1 cf       	rjmp	.-190    	; 0x133e <keyboard_run+0x54>
		if(button_pressed){
			button_pressed = 0;
			_delay_ms(500);
		}
	}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	1f 91       	pop	r17
    1402:	0f 91       	pop	r16
    1404:	ff 90       	pop	r15
    1406:	ef 90       	pop	r14
    1408:	df 90       	pop	r13
    140a:	cf 90       	pop	r12
    140c:	bf 90       	pop	r11
    140e:	af 90       	pop	r10
    1410:	9f 90       	pop	r9
    1412:	8f 90       	pop	r8
    1414:	7f 90       	pop	r7
    1416:	6f 90       	pop	r6
    1418:	08 95       	ret

0000141a <MCP2515_read>:
	}
	
	return 0;
}

char MCP2515_read(char address) {
    141a:	cf 93       	push	r28
    141c:	c8 2f       	mov	r28, r24
	SPI_select();
    141e:	0e 94 57 0e 	call	0x1cae	; 0x1cae <SPI_select>
	SPI_send(READ);
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <SPI_send>
	SPI_send(address);
    1428:	8c 2f       	mov	r24, r28
    142a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <SPI_send>
	char data = SPI_read();
    142e:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <SPI_read>
    1432:	c8 2f       	mov	r28, r24
	SPI_deselect();
    1434:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <SPI_deselect>
	return data;
	
	
}
    1438:	8c 2f       	mov	r24, r28
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <MCP2515_write>:

void MCP2515_write(char address, char data) {
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	d8 2f       	mov	r29, r24
    1444:	c6 2f       	mov	r28, r22
	SPI_select();
    1446:	0e 94 57 0e 	call	0x1cae	; 0x1cae <SPI_select>
	SPI_send(WRITE);
    144a:	82 e0       	ldi	r24, 0x02	; 2
    144c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <SPI_send>
	SPI_send(address);
    1450:	8d 2f       	mov	r24, r29
    1452:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <SPI_send>
	SPI_send(data);
    1456:	8c 2f       	mov	r24, r28
    1458:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <SPI_send>
	SPI_deselect();
    145c:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <SPI_deselect>
}
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

00001466 <MCP2515_request_to_send>:

//Buffer states: three bit, setting a 1 on the buffer initiates transmitting from it 
void MCP2515_request_to_send(uint8_t buffer_states) {
    1466:	cf 93       	push	r28
    1468:	c8 2f       	mov	r28, r24
	SPI_select();
    146a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <SPI_select>
	SPI_send(RTS_BASE+buffer_states);
    146e:	80 e8       	ldi	r24, 0x80	; 128
    1470:	8c 0f       	add	r24, r28
    1472:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <SPI_send>
	SPI_deselect();
    1476:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <SPI_deselect>
}
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <MCP2515_bit_modify>:

//puts new_data in the selected reg_adress. the function assumes that you are allowed to change every bit in the register
void MCP2515_bit_modify(char reg_address, char masked_bits, char new_data) {
    147e:	1f 93       	push	r17
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	18 2f       	mov	r17, r24
    1486:	d6 2f       	mov	r29, r22
    1488:	c4 2f       	mov	r28, r20
	SPI_select();
    148a:	0e 94 57 0e 	call	0x1cae	; 0x1cae <SPI_select>
	SPI_send(BIT_MODIFY);
    148e:	85 e0       	ldi	r24, 0x05	; 5
    1490:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <SPI_send>
	SPI_send(reg_address);
    1494:	81 2f       	mov	r24, r17
    1496:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <SPI_send>
	SPI_send(masked_bits);
    149a:	8d 2f       	mov	r24, r29
    149c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <SPI_send>
	SPI_send(new_data);
    14a0:	8c 2f       	mov	r24, r28
    14a2:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <SPI_send>
	SPI_deselect();
    14a6:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <SPI_deselect>
}
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	08 95       	ret

000014b2 <MCP2515_reset>:

void MCP2515_reset() {
	SPI_select();
    14b2:	0e 94 57 0e 	call	0x1cae	; 0x1cae <SPI_select>
	SPI_send(RESET);
    14b6:	80 ec       	ldi	r24, 0xC0	; 192
    14b8:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <SPI_send>
	SPI_deselect();
    14bc:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <SPI_deselect>
    14c0:	08 95       	ret

000014c2 <MCP2515_init>:
#define BIT_MODIFY 0x05
#define RTS_BASE 0x80


uint8_t MCP2515_init() {
	SPI_init();
    14c2:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <SPI_init>
	MCP2515_reset();
    14c6:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <MCP2515_reset>
	//check bit 7-5 of MCP_CANSTAT which signify the operation mode
	const uint8_t device_mode = MCP2515_read(MCP_CANSTAT) & MODE_MASK;
    14ca:	8e e0       	ldi	r24, 0x0E	; 14
    14cc:	0e 94 0d 0a 	call	0x141a	; 0x141a <MCP2515_read>
    14d0:	80 7e       	andi	r24, 0xE0	; 224
	if (device_mode != MODE_CONFIG) {
    14d2:	80 38       	cpi	r24, 0x80	; 128
    14d4:	31 f0       	breq	.+12     	; 0x14e2 <MCP2515_init+0x20>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
    14d6:	8d ef       	ldi	r24, 0xFD	; 253
    14d8:	92 e0       	ldi	r25, 0x02	; 2
    14da:	0e 94 98 10 	call	0x2130	; 0x2130 <puts>
		return 1;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	08 95       	ret
	}
	
	return 0;
    14e2:	80 e0       	ldi	r24, 0x00	; 0
}
    14e4:	08 95       	ret

000014e6 <MENU_draw_current_menu>:
	current_entry = current_entry->parent_node;
	selected_entry = current_entry->child_node;
	MENU_draw_current_menu();
}

void MENU_draw_current_menu() {
    14e6:	df 92       	push	r13
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
	OLED_reset();
    14f4:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <OLED_reset>
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
    14f8:	e0 91 24 04 	lds	r30, 0x0424
    14fc:	f0 91 25 04 	lds	r31, 0x0425
    1500:	c4 81       	ldd	r28, Z+4	; 0x04
    1502:	d5 81       	ldd	r29, Z+5	; 0x05
	
	while( temp_node != NULL){
    1504:	20 97       	sbiw	r28, 0x00	; 0
    1506:	61 f1       	breq	.+88     	; 0x1560 <MENU_draw_current_menu+0x7a>
    1508:	d1 2c       	mov	r13, r1
		OLED_pos(output_row++, 0);
		if (temp_node == selected_entry) {
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
    150a:	0f 2e       	mov	r0, r31
    150c:	f3 e2       	ldi	r31, 0x23	; 35
    150e:	ef 2e       	mov	r14, r31
    1510:	f2 e0       	ldi	r31, 0x02	; 2
    1512:	ff 2e       	mov	r15, r31
    1514:	f0 2d       	mov	r31, r0
    1516:	00 e4       	ldi	r16, 0x40	; 64
    1518:	11 e0       	ldi	r17, 0x01	; 1
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
		OLED_pos(output_row++, 0);
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	8d 2d       	mov	r24, r13
    151e:	0e 94 29 0c 	call	0x1852	; 0x1852 <OLED_pos>
		if (temp_node == selected_entry) {
    1522:	20 91 22 04 	lds	r18, 0x0422
    1526:	30 91 23 04 	lds	r19, 0x0423
    152a:	c2 17       	cp	r28, r18
    152c:	d3 07       	cpc	r29, r19
    152e:	11 f4       	brne	.+4      	; 0x1534 <MENU_draw_current_menu+0x4e>
			OLED_print_arrow();
    1530:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <OLED_print_arrow>
		}
		fprintf(OLED, " %s", temp_node->name);
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	8f 93       	push	r24
    1538:	88 81       	ld	r24, Y
    153a:	8f 93       	push	r24
    153c:	ff 92       	push	r15
    153e:	ef 92       	push	r14
    1540:	1f 93       	push	r17
    1542:	0f 93       	push	r16
    1544:	0e 94 17 10 	call	0x202e	; 0x202e <fprintf>
		temp_node = temp_node -> next_sibling_node;
    1548:	0e 80       	ldd	r0, Y+6	; 0x06
    154a:	df 81       	ldd	r29, Y+7	; 0x07
    154c:	c0 2d       	mov	r28, r0
    154e:	d3 94       	inc	r13
	OLED_reset();
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	20 97       	sbiw	r28, 0x00	; 0
    155e:	e9 f6       	brne	.-70     	; 0x151a <MENU_draw_current_menu+0x34>
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	df 90       	pop	r13
    156e:	08 95       	ret

00001570 <MENU_select_next>:
	MENU_draw_current_menu();
}


void MENU_select_next() {
	if (selected_entry -> next_sibling_node != NULL) {
    1570:	e0 91 22 04 	lds	r30, 0x0422
    1574:	f0 91 23 04 	lds	r31, 0x0423
    1578:	86 81       	ldd	r24, Z+6	; 0x06
    157a:	97 81       	ldd	r25, Z+7	; 0x07
    157c:	89 2b       	or	r24, r25
    157e:	41 f0       	breq	.+16     	; 0x1590 <MENU_select_next+0x20>
		selected_entry = selected_entry -> next_sibling_node;
    1580:	86 81       	ldd	r24, Z+6	; 0x06
    1582:	97 81       	ldd	r25, Z+7	; 0x07
    1584:	90 93 23 04 	sts	0x0423, r25
    1588:	80 93 22 04 	sts	0x0422, r24
		MENU_draw_current_menu();
    158c:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <MENU_draw_current_menu>
    1590:	08 95       	ret

00001592 <MENU_select_prev>:
	}
}

void MENU_select_prev() {
	if (selected_entry -> prev_sibling_node != NULL) {
    1592:	e0 91 22 04 	lds	r30, 0x0422
    1596:	f0 91 23 04 	lds	r31, 0x0423
    159a:	80 85       	ldd	r24, Z+8	; 0x08
    159c:	91 85       	ldd	r25, Z+9	; 0x09
    159e:	89 2b       	or	r24, r25
    15a0:	41 f0       	breq	.+16     	; 0x15b2 <MENU_select_prev+0x20>
		selected_entry = selected_entry -> prev_sibling_node;
    15a2:	80 85       	ldd	r24, Z+8	; 0x08
    15a4:	91 85       	ldd	r25, Z+9	; 0x09
    15a6:	90 93 23 04 	sts	0x0423, r25
    15aa:	80 93 22 04 	sts	0x0422, r24
		MENU_draw_current_menu();
    15ae:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <MENU_draw_current_menu>
    15b2:	08 95       	ret

000015b4 <MENU_enter_selection>:
	}
}

void MENU_enter_selection() {
	if (selected_entry->function_ptr != NULL) {
    15b4:	e0 91 22 04 	lds	r30, 0x0422
    15b8:	f0 91 23 04 	lds	r31, 0x0423
    15bc:	82 85       	ldd	r24, Z+10	; 0x0a
    15be:	93 85       	ldd	r25, Z+11	; 0x0b
    15c0:	89 2b       	or	r24, r25
    15c2:	31 f0       	breq	.+12     	; 0x15d0 <MENU_enter_selection+0x1c>
		selected_entry->function_ptr();
    15c4:	02 84       	ldd	r0, Z+10	; 0x0a
    15c6:	f3 85       	ldd	r31, Z+11	; 0x0b
    15c8:	e0 2d       	mov	r30, r0
    15ca:	09 95       	icall
		MENU_draw_current_menu();
    15cc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <MENU_draw_current_menu>
	}
	
	if (selected_entry->child_node == NULL) return;
    15d0:	e0 91 22 04 	lds	r30, 0x0422
    15d4:	f0 91 23 04 	lds	r31, 0x0423
    15d8:	84 81       	ldd	r24, Z+4	; 0x04
    15da:	95 81       	ldd	r25, Z+5	; 0x05
    15dc:	89 2b       	or	r24, r25
    15de:	61 f0       	breq	.+24     	; 0x15f8 <MENU_enter_selection+0x44>
	
	current_entry = selected_entry;
    15e0:	f0 93 25 04 	sts	0x0425, r31
    15e4:	e0 93 24 04 	sts	0x0424, r30
	selected_entry = current_entry->child_node;
    15e8:	84 81       	ldd	r24, Z+4	; 0x04
    15ea:	95 81       	ldd	r25, Z+5	; 0x05
    15ec:	90 93 23 04 	sts	0x0423, r25
    15f0:	80 93 22 04 	sts	0x0422, r24
	MENU_draw_current_menu();
    15f4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <MENU_draw_current_menu>
    15f8:	08 95       	ret

000015fa <MENU_go_back>:
}

void MENU_go_back() {
	if (current_entry->parent_node == NULL) return;
    15fa:	e0 91 24 04 	lds	r30, 0x0424
    15fe:	f0 91 25 04 	lds	r31, 0x0425
    1602:	82 81       	ldd	r24, Z+2	; 0x02
    1604:	93 81       	ldd	r25, Z+3	; 0x03
    1606:	89 2b       	or	r24, r25
    1608:	79 f0       	breq	.+30     	; 0x1628 <MENU_go_back+0x2e>
	
	current_entry = current_entry->parent_node;
    160a:	02 80       	ldd	r0, Z+2	; 0x02
    160c:	f3 81       	ldd	r31, Z+3	; 0x03
    160e:	e0 2d       	mov	r30, r0
    1610:	f0 93 25 04 	sts	0x0425, r31
    1614:	e0 93 24 04 	sts	0x0424, r30
	selected_entry = current_entry->child_node;
    1618:	84 81       	ldd	r24, Z+4	; 0x04
    161a:	95 81       	ldd	r25, Z+5	; 0x05
    161c:	90 93 23 04 	sts	0x0423, r25
    1620:	80 93 22 04 	sts	0x0422, r24
	MENU_draw_current_menu();
    1624:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <MENU_draw_current_menu>
    1628:	08 95       	ret

0000162a <MENU_run>:
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}

void MENU_run() {
    162a:	cf 93       	push	r28
	bool change = false;
	if (JOY_getDirection() == DOWN) {
    162c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <JOY_getDirection>
    1630:	83 30       	cpi	r24, 0x03	; 3
    1632:	21 f4       	brne	.+8      	; 0x163c <MENU_run+0x12>
		MENU_select_next();
    1634:	0e 94 b8 0a 	call	0x1570	; 0x1570 <MENU_select_next>
		change = true;
    1638:	c1 e0       	ldi	r28, 0x01	; 1
    163a:	09 c0       	rjmp	.+18     	; 0x164e <MENU_run+0x24>
	} 
	else if (JOY_getDirection() == UP) {
    163c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <JOY_getDirection>
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	21 f4       	brne	.+8      	; 0x164c <MENU_run+0x22>
		MENU_select_prev();
    1644:	0e 94 c9 0a 	call	0x1592	; 0x1592 <MENU_select_prev>
		change = true;
    1648:	c1 e0       	ldi	r28, 0x01	; 1
    164a:	01 c0       	rjmp	.+2      	; 0x164e <MENU_run+0x24>
		temp_node = temp_node -> next_sibling_node;
	}
}

void MENU_run() {
	bool change = false;
    164c:	c0 e0       	ldi	r28, 0x00	; 0
	else if (JOY_getDirection() == UP) {
		MENU_select_prev();
		change = true;
	}
	
	if (JOY_button_pressed(JOY_BUTTON)) {
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	0e 94 b0 05 	call	0xb60	; 0xb60 <JOY_button_pressed>
    1654:	89 2b       	or	r24, r25
    1656:	19 f0       	breq	.+6      	; 0x165e <MENU_run+0x34>
		MENU_enter_selection();
    1658:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <MENU_enter_selection>
    165c:	0a c0       	rjmp	.+20     	; 0x1672 <MENU_run+0x48>
		change = true;
	}
	else if (JOY_button_pressed(LEFT_BUTTON)) {
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	0e 94 b0 05 	call	0xb60	; 0xb60 <JOY_button_pressed>
    1664:	89 2b       	or	r24, r25
    1666:	19 f0       	breq	.+6      	; 0x166e <MENU_run+0x44>
		MENU_go_back();
    1668:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <MENU_go_back>
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <MENU_run+0x48>
		change = true;
	}
	
	// Make sure the selection doesn't move multiple places at once.
	if (change){
    166e:	cc 23       	and	r28, r28
    1670:	49 f0       	breq	.+18     	; 0x1684 <MENU_run+0x5a>
    1672:	22 e3       	ldi	r18, 0x32	; 50
    1674:	83 ed       	ldi	r24, 0xD3	; 211
    1676:	93 e0       	ldi	r25, 0x03	; 3
    1678:	21 50       	subi	r18, 0x01	; 1
    167a:	80 40       	sbci	r24, 0x00	; 0
    167c:	90 40       	sbci	r25, 0x00	; 0
    167e:	e1 f7       	brne	.-8      	; 0x1678 <MENU_run+0x4e>
    1680:	00 c0       	rjmp	.+0      	; 0x1682 <MENU_run+0x58>
    1682:	00 c0       	rjmp	.+0      	; 0x1684 <MENU_run+0x5a>
		_delay_ms(255);
		change = false;
	}
}
    1684:	cf 91       	pop	r28
    1686:	08 95       	ret

00001688 <add_entry>:


menu_entry* add_entry(menu_entry* parent_node, char* name, void* function_ptr){
    1688:	ef 92       	push	r14
    168a:	ff 92       	push	r15
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	ec 01       	movw	r28, r24
    1696:	7b 01       	movw	r14, r22
    1698:	8a 01       	movw	r16, r20
	
	// Create the new node
	menu_entry* new_entry = (menu_entry*) malloc(sizeof(menu_entry));
    169a:	8c e0       	ldi	r24, 0x0C	; 12
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <malloc>
    16a2:	dc 01       	movw	r26, r24
	new_entry->name = name;
    16a4:	11 96       	adiw	r26, 0x01	; 1
    16a6:	fc 92       	st	X, r15
    16a8:	ee 92       	st	-X, r14
	new_entry->parent_node = parent_node;
    16aa:	13 96       	adiw	r26, 0x03	; 3
    16ac:	dc 93       	st	X, r29
    16ae:	ce 93       	st	-X, r28
    16b0:	12 97       	sbiw	r26, 0x02	; 2
	new_entry->child_node = NULL;  // A new node has no children
    16b2:	15 96       	adiw	r26, 0x05	; 5
    16b4:	1c 92       	st	X, r1
    16b6:	1e 92       	st	-X, r1
    16b8:	14 97       	sbiw	r26, 0x04	; 4
	new_entry->next_sibling_node = NULL;  // The new child is the last child
    16ba:	17 96       	adiw	r26, 0x07	; 7
    16bc:	1c 92       	st	X, r1
    16be:	1e 92       	st	-X, r1
    16c0:	16 97       	sbiw	r26, 0x06	; 6
	new_entry->prev_sibling_node = NULL;
    16c2:	19 96       	adiw	r26, 0x09	; 9
    16c4:	1c 92       	st	X, r1
    16c6:	1e 92       	st	-X, r1
    16c8:	18 97       	sbiw	r26, 0x08	; 8
	new_entry->function_ptr = function_ptr;
    16ca:	1b 96       	adiw	r26, 0x0b	; 11
    16cc:	1c 93       	st	X, r17
    16ce:	0e 93       	st	-X, r16
    16d0:	1a 97       	sbiw	r26, 0x0a	; 10
	
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_entry;
    16d2:	20 97       	sbiw	r28, 0x00	; 0
    16d4:	a1 f0       	breq	.+40     	; 0x16fe <add_entry+0x76>
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
    16d6:	ec 81       	ldd	r30, Y+4	; 0x04
    16d8:	fd 81       	ldd	r31, Y+5	; 0x05
    16da:	30 97       	sbiw	r30, 0x00	; 0
    16dc:	19 f4       	brne	.+6      	; 0x16e4 <add_entry+0x5c>
		parent_node->child_node = new_entry;
    16de:	9d 83       	std	Y+5, r25	; 0x05
    16e0:	8c 83       	std	Y+4, r24	; 0x04
    16e2:	0d c0       	rjmp	.+26     	; 0x16fe <add_entry+0x76>
	else {
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
    16e4:	26 81       	ldd	r18, Z+6	; 0x06
    16e6:	37 81       	ldd	r19, Z+7	; 0x07
    16e8:	21 15       	cp	r18, r1
    16ea:	31 05       	cpc	r19, r1
    16ec:	11 f0       	breq	.+4      	; 0x16f2 <add_entry+0x6a>
			//printf("temp_node->next_sibling_node->name: %s\n", temp_node->next_sibling_node->name);
			temp_node = temp_node->next_sibling_node;
    16ee:	f9 01       	movw	r30, r18
    16f0:	f9 cf       	rjmp	.-14     	; 0x16e4 <add_entry+0x5c>
		}
		
		// Bind the new node to the current last child to become the new last child.
		temp_node->next_sibling_node = new_entry;
    16f2:	b7 83       	std	Z+7, r27	; 0x07
    16f4:	a6 83       	std	Z+6, r26	; 0x06
		new_entry->prev_sibling_node = temp_node;
    16f6:	19 96       	adiw	r26, 0x09	; 9
    16f8:	fc 93       	st	X, r31
    16fa:	ee 93       	st	-X, r30
    16fc:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	// Parent/child/sibling bindings complete. Return the new node.
	return new_entry;
}
    16fe:	cd 01       	movw	r24, r26
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	08 95       	ret

0000170e <MENU_init>:

void test_function() {
	printf("\n\nHighscore clicked!\n\n");
}

void MENU_init() {
    170e:	cf 92       	push	r12
    1710:	df 92       	push	r13
    1712:	ef 92       	push	r14
    1714:	ff 92       	push	r15
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
	menu_entry* main_menu = add_entry(NULL, "Main menu", NULL);
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	65 e4       	ldi	r22, 0x45	; 69
    1724:	73 e0       	ldi	r23, 0x03	; 3
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0e 94 44 0b 	call	0x1688	; 0x1688 <add_entry>
    172e:	ec 01       	movw	r28, r24
	
	// Main menu
	menu_entry* play = add_entry(main_menu, "Play game", game_play);
    1730:	43 e3       	ldi	r20, 0x33	; 51
    1732:	54 e0       	ldi	r21, 0x04	; 4
    1734:	6f e4       	ldi	r22, 0x4F	; 79
    1736:	73 e0       	ldi	r23, 0x03	; 3
    1738:	0e 94 44 0b 	call	0x1688	; 0x1688 <add_entry>
    173c:	7c 01       	movw	r14, r24
	add_entry(main_menu, "Highscore", print_highscore);
    173e:	4f e6       	ldi	r20, 0x6F	; 111
    1740:	54 e0       	ldi	r21, 0x04	; 4
    1742:	69 e5       	ldi	r22, 0x59	; 89
    1744:	73 e0       	ldi	r23, 0x03	; 3
    1746:	ce 01       	movw	r24, r28
    1748:	0e 94 44 0b 	call	0x1688	; 0x1688 <add_entry>
	menu_entry* settings = add_entry(main_menu, "Settings", NULL);
    174c:	40 e0       	ldi	r20, 0x00	; 0
    174e:	50 e0       	ldi	r21, 0x00	; 0
    1750:	63 e6       	ldi	r22, 0x63	; 99
    1752:	73 e0       	ldi	r23, 0x03	; 3
    1754:	ce 01       	movw	r24, r28
    1756:	0e 94 44 0b 	call	0x1688	; 0x1688 <add_entry>
    175a:	6c 01       	movw	r12, r24
	menu_entry* extras = add_entry(main_menu, "Extra features", NULL);
    175c:	40 e0       	ldi	r20, 0x00	; 0
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	6a ec       	ldi	r22, 0xCA	; 202
    1762:	73 e0       	ldi	r23, 0x03	; 3
    1764:	ce 01       	movw	r24, r28
    1766:	0e 94 44 0b 	call	0x1688	; 0x1688 <add_entry>
    176a:	8c 01       	movw	r16, r24
	
	
	// Sub-menu settings
	menu_entry* brightness = add_entry(settings, "Brightness", brightness_run);
    176c:	4a e5       	ldi	r20, 0x5A	; 90
    176e:	52 e0       	ldi	r21, 0x02	; 2
    1770:	6c e6       	ldi	r22, 0x6C	; 108
    1772:	73 e0       	ldi	r23, 0x03	; 3
    1774:	c6 01       	movw	r24, r12
    1776:	0e 94 44 0b 	call	0x1688	; 0x1688 <add_entry>
	//menu_entry* font = add_entry(settings, "Set font", NULL);
	
	// Sub-menu extras
	menu_entry* keyboard = add_entry(extras, "Keyboard", keyboard_run);
    177a:	45 e7       	ldi	r20, 0x75	; 117
    177c:	59 e0       	ldi	r21, 0x09	; 9
    177e:	67 e7       	ldi	r22, 0x77	; 119
    1780:	73 e0       	ldi	r23, 0x03	; 3
    1782:	c8 01       	movw	r24, r16
    1784:	0e 94 44 0b 	call	0x1688	; 0x1688 <add_entry>
	//menu_entry* mandelbrot = add_entry(extras, "Mandelbrot", NULL);
	menu_entry* pong = add_entry(extras, "Play pong", NULL);
    1788:	40 e0       	ldi	r20, 0x00	; 0
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	60 e8       	ldi	r22, 0x80	; 128
    178e:	73 e0       	ldi	r23, 0x03	; 3
    1790:	c8 01       	movw	r24, r16
    1792:	0e 94 44 0b 	call	0x1688	; 0x1688 <add_entry>
	//menu_entry* rcube = add_entry(extras, "rotating cube", NULL);
	
	current_entry = main_menu;
    1796:	d0 93 25 04 	sts	0x0425, r29
    179a:	c0 93 24 04 	sts	0x0424, r28
	selected_entry = play;
    179e:	f0 92 23 04 	sts	0x0423, r15
    17a2:	e0 92 22 04 	sts	0x0422, r14
	MENU_draw_current_menu();
    17a6:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <MENU_draw_current_menu>
}
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	df 90       	pop	r13
    17b8:	cf 90       	pop	r12
    17ba:	08 95       	ret

000017bc <initialize>:
#include <stdbool.h>

void send_control_input(void);

void initialize(void){
	cli();
    17bc:	f8 94       	cli
	usart_init(MYUBRR);
    17be:	8f e1       	ldi	r24, 0x1F	; 31
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <usart_init>
	SRAM_init();
    17c6:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <SRAM_init>
	ADC_init();
    17ca:	0e 94 03 02 	call	0x406	; 0x406 <ADC_init>
	JOY_init(CALIBRATION_DEFAULT);
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	0e 94 a8 05 	call	0xb50	; 0xb50 <JOY_init>
	OLED_init();
    17d6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <OLED_init>
	MENU_init();
    17da:	0e 94 87 0b 	call	0x170e	; 0x170e <MENU_init>
	CAN_init();
    17de:	0e 94 ad 02 	call	0x55a	; 0x55a <CAN_init>
	sei();
    17e2:	78 94       	sei
    17e4:	08 95       	ret

000017e6 <main>:
}



int main(void) {
	initialize();
    17e6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <initialize>
	printf("Initialization of Node 1 complete!\n\n");
    17ea:	8a e8       	ldi	r24, 0x8A	; 138
    17ec:	93 e0       	ldi	r25, 0x03	; 3
    17ee:	0e 94 98 10 	call	0x2130	; 0x2130 <puts>
	while(1) {
		MENU_run();
    17f2:	0e 94 15 0b 	call	0x162a	; 0x162a <MENU_run>
    17f6:	fd cf       	rjmp	.-6      	; 0x17f2 <main+0xc>

000017f8 <write_data>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    17f8:	e0 91 50 01 	lds	r30, 0x0150
    17fc:	f0 91 51 01 	lds	r31, 0x0151
    1800:	80 83       	st	Z, r24
    1802:	08 95       	ret

00001804 <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7) 
    1804:	88 30       	cpi	r24, 0x08	; 8
    1806:	60 f4       	brcc	.+24     	; 0x1820 <OLED_goto_line+0x1c>
		return;
	
	write_cmd(0xB0 + line);
    1808:	90 eb       	ldi	r25, 0xB0	; 176
    180a:	98 0f       	add	r25, r24

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    180c:	e0 91 4e 01 	lds	r30, 0x014E
    1810:	f0 91 4f 01 	lds	r31, 0x014F
    1814:	90 83       	st	Z, r25
void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7) 
		return;
	
	write_cmd(0xB0 + line);
	current_line = line;
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	90 93 f1 03 	sts	0x03F1, r25
    181c:	80 93 f0 03 	sts	0x03F0, r24
    1820:	08 95       	ret

00001822 <OLED_goto_column>:
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127) 
    1822:	88 23       	and	r24, r24
    1824:	ac f0       	brlt	.+42     	; 0x1850 <OLED_goto_column+0x2e>
		return;
	
	write_cmd(0x00 + column%16); // Lower column register
    1826:	98 2f       	mov	r25, r24
    1828:	9f 70       	andi	r25, 0x0F	; 15

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    182a:	e0 91 4e 01 	lds	r30, 0x014E
    182e:	f0 91 4f 01 	lds	r31, 0x014F
    1832:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127) 
		return;
	
	write_cmd(0x00 + column%16); // Lower column register
	write_cmd(0x10 + column/16); // Higher column register
    1834:	98 2f       	mov	r25, r24
    1836:	92 95       	swap	r25
    1838:	9f 70       	andi	r25, 0x0F	; 15
    183a:	90 5f       	subi	r25, 0xF0	; 240

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    183c:	e0 91 4e 01 	lds	r30, 0x014E
    1840:	f0 91 4f 01 	lds	r31, 0x014F
    1844:	90 83       	st	Z, r25
	if (column < 0 || column > 127) 
		return;
	
	write_cmd(0x00 + column%16); // Lower column register
	write_cmd(0x10 + column/16); // Higher column register
	current_column = column;
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	90 93 ef 03 	sts	0x03EF, r25
    184c:	80 93 ee 03 	sts	0x03EE, r24
    1850:	08 95       	ret

00001852 <OLED_pos>:
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
		write_data(0x00);
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
    1852:	cf 93       	push	r28
    1854:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
    1856:	88 30       	cpi	r24, 0x08	; 8
    1858:	10 f4       	brcc	.+4      	; 0x185e <OLED_pos+0xc>
    185a:	66 23       	and	r22, r22
    185c:	2c f4       	brge	.+10     	; 0x1868 <OLED_pos+0x16>
		printf("Out of range in OLED_pos()\n");
    185e:	8e ea       	ldi	r24, 0xAE	; 174
    1860:	93 e0       	ldi	r25, 0x03	; 3
    1862:	0e 94 98 10 	call	0x2130	; 0x2130 <puts>
		return; 
    1866:	05 c0       	rjmp	.+10     	; 0x1872 <OLED_pos+0x20>
	}
	
	OLED_goto_line(line);
    1868:	0e 94 02 0c 	call	0x1804	; 0x1804 <OLED_goto_line>
	OLED_goto_column(column);
    186c:	8c 2f       	mov	r24, r28
    186e:	0e 94 11 0c 	call	0x1822	; 0x1822 <OLED_goto_column>
}
    1872:	cf 91       	pop	r28
    1874:	08 95       	ret

00001876 <OLED_reset_cursor>:
	OLED_clear_screen();
	OLED_reset_cursor();
}

void OLED_reset_cursor(){
	OLED_pos(0,0);
    1876:	60 e0       	ldi	r22, 0x00	; 0
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	0e 94 29 0c 	call	0x1852	; 0x1852 <OLED_pos>
    187e:	08 95       	ret

00001880 <OLED_clear_line>:
		OLED_clear_line(page);
	}
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line, 0);
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	0e 94 29 0c 	call	0x1852	; 0x1852 <OLED_pos>
    1886:	80 e8       	ldi	r24, 0x80	; 128
    1888:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    188a:	e0 91 50 01 	lds	r30, 0x0150
    188e:	f0 91 51 01 	lds	r31, 0x0151
    1892:	10 82       	st	Z, r1
    1894:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line, 0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	c1 f7       	brne	.-16     	; 0x188a <OLED_clear_line+0xa>
		write_data(0x00);
	}
}
    189a:	08 95       	ret

0000189c <OLED_clear_screen>:

void OLED_reset_cursor(){
	OLED_pos(0,0);
}

void OLED_clear_screen() {
    189c:	cf 93       	push	r28
    189e:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
    18a0:	8c 2f       	mov	r24, r28
    18a2:	0e 94 40 0c 	call	0x1880	; 0x1880 <OLED_clear_line>
    18a6:	cf 5f       	subi	r28, 0xFF	; 255
void OLED_reset_cursor(){
	OLED_pos(0,0);
}

void OLED_clear_screen() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
    18a8:	c8 30       	cpi	r28, 0x08	; 8
    18aa:	d1 f7       	brne	.-12     	; 0x18a0 <OLED_clear_screen+0x4>
		OLED_clear_line(page);
	}
}
    18ac:	cf 91       	pop	r28
    18ae:	08 95       	ret

000018b0 <OLED_reset>:
	}
	OLED_reset();
}

void OLED_reset() {
	OLED_clear_screen();
    18b0:	0e 94 4e 0c 	call	0x189c	; 0x189c <OLED_clear_screen>
	OLED_reset_cursor();
    18b4:	0e 94 3b 0c 	call	0x1876	; 0x1876 <OLED_reset_cursor>
    18b8:	08 95       	ret

000018ba <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	67 97       	sbiw	r28, 0x17	; 23
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
	const char commands[] = {
    18ce:	87 e1       	ldi	r24, 0x17	; 23
    18d0:	e2 e5       	ldi	r30, 0x52	; 82
    18d2:	f1 e0       	ldi	r31, 0x01	; 1
    18d4:	de 01       	movw	r26, r28
    18d6:	11 96       	adiw	r26, 0x01	; 1
    18d8:	01 90       	ld	r0, Z+
    18da:	0d 92       	st	X+, r0
    18dc:	8a 95       	dec	r24
    18de:	e1 f7       	brne	.-8      	; 0x18d8 <OLED_init+0x1e>
    18e0:	fe 01       	movw	r30, r28
    18e2:	31 96       	adiw	r30, 0x01	; 1
    18e4:	ce 01       	movw	r24, r28
    18e6:	48 96       	adiw	r24, 0x18	; 24
		0xAF  // Display on
	};
	
	const int command_count = sizeof(commands)/sizeof(commands[0]);
	for (int i = 0; i < command_count; i++) {
		write_cmd(commands[i]);
    18e8:	21 91       	ld	r18, Z+

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    18ea:	a0 91 4e 01 	lds	r26, 0x014E
    18ee:	b0 91 4f 01 	lds	r27, 0x014F
    18f2:	2c 93       	st	X, r18
		0xA6, // Set normal display
		0xAF  // Display on
	};
	
	const int command_count = sizeof(commands)/sizeof(commands[0]);
	for (int i = 0; i < command_count; i++) {
    18f4:	e8 17       	cp	r30, r24
    18f6:	f9 07       	cpc	r31, r25
    18f8:	b9 f7       	brne	.-18     	; 0x18e8 <OLED_init+0x2e>
		write_cmd(commands[i]);
	}
	OLED_reset();
    18fa:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <OLED_reset>
}
    18fe:	67 96       	adiw	r28, 0x17	; 23
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	f8 94       	cli
    1904:	de bf       	out	0x3e, r29	; 62
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	cd bf       	out	0x3d, r28	; 61
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	08 95       	ret

00001910 <OLED_print_char>:

void OLED_print_char(char character){
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = character - ascii_starting_point;
	
	switch (character) {
    1910:	8a 30       	cpi	r24, 0x0A	; 10
    1912:	29 f0       	breq	.+10     	; 0x191e <OLED_print_char+0xe>
    1914:	8d 30       	cpi	r24, 0x0D	; 13
    1916:	61 f0       	breq	.+24     	; 0x1930 <OLED_print_char+0x20>
    1918:	81 11       	cpse	r24, r1
    191a:	12 c0       	rjmp	.+36     	; 0x1940 <OLED_print_char+0x30>
    191c:	08 95       	ret
		case '\0'  :
		break;
		
		case '\n'  :  
		// Reset cursor and move it to the next line
		OLED_pos(current_line + 1, 0);  
    191e:	80 91 f0 03 	lds	r24, 0x03F0
    1922:	90 91 f1 03 	lds	r25, 0x03F1
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	8f 5f       	subi	r24, 0xFF	; 255
    192a:	0e 94 29 0c 	call	0x1852	; 0x1852 <OLED_pos>
		break;
    192e:	08 95       	ret
		
		case '\r'  :  
		// Reset cursor to start of current line
		OLED_pos(current_line, 0);  
    1930:	80 91 f0 03 	lds	r24, 0x03F0
    1934:	90 91 f1 03 	lds	r25, 0x03F1
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	0e 94 29 0c 	call	0x1852	; 0x1852 <OLED_pos>
		break;
    193e:	08 95       	ret
    1940:	e8 2f       	mov	r30, r24
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	ee 0f       	add	r30, r30
    1946:	ff 1f       	adc	r31, r31
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	ee 0f       	add	r30, r30
    194e:	ff 1f       	adc	r31, r31
    1950:	e0 53       	subi	r30, 0x30	; 48
    1952:	f0 40       	sbci	r31, 0x00	; 0

void OLED_print_char(char character){
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = character - ascii_starting_point;
	
	switch (character) {
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
		break;
		
		default :
		// Print character using the included fonts
		for (int col = 0; col < FONT_SIZE; col++){
			write_data(pgm_read_byte(&font8[letter_index][col]));
    1958:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    195a:	a0 91 50 01 	lds	r26, 0x0150
    195e:	b0 91 51 01 	lds	r27, 0x0151
    1962:	2c 93       	st	X, r18
		OLED_pos(current_line, 0);  
		break;
		
		default :
		// Print character using the included fonts
		for (int col = 0; col < FONT_SIZE; col++){
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	31 96       	adiw	r30, 0x01	; 1
    1968:	88 30       	cpi	r24, 0x08	; 8
    196a:	91 05       	cpc	r25, r1
    196c:	a9 f7       	brne	.-22     	; 0x1958 <OLED_print_char+0x48>
    196e:	08 95       	ret

00001970 <OLED_set_brightness>:

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    1970:	e0 91 4e 01 	lds	r30, 0x014E
    1974:	f0 91 4f 01 	lds	r31, 0x014F
    1978:	91 e8       	ldi	r25, 0x81	; 129
    197a:	90 83       	st	Z, r25
    197c:	e0 91 4e 01 	lds	r30, 0x014E
    1980:	f0 91 4f 01 	lds	r31, 0x014F
    1984:	80 83       	st	Z, r24
    1986:	08 95       	ret

00001988 <OLED_print_char_inverse>:
		}
	}
}

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
    1988:	88 23       	and	r24, r24
    198a:	c1 f0       	breq	.+48     	; 0x19bc <OLED_print_char_inverse+0x34>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
    198c:	e8 2f       	mov	r30, r24
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	ee 0f       	add	r30, r30
    1992:	ff 1f       	adc	r31, r31
    1994:	ee 0f       	add	r30, r30
    1996:	ff 1f       	adc	r31, r31
    1998:	ee 0f       	add	r30, r30
    199a:	ff 1f       	adc	r31, r31
    199c:	e0 53       	subi	r30, 0x30	; 48
    199e:	f0 40       	sbci	r31, 0x00	; 0
	for (int col = 0; col < FONT_SIZE; col++) {
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
		write_data(~pgm_read_byte(&font8[letter_index][col]));
    19a4:	24 91       	lpm	r18, Z
    19a6:	20 95       	com	r18
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    19a8:	a0 91 50 01 	lds	r26, 0x0150
    19ac:	b0 91 51 01 	lds	r27, 0x0151
    19b0:	2c 93       	st	X, r18

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++) {
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	31 96       	adiw	r30, 0x01	; 1
    19b6:	88 30       	cpi	r24, 0x08	; 8
    19b8:	91 05       	cpc	r25, r1
    19ba:	a1 f7       	brne	.-24     	; 0x19a4 <OLED_print_char_inverse+0x1c>
    19bc:	08 95       	ret

000019be <OLED_set_line>:
	}
	OLED_reset_cursor();
}

void OLED_set_line(uint8_t line) {
	OLED_pos(line,0);
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	0e 94 29 0c 	call	0x1852	; 0x1852 <OLED_pos>
    19c4:	80 e8       	ldi	r24, 0x80	; 128
    19c6:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    19c8:	2f ef       	ldi	r18, 0xFF	; 255
    19ca:	e0 91 50 01 	lds	r30, 0x0150
    19ce:	f0 91 51 01 	lds	r31, 0x0151
    19d2:	20 83       	st	Z, r18
    19d4:	01 97       	sbiw	r24, 0x01	; 1
	OLED_reset_cursor();
}

void OLED_set_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	c1 f7       	brne	.-16     	; 0x19ca <OLED_set_line+0xc>
		write_data(0xFF);
	}
}
    19da:	08 95       	ret

000019dc <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    19dc:	e0 91 50 01 	lds	r30, 0x0150
    19e0:	f0 91 51 01 	lds	r31, 0x0151
    19e4:	88 e1       	ldi	r24, 0x18	; 24
    19e6:	80 83       	st	Z, r24
    19e8:	e0 91 50 01 	lds	r30, 0x0150
    19ec:	f0 91 51 01 	lds	r31, 0x0151
    19f0:	80 83       	st	Z, r24
    19f2:	e0 91 50 01 	lds	r30, 0x0150
    19f6:	f0 91 51 01 	lds	r31, 0x0151
    19fa:	9e e7       	ldi	r25, 0x7E	; 126
    19fc:	90 83       	st	Z, r25
    19fe:	e0 91 50 01 	lds	r30, 0x0150
    1a02:	f0 91 51 01 	lds	r31, 0x0151
    1a06:	9c e3       	ldi	r25, 0x3C	; 60
    1a08:	90 83       	st	Z, r25
    1a0a:	e0 91 50 01 	lds	r30, 0x0150
    1a0e:	f0 91 51 01 	lds	r31, 0x0151
    1a12:	80 83       	st	Z, r24
    1a14:	08 95       	ret

00001a16 <print_blank>:
#include "OLED_driver.h"

#include <stdio.h>
#include <string.h>

void print_blank(int number) {
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
    1a20:	18 16       	cp	r1, r24
    1a22:	19 06       	cpc	r1, r25
    1a24:	54 f4       	brge	.+20     	; 0x1a3a <print_blank+0x24>
    1a26:	c0 e0       	ldi	r28, 0x00	; 0
    1a28:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0x00);
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>

#include <stdio.h>
#include <string.h>

void print_blank(int number) {
	for (int i = 0; i < number; i++) {
    1a32:	21 96       	adiw	r28, 0x01	; 1
    1a34:	c0 17       	cp	r28, r16
    1a36:	d1 07       	cpc	r29, r17
    1a38:	c1 f7       	brne	.-16     	; 0x1a2a <print_blank+0x14>
		write_data(0x00);
	}
}
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	08 95       	ret

00001a44 <print_fill>:

void print_fill(int number) {
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
    1a4e:	18 16       	cp	r1, r24
    1a50:	19 06       	cpc	r1, r25
    1a52:	54 f4       	brge	.+20     	; 0x1a68 <print_fill+0x24>
    1a54:	c0 e0       	ldi	r28, 0x00	; 0
    1a56:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0xFF);
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(0x00);
	}
}

void print_fill(int number) {
	for (int i = 0; i < number; i++) {
    1a60:	21 96       	adiw	r28, 0x01	; 1
    1a62:	c0 17       	cp	r28, r16
    1a64:	d1 07       	cpc	r29, r17
    1a66:	c1 f7       	brne	.-16     	; 0x1a58 <print_fill+0x14>
		write_data(0xFF);
	}
}
    1a68:	df 91       	pop	r29
    1a6a:	cf 91       	pop	r28
    1a6c:	1f 91       	pop	r17
    1a6e:	0f 91       	pop	r16
    1a70:	08 95       	ret

00001a72 <print_shift>:

void print_shift(int inverse) {
	if (!inverse) {
    1a72:	89 2b       	or	r24, r25
    1a74:	29 f5       	brne	.+74     	; 0x1ac0 <print_shift+0x4e>
		print_blank(4);
    1a76:	84 e0       	ldi	r24, 0x04	; 4
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <print_blank>
		//up-arrow
		write_data(0b00010000);
    1a7e:	80 e1       	ldi	r24, 0x10	; 16
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(0b00011000);
    1a86:	88 e1       	ldi	r24, 0x18	; 24
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(0b00111100);
    1a8e:	8c e3       	ldi	r24, 0x3C	; 60
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(0b00111110);
    1a96:	8e e3       	ldi	r24, 0x3E	; 62
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(0b00111100);
    1a9e:	8c e3       	ldi	r24, 0x3C	; 60
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(0b00011000);
    1aa6:	88 e1       	ldi	r24, 0x18	; 24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(0b00010000);
    1aae:	80 e1       	ldi	r24, 0x10	; 16
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>

		print_blank(5);
    1ab6:	85 e0       	ldi	r24, 0x05	; 5
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <print_blank>
    1abe:	08 95       	ret
	}
	else {
		print_fill(4);
    1ac0:	84 e0       	ldi	r24, 0x04	; 4
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <print_fill>
		//up-arrow
		write_data(~0b00010000);
    1ac8:	8f ee       	ldi	r24, 0xEF	; 239
    1aca:	9f ef       	ldi	r25, 0xFF	; 255
    1acc:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(~0b00011000);
    1ad0:	87 ee       	ldi	r24, 0xE7	; 231
    1ad2:	9f ef       	ldi	r25, 0xFF	; 255
    1ad4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(~0b00111100);
    1ad8:	83 ec       	ldi	r24, 0xC3	; 195
    1ada:	9f ef       	ldi	r25, 0xFF	; 255
    1adc:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(~0b00111110);
    1ae0:	81 ec       	ldi	r24, 0xC1	; 193
    1ae2:	9f ef       	ldi	r25, 0xFF	; 255
    1ae4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(~0b00111100);
    1ae8:	83 ec       	ldi	r24, 0xC3	; 195
    1aea:	9f ef       	ldi	r25, 0xFF	; 255
    1aec:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(~0b00011000);
    1af0:	87 ee       	ldi	r24, 0xE7	; 231
    1af2:	9f ef       	ldi	r25, 0xFF	; 255
    1af4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(~0b00010000);
    1af8:	8f ee       	ldi	r24, 0xEF	; 239
    1afa:	9f ef       	ldi	r25, 0xFF	; 255
    1afc:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		print_fill(5);
    1b00:	85 e0       	ldi	r24, 0x05	; 5
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <print_fill>
    1b08:	08 95       	ret

00001b0a <print_left_arrow>:
	}
}

void print_left_arrow(int inverse) {
	if (!inverse) {
    1b0a:	89 2b       	or	r24, r25
    1b0c:	a9 f4       	brne	.+42     	; 0x1b38 <print_left_arrow+0x2e>
		print_blank(6);
    1b0e:	86 e0       	ldi	r24, 0x06	; 6
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <print_blank>
		//left-arrow

		write_data(0b00010000);
    1b16:	80 e1       	ldi	r24, 0x10	; 16
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(0b00111000);
    1b1e:	88 e3       	ldi	r24, 0x38	; 56
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(0b01111100);
    1b26:	8c e7       	ldi	r24, 0x7C	; 124
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>

		print_blank(7);
    1b2e:	87 e0       	ldi	r24, 0x07	; 7
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <print_blank>
    1b36:	08 95       	ret
	}
	else {
		print_fill(6);
    1b38:	86 e0       	ldi	r24, 0x06	; 6
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <print_fill>
		//left-arrow
		write_data(~0b00010000);
    1b40:	8f ee       	ldi	r24, 0xEF	; 239
    1b42:	9f ef       	ldi	r25, 0xFF	; 255
    1b44:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(~0b00111000);
    1b48:	87 ec       	ldi	r24, 0xC7	; 199
    1b4a:	9f ef       	ldi	r25, 0xFF	; 255
    1b4c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(~0b01111100);
    1b50:	83 e8       	ldi	r24, 0x83	; 131
    1b52:	9f ef       	ldi	r25, 0xFF	; 255
    1b54:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>

		print_fill(7);
    1b58:	87 e0       	ldi	r24, 0x07	; 7
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <print_fill>
    1b60:	08 95       	ret

00001b62 <print_right_arrow>:
	}
}


void print_right_arrow(int inverse) {
	if (!inverse) {
    1b62:	89 2b       	or	r24, r25
    1b64:	a9 f4       	brne	.+42     	; 0x1b90 <print_right_arrow+0x2e>
		print_blank(6);
    1b66:	86 e0       	ldi	r24, 0x06	; 6
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <print_blank>

		//right-arrow
		write_data(0b01111100);
    1b6e:	8c e7       	ldi	r24, 0x7C	; 124
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(0b00111000);
    1b76:	88 e3       	ldi	r24, 0x38	; 56
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(0b00010000);
    1b7e:	80 e1       	ldi	r24, 0x10	; 16
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>

		print_blank(7);
    1b86:	87 e0       	ldi	r24, 0x07	; 7
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <print_blank>
    1b8e:	08 95       	ret
	}
	else {
		print_fill(6);
    1b90:	86 e0       	ldi	r24, 0x06	; 6
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <print_fill>

		//right-arrow
		write_data(~0b01111100);
    1b98:	83 e8       	ldi	r24, 0x83	; 131
    1b9a:	9f ef       	ldi	r25, 0xFF	; 255
    1b9c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(~0b00111000);
    1ba0:	87 ec       	ldi	r24, 0xC7	; 199
    1ba2:	9f ef       	ldi	r25, 0xFF	; 255
    1ba4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
		write_data(~0b00010000);
    1ba8:	8f ee       	ldi	r24, 0xEF	; 239
    1baa:	9f ef       	ldi	r25, 0xFF	; 255
    1bac:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>

		print_fill(7);
    1bb0:	87 e0       	ldi	r24, 0x07	; 7
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <print_fill>
    1bb8:	08 95       	ret

00001bba <print_spacebar>:
	}
}


void print_spacebar(int inverse) {
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
	if (!inverse) {
    1bbe:	89 2b       	or	r24, r25
    1bc0:	d1 f4       	brne	.+52     	; 0x1bf6 <print_spacebar+0x3c>
		print_blank(4);
    1bc2:	84 e0       	ldi	r24, 0x04	; 4
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <print_blank>

		//spacebar
		write_data(0b00111000);
    1bca:	88 e3       	ldi	r24, 0x38	; 56
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
    1bd2:	c7 e2       	ldi	r28, 0x27	; 39
    1bd4:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 39;i++) write_data(0b00100000);
    1bd6:	80 e2       	ldi	r24, 0x20	; 32
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
    1bde:	21 97       	sbiw	r28, 0x01	; 1
    1be0:	20 97       	sbiw	r28, 0x00	; 0
    1be2:	c9 f7       	brne	.-14     	; 0x1bd6 <print_spacebar+0x1c>
		write_data(0b00111000);
    1be4:	88 e3       	ldi	r24, 0x38	; 56
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>

		print_blank(5);
    1bec:	85 e0       	ldi	r24, 0x05	; 5
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <print_blank>
    1bf4:	19 c0       	rjmp	.+50     	; 0x1c28 <print_spacebar+0x6e>
	}
	else {
		print_blank(4);
    1bf6:	84 e0       	ldi	r24, 0x04	; 4
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <print_blank>

		//spacebar
		write_data(~0b00111000);
    1bfe:	87 ec       	ldi	r24, 0xC7	; 199
    1c00:	9f ef       	ldi	r25, 0xFF	; 255
    1c02:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
    1c06:	c7 e2       	ldi	r28, 0x27	; 39
    1c08:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 39;i++) write_data(~0b00100000);
    1c0a:	8f ed       	ldi	r24, 0xDF	; 223
    1c0c:	9f ef       	ldi	r25, 0xFF	; 255
    1c0e:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>
    1c12:	21 97       	sbiw	r28, 0x01	; 1
    1c14:	20 97       	sbiw	r28, 0x00	; 0
    1c16:	c9 f7       	brne	.-14     	; 0x1c0a <print_spacebar+0x50>
		write_data(~0b00111000);
    1c18:	87 ec       	ldi	r24, 0xC7	; 199
    1c1a:	9f ef       	ldi	r25, 0xFF	; 255
    1c1c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <write_data>

		print_blank(5);
    1c20:	85 e0       	ldi	r24, 0x05	; 5
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <print_blank>
	}
}
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	08 95       	ret

00001c2e <print_options_bar>:


void print_options_bar(int shift_inverse, int space_inverse, int left_inverse,  int right_inverse) {
    1c2e:	ef 92       	push	r14
    1c30:	ff 92       	push	r15
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	7b 01       	movw	r14, r22
    1c3c:	8a 01       	movw	r16, r20
    1c3e:	e9 01       	movw	r28, r18
	print_shift(shift_inverse);
    1c40:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <print_shift>
	print_spacebar(space_inverse);
    1c44:	c7 01       	movw	r24, r14
    1c46:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <print_spacebar>
	print_left_arrow(left_inverse);
    1c4a:	c8 01       	movw	r24, r16
    1c4c:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <print_left_arrow>
	print_right_arrow(right_inverse);
    1c50:	ce 01       	movw	r24, r28
    1c52:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <print_right_arrow>
}
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ff 90       	pop	r15
    1c60:	ef 90       	pop	r14
    1c62:	08 95       	ret

00001c64 <print_char>:

void print_char(char c, int inverse) {
	if (!inverse) {
    1c64:	67 2b       	or	r22, r23
    1c66:	19 f4       	brne	.+6      	; 0x1c6e <print_char+0xa>
		OLED_print_char(c);
    1c68:	0e 94 88 0c 	call	0x1910	; 0x1910 <OLED_print_char>
    1c6c:	08 95       	ret
	}
	else {
		OLED_print_char_inverse(c);
    1c6e:	0e 94 c4 0c 	call	0x1988	; 0x1988 <OLED_print_char_inverse>
    1c72:	08 95       	ret

00001c74 <SPI_init>:

void SPI_init(){
	//Configure interrupt0 on the ATmega162 for receiving interrupts from SPI
	//see page 160 in ATmega162
	//enable int0 on the ATmega162
	set_bit(GICR, INT0);
    1c74:	8b b7       	in	r24, 0x3b	; 59
    1c76:	80 64       	ori	r24, 0x40	; 64
    1c78:	8b bf       	out	0x3b, r24	; 59
	
	//interrupt when low
	clear_bit(MCUCR,ISC01);
    1c7a:	85 b7       	in	r24, 0x35	; 53
    1c7c:	8d 7f       	andi	r24, 0xFD	; 253
    1c7e:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
    1c80:	85 b7       	in	r24, 0x35	; 53
    1c82:	8e 7f       	andi	r24, 0xFE	; 254
    1c84:	85 bf       	out	0x35, r24	; 53
	

	//set mosi, sck, ss as output, others as input
	set_bit(DDRB, MOSI);
    1c86:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
    1c88:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
    1c8a:	bc 9a       	sbi	0x17, 4	; 23
	
	
	//set ATmega as master
	set_bit(SPCR, MSTR);
    1c8c:	6c 9a       	sbi	0x0d, 4	; 13
	
	//enable SPI
	set_bit(SPCR, SPE);
    1c8e:	6e 9a       	sbi	0x0d, 6	; 13
	
	//set clock to f_osc/16
	set_bit(SPCR, SPR0);
    1c90:	68 9a       	sbi	0x0d, 0	; 13
	clear_bit(SPCR,SPR1);
    1c92:	69 98       	cbi	0x0d, 1	; 13
	clear_bit(SPCR, SPI2X);
    1c94:	68 98       	cbi	0x0d, 0	; 13
    1c96:	08 95       	ret

00001c98 <SPI_send>:
}


void SPI_send(uint8_t data){
	//Start transmission
	SPDR = data;		
    1c98:	8f b9       	out	0x0f, r24	; 15
	//wait for transmission complete SPSR: register with SPIF flag, SPIF: bit set to 1 when data is read
	loop_until_bit_is_set(SPSR, SPIF);
    1c9a:	77 9b       	sbis	0x0e, 7	; 14
    1c9c:	fe cf       	rjmp	.-4      	; 0x1c9a <SPI_send+0x2>
}
    1c9e:	08 95       	ret

00001ca0 <SPI_read>:


char SPI_read(){
	//must send a dummy bit to receive data
	SPI_send(0);
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <SPI_send>
	
	loop_until_bit_is_set(SPSR, SPIF);
    1ca6:	77 9b       	sbis	0x0e, 7	; 14
    1ca8:	fe cf       	rjmp	.-4      	; 0x1ca6 <SPI_read+0x6>
	char data = SPDR;
    1caa:	8f b1       	in	r24, 0x0f	; 15
	return data;
	
}
    1cac:	08 95       	ret

00001cae <SPI_select>:
	//printf("SPI_TEST: %s\n\n", spi_read_result);
	
}

void SPI_select(){
	clear_bit(PORTB, SS);
    1cae:	c4 98       	cbi	0x18, 4	; 24
    1cb0:	08 95       	ret

00001cb2 <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
    1cb2:	c4 9a       	sbi	0x18, 4	; 24
    1cb4:	08 95       	ret

00001cb6 <SRAM_init>:
#include <stdio.h>


void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
    1cb6:	85 b7       	in	r24, 0x35	; 53
    1cb8:	80 68       	ori	r24, 0x80	; 128
    1cba:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
    1cbc:	80 b7       	in	r24, 0x30	; 48
    1cbe:	80 62       	ori	r24, 0x20	; 32
    1cc0:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
    1cc2:	80 b7       	in	r24, 0x30	; 48
    1cc4:	8f 7e       	andi	r24, 0xEF	; 239
    1cc6:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
    1cc8:	80 b7       	in	r24, 0x30	; 48
    1cca:	87 7f       	andi	r24, 0xF7	; 247
    1ccc:	80 bf       	out	0x30, r24	; 48
    1cce:	08 95       	ret

00001cd0 <usart_transmit_to_computer>:
}


void usart_transmit_to_computer(unsigned int data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
    1cd0:	5d 9b       	sbis	0x0b, 5	; 11
    1cd2:	fe cf       	rjmp	.-4      	; 0x1cd0 <usart_transmit_to_computer>
	;
	
	/* Put data into buffer (sends the data) */
	UDR0 = data;
    1cd4:	8c b9       	out	0x0c, r24	; 12
    1cd6:	08 95       	ret

00001cd8 <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
    1cd8:	5f 9b       	sbis	0x0b, 7	; 11
    1cda:	fe cf       	rjmp	.-4      	; 0x1cd8 <usart_receive_from_computer>
	;
	
	/* Get and return data from buffer */
	return UDR0;
    1cdc:	8c b1       	in	r24, 0x0c	; 12
}
    1cde:	08 95       	ret

00001ce0 <usart_init>:
#include <stdio.h>


void usart_init(unsigned int ubbr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubbr>>8);
    1ce0:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
    1ce2:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    1ce4:	88 e1       	ldi	r24, 0x18	; 24
    1ce6:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1ce8:	8e e8       	ldi	r24, 0x8E	; 142
    1cea:	80 bd       	out	0x20, r24	; 32
	
	
	/* Enable printf-thing */
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
    1cec:	6c e6       	ldi	r22, 0x6C	; 108
    1cee:	7e e0       	ldi	r23, 0x0E	; 14
    1cf0:	88 e6       	ldi	r24, 0x68	; 104
    1cf2:	9e e0       	ldi	r25, 0x0E	; 14
    1cf4:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <fdevopen>
    1cf8:	08 95       	ret

00001cfa <__divmodhi4>:
    1cfa:	97 fb       	bst	r25, 7
    1cfc:	07 2e       	mov	r0, r23
    1cfe:	16 f4       	brtc	.+4      	; 0x1d04 <__divmodhi4+0xa>
    1d00:	00 94       	com	r0
    1d02:	07 d0       	rcall	.+14     	; 0x1d12 <__divmodhi4_neg1>
    1d04:	77 fd       	sbrc	r23, 7
    1d06:	09 d0       	rcall	.+18     	; 0x1d1a <__divmodhi4_neg2>
    1d08:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__udivmodhi4>
    1d0c:	07 fc       	sbrc	r0, 7
    1d0e:	05 d0       	rcall	.+10     	; 0x1d1a <__divmodhi4_neg2>
    1d10:	3e f4       	brtc	.+14     	; 0x1d20 <__divmodhi4_exit>

00001d12 <__divmodhi4_neg1>:
    1d12:	90 95       	com	r25
    1d14:	81 95       	neg	r24
    1d16:	9f 4f       	sbci	r25, 0xFF	; 255
    1d18:	08 95       	ret

00001d1a <__divmodhi4_neg2>:
    1d1a:	70 95       	com	r23
    1d1c:	61 95       	neg	r22
    1d1e:	7f 4f       	sbci	r23, 0xFF	; 255

00001d20 <__divmodhi4_exit>:
    1d20:	08 95       	ret

00001d22 <__udivmodhi4>:
    1d22:	aa 1b       	sub	r26, r26
    1d24:	bb 1b       	sub	r27, r27
    1d26:	51 e1       	ldi	r21, 0x11	; 17
    1d28:	07 c0       	rjmp	.+14     	; 0x1d38 <__udivmodhi4_ep>

00001d2a <__udivmodhi4_loop>:
    1d2a:	aa 1f       	adc	r26, r26
    1d2c:	bb 1f       	adc	r27, r27
    1d2e:	a6 17       	cp	r26, r22
    1d30:	b7 07       	cpc	r27, r23
    1d32:	10 f0       	brcs	.+4      	; 0x1d38 <__udivmodhi4_ep>
    1d34:	a6 1b       	sub	r26, r22
    1d36:	b7 0b       	sbc	r27, r23

00001d38 <__udivmodhi4_ep>:
    1d38:	88 1f       	adc	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	5a 95       	dec	r21
    1d3e:	a9 f7       	brne	.-22     	; 0x1d2a <__udivmodhi4_loop>
    1d40:	80 95       	com	r24
    1d42:	90 95       	com	r25
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	08 95       	ret

00001d4a <malloc>:
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	82 30       	cpi	r24, 0x02	; 2
    1d50:	91 05       	cpc	r25, r1
    1d52:	10 f4       	brcc	.+4      	; 0x1d58 <malloc+0xe>
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	e0 91 28 04 	lds	r30, 0x0428
    1d5c:	f0 91 29 04 	lds	r31, 0x0429
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	a0 e0       	ldi	r26, 0x00	; 0
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	30 97       	sbiw	r30, 0x00	; 0
    1d6a:	39 f1       	breq	.+78     	; 0x1dba <malloc+0x70>
    1d6c:	40 81       	ld	r20, Z
    1d6e:	51 81       	ldd	r21, Z+1	; 0x01
    1d70:	48 17       	cp	r20, r24
    1d72:	59 07       	cpc	r21, r25
    1d74:	b8 f0       	brcs	.+46     	; 0x1da4 <malloc+0x5a>
    1d76:	48 17       	cp	r20, r24
    1d78:	59 07       	cpc	r21, r25
    1d7a:	71 f4       	brne	.+28     	; 0x1d98 <malloc+0x4e>
    1d7c:	82 81       	ldd	r24, Z+2	; 0x02
    1d7e:	93 81       	ldd	r25, Z+3	; 0x03
    1d80:	10 97       	sbiw	r26, 0x00	; 0
    1d82:	29 f0       	breq	.+10     	; 0x1d8e <malloc+0x44>
    1d84:	13 96       	adiw	r26, 0x03	; 3
    1d86:	9c 93       	st	X, r25
    1d88:	8e 93       	st	-X, r24
    1d8a:	12 97       	sbiw	r26, 0x02	; 2
    1d8c:	2c c0       	rjmp	.+88     	; 0x1de6 <malloc+0x9c>
    1d8e:	90 93 29 04 	sts	0x0429, r25
    1d92:	80 93 28 04 	sts	0x0428, r24
    1d96:	27 c0       	rjmp	.+78     	; 0x1de6 <malloc+0x9c>
    1d98:	21 15       	cp	r18, r1
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	31 f0       	breq	.+12     	; 0x1daa <malloc+0x60>
    1d9e:	42 17       	cp	r20, r18
    1da0:	53 07       	cpc	r21, r19
    1da2:	18 f0       	brcs	.+6      	; 0x1daa <malloc+0x60>
    1da4:	a9 01       	movw	r20, r18
    1da6:	db 01       	movw	r26, r22
    1da8:	01 c0       	rjmp	.+2      	; 0x1dac <malloc+0x62>
    1daa:	ef 01       	movw	r28, r30
    1dac:	9a 01       	movw	r18, r20
    1dae:	bd 01       	movw	r22, r26
    1db0:	df 01       	movw	r26, r30
    1db2:	02 80       	ldd	r0, Z+2	; 0x02
    1db4:	f3 81       	ldd	r31, Z+3	; 0x03
    1db6:	e0 2d       	mov	r30, r0
    1db8:	d7 cf       	rjmp	.-82     	; 0x1d68 <malloc+0x1e>
    1dba:	21 15       	cp	r18, r1
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	f9 f0       	breq	.+62     	; 0x1dfe <malloc+0xb4>
    1dc0:	28 1b       	sub	r18, r24
    1dc2:	39 0b       	sbc	r19, r25
    1dc4:	24 30       	cpi	r18, 0x04	; 4
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	80 f4       	brcc	.+32     	; 0x1dea <malloc+0xa0>
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dce:	61 15       	cp	r22, r1
    1dd0:	71 05       	cpc	r23, r1
    1dd2:	21 f0       	breq	.+8      	; 0x1ddc <malloc+0x92>
    1dd4:	fb 01       	movw	r30, r22
    1dd6:	93 83       	std	Z+3, r25	; 0x03
    1dd8:	82 83       	std	Z+2, r24	; 0x02
    1dda:	04 c0       	rjmp	.+8      	; 0x1de4 <malloc+0x9a>
    1ddc:	90 93 29 04 	sts	0x0429, r25
    1de0:	80 93 28 04 	sts	0x0428, r24
    1de4:	fe 01       	movw	r30, r28
    1de6:	32 96       	adiw	r30, 0x02	; 2
    1de8:	44 c0       	rjmp	.+136    	; 0x1e72 <malloc+0x128>
    1dea:	fe 01       	movw	r30, r28
    1dec:	e2 0f       	add	r30, r18
    1dee:	f3 1f       	adc	r31, r19
    1df0:	81 93       	st	Z+, r24
    1df2:	91 93       	st	Z+, r25
    1df4:	22 50       	subi	r18, 0x02	; 2
    1df6:	31 09       	sbc	r19, r1
    1df8:	39 83       	std	Y+1, r19	; 0x01
    1dfa:	28 83       	st	Y, r18
    1dfc:	3a c0       	rjmp	.+116    	; 0x1e72 <malloc+0x128>
    1dfe:	20 91 26 04 	lds	r18, 0x0426
    1e02:	30 91 27 04 	lds	r19, 0x0427
    1e06:	23 2b       	or	r18, r19
    1e08:	41 f4       	brne	.+16     	; 0x1e1a <malloc+0xd0>
    1e0a:	20 91 02 01 	lds	r18, 0x0102
    1e0e:	30 91 03 01 	lds	r19, 0x0103
    1e12:	30 93 27 04 	sts	0x0427, r19
    1e16:	20 93 26 04 	sts	0x0426, r18
    1e1a:	20 91 00 01 	lds	r18, 0x0100
    1e1e:	30 91 01 01 	lds	r19, 0x0101
    1e22:	21 15       	cp	r18, r1
    1e24:	31 05       	cpc	r19, r1
    1e26:	41 f4       	brne	.+16     	; 0x1e38 <malloc+0xee>
    1e28:	2d b7       	in	r18, 0x3d	; 61
    1e2a:	3e b7       	in	r19, 0x3e	; 62
    1e2c:	40 91 04 01 	lds	r20, 0x0104
    1e30:	50 91 05 01 	lds	r21, 0x0105
    1e34:	24 1b       	sub	r18, r20
    1e36:	35 0b       	sbc	r19, r21
    1e38:	e0 91 26 04 	lds	r30, 0x0426
    1e3c:	f0 91 27 04 	lds	r31, 0x0427
    1e40:	e2 17       	cp	r30, r18
    1e42:	f3 07       	cpc	r31, r19
    1e44:	a0 f4       	brcc	.+40     	; 0x1e6e <malloc+0x124>
    1e46:	2e 1b       	sub	r18, r30
    1e48:	3f 0b       	sbc	r19, r31
    1e4a:	28 17       	cp	r18, r24
    1e4c:	39 07       	cpc	r19, r25
    1e4e:	78 f0       	brcs	.+30     	; 0x1e6e <malloc+0x124>
    1e50:	ac 01       	movw	r20, r24
    1e52:	4e 5f       	subi	r20, 0xFE	; 254
    1e54:	5f 4f       	sbci	r21, 0xFF	; 255
    1e56:	24 17       	cp	r18, r20
    1e58:	35 07       	cpc	r19, r21
    1e5a:	48 f0       	brcs	.+18     	; 0x1e6e <malloc+0x124>
    1e5c:	4e 0f       	add	r20, r30
    1e5e:	5f 1f       	adc	r21, r31
    1e60:	50 93 27 04 	sts	0x0427, r21
    1e64:	40 93 26 04 	sts	0x0426, r20
    1e68:	81 93       	st	Z+, r24
    1e6a:	91 93       	st	Z+, r25
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <malloc+0x128>
    1e6e:	e0 e0       	ldi	r30, 0x00	; 0
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	cf 01       	movw	r24, r30
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	08 95       	ret

00001e7a <free>:
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <free+0xa>
    1e82:	87 c0       	rjmp	.+270    	; 0x1f92 <free+0x118>
    1e84:	fc 01       	movw	r30, r24
    1e86:	32 97       	sbiw	r30, 0x02	; 2
    1e88:	13 82       	std	Z+3, r1	; 0x03
    1e8a:	12 82       	std	Z+2, r1	; 0x02
    1e8c:	c0 91 28 04 	lds	r28, 0x0428
    1e90:	d0 91 29 04 	lds	r29, 0x0429
    1e94:	20 97       	sbiw	r28, 0x00	; 0
    1e96:	81 f4       	brne	.+32     	; 0x1eb8 <free+0x3e>
    1e98:	20 81       	ld	r18, Z
    1e9a:	31 81       	ldd	r19, Z+1	; 0x01
    1e9c:	28 0f       	add	r18, r24
    1e9e:	39 1f       	adc	r19, r25
    1ea0:	80 91 26 04 	lds	r24, 0x0426
    1ea4:	90 91 27 04 	lds	r25, 0x0427
    1ea8:	82 17       	cp	r24, r18
    1eaa:	93 07       	cpc	r25, r19
    1eac:	79 f5       	brne	.+94     	; 0x1f0c <free+0x92>
    1eae:	f0 93 27 04 	sts	0x0427, r31
    1eb2:	e0 93 26 04 	sts	0x0426, r30
    1eb6:	6d c0       	rjmp	.+218    	; 0x1f92 <free+0x118>
    1eb8:	de 01       	movw	r26, r28
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	ae 17       	cp	r26, r30
    1ec0:	bf 07       	cpc	r27, r31
    1ec2:	50 f4       	brcc	.+20     	; 0x1ed8 <free+0x5e>
    1ec4:	12 96       	adiw	r26, 0x02	; 2
    1ec6:	4d 91       	ld	r20, X+
    1ec8:	5c 91       	ld	r21, X
    1eca:	13 97       	sbiw	r26, 0x03	; 3
    1ecc:	9d 01       	movw	r18, r26
    1ece:	41 15       	cp	r20, r1
    1ed0:	51 05       	cpc	r21, r1
    1ed2:	09 f1       	breq	.+66     	; 0x1f16 <free+0x9c>
    1ed4:	da 01       	movw	r26, r20
    1ed6:	f3 cf       	rjmp	.-26     	; 0x1ebe <free+0x44>
    1ed8:	b3 83       	std	Z+3, r27	; 0x03
    1eda:	a2 83       	std	Z+2, r26	; 0x02
    1edc:	40 81       	ld	r20, Z
    1ede:	51 81       	ldd	r21, Z+1	; 0x01
    1ee0:	84 0f       	add	r24, r20
    1ee2:	95 1f       	adc	r25, r21
    1ee4:	8a 17       	cp	r24, r26
    1ee6:	9b 07       	cpc	r25, r27
    1ee8:	71 f4       	brne	.+28     	; 0x1f06 <free+0x8c>
    1eea:	8d 91       	ld	r24, X+
    1eec:	9c 91       	ld	r25, X
    1eee:	11 97       	sbiw	r26, 0x01	; 1
    1ef0:	84 0f       	add	r24, r20
    1ef2:	95 1f       	adc	r25, r21
    1ef4:	02 96       	adiw	r24, 0x02	; 2
    1ef6:	91 83       	std	Z+1, r25	; 0x01
    1ef8:	80 83       	st	Z, r24
    1efa:	12 96       	adiw	r26, 0x02	; 2
    1efc:	8d 91       	ld	r24, X+
    1efe:	9c 91       	ld	r25, X
    1f00:	13 97       	sbiw	r26, 0x03	; 3
    1f02:	93 83       	std	Z+3, r25	; 0x03
    1f04:	82 83       	std	Z+2, r24	; 0x02
    1f06:	21 15       	cp	r18, r1
    1f08:	31 05       	cpc	r19, r1
    1f0a:	29 f4       	brne	.+10     	; 0x1f16 <free+0x9c>
    1f0c:	f0 93 29 04 	sts	0x0429, r31
    1f10:	e0 93 28 04 	sts	0x0428, r30
    1f14:	3e c0       	rjmp	.+124    	; 0x1f92 <free+0x118>
    1f16:	d9 01       	movw	r26, r18
    1f18:	13 96       	adiw	r26, 0x03	; 3
    1f1a:	fc 93       	st	X, r31
    1f1c:	ee 93       	st	-X, r30
    1f1e:	12 97       	sbiw	r26, 0x02	; 2
    1f20:	4d 91       	ld	r20, X+
    1f22:	5d 91       	ld	r21, X+
    1f24:	a4 0f       	add	r26, r20
    1f26:	b5 1f       	adc	r27, r21
    1f28:	ea 17       	cp	r30, r26
    1f2a:	fb 07       	cpc	r31, r27
    1f2c:	79 f4       	brne	.+30     	; 0x1f4c <free+0xd2>
    1f2e:	80 81       	ld	r24, Z
    1f30:	91 81       	ldd	r25, Z+1	; 0x01
    1f32:	84 0f       	add	r24, r20
    1f34:	95 1f       	adc	r25, r21
    1f36:	02 96       	adiw	r24, 0x02	; 2
    1f38:	d9 01       	movw	r26, r18
    1f3a:	11 96       	adiw	r26, 0x01	; 1
    1f3c:	9c 93       	st	X, r25
    1f3e:	8e 93       	st	-X, r24
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	93 81       	ldd	r25, Z+3	; 0x03
    1f44:	13 96       	adiw	r26, 0x03	; 3
    1f46:	9c 93       	st	X, r25
    1f48:	8e 93       	st	-X, r24
    1f4a:	12 97       	sbiw	r26, 0x02	; 2
    1f4c:	e0 e0       	ldi	r30, 0x00	; 0
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	9b 81       	ldd	r25, Y+3	; 0x03
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	19 f0       	breq	.+6      	; 0x1f5e <free+0xe4>
    1f58:	fe 01       	movw	r30, r28
    1f5a:	ec 01       	movw	r28, r24
    1f5c:	f9 cf       	rjmp	.-14     	; 0x1f50 <free+0xd6>
    1f5e:	ce 01       	movw	r24, r28
    1f60:	02 96       	adiw	r24, 0x02	; 2
    1f62:	28 81       	ld	r18, Y
    1f64:	39 81       	ldd	r19, Y+1	; 0x01
    1f66:	82 0f       	add	r24, r18
    1f68:	93 1f       	adc	r25, r19
    1f6a:	20 91 26 04 	lds	r18, 0x0426
    1f6e:	30 91 27 04 	lds	r19, 0x0427
    1f72:	28 17       	cp	r18, r24
    1f74:	39 07       	cpc	r19, r25
    1f76:	69 f4       	brne	.+26     	; 0x1f92 <free+0x118>
    1f78:	30 97       	sbiw	r30, 0x00	; 0
    1f7a:	29 f4       	brne	.+10     	; 0x1f86 <free+0x10c>
    1f7c:	10 92 29 04 	sts	0x0429, r1
    1f80:	10 92 28 04 	sts	0x0428, r1
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <free+0x110>
    1f86:	13 82       	std	Z+3, r1	; 0x03
    1f88:	12 82       	std	Z+2, r1	; 0x02
    1f8a:	d0 93 27 04 	sts	0x0427, r29
    1f8e:	c0 93 26 04 	sts	0x0426, r28
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	08 95       	ret

00001f98 <fdevopen>:
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	ec 01       	movw	r28, r24
    1fa2:	8b 01       	movw	r16, r22
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	31 f4       	brne	.+12     	; 0x1fb4 <fdevopen+0x1c>
    1fa8:	61 15       	cp	r22, r1
    1faa:	71 05       	cpc	r23, r1
    1fac:	19 f4       	brne	.+6      	; 0x1fb4 <fdevopen+0x1c>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	38 c0       	rjmp	.+112    	; 0x2024 <fdevopen+0x8c>
    1fb4:	6e e0       	ldi	r22, 0x0E	; 14
    1fb6:	70 e0       	ldi	r23, 0x00	; 0
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	0e 94 97 12 	call	0x252e	; 0x252e <calloc>
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	00 97       	sbiw	r24, 0x00	; 0
    1fc4:	a1 f3       	breq	.-24     	; 0x1fae <fdevopen+0x16>
    1fc6:	80 e8       	ldi	r24, 0x80	; 128
    1fc8:	83 83       	std	Z+3, r24	; 0x03
    1fca:	01 15       	cp	r16, r1
    1fcc:	11 05       	cpc	r17, r1
    1fce:	71 f0       	breq	.+28     	; 0x1fec <fdevopen+0x54>
    1fd0:	13 87       	std	Z+11, r17	; 0x0b
    1fd2:	02 87       	std	Z+10, r16	; 0x0a
    1fd4:	81 e8       	ldi	r24, 0x81	; 129
    1fd6:	83 83       	std	Z+3, r24	; 0x03
    1fd8:	80 91 2a 04 	lds	r24, 0x042A
    1fdc:	90 91 2b 04 	lds	r25, 0x042B
    1fe0:	89 2b       	or	r24, r25
    1fe2:	21 f4       	brne	.+8      	; 0x1fec <fdevopen+0x54>
    1fe4:	f0 93 2b 04 	sts	0x042B, r31
    1fe8:	e0 93 2a 04 	sts	0x042A, r30
    1fec:	20 97       	sbiw	r28, 0x00	; 0
    1fee:	c9 f0       	breq	.+50     	; 0x2022 <fdevopen+0x8a>
    1ff0:	d1 87       	std	Z+9, r29	; 0x09
    1ff2:	c0 87       	std	Z+8, r28	; 0x08
    1ff4:	83 81       	ldd	r24, Z+3	; 0x03
    1ff6:	82 60       	ori	r24, 0x02	; 2
    1ff8:	83 83       	std	Z+3, r24	; 0x03
    1ffa:	80 91 2c 04 	lds	r24, 0x042C
    1ffe:	90 91 2d 04 	lds	r25, 0x042D
    2002:	89 2b       	or	r24, r25
    2004:	71 f4       	brne	.+28     	; 0x2022 <fdevopen+0x8a>
    2006:	f0 93 2d 04 	sts	0x042D, r31
    200a:	e0 93 2c 04 	sts	0x042C, r30
    200e:	80 91 2e 04 	lds	r24, 0x042E
    2012:	90 91 2f 04 	lds	r25, 0x042F
    2016:	89 2b       	or	r24, r25
    2018:	21 f4       	brne	.+8      	; 0x2022 <fdevopen+0x8a>
    201a:	f0 93 2f 04 	sts	0x042F, r31
    201e:	e0 93 2e 04 	sts	0x042E, r30
    2022:	cf 01       	movw	r24, r30
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	1f 91       	pop	r17
    202a:	0f 91       	pop	r16
    202c:	08 95       	ret

0000202e <fprintf>:
    202e:	a0 e0       	ldi	r26, 0x00	; 0
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	ed e1       	ldi	r30, 0x1D	; 29
    2034:	f0 e1       	ldi	r31, 0x10	; 16
    2036:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__prologue_saves__+0x20>
    203a:	ae 01       	movw	r20, r28
    203c:	47 5f       	subi	r20, 0xF7	; 247
    203e:	5f 4f       	sbci	r21, 0xFF	; 255
    2040:	6f 81       	ldd	r22, Y+7	; 0x07
    2042:	78 85       	ldd	r23, Y+8	; 0x08
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
    2046:	9e 81       	ldd	r25, Y+6	; 0x06
    2048:	0e 94 c5 10 	call	0x218a	; 0x218a <vfprintf>
    204c:	e2 e0       	ldi	r30, 0x02	; 2
    204e:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__epilogue_restores__+0x20>

00002052 <fputc>:
    2052:	0f 93       	push	r16
    2054:	1f 93       	push	r17
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	18 2f       	mov	r17, r24
    205c:	09 2f       	mov	r16, r25
    205e:	eb 01       	movw	r28, r22
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	81 fd       	sbrc	r24, 1
    2064:	03 c0       	rjmp	.+6      	; 0x206c <fputc+0x1a>
    2066:	8f ef       	ldi	r24, 0xFF	; 255
    2068:	9f ef       	ldi	r25, 0xFF	; 255
    206a:	20 c0       	rjmp	.+64     	; 0x20ac <fputc+0x5a>
    206c:	82 ff       	sbrs	r24, 2
    206e:	10 c0       	rjmp	.+32     	; 0x2090 <fputc+0x3e>
    2070:	4e 81       	ldd	r20, Y+6	; 0x06
    2072:	5f 81       	ldd	r21, Y+7	; 0x07
    2074:	2c 81       	ldd	r18, Y+4	; 0x04
    2076:	3d 81       	ldd	r19, Y+5	; 0x05
    2078:	42 17       	cp	r20, r18
    207a:	53 07       	cpc	r21, r19
    207c:	7c f4       	brge	.+30     	; 0x209c <fputc+0x4a>
    207e:	e8 81       	ld	r30, Y
    2080:	f9 81       	ldd	r31, Y+1	; 0x01
    2082:	9f 01       	movw	r18, r30
    2084:	2f 5f       	subi	r18, 0xFF	; 255
    2086:	3f 4f       	sbci	r19, 0xFF	; 255
    2088:	39 83       	std	Y+1, r19	; 0x01
    208a:	28 83       	st	Y, r18
    208c:	10 83       	st	Z, r17
    208e:	06 c0       	rjmp	.+12     	; 0x209c <fputc+0x4a>
    2090:	e8 85       	ldd	r30, Y+8	; 0x08
    2092:	f9 85       	ldd	r31, Y+9	; 0x09
    2094:	81 2f       	mov	r24, r17
    2096:	09 95       	icall
    2098:	89 2b       	or	r24, r25
    209a:	29 f7       	brne	.-54     	; 0x2066 <fputc+0x14>
    209c:	2e 81       	ldd	r18, Y+6	; 0x06
    209e:	3f 81       	ldd	r19, Y+7	; 0x07
    20a0:	2f 5f       	subi	r18, 0xFF	; 255
    20a2:	3f 4f       	sbci	r19, 0xFF	; 255
    20a4:	3f 83       	std	Y+7, r19	; 0x07
    20a6:	2e 83       	std	Y+6, r18	; 0x06
    20a8:	81 2f       	mov	r24, r17
    20aa:	90 2f       	mov	r25, r16
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	0f 91       	pop	r16
    20b4:	08 95       	ret

000020b6 <fputs>:
    20b6:	ef 92       	push	r14
    20b8:	ff 92       	push	r15
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	8b 01       	movw	r16, r22
    20c4:	db 01       	movw	r26, r22
    20c6:	13 96       	adiw	r26, 0x03	; 3
    20c8:	2c 91       	ld	r18, X
    20ca:	21 ff       	sbrs	r18, 1
    20cc:	16 c0       	rjmp	.+44     	; 0x20fa <fputs+0x44>
    20ce:	ec 01       	movw	r28, r24
    20d0:	e1 2c       	mov	r14, r1
    20d2:	f1 2c       	mov	r15, r1
    20d4:	89 91       	ld	r24, Y+
    20d6:	88 23       	and	r24, r24
    20d8:	71 f0       	breq	.+28     	; 0x20f6 <fputs+0x40>
    20da:	d8 01       	movw	r26, r16
    20dc:	18 96       	adiw	r26, 0x08	; 8
    20de:	ed 91       	ld	r30, X+
    20e0:	fc 91       	ld	r31, X
    20e2:	19 97       	sbiw	r26, 0x09	; 9
    20e4:	b8 01       	movw	r22, r16
    20e6:	09 95       	icall
    20e8:	89 2b       	or	r24, r25
    20ea:	a1 f3       	breq	.-24     	; 0x20d4 <fputs+0x1e>
    20ec:	ee 24       	eor	r14, r14
    20ee:	ea 94       	dec	r14
    20f0:	ff 24       	eor	r15, r15
    20f2:	fa 94       	dec	r15
    20f4:	ef cf       	rjmp	.-34     	; 0x20d4 <fputs+0x1e>
    20f6:	c7 01       	movw	r24, r14
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <fputs+0x48>
    20fa:	8f ef       	ldi	r24, 0xFF	; 255
    20fc:	9f ef       	ldi	r25, 0xFF	; 255
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	e6 e0       	ldi	r30, 0x06	; 6
    2104:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__epilogue_restores__+0x18>

00002108 <printf>:
    2108:	a0 e0       	ldi	r26, 0x00	; 0
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	ea e8       	ldi	r30, 0x8A	; 138
    210e:	f0 e1       	ldi	r31, 0x10	; 16
    2110:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__prologue_saves__+0x20>
    2114:	fe 01       	movw	r30, r28
    2116:	35 96       	adiw	r30, 0x05	; 5
    2118:	61 91       	ld	r22, Z+
    211a:	71 91       	ld	r23, Z+
    211c:	af 01       	movw	r20, r30
    211e:	80 91 2c 04 	lds	r24, 0x042C
    2122:	90 91 2d 04 	lds	r25, 0x042D
    2126:	0e 94 c5 10 	call	0x218a	; 0x218a <vfprintf>
    212a:	e2 e0       	ldi	r30, 0x02	; 2
    212c:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__epilogue_restores__+0x20>

00002130 <puts>:
    2130:	0f 93       	push	r16
    2132:	1f 93       	push	r17
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	e0 91 2c 04 	lds	r30, 0x042C
    213c:	f0 91 2d 04 	lds	r31, 0x042D
    2140:	23 81       	ldd	r18, Z+3	; 0x03
    2142:	21 ff       	sbrs	r18, 1
    2144:	1b c0       	rjmp	.+54     	; 0x217c <puts+0x4c>
    2146:	ec 01       	movw	r28, r24
    2148:	00 e0       	ldi	r16, 0x00	; 0
    214a:	10 e0       	ldi	r17, 0x00	; 0
    214c:	89 91       	ld	r24, Y+
    214e:	60 91 2c 04 	lds	r22, 0x042C
    2152:	70 91 2d 04 	lds	r23, 0x042D
    2156:	db 01       	movw	r26, r22
    2158:	18 96       	adiw	r26, 0x08	; 8
    215a:	ed 91       	ld	r30, X+
    215c:	fc 91       	ld	r31, X
    215e:	19 97       	sbiw	r26, 0x09	; 9
    2160:	88 23       	and	r24, r24
    2162:	31 f0       	breq	.+12     	; 0x2170 <puts+0x40>
    2164:	09 95       	icall
    2166:	89 2b       	or	r24, r25
    2168:	89 f3       	breq	.-30     	; 0x214c <puts+0x1c>
    216a:	0f ef       	ldi	r16, 0xFF	; 255
    216c:	1f ef       	ldi	r17, 0xFF	; 255
    216e:	ee cf       	rjmp	.-36     	; 0x214c <puts+0x1c>
    2170:	8a e0       	ldi	r24, 0x0A	; 10
    2172:	09 95       	icall
    2174:	89 2b       	or	r24, r25
    2176:	11 f4       	brne	.+4      	; 0x217c <puts+0x4c>
    2178:	c8 01       	movw	r24, r16
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <puts+0x50>
    217c:	8f ef       	ldi	r24, 0xFF	; 255
    217e:	9f ef       	ldi	r25, 0xFF	; 255
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	1f 91       	pop	r17
    2186:	0f 91       	pop	r16
    2188:	08 95       	ret

0000218a <vfprintf>:
    218a:	ac e0       	ldi	r26, 0x0C	; 12
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	eb ec       	ldi	r30, 0xCB	; 203
    2190:	f0 e1       	ldi	r31, 0x10	; 16
    2192:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__>
    2196:	7c 01       	movw	r14, r24
    2198:	6b 01       	movw	r12, r22
    219a:	8a 01       	movw	r16, r20
    219c:	fc 01       	movw	r30, r24
    219e:	17 82       	std	Z+7, r1	; 0x07
    21a0:	16 82       	std	Z+6, r1	; 0x06
    21a2:	83 81       	ldd	r24, Z+3	; 0x03
    21a4:	81 ff       	sbrs	r24, 1
    21a6:	bd c1       	rjmp	.+890    	; 0x2522 <vfprintf+0x398>
    21a8:	ce 01       	movw	r24, r28
    21aa:	01 96       	adiw	r24, 0x01	; 1
    21ac:	4c 01       	movw	r8, r24
    21ae:	f7 01       	movw	r30, r14
    21b0:	93 81       	ldd	r25, Z+3	; 0x03
    21b2:	f6 01       	movw	r30, r12
    21b4:	93 fd       	sbrc	r25, 3
    21b6:	85 91       	lpm	r24, Z+
    21b8:	93 ff       	sbrs	r25, 3
    21ba:	81 91       	ld	r24, Z+
    21bc:	6f 01       	movw	r12, r30
    21be:	88 23       	and	r24, r24
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <vfprintf+0x3a>
    21c2:	ab c1       	rjmp	.+854    	; 0x251a <vfprintf+0x390>
    21c4:	85 32       	cpi	r24, 0x25	; 37
    21c6:	39 f4       	brne	.+14     	; 0x21d6 <vfprintf+0x4c>
    21c8:	93 fd       	sbrc	r25, 3
    21ca:	85 91       	lpm	r24, Z+
    21cc:	93 ff       	sbrs	r25, 3
    21ce:	81 91       	ld	r24, Z+
    21d0:	6f 01       	movw	r12, r30
    21d2:	85 32       	cpi	r24, 0x25	; 37
    21d4:	29 f4       	brne	.+10     	; 0x21e0 <vfprintf+0x56>
    21d6:	b7 01       	movw	r22, r14
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	0e 94 29 10 	call	0x2052	; 0x2052 <fputc>
    21de:	e7 cf       	rjmp	.-50     	; 0x21ae <vfprintf+0x24>
    21e0:	51 2c       	mov	r5, r1
    21e2:	31 2c       	mov	r3, r1
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	20 32       	cpi	r18, 0x20	; 32
    21e8:	a0 f4       	brcc	.+40     	; 0x2212 <vfprintf+0x88>
    21ea:	8b 32       	cpi	r24, 0x2B	; 43
    21ec:	69 f0       	breq	.+26     	; 0x2208 <vfprintf+0x7e>
    21ee:	30 f4       	brcc	.+12     	; 0x21fc <vfprintf+0x72>
    21f0:	80 32       	cpi	r24, 0x20	; 32
    21f2:	59 f0       	breq	.+22     	; 0x220a <vfprintf+0x80>
    21f4:	83 32       	cpi	r24, 0x23	; 35
    21f6:	69 f4       	brne	.+26     	; 0x2212 <vfprintf+0x88>
    21f8:	20 61       	ori	r18, 0x10	; 16
    21fa:	2c c0       	rjmp	.+88     	; 0x2254 <vfprintf+0xca>
    21fc:	8d 32       	cpi	r24, 0x2D	; 45
    21fe:	39 f0       	breq	.+14     	; 0x220e <vfprintf+0x84>
    2200:	80 33       	cpi	r24, 0x30	; 48
    2202:	39 f4       	brne	.+14     	; 0x2212 <vfprintf+0x88>
    2204:	21 60       	ori	r18, 0x01	; 1
    2206:	26 c0       	rjmp	.+76     	; 0x2254 <vfprintf+0xca>
    2208:	22 60       	ori	r18, 0x02	; 2
    220a:	24 60       	ori	r18, 0x04	; 4
    220c:	23 c0       	rjmp	.+70     	; 0x2254 <vfprintf+0xca>
    220e:	28 60       	ori	r18, 0x08	; 8
    2210:	21 c0       	rjmp	.+66     	; 0x2254 <vfprintf+0xca>
    2212:	27 fd       	sbrc	r18, 7
    2214:	27 c0       	rjmp	.+78     	; 0x2264 <vfprintf+0xda>
    2216:	30 ed       	ldi	r19, 0xD0	; 208
    2218:	38 0f       	add	r19, r24
    221a:	3a 30       	cpi	r19, 0x0A	; 10
    221c:	78 f4       	brcc	.+30     	; 0x223c <vfprintf+0xb2>
    221e:	26 ff       	sbrs	r18, 6
    2220:	06 c0       	rjmp	.+12     	; 0x222e <vfprintf+0xa4>
    2222:	fa e0       	ldi	r31, 0x0A	; 10
    2224:	5f 9e       	mul	r5, r31
    2226:	30 0d       	add	r19, r0
    2228:	11 24       	eor	r1, r1
    222a:	53 2e       	mov	r5, r19
    222c:	13 c0       	rjmp	.+38     	; 0x2254 <vfprintf+0xca>
    222e:	8a e0       	ldi	r24, 0x0A	; 10
    2230:	38 9e       	mul	r3, r24
    2232:	30 0d       	add	r19, r0
    2234:	11 24       	eor	r1, r1
    2236:	33 2e       	mov	r3, r19
    2238:	20 62       	ori	r18, 0x20	; 32
    223a:	0c c0       	rjmp	.+24     	; 0x2254 <vfprintf+0xca>
    223c:	8e 32       	cpi	r24, 0x2E	; 46
    223e:	21 f4       	brne	.+8      	; 0x2248 <vfprintf+0xbe>
    2240:	26 fd       	sbrc	r18, 6
    2242:	6b c1       	rjmp	.+726    	; 0x251a <vfprintf+0x390>
    2244:	20 64       	ori	r18, 0x40	; 64
    2246:	06 c0       	rjmp	.+12     	; 0x2254 <vfprintf+0xca>
    2248:	8c 36       	cpi	r24, 0x6C	; 108
    224a:	11 f4       	brne	.+4      	; 0x2250 <vfprintf+0xc6>
    224c:	20 68       	ori	r18, 0x80	; 128
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <vfprintf+0xca>
    2250:	88 36       	cpi	r24, 0x68	; 104
    2252:	41 f4       	brne	.+16     	; 0x2264 <vfprintf+0xda>
    2254:	f6 01       	movw	r30, r12
    2256:	93 fd       	sbrc	r25, 3
    2258:	85 91       	lpm	r24, Z+
    225a:	93 ff       	sbrs	r25, 3
    225c:	81 91       	ld	r24, Z+
    225e:	6f 01       	movw	r12, r30
    2260:	81 11       	cpse	r24, r1
    2262:	c1 cf       	rjmp	.-126    	; 0x21e6 <vfprintf+0x5c>
    2264:	98 2f       	mov	r25, r24
    2266:	9f 7d       	andi	r25, 0xDF	; 223
    2268:	95 54       	subi	r25, 0x45	; 69
    226a:	93 30       	cpi	r25, 0x03	; 3
    226c:	28 f4       	brcc	.+10     	; 0x2278 <vfprintf+0xee>
    226e:	0c 5f       	subi	r16, 0xFC	; 252
    2270:	1f 4f       	sbci	r17, 0xFF	; 255
    2272:	ff e3       	ldi	r31, 0x3F	; 63
    2274:	f9 83       	std	Y+1, r31	; 0x01
    2276:	0d c0       	rjmp	.+26     	; 0x2292 <vfprintf+0x108>
    2278:	83 36       	cpi	r24, 0x63	; 99
    227a:	31 f0       	breq	.+12     	; 0x2288 <vfprintf+0xfe>
    227c:	83 37       	cpi	r24, 0x73	; 115
    227e:	71 f0       	breq	.+28     	; 0x229c <vfprintf+0x112>
    2280:	83 35       	cpi	r24, 0x53	; 83
    2282:	09 f0       	breq	.+2      	; 0x2286 <vfprintf+0xfc>
    2284:	5b c0       	rjmp	.+182    	; 0x233c <vfprintf+0x1b2>
    2286:	22 c0       	rjmp	.+68     	; 0x22cc <vfprintf+0x142>
    2288:	f8 01       	movw	r30, r16
    228a:	80 81       	ld	r24, Z
    228c:	89 83       	std	Y+1, r24	; 0x01
    228e:	0e 5f       	subi	r16, 0xFE	; 254
    2290:	1f 4f       	sbci	r17, 0xFF	; 255
    2292:	44 24       	eor	r4, r4
    2294:	43 94       	inc	r4
    2296:	51 2c       	mov	r5, r1
    2298:	54 01       	movw	r10, r8
    229a:	15 c0       	rjmp	.+42     	; 0x22c6 <vfprintf+0x13c>
    229c:	38 01       	movw	r6, r16
    229e:	f2 e0       	ldi	r31, 0x02	; 2
    22a0:	6f 0e       	add	r6, r31
    22a2:	71 1c       	adc	r7, r1
    22a4:	f8 01       	movw	r30, r16
    22a6:	a0 80       	ld	r10, Z
    22a8:	b1 80       	ldd	r11, Z+1	; 0x01
    22aa:	26 ff       	sbrs	r18, 6
    22ac:	03 c0       	rjmp	.+6      	; 0x22b4 <vfprintf+0x12a>
    22ae:	65 2d       	mov	r22, r5
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <vfprintf+0x12e>
    22b4:	6f ef       	ldi	r22, 0xFF	; 255
    22b6:	7f ef       	ldi	r23, 0xFF	; 255
    22b8:	c5 01       	movw	r24, r10
    22ba:	2c 87       	std	Y+12, r18	; 0x0c
    22bc:	0e 94 c5 12 	call	0x258a	; 0x258a <strnlen>
    22c0:	2c 01       	movw	r4, r24
    22c2:	83 01       	movw	r16, r6
    22c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    22c6:	2f 77       	andi	r18, 0x7F	; 127
    22c8:	22 2e       	mov	r2, r18
    22ca:	17 c0       	rjmp	.+46     	; 0x22fa <vfprintf+0x170>
    22cc:	38 01       	movw	r6, r16
    22ce:	f2 e0       	ldi	r31, 0x02	; 2
    22d0:	6f 0e       	add	r6, r31
    22d2:	71 1c       	adc	r7, r1
    22d4:	f8 01       	movw	r30, r16
    22d6:	a0 80       	ld	r10, Z
    22d8:	b1 80       	ldd	r11, Z+1	; 0x01
    22da:	26 ff       	sbrs	r18, 6
    22dc:	03 c0       	rjmp	.+6      	; 0x22e4 <vfprintf+0x15a>
    22de:	65 2d       	mov	r22, r5
    22e0:	70 e0       	ldi	r23, 0x00	; 0
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <vfprintf+0x15e>
    22e4:	6f ef       	ldi	r22, 0xFF	; 255
    22e6:	7f ef       	ldi	r23, 0xFF	; 255
    22e8:	c5 01       	movw	r24, r10
    22ea:	2c 87       	std	Y+12, r18	; 0x0c
    22ec:	0e 94 b3 12 	call	0x2566	; 0x2566 <strnlen_P>
    22f0:	2c 01       	movw	r4, r24
    22f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    22f4:	20 68       	ori	r18, 0x80	; 128
    22f6:	22 2e       	mov	r2, r18
    22f8:	83 01       	movw	r16, r6
    22fa:	23 fc       	sbrc	r2, 3
    22fc:	1b c0       	rjmp	.+54     	; 0x2334 <vfprintf+0x1aa>
    22fe:	83 2d       	mov	r24, r3
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	48 16       	cp	r4, r24
    2304:	59 06       	cpc	r5, r25
    2306:	b0 f4       	brcc	.+44     	; 0x2334 <vfprintf+0x1aa>
    2308:	b7 01       	movw	r22, r14
    230a:	80 e2       	ldi	r24, 0x20	; 32
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 29 10 	call	0x2052	; 0x2052 <fputc>
    2312:	3a 94       	dec	r3
    2314:	f4 cf       	rjmp	.-24     	; 0x22fe <vfprintf+0x174>
    2316:	f5 01       	movw	r30, r10
    2318:	27 fc       	sbrc	r2, 7
    231a:	85 91       	lpm	r24, Z+
    231c:	27 fe       	sbrs	r2, 7
    231e:	81 91       	ld	r24, Z+
    2320:	5f 01       	movw	r10, r30
    2322:	b7 01       	movw	r22, r14
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	0e 94 29 10 	call	0x2052	; 0x2052 <fputc>
    232a:	31 10       	cpse	r3, r1
    232c:	3a 94       	dec	r3
    232e:	f1 e0       	ldi	r31, 0x01	; 1
    2330:	4f 1a       	sub	r4, r31
    2332:	51 08       	sbc	r5, r1
    2334:	41 14       	cp	r4, r1
    2336:	51 04       	cpc	r5, r1
    2338:	71 f7       	brne	.-36     	; 0x2316 <vfprintf+0x18c>
    233a:	e5 c0       	rjmp	.+458    	; 0x2506 <vfprintf+0x37c>
    233c:	84 36       	cpi	r24, 0x64	; 100
    233e:	11 f0       	breq	.+4      	; 0x2344 <vfprintf+0x1ba>
    2340:	89 36       	cpi	r24, 0x69	; 105
    2342:	39 f5       	brne	.+78     	; 0x2392 <vfprintf+0x208>
    2344:	f8 01       	movw	r30, r16
    2346:	27 ff       	sbrs	r18, 7
    2348:	07 c0       	rjmp	.+14     	; 0x2358 <vfprintf+0x1ce>
    234a:	60 81       	ld	r22, Z
    234c:	71 81       	ldd	r23, Z+1	; 0x01
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	0c 5f       	subi	r16, 0xFC	; 252
    2354:	1f 4f       	sbci	r17, 0xFF	; 255
    2356:	08 c0       	rjmp	.+16     	; 0x2368 <vfprintf+0x1de>
    2358:	60 81       	ld	r22, Z
    235a:	71 81       	ldd	r23, Z+1	; 0x01
    235c:	88 27       	eor	r24, r24
    235e:	77 fd       	sbrc	r23, 7
    2360:	80 95       	com	r24
    2362:	98 2f       	mov	r25, r24
    2364:	0e 5f       	subi	r16, 0xFE	; 254
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	2f 76       	andi	r18, 0x6F	; 111
    236a:	b2 2e       	mov	r11, r18
    236c:	97 ff       	sbrs	r25, 7
    236e:	09 c0       	rjmp	.+18     	; 0x2382 <vfprintf+0x1f8>
    2370:	90 95       	com	r25
    2372:	80 95       	com	r24
    2374:	70 95       	com	r23
    2376:	61 95       	neg	r22
    2378:	7f 4f       	sbci	r23, 0xFF	; 255
    237a:	8f 4f       	sbci	r24, 0xFF	; 255
    237c:	9f 4f       	sbci	r25, 0xFF	; 255
    237e:	20 68       	ori	r18, 0x80	; 128
    2380:	b2 2e       	mov	r11, r18
    2382:	2a e0       	ldi	r18, 0x0A	; 10
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	a4 01       	movw	r20, r8
    2388:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__ultoa_invert>
    238c:	a8 2e       	mov	r10, r24
    238e:	a8 18       	sub	r10, r8
    2390:	44 c0       	rjmp	.+136    	; 0x241a <vfprintf+0x290>
    2392:	85 37       	cpi	r24, 0x75	; 117
    2394:	29 f4       	brne	.+10     	; 0x23a0 <vfprintf+0x216>
    2396:	2f 7e       	andi	r18, 0xEF	; 239
    2398:	b2 2e       	mov	r11, r18
    239a:	2a e0       	ldi	r18, 0x0A	; 10
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	25 c0       	rjmp	.+74     	; 0x23ea <vfprintf+0x260>
    23a0:	f2 2f       	mov	r31, r18
    23a2:	f9 7f       	andi	r31, 0xF9	; 249
    23a4:	bf 2e       	mov	r11, r31
    23a6:	8f 36       	cpi	r24, 0x6F	; 111
    23a8:	c1 f0       	breq	.+48     	; 0x23da <vfprintf+0x250>
    23aa:	18 f4       	brcc	.+6      	; 0x23b2 <vfprintf+0x228>
    23ac:	88 35       	cpi	r24, 0x58	; 88
    23ae:	79 f0       	breq	.+30     	; 0x23ce <vfprintf+0x244>
    23b0:	b4 c0       	rjmp	.+360    	; 0x251a <vfprintf+0x390>
    23b2:	80 37       	cpi	r24, 0x70	; 112
    23b4:	19 f0       	breq	.+6      	; 0x23bc <vfprintf+0x232>
    23b6:	88 37       	cpi	r24, 0x78	; 120
    23b8:	21 f0       	breq	.+8      	; 0x23c2 <vfprintf+0x238>
    23ba:	af c0       	rjmp	.+350    	; 0x251a <vfprintf+0x390>
    23bc:	2f 2f       	mov	r18, r31
    23be:	20 61       	ori	r18, 0x10	; 16
    23c0:	b2 2e       	mov	r11, r18
    23c2:	b4 fe       	sbrs	r11, 4
    23c4:	0d c0       	rjmp	.+26     	; 0x23e0 <vfprintf+0x256>
    23c6:	8b 2d       	mov	r24, r11
    23c8:	84 60       	ori	r24, 0x04	; 4
    23ca:	b8 2e       	mov	r11, r24
    23cc:	09 c0       	rjmp	.+18     	; 0x23e0 <vfprintf+0x256>
    23ce:	24 ff       	sbrs	r18, 4
    23d0:	0a c0       	rjmp	.+20     	; 0x23e6 <vfprintf+0x25c>
    23d2:	9f 2f       	mov	r25, r31
    23d4:	96 60       	ori	r25, 0x06	; 6
    23d6:	b9 2e       	mov	r11, r25
    23d8:	06 c0       	rjmp	.+12     	; 0x23e6 <vfprintf+0x25c>
    23da:	28 e0       	ldi	r18, 0x08	; 8
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	05 c0       	rjmp	.+10     	; 0x23ea <vfprintf+0x260>
    23e0:	20 e1       	ldi	r18, 0x10	; 16
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <vfprintf+0x260>
    23e6:	20 e1       	ldi	r18, 0x10	; 16
    23e8:	32 e0       	ldi	r19, 0x02	; 2
    23ea:	f8 01       	movw	r30, r16
    23ec:	b7 fe       	sbrs	r11, 7
    23ee:	07 c0       	rjmp	.+14     	; 0x23fe <vfprintf+0x274>
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	0c 5f       	subi	r16, 0xFC	; 252
    23fa:	1f 4f       	sbci	r17, 0xFF	; 255
    23fc:	06 c0       	rjmp	.+12     	; 0x240a <vfprintf+0x280>
    23fe:	60 81       	ld	r22, Z
    2400:	71 81       	ldd	r23, Z+1	; 0x01
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	0e 5f       	subi	r16, 0xFE	; 254
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	a4 01       	movw	r20, r8
    240c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__ultoa_invert>
    2410:	a8 2e       	mov	r10, r24
    2412:	a8 18       	sub	r10, r8
    2414:	fb 2d       	mov	r31, r11
    2416:	ff 77       	andi	r31, 0x7F	; 127
    2418:	bf 2e       	mov	r11, r31
    241a:	b6 fe       	sbrs	r11, 6
    241c:	0b c0       	rjmp	.+22     	; 0x2434 <vfprintf+0x2aa>
    241e:	2b 2d       	mov	r18, r11
    2420:	2e 7f       	andi	r18, 0xFE	; 254
    2422:	a5 14       	cp	r10, r5
    2424:	50 f4       	brcc	.+20     	; 0x243a <vfprintf+0x2b0>
    2426:	b4 fe       	sbrs	r11, 4
    2428:	0a c0       	rjmp	.+20     	; 0x243e <vfprintf+0x2b4>
    242a:	b2 fc       	sbrc	r11, 2
    242c:	08 c0       	rjmp	.+16     	; 0x243e <vfprintf+0x2b4>
    242e:	2b 2d       	mov	r18, r11
    2430:	2e 7e       	andi	r18, 0xEE	; 238
    2432:	05 c0       	rjmp	.+10     	; 0x243e <vfprintf+0x2b4>
    2434:	7a 2c       	mov	r7, r10
    2436:	2b 2d       	mov	r18, r11
    2438:	03 c0       	rjmp	.+6      	; 0x2440 <vfprintf+0x2b6>
    243a:	7a 2c       	mov	r7, r10
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <vfprintf+0x2b6>
    243e:	75 2c       	mov	r7, r5
    2440:	24 ff       	sbrs	r18, 4
    2442:	0d c0       	rjmp	.+26     	; 0x245e <vfprintf+0x2d4>
    2444:	fe 01       	movw	r30, r28
    2446:	ea 0d       	add	r30, r10
    2448:	f1 1d       	adc	r31, r1
    244a:	80 81       	ld	r24, Z
    244c:	80 33       	cpi	r24, 0x30	; 48
    244e:	11 f4       	brne	.+4      	; 0x2454 <vfprintf+0x2ca>
    2450:	29 7e       	andi	r18, 0xE9	; 233
    2452:	09 c0       	rjmp	.+18     	; 0x2466 <vfprintf+0x2dc>
    2454:	22 ff       	sbrs	r18, 2
    2456:	06 c0       	rjmp	.+12     	; 0x2464 <vfprintf+0x2da>
    2458:	73 94       	inc	r7
    245a:	73 94       	inc	r7
    245c:	04 c0       	rjmp	.+8      	; 0x2466 <vfprintf+0x2dc>
    245e:	82 2f       	mov	r24, r18
    2460:	86 78       	andi	r24, 0x86	; 134
    2462:	09 f0       	breq	.+2      	; 0x2466 <vfprintf+0x2dc>
    2464:	73 94       	inc	r7
    2466:	23 fd       	sbrc	r18, 3
    2468:	13 c0       	rjmp	.+38     	; 0x2490 <vfprintf+0x306>
    246a:	20 ff       	sbrs	r18, 0
    246c:	06 c0       	rjmp	.+12     	; 0x247a <vfprintf+0x2f0>
    246e:	5a 2c       	mov	r5, r10
    2470:	73 14       	cp	r7, r3
    2472:	18 f4       	brcc	.+6      	; 0x247a <vfprintf+0x2f0>
    2474:	53 0c       	add	r5, r3
    2476:	57 18       	sub	r5, r7
    2478:	73 2c       	mov	r7, r3
    247a:	73 14       	cp	r7, r3
    247c:	68 f4       	brcc	.+26     	; 0x2498 <vfprintf+0x30e>
    247e:	b7 01       	movw	r22, r14
    2480:	80 e2       	ldi	r24, 0x20	; 32
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	2c 87       	std	Y+12, r18	; 0x0c
    2486:	0e 94 29 10 	call	0x2052	; 0x2052 <fputc>
    248a:	73 94       	inc	r7
    248c:	2c 85       	ldd	r18, Y+12	; 0x0c
    248e:	f5 cf       	rjmp	.-22     	; 0x247a <vfprintf+0x2f0>
    2490:	73 14       	cp	r7, r3
    2492:	10 f4       	brcc	.+4      	; 0x2498 <vfprintf+0x30e>
    2494:	37 18       	sub	r3, r7
    2496:	01 c0       	rjmp	.+2      	; 0x249a <vfprintf+0x310>
    2498:	31 2c       	mov	r3, r1
    249a:	24 ff       	sbrs	r18, 4
    249c:	12 c0       	rjmp	.+36     	; 0x24c2 <vfprintf+0x338>
    249e:	b7 01       	movw	r22, r14
    24a0:	80 e3       	ldi	r24, 0x30	; 48
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	2c 87       	std	Y+12, r18	; 0x0c
    24a6:	0e 94 29 10 	call	0x2052	; 0x2052 <fputc>
    24aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    24ac:	22 ff       	sbrs	r18, 2
    24ae:	17 c0       	rjmp	.+46     	; 0x24de <vfprintf+0x354>
    24b0:	21 ff       	sbrs	r18, 1
    24b2:	03 c0       	rjmp	.+6      	; 0x24ba <vfprintf+0x330>
    24b4:	88 e5       	ldi	r24, 0x58	; 88
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	02 c0       	rjmp	.+4      	; 0x24be <vfprintf+0x334>
    24ba:	88 e7       	ldi	r24, 0x78	; 120
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	b7 01       	movw	r22, r14
    24c0:	0c c0       	rjmp	.+24     	; 0x24da <vfprintf+0x350>
    24c2:	82 2f       	mov	r24, r18
    24c4:	86 78       	andi	r24, 0x86	; 134
    24c6:	59 f0       	breq	.+22     	; 0x24de <vfprintf+0x354>
    24c8:	21 fd       	sbrc	r18, 1
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <vfprintf+0x346>
    24cc:	80 e2       	ldi	r24, 0x20	; 32
    24ce:	01 c0       	rjmp	.+2      	; 0x24d2 <vfprintf+0x348>
    24d0:	8b e2       	ldi	r24, 0x2B	; 43
    24d2:	27 fd       	sbrc	r18, 7
    24d4:	8d e2       	ldi	r24, 0x2D	; 45
    24d6:	b7 01       	movw	r22, r14
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	0e 94 29 10 	call	0x2052	; 0x2052 <fputc>
    24de:	a5 14       	cp	r10, r5
    24e0:	38 f4       	brcc	.+14     	; 0x24f0 <vfprintf+0x366>
    24e2:	b7 01       	movw	r22, r14
    24e4:	80 e3       	ldi	r24, 0x30	; 48
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	0e 94 29 10 	call	0x2052	; 0x2052 <fputc>
    24ec:	5a 94       	dec	r5
    24ee:	f7 cf       	rjmp	.-18     	; 0x24de <vfprintf+0x354>
    24f0:	aa 94       	dec	r10
    24f2:	f4 01       	movw	r30, r8
    24f4:	ea 0d       	add	r30, r10
    24f6:	f1 1d       	adc	r31, r1
    24f8:	80 81       	ld	r24, Z
    24fa:	b7 01       	movw	r22, r14
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	0e 94 29 10 	call	0x2052	; 0x2052 <fputc>
    2502:	a1 10       	cpse	r10, r1
    2504:	f5 cf       	rjmp	.-22     	; 0x24f0 <vfprintf+0x366>
    2506:	33 20       	and	r3, r3
    2508:	09 f4       	brne	.+2      	; 0x250c <vfprintf+0x382>
    250a:	51 ce       	rjmp	.-862    	; 0x21ae <vfprintf+0x24>
    250c:	b7 01       	movw	r22, r14
    250e:	80 e2       	ldi	r24, 0x20	; 32
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	0e 94 29 10 	call	0x2052	; 0x2052 <fputc>
    2516:	3a 94       	dec	r3
    2518:	f6 cf       	rjmp	.-20     	; 0x2506 <vfprintf+0x37c>
    251a:	f7 01       	movw	r30, r14
    251c:	86 81       	ldd	r24, Z+6	; 0x06
    251e:	97 81       	ldd	r25, Z+7	; 0x07
    2520:	02 c0       	rjmp	.+4      	; 0x2526 <vfprintf+0x39c>
    2522:	8f ef       	ldi	r24, 0xFF	; 255
    2524:	9f ef       	ldi	r25, 0xFF	; 255
    2526:	2c 96       	adiw	r28, 0x0c	; 12
    2528:	e2 e1       	ldi	r30, 0x12	; 18
    252a:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__>

0000252e <calloc>:
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	86 9f       	mul	r24, r22
    2538:	80 01       	movw	r16, r0
    253a:	87 9f       	mul	r24, r23
    253c:	10 0d       	add	r17, r0
    253e:	96 9f       	mul	r25, r22
    2540:	10 0d       	add	r17, r0
    2542:	11 24       	eor	r1, r1
    2544:	c8 01       	movw	r24, r16
    2546:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <malloc>
    254a:	ec 01       	movw	r28, r24
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	29 f0       	breq	.+10     	; 0x255a <calloc+0x2c>
    2550:	a8 01       	movw	r20, r16
    2552:	60 e0       	ldi	r22, 0x00	; 0
    2554:	70 e0       	ldi	r23, 0x00	; 0
    2556:	0e 94 be 12 	call	0x257c	; 0x257c <memset>
    255a:	ce 01       	movw	r24, r28
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	08 95       	ret

00002566 <strnlen_P>:
    2566:	fc 01       	movw	r30, r24
    2568:	05 90       	lpm	r0, Z+
    256a:	61 50       	subi	r22, 0x01	; 1
    256c:	70 40       	sbci	r23, 0x00	; 0
    256e:	01 10       	cpse	r0, r1
    2570:	d8 f7       	brcc	.-10     	; 0x2568 <strnlen_P+0x2>
    2572:	80 95       	com	r24
    2574:	90 95       	com	r25
    2576:	8e 0f       	add	r24, r30
    2578:	9f 1f       	adc	r25, r31
    257a:	08 95       	ret

0000257c <memset>:
    257c:	dc 01       	movw	r26, r24
    257e:	01 c0       	rjmp	.+2      	; 0x2582 <memset+0x6>
    2580:	6d 93       	st	X+, r22
    2582:	41 50       	subi	r20, 0x01	; 1
    2584:	50 40       	sbci	r21, 0x00	; 0
    2586:	e0 f7       	brcc	.-8      	; 0x2580 <memset+0x4>
    2588:	08 95       	ret

0000258a <strnlen>:
    258a:	fc 01       	movw	r30, r24
    258c:	61 50       	subi	r22, 0x01	; 1
    258e:	70 40       	sbci	r23, 0x00	; 0
    2590:	01 90       	ld	r0, Z+
    2592:	01 10       	cpse	r0, r1
    2594:	d8 f7       	brcc	.-10     	; 0x258c <strnlen+0x2>
    2596:	80 95       	com	r24
    2598:	90 95       	com	r25
    259a:	8e 0f       	add	r24, r30
    259c:	9f 1f       	adc	r25, r31
    259e:	08 95       	ret

000025a0 <__ultoa_invert>:
    25a0:	fa 01       	movw	r30, r20
    25a2:	aa 27       	eor	r26, r26
    25a4:	28 30       	cpi	r18, 0x08	; 8
    25a6:	51 f1       	breq	.+84     	; 0x25fc <__ultoa_invert+0x5c>
    25a8:	20 31       	cpi	r18, 0x10	; 16
    25aa:	81 f1       	breq	.+96     	; 0x260c <__ultoa_invert+0x6c>
    25ac:	e8 94       	clt
    25ae:	6f 93       	push	r22
    25b0:	6e 7f       	andi	r22, 0xFE	; 254
    25b2:	6e 5f       	subi	r22, 0xFE	; 254
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	8f 4f       	sbci	r24, 0xFF	; 255
    25b8:	9f 4f       	sbci	r25, 0xFF	; 255
    25ba:	af 4f       	sbci	r26, 0xFF	; 255
    25bc:	b1 e0       	ldi	r27, 0x01	; 1
    25be:	3e d0       	rcall	.+124    	; 0x263c <__ultoa_invert+0x9c>
    25c0:	b4 e0       	ldi	r27, 0x04	; 4
    25c2:	3c d0       	rcall	.+120    	; 0x263c <__ultoa_invert+0x9c>
    25c4:	67 0f       	add	r22, r23
    25c6:	78 1f       	adc	r23, r24
    25c8:	89 1f       	adc	r24, r25
    25ca:	9a 1f       	adc	r25, r26
    25cc:	a1 1d       	adc	r26, r1
    25ce:	68 0f       	add	r22, r24
    25d0:	79 1f       	adc	r23, r25
    25d2:	8a 1f       	adc	r24, r26
    25d4:	91 1d       	adc	r25, r1
    25d6:	a1 1d       	adc	r26, r1
    25d8:	6a 0f       	add	r22, r26
    25da:	71 1d       	adc	r23, r1
    25dc:	81 1d       	adc	r24, r1
    25de:	91 1d       	adc	r25, r1
    25e0:	a1 1d       	adc	r26, r1
    25e2:	20 d0       	rcall	.+64     	; 0x2624 <__ultoa_invert+0x84>
    25e4:	09 f4       	brne	.+2      	; 0x25e8 <__ultoa_invert+0x48>
    25e6:	68 94       	set
    25e8:	3f 91       	pop	r19
    25ea:	2a e0       	ldi	r18, 0x0A	; 10
    25ec:	26 9f       	mul	r18, r22
    25ee:	11 24       	eor	r1, r1
    25f0:	30 19       	sub	r19, r0
    25f2:	30 5d       	subi	r19, 0xD0	; 208
    25f4:	31 93       	st	Z+, r19
    25f6:	de f6       	brtc	.-74     	; 0x25ae <__ultoa_invert+0xe>
    25f8:	cf 01       	movw	r24, r30
    25fa:	08 95       	ret
    25fc:	46 2f       	mov	r20, r22
    25fe:	47 70       	andi	r20, 0x07	; 7
    2600:	40 5d       	subi	r20, 0xD0	; 208
    2602:	41 93       	st	Z+, r20
    2604:	b3 e0       	ldi	r27, 0x03	; 3
    2606:	0f d0       	rcall	.+30     	; 0x2626 <__ultoa_invert+0x86>
    2608:	c9 f7       	brne	.-14     	; 0x25fc <__ultoa_invert+0x5c>
    260a:	f6 cf       	rjmp	.-20     	; 0x25f8 <__ultoa_invert+0x58>
    260c:	46 2f       	mov	r20, r22
    260e:	4f 70       	andi	r20, 0x0F	; 15
    2610:	40 5d       	subi	r20, 0xD0	; 208
    2612:	4a 33       	cpi	r20, 0x3A	; 58
    2614:	18 f0       	brcs	.+6      	; 0x261c <__ultoa_invert+0x7c>
    2616:	49 5d       	subi	r20, 0xD9	; 217
    2618:	31 fd       	sbrc	r19, 1
    261a:	40 52       	subi	r20, 0x20	; 32
    261c:	41 93       	st	Z+, r20
    261e:	02 d0       	rcall	.+4      	; 0x2624 <__ultoa_invert+0x84>
    2620:	a9 f7       	brne	.-22     	; 0x260c <__ultoa_invert+0x6c>
    2622:	ea cf       	rjmp	.-44     	; 0x25f8 <__ultoa_invert+0x58>
    2624:	b4 e0       	ldi	r27, 0x04	; 4
    2626:	a6 95       	lsr	r26
    2628:	97 95       	ror	r25
    262a:	87 95       	ror	r24
    262c:	77 95       	ror	r23
    262e:	67 95       	ror	r22
    2630:	ba 95       	dec	r27
    2632:	c9 f7       	brne	.-14     	; 0x2626 <__ultoa_invert+0x86>
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	61 05       	cpc	r22, r1
    2638:	71 05       	cpc	r23, r1
    263a:	08 95       	ret
    263c:	9b 01       	movw	r18, r22
    263e:	ac 01       	movw	r20, r24
    2640:	0a 2e       	mov	r0, r26
    2642:	06 94       	lsr	r0
    2644:	57 95       	ror	r21
    2646:	47 95       	ror	r20
    2648:	37 95       	ror	r19
    264a:	27 95       	ror	r18
    264c:	ba 95       	dec	r27
    264e:	c9 f7       	brne	.-14     	; 0x2642 <__ultoa_invert+0xa2>
    2650:	62 0f       	add	r22, r18
    2652:	73 1f       	adc	r23, r19
    2654:	84 1f       	adc	r24, r20
    2656:	95 1f       	adc	r25, r21
    2658:	a0 1d       	adc	r26, r0
    265a:	08 95       	ret

0000265c <__prologue_saves__>:
    265c:	2f 92       	push	r2
    265e:	3f 92       	push	r3
    2660:	4f 92       	push	r4
    2662:	5f 92       	push	r5
    2664:	6f 92       	push	r6
    2666:	7f 92       	push	r7
    2668:	8f 92       	push	r8
    266a:	9f 92       	push	r9
    266c:	af 92       	push	r10
    266e:	bf 92       	push	r11
    2670:	cf 92       	push	r12
    2672:	df 92       	push	r13
    2674:	ef 92       	push	r14
    2676:	ff 92       	push	r15
    2678:	0f 93       	push	r16
    267a:	1f 93       	push	r17
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
    2684:	ca 1b       	sub	r28, r26
    2686:	db 0b       	sbc	r29, r27
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	09 94       	ijmp

00002694 <__epilogue_restores__>:
    2694:	2a 88       	ldd	r2, Y+18	; 0x12
    2696:	39 88       	ldd	r3, Y+17	; 0x11
    2698:	48 88       	ldd	r4, Y+16	; 0x10
    269a:	5f 84       	ldd	r5, Y+15	; 0x0f
    269c:	6e 84       	ldd	r6, Y+14	; 0x0e
    269e:	7d 84       	ldd	r7, Y+13	; 0x0d
    26a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    26a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    26a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    26a6:	b9 84       	ldd	r11, Y+9	; 0x09
    26a8:	c8 84       	ldd	r12, Y+8	; 0x08
    26aa:	df 80       	ldd	r13, Y+7	; 0x07
    26ac:	ee 80       	ldd	r14, Y+6	; 0x06
    26ae:	fd 80       	ldd	r15, Y+5	; 0x05
    26b0:	0c 81       	ldd	r16, Y+4	; 0x04
    26b2:	1b 81       	ldd	r17, Y+3	; 0x03
    26b4:	aa 81       	ldd	r26, Y+2	; 0x02
    26b6:	b9 81       	ldd	r27, Y+1	; 0x01
    26b8:	ce 0f       	add	r28, r30
    26ba:	d1 1d       	adc	r29, r1
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	ed 01       	movw	r28, r26
    26c8:	08 95       	ret

000026ca <_exit>:
    26ca:	f8 94       	cli

000026cc <__stop_program>:
    26cc:	ff cf       	rjmp	.-2      	; 0x26cc <__stop_program>
