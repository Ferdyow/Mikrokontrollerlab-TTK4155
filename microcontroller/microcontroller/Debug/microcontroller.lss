
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000029e  00800100  00002696  0000272a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000056  0080039e  0080039e  000029c8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000029c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000430  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004c2c  00000000  00000000  00002e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001b9c  00000000  00000000  00007a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000178e  00000000  00000000  0000961c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ba4  00000000  00000000  0000adac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d02  00000000  00000000  0000b950  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002a4e  00000000  00000000  0000c652  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000368  00000000  00000000  0000f0a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__ctors_end>
       4:	0c 94 89 02 	jmp	0x512	; 0x512 <__vector_1>
       8:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
       c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      10:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      14:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      18:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      1c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      20:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      24:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      28:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      2c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      30:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      34:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      38:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      3c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      40:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      44:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      48:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      4c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      50:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      54:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      58:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      5c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      60:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      64:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      68:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>
      6c:	0c 94 01 02 	jmp	0x402	; 0x402 <__bad_interrupt>

00000070 <LETTERS_BIG>:
      70:	30 31 32 33 34 35 36 37 38 39 21 3f 51 57 45 52     0123456789!?QWER
      80:	54 59 55 49 4f 50 29 2b 41 53 44 46 47 48 4a 4b     TYUIOP)+ASDFGHJK
      90:	4c 28 27 2d 5a 58 43 56 42 4e 4d 2c 2e 3b 3a 23     L('-ZXCVBNM,.;:#

000000a0 <LETTERS_SMALL>:
      a0:	30 31 32 33 34 35 36 37 38 39 21 3f 71 77 65 72     0123456789!?qwer
      b0:	74 79 75 69 6f 70 26 2b 61 73 64 66 67 68 6a 6b     tyuiop&+asdfghjk
      c0:	6c 25 24 2d 7a 78 63 76 62 6e 6d 2c 2e 3b 3a 23     l%$-zxcvbnm,.;:#

000000d0 <font8>:
	...
      d8:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
      e8:	14 7f 7f 14 7f 7f 14 00 20 54 54 38 54 54 58 00     ........ TT8TTX.
      f8:	38 64 54 54 4c 38 00 00 20 50 54 55 54 78 40 00     8dTTL8.. PTUTx@.
     108:	60 18 16 11 7f 49 49 00 5c 22 51 49 45 22 1d 00     `....II.\"QIE"..
     118:	60 30 28 25 28 30 60 00 08 2a 3e 1c 1c 3e 2a 08     `0(%(0`..*>..>*.
     128:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     138:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     148:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     158:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     168:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     178:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     188:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     198:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1a8:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1b8:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1c8:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1d8:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     1e8:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     1f8:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     208:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     218:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     228:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     238:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     248:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     258:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     268:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     278:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     288:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     298:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2a8:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2b8:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2c8:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2d8:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     2e8:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     2f8:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     308:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     318:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     328:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     338:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     348:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     358:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     368:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     378:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     388:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     398:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3a8:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3b8:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

000003c8 <__ctors_end>:
     3c8:	11 24       	eor	r1, r1
     3ca:	1f be       	out	0x3f, r1	; 63
     3cc:	cf ef       	ldi	r28, 0xFF	; 255
     3ce:	d4 e0       	ldi	r29, 0x04	; 4
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	cd bf       	out	0x3d, r28	; 61

000003d4 <__do_copy_data>:
     3d4:	13 e0       	ldi	r17, 0x03	; 3
     3d6:	a0 e0       	ldi	r26, 0x00	; 0
     3d8:	b1 e0       	ldi	r27, 0x01	; 1
     3da:	e6 e9       	ldi	r30, 0x96	; 150
     3dc:	f6 e2       	ldi	r31, 0x26	; 38
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <__do_copy_data+0x10>
     3e0:	05 90       	lpm	r0, Z+
     3e2:	0d 92       	st	X+, r0
     3e4:	ae 39       	cpi	r26, 0x9E	; 158
     3e6:	b1 07       	cpc	r27, r17
     3e8:	d9 f7       	brne	.-10     	; 0x3e0 <__do_copy_data+0xc>

000003ea <__do_clear_bss>:
     3ea:	23 e0       	ldi	r18, 0x03	; 3
     3ec:	ae e9       	ldi	r26, 0x9E	; 158
     3ee:	b3 e0       	ldi	r27, 0x03	; 3
     3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <.do_clear_bss_start>

000003f2 <.do_clear_bss_loop>:
     3f2:	1d 92       	st	X+, r1

000003f4 <.do_clear_bss_start>:
     3f4:	a4 3f       	cpi	r26, 0xF4	; 244
     3f6:	b2 07       	cpc	r27, r18
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <.do_clear_bss_loop>
     3fa:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <main>
     3fe:	0c 94 49 13 	jmp	0x2692	; 0x2692 <_exit>

00000402 <__bad_interrupt>:
     402:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000406 <ADC_init>:
#include <avr/io.h>


void ADC_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
     406:	30 98       	cbi	0x06, 0	; 6
     408:	08 95       	ret

0000040a <ADC_read>:
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     40a:	84 30       	cpi	r24, 0x04	; 4
     40c:	40 f4       	brcc	.+16     	; 0x41e <ADC_read+0x14>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
     40e:	8c 5f       	subi	r24, 0xFC	; 252
     410:	80 93 00 14 	sts	0x1400, r24
	
	//wait 'til /INTR is low
	while(test_bit(PINE, PINE0));
     414:	28 99       	sbic	0x05, 0	; 5
     416:	fe cf       	rjmp	.-4      	; 0x414 <ADC_read+0xa>
	//reset interrupt
	inter = 0;
	*/

	//return current value
	return *adc; 
     418:	80 91 00 14 	lds	r24, 0x1400
     41c:	08 95       	ret
char ADC_read(char channel){
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	//invalid input
	if(channel > 3) return 0;
     41e:	80 e0       	ldi	r24, 0x00	; 0
	inter = 0;
	*/

	//return current value
	return *adc; 
     420:	08 95       	ret

00000422 <brightness_init>:
#include "joy.h"
#include "OLED_driver.h"
#include "defines.h"


void brightness_init(void) {
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
	OLED_reset();
     42a:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <OLED_reset>
	fprintf(OLED, "%s ", "l_slider:");
     42e:	89 e6       	ldi	r24, 0x69	; 105
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	9f 93       	push	r25
     434:	8f 93       	push	r24
     436:	03 e7       	ldi	r16, 0x73	; 115
     438:	11 e0       	ldi	r17, 0x01	; 1
     43a:	1f 93       	push	r17
     43c:	0f 93       	push	r16
     43e:	c6 e0       	ldi	r28, 0x06	; 6
     440:	d1 e0       	ldi	r29, 0x01	; 1
     442:	df 93       	push	r29
     444:	cf 93       	push	r28
     446:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
	OLED_pos(1,0);
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	0e 94 21 0c 	call	0x1842	; 0x1842 <OLED_pos>
	fprintf(OLED, "%s ", "sets brightness");
     452:	87 e7       	ldi	r24, 0x77	; 119
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	9f 93       	push	r25
     458:	8f 93       	push	r24
     45a:	1f 93       	push	r17
     45c:	0f 93       	push	r16
     45e:	df 93       	push	r29
     460:	cf 93       	push	r28
     462:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
	OLED_pos(2,0);
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	0e 94 21 0c 	call	0x1842	; 0x1842 <OLED_pos>
	fprintf(OLED, "%s ", "l_button: back");
     46e:	87 e8       	ldi	r24, 0x87	; 135
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	9f 93       	push	r25
     474:	8f 93       	push	r24
     476:	1f 93       	push	r17
     478:	0f 93       	push	r16
     47a:	df 93       	push	r29
     47c:	cf 93       	push	r28
     47e:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
	for (int line = 4; line < 8; line++) {
		OLED_set_line(line);
     482:	84 e0       	ldi	r24, 0x04	; 4
     484:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <OLED_set_line>
     488:	85 e0       	ldi	r24, 0x05	; 5
     48a:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <OLED_set_line>
     48e:	86 e0       	ldi	r24, 0x06	; 6
     490:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <OLED_set_line>
     494:	87 e0       	ldi	r24, 0x07	; 7
     496:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <OLED_set_line>
     49a:	8d b7       	in	r24, 0x3d	; 61
     49c:	9e b7       	in	r25, 0x3e	; 62
     49e:	42 96       	adiw	r24, 0x12	; 18
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	9e bf       	out	0x3e, r25	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	8d bf       	out	0x3d, r24	; 61
	}
	
}
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	08 95       	ret

000004b4 <brightness_run>:

void brightness_run(void) {
	brightness_init();
     4b4:	0e 94 11 02 	call	0x422	; 0x422 <brightness_init>
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <brightness_run+0x10>
		slider_position = SLI_getPosition();
     4ba:	0e 94 29 06 	call	0xc52	; 0xc52 <SLI_getPosition>
     4be:	86 2f       	mov	r24, r22
		//printf("slider_position (left) %d\n", slider_position.left);
		OLED_set_brightness(slider_position.left); 
     4c0:	0e 94 b0 0c 	call	0x1960	; 0x1960 <OLED_set_brightness>
}

void brightness_run(void) {
	brightness_init();
	SLI_position_t slider_position;
	while (!JOY_button_pressed(LEFT_BUTTON)) {
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	0e 94 ad 05 	call	0xb5a	; 0xb5a <JOY_button_pressed>
     4ca:	89 2b       	or	r24, r25
     4cc:	b1 f3       	breq	.-20     	; 0x4ba <brightness_run+0x6>
		slider_position = SLI_getPosition();
		//printf("slider_position (left) %d\n", slider_position.left);
		OLED_set_brightness(slider_position.left); 
	}
     4ce:	08 95       	ret

000004d0 <CAN_int_vect>:
	
	CAN_int_vect();
}


void CAN_int_vect() {
     4d0:	cf 93       	push	r28
	uint8_t int_flags = MCP2515_read(MCP_CANINTF);
     4d2:	8c e2       	ldi	r24, 0x2C	; 44
     4d4:	0e 94 0c 0a 	call	0x1418	; 0x1418 <MCP2515_read>
     4d8:	c8 2f       	mov	r28, r24
	if(int_flags & MCP_RX0IF){
     4da:	80 ff       	sbrs	r24, 0
     4dc:	0b c0       	rjmp	.+22     	; 0x4f4 <CAN_int_vect+0x24>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX0IF, 0x00);
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	61 e0       	ldi	r22, 0x01	; 1
     4e2:	8c e2       	ldi	r24, 0x2C	; 44
     4e4:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP2515_bit_modify>
		flag_RX0 = 1;
     4e8:	21 e0       	ldi	r18, 0x01	; 1
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	30 93 a1 03 	sts	0x03A1, r19
     4f0:	20 93 a0 03 	sts	0x03A0, r18
	}
			
	if(int_flags & MCP_RX1IF){
     4f4:	c1 ff       	sbrs	r28, 1
     4f6:	0b c0       	rjmp	.+22     	; 0x50e <__stack+0xf>
		MCP2515_bit_modify(MCP_CANINTF, MCP_RX1IF, 0x00);
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	62 e0       	ldi	r22, 0x02	; 2
     4fc:	8c e2       	ldi	r24, 0x2C	; 44
     4fe:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP2515_bit_modify>
		flag_RX1 = 1;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	90 93 9f 03 	sts	0x039F, r25
     50a:	80 93 9e 03 	sts	0x039E, r24
	}
}
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <__vector_1>:

volatile int flag_RX0 = 0;
volatile int flag_RX1 = 0;

//interrupt service routine
ISR(INT0_vect){
     512:	1f 92       	push	r1
     514:	0f 92       	push	r0
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	0f 92       	push	r0
     51a:	11 24       	eor	r1, r1
     51c:	2f 93       	push	r18
     51e:	3f 93       	push	r19
     520:	4f 93       	push	r20
     522:	5f 93       	push	r21
     524:	6f 93       	push	r22
     526:	7f 93       	push	r23
     528:	8f 93       	push	r24
     52a:	9f 93       	push	r25
     52c:	af 93       	push	r26
     52e:	bf 93       	push	r27
     530:	ef 93       	push	r30
     532:	ff 93       	push	r31
	
	CAN_int_vect();
     534:	0e 94 68 02 	call	0x4d0	; 0x4d0 <CAN_int_vect>
}
     538:	ff 91       	pop	r31
     53a:	ef 91       	pop	r30
     53c:	bf 91       	pop	r27
     53e:	af 91       	pop	r26
     540:	9f 91       	pop	r25
     542:	8f 91       	pop	r24
     544:	7f 91       	pop	r23
     546:	6f 91       	pop	r22
     548:	5f 91       	pop	r21
     54a:	4f 91       	pop	r20
     54c:	3f 91       	pop	r19
     54e:	2f 91       	pop	r18
     550:	0f 90       	pop	r0
     552:	0f be       	out	0x3f, r0	; 63
     554:	0f 90       	pop	r0
     556:	1f 90       	pop	r1
     558:	18 95       	reti

0000055a <CAN_init>:
//hex to binary is left as an exercise to the reader :)
void CAN_init() {
	
	//enable external interrupt on ATmega162
	//enable interrupt on MCP2515
	MCP2515_init();
     55a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MCP2515_init>
	
	//enable rollover: message will rollover to RX1 if RX0 is full
	//also sets filter for RXB0 to only accept all transmission
	MCP2515_bit_modify(MCP_RXB0CTRL, 0x64, 0xFF);  //0b 0010 0100
     55e:	4f ef       	ldi	r20, 0xFF	; 255
     560:	64 e6       	ldi	r22, 0x64	; 100
     562:	80 e6       	ldi	r24, 0x60	; 96
     564:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP2515_bit_modify>

	
	//set filter for RXB1 to accept all transmission
	MCP2515_bit_modify(MCP_RXB1CTRL, 0x60, 0xFF);
     568:	4f ef       	ldi	r20, 0xFF	; 255
     56a:	60 e6       	ldi	r22, 0x60	; 96
     56c:	80 e7       	ldi	r24, 0x70	; 112
     56e:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP2515_bit_modify>

	//CANINTE contains the interrupt enable bits for each individual interrupt
	//CANINTF cointains the interrupt flags for each interrupt source. this should be cleared by a bit_modify
	
	//MCP2515_bit_modify(MCP_CANINTE,0x03, 0x03);
	MCP2515_write(MCP_CANINTE, 0x03);
     572:	63 e0       	ldi	r22, 0x03	; 3
     574:	8b e2       	ldi	r24, 0x2B	; 43
     576:	0e 94 1e 0a 	call	0x143c	; 0x143c <MCP2515_write>
	//interrupts for RX1, RX0 enabled
	
	//set loopback mode: 0x40
	//later use normal mode 0x00
	MCP2515_bit_modify(MCP_CANCTRL,0xE0, 0x00);
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	60 ee       	ldi	r22, 0xE0	; 224
     57e:	8f e0       	ldi	r24, 0x0F	; 15
     580:	0e 94 3e 0a 	call	0x147c	; 0x147c <MCP2515_bit_modify>
     584:	08 95       	ret

00000586 <CAN_transmit_complete>:
}


bool CAN_transmit_complete(int transmit_buffer_index) {
	// GOES WRONG IN HERE
	const int address = MCP_TXB0CTRL + BUFFER_LENGTH * transmit_buffer_index;
     586:	03 96       	adiw	r24, 0x03	; 3
	return !(MCP2515_read(address) & MCP_TXREQ);
     588:	82 95       	swap	r24
     58a:	80 7f       	andi	r24, 0xF0	; 240
     58c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <MCP2515_read>
     590:	83 fb       	bst	r24, 3
     592:	88 27       	eor	r24, r24
     594:	80 f9       	bld	r24, 0
}
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	89 27       	eor	r24, r25
     59a:	08 95       	ret

0000059c <CAN_message_send>:
	
	

}

void CAN_message_send(can_message* msg) {
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	ec 01       	movw	r28, r24
	//	return; //ERROR
	//}


	//transmit the correct ID
	uint8_t id_high = msg->id / 8;
     5a6:	08 81       	ld	r16, Y
     5a8:	19 81       	ldd	r17, Y+1	; 0x01
     5aa:	b8 01       	movw	r22, r16
     5ac:	76 95       	lsr	r23
     5ae:	67 95       	ror	r22
     5b0:	76 95       	lsr	r23
     5b2:	67 95       	ror	r22
     5b4:	76 95       	lsr	r23
     5b6:	67 95       	ror	r22
	uint8_t id_low = msg->id % 8;
	

	MCP2515_write(MCP_TXB0SIDH + BUFFER_LENGTH * buffer_numb, id_high);
     5b8:	81 e3       	ldi	r24, 0x31	; 49
     5ba:	0e 94 1e 0a 	call	0x143c	; 0x143c <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL + BUFFER_LENGTH * buffer_numb, (id_low << 5));
     5be:	60 2f       	mov	r22, r16
     5c0:	62 95       	swap	r22
     5c2:	66 0f       	add	r22, r22
     5c4:	60 7e       	andi	r22, 0xE0	; 224
     5c6:	82 e3       	ldi	r24, 0x32	; 50
     5c8:	0e 94 1e 0a 	call	0x143c	; 0x143c <MCP2515_write>
	//resten av TXB0SIDL er 0 siden vi har standard identifier

	//transmit the data length
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);
     5cc:	6a 81       	ldd	r22, Y+2	; 0x02
     5ce:	85 e3       	ldi	r24, 0x35	; 53
     5d0:	0e 94 1e 0a 	call	0x143c	; 0x143c <MCP2515_write>

	//transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     5d4:	8a 81       	ldd	r24, Y+2	; 0x02
     5d6:	88 23       	and	r24, r24
     5d8:	69 f0       	breq	.+26     	; 0x5f4 <CAN_message_send+0x58>
     5da:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
     5dc:	fe 01       	movw	r30, r28
     5de:	e1 0f       	add	r30, r17
     5e0:	f1 1d       	adc	r31, r1
     5e2:	63 81       	ldd	r22, Z+3	; 0x03
     5e4:	86 e3       	ldi	r24, 0x36	; 54
     5e6:	81 0f       	add	r24, r17
     5e8:	0e 94 1e 0a 	call	0x143c	; 0x143c <MCP2515_write>

	//transmit the data length
	MCP2515_write(MCP_TXB0DLC + BUFFER_LENGTH * buffer_numb, msg->length);

	//transmit the data
	for (uint8_t byte = 0; byte < msg->length; byte++) {
     5ec:	1f 5f       	subi	r17, 0xFF	; 255
     5ee:	8a 81       	ldd	r24, Y+2	; 0x02
     5f0:	18 17       	cp	r17, r24
     5f2:	a0 f3       	brcs	.-24     	; 0x5dc <CAN_message_send+0x40>
		MCP2515_write((MCP_TXB0D0 + byte) + BUFFER_LENGTH * buffer_numb, msg->data[byte]);
	}
	
	uint8_t buffer_states = (uint8_t)(1 << buffer_numb);
	MCP2515_request_to_send(buffer_states);
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	0e 94 32 0a 	call	0x1464	; 0x1464 <MCP2515_request_to_send>
	while(!CAN_transmit_complete(0));
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 c3 02 	call	0x586	; 0x586 <CAN_transmit_complete>
     602:	88 23       	and	r24, r24
     604:	d1 f3       	breq	.-12     	; 0x5fa <CAN_message_send+0x5e>
	
}
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	08 95       	ret

00000610 <CAN_message_receive>:
	const int address = MCP_TXB0CTRL + BUFFER_LENGTH * transmit_buffer_index;
	return !(MCP2515_read(address) & MCP_TXREQ);
}


void CAN_message_receive(can_message* received_msg){
     610:	df 92       	push	r13
     612:	ef 92       	push	r14
     614:	ff 92       	push	r15
     616:	0f 93       	push	r16
     618:	1f 93       	push	r17
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	8c 01       	movw	r16, r24
	cli();
     620:	f8 94       	cli
	int receive_buffer_index;
	if(flag_RX0){
     622:	80 91 a0 03 	lds	r24, 0x03A0
     626:	90 91 a1 03 	lds	r25, 0x03A1
     62a:	89 2b       	or	r24, r25
     62c:	39 f0       	breq	.+14     	; 0x63c <CAN_message_receive+0x2c>
		receive_buffer_index = 0;
		flag_RX0 = 0;
     62e:	10 92 a1 03 	sts	0x03A1, r1
     632:	10 92 a0 03 	sts	0x03A0, r1

void CAN_message_receive(can_message* received_msg){
	cli();
	int receive_buffer_index;
	if(flag_RX0){
		receive_buffer_index = 0;
     636:	c0 e0       	ldi	r28, 0x00	; 0
     638:	d0 e0       	ldi	r29, 0x00	; 0
     63a:	11 c0       	rjmp	.+34     	; 0x65e <CAN_message_receive+0x4e>
		flag_RX0 = 0;
	}
	else if(flag_RX1){
     63c:	80 91 9e 03 	lds	r24, 0x039E
     640:	90 91 9f 03 	lds	r25, 0x039F
     644:	89 2b       	or	r24, r25
     646:	39 f0       	breq	.+14     	; 0x656 <CAN_message_receive+0x46>
		receive_buffer_index = 1;
		flag_RX1 = 0;
     648:	10 92 9f 03 	sts	0x039F, r1
     64c:	10 92 9e 03 	sts	0x039E, r1
	if(flag_RX0){
		receive_buffer_index = 0;
		flag_RX0 = 0;
	}
	else if(flag_RX1){
		receive_buffer_index = 1;
     650:	c1 e0       	ldi	r28, 0x01	; 1
     652:	d0 e0       	ldi	r29, 0x00	; 0
     654:	04 c0       	rjmp	.+8      	; 0x65e <CAN_message_receive+0x4e>
		flag_RX1 = 0;
	}
	else{
		received_msg->length = 0;
     656:	f8 01       	movw	r30, r16
     658:	12 82       	std	Z+2, r1	; 0x02
		sei();
     65a:	78 94       	sei
		return;
     65c:	42 c0       	rjmp	.+132    	; 0x6e2 <CAN_message_receive+0xd2>
	}
	
	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_index);
     65e:	fc 2e       	mov	r15, r28
     660:	ff 0c       	add	r15, r15
     662:	ff 0c       	add	r15, r15
     664:	ff 0c       	add	r15, r15
     666:	ff 0c       	add	r15, r15
     668:	81 e6       	ldi	r24, 0x61	; 97
     66a:	8f 0d       	add	r24, r15
     66c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <MCP2515_read>
     670:	e8 2e       	mov	r14, r24
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_index);
     672:	82 e6       	ldi	r24, 0x62	; 98
     674:	8f 0d       	add	r24, r15
     676:	0e 94 0c 0a 	call	0x1418	; 0x1418 <MCP2515_read>
	/*
		id_low:	    X XXXX LLL
		id_high: HHHH HHHH
		id:		 HHHH HHHH LLL
	*/
	received_msg->id = (id_high << 3) + id_low; 
     67a:	2e 2d       	mov	r18, r14
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	22 0f       	add	r18, r18
     680:	33 1f       	adc	r19, r19
     682:	22 0f       	add	r18, r18
     684:	33 1f       	adc	r19, r19
     686:	22 0f       	add	r18, r18
     688:	33 1f       	adc	r19, r19
	
	uint8_t id_high = MCP2515_read(MCP_RXB0SIDH + BUFFER_LENGTH * receive_buffer_index);
	uint8_t id_low = MCP2515_read(MCP_RXB0SIDL + BUFFER_LENGTH * receive_buffer_index);
	
	//only want the last 3 bits
	id_low = id_low >> 5;
     68a:	82 95       	swap	r24
     68c:	86 95       	lsr	r24
     68e:	87 70       	andi	r24, 0x07	; 7
	/*
		id_low:	    X XXXX LLL
		id_high: HHHH HHHH
		id:		 HHHH HHHH LLL
	*/
	received_msg->id = (id_high << 3) + id_low; 
     690:	28 0f       	add	r18, r24
     692:	31 1d       	adc	r19, r1
     694:	f8 01       	movw	r30, r16
     696:	31 83       	std	Z+1, r19	; 0x01
     698:	20 83       	st	Z, r18
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_index) % (1<<3));
     69a:	85 e6       	ldi	r24, 0x65	; 101
     69c:	8f 0d       	add	r24, r15
     69e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <MCP2515_read>
     6a2:	87 70       	andi	r24, 0x07	; 7
     6a4:	f8 01       	movw	r30, r16
     6a6:	82 83       	std	Z+2, r24	; 0x02
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     6a8:	88 23       	and	r24, r24
     6aa:	d1 f0       	breq	.+52     	; 0x6e0 <CAN_message_receive+0xd0>
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_index;
     6ac:	7e 01       	movw	r14, r28
     6ae:	ee 0c       	add	r14, r14
     6b0:	ff 1c       	adc	r15, r15
     6b2:	ee 0c       	add	r14, r14
     6b4:	ff 1c       	adc	r15, r15
     6b6:	ee 0c       	add	r14, r14
     6b8:	ff 1c       	adc	r15, r15
     6ba:	ee 0c       	add	r14, r14
     6bc:	ff 1c       	adc	r15, r15
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_index) % (1<<3));
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     6be:	d1 2c       	mov	r13, r1
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_index;
     6c0:	cd 2d       	mov	r28, r13
     6c2:	d0 e0       	ldi	r29, 0x00	; 0
     6c4:	ce 01       	movw	r24, r28
     6c6:	8a 59       	subi	r24, 0x9A	; 154
     6c8:	9f 4f       	sbci	r25, 0xFF	; 255
		received_msg->data[byte] = MCP2515_read(address);
     6ca:	8e 0d       	add	r24, r14
     6cc:	0e 94 0c 0a 	call	0x1418	; 0x1418 <MCP2515_read>
     6d0:	c0 0f       	add	r28, r16
     6d2:	d1 1f       	adc	r29, r17
     6d4:	8b 83       	std	Y+3, r24	; 0x03
	
	//read the data length contained in the last 3 bits of the RXBnDLC register
	received_msg->length = (MCP2515_read(MCP_RXB0DLC + BUFFER_LENGTH * receive_buffer_index) % (1<<3));
	
	//read the data
	for (uint8_t byte = 0; byte < received_msg->length; byte++){
     6d6:	d3 94       	inc	r13
     6d8:	f8 01       	movw	r30, r16
     6da:	82 81       	ldd	r24, Z+2	; 0x02
     6dc:	d8 16       	cp	r13, r24
     6de:	80 f3       	brcs	.-32     	; 0x6c0 <CAN_message_receive+0xb0>
		int address = (MCP_RXB0D0 + byte) + BUFFER_LENGTH * receive_buffer_index;
		received_msg->data[byte] = MCP2515_read(address);
	}

	sei();
     6e0:	78 94       	sei
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	08 95       	ret

000006f2 <send_control_input>:
	state.id = 'q';
	CAN_message_send(&state);
	while(CAN_transmit_complete(0));
}

void send_control_input(void) {
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	2b 97       	sbiw	r28, 0x0b	; 11
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
	can_message control_input;
	control_input.id = 'c';
     70c:	83 e6       	ldi	r24, 0x63	; 99
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	9a 83       	std	Y+2, r25	; 0x02
     712:	89 83       	std	Y+1, r24	; 0x01
	control_input.length = 5;
     714:	85 e0       	ldi	r24, 0x05	; 5
     716:	8b 83       	std	Y+3, r24	; 0x03
	
	//printf("[joy_position]\n");
	JOY_position_t joy_position = JOY_getPosition();
     718:	0e 94 c7 05 	call	0xb8e	; 0xb8e <JOY_getPosition>
	control_input.data[JOYSTICK_X] = joy_position.x;
     71c:	6c 83       	std	Y+4, r22	; 0x04
	control_input.data[JOYSTICK_Y] = joy_position.y;
     71e:	8d 83       	std	Y+5, r24	; 0x05
	
	//printf("[sli_position]\n");
	SLI_position_t sli_position = SLI_getPosition();
     720:	0e 94 29 06 	call	0xc52	; 0xc52 <SLI_getPosition>
	control_input.data[SLIDER_LEFT] = sli_position.left;
     724:	6e 83       	std	Y+6, r22	; 0x06
	control_input.data[SLIDER_RIGHT] = sli_position.right;
     726:	8f 83       	std	Y+7, r24	; 0x07
	
	//printf("[BUTTONS]\n");
	int joy_button = JOY_button_pressed(JOY_BUTTON) << JOY_BUTTON;
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <JOY_button_pressed>
     72e:	8c 01       	movw	r16, r24
	int left_button = JOY_button_pressed(LEFT_BUTTON) << LEFT_BUTTON;
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	0e 94 ad 05 	call	0xb5a	; 0xb5a <JOY_button_pressed>
     736:	f8 2e       	mov	r15, r24
	int right_button = JOY_button_pressed(RIGHT_BUTTON) << RIGHT_BUTTON;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <JOY_button_pressed>
	SLI_position_t sli_position = SLI_getPosition();
	control_input.data[SLIDER_LEFT] = sli_position.left;
	control_input.data[SLIDER_RIGHT] = sli_position.right;
	
	//printf("[BUTTONS]\n");
	int joy_button = JOY_button_pressed(JOY_BUTTON) << JOY_BUTTON;
     73e:	00 0f       	add	r16, r16
     740:	11 1f       	adc	r17, r17
     742:	00 0f       	add	r16, r16
     744:	11 1f       	adc	r17, r17
	int left_button = JOY_button_pressed(LEFT_BUTTON) << LEFT_BUTTON;
	int right_button = JOY_button_pressed(RIGHT_BUTTON) << RIGHT_BUTTON;
     746:	88 0f       	add	r24, r24
     748:	99 1f       	adc	r25, r25
	control_input.data[BUTTONS] = joy_button | left_button | right_button;
     74a:	08 2b       	or	r16, r24
     74c:	f0 2a       	or	r15, r16
     74e:	f8 86       	std	Y+8, r15	; 0x08
	
	CAN_message_send(&control_input);
     750:	ce 01       	movw	r24, r28
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	0e 94 ce 02 	call	0x59c	; 0x59c <CAN_message_send>
	//while(!CAN_transmit_complete(TB0));
}
     758:	2b 96       	adiw	r28, 0x0b	; 11
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61
     764:	df 91       	pop	r29
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	08 95       	ret

00000770 <receive_score>:

void receive_score(void){
     770:	cf 93       	push	r28
     772:	df 93       	push	r29
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	2b 97       	sbiw	r28, 0x0b	; 11
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
	can_message score_message;
	score_message.length = 0;
     784:	1b 82       	std	Y+3, r1	; 0x03
	
	CAN_message_receive(&score_message);
     786:	ce 01       	movw	r24, r28
     788:	01 96       	adiw	r24, 0x01	; 1
     78a:	0e 94 08 03 	call	0x610	; 0x610 <CAN_message_receive>
	//printf("score msg 0: %d \tscore msg 1: %d\n", score_message.data[0], score_message.data[1]);
	if(score_message.length){
     78e:	8b 81       	ldd	r24, Y+3	; 0x03
     790:	88 23       	and	r24, r24
     792:	09 f4       	brne	.+2      	; 0x796 <receive_score+0x26>
     794:	43 c0       	rjmp	.+134    	; 0x81c <receive_score+0xac>
	score = ((uint8_t)(score_message.data[0]) << 8) |(uint8_t) score_message.data[1];
     796:	8c 81       	ldd	r24, Y+4	; 0x04
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	98 2f       	mov	r25, r24
     79c:	88 27       	eor	r24, r24
     79e:	2d 81       	ldd	r18, Y+5	; 0x05
     7a0:	82 2b       	or	r24, r18
     7a2:	90 93 a5 03 	sts	0x03A5, r25
     7a6:	80 93 a4 03 	sts	0x03A4, r24
	if (score > highscore){
     7aa:	20 91 a4 03 	lds	r18, 0x03A4
     7ae:	30 91 a5 03 	lds	r19, 0x03A5
     7b2:	80 91 a2 03 	lds	r24, 0x03A2
     7b6:	90 91 a3 03 	lds	r25, 0x03A3
     7ba:	82 17       	cp	r24, r18
     7bc:	93 07       	cpc	r25, r19
     7be:	44 f4       	brge	.+16     	; 0x7d0 <receive_score+0x60>
		highscore = score;
     7c0:	80 91 a4 03 	lds	r24, 0x03A4
     7c4:	90 91 a5 03 	lds	r25, 0x03A5
     7c8:	90 93 a3 03 	sts	0x03A3, r25
     7cc:	80 93 a2 03 	sts	0x03A2, r24
	}
	OLED_reset_cursor();
     7d0:	0e 94 33 0c 	call	0x1866	; 0x1866 <OLED_reset_cursor>
	//printf("seconds %d.%d\n", score/10, score%10);
	fprintf(OLED, "time: %d.%d    ", score/10, score%10);
     7d4:	80 91 a4 03 	lds	r24, 0x03A4
     7d8:	90 91 a5 03 	lds	r25, 0x03A5
     7dc:	e0 91 a4 03 	lds	r30, 0x03A4
     7e0:	f0 91 a5 03 	lds	r31, 0x03A5
     7e4:	2a e0       	ldi	r18, 0x0A	; 10
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	b9 01       	movw	r22, r18
     7ea:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__divmodhi4>
     7ee:	9f 93       	push	r25
     7f0:	8f 93       	push	r24
     7f2:	cf 01       	movw	r24, r30
     7f4:	b9 01       	movw	r22, r18
     7f6:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__divmodhi4>
     7fa:	7f 93       	push	r23
     7fc:	6f 93       	push	r22
     7fe:	86 e9       	ldi	r24, 0x96	; 150
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	9f 93       	push	r25
     804:	8f 93       	push	r24
     806:	84 e1       	ldi	r24, 0x14	; 20
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	9f 93       	push	r25
     80c:	8f 93       	push	r24
     80e:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
	
	//int ir_disrupted = score_message.data[2];
	//if(ir_disrupted){
	//	set_highscore();
	//}
}
     81c:	2b 96       	adiw	r28, 0x0b	; 11
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <game_play>:
volatile int highscore = 0;

void send_control_input(void);
void receive_score(void);

void game_play() {
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	2b 97       	sbiw	r28, 0x0b	; 11
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	f8 94       	cli
     840:	de bf       	out	0x3e, r29	; 62
     842:	0f be       	out	0x3f, r0	; 63
     844:	cd bf       	out	0x3d, r28	; 61
	OLED_reset();
     846:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <OLED_reset>
	fprintf(OLED, "time: %s", "0.0");
     84a:	86 ea       	ldi	r24, 0xA6	; 166
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	9f 93       	push	r25
     850:	8f 93       	push	r24
     852:	8a ea       	ldi	r24, 0xAA	; 170
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	9f 93       	push	r25
     858:	8f 93       	push	r24
     85a:	04 e1       	ldi	r16, 0x14	; 20
     85c:	11 e0       	ldi	r17, 0x01	; 1
     85e:	1f 93       	push	r17
     860:	0f 93       	push	r16
     862:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
	fprintf(OLED, "\n%s \n", "lButton: quit");
     866:	83 eb       	ldi	r24, 0xB3	; 179
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	9f 93       	push	r25
     86c:	8f 93       	push	r24
     86e:	81 ec       	ldi	r24, 0xC1	; 193
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	9f 93       	push	r25
     874:	8f 93       	push	r24
     876:	1f 93       	push	r17
     878:	0f 93       	push	r16
     87a:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
	fprintf(OLED, "%s \n", "jButton: shoot");
     87e:	87 ec       	ldi	r24, 0xC7	; 199
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	9f 93       	push	r25
     884:	8f 93       	push	r24
     886:	82 ec       	ldi	r24, 0xC2	; 194
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	9f 93       	push	r25
     88c:	8f 93       	push	r24
     88e:	1f 93       	push	r17
     890:	0f 93       	push	r16
     892:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     896:	2f ef       	ldi	r18, 0xFF	; 255
     898:	8f e7       	ldi	r24, 0x7F	; 127
     89a:	97 e0       	ldi	r25, 0x07	; 7
     89c:	21 50       	subi	r18, 0x01	; 1
     89e:	80 40       	sbci	r24, 0x00	; 0
     8a0:	90 40       	sbci	r25, 0x00	; 0
     8a2:	e1 f7       	brne	.-8      	; 0x89c <game_play+0x6e>
     8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <game_play+0x78>
     8a6:	00 00       	nop
	//fprintf(OLED, "%s ", "x-axis: move\n");
	_delay_ms(500);						//makes sure first press does not trigger solenoid
	
	//send start message
	can_message state;
	state.length = 0;
     8a8:	1b 82       	std	Y+3, r1	; 0x03
	state.id = 's';
     8aa:	83 e7       	ldi	r24, 0x73	; 115
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	9a 83       	std	Y+2, r25	; 0x02
     8b0:	89 83       	std	Y+1, r24	; 0x01
	CAN_message_send(&state);
     8b2:	ce 01       	movw	r24, r28
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	0e 94 ce 02 	call	0x59c	; 0x59c <CAN_message_send>
	
	while(!JOY_button_pressed(LEFT_BUTTON)){
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	cd bf       	out	0x3d, r28	; 61
     8c4:	04 c0       	rjmp	.+8      	; 0x8ce <game_play+0xa0>
		send_control_input();
     8c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <send_control_input>
		receive_score();
     8ca:	0e 94 b8 03 	call	0x770	; 0x770 <receive_score>
	can_message state;
	state.length = 0;
	state.id = 's';
	CAN_message_send(&state);
	
	while(!JOY_button_pressed(LEFT_BUTTON)){
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <JOY_button_pressed>
     8d4:	89 2b       	or	r24, r25
     8d6:	b9 f3       	breq	.-18     	; 0x8c6 <game_play+0x98>
		send_control_input();
		receive_score();
	}
	//send quit message
	state.id = 'q';
     8d8:	81 e7       	ldi	r24, 0x71	; 113
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	9a 83       	std	Y+2, r25	; 0x02
     8de:	89 83       	std	Y+1, r24	; 0x01
	CAN_message_send(&state);
     8e0:	ce 01       	movw	r24, r28
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	0e 94 ce 02 	call	0x59c	; 0x59c <CAN_message_send>
	while(CAN_transmit_complete(0));
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 c3 02 	call	0x586	; 0x586 <CAN_transmit_complete>
     8f0:	81 11       	cpse	r24, r1
     8f2:	fa cf       	rjmp	.-12     	; 0x8e8 <game_play+0xba>
}
     8f4:	2b 96       	adiw	r28, 0x0b	; 11
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	08 95       	ret

0000090a <print_highscore>:
	//if(ir_disrupted){
	//	set_highscore();
	//}
}

void print_highscore(){
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
	OLED_reset();
     90e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <OLED_reset>
	//printf("HIGHSCORE:%d.%d seconds\n", highscore/10, highscore%10);
	fprintf(OLED, "   HIGHSCORE:\n  %d.%d seconds\n", highscore/10, highscore%10);
     912:	80 91 a2 03 	lds	r24, 0x03A2
     916:	90 91 a3 03 	lds	r25, 0x03A3
     91a:	e0 91 a2 03 	lds	r30, 0x03A2
     91e:	f0 91 a3 03 	lds	r31, 0x03A3
     922:	2a e0       	ldi	r18, 0x0A	; 10
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	b9 01       	movw	r22, r18
     928:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__divmodhi4>
     92c:	9f 93       	push	r25
     92e:	8f 93       	push	r24
     930:	cf 01       	movw	r24, r30
     932:	b9 01       	movw	r22, r18
     934:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__divmodhi4>
     938:	7f 93       	push	r23
     93a:	6f 93       	push	r22
     93c:	86 ed       	ldi	r24, 0xD6	; 214
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	9f 93       	push	r25
     942:	8f 93       	push	r24
     944:	c4 e1       	ldi	r28, 0x14	; 20
     946:	d1 e0       	ldi	r29, 0x01	; 1
     948:	df 93       	push	r29
     94a:	cf 93       	push	r28
     94c:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
	fprintf(OLED, "\n\n\n\n %s", "lButton: back");
     950:	85 ef       	ldi	r24, 0xF5	; 245
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	9f 93       	push	r25
     956:	8f 93       	push	r24
     958:	83 e0       	ldi	r24, 0x03	; 3
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	9f 93       	push	r25
     95e:	8f 93       	push	r24
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
	while(!JOY_button_pressed(LEFT_BUTTON)){}
     968:	8d b7       	in	r24, 0x3d	; 61
     96a:	9e b7       	in	r25, 0x3e	; 62
     96c:	0e 96       	adiw	r24, 0x0e	; 14
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	9e bf       	out	0x3e, r25	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	8d bf       	out	0x3d, r24	; 61
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <JOY_button_pressed>
     97e:	89 2b       	or	r24, r25
     980:	d9 f3       	breq	.-10     	; 0x978 <print_highscore+0x6e>
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <JOY_print_calibration_status>:
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <OLED_reset>
     990:	8b e0       	ldi	r24, 0x0B	; 11
     992:	92 e0       	ldi	r25, 0x02	; 2
     994:	9f 93       	push	r25
     996:	8f 93       	push	r24
     998:	8a e5       	ldi	r24, 0x5A	; 90
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	9f 93       	push	r25
     99e:	8f 93       	push	r24
     9a0:	c2 e2       	ldi	r28, 0x22	; 34
     9a2:	d1 e0       	ldi	r29, 0x01	; 1
     9a4:	df 93       	push	r29
     9a6:	cf 93       	push	r28
     9a8:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
     9ac:	80 91 b6 03 	lds	r24, 0x03B6
     9b0:	1f 92       	push	r1
     9b2:	8f 93       	push	r24
     9b4:	89 e1       	ldi	r24, 0x19	; 25
     9b6:	92 e0       	ldi	r25, 0x02	; 2
     9b8:	9f 93       	push	r25
     9ba:	8f 93       	push	r24
     9bc:	df 93       	push	r29
     9be:	cf 93       	push	r28
     9c0:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
     9c4:	80 91 ba 03 	lds	r24, 0x03BA
     9c8:	1f 92       	push	r1
     9ca:	8f 93       	push	r24
     9cc:	85 e2       	ldi	r24, 0x25	; 37
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	9f 93       	push	r25
     9d2:	8f 93       	push	r24
     9d4:	df 93       	push	r29
     9d6:	cf 93       	push	r28
     9d8:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
     9dc:	80 91 b7 03 	lds	r24, 0x03B7
     9e0:	1f 92       	push	r1
     9e2:	8f 93       	push	r24
     9e4:	81 e3       	ldi	r24, 0x31	; 49
     9e6:	92 e0       	ldi	r25, 0x02	; 2
     9e8:	9f 93       	push	r25
     9ea:	8f 93       	push	r24
     9ec:	df 93       	push	r29
     9ee:	cf 93       	push	r28
     9f0:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
     9f4:	80 91 bb 03 	lds	r24, 0x03BB
     9f8:	1f 92       	push	r1
     9fa:	8f 93       	push	r24
     9fc:	8d e3       	ldi	r24, 0x3D	; 61
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	9f 93       	push	r25
     a02:	8f 93       	push	r24
     a04:	df 93       	push	r29
     a06:	cf 93       	push	r28
     a08:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
     a0c:	89 e4       	ldi	r24, 0x49	; 73
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	9f 93       	push	r25
     a12:	8f 93       	push	r24
     a14:	89 e5       	ldi	r24, 0x59	; 89
     a16:	92 e0       	ldi	r25, 0x02	; 2
     a18:	9f 93       	push	r25
     a1a:	8f 93       	push	r24
     a1c:	df 93       	push	r29
     a1e:	cf 93       	push	r28
     a20:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
     a24:	8d b7       	in	r24, 0x3d	; 61
     a26:	9e b7       	in	r25, 0x3e	; 62
     a28:	84 96       	adiw	r24, 0x24	; 36
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	9e bf       	out	0x3e, r25	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	8d bf       	out	0x3d, r24	; 61
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	08 95       	ret

00000a3a <JOY_calibrate>:
     a3a:	bf 92       	push	r11
     a3c:	cf 92       	push	r12
     a3e:	df 92       	push	r13
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	2f ef       	ldi	r18, 0xFF	; 255
     a4e:	20 93 b6 03 	sts	0x03B6, r18
     a52:	20 93 b7 03 	sts	0x03B7, r18
     a56:	10 92 ba 03 	sts	0x03BA, r1
     a5a:	10 92 bb 03 	sts	0x03BB, r1
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	e9 f5       	brne	.+122    	; 0xadc <JOY_calibrate+0xa2>
     a62:	b2 9b       	sbis	0x16, 2	; 22
     a64:	3b c0       	rjmp	.+118    	; 0xadc <JOY_calibrate+0xa2>
     a66:	0f 2e       	mov	r0, r31
     a68:	f6 eb       	ldi	r31, 0xB6	; 182
     a6a:	cf 2e       	mov	r12, r31
     a6c:	f3 e0       	ldi	r31, 0x03	; 3
     a6e:	df 2e       	mov	r13, r31
     a70:	f0 2d       	mov	r31, r0
     a72:	0f 2e       	mov	r0, r31
     a74:	f7 eb       	ldi	r31, 0xB7	; 183
     a76:	ef 2e       	mov	r14, r31
     a78:	f3 e0       	ldi	r31, 0x03	; 3
     a7a:	ff 2e       	mov	r15, r31
     a7c:	f0 2d       	mov	r31, r0
     a7e:	0a eb       	ldi	r16, 0xBA	; 186
     a80:	13 e0       	ldi	r17, 0x03	; 3
     a82:	cb eb       	ldi	r28, 0xBB	; 187
     a84:	d3 e0       	ldi	r29, 0x03	; 3
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     a8c:	b8 2e       	mov	r11, r24
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     a94:	f6 01       	movw	r30, r12
     a96:	20 81       	ld	r18, Z
     a98:	9b 2d       	mov	r25, r11
     a9a:	b2 16       	cp	r11, r18
     a9c:	08 f4       	brcc	.+2      	; 0xaa0 <JOY_calibrate+0x66>
     a9e:	92 2f       	mov	r25, r18
     aa0:	f6 01       	movw	r30, r12
     aa2:	90 83       	st	Z, r25
     aa4:	f7 01       	movw	r30, r14
     aa6:	20 81       	ld	r18, Z
     aa8:	98 2f       	mov	r25, r24
     aaa:	82 17       	cp	r24, r18
     aac:	08 f4       	brcc	.+2      	; 0xab0 <JOY_calibrate+0x76>
     aae:	92 2f       	mov	r25, r18
     ab0:	f7 01       	movw	r30, r14
     ab2:	90 83       	st	Z, r25
     ab4:	f8 01       	movw	r30, r16
     ab6:	90 81       	ld	r25, Z
     ab8:	9b 15       	cp	r25, r11
     aba:	08 f4       	brcc	.+2      	; 0xabe <JOY_calibrate+0x84>
     abc:	b9 2e       	mov	r11, r25
     abe:	f8 01       	movw	r30, r16
     ac0:	b0 82       	st	Z, r11
     ac2:	98 81       	ld	r25, Y
     ac4:	98 17       	cp	r25, r24
     ac6:	08 f4       	brcc	.+2      	; 0xaca <JOY_calibrate+0x90>
     ac8:	89 2f       	mov	r24, r25
     aca:	88 83       	st	Y, r24
     acc:	0e 94 c4 04 	call	0x988	; 0x988 <JOY_print_calibration_status>
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 ef       	ldi	r25, 0xF0	; 240
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <JOY_calibrate+0x9a>
     ad8:	b2 99       	sbic	0x16, 2	; 22
     ada:	d5 cf       	rjmp	.-86     	; 0xa86 <JOY_calibrate+0x4c>
     adc:	e0 91 b6 03 	lds	r30, 0x03B6
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	60 91 ba 03 	lds	r22, 0x03BA
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	9f 01       	movw	r18, r30
     aea:	26 1b       	sub	r18, r22
     aec:	37 0b       	sbc	r19, r23
     aee:	c9 01       	movw	r24, r18
     af0:	99 23       	and	r25, r25
     af2:	0c f4       	brge	.+2      	; 0xaf6 <JOY_calibrate+0xbc>
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	95 95       	asr	r25
     af8:	87 95       	ror	r24
     afa:	80 93 b8 03 	sts	0x03B8, r24
     afe:	40 91 b7 03 	lds	r20, 0x03B7
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	20 91 bb 03 	lds	r18, 0x03BB
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	da 01       	movw	r26, r20
     b0c:	a2 1b       	sub	r26, r18
     b0e:	b3 0b       	sbc	r27, r19
     b10:	cd 01       	movw	r24, r26
     b12:	0a f4       	brpl	.+2      	; 0xb16 <JOY_calibrate+0xdc>
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	95 95       	asr	r25
     b18:	87 95       	ror	r24
     b1a:	80 93 b9 03 	sts	0x03B9, r24
     b1e:	6e 0f       	add	r22, r30
     b20:	7f 1f       	adc	r23, r31
     b22:	75 95       	asr	r23
     b24:	67 95       	ror	r22
     b26:	60 93 bc 03 	sts	0x03BC, r22
     b2a:	24 0f       	add	r18, r20
     b2c:	35 1f       	adc	r19, r21
     b2e:	35 95       	asr	r19
     b30:	27 95       	ror	r18
     b32:	20 93 bd 03 	sts	0x03BD, r18
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	1f 91       	pop	r17
     b3c:	0f 91       	pop	r16
     b3e:	ff 90       	pop	r15
     b40:	ef 90       	pop	r14
     b42:	df 90       	pop	r13
     b44:	cf 90       	pop	r12
     b46:	bf 90       	pop	r11
     b48:	08 95       	ret

00000b4a <JOY_init>:
     b4a:	c2 9a       	sbi	0x18, 2	; 24
     b4c:	ba 98       	cbi	0x17, 2	; 23
     b4e:	20 b7       	in	r18, 0x30	; 48
     b50:	2b 7f       	andi	r18, 0xFB	; 251
     b52:	20 bf       	out	0x30, r18	; 48
     b54:	0e 94 1d 05 	call	0xa3a	; 0xa3a <JOY_calibrate>
     b58:	08 95       	ret

00000b5a <JOY_button_pressed>:
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	41 f0       	breq	.+16     	; 0xb6e <JOY_button_pressed+0x14>
     b5e:	18 f0       	brcs	.+6      	; 0xb66 <JOY_button_pressed+0xc>
     b60:	82 30       	cpi	r24, 0x02	; 2
     b62:	51 f0       	breq	.+20     	; 0xb78 <JOY_button_pressed+0x1e>
     b64:	11 c0       	rjmp	.+34     	; 0xb88 <JOY_button_pressed+0x2e>
     b66:	86 b3       	in	r24, 0x16	; 22
     b68:	81 70       	andi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	08 95       	ret
     b6e:	86 b3       	in	r24, 0x16	; 22
     b70:	86 95       	lsr	r24
     b72:	81 70       	andi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	08 95       	ret
     b78:	86 b3       	in	r24, 0x16	; 22
     b7a:	86 95       	lsr	r24
     b7c:	86 95       	lsr	r24
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	89 27       	eor	r24, r25
     b82:	81 70       	andi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	08 95       	ret
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	08 95       	ret

00000b8e <JOY_getPosition>:
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	80 91 bc 03 	lds	r24, 0x03BC
     ba2:	28 1b       	sub	r18, r24
     ba4:	31 09       	sbc	r19, r1
     ba6:	14 e6       	ldi	r17, 0x64	; 100
     ba8:	12 9f       	mul	r17, r18
     baa:	c0 01       	movw	r24, r0
     bac:	13 9f       	mul	r17, r19
     bae:	90 0d       	add	r25, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	60 91 b8 03 	lds	r22, 0x03B8
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__divmodhi4>
     bbc:	eb 01       	movw	r28, r22
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	80 91 bd 03 	lds	r24, 0x03BD
     bcc:	28 1b       	sub	r18, r24
     bce:	31 09       	sbc	r19, r1
     bd0:	12 9f       	mul	r17, r18
     bd2:	c0 01       	movw	r24, r0
     bd4:	13 9f       	mul	r17, r19
     bd6:	90 0d       	add	r25, r0
     bd8:	11 24       	eor	r1, r1
     bda:	60 91 b9 03 	lds	r22, 0x03B9
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__divmodhi4>
     be4:	9b 01       	movw	r18, r22
     be6:	be 01       	movw	r22, r28
     be8:	c9 01       	movw	r24, r18
     bea:	df 91       	pop	r29
     bec:	cf 91       	pop	r28
     bee:	1f 91       	pop	r17
     bf0:	08 95       	ret

00000bf2 <JOY_getDirection>:
     bf2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <JOY_getPosition>
     bf6:	fb 01       	movw	r30, r22
     bf8:	ac 01       	movw	r20, r24
     bfa:	9b 01       	movw	r18, r22
     bfc:	2c 5f       	subi	r18, 0xFC	; 252
     bfe:	3f 4f       	sbci	r19, 0xFF	; 255
     c00:	29 30       	cpi	r18, 0x09	; 9
     c02:	31 05       	cpc	r19, r1
     c04:	30 f4       	brcc	.+12     	; 0xc12 <JOY_getDirection+0x20>
     c06:	9c 01       	movw	r18, r24
     c08:	2c 5f       	subi	r18, 0xFC	; 252
     c0a:	3f 4f       	sbci	r19, 0xFF	; 255
     c0c:	29 30       	cpi	r18, 0x09	; 9
     c0e:	31 05       	cpc	r19, r1
     c10:	e0 f0       	brcs	.+56     	; 0xc4a <JOY_getDirection+0x58>
     c12:	db 01       	movw	r26, r22
     c14:	ff 23       	and	r31, r31
     c16:	24 f4       	brge	.+8      	; 0xc20 <JOY_getDirection+0x2e>
     c18:	aa 27       	eor	r26, r26
     c1a:	bb 27       	eor	r27, r27
     c1c:	a6 1b       	sub	r26, r22
     c1e:	b7 0b       	sbc	r27, r23
     c20:	9c 01       	movw	r18, r24
     c22:	55 23       	and	r21, r21
     c24:	24 f4       	brge	.+8      	; 0xc2e <JOY_getDirection+0x3c>
     c26:	22 27       	eor	r18, r18
     c28:	33 27       	eor	r19, r19
     c2a:	28 1b       	sub	r18, r24
     c2c:	39 0b       	sbc	r19, r25
     c2e:	2a 17       	cp	r18, r26
     c30:	3b 07       	cpc	r19, r27
     c32:	34 f4       	brge	.+12     	; 0xc40 <JOY_getDirection+0x4e>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	1e 16       	cp	r1, r30
     c38:	1f 06       	cpc	r1, r31
     c3a:	54 f0       	brlt	.+20     	; 0xc50 <JOY_getDirection+0x5e>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	08 95       	ret
     c40:	14 16       	cp	r1, r20
     c42:	15 06       	cpc	r1, r21
     c44:	24 f4       	brge	.+8      	; 0xc4e <JOY_getDirection+0x5c>
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	08 95       	ret
     c4a:	84 e0       	ldi	r24, 0x04	; 4
     c4c:	08 95       	ret
     c4e:	83 e0       	ldi	r24, 0x03	; 3
     c50:	08 95       	ret

00000c52 <SLI_getPosition>:
     c52:	cf 93       	push	r28
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     c5a:	c8 2f       	mov	r28, r24
     c5c:	83 e0       	ldi	r24, 0x03	; 3
     c5e:	0e 94 05 02 	call	0x40a	; 0x40a <ADC_read>
     c62:	28 2f       	mov	r18, r24
     c64:	6c 2f       	mov	r22, r28
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	82 2f       	mov	r24, r18
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <append_char>:


/* PRINT STRING FUNCTION   */

void append_char(char c) {
	int len = strlen(written_string);
     c70:	ee eb       	ldi	r30, 0xBE	; 190
     c72:	f3 e0       	ldi	r31, 0x03	; 3
     c74:	01 90       	ld	r0, Z+
     c76:	00 20       	and	r0, r0
     c78:	e9 f7       	brne	.-6      	; 0xc74 <append_char+0x4>
     c7a:	31 97       	sbiw	r30, 0x01	; 1
     c7c:	ee 5b       	subi	r30, 0xBE	; 190
     c7e:	f3 40       	sbci	r31, 0x03	; 3
	if (len < MAX_STRING_SIZE){
     c80:	e8 32       	cpi	r30, 0x28	; 40
     c82:	f1 05       	cpc	r31, r1
     c84:	6c f4       	brge	.+26     	; 0xca0 <append_char+0x30>
		written_string[len] = c;
     c86:	e2 54       	subi	r30, 0x42	; 66
     c88:	fc 4f       	sbci	r31, 0xFC	; 252
     c8a:	80 83       	st	Z, r24
		written_string[len + 1] = '\0';
     c8c:	11 82       	std	Z+1, r1	; 0x01
		string_position++;
     c8e:	80 91 b0 03 	lds	r24, 0x03B0
     c92:	90 91 b1 03 	lds	r25, 0x03B1
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	90 93 b1 03 	sts	0x03B1, r25
     c9c:	80 93 b0 03 	sts	0x03B0, r24
     ca0:	08 95       	ret

00000ca2 <remove_last_char>:
	
	keyboard_goto(pos.y, pos.x);
}

void remove_last_char() {
	if (strlen(written_string) > 0){
     ca2:	80 91 be 03 	lds	r24, 0x03BE
     ca6:	88 23       	and	r24, r24
     ca8:	39 f0       	breq	.+14     	; 0xcb8 <remove_last_char+0x16>
		written_string[strlen(written_string) - 1] = '\0';
     caa:	ee eb       	ldi	r30, 0xBE	; 190
     cac:	f3 e0       	ldi	r31, 0x03	; 3
     cae:	01 90       	ld	r0, Z+
     cb0:	00 20       	and	r0, r0
     cb2:	e9 f7       	brne	.-6      	; 0xcae <remove_last_char+0xc>
     cb4:	32 97       	sbiw	r30, 0x02	; 2
     cb6:	10 82       	st	Z, r1
     cb8:	08 95       	ret

00000cba <keyboard_goto>:

}

// 5 lines x 16 columns
void keyboard_goto(int line, int column) {
	OLED_pos(line + 3, (column+2) * 8);
     cba:	6e 5f       	subi	r22, 0xFE	; 254
     cbc:	7f 4f       	sbci	r23, 0xFF	; 255
     cbe:	66 0f       	add	r22, r22
     cc0:	66 0f       	add	r22, r22
     cc2:	66 0f       	add	r22, r22
     cc4:	8d 5f       	subi	r24, 0xFD	; 253
     cc6:	0e 94 21 0c 	call	0x1842	; 0x1842 <OLED_pos>
     cca:	08 95       	ret

00000ccc <print_string>:
		string_position++;
	}

}

void print_string() {
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
	OLED_reset_cursor();
     cd0:	0e 94 33 0c 	call	0x1866	; 0x1866 <OLED_reset_cursor>
	//char print_string[16];
	//memcpy(print_string, written_string[strlen(written_string)-string_position], 16);
	//fprintf(OLED, "%s", print_string);
	fprintf(OLED, "%s", written_string);
     cd4:	62 e3       	ldi	r22, 0x32	; 50
     cd6:	71 e0       	ldi	r23, 0x01	; 1
     cd8:	8e eb       	ldi	r24, 0xBE	; 190
     cda:	93 e0       	ldi	r25, 0x03	; 3
     cdc:	0e 94 53 10 	call	0x20a6	; 0x20a6 <fputs>
	for (int i = strlen(written_string); i < 16; i++){
     ce0:	ce eb       	ldi	r28, 0xBE	; 190
     ce2:	d3 e0       	ldi	r29, 0x03	; 3
     ce4:	09 90       	ld	r0, Y+
     ce6:	00 20       	and	r0, r0
     ce8:	e9 f7       	brne	.-6      	; 0xce4 <print_string+0x18>
     cea:	21 97       	sbiw	r28, 0x01	; 1
     cec:	ce 5b       	subi	r28, 0xBE	; 190
     cee:	d3 40       	sbci	r29, 0x03	; 3
     cf0:	c0 31       	cpi	r28, 0x10	; 16
     cf2:	d1 05       	cpc	r29, r1
     cf4:	54 f4       	brge	.+20     	; 0xd0a <print_string+0x3e>
		fprintf(OLED, " ");
     cf6:	62 e3       	ldi	r22, 0x32	; 50
     cf8:	71 e0       	ldi	r23, 0x01	; 1
     cfa:	80 e2       	ldi	r24, 0x20	; 32
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 21 10 	call	0x2042	; 0x2042 <fputc>
	OLED_reset_cursor();
	//char print_string[16];
	//memcpy(print_string, written_string[strlen(written_string)-string_position], 16);
	//fprintf(OLED, "%s", print_string);
	fprintf(OLED, "%s", written_string);
	for (int i = strlen(written_string); i < 16; i++){
     d02:	21 96       	adiw	r28, 0x01	; 1
     d04:	c0 31       	cpi	r28, 0x10	; 16
     d06:	d1 05       	cpc	r29, r1
     d08:	b1 f7       	brne	.-20     	; 0xcf6 <print_string+0x2a>
		fprintf(OLED, " ");
	}
	
	//set block at current pointer position
	int pointer = MIN(strlen(written_string)%16,15)*8;
     d0a:	ee eb       	ldi	r30, 0xBE	; 190
     d0c:	f3 e0       	ldi	r31, 0x03	; 3
     d0e:	01 90       	ld	r0, Z+
     d10:	00 20       	and	r0, r0
     d12:	e9 f7       	brne	.-6      	; 0xd0e <print_string+0x42>
     d14:	31 97       	sbiw	r30, 0x01	; 1
     d16:	ee 5b       	subi	r30, 0xBE	; 190
     d18:	f3 40       	sbci	r31, 0x03	; 3
     d1a:	ef 70       	andi	r30, 0x0F	; 15
     d1c:	ff 27       	eor	r31, r31
     d1e:	bf 01       	movw	r22, r30
     d20:	66 0f       	add	r22, r22
     d22:	77 1f       	adc	r23, r23
     d24:	66 0f       	add	r22, r22
     d26:	77 1f       	adc	r23, r23
     d28:	66 0f       	add	r22, r22
     d2a:	77 1f       	adc	r23, r23
	OLED_pos(0, pointer);
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	0e 94 21 0c 	call	0x1842	; 0x1842 <OLED_pos>
	print_fill(8);
     d32:	88 e0       	ldi	r24, 0x08	; 8
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <print_fill>
	
	blinking_pos_on = 0;
     d3a:	10 92 af 03 	sts	0x03AF, r1
     d3e:	10 92 ae 03 	sts	0x03AE, r1
	
	keyboard_goto(pos.y, pos.x);
     d42:	60 91 aa 03 	lds	r22, 0x03AA
     d46:	70 91 ab 03 	lds	r23, 0x03AB
     d4a:	80 91 ac 03 	lds	r24, 0x03AC
     d4e:	90 91 ad 03 	lds	r25, 0x03AD
     d52:	0e 94 5d 06 	call	0xcba	; 0xcba <keyboard_goto>
}
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	08 95       	ret

00000d5c <keyboard_goto_line>:
void keyboard_goto(int line, int column) {
	OLED_pos(line + 3, (column+2) * 8);
}

void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	0e 94 5d 06 	call	0xcba	; 0xcba <keyboard_goto>
     d64:	08 95       	ret

00000d66 <keyboard_init>:
}

/* FUNCTION IMPLEMENTATIONS			*/
/************************************/

void keyboard_init() {
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
	OLED_reset();
     d72:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <OLED_reset>
	written_string[0]='\0';
     d76:	ce eb       	ldi	r28, 0xBE	; 190
     d78:	d3 e0       	ldi	r29, 0x03	; 3
     d7a:	18 82       	st	Y, r1
	print_string();
     d7c:	0e 94 66 06 	call	0xccc	; 0xccc <print_string>
	letters = (char*)LETTERS_SMALL;
     d80:	80 ea       	ldi	r24, 0xA0	; 160
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	90 93 31 01 	sts	0x0131, r25
     d88:	80 93 30 01 	sts	0x0130, r24
	keyboard_goto_line(0);
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 ae 06 	call	0xd5c	; 0xd5c <keyboard_goto_line>
	pos.x = 0;
     d94:	10 92 ab 03 	sts	0x03AB, r1
     d98:	10 92 aa 03 	sts	0x03AA, r1
	pos.y = 0;
     d9c:	10 92 ad 03 	sts	0x03AD, r1
     da0:	10 92 ac 03 	sts	0x03AC, r1
	strcpy(written_string, "\0");
     da4:	18 82       	st	Y, r1

	//The first letter is selected by default
	print_char(pgm_read_byte(&letters[0]), INVERSE);
     da6:	e0 91 30 01 	lds	r30, 0x0130
     daa:	f0 91 31 01 	lds	r31, 0x0131
     dae:	84 91       	lpm	r24, Z
     db0:	61 e0       	ldi	r22, 0x01	; 1
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <print_char>

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     db8:	c1 e0       	ldi	r28, 0x01	; 1
     dba:	d0 e0       	ldi	r29, 0x00	; 0
		if (i % LINE_LENGTH == 0) {
     dbc:	0c e0       	ldi	r16, 0x0C	; 12
     dbe:	10 e0       	ldi	r17, 0x00	; 0
			keyboard_goto_line(++pos.y);
     dc0:	0f 2e       	mov	r0, r31
     dc2:	fc ea       	ldi	r31, 0xAC	; 172
     dc4:	ef 2e       	mov	r14, r31
     dc6:	f3 e0       	ldi	r31, 0x03	; 3
     dc8:	ff 2e       	mov	r15, r31
     dca:	f0 2d       	mov	r31, r0
     dcc:	0e c0       	rjmp	.+28     	; 0xdea <keyboard_init+0x84>
	//The first letter is selected by default
	print_char(pgm_read_byte(&letters[0]), INVERSE);

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0) {
     dce:	ce 01       	movw	r24, r28
     dd0:	b8 01       	movw	r22, r16
     dd2:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__divmodhi4>
     dd6:	89 2b       	or	r24, r25
     dd8:	41 f4       	brne	.+16     	; 0xdea <keyboard_init+0x84>
			keyboard_goto_line(++pos.y);
     dda:	f7 01       	movw	r30, r14
     ddc:	80 81       	ld	r24, Z
     dde:	91 81       	ldd	r25, Z+1	; 0x01
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	91 83       	std	Z+1, r25	; 0x01
     de4:	80 83       	st	Z, r24
     de6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <keyboard_goto_line>
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
     dea:	e0 91 30 01 	lds	r30, 0x0130
     dee:	f0 91 31 01 	lds	r31, 0x0131
     df2:	ec 0f       	add	r30, r28
     df4:	fd 1f       	adc	r31, r29
     df6:	84 91       	lpm	r24, Z
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	70 e0       	ldi	r23, 0x00	; 0
     dfc:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <print_char>

	//The first letter is selected by default
	print_char(pgm_read_byte(&letters[0]), INVERSE);

	//print the rest of the letters
	for (int i = 1; i < NUMB_LETTERS; i++) {
     e00:	21 96       	adiw	r28, 0x01	; 1
     e02:	c0 33       	cpi	r28, 0x30	; 48
     e04:	d1 05       	cpc	r29, r1
     e06:	19 f7       	brne	.-58     	; 0xdce <keyboard_init+0x68>
			keyboard_goto_line(++pos.y);
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
	}
	//print the tool buttons
	keyboard_goto_line(4);
     e08:	84 e0       	ldi	r24, 0x04	; 4
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <keyboard_goto_line>
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e0       	ldi	r20, 0x00	; 0
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <print_options_bar>

	//reset y-position
	pos.y = 0;
     e24:	10 92 ad 03 	sts	0x03AD, r1
     e28:	10 92 ac 03 	sts	0x03AC, r1
     e2c:	ff ef       	ldi	r31, 0xFF	; 255
     e2e:	2f e7       	ldi	r18, 0x7F	; 127
     e30:	87 e0       	ldi	r24, 0x07	; 7
     e32:	f1 50       	subi	r31, 0x01	; 1
     e34:	20 40       	sbci	r18, 0x00	; 0
     e36:	80 40       	sbci	r24, 0x00	; 0
     e38:	e1 f7       	brne	.-8      	; 0xe32 <keyboard_init+0xcc>
     e3a:	00 c0       	rjmp	.+0      	; 0xe3c <keyboard_init+0xd6>
     e3c:	00 00       	nop

	//ignore button pressed right away
	_delay_ms(500);

}
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	08 95       	ret

00000e4c <keyboard_print>:


void keyboard_print() {
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
	keyboard_goto_line(0);
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 ae 06 	call	0xd5c	; 0xd5c <keyboard_goto_line>
	pos.y = 0;
     e60:	10 92 ad 03 	sts	0x03AD, r1
     e64:	10 92 ac 03 	sts	0x03AC, r1
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
     e68:	c0 e0       	ldi	r28, 0x00	; 0
     e6a:	d0 e0       	ldi	r29, 0x00	; 0
		if (i % LINE_LENGTH == 0 && i != 0) {
     e6c:	0c e0       	ldi	r16, 0x0C	; 12
     e6e:	10 e0       	ldi	r17, 0x00	; 0
			keyboard_goto_line(++pos.y);
     e70:	0f 2e       	mov	r0, r31
     e72:	fc ea       	ldi	r31, 0xAC	; 172
     e74:	ef 2e       	mov	r14, r31
     e76:	f3 e0       	ldi	r31, 0x03	; 3
     e78:	ff 2e       	mov	r15, r31
     e7a:	f0 2d       	mov	r31, r0
     e7c:	10 c0       	rjmp	.+32     	; 0xe9e <keyboard_print+0x52>
void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
		if (i % LINE_LENGTH == 0 && i != 0) {
     e7e:	ce 01       	movw	r24, r28
     e80:	b8 01       	movw	r22, r16
     e82:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__divmodhi4>
     e86:	89 2b       	or	r24, r25
     e88:	51 f4       	brne	.+20     	; 0xe9e <keyboard_print+0x52>
     e8a:	20 97       	sbiw	r28, 0x00	; 0
     e8c:	41 f0       	breq	.+16     	; 0xe9e <keyboard_print+0x52>
			keyboard_goto_line(++pos.y);
     e8e:	f7 01       	movw	r30, r14
     e90:	80 81       	ld	r24, Z
     e92:	91 81       	ldd	r25, Z+1	; 0x01
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	91 83       	std	Z+1, r25	; 0x01
     e98:	80 83       	st	Z, r24
     e9a:	0e 94 ae 06 	call	0xd5c	; 0xd5c <keyboard_goto_line>
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
     e9e:	e0 91 30 01 	lds	r30, 0x0130
     ea2:	f0 91 31 01 	lds	r31, 0x0131
     ea6:	ec 0f       	add	r30, r28
     ea8:	fd 1f       	adc	r31, r29
     eaa:	84 91       	lpm	r24, Z
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <print_char>

void keyboard_print() {
	keyboard_goto_line(0);
	pos.y = 0;
	//print the letters
	for (int i = 0; i < NUMB_LETTERS; i++) {
     eb4:	21 96       	adiw	r28, 0x01	; 1
     eb6:	c0 33       	cpi	r28, 0x30	; 48
     eb8:	d1 05       	cpc	r29, r1
     eba:	09 f7       	brne	.-62     	; 0xe7e <keyboard_print+0x32>
			keyboard_goto_line(++pos.y);
		}
		print_char(pgm_read_byte(&letters[i]), NORMAL);
	}
	//print the tool buttons
	keyboard_goto_line(4);
     ebc:	84 e0       	ldi	r24, 0x04	; 4
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <keyboard_goto_line>
	print_options_bar(NORMAL, NORMAL, NORMAL, NORMAL);
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e0       	ldi	r20, 0x00	; 0
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <print_options_bar>


}
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	08 95       	ret

00000ee6 <toggle_shift>:
void keyboard_goto_line(int line) {
		keyboard_goto(line, 0);
	}

void toggle_shift() {
	if (letters == LETTERS_SMALL) {
     ee6:	80 91 30 01 	lds	r24, 0x0130
     eea:	90 91 31 01 	lds	r25, 0x0131
     eee:	80 5a       	subi	r24, 0xA0	; 160
     ef0:	90 40       	sbci	r25, 0x00	; 0
     ef2:	39 f4       	brne	.+14     	; 0xf02 <toggle_shift+0x1c>
		letters = (char*)LETTERS_BIG;
     ef4:	80 e7       	ldi	r24, 0x70	; 112
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	90 93 31 01 	sts	0x0131, r25
     efc:	80 93 30 01 	sts	0x0130, r24
     f00:	06 c0       	rjmp	.+12     	; 0xf0e <toggle_shift+0x28>
	}
	else {
		letters = (char*)LETTERS_SMALL;
     f02:	80 ea       	ldi	r24, 0xA0	; 160
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	90 93 31 01 	sts	0x0131, r25
     f0a:	80 93 30 01 	sts	0x0130, r24
	}

	keyboard_print();
     f0e:	0e 94 26 07 	call	0xe4c	; 0xe4c <keyboard_print>
	keyboard_goto_line(4);
     f12:	84 e0       	ldi	r24, 0x04	; 4
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 ae 06 	call	0xd5c	; 0xd5c <keyboard_goto_line>
	print_shift(INVERSE);
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <print_shift>
		
	pos.y = 4;
     f22:	84 e0       	ldi	r24, 0x04	; 4
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	90 93 ad 03 	sts	0x03AD, r25
     f2a:	80 93 ac 03 	sts	0x03AC, r24
	pos.x = 0;
     f2e:	10 92 ab 03 	sts	0x03AB, r1
     f32:	10 92 aa 03 	sts	0x03AA, r1
     f36:	08 95       	ret

00000f38 <keyboard_register_position_change>:
}

void keyboard_register_position_change(JOY_direction_t direction) {
	if (direction == NEUTRAL);
     f38:	84 30       	cpi	r24, 0x04	; 4
     f3a:	09 f4       	brne	.+2      	; 0xf3e <keyboard_register_position_change+0x6>
     f3c:	8a c0       	rjmp	.+276    	; 0x1052 <keyboard_register_position_change+0x11a>
	else if (direction == DOWN && pos.y < 4) {
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 f4       	brne	.+36     	; 0xf66 <keyboard_register_position_change+0x2e>
     f42:	20 91 ac 03 	lds	r18, 0x03AC
     f46:	30 91 ad 03 	lds	r19, 0x03AD
     f4a:	24 30       	cpi	r18, 0x04	; 4
     f4c:	31 05       	cpc	r19, r1
     f4e:	bc f5       	brge	.+110    	; 0xfbe <keyboard_register_position_change+0x86>
		prev_pos.y = pos.y++;
     f50:	c9 01       	movw	r24, r18
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	90 93 ad 03 	sts	0x03AD, r25
     f58:	80 93 ac 03 	sts	0x03AC, r24
     f5c:	30 93 a9 03 	sts	0x03A9, r19
     f60:	20 93 a8 03 	sts	0x03A8, r18
     f64:	08 95       	ret
	}
	else if (direction == UP && pos.y > 0) {
     f66:	82 30       	cpi	r24, 0x02	; 2
     f68:	a1 f4       	brne	.+40     	; 0xf92 <keyboard_register_position_change+0x5a>
     f6a:	80 91 ac 03 	lds	r24, 0x03AC
     f6e:	90 91 ad 03 	lds	r25, 0x03AD
     f72:	18 16       	cp	r1, r24
     f74:	19 06       	cpc	r1, r25
     f76:	0c f0       	brlt	.+2      	; 0xf7a <keyboard_register_position_change+0x42>
     f78:	6c c0       	rjmp	.+216    	; 0x1052 <keyboard_register_position_change+0x11a>
		prev_pos.y = pos.y--;
     f7a:	9c 01       	movw	r18, r24
     f7c:	21 50       	subi	r18, 0x01	; 1
     f7e:	31 09       	sbc	r19, r1
     f80:	30 93 ad 03 	sts	0x03AD, r19
     f84:	20 93 ac 03 	sts	0x03AC, r18
     f88:	90 93 a9 03 	sts	0x03A9, r25
     f8c:	80 93 a8 03 	sts	0x03A8, r24
     f90:	08 95       	ret
	}
	else if (direction == LEFT && pos.x > 0) {
     f92:	81 11       	cpse	r24, r1
     f94:	14 c0       	rjmp	.+40     	; 0xfbe <keyboard_register_position_change+0x86>
     f96:	80 91 aa 03 	lds	r24, 0x03AA
     f9a:	90 91 ab 03 	lds	r25, 0x03AB
     f9e:	18 16       	cp	r1, r24
     fa0:	19 06       	cpc	r1, r25
     fa2:	0c f0       	brlt	.+2      	; 0xfa6 <keyboard_register_position_change+0x6e>
     fa4:	56 c0       	rjmp	.+172    	; 0x1052 <keyboard_register_position_change+0x11a>
		prev_pos.x = pos.x--;
     fa6:	9c 01       	movw	r18, r24
     fa8:	21 50       	subi	r18, 0x01	; 1
     faa:	31 09       	sbc	r19, r1
     fac:	30 93 ab 03 	sts	0x03AB, r19
     fb0:	20 93 aa 03 	sts	0x03AA, r18
     fb4:	90 93 a7 03 	sts	0x03A7, r25
     fb8:	80 93 a6 03 	sts	0x03A6, r24
     fbc:	08 95       	ret
	}
	else if (direction == RIGHT && pos.x < LINE_LENGTH - 1) {
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <keyboard_register_position_change+0x8c>
     fc2:	47 c0       	rjmp	.+142    	; 0x1052 <keyboard_register_position_change+0x11a>
     fc4:	80 91 aa 03 	lds	r24, 0x03AA
     fc8:	90 91 ab 03 	lds	r25, 0x03AB
     fcc:	8b 30       	cpi	r24, 0x0B	; 11
     fce:	91 05       	cpc	r25, r1
     fd0:	0c f0       	brlt	.+2      	; 0xfd4 <keyboard_register_position_change+0x9c>
     fd2:	3f c0       	rjmp	.+126    	; 0x1052 <keyboard_register_position_change+0x11a>

		if (pos.y == 4) {
     fd4:	20 91 ac 03 	lds	r18, 0x03AC
     fd8:	30 91 ad 03 	lds	r19, 0x03AD
     fdc:	24 30       	cpi	r18, 0x04	; 4
     fde:	31 05       	cpc	r19, r1
     fe0:	69 f5       	brne	.+90     	; 0x103c <keyboard_register_position_change+0x104>
			if (pos.x < 2) {
     fe2:	82 30       	cpi	r24, 0x02	; 2
     fe4:	91 05       	cpc	r25, r1
     fe6:	5c f4       	brge	.+22     	; 0xffe <keyboard_register_position_change+0xc6>
				prev_pos.x = 0;
     fe8:	10 92 a7 03 	sts	0x03A7, r1
     fec:	10 92 a6 03 	sts	0x03A6, r1
				pos.x = 2;
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	90 93 ab 03 	sts	0x03AB, r25
     ff8:	80 93 aa 03 	sts	0x03AA, r24
     ffc:	08 95       	ret
			}
			else if (pos.x < 8) {
     ffe:	88 30       	cpi	r24, 0x08	; 8
    1000:	91 05       	cpc	r25, r1
    1002:	6c f4       	brge	.+26     	; 0x101e <keyboard_register_position_change+0xe6>
				prev_pos.x = 2;
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	90 93 a7 03 	sts	0x03A7, r25
    100c:	80 93 a6 03 	sts	0x03A6, r24
				pos.x = 8;
    1010:	88 e0       	ldi	r24, 0x08	; 8
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	90 93 ab 03 	sts	0x03AB, r25
    1018:	80 93 aa 03 	sts	0x03AA, r24
    101c:	08 95       	ret
			}
			else if (pos.x < 10) {
    101e:	0a 97       	sbiw	r24, 0x0a	; 10
    1020:	c4 f4       	brge	.+48     	; 0x1052 <keyboard_register_position_change+0x11a>
				prev_pos.x = 8;
    1022:	88 e0       	ldi	r24, 0x08	; 8
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	90 93 a7 03 	sts	0x03A7, r25
    102a:	80 93 a6 03 	sts	0x03A6, r24
				pos.x = 10;
    102e:	8a e0       	ldi	r24, 0x0A	; 10
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	90 93 ab 03 	sts	0x03AB, r25
    1036:	80 93 aa 03 	sts	0x03AA, r24
    103a:	08 95       	ret
			}
		}
		else {
			prev_pos.x = pos.x++;
    103c:	9c 01       	movw	r18, r24
    103e:	2f 5f       	subi	r18, 0xFF	; 255
    1040:	3f 4f       	sbci	r19, 0xFF	; 255
    1042:	30 93 ab 03 	sts	0x03AB, r19
    1046:	20 93 aa 03 	sts	0x03AA, r18
    104a:	90 93 a7 03 	sts	0x03A7, r25
    104e:	80 93 a6 03 	sts	0x03A6, r24
    1052:	08 95       	ret

00001054 <keyboard_unselect_prev>:
		}
	}
}


void keyboard_unselect_prev() {
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
	//old item is a letter
	if (prev_pos.y < 4) {
    1058:	80 91 a8 03 	lds	r24, 0x03A8
    105c:	90 91 a9 03 	lds	r25, 0x03A9
    1060:	84 30       	cpi	r24, 0x04	; 4
    1062:	91 05       	cpc	r25, r1
    1064:	24 f5       	brge	.+72     	; 0x10ae <keyboard_unselect_prev+0x5a>
		keyboard_goto(prev_pos.y, prev_pos.x);
    1066:	c6 ea       	ldi	r28, 0xA6	; 166
    1068:	d3 e0       	ldi	r29, 0x03	; 3
    106a:	68 81       	ld	r22, Y
    106c:	79 81       	ldd	r23, Y+1	; 0x01
    106e:	0e 94 5d 06 	call	0xcba	; 0xcba <keyboard_goto>
		print_char(pgm_read_byte(&letters[prev_pos.y * LINE_LENGTH + prev_pos.x]), NORMAL);
    1072:	80 91 a8 03 	lds	r24, 0x03A8
    1076:	90 91 a9 03 	lds	r25, 0x03A9
    107a:	fc 01       	movw	r30, r24
    107c:	ee 0f       	add	r30, r30
    107e:	ff 1f       	adc	r31, r31
    1080:	8e 0f       	add	r24, r30
    1082:	9f 1f       	adc	r25, r31
    1084:	fc 01       	movw	r30, r24
    1086:	ee 0f       	add	r30, r30
    1088:	ff 1f       	adc	r31, r31
    108a:	ee 0f       	add	r30, r30
    108c:	ff 1f       	adc	r31, r31
    108e:	28 81       	ld	r18, Y
    1090:	39 81       	ldd	r19, Y+1	; 0x01
    1092:	e2 0f       	add	r30, r18
    1094:	f3 1f       	adc	r31, r19
    1096:	80 91 30 01 	lds	r24, 0x0130
    109a:	90 91 31 01 	lds	r25, 0x0131
    109e:	e8 0f       	add	r30, r24
    10a0:	f9 1f       	adc	r31, r25
    10a2:	84 91       	lpm	r24, Z
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <print_char>
    10ac:	46 c0       	rjmp	.+140    	; 0x113a <keyboard_unselect_prev+0xe6>
	}

	//old item is in toolbar
	else {
		if (prev_pos.x < 2) {
    10ae:	20 91 a6 03 	lds	r18, 0x03A6
    10b2:	30 91 a7 03 	lds	r19, 0x03A7
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	6c f4       	brge	.+26     	; 0x10d6 <keyboard_unselect_prev+0x82>
			prev_pos.x = 0;
    10bc:	10 92 a7 03 	sts	0x03A7, r1
    10c0:	10 92 a6 03 	sts	0x03A6, r1
			keyboard_goto(prev_pos.y, prev_pos.x);
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	0e 94 5d 06 	call	0xcba	; 0xcba <keyboard_goto>
			print_shift(NORMAL);
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <print_shift>
    10d4:	32 c0       	rjmp	.+100    	; 0x113a <keyboard_unselect_prev+0xe6>
		}
		else if (prev_pos.x < 8) {
    10d6:	28 30       	cpi	r18, 0x08	; 8
    10d8:	31 05       	cpc	r19, r1
    10da:	7c f4       	brge	.+30     	; 0x10fa <keyboard_unselect_prev+0xa6>
			prev_pos.x = 2; //start of spacebar
    10dc:	22 e0       	ldi	r18, 0x02	; 2
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	30 93 a7 03 	sts	0x03A7, r19
    10e4:	20 93 a6 03 	sts	0x03A6, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
    10e8:	62 e0       	ldi	r22, 0x02	; 2
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	0e 94 5d 06 	call	0xcba	; 0xcba <keyboard_goto>
			print_spacebar(NORMAL);
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <print_spacebar>
    10f8:	20 c0       	rjmp	.+64     	; 0x113a <keyboard_unselect_prev+0xe6>
		}
		else if (prev_pos.x < 10) {
    10fa:	2a 30       	cpi	r18, 0x0A	; 10
    10fc:	31 05       	cpc	r19, r1
    10fe:	7c f4       	brge	.+30     	; 0x111e <keyboard_unselect_prev+0xca>
			prev_pos.x = 8; //start of left arrow
    1100:	28 e0       	ldi	r18, 0x08	; 8
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	30 93 a7 03 	sts	0x03A7, r19
    1108:	20 93 a6 03 	sts	0x03A6, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
    110c:	68 e0       	ldi	r22, 0x08	; 8
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	0e 94 5d 06 	call	0xcba	; 0xcba <keyboard_goto>
			print_left_arrow(NORMAL);
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <print_left_arrow>
    111c:	0e c0       	rjmp	.+28     	; 0x113a <keyboard_unselect_prev+0xe6>
		}
		else {
			prev_pos.x = 10; //start of right arrow
    111e:	2a e0       	ldi	r18, 0x0A	; 10
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	30 93 a7 03 	sts	0x03A7, r19
    1126:	20 93 a6 03 	sts	0x03A6, r18
			keyboard_goto(prev_pos.y, prev_pos.x);
    112a:	6a e0       	ldi	r22, 0x0A	; 10
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	0e 94 5d 06 	call	0xcba	; 0xcba <keyboard_goto>
			print_right_arrow(NORMAL);
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <print_right_arrow>
		}
	}
}
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	08 95       	ret

00001140 <keyboard_select_curr>:

void keyboard_select_curr() {
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
	//selected item is a letter
	if (pos.y < 4) {
    1144:	80 91 ac 03 	lds	r24, 0x03AC
    1148:	90 91 ad 03 	lds	r25, 0x03AD
    114c:	84 30       	cpi	r24, 0x04	; 4
    114e:	91 05       	cpc	r25, r1
    1150:	24 f5       	brge	.+72     	; 0x119a <keyboard_select_curr+0x5a>
		keyboard_goto(pos.y, pos.x);
    1152:	ca ea       	ldi	r28, 0xAA	; 170
    1154:	d3 e0       	ldi	r29, 0x03	; 3
    1156:	68 81       	ld	r22, Y
    1158:	79 81       	ldd	r23, Y+1	; 0x01
    115a:	0e 94 5d 06 	call	0xcba	; 0xcba <keyboard_goto>
		print_char(pgm_read_byte(&letters[pos.y * LINE_LENGTH + pos.x]), INVERSE);
    115e:	80 91 ac 03 	lds	r24, 0x03AC
    1162:	90 91 ad 03 	lds	r25, 0x03AD
    1166:	fc 01       	movw	r30, r24
    1168:	ee 0f       	add	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	8e 0f       	add	r24, r30
    116e:	9f 1f       	adc	r25, r31
    1170:	fc 01       	movw	r30, r24
    1172:	ee 0f       	add	r30, r30
    1174:	ff 1f       	adc	r31, r31
    1176:	ee 0f       	add	r30, r30
    1178:	ff 1f       	adc	r31, r31
    117a:	28 81       	ld	r18, Y
    117c:	39 81       	ldd	r19, Y+1	; 0x01
    117e:	e2 0f       	add	r30, r18
    1180:	f3 1f       	adc	r31, r19
    1182:	80 91 30 01 	lds	r24, 0x0130
    1186:	90 91 31 01 	lds	r25, 0x0131
    118a:	e8 0f       	add	r30, r24
    118c:	f9 1f       	adc	r31, r25
    118e:	84 91       	lpm	r24, Z
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <print_char>
    1198:	46 c0       	rjmp	.+140    	; 0x1226 <keyboard_select_curr+0xe6>
	}

	//selected menu item is in toolbar
	else {
		if (pos.x < 2) {
    119a:	20 91 aa 03 	lds	r18, 0x03AA
    119e:	30 91 ab 03 	lds	r19, 0x03AB
    11a2:	22 30       	cpi	r18, 0x02	; 2
    11a4:	31 05       	cpc	r19, r1
    11a6:	6c f4       	brge	.+26     	; 0x11c2 <keyboard_select_curr+0x82>
			pos.x = 0;
    11a8:	10 92 ab 03 	sts	0x03AB, r1
    11ac:	10 92 aa 03 	sts	0x03AA, r1
			keyboard_goto(pos.y, pos.x);
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	0e 94 5d 06 	call	0xcba	; 0xcba <keyboard_goto>
			print_shift(INVERSE);
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <print_shift>
    11c0:	32 c0       	rjmp	.+100    	; 0x1226 <keyboard_select_curr+0xe6>
		}
		else if (pos.x < 8) {
    11c2:	28 30       	cpi	r18, 0x08	; 8
    11c4:	31 05       	cpc	r19, r1
    11c6:	7c f4       	brge	.+30     	; 0x11e6 <keyboard_select_curr+0xa6>
			pos.x = 2; //start of spacebar
    11c8:	22 e0       	ldi	r18, 0x02	; 2
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	30 93 ab 03 	sts	0x03AB, r19
    11d0:	20 93 aa 03 	sts	0x03AA, r18
			keyboard_goto(pos.y, pos.x);
    11d4:	62 e0       	ldi	r22, 0x02	; 2
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	0e 94 5d 06 	call	0xcba	; 0xcba <keyboard_goto>
			print_spacebar(INVERSE);
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <print_spacebar>
    11e4:	20 c0       	rjmp	.+64     	; 0x1226 <keyboard_select_curr+0xe6>
		}
		else if (pos.x < 10) {
    11e6:	2a 30       	cpi	r18, 0x0A	; 10
    11e8:	31 05       	cpc	r19, r1
    11ea:	7c f4       	brge	.+30     	; 0x120a <keyboard_select_curr+0xca>
			pos.x = 8; //start of left arrow
    11ec:	28 e0       	ldi	r18, 0x08	; 8
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	30 93 ab 03 	sts	0x03AB, r19
    11f4:	20 93 aa 03 	sts	0x03AA, r18
			keyboard_goto(pos.y, pos.x);
    11f8:	68 e0       	ldi	r22, 0x08	; 8
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	0e 94 5d 06 	call	0xcba	; 0xcba <keyboard_goto>
			print_left_arrow(INVERSE);
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <print_left_arrow>
    1208:	0e c0       	rjmp	.+28     	; 0x1226 <keyboard_select_curr+0xe6>
		}
		else {
			pos.x = 10; //start of right arrow
    120a:	2a e0       	ldi	r18, 0x0A	; 10
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	30 93 ab 03 	sts	0x03AB, r19
    1212:	20 93 aa 03 	sts	0x03AA, r18
			keyboard_goto(pos.y, pos.x);
    1216:	6a e0       	ldi	r22, 0x0A	; 10
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	0e 94 5d 06 	call	0xcba	; 0xcba <keyboard_goto>
			print_right_arrow(INVERSE);
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <print_right_arrow>
		}
	}
}
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	08 95       	ret

0000122c <keyboard_item_pressed>:


void keyboard_item_pressed() {
	if (pos.y < 4) {
    122c:	80 91 ac 03 	lds	r24, 0x03AC
    1230:	90 91 ad 03 	lds	r25, 0x03AD
    1234:	84 30       	cpi	r24, 0x04	; 4
    1236:	91 05       	cpc	r25, r1
    1238:	e4 f4       	brge	.+56     	; 0x1272 <keyboard_item_pressed+0x46>
		append_char(pgm_read_byte(&letters[pos.y * LINE_LENGTH + pos.x]));
    123a:	fc 01       	movw	r30, r24
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	8e 0f       	add	r24, r30
    1242:	9f 1f       	adc	r25, r31
    1244:	fc 01       	movw	r30, r24
    1246:	ee 0f       	add	r30, r30
    1248:	ff 1f       	adc	r31, r31
    124a:	ee 0f       	add	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	20 91 aa 03 	lds	r18, 0x03AA
    1252:	30 91 ab 03 	lds	r19, 0x03AB
    1256:	e2 0f       	add	r30, r18
    1258:	f3 1f       	adc	r31, r19
    125a:	80 91 30 01 	lds	r24, 0x0130
    125e:	90 91 31 01 	lds	r25, 0x0131
    1262:	e8 0f       	add	r30, r24
    1264:	f9 1f       	adc	r31, r25
    1266:	84 91       	lpm	r24, Z
    1268:	0e 94 38 06 	call	0xc70	; 0xc70 <append_char>
		//printf("APPEND written string: %s", written_string);
		//replace with a print function that remembers which part is printed, used with < >
		print_string();
    126c:	0e 94 66 06 	call	0xccc	; 0xccc <print_string>
    1270:	08 95       	ret
	}
	else {
		if (pos.x < 2) {
    1272:	80 91 aa 03 	lds	r24, 0x03AA
    1276:	90 91 ab 03 	lds	r25, 0x03AB
    127a:	82 30       	cpi	r24, 0x02	; 2
    127c:	91 05       	cpc	r25, r1
    127e:	1c f4       	brge	.+6      	; 0x1286 <keyboard_item_pressed+0x5a>
			toggle_shift();
    1280:	0e 94 73 07 	call	0xee6	; 0xee6 <toggle_shift>
    1284:	08 95       	ret
		}
		else if (pos.x < 8) {
    1286:	88 30       	cpi	r24, 0x08	; 8
    1288:	91 05       	cpc	r25, r1
    128a:	34 f4       	brge	.+12     	; 0x1298 <keyboard_item_pressed+0x6c>
			append_char(32);
    128c:	80 e2       	ldi	r24, 0x20	; 32
    128e:	0e 94 38 06 	call	0xc70	; 0xc70 <append_char>
			print_string();
    1292:	0e 94 66 06 	call	0xccc	; 0xccc <print_string>
    1296:	08 95       	ret
		}
		
		//last two probably not working
		else if (pos.x < 10 && string_position > 0) {
    1298:	8a 30       	cpi	r24, 0x0A	; 10
    129a:	91 05       	cpc	r25, r1
    129c:	74 f4       	brge	.+28     	; 0x12ba <keyboard_item_pressed+0x8e>
    129e:	20 91 b0 03 	lds	r18, 0x03B0
    12a2:	30 91 b1 03 	lds	r19, 0x03B1
    12a6:	12 16       	cp	r1, r18
    12a8:	13 06       	cpc	r1, r19
    12aa:	3c f4       	brge	.+14     	; 0x12ba <keyboard_item_pressed+0x8e>
			string_position--;
    12ac:	21 50       	subi	r18, 0x01	; 1
    12ae:	31 09       	sbc	r19, r1
    12b0:	30 93 b1 03 	sts	0x03B1, r19
    12b4:	20 93 b0 03 	sts	0x03B0, r18
    12b8:	08 95       	ret
		}
		else if (pos.x < 12 && string_position < strlen(written_string)) {
    12ba:	0c 97       	sbiw	r24, 0x0c	; 12
    12bc:	a4 f4       	brge	.+40     	; 0x12e6 <keyboard_item_pressed+0xba>
    12be:	80 91 b0 03 	lds	r24, 0x03B0
    12c2:	90 91 b1 03 	lds	r25, 0x03B1
    12c6:	ee eb       	ldi	r30, 0xBE	; 190
    12c8:	f3 e0       	ldi	r31, 0x03	; 3
    12ca:	01 90       	ld	r0, Z+
    12cc:	00 20       	and	r0, r0
    12ce:	e9 f7       	brne	.-6      	; 0x12ca <keyboard_item_pressed+0x9e>
    12d0:	31 97       	sbiw	r30, 0x01	; 1
    12d2:	ee 5b       	subi	r30, 0xBE	; 190
    12d4:	f3 40       	sbci	r31, 0x03	; 3
    12d6:	8e 17       	cp	r24, r30
    12d8:	9f 07       	cpc	r25, r31
    12da:	28 f4       	brcc	.+10     	; 0x12e6 <keyboard_item_pressed+0xba>
			string_position++;
    12dc:	01 96       	adiw	r24, 0x01	; 1
    12de:	90 93 b1 03 	sts	0x03B1, r25
    12e2:	80 93 b0 03 	sts	0x03B0, r24
    12e6:	08 95       	ret

000012e8 <keyboard_run>:
	}
}



void keyboard_run() {
    12e8:	6f 92       	push	r6
    12ea:	7f 92       	push	r7
    12ec:	8f 92       	push	r8
    12ee:	9f 92       	push	r9
    12f0:	af 92       	push	r10
    12f2:	bf 92       	push	r11
    12f4:	cf 92       	push	r12
    12f6:	df 92       	push	r13
    12f8:	ef 92       	push	r14
    12fa:	ff 92       	push	r15
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
	keyboard_init();
    1304:	0e 94 b3 06 	call	0xd66	; 0xd66 <keyboard_init>
	while (!JOY_button_pressed(LEFT_BUTTON)) {
		//Check if we switch letter
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
    1308:	0f 2e       	mov	r0, r31
    130a:	f8 ea       	ldi	r31, 0xA8	; 168
    130c:	ef 2e       	mov	r14, r31
    130e:	f3 e0       	ldi	r31, 0x03	; 3
    1310:	ff 2e       	mov	r15, r31
    1312:	f0 2d       	mov	r31, r0
    1314:	0c ea       	ldi	r16, 0xAC	; 172
    1316:	13 e0       	ldi	r17, 0x03	; 3
			//unselect the old letter and select the new one
			keyboard_unselect_prev();
			keyboard_select_curr();

			//Reset position
			prev_pos.x = pos.x;
    1318:	0f 2e       	mov	r0, r31
    131a:	f6 ea       	ldi	r31, 0xA6	; 166
    131c:	af 2e       	mov	r10, r31
    131e:	f3 e0       	ldi	r31, 0x03	; 3
    1320:	bf 2e       	mov	r11, r31
    1322:	f0 2d       	mov	r31, r0
    1324:	0f 2e       	mov	r0, r31
    1326:	fa ea       	ldi	r31, 0xAA	; 170
    1328:	cf 2e       	mov	r12, r31
    132a:	f3 e0       	ldi	r31, 0x03	; 3
    132c:	df 2e       	mov	r13, r31
    132e:	f0 2d       	mov	r31, r0
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
			//printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
			position_moved = 1;
    1330:	88 24       	eor	r8, r8
    1332:	83 94       	inc	r8
    1334:	91 2c       	mov	r9, r1
    1336:	61 2c       	mov	r6, r1
    1338:	71 2c       	mov	r7, r1

	//detect changes
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
    133a:	59 c0       	rjmp	.+178    	; 0x13ee <keyboard_run+0x106>
		//Check if we switch letter
		direction = JOY_getDirection();
    133c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <JOY_getDirection>
		keyboard_register_position_change(direction);
    1340:	0e 94 9c 07 	call	0xf38	; 0xf38 <keyboard_register_position_change>
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
    1344:	f7 01       	movw	r30, r14
    1346:	20 81       	ld	r18, Z
    1348:	31 81       	ldd	r19, Z+1	; 0x01
    134a:	f8 01       	movw	r30, r16
    134c:	80 81       	ld	r24, Z
    134e:	91 81       	ldd	r25, Z+1	; 0x01
    1350:	28 17       	cp	r18, r24
    1352:	39 07       	cpc	r19, r25
    1354:	49 f4       	brne	.+18     	; 0x1368 <keyboard_run+0x80>
    1356:	f5 01       	movw	r30, r10
    1358:	20 81       	ld	r18, Z
    135a:	31 81       	ldd	r19, Z+1	; 0x01
    135c:	f6 01       	movw	r30, r12
    135e:	80 81       	ld	r24, Z
    1360:	91 81       	ldd	r25, Z+1	; 0x01
    1362:	28 17       	cp	r18, r24
    1364:	39 07       	cpc	r19, r25
    1366:	99 f0       	breq	.+38     	; 0x138e <keyboard_run+0xa6>
			//printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
			position_moved = 1;
			//unselect the old letter and select the new one
			keyboard_unselect_prev();
    1368:	0e 94 2a 08 	call	0x1054	; 0x1054 <keyboard_unselect_prev>
			keyboard_select_curr();
    136c:	0e 94 a0 08 	call	0x1140	; 0x1140 <keyboard_select_curr>

			//Reset position
			prev_pos.x = pos.x;
    1370:	f6 01       	movw	r30, r12
    1372:	80 81       	ld	r24, Z
    1374:	91 81       	ldd	r25, Z+1	; 0x01
    1376:	f5 01       	movw	r30, r10
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	80 83       	st	Z, r24
			prev_pos.y = pos.y;
    137c:	f8 01       	movw	r30, r16
    137e:	80 81       	ld	r24, Z
    1380:	91 81       	ldd	r25, Z+1	; 0x01
    1382:	f7 01       	movw	r30, r14
    1384:	91 83       	std	Z+1, r25	; 0x01
    1386:	80 83       	st	Z, r24
		direction = JOY_getDirection();
		keyboard_register_position_change(direction);
		
		if (prev_pos.y != pos.y || prev_pos.x != pos.x) {
			//printf("prev_pos.y: %d, y: %d, prev_pos.x: %d, prev_pos.y %d\n", prev_pos.y, pos.y, prev_pos.x, pos.x);
			position_moved = 1;
    1388:	c8 2d       	mov	r28, r8
    138a:	d9 2d       	mov	r29, r9
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <keyboard_run+0xaa>
    138e:	c6 2d       	mov	r28, r6
    1390:	d7 2d       	mov	r29, r7
			prev_pos.y = pos.y;
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
    1392:	82 e0       	ldi	r24, 0x02	; 2
    1394:	0e 94 ad 05 	call	0xb5a	; 0xb5a <JOY_button_pressed>
    1398:	89 2b       	or	r24, r25
    139a:	29 f0       	breq	.+10     	; 0x13a6 <keyboard_run+0xbe>
			button_pressed = 1;
			keyboard_item_pressed();
    139c:	0e 94 16 09 	call	0x122c	; 0x122c <keyboard_item_pressed>
		}


		//check if we wish to add the current letter to our string or activate an option
		if (JOY_button_pressed(JOY_BUTTON)) {
			button_pressed = 1;
    13a0:	88 2d       	mov	r24, r8
    13a2:	99 2d       	mov	r25, r9
    13a4:	0e c0       	rjmp	.+28     	; 0x13c2 <keyboard_run+0xda>
			keyboard_item_pressed();
			
		}
		//check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	0e 94 ad 05 	call	0xb5a	; 0xb5a <JOY_button_pressed>
    13ac:	89 2b       	or	r24, r25
    13ae:	39 f0       	breq	.+14     	; 0x13be <keyboard_run+0xd6>
			button_pressed = 1;
			//not working
			remove_last_char();
    13b0:	0e 94 51 06 	call	0xca2	; 0xca2 <remove_last_char>
			//printf("REMOVE written string: %s", written_string);
			print_string();
    13b4:	0e 94 66 06 	call	0xccc	; 0xccc <print_string>
			keyboard_item_pressed();
			
		}
		//check if we wish to remove a letter from our string
		else if (JOY_button_pressed(RIGHT_BUTTON)) {
			button_pressed = 1;
    13b8:	88 2d       	mov	r24, r8
    13ba:	99 2d       	mov	r25, r9
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <keyboard_run+0xda>
    13be:	86 2d       	mov	r24, r6
    13c0:	97 2d       	mov	r25, r7
			//OLED_pos(0, pointer);
			//print_blank(8);
			//blinking_pos_on = 1;
		//}
		
		if(position_moved){
    13c2:	cd 2b       	or	r28, r29
    13c4:	49 f0       	breq	.+18     	; 0x13d8 <keyboard_run+0xf0>
    13c6:	ef ef       	ldi	r30, 0xFF	; 255
    13c8:	ff eb       	ldi	r31, 0xBF	; 191
    13ca:	23 e0       	ldi	r18, 0x03	; 3
    13cc:	e1 50       	subi	r30, 0x01	; 1
    13ce:	f0 40       	sbci	r31, 0x00	; 0
    13d0:	20 40       	sbci	r18, 0x00	; 0
    13d2:	e1 f7       	brne	.-8      	; 0x13cc <keyboard_run+0xe4>
    13d4:	00 c0       	rjmp	.+0      	; 0x13d6 <keyboard_run+0xee>
    13d6:	00 00       	nop
			position_moved = 0;
			_delay_ms(250);
		}
		if(button_pressed){
    13d8:	89 2b       	or	r24, r25
    13da:	49 f0       	breq	.+18     	; 0x13ee <keyboard_run+0x106>
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	4f e3       	ldi	r20, 0x3F	; 63
    13e0:	85 e0       	ldi	r24, 0x05	; 5
    13e2:	31 50       	subi	r19, 0x01	; 1
    13e4:	40 40       	sbci	r20, 0x00	; 0
    13e6:	80 40       	sbci	r24, 0x00	; 0
    13e8:	e1 f7       	brne	.-8      	; 0x13e2 <keyboard_run+0xfa>
    13ea:	00 c0       	rjmp	.+0      	; 0x13ec <keyboard_run+0x104>
    13ec:	00 c0       	rjmp	.+0      	; 0x13ee <keyboard_run+0x106>

	//detect changes
	int position_moved = 0;
	int button_pressed = 0;

	while (!JOY_button_pressed(LEFT_BUTTON)) {
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <JOY_button_pressed>
    13f4:	89 2b       	or	r24, r25
    13f6:	09 f4       	brne	.+2      	; 0x13fa <keyboard_run+0x112>
    13f8:	a1 cf       	rjmp	.-190    	; 0x133c <keyboard_run+0x54>
		if(button_pressed){
			button_pressed = 0;
			_delay_ms(350);
		}
	}
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	df 90       	pop	r13
    1408:	cf 90       	pop	r12
    140a:	bf 90       	pop	r11
    140c:	af 90       	pop	r10
    140e:	9f 90       	pop	r9
    1410:	8f 90       	pop	r8
    1412:	7f 90       	pop	r7
    1414:	6f 90       	pop	r6
    1416:	08 95       	ret

00001418 <MCP2515_read>:
	}
	
	return 0;
}

char MCP2515_read(char address) {
    1418:	cf 93       	push	r28
    141a:	c8 2f       	mov	r28, r24
	SPI_select();
    141c:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <SPI_select>
	SPI_send(READ);
    1420:	83 e0       	ldi	r24, 0x03	; 3
    1422:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_send>
	SPI_send(address);
    1426:	8c 2f       	mov	r24, r28
    1428:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_send>
	char data = SPI_read();
    142c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <SPI_read>
    1430:	c8 2f       	mov	r28, r24
	SPI_deselect();
    1432:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <SPI_deselect>
	return data;
	
	
}
    1436:	8c 2f       	mov	r24, r28
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <MCP2515_write>:

void MCP2515_write(char address, char data) {
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	d8 2f       	mov	r29, r24
    1442:	c6 2f       	mov	r28, r22
	SPI_select();
    1444:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <SPI_select>
	SPI_send(WRITE);
    1448:	82 e0       	ldi	r24, 0x02	; 2
    144a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_send>
	SPI_send(address);
    144e:	8d 2f       	mov	r24, r29
    1450:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_send>
	SPI_send(data);
    1454:	8c 2f       	mov	r24, r28
    1456:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_send>
	SPI_deselect();
    145a:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <SPI_deselect>
}
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	08 95       	ret

00001464 <MCP2515_request_to_send>:

//Buffer states: three bit, setting a 1 on the buffer initiates transmitting from it 
void MCP2515_request_to_send(uint8_t buffer_states) {
    1464:	cf 93       	push	r28
    1466:	c8 2f       	mov	r28, r24
	SPI_select();
    1468:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <SPI_select>
	SPI_send(RTS_BASE+buffer_states);
    146c:	80 e8       	ldi	r24, 0x80	; 128
    146e:	8c 0f       	add	r24, r28
    1470:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_send>
	SPI_deselect();
    1474:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <SPI_deselect>
}
    1478:	cf 91       	pop	r28
    147a:	08 95       	ret

0000147c <MCP2515_bit_modify>:

//puts new_data in the selected reg_adress. the function assumes that you are allowed to change every bit in the register
void MCP2515_bit_modify(char reg_address, char masked_bits, char new_data) {
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	18 2f       	mov	r17, r24
    1484:	d6 2f       	mov	r29, r22
    1486:	c4 2f       	mov	r28, r20
	SPI_select();
    1488:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <SPI_select>
	SPI_send(BIT_MODIFY);
    148c:	85 e0       	ldi	r24, 0x05	; 5
    148e:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_send>
	SPI_send(reg_address);
    1492:	81 2f       	mov	r24, r17
    1494:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_send>
	SPI_send(masked_bits);
    1498:	8d 2f       	mov	r24, r29
    149a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_send>
	SPI_send(new_data);
    149e:	8c 2f       	mov	r24, r28
    14a0:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_send>
	SPI_deselect();
    14a4:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <SPI_deselect>
}
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	08 95       	ret

000014b0 <MCP2515_reset>:

void MCP2515_reset() {
	SPI_select();
    14b0:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <SPI_select>
	SPI_send(RESET);
    14b4:	80 ec       	ldi	r24, 0xC0	; 192
    14b6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_send>
	SPI_deselect();
    14ba:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <SPI_deselect>
    14be:	08 95       	ret

000014c0 <MCP2515_init>:
#define BIT_MODIFY 0x05
#define RTS_BASE 0x80


uint8_t MCP2515_init() {
	SPI_init();
    14c0:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <SPI_init>
	MCP2515_reset();
    14c4:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <MCP2515_reset>
	//check bit 7-5 of MCP_CANSTAT which signify the operation mode
	const uint8_t device_mode = MCP2515_read(MCP_CANSTAT) & MODE_MASK;
    14c8:	8e e0       	ldi	r24, 0x0E	; 14
    14ca:	0e 94 0c 0a 	call	0x1418	; 0x1418 <MCP2515_read>
    14ce:	80 7e       	andi	r24, 0xE0	; 224
	if (device_mode != MODE_CONFIG) {
    14d0:	80 38       	cpi	r24, 0x80	; 128
    14d2:	31 f0       	breq	.+12     	; 0x14e0 <MCP2515_init+0x20>
		printf("MCP2515 is NOT in configuration mode after reset!\n");
    14d4:	81 ee       	ldi	r24, 0xE1	; 225
    14d6:	92 e0       	ldi	r25, 0x02	; 2
    14d8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts>
		return 1;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	08 95       	ret
	}
	
	return 0;
    14e0:	80 e0       	ldi	r24, 0x00	; 0
}
    14e2:	08 95       	ret

000014e4 <MENU_draw_current_menu>:
	current_entry = current_entry->parent_node;
	selected_entry = current_entry->child_node;
	MENU_draw_current_menu();
}

void MENU_draw_current_menu() {
    14e4:	df 92       	push	r13
    14e6:	ef 92       	push	r14
    14e8:	ff 92       	push	r15
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
	OLED_reset();
    14f2:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <OLED_reset>
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
    14f6:	e0 91 e8 03 	lds	r30, 0x03E8
    14fa:	f0 91 e9 03 	lds	r31, 0x03E9
    14fe:	c4 81       	ldd	r28, Z+4	; 0x04
    1500:	d5 81       	ldd	r29, Z+5	; 0x05
	
	while( temp_node != NULL){
    1502:	20 97       	sbiw	r28, 0x00	; 0
    1504:	61 f1       	breq	.+88     	; 0x155e <MENU_draw_current_menu+0x7a>
    1506:	d1 2c       	mov	r13, r1
		OLED_pos(output_row++, 0);
		if (temp_node == selected_entry) {
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
    1508:	0f 2e       	mov	r0, r31
    150a:	f7 e0       	ldi	r31, 0x07	; 7
    150c:	ef 2e       	mov	r14, r31
    150e:	f2 e0       	ldi	r31, 0x02	; 2
    1510:	ff 2e       	mov	r15, r31
    1512:	f0 2d       	mov	r31, r0
    1514:	00 e4       	ldi	r16, 0x40	; 64
    1516:	11 e0       	ldi	r17, 0x01	; 1
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
		OLED_pos(output_row++, 0);
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	8d 2d       	mov	r24, r13
    151c:	0e 94 21 0c 	call	0x1842	; 0x1842 <OLED_pos>
		if (temp_node == selected_entry) {
    1520:	20 91 e6 03 	lds	r18, 0x03E6
    1524:	30 91 e7 03 	lds	r19, 0x03E7
    1528:	c2 17       	cp	r28, r18
    152a:	d3 07       	cpc	r29, r19
    152c:	11 f4       	brne	.+4      	; 0x1532 <MENU_draw_current_menu+0x4e>
			OLED_print_arrow();
    152e:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <OLED_print_arrow>
		}
		fprintf(OLED, " %s", temp_node->name);
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	8f 93       	push	r24
    1536:	88 81       	ld	r24, Y
    1538:	8f 93       	push	r24
    153a:	ff 92       	push	r15
    153c:	ef 92       	push	r14
    153e:	1f 93       	push	r17
    1540:	0f 93       	push	r16
    1542:	0e 94 0f 10 	call	0x201e	; 0x201e <fprintf>
		temp_node = temp_node -> next_sibling_node;
    1546:	0e 80       	ldd	r0, Y+6	; 0x06
    1548:	df 81       	ldd	r29, Y+7	; 0x07
    154a:	c0 2d       	mov	r28, r0
    154c:	d3 94       	inc	r13
	OLED_reset();
	int output_row = 0;
	
	menu_entry* temp_node = current_entry->child_node;
	
	while( temp_node != NULL){
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	20 97       	sbiw	r28, 0x00	; 0
    155c:	e9 f6       	brne	.-70     	; 0x1518 <MENU_draw_current_menu+0x34>
			OLED_print_arrow();
		}
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	df 90       	pop	r13
    156c:	08 95       	ret

0000156e <MENU_select_next>:
	MENU_draw_current_menu();
}


void MENU_select_next() {
	if (selected_entry -> next_sibling_node != NULL) {
    156e:	e0 91 e6 03 	lds	r30, 0x03E6
    1572:	f0 91 e7 03 	lds	r31, 0x03E7
    1576:	86 81       	ldd	r24, Z+6	; 0x06
    1578:	97 81       	ldd	r25, Z+7	; 0x07
    157a:	89 2b       	or	r24, r25
    157c:	41 f0       	breq	.+16     	; 0x158e <MENU_select_next+0x20>
		selected_entry = selected_entry -> next_sibling_node;
    157e:	86 81       	ldd	r24, Z+6	; 0x06
    1580:	97 81       	ldd	r25, Z+7	; 0x07
    1582:	90 93 e7 03 	sts	0x03E7, r25
    1586:	80 93 e6 03 	sts	0x03E6, r24
		MENU_draw_current_menu();
    158a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <MENU_draw_current_menu>
    158e:	08 95       	ret

00001590 <MENU_select_prev>:
	}
}

void MENU_select_prev() {
	if (selected_entry -> prev_sibling_node != NULL) {
    1590:	e0 91 e6 03 	lds	r30, 0x03E6
    1594:	f0 91 e7 03 	lds	r31, 0x03E7
    1598:	80 85       	ldd	r24, Z+8	; 0x08
    159a:	91 85       	ldd	r25, Z+9	; 0x09
    159c:	89 2b       	or	r24, r25
    159e:	41 f0       	breq	.+16     	; 0x15b0 <MENU_select_prev+0x20>
		selected_entry = selected_entry -> prev_sibling_node;
    15a0:	80 85       	ldd	r24, Z+8	; 0x08
    15a2:	91 85       	ldd	r25, Z+9	; 0x09
    15a4:	90 93 e7 03 	sts	0x03E7, r25
    15a8:	80 93 e6 03 	sts	0x03E6, r24
		MENU_draw_current_menu();
    15ac:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <MENU_draw_current_menu>
    15b0:	08 95       	ret

000015b2 <MENU_enter_selection>:
	}
}

void MENU_enter_selection() {
	if (selected_entry->function_ptr != NULL) {
    15b2:	e0 91 e6 03 	lds	r30, 0x03E6
    15b6:	f0 91 e7 03 	lds	r31, 0x03E7
    15ba:	82 85       	ldd	r24, Z+10	; 0x0a
    15bc:	93 85       	ldd	r25, Z+11	; 0x0b
    15be:	89 2b       	or	r24, r25
    15c0:	31 f0       	breq	.+12     	; 0x15ce <MENU_enter_selection+0x1c>
		selected_entry->function_ptr();
    15c2:	02 84       	ldd	r0, Z+10	; 0x0a
    15c4:	f3 85       	ldd	r31, Z+11	; 0x0b
    15c6:	e0 2d       	mov	r30, r0
    15c8:	09 95       	icall
		MENU_draw_current_menu();
    15ca:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <MENU_draw_current_menu>
	}
	
	if (selected_entry->child_node == NULL) return;
    15ce:	e0 91 e6 03 	lds	r30, 0x03E6
    15d2:	f0 91 e7 03 	lds	r31, 0x03E7
    15d6:	84 81       	ldd	r24, Z+4	; 0x04
    15d8:	95 81       	ldd	r25, Z+5	; 0x05
    15da:	89 2b       	or	r24, r25
    15dc:	61 f0       	breq	.+24     	; 0x15f6 <MENU_enter_selection+0x44>
	
	current_entry = selected_entry;
    15de:	f0 93 e9 03 	sts	0x03E9, r31
    15e2:	e0 93 e8 03 	sts	0x03E8, r30
	selected_entry = current_entry->child_node;
    15e6:	84 81       	ldd	r24, Z+4	; 0x04
    15e8:	95 81       	ldd	r25, Z+5	; 0x05
    15ea:	90 93 e7 03 	sts	0x03E7, r25
    15ee:	80 93 e6 03 	sts	0x03E6, r24
	MENU_draw_current_menu();
    15f2:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <MENU_draw_current_menu>
    15f6:	08 95       	ret

000015f8 <MENU_go_back>:
}

void MENU_go_back() {
	if (current_entry->parent_node == NULL) return;
    15f8:	e0 91 e8 03 	lds	r30, 0x03E8
    15fc:	f0 91 e9 03 	lds	r31, 0x03E9
    1600:	82 81       	ldd	r24, Z+2	; 0x02
    1602:	93 81       	ldd	r25, Z+3	; 0x03
    1604:	89 2b       	or	r24, r25
    1606:	79 f0       	breq	.+30     	; 0x1626 <MENU_go_back+0x2e>
	
	current_entry = current_entry->parent_node;
    1608:	02 80       	ldd	r0, Z+2	; 0x02
    160a:	f3 81       	ldd	r31, Z+3	; 0x03
    160c:	e0 2d       	mov	r30, r0
    160e:	f0 93 e9 03 	sts	0x03E9, r31
    1612:	e0 93 e8 03 	sts	0x03E8, r30
	selected_entry = current_entry->child_node;
    1616:	84 81       	ldd	r24, Z+4	; 0x04
    1618:	95 81       	ldd	r25, Z+5	; 0x05
    161a:	90 93 e7 03 	sts	0x03E7, r25
    161e:	80 93 e6 03 	sts	0x03E6, r24
	MENU_draw_current_menu();
    1622:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <MENU_draw_current_menu>
    1626:	08 95       	ret

00001628 <MENU_run>:
		fprintf(OLED, " %s", temp_node->name);
		temp_node = temp_node -> next_sibling_node;
	}
}

void MENU_run() {
    1628:	cf 93       	push	r28
	bool change = false;
	if (JOY_getDirection() == DOWN) {
    162a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <JOY_getDirection>
    162e:	83 30       	cpi	r24, 0x03	; 3
    1630:	21 f4       	brne	.+8      	; 0x163a <MENU_run+0x12>
		MENU_select_next();
    1632:	0e 94 b7 0a 	call	0x156e	; 0x156e <MENU_select_next>
		change = true;
    1636:	c1 e0       	ldi	r28, 0x01	; 1
    1638:	09 c0       	rjmp	.+18     	; 0x164c <MENU_run+0x24>
	} 
	else if (JOY_getDirection() == UP) {
    163a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <JOY_getDirection>
    163e:	82 30       	cpi	r24, 0x02	; 2
    1640:	21 f4       	brne	.+8      	; 0x164a <MENU_run+0x22>
		MENU_select_prev();
    1642:	0e 94 c8 0a 	call	0x1590	; 0x1590 <MENU_select_prev>
		change = true;
    1646:	c1 e0       	ldi	r28, 0x01	; 1
    1648:	01 c0       	rjmp	.+2      	; 0x164c <MENU_run+0x24>
		temp_node = temp_node -> next_sibling_node;
	}
}

void MENU_run() {
	bool change = false;
    164a:	c0 e0       	ldi	r28, 0x00	; 0
	else if (JOY_getDirection() == UP) {
		MENU_select_prev();
		change = true;
	}
	
	if (JOY_button_pressed(JOY_BUTTON)) {
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <JOY_button_pressed>
    1652:	89 2b       	or	r24, r25
    1654:	19 f0       	breq	.+6      	; 0x165c <MENU_run+0x34>
		MENU_enter_selection();
    1656:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <MENU_enter_selection>
    165a:	0a c0       	rjmp	.+20     	; 0x1670 <MENU_run+0x48>
		change = true;
	}
	else if (JOY_button_pressed(LEFT_BUTTON)) {
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <JOY_button_pressed>
    1662:	89 2b       	or	r24, r25
    1664:	19 f0       	breq	.+6      	; 0x166c <MENU_run+0x44>
		MENU_go_back();
    1666:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <MENU_go_back>
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <MENU_run+0x48>
		change = true;
	}
	
	// Make sure the selection doesn't move multiple places at once.
	if (change){
    166c:	cc 23       	and	r28, r28
    166e:	49 f0       	breq	.+18     	; 0x1682 <MENU_run+0x5a>
    1670:	22 e3       	ldi	r18, 0x32	; 50
    1672:	83 ed       	ldi	r24, 0xD3	; 211
    1674:	93 e0       	ldi	r25, 0x03	; 3
    1676:	21 50       	subi	r18, 0x01	; 1
    1678:	80 40       	sbci	r24, 0x00	; 0
    167a:	90 40       	sbci	r25, 0x00	; 0
    167c:	e1 f7       	brne	.-8      	; 0x1676 <MENU_run+0x4e>
    167e:	00 c0       	rjmp	.+0      	; 0x1680 <MENU_run+0x58>
    1680:	00 c0       	rjmp	.+0      	; 0x1682 <MENU_run+0x5a>
		_delay_ms(255);
		change = false;
	}
}
    1682:	cf 91       	pop	r28
    1684:	08 95       	ret

00001686 <add_entry>:


menu_entry* add_entry(menu_entry* parent_node, char* name, void* function_ptr){
    1686:	ef 92       	push	r14
    1688:	ff 92       	push	r15
    168a:	0f 93       	push	r16
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	ec 01       	movw	r28, r24
    1694:	7b 01       	movw	r14, r22
    1696:	8a 01       	movw	r16, r20
	
	// Create the new node
	menu_entry* new_entry = (menu_entry*) malloc(sizeof(menu_entry));
    1698:	8c e0       	ldi	r24, 0x0C	; 12
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <malloc>
    16a0:	dc 01       	movw	r26, r24
	new_entry->name = name;
    16a2:	11 96       	adiw	r26, 0x01	; 1
    16a4:	fc 92       	st	X, r15
    16a6:	ee 92       	st	-X, r14
	new_entry->parent_node = parent_node;
    16a8:	13 96       	adiw	r26, 0x03	; 3
    16aa:	dc 93       	st	X, r29
    16ac:	ce 93       	st	-X, r28
    16ae:	12 97       	sbiw	r26, 0x02	; 2
	new_entry->child_node = NULL;  // A new node has no children
    16b0:	15 96       	adiw	r26, 0x05	; 5
    16b2:	1c 92       	st	X, r1
    16b4:	1e 92       	st	-X, r1
    16b6:	14 97       	sbiw	r26, 0x04	; 4
	new_entry->next_sibling_node = NULL;  // The new child is the last child
    16b8:	17 96       	adiw	r26, 0x07	; 7
    16ba:	1c 92       	st	X, r1
    16bc:	1e 92       	st	-X, r1
    16be:	16 97       	sbiw	r26, 0x06	; 6
	new_entry->prev_sibling_node = NULL;
    16c0:	19 96       	adiw	r26, 0x09	; 9
    16c2:	1c 92       	st	X, r1
    16c4:	1e 92       	st	-X, r1
    16c6:	18 97       	sbiw	r26, 0x08	; 8
	new_entry->function_ptr = function_ptr;
    16c8:	1b 96       	adiw	r26, 0x0b	; 11
    16ca:	1c 93       	st	X, r17
    16cc:	0e 93       	st	-X, r16
    16ce:	1a 97       	sbiw	r26, 0x0a	; 10
	
	// If the node has no parent, just return the node.
	if (parent_node == NULL) return new_entry;
    16d0:	20 97       	sbiw	r28, 0x00	; 0
    16d2:	a1 f0       	breq	.+40     	; 0x16fc <add_entry+0x76>
	
	// If the parent does not have any other children, point the parent directly at the child.
	if (parent_node->child_node == NULL) {
    16d4:	ec 81       	ldd	r30, Y+4	; 0x04
    16d6:	fd 81       	ldd	r31, Y+5	; 0x05
    16d8:	30 97       	sbiw	r30, 0x00	; 0
    16da:	19 f4       	brne	.+6      	; 0x16e2 <add_entry+0x5c>
		parent_node->child_node = new_entry;
    16dc:	9d 83       	std	Y+5, r25	; 0x05
    16de:	8c 83       	std	Y+4, r24	; 0x04
    16e0:	0d c0       	rjmp	.+26     	; 0x16fc <add_entry+0x76>
	else {
		// The first child of the parent
		menu_entry* temp_node = parent_node->child_node;
		
		// Keep going until you reach the last child (that has no younger sibling)
		while (temp_node->next_sibling_node != NULL) {
    16e2:	26 81       	ldd	r18, Z+6	; 0x06
    16e4:	37 81       	ldd	r19, Z+7	; 0x07
    16e6:	21 15       	cp	r18, r1
    16e8:	31 05       	cpc	r19, r1
    16ea:	11 f0       	breq	.+4      	; 0x16f0 <add_entry+0x6a>
			//printf("temp_node->next_sibling_node->name: %s\n", temp_node->next_sibling_node->name);
			temp_node = temp_node->next_sibling_node;
    16ec:	f9 01       	movw	r30, r18
    16ee:	f9 cf       	rjmp	.-14     	; 0x16e2 <add_entry+0x5c>
		}
		
		// Bind the new node to the current last child to become the new last child.
		temp_node->next_sibling_node = new_entry;
    16f0:	b7 83       	std	Z+7, r27	; 0x07
    16f2:	a6 83       	std	Z+6, r26	; 0x06
		new_entry->prev_sibling_node = temp_node;
    16f4:	19 96       	adiw	r26, 0x09	; 9
    16f6:	fc 93       	st	X, r31
    16f8:	ee 93       	st	-X, r30
    16fa:	18 97       	sbiw	r26, 0x08	; 8
	}
	
	// Parent/child/sibling bindings complete. Return the new node.
	return new_entry;
}
    16fc:	cd 01       	movw	r24, r26
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	08 95       	ret

0000170c <MENU_init>:
volatile menu_entry* selected_entry;




void MENU_init() {
    170c:	cf 92       	push	r12
    170e:	df 92       	push	r13
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
	menu_entry* main_menu = add_entry(NULL, "Main menu", NULL);
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	63 e1       	ldi	r22, 0x13	; 19
    1722:	73 e0       	ldi	r23, 0x03	; 3
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 43 0b 	call	0x1686	; 0x1686 <add_entry>
    172c:	ec 01       	movw	r28, r24
	
	// Main menu
	menu_entry* play = add_entry(main_menu, "Play game", game_play);
    172e:	47 e1       	ldi	r20, 0x17	; 23
    1730:	54 e0       	ldi	r21, 0x04	; 4
    1732:	6d e1       	ldi	r22, 0x1D	; 29
    1734:	73 e0       	ldi	r23, 0x03	; 3
    1736:	0e 94 43 0b 	call	0x1686	; 0x1686 <add_entry>
    173a:	8c 01       	movw	r16, r24
	add_entry(main_menu, "Highscore", print_highscore);
    173c:	45 e8       	ldi	r20, 0x85	; 133
    173e:	54 e0       	ldi	r21, 0x04	; 4
    1740:	67 e2       	ldi	r22, 0x27	; 39
    1742:	73 e0       	ldi	r23, 0x03	; 3
    1744:	ce 01       	movw	r24, r28
    1746:	0e 94 43 0b 	call	0x1686	; 0x1686 <add_entry>
	menu_entry* settings = add_entry(main_menu, "Settings", NULL);
    174a:	40 e0       	ldi	r20, 0x00	; 0
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	61 e3       	ldi	r22, 0x31	; 49
    1750:	73 e0       	ldi	r23, 0x03	; 3
    1752:	ce 01       	movw	r24, r28
    1754:	0e 94 43 0b 	call	0x1686	; 0x1686 <add_entry>
    1758:	6c 01       	movw	r12, r24
	menu_entry* extras = add_entry(main_menu, "Extra features", NULL);
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	6e e8       	ldi	r22, 0x8E	; 142
    1760:	73 e0       	ldi	r23, 0x03	; 3
    1762:	ce 01       	movw	r24, r28
    1764:	0e 94 43 0b 	call	0x1686	; 0x1686 <add_entry>
    1768:	7c 01       	movw	r14, r24
	
	
	// Sub-menu settings
	menu_entry* brightness = add_entry(settings, "Brightness", brightness_run);
    176a:	4a e5       	ldi	r20, 0x5A	; 90
    176c:	52 e0       	ldi	r21, 0x02	; 2
    176e:	6a e3       	ldi	r22, 0x3A	; 58
    1770:	73 e0       	ldi	r23, 0x03	; 3
    1772:	c6 01       	movw	r24, r12
    1774:	0e 94 43 0b 	call	0x1686	; 0x1686 <add_entry>
	//menu_entry* font = add_entry(settings, "Set font", NULL);
	
	// Sub-menu extras
	menu_entry* keyboard = add_entry(extras, "Keyboard", keyboard_run);
    1778:	44 e7       	ldi	r20, 0x74	; 116
    177a:	59 e0       	ldi	r21, 0x09	; 9
    177c:	65 e4       	ldi	r22, 0x45	; 69
    177e:	73 e0       	ldi	r23, 0x03	; 3
    1780:	c7 01       	movw	r24, r14
    1782:	0e 94 43 0b 	call	0x1686	; 0x1686 <add_entry>
	//menu_entry* mandelbrot = add_entry(extras, "Mandelbrot", NULL);
	//menu_entry* pong = add_entry(extras, "Play pong", NULL);
	//menu_entry* rcube = add_entry(extras, "rotating cube", NULL);
	
	current_entry = main_menu;
    1786:	d0 93 e9 03 	sts	0x03E9, r29
    178a:	c0 93 e8 03 	sts	0x03E8, r28
	selected_entry = play;
    178e:	10 93 e7 03 	sts	0x03E7, r17
    1792:	00 93 e6 03 	sts	0x03E6, r16
	MENU_draw_current_menu();
    1796:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <MENU_draw_current_menu>
}
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	df 90       	pop	r13
    17a8:	cf 90       	pop	r12
    17aa:	08 95       	ret

000017ac <initialize>:
#include <stdbool.h>

void send_control_input(void);

void initialize(void){
	cli();
    17ac:	f8 94       	cli
	usart_init(MYUBRR); 
    17ae:	8f e1       	ldi	r24, 0x1F	; 31
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <usart_init>
	SRAM_init();
    17b6:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <SRAM_init>
	ADC_init();
    17ba:	0e 94 03 02 	call	0x406	; 0x406 <ADC_init>
	JOY_init(CALIBRATION_DEFAULT);
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <JOY_init>
	OLED_init();
    17c6:	0e 94 55 0c 	call	0x18aa	; 0x18aa <OLED_init>
	MENU_init();
    17ca:	0e 94 86 0b 	call	0x170c	; 0x170c <MENU_init>
	CAN_init();
    17ce:	0e 94 ad 02 	call	0x55a	; 0x55a <CAN_init>
	sei();
    17d2:	78 94       	sei
    17d4:	08 95       	ret

000017d6 <main>:
}



int main(void) {
	initialize();
    17d6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <initialize>
	printf("Initialization of Node 1 complete!\n\n");
    17da:	8e e4       	ldi	r24, 0x4E	; 78
    17dc:	93 e0       	ldi	r25, 0x03	; 3
    17de:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts>
	while(1) {
		MENU_run();
    17e2:	0e 94 14 0b 	call	0x1628	; 0x1628 <MENU_run>
    17e6:	fd cf       	rjmp	.-6      	; 0x17e2 <main+0xc>

000017e8 <write_data>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    17e8:	e0 91 50 01 	lds	r30, 0x0150
    17ec:	f0 91 51 01 	lds	r31, 0x0151
    17f0:	80 83       	st	Z, r24
    17f2:	08 95       	ret

000017f4 <OLED_goto_line>:
	OLED_goto_line(line);
	OLED_goto_column(column);
}

void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7) 
    17f4:	88 30       	cpi	r24, 0x08	; 8
    17f6:	60 f4       	brcc	.+24     	; 0x1810 <OLED_goto_line+0x1c>
		return;
	
	write_cmd(0xB0 + line);
    17f8:	90 eb       	ldi	r25, 0xB0	; 176
    17fa:	98 0f       	add	r25, r24

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    17fc:	e0 91 4e 01 	lds	r30, 0x014E
    1800:	f0 91 4f 01 	lds	r31, 0x014F
    1804:	90 83       	st	Z, r25
void OLED_goto_line(uint8_t line){
	if (line < 0 || line > 7) 
		return;
	
	write_cmd(0xB0 + line);
	current_line = line;
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	90 93 b5 03 	sts	0x03B5, r25
    180c:	80 93 b4 03 	sts	0x03B4, r24
    1810:	08 95       	ret

00001812 <OLED_goto_column>:
}

void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127) 
    1812:	88 23       	and	r24, r24
    1814:	ac f0       	brlt	.+42     	; 0x1840 <OLED_goto_column+0x2e>
		return;
	
	write_cmd(0x00 + column%16); // Lower column register
    1816:	98 2f       	mov	r25, r24
    1818:	9f 70       	andi	r25, 0x0F	; 15

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    181a:	e0 91 4e 01 	lds	r30, 0x014E
    181e:	f0 91 4f 01 	lds	r31, 0x014F
    1822:	90 83       	st	Z, r25
void OLED_goto_column(uint8_t column){
	if (column < 0 || column > 127) 
		return;
	
	write_cmd(0x00 + column%16); // Lower column register
	write_cmd(0x10 + column/16); // Higher column register
    1824:	98 2f       	mov	r25, r24
    1826:	92 95       	swap	r25
    1828:	9f 70       	andi	r25, 0x0F	; 15
    182a:	90 5f       	subi	r25, 0xF0	; 240

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    182c:	e0 91 4e 01 	lds	r30, 0x014E
    1830:	f0 91 4f 01 	lds	r31, 0x014F
    1834:	90 83       	st	Z, r25
	if (column < 0 || column > 127) 
		return;
	
	write_cmd(0x00 + column%16); // Lower column register
	write_cmd(0x10 + column/16); // Higher column register
	current_column = column;
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	90 93 b3 03 	sts	0x03B3, r25
    183c:	80 93 b2 03 	sts	0x03B2, r24
    1840:	08 95       	ret

00001842 <OLED_pos>:
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
		write_data(0x00);
	}
}

void OLED_pos(uint8_t line, uint8_t column) {
    1842:	cf 93       	push	r28
    1844:	c6 2f       	mov	r28, r22
	if (line < 0 || line > 7 || column < 0 || column > 127) {
    1846:	88 30       	cpi	r24, 0x08	; 8
    1848:	10 f4       	brcc	.+4      	; 0x184e <OLED_pos+0xc>
    184a:	66 23       	and	r22, r22
    184c:	2c f4       	brge	.+10     	; 0x1858 <OLED_pos+0x16>
		printf("Out of range in OLED_pos()\n");
    184e:	82 e7       	ldi	r24, 0x72	; 114
    1850:	93 e0       	ldi	r25, 0x03	; 3
    1852:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <puts>
		return; 
    1856:	05 c0       	rjmp	.+10     	; 0x1862 <OLED_pos+0x20>
	}
	
	OLED_goto_line(line);
    1858:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <OLED_goto_line>
	OLED_goto_column(column);
    185c:	8c 2f       	mov	r24, r28
    185e:	0e 94 09 0c 	call	0x1812	; 0x1812 <OLED_goto_column>
}
    1862:	cf 91       	pop	r28
    1864:	08 95       	ret

00001866 <OLED_reset_cursor>:
	OLED_clear_screen();
	OLED_reset_cursor();
}

void OLED_reset_cursor(){
	OLED_pos(0,0);
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	0e 94 21 0c 	call	0x1842	; 0x1842 <OLED_pos>
    186e:	08 95       	ret

00001870 <OLED_clear_line>:
		OLED_clear_line(page);
	}
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line, 0);
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	0e 94 21 0c 	call	0x1842	; 0x1842 <OLED_pos>
    1876:	80 e8       	ldi	r24, 0x80	; 128
    1878:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    187a:	e0 91 50 01 	lds	r30, 0x0150
    187e:	f0 91 51 01 	lds	r31, 0x0151
    1882:	10 82       	st	Z, r1
    1884:	01 97       	sbiw	r24, 0x01	; 1
	}
}

void OLED_clear_line(uint8_t line) {
	OLED_pos(line, 0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	c1 f7       	brne	.-16     	; 0x187a <OLED_clear_line+0xa>
		write_data(0x00);
	}
}
    188a:	08 95       	ret

0000188c <OLED_clear_screen>:

void OLED_reset_cursor(){
	OLED_pos(0,0);
}

void OLED_clear_screen() {
    188c:	cf 93       	push	r28
    188e:	c0 e0       	ldi	r28, 0x00	; 0
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
		OLED_clear_line(page);
    1890:	8c 2f       	mov	r24, r28
    1892:	0e 94 38 0c 	call	0x1870	; 0x1870 <OLED_clear_line>
    1896:	cf 5f       	subi	r28, 0xFF	; 255
void OLED_reset_cursor(){
	OLED_pos(0,0);
}

void OLED_clear_screen() {
	for(int page = 0; page < OLED_PAGE_COUNT; page++) {
    1898:	c8 30       	cpi	r28, 0x08	; 8
    189a:	d1 f7       	brne	.-12     	; 0x1890 <OLED_clear_screen+0x4>
		OLED_clear_line(page);
	}
}
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <OLED_reset>:
	}
	OLED_reset();
}

void OLED_reset() {
	OLED_clear_screen();
    18a0:	0e 94 46 0c 	call	0x188c	; 0x188c <OLED_clear_screen>
	OLED_reset_cursor();
    18a4:	0e 94 33 0c 	call	0x1866	; 0x1866 <OLED_reset_cursor>
    18a8:	08 95       	ret

000018aa <OLED_init>:

void write_data(uint8_t data){
	*data_address = data;
}

void OLED_init(){
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	67 97       	sbiw	r28, 0x17	; 23
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
	const char commands[] = {
    18be:	87 e1       	ldi	r24, 0x17	; 23
    18c0:	e2 e5       	ldi	r30, 0x52	; 82
    18c2:	f1 e0       	ldi	r31, 0x01	; 1
    18c4:	de 01       	movw	r26, r28
    18c6:	11 96       	adiw	r26, 0x01	; 1
    18c8:	01 90       	ld	r0, Z+
    18ca:	0d 92       	st	X+, r0
    18cc:	8a 95       	dec	r24
    18ce:	e1 f7       	brne	.-8      	; 0x18c8 <OLED_init+0x1e>
    18d0:	fe 01       	movw	r30, r28
    18d2:	31 96       	adiw	r30, 0x01	; 1
    18d4:	ce 01       	movw	r24, r28
    18d6:	48 96       	adiw	r24, 0x18	; 24
		0xAF  // Display on
	};
	
	const int command_count = sizeof(commands)/sizeof(commands[0]);
	for (int i = 0; i < command_count; i++) {
		write_cmd(commands[i]);
    18d8:	21 91       	ld	r18, Z+

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    18da:	a0 91 4e 01 	lds	r26, 0x014E
    18de:	b0 91 4f 01 	lds	r27, 0x014F
    18e2:	2c 93       	st	X, r18
		0xA6, // Set normal display
		0xAF  // Display on
	};
	
	const int command_count = sizeof(commands)/sizeof(commands[0]);
	for (int i = 0; i < command_count; i++) {
    18e4:	e8 17       	cp	r30, r24
    18e6:	f9 07       	cpc	r31, r25
    18e8:	b9 f7       	brne	.-18     	; 0x18d8 <OLED_init+0x2e>
		write_cmd(commands[i]);
	}
	OLED_reset();
    18ea:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <OLED_reset>
}
    18ee:	67 96       	adiw	r28, 0x17	; 23
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	08 95       	ret

00001900 <OLED_print_char>:

void OLED_print_char(char character){
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = character - ascii_starting_point;
	
	switch (character) {
    1900:	8a 30       	cpi	r24, 0x0A	; 10
    1902:	29 f0       	breq	.+10     	; 0x190e <OLED_print_char+0xe>
    1904:	8d 30       	cpi	r24, 0x0D	; 13
    1906:	61 f0       	breq	.+24     	; 0x1920 <OLED_print_char+0x20>
    1908:	81 11       	cpse	r24, r1
    190a:	12 c0       	rjmp	.+36     	; 0x1930 <OLED_print_char+0x30>
    190c:	08 95       	ret
		case '\0'  :
		break;
		
		case '\n'  :  
		// Reset cursor and move it to the next line
		OLED_pos(current_line + 1, 0);  
    190e:	80 91 b4 03 	lds	r24, 0x03B4
    1912:	90 91 b5 03 	lds	r25, 0x03B5
    1916:	60 e0       	ldi	r22, 0x00	; 0
    1918:	8f 5f       	subi	r24, 0xFF	; 255
    191a:	0e 94 21 0c 	call	0x1842	; 0x1842 <OLED_pos>
		break;
    191e:	08 95       	ret
		
		case '\r'  :  
		// Reset cursor to start of current line
		OLED_pos(current_line, 0);  
    1920:	80 91 b4 03 	lds	r24, 0x03B4
    1924:	90 91 b5 03 	lds	r25, 0x03B5
    1928:	60 e0       	ldi	r22, 0x00	; 0
    192a:	0e 94 21 0c 	call	0x1842	; 0x1842 <OLED_pos>
		break;
    192e:	08 95       	ret
    1930:	e8 2f       	mov	r30, r24
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	ee 0f       	add	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	ee 0f       	add	r30, r30
    193e:	ff 1f       	adc	r31, r31
    1940:	e0 53       	subi	r30, 0x30	; 48
    1942:	f0 40       	sbci	r31, 0x00	; 0

void OLED_print_char(char character){
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = character - ascii_starting_point;
	
	switch (character) {
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
		break;
		
		default :
		// Print character using the included fonts
		for (int col = 0; col < FONT_SIZE; col++){
			write_data(pgm_read_byte(&font8[letter_index][col]));
    1948:	24 91       	lpm	r18, Z
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    194a:	a0 91 50 01 	lds	r26, 0x0150
    194e:	b0 91 51 01 	lds	r27, 0x0151
    1952:	2c 93       	st	X, r18
		OLED_pos(current_line, 0);  
		break;
		
		default :
		// Print character using the included fonts
		for (int col = 0; col < FONT_SIZE; col++){
    1954:	01 96       	adiw	r24, 0x01	; 1
    1956:	31 96       	adiw	r30, 0x01	; 1
    1958:	88 30       	cpi	r24, 0x08	; 8
    195a:	91 05       	cpc	r25, r1
    195c:	a9 f7       	brne	.-22     	; 0x1948 <OLED_print_char+0x48>
    195e:	08 95       	ret

00001960 <OLED_set_brightness>:

/************************************************************************/
/* FUNCTION IMPLEMENTATIONS                                             */
/************************************************************************/
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
    1960:	e0 91 4e 01 	lds	r30, 0x014E
    1964:	f0 91 4f 01 	lds	r31, 0x014F
    1968:	91 e8       	ldi	r25, 0x81	; 129
    196a:	90 83       	st	Z, r25
    196c:	e0 91 4e 01 	lds	r30, 0x014E
    1970:	f0 91 4f 01 	lds	r31, 0x014F
    1974:	80 83       	st	Z, r24
    1976:	08 95       	ret

00001978 <OLED_print_char_inverse>:
		}
	}
}

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
    1978:	88 23       	and	r24, r24
    197a:	c1 f0       	breq	.+48     	; 0x19ac <OLED_print_char_inverse+0x34>
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
    197c:	e8 2f       	mov	r30, r24
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	ee 0f       	add	r30, r30
    1982:	ff 1f       	adc	r31, r31
    1984:	ee 0f       	add	r30, r30
    1986:	ff 1f       	adc	r31, r31
    1988:	ee 0f       	add	r30, r30
    198a:	ff 1f       	adc	r31, r31
    198c:	e0 53       	subi	r30, 0x30	; 48
    198e:	f0 40       	sbci	r31, 0x00	; 0
	for (int col = 0; col < FONT_SIZE; col++) {
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
		write_data(~pgm_read_byte(&font8[letter_index][col]));
    1994:	24 91       	lpm	r18, Z
    1996:	20 95       	com	r18
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    1998:	a0 91 50 01 	lds	r26, 0x0150
    199c:	b0 91 51 01 	lds	r27, 0x0151
    19a0:	2c 93       	st	X, r18

void OLED_print_char_inverse(char c) {
	if (c == '\0') return;
	uint8_t ascii_starting_point = 32;
	uint16_t letter_index = c - ascii_starting_point;
	for (int col = 0; col < FONT_SIZE; col++) {
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	31 96       	adiw	r30, 0x01	; 1
    19a6:	88 30       	cpi	r24, 0x08	; 8
    19a8:	91 05       	cpc	r25, r1
    19aa:	a1 f7       	brne	.-24     	; 0x1994 <OLED_print_char_inverse+0x1c>
    19ac:	08 95       	ret

000019ae <OLED_set_line>:
	}
	OLED_reset_cursor();
}

void OLED_set_line(uint8_t line) {
	OLED_pos(line,0);
    19ae:	60 e0       	ldi	r22, 0x00	; 0
    19b0:	0e 94 21 0c 	call	0x1842	; 0x1842 <OLED_pos>
    19b4:	80 e8       	ldi	r24, 0x80	; 128
    19b6:	90 e0       	ldi	r25, 0x00	; 0
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    19b8:	2f ef       	ldi	r18, 0xFF	; 255
    19ba:	e0 91 50 01 	lds	r30, 0x0150
    19be:	f0 91 51 01 	lds	r31, 0x0151
    19c2:	20 83       	st	Z, r18
    19c4:	01 97       	sbiw	r24, 0x01	; 1
	OLED_reset_cursor();
}

void OLED_set_line(uint8_t line) {
	OLED_pos(line,0);
	for (int column = 0; column < OLED_COLUMN_COUNT; column++) {
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	c1 f7       	brne	.-16     	; 0x19ba <OLED_set_line+0xc>
		write_data(0xFF);
	}
}
    19ca:	08 95       	ret

000019cc <OLED_print_arrow>:
void write_cmd(uint8_t cmd){
	*cmd_address = cmd;
}

void write_data(uint8_t data){
	*data_address = data;
    19cc:	e0 91 50 01 	lds	r30, 0x0150
    19d0:	f0 91 51 01 	lds	r31, 0x0151
    19d4:	88 e1       	ldi	r24, 0x18	; 24
    19d6:	80 83       	st	Z, r24
    19d8:	e0 91 50 01 	lds	r30, 0x0150
    19dc:	f0 91 51 01 	lds	r31, 0x0151
    19e0:	80 83       	st	Z, r24
    19e2:	e0 91 50 01 	lds	r30, 0x0150
    19e6:	f0 91 51 01 	lds	r31, 0x0151
    19ea:	9e e7       	ldi	r25, 0x7E	; 126
    19ec:	90 83       	st	Z, r25
    19ee:	e0 91 50 01 	lds	r30, 0x0150
    19f2:	f0 91 51 01 	lds	r31, 0x0151
    19f6:	9c e3       	ldi	r25, 0x3C	; 60
    19f8:	90 83       	st	Z, r25
    19fa:	e0 91 50 01 	lds	r30, 0x0150
    19fe:	f0 91 51 01 	lds	r31, 0x0151
    1a02:	80 83       	st	Z, r24
    1a04:	08 95       	ret

00001a06 <print_blank>:
#include "OLED_driver.h"

#include <stdio.h>
#include <string.h>

void print_blank(int number) {
    1a06:	0f 93       	push	r16
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
    1a10:	18 16       	cp	r1, r24
    1a12:	19 06       	cpc	r1, r25
    1a14:	54 f4       	brge	.+20     	; 0x1a2a <print_blank+0x24>
    1a16:	c0 e0       	ldi	r28, 0x00	; 0
    1a18:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0x00);
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>

#include <stdio.h>
#include <string.h>

void print_blank(int number) {
	for (int i = 0; i < number; i++) {
    1a22:	21 96       	adiw	r28, 0x01	; 1
    1a24:	c0 17       	cp	r28, r16
    1a26:	d1 07       	cpc	r29, r17
    1a28:	c1 f7       	brne	.-16     	; 0x1a1a <print_blank+0x14>
		write_data(0x00);
	}
}
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	08 95       	ret

00001a34 <print_fill>:

void print_fill(int number) {
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	8c 01       	movw	r16, r24
	for (int i = 0; i < number; i++) {
    1a3e:	18 16       	cp	r1, r24
    1a40:	19 06       	cpc	r1, r25
    1a42:	54 f4       	brge	.+20     	; 0x1a58 <print_fill+0x24>
    1a44:	c0 e0       	ldi	r28, 0x00	; 0
    1a46:	d0 e0       	ldi	r29, 0x00	; 0
		write_data(0xFF);
    1a48:	8f ef       	ldi	r24, 0xFF	; 255
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(0x00);
	}
}

void print_fill(int number) {
	for (int i = 0; i < number; i++) {
    1a50:	21 96       	adiw	r28, 0x01	; 1
    1a52:	c0 17       	cp	r28, r16
    1a54:	d1 07       	cpc	r29, r17
    1a56:	c1 f7       	brne	.-16     	; 0x1a48 <print_fill+0x14>
		write_data(0xFF);
	}
}
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	08 95       	ret

00001a62 <print_shift>:

void print_shift(int inverse) {
	if (!inverse) {
    1a62:	89 2b       	or	r24, r25
    1a64:	29 f5       	brne	.+74     	; 0x1ab0 <print_shift+0x4e>
		print_blank(4);
    1a66:	84 e0       	ldi	r24, 0x04	; 4
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <print_blank>
		//up-arrow
		write_data(0b00010000);
    1a6e:	80 e1       	ldi	r24, 0x10	; 16
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(0b00011000);
    1a76:	88 e1       	ldi	r24, 0x18	; 24
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(0b00111100);
    1a7e:	8c e3       	ldi	r24, 0x3C	; 60
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(0b00111110);
    1a86:	8e e3       	ldi	r24, 0x3E	; 62
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(0b00111100);
    1a8e:	8c e3       	ldi	r24, 0x3C	; 60
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(0b00011000);
    1a96:	88 e1       	ldi	r24, 0x18	; 24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(0b00010000);
    1a9e:	80 e1       	ldi	r24, 0x10	; 16
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>

		print_blank(5);
    1aa6:	85 e0       	ldi	r24, 0x05	; 5
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <print_blank>
    1aae:	08 95       	ret
	}
	else {
		print_fill(4);
    1ab0:	84 e0       	ldi	r24, 0x04	; 4
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <print_fill>
		//up-arrow
		write_data(~0b00010000);
    1ab8:	8f ee       	ldi	r24, 0xEF	; 239
    1aba:	9f ef       	ldi	r25, 0xFF	; 255
    1abc:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(~0b00011000);
    1ac0:	87 ee       	ldi	r24, 0xE7	; 231
    1ac2:	9f ef       	ldi	r25, 0xFF	; 255
    1ac4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(~0b00111100);
    1ac8:	83 ec       	ldi	r24, 0xC3	; 195
    1aca:	9f ef       	ldi	r25, 0xFF	; 255
    1acc:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(~0b00111110);
    1ad0:	81 ec       	ldi	r24, 0xC1	; 193
    1ad2:	9f ef       	ldi	r25, 0xFF	; 255
    1ad4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(~0b00111100);
    1ad8:	83 ec       	ldi	r24, 0xC3	; 195
    1ada:	9f ef       	ldi	r25, 0xFF	; 255
    1adc:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(~0b00011000);
    1ae0:	87 ee       	ldi	r24, 0xE7	; 231
    1ae2:	9f ef       	ldi	r25, 0xFF	; 255
    1ae4:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(~0b00010000);
    1ae8:	8f ee       	ldi	r24, 0xEF	; 239
    1aea:	9f ef       	ldi	r25, 0xFF	; 255
    1aec:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		print_fill(5);
    1af0:	85 e0       	ldi	r24, 0x05	; 5
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <print_fill>
    1af8:	08 95       	ret

00001afa <print_left_arrow>:
	}
}

void print_left_arrow(int inverse) {
	if (!inverse) {
    1afa:	89 2b       	or	r24, r25
    1afc:	a9 f4       	brne	.+42     	; 0x1b28 <print_left_arrow+0x2e>
		print_blank(6);
    1afe:	86 e0       	ldi	r24, 0x06	; 6
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <print_blank>
		//left-arrow

		write_data(0b00010000);
    1b06:	80 e1       	ldi	r24, 0x10	; 16
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(0b00111000);
    1b0e:	88 e3       	ldi	r24, 0x38	; 56
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(0b01111100);
    1b16:	8c e7       	ldi	r24, 0x7C	; 124
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>

		print_blank(7);
    1b1e:	87 e0       	ldi	r24, 0x07	; 7
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <print_blank>
    1b26:	08 95       	ret
	}
	else {
		print_fill(6);
    1b28:	86 e0       	ldi	r24, 0x06	; 6
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <print_fill>
		//left-arrow
		write_data(~0b00010000);
    1b30:	8f ee       	ldi	r24, 0xEF	; 239
    1b32:	9f ef       	ldi	r25, 0xFF	; 255
    1b34:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(~0b00111000);
    1b38:	87 ec       	ldi	r24, 0xC7	; 199
    1b3a:	9f ef       	ldi	r25, 0xFF	; 255
    1b3c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(~0b01111100);
    1b40:	83 e8       	ldi	r24, 0x83	; 131
    1b42:	9f ef       	ldi	r25, 0xFF	; 255
    1b44:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>

		print_fill(7);
    1b48:	87 e0       	ldi	r24, 0x07	; 7
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <print_fill>
    1b50:	08 95       	ret

00001b52 <print_right_arrow>:
	}
}


void print_right_arrow(int inverse) {
	if (!inverse) {
    1b52:	89 2b       	or	r24, r25
    1b54:	a9 f4       	brne	.+42     	; 0x1b80 <print_right_arrow+0x2e>
		print_blank(6);
    1b56:	86 e0       	ldi	r24, 0x06	; 6
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <print_blank>

		//right-arrow
		write_data(0b01111100);
    1b5e:	8c e7       	ldi	r24, 0x7C	; 124
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(0b00111000);
    1b66:	88 e3       	ldi	r24, 0x38	; 56
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(0b00010000);
    1b6e:	80 e1       	ldi	r24, 0x10	; 16
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>

		print_blank(7);
    1b76:	87 e0       	ldi	r24, 0x07	; 7
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <print_blank>
    1b7e:	08 95       	ret
	}
	else {
		print_fill(6);
    1b80:	86 e0       	ldi	r24, 0x06	; 6
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <print_fill>

		//right-arrow
		write_data(~0b01111100);
    1b88:	83 e8       	ldi	r24, 0x83	; 131
    1b8a:	9f ef       	ldi	r25, 0xFF	; 255
    1b8c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(~0b00111000);
    1b90:	87 ec       	ldi	r24, 0xC7	; 199
    1b92:	9f ef       	ldi	r25, 0xFF	; 255
    1b94:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
		write_data(~0b00010000);
    1b98:	8f ee       	ldi	r24, 0xEF	; 239
    1b9a:	9f ef       	ldi	r25, 0xFF	; 255
    1b9c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>

		print_fill(7);
    1ba0:	87 e0       	ldi	r24, 0x07	; 7
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <print_fill>
    1ba8:	08 95       	ret

00001baa <print_spacebar>:
	}
}


void print_spacebar(int inverse) {
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
	if (!inverse) {
    1bae:	89 2b       	or	r24, r25
    1bb0:	d1 f4       	brne	.+52     	; 0x1be6 <print_spacebar+0x3c>
		print_blank(4);
    1bb2:	84 e0       	ldi	r24, 0x04	; 4
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <print_blank>

		//spacebar
		write_data(0b00111000);
    1bba:	88 e3       	ldi	r24, 0x38	; 56
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
    1bc2:	c7 e2       	ldi	r28, 0x27	; 39
    1bc4:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 39;i++) write_data(0b00100000);
    1bc6:	80 e2       	ldi	r24, 0x20	; 32
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
    1bce:	21 97       	sbiw	r28, 0x01	; 1
    1bd0:	20 97       	sbiw	r28, 0x00	; 0
    1bd2:	c9 f7       	brne	.-14     	; 0x1bc6 <print_spacebar+0x1c>
		write_data(0b00111000);
    1bd4:	88 e3       	ldi	r24, 0x38	; 56
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>

		print_blank(5);
    1bdc:	85 e0       	ldi	r24, 0x05	; 5
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <print_blank>
    1be4:	19 c0       	rjmp	.+50     	; 0x1c18 <print_spacebar+0x6e>
	}
	else {
		print_blank(4);
    1be6:	84 e0       	ldi	r24, 0x04	; 4
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <print_blank>

		//spacebar
		write_data(~0b00111000);
    1bee:	87 ec       	ldi	r24, 0xC7	; 199
    1bf0:	9f ef       	ldi	r25, 0xFF	; 255
    1bf2:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
    1bf6:	c7 e2       	ldi	r28, 0x27	; 39
    1bf8:	d0 e0       	ldi	r29, 0x00	; 0
		for (int i = 0; i < 39;i++) write_data(~0b00100000);
    1bfa:	8f ed       	ldi	r24, 0xDF	; 223
    1bfc:	9f ef       	ldi	r25, 0xFF	; 255
    1bfe:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>
    1c02:	21 97       	sbiw	r28, 0x01	; 1
    1c04:	20 97       	sbiw	r28, 0x00	; 0
    1c06:	c9 f7       	brne	.-14     	; 0x1bfa <print_spacebar+0x50>
		write_data(~0b00111000);
    1c08:	87 ec       	ldi	r24, 0xC7	; 199
    1c0a:	9f ef       	ldi	r25, 0xFF	; 255
    1c0c:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <write_data>

		print_blank(5);
    1c10:	85 e0       	ldi	r24, 0x05	; 5
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <print_blank>
	}
}
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	08 95       	ret

00001c1e <print_options_bar>:


void print_options_bar(int shift_inverse, int space_inverse, int left_inverse,  int right_inverse) {
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	7b 01       	movw	r14, r22
    1c2c:	8a 01       	movw	r16, r20
    1c2e:	e9 01       	movw	r28, r18
	print_shift(shift_inverse);
    1c30:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <print_shift>
	print_spacebar(space_inverse);
    1c34:	c7 01       	movw	r24, r14
    1c36:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <print_spacebar>
	print_left_arrow(left_inverse);
    1c3a:	c8 01       	movw	r24, r16
    1c3c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <print_left_arrow>
	print_right_arrow(right_inverse);
    1c40:	ce 01       	movw	r24, r28
    1c42:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <print_right_arrow>
}
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	08 95       	ret

00001c54 <print_char>:

void print_char(char c, int inverse) {
	if (!inverse) {
    1c54:	67 2b       	or	r22, r23
    1c56:	19 f4       	brne	.+6      	; 0x1c5e <print_char+0xa>
		OLED_print_char(c);
    1c58:	0e 94 80 0c 	call	0x1900	; 0x1900 <OLED_print_char>
    1c5c:	08 95       	ret
	}
	else {
		OLED_print_char_inverse(c);
    1c5e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <OLED_print_char_inverse>
    1c62:	08 95       	ret

00001c64 <SPI_init>:

void SPI_init(){
	//Configure interrupt0 on the ATmega162 for receiving interrupts from SPI
	//see page 160 in ATmega162
	//enable int0 on the ATmega162
	set_bit(GICR, INT0);
    1c64:	8b b7       	in	r24, 0x3b	; 59
    1c66:	80 64       	ori	r24, 0x40	; 64
    1c68:	8b bf       	out	0x3b, r24	; 59
	
	//interrupt when low
	clear_bit(MCUCR,ISC01);
    1c6a:	85 b7       	in	r24, 0x35	; 53
    1c6c:	8d 7f       	andi	r24, 0xFD	; 253
    1c6e:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
    1c70:	85 b7       	in	r24, 0x35	; 53
    1c72:	8e 7f       	andi	r24, 0xFE	; 254
    1c74:	85 bf       	out	0x35, r24	; 53
	

	//set mosi, sck, ss as output, others as input
	set_bit(DDRB, MOSI);
    1c76:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, SCK);
    1c78:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, SS);
    1c7a:	bc 9a       	sbi	0x17, 4	; 23
	
	
	//set ATmega as master
	set_bit(SPCR, MSTR);
    1c7c:	6c 9a       	sbi	0x0d, 4	; 13
	
	//enable SPI
	set_bit(SPCR, SPE);
    1c7e:	6e 9a       	sbi	0x0d, 6	; 13
	
	//set clock to f_osc/16
	set_bit(SPCR, SPR0);
    1c80:	68 9a       	sbi	0x0d, 0	; 13
	clear_bit(SPCR,SPR1);
    1c82:	69 98       	cbi	0x0d, 1	; 13
	clear_bit(SPCR, SPI2X);
    1c84:	68 98       	cbi	0x0d, 0	; 13
    1c86:	08 95       	ret

00001c88 <SPI_send>:
}


void SPI_send(uint8_t data){
	//Start transmission
	SPDR = data;		
    1c88:	8f b9       	out	0x0f, r24	; 15
	//wait for transmission complete SPSR: register with SPIF flag, SPIF: bit set to 1 when data is read
	loop_until_bit_is_set(SPSR, SPIF);
    1c8a:	77 9b       	sbis	0x0e, 7	; 14
    1c8c:	fe cf       	rjmp	.-4      	; 0x1c8a <SPI_send+0x2>
}
    1c8e:	08 95       	ret

00001c90 <SPI_read>:


char SPI_read(){
	//must send a dummy bit to receive data
	SPI_send(0);
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <SPI_send>
	
	loop_until_bit_is_set(SPSR, SPIF);
    1c96:	77 9b       	sbis	0x0e, 7	; 14
    1c98:	fe cf       	rjmp	.-4      	; 0x1c96 <SPI_read+0x6>
	char data = SPDR;
    1c9a:	8f b1       	in	r24, 0x0f	; 15
	return data;
	
}
    1c9c:	08 95       	ret

00001c9e <SPI_select>:
	//printf("SPI_TEST: %s\n\n", spi_read_result);
	
}

void SPI_select(){
	clear_bit(PORTB, SS);
    1c9e:	c4 98       	cbi	0x18, 4	; 24
    1ca0:	08 95       	ret

00001ca2 <SPI_deselect>:
}

void SPI_deselect(){
	set_bit(PORTB, SS);
    1ca2:	c4 9a       	sbi	0x18, 4	; 24
    1ca4:	08 95       	ret

00001ca6 <SRAM_init>:
#include <stdio.h>


void SRAM_init(void){
	//Enable external memory interface
	set_bit(MCUCR, SRE);
    1ca6:	85 b7       	in	r24, 0x35	; 53
    1ca8:	80 68       	ori	r24, 0x80	; 128
    1caa:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
    1cac:	80 b7       	in	r24, 0x30	; 48
    1cae:	80 62       	ori	r24, 0x20	; 32
    1cb0:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
    1cb2:	80 b7       	in	r24, 0x30	; 48
    1cb4:	8f 7e       	andi	r24, 0xEF	; 239
    1cb6:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
    1cb8:	80 b7       	in	r24, 0x30	; 48
    1cba:	87 7f       	andi	r24, 0xF7	; 247
    1cbc:	80 bf       	out	0x30, r24	; 48
    1cbe:	08 95       	ret

00001cc0 <usart_transmit_to_computer>:
}


void usart_transmit_to_computer(unsigned int data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
    1cc0:	5d 9b       	sbis	0x0b, 5	; 11
    1cc2:	fe cf       	rjmp	.-4      	; 0x1cc0 <usart_transmit_to_computer>
	;
	
	/* Put data into buffer (sends the data) */
	UDR0 = data;
    1cc4:	8c b9       	out	0x0c, r24	; 12
    1cc6:	08 95       	ret

00001cc8 <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
    1cc8:	5f 9b       	sbis	0x0b, 7	; 11
    1cca:	fe cf       	rjmp	.-4      	; 0x1cc8 <usart_receive_from_computer>
	;
	
	/* Get and return data from buffer */
	return UDR0;
    1ccc:	8c b1       	in	r24, 0x0c	; 12
}
    1cce:	08 95       	ret

00001cd0 <usart_init>:
#include <stdio.h>


void usart_init(unsigned int ubbr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubbr>>8);
    1cd0:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
    1cd2:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    1cd4:	88 e1       	ldi	r24, 0x18	; 24
    1cd6:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
    1cd8:	8e e8       	ldi	r24, 0x8E	; 142
    1cda:	80 bd       	out	0x20, r24	; 32
	
	
	/* Enable printf-thing */
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
    1cdc:	64 e6       	ldi	r22, 0x64	; 100
    1cde:	7e e0       	ldi	r23, 0x0E	; 14
    1ce0:	80 e6       	ldi	r24, 0x60	; 96
    1ce2:	9e e0       	ldi	r25, 0x0E	; 14
    1ce4:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <fdevopen>
    1ce8:	08 95       	ret

00001cea <__divmodhi4>:
    1cea:	97 fb       	bst	r25, 7
    1cec:	07 2e       	mov	r0, r23
    1cee:	16 f4       	brtc	.+4      	; 0x1cf4 <__divmodhi4+0xa>
    1cf0:	00 94       	com	r0
    1cf2:	07 d0       	rcall	.+14     	; 0x1d02 <__divmodhi4_neg1>
    1cf4:	77 fd       	sbrc	r23, 7
    1cf6:	09 d0       	rcall	.+18     	; 0x1d0a <__divmodhi4_neg2>
    1cf8:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__udivmodhi4>
    1cfc:	07 fc       	sbrc	r0, 7
    1cfe:	05 d0       	rcall	.+10     	; 0x1d0a <__divmodhi4_neg2>
    1d00:	3e f4       	brtc	.+14     	; 0x1d10 <__divmodhi4_exit>

00001d02 <__divmodhi4_neg1>:
    1d02:	90 95       	com	r25
    1d04:	81 95       	neg	r24
    1d06:	9f 4f       	sbci	r25, 0xFF	; 255
    1d08:	08 95       	ret

00001d0a <__divmodhi4_neg2>:
    1d0a:	70 95       	com	r23
    1d0c:	61 95       	neg	r22
    1d0e:	7f 4f       	sbci	r23, 0xFF	; 255

00001d10 <__divmodhi4_exit>:
    1d10:	08 95       	ret

00001d12 <__udivmodhi4>:
    1d12:	aa 1b       	sub	r26, r26
    1d14:	bb 1b       	sub	r27, r27
    1d16:	51 e1       	ldi	r21, 0x11	; 17
    1d18:	07 c0       	rjmp	.+14     	; 0x1d28 <__udivmodhi4_ep>

00001d1a <__udivmodhi4_loop>:
    1d1a:	aa 1f       	adc	r26, r26
    1d1c:	bb 1f       	adc	r27, r27
    1d1e:	a6 17       	cp	r26, r22
    1d20:	b7 07       	cpc	r27, r23
    1d22:	10 f0       	brcs	.+4      	; 0x1d28 <__udivmodhi4_ep>
    1d24:	a6 1b       	sub	r26, r22
    1d26:	b7 0b       	sbc	r27, r23

00001d28 <__udivmodhi4_ep>:
    1d28:	88 1f       	adc	r24, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	5a 95       	dec	r21
    1d2e:	a9 f7       	brne	.-22     	; 0x1d1a <__udivmodhi4_loop>
    1d30:	80 95       	com	r24
    1d32:	90 95       	com	r25
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	08 95       	ret

00001d3a <malloc>:
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	82 30       	cpi	r24, 0x02	; 2
    1d40:	91 05       	cpc	r25, r1
    1d42:	10 f4       	brcc	.+4      	; 0x1d48 <malloc+0xe>
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	e0 91 ec 03 	lds	r30, 0x03EC
    1d4c:	f0 91 ed 03 	lds	r31, 0x03ED
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	a0 e0       	ldi	r26, 0x00	; 0
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	30 97       	sbiw	r30, 0x00	; 0
    1d5a:	39 f1       	breq	.+78     	; 0x1daa <malloc+0x70>
    1d5c:	40 81       	ld	r20, Z
    1d5e:	51 81       	ldd	r21, Z+1	; 0x01
    1d60:	48 17       	cp	r20, r24
    1d62:	59 07       	cpc	r21, r25
    1d64:	b8 f0       	brcs	.+46     	; 0x1d94 <malloc+0x5a>
    1d66:	48 17       	cp	r20, r24
    1d68:	59 07       	cpc	r21, r25
    1d6a:	71 f4       	brne	.+28     	; 0x1d88 <malloc+0x4e>
    1d6c:	82 81       	ldd	r24, Z+2	; 0x02
    1d6e:	93 81       	ldd	r25, Z+3	; 0x03
    1d70:	10 97       	sbiw	r26, 0x00	; 0
    1d72:	29 f0       	breq	.+10     	; 0x1d7e <malloc+0x44>
    1d74:	13 96       	adiw	r26, 0x03	; 3
    1d76:	9c 93       	st	X, r25
    1d78:	8e 93       	st	-X, r24
    1d7a:	12 97       	sbiw	r26, 0x02	; 2
    1d7c:	2c c0       	rjmp	.+88     	; 0x1dd6 <malloc+0x9c>
    1d7e:	90 93 ed 03 	sts	0x03ED, r25
    1d82:	80 93 ec 03 	sts	0x03EC, r24
    1d86:	27 c0       	rjmp	.+78     	; 0x1dd6 <malloc+0x9c>
    1d88:	21 15       	cp	r18, r1
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	31 f0       	breq	.+12     	; 0x1d9a <malloc+0x60>
    1d8e:	42 17       	cp	r20, r18
    1d90:	53 07       	cpc	r21, r19
    1d92:	18 f0       	brcs	.+6      	; 0x1d9a <malloc+0x60>
    1d94:	a9 01       	movw	r20, r18
    1d96:	db 01       	movw	r26, r22
    1d98:	01 c0       	rjmp	.+2      	; 0x1d9c <malloc+0x62>
    1d9a:	ef 01       	movw	r28, r30
    1d9c:	9a 01       	movw	r18, r20
    1d9e:	bd 01       	movw	r22, r26
    1da0:	df 01       	movw	r26, r30
    1da2:	02 80       	ldd	r0, Z+2	; 0x02
    1da4:	f3 81       	ldd	r31, Z+3	; 0x03
    1da6:	e0 2d       	mov	r30, r0
    1da8:	d7 cf       	rjmp	.-82     	; 0x1d58 <malloc+0x1e>
    1daa:	21 15       	cp	r18, r1
    1dac:	31 05       	cpc	r19, r1
    1dae:	f9 f0       	breq	.+62     	; 0x1dee <malloc+0xb4>
    1db0:	28 1b       	sub	r18, r24
    1db2:	39 0b       	sbc	r19, r25
    1db4:	24 30       	cpi	r18, 0x04	; 4
    1db6:	31 05       	cpc	r19, r1
    1db8:	80 f4       	brcc	.+32     	; 0x1dda <malloc+0xa0>
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbe:	61 15       	cp	r22, r1
    1dc0:	71 05       	cpc	r23, r1
    1dc2:	21 f0       	breq	.+8      	; 0x1dcc <malloc+0x92>
    1dc4:	fb 01       	movw	r30, r22
    1dc6:	93 83       	std	Z+3, r25	; 0x03
    1dc8:	82 83       	std	Z+2, r24	; 0x02
    1dca:	04 c0       	rjmp	.+8      	; 0x1dd4 <malloc+0x9a>
    1dcc:	90 93 ed 03 	sts	0x03ED, r25
    1dd0:	80 93 ec 03 	sts	0x03EC, r24
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	32 96       	adiw	r30, 0x02	; 2
    1dd8:	44 c0       	rjmp	.+136    	; 0x1e62 <malloc+0x128>
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e2 0f       	add	r30, r18
    1dde:	f3 1f       	adc	r31, r19
    1de0:	81 93       	st	Z+, r24
    1de2:	91 93       	st	Z+, r25
    1de4:	22 50       	subi	r18, 0x02	; 2
    1de6:	31 09       	sbc	r19, r1
    1de8:	39 83       	std	Y+1, r19	; 0x01
    1dea:	28 83       	st	Y, r18
    1dec:	3a c0       	rjmp	.+116    	; 0x1e62 <malloc+0x128>
    1dee:	20 91 ea 03 	lds	r18, 0x03EA
    1df2:	30 91 eb 03 	lds	r19, 0x03EB
    1df6:	23 2b       	or	r18, r19
    1df8:	41 f4       	brne	.+16     	; 0x1e0a <malloc+0xd0>
    1dfa:	20 91 02 01 	lds	r18, 0x0102
    1dfe:	30 91 03 01 	lds	r19, 0x0103
    1e02:	30 93 eb 03 	sts	0x03EB, r19
    1e06:	20 93 ea 03 	sts	0x03EA, r18
    1e0a:	20 91 00 01 	lds	r18, 0x0100
    1e0e:	30 91 01 01 	lds	r19, 0x0101
    1e12:	21 15       	cp	r18, r1
    1e14:	31 05       	cpc	r19, r1
    1e16:	41 f4       	brne	.+16     	; 0x1e28 <malloc+0xee>
    1e18:	2d b7       	in	r18, 0x3d	; 61
    1e1a:	3e b7       	in	r19, 0x3e	; 62
    1e1c:	40 91 04 01 	lds	r20, 0x0104
    1e20:	50 91 05 01 	lds	r21, 0x0105
    1e24:	24 1b       	sub	r18, r20
    1e26:	35 0b       	sbc	r19, r21
    1e28:	e0 91 ea 03 	lds	r30, 0x03EA
    1e2c:	f0 91 eb 03 	lds	r31, 0x03EB
    1e30:	e2 17       	cp	r30, r18
    1e32:	f3 07       	cpc	r31, r19
    1e34:	a0 f4       	brcc	.+40     	; 0x1e5e <malloc+0x124>
    1e36:	2e 1b       	sub	r18, r30
    1e38:	3f 0b       	sbc	r19, r31
    1e3a:	28 17       	cp	r18, r24
    1e3c:	39 07       	cpc	r19, r25
    1e3e:	78 f0       	brcs	.+30     	; 0x1e5e <malloc+0x124>
    1e40:	ac 01       	movw	r20, r24
    1e42:	4e 5f       	subi	r20, 0xFE	; 254
    1e44:	5f 4f       	sbci	r21, 0xFF	; 255
    1e46:	24 17       	cp	r18, r20
    1e48:	35 07       	cpc	r19, r21
    1e4a:	48 f0       	brcs	.+18     	; 0x1e5e <malloc+0x124>
    1e4c:	4e 0f       	add	r20, r30
    1e4e:	5f 1f       	adc	r21, r31
    1e50:	50 93 eb 03 	sts	0x03EB, r21
    1e54:	40 93 ea 03 	sts	0x03EA, r20
    1e58:	81 93       	st	Z+, r24
    1e5a:	91 93       	st	Z+, r25
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <malloc+0x128>
    1e5e:	e0 e0       	ldi	r30, 0x00	; 0
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	cf 01       	movw	r24, r30
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	08 95       	ret

00001e6a <free>:
    1e6a:	cf 93       	push	r28
    1e6c:	df 93       	push	r29
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <free+0xa>
    1e72:	87 c0       	rjmp	.+270    	; 0x1f82 <free+0x118>
    1e74:	fc 01       	movw	r30, r24
    1e76:	32 97       	sbiw	r30, 0x02	; 2
    1e78:	13 82       	std	Z+3, r1	; 0x03
    1e7a:	12 82       	std	Z+2, r1	; 0x02
    1e7c:	c0 91 ec 03 	lds	r28, 0x03EC
    1e80:	d0 91 ed 03 	lds	r29, 0x03ED
    1e84:	20 97       	sbiw	r28, 0x00	; 0
    1e86:	81 f4       	brne	.+32     	; 0x1ea8 <free+0x3e>
    1e88:	20 81       	ld	r18, Z
    1e8a:	31 81       	ldd	r19, Z+1	; 0x01
    1e8c:	28 0f       	add	r18, r24
    1e8e:	39 1f       	adc	r19, r25
    1e90:	80 91 ea 03 	lds	r24, 0x03EA
    1e94:	90 91 eb 03 	lds	r25, 0x03EB
    1e98:	82 17       	cp	r24, r18
    1e9a:	93 07       	cpc	r25, r19
    1e9c:	79 f5       	brne	.+94     	; 0x1efc <free+0x92>
    1e9e:	f0 93 eb 03 	sts	0x03EB, r31
    1ea2:	e0 93 ea 03 	sts	0x03EA, r30
    1ea6:	6d c0       	rjmp	.+218    	; 0x1f82 <free+0x118>
    1ea8:	de 01       	movw	r26, r28
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	ae 17       	cp	r26, r30
    1eb0:	bf 07       	cpc	r27, r31
    1eb2:	50 f4       	brcc	.+20     	; 0x1ec8 <free+0x5e>
    1eb4:	12 96       	adiw	r26, 0x02	; 2
    1eb6:	4d 91       	ld	r20, X+
    1eb8:	5c 91       	ld	r21, X
    1eba:	13 97       	sbiw	r26, 0x03	; 3
    1ebc:	9d 01       	movw	r18, r26
    1ebe:	41 15       	cp	r20, r1
    1ec0:	51 05       	cpc	r21, r1
    1ec2:	09 f1       	breq	.+66     	; 0x1f06 <free+0x9c>
    1ec4:	da 01       	movw	r26, r20
    1ec6:	f3 cf       	rjmp	.-26     	; 0x1eae <free+0x44>
    1ec8:	b3 83       	std	Z+3, r27	; 0x03
    1eca:	a2 83       	std	Z+2, r26	; 0x02
    1ecc:	40 81       	ld	r20, Z
    1ece:	51 81       	ldd	r21, Z+1	; 0x01
    1ed0:	84 0f       	add	r24, r20
    1ed2:	95 1f       	adc	r25, r21
    1ed4:	8a 17       	cp	r24, r26
    1ed6:	9b 07       	cpc	r25, r27
    1ed8:	71 f4       	brne	.+28     	; 0x1ef6 <free+0x8c>
    1eda:	8d 91       	ld	r24, X+
    1edc:	9c 91       	ld	r25, X
    1ede:	11 97       	sbiw	r26, 0x01	; 1
    1ee0:	84 0f       	add	r24, r20
    1ee2:	95 1f       	adc	r25, r21
    1ee4:	02 96       	adiw	r24, 0x02	; 2
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
    1eea:	12 96       	adiw	r26, 0x02	; 2
    1eec:	8d 91       	ld	r24, X+
    1eee:	9c 91       	ld	r25, X
    1ef0:	13 97       	sbiw	r26, 0x03	; 3
    1ef2:	93 83       	std	Z+3, r25	; 0x03
    1ef4:	82 83       	std	Z+2, r24	; 0x02
    1ef6:	21 15       	cp	r18, r1
    1ef8:	31 05       	cpc	r19, r1
    1efa:	29 f4       	brne	.+10     	; 0x1f06 <free+0x9c>
    1efc:	f0 93 ed 03 	sts	0x03ED, r31
    1f00:	e0 93 ec 03 	sts	0x03EC, r30
    1f04:	3e c0       	rjmp	.+124    	; 0x1f82 <free+0x118>
    1f06:	d9 01       	movw	r26, r18
    1f08:	13 96       	adiw	r26, 0x03	; 3
    1f0a:	fc 93       	st	X, r31
    1f0c:	ee 93       	st	-X, r30
    1f0e:	12 97       	sbiw	r26, 0x02	; 2
    1f10:	4d 91       	ld	r20, X+
    1f12:	5d 91       	ld	r21, X+
    1f14:	a4 0f       	add	r26, r20
    1f16:	b5 1f       	adc	r27, r21
    1f18:	ea 17       	cp	r30, r26
    1f1a:	fb 07       	cpc	r31, r27
    1f1c:	79 f4       	brne	.+30     	; 0x1f3c <free+0xd2>
    1f1e:	80 81       	ld	r24, Z
    1f20:	91 81       	ldd	r25, Z+1	; 0x01
    1f22:	84 0f       	add	r24, r20
    1f24:	95 1f       	adc	r25, r21
    1f26:	02 96       	adiw	r24, 0x02	; 2
    1f28:	d9 01       	movw	r26, r18
    1f2a:	11 96       	adiw	r26, 0x01	; 1
    1f2c:	9c 93       	st	X, r25
    1f2e:	8e 93       	st	-X, r24
    1f30:	82 81       	ldd	r24, Z+2	; 0x02
    1f32:	93 81       	ldd	r25, Z+3	; 0x03
    1f34:	13 96       	adiw	r26, 0x03	; 3
    1f36:	9c 93       	st	X, r25
    1f38:	8e 93       	st	-X, r24
    1f3a:	12 97       	sbiw	r26, 0x02	; 2
    1f3c:	e0 e0       	ldi	r30, 0x00	; 0
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	9b 81       	ldd	r25, Y+3	; 0x03
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	19 f0       	breq	.+6      	; 0x1f4e <free+0xe4>
    1f48:	fe 01       	movw	r30, r28
    1f4a:	ec 01       	movw	r28, r24
    1f4c:	f9 cf       	rjmp	.-14     	; 0x1f40 <free+0xd6>
    1f4e:	ce 01       	movw	r24, r28
    1f50:	02 96       	adiw	r24, 0x02	; 2
    1f52:	28 81       	ld	r18, Y
    1f54:	39 81       	ldd	r19, Y+1	; 0x01
    1f56:	82 0f       	add	r24, r18
    1f58:	93 1f       	adc	r25, r19
    1f5a:	20 91 ea 03 	lds	r18, 0x03EA
    1f5e:	30 91 eb 03 	lds	r19, 0x03EB
    1f62:	28 17       	cp	r18, r24
    1f64:	39 07       	cpc	r19, r25
    1f66:	69 f4       	brne	.+26     	; 0x1f82 <free+0x118>
    1f68:	30 97       	sbiw	r30, 0x00	; 0
    1f6a:	29 f4       	brne	.+10     	; 0x1f76 <free+0x10c>
    1f6c:	10 92 ed 03 	sts	0x03ED, r1
    1f70:	10 92 ec 03 	sts	0x03EC, r1
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <free+0x110>
    1f76:	13 82       	std	Z+3, r1	; 0x03
    1f78:	12 82       	std	Z+2, r1	; 0x02
    1f7a:	d0 93 eb 03 	sts	0x03EB, r29
    1f7e:	c0 93 ea 03 	sts	0x03EA, r28
    1f82:	df 91       	pop	r29
    1f84:	cf 91       	pop	r28
    1f86:	08 95       	ret

00001f88 <fdevopen>:
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	ec 01       	movw	r28, r24
    1f92:	8b 01       	movw	r16, r22
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	31 f4       	brne	.+12     	; 0x1fa4 <fdevopen+0x1c>
    1f98:	61 15       	cp	r22, r1
    1f9a:	71 05       	cpc	r23, r1
    1f9c:	19 f4       	brne	.+6      	; 0x1fa4 <fdevopen+0x1c>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	38 c0       	rjmp	.+112    	; 0x2014 <fdevopen+0x8c>
    1fa4:	6e e0       	ldi	r22, 0x0E	; 14
    1fa6:	70 e0       	ldi	r23, 0x00	; 0
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <calloc>
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	00 97       	sbiw	r24, 0x00	; 0
    1fb4:	a1 f3       	breq	.-24     	; 0x1f9e <fdevopen+0x16>
    1fb6:	80 e8       	ldi	r24, 0x80	; 128
    1fb8:	83 83       	std	Z+3, r24	; 0x03
    1fba:	01 15       	cp	r16, r1
    1fbc:	11 05       	cpc	r17, r1
    1fbe:	71 f0       	breq	.+28     	; 0x1fdc <fdevopen+0x54>
    1fc0:	13 87       	std	Z+11, r17	; 0x0b
    1fc2:	02 87       	std	Z+10, r16	; 0x0a
    1fc4:	81 e8       	ldi	r24, 0x81	; 129
    1fc6:	83 83       	std	Z+3, r24	; 0x03
    1fc8:	80 91 ee 03 	lds	r24, 0x03EE
    1fcc:	90 91 ef 03 	lds	r25, 0x03EF
    1fd0:	89 2b       	or	r24, r25
    1fd2:	21 f4       	brne	.+8      	; 0x1fdc <fdevopen+0x54>
    1fd4:	f0 93 ef 03 	sts	0x03EF, r31
    1fd8:	e0 93 ee 03 	sts	0x03EE, r30
    1fdc:	20 97       	sbiw	r28, 0x00	; 0
    1fde:	c9 f0       	breq	.+50     	; 0x2012 <fdevopen+0x8a>
    1fe0:	d1 87       	std	Z+9, r29	; 0x09
    1fe2:	c0 87       	std	Z+8, r28	; 0x08
    1fe4:	83 81       	ldd	r24, Z+3	; 0x03
    1fe6:	82 60       	ori	r24, 0x02	; 2
    1fe8:	83 83       	std	Z+3, r24	; 0x03
    1fea:	80 91 f0 03 	lds	r24, 0x03F0
    1fee:	90 91 f1 03 	lds	r25, 0x03F1
    1ff2:	89 2b       	or	r24, r25
    1ff4:	71 f4       	brne	.+28     	; 0x2012 <fdevopen+0x8a>
    1ff6:	f0 93 f1 03 	sts	0x03F1, r31
    1ffa:	e0 93 f0 03 	sts	0x03F0, r30
    1ffe:	80 91 f2 03 	lds	r24, 0x03F2
    2002:	90 91 f3 03 	lds	r25, 0x03F3
    2006:	89 2b       	or	r24, r25
    2008:	21 f4       	brne	.+8      	; 0x2012 <fdevopen+0x8a>
    200a:	f0 93 f3 03 	sts	0x03F3, r31
    200e:	e0 93 f2 03 	sts	0x03F2, r30
    2012:	cf 01       	movw	r24, r30
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	08 95       	ret

0000201e <fprintf>:
    201e:	a0 e0       	ldi	r26, 0x00	; 0
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e5 e1       	ldi	r30, 0x15	; 21
    2024:	f0 e1       	ldi	r31, 0x10	; 16
    2026:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__prologue_saves__+0x20>
    202a:	ae 01       	movw	r20, r28
    202c:	47 5f       	subi	r20, 0xF7	; 247
    202e:	5f 4f       	sbci	r21, 0xFF	; 255
    2030:	6f 81       	ldd	r22, Y+7	; 0x07
    2032:	78 85       	ldd	r23, Y+8	; 0x08
    2034:	8d 81       	ldd	r24, Y+5	; 0x05
    2036:	9e 81       	ldd	r25, Y+6	; 0x06
    2038:	0e 94 a9 10 	call	0x2152	; 0x2152 <vfprintf>
    203c:	e2 e0       	ldi	r30, 0x02	; 2
    203e:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__epilogue_restores__+0x20>

00002042 <fputc>:
    2042:	0f 93       	push	r16
    2044:	1f 93       	push	r17
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	18 2f       	mov	r17, r24
    204c:	09 2f       	mov	r16, r25
    204e:	eb 01       	movw	r28, r22
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	81 fd       	sbrc	r24, 1
    2054:	03 c0       	rjmp	.+6      	; 0x205c <fputc+0x1a>
    2056:	8f ef       	ldi	r24, 0xFF	; 255
    2058:	9f ef       	ldi	r25, 0xFF	; 255
    205a:	20 c0       	rjmp	.+64     	; 0x209c <fputc+0x5a>
    205c:	82 ff       	sbrs	r24, 2
    205e:	10 c0       	rjmp	.+32     	; 0x2080 <fputc+0x3e>
    2060:	4e 81       	ldd	r20, Y+6	; 0x06
    2062:	5f 81       	ldd	r21, Y+7	; 0x07
    2064:	2c 81       	ldd	r18, Y+4	; 0x04
    2066:	3d 81       	ldd	r19, Y+5	; 0x05
    2068:	42 17       	cp	r20, r18
    206a:	53 07       	cpc	r21, r19
    206c:	7c f4       	brge	.+30     	; 0x208c <fputc+0x4a>
    206e:	e8 81       	ld	r30, Y
    2070:	f9 81       	ldd	r31, Y+1	; 0x01
    2072:	9f 01       	movw	r18, r30
    2074:	2f 5f       	subi	r18, 0xFF	; 255
    2076:	3f 4f       	sbci	r19, 0xFF	; 255
    2078:	39 83       	std	Y+1, r19	; 0x01
    207a:	28 83       	st	Y, r18
    207c:	10 83       	st	Z, r17
    207e:	06 c0       	rjmp	.+12     	; 0x208c <fputc+0x4a>
    2080:	e8 85       	ldd	r30, Y+8	; 0x08
    2082:	f9 85       	ldd	r31, Y+9	; 0x09
    2084:	81 2f       	mov	r24, r17
    2086:	09 95       	icall
    2088:	89 2b       	or	r24, r25
    208a:	29 f7       	brne	.-54     	; 0x2056 <fputc+0x14>
    208c:	2e 81       	ldd	r18, Y+6	; 0x06
    208e:	3f 81       	ldd	r19, Y+7	; 0x07
    2090:	2f 5f       	subi	r18, 0xFF	; 255
    2092:	3f 4f       	sbci	r19, 0xFF	; 255
    2094:	3f 83       	std	Y+7, r19	; 0x07
    2096:	2e 83       	std	Y+6, r18	; 0x06
    2098:	81 2f       	mov	r24, r17
    209a:	90 2f       	mov	r25, r16
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	08 95       	ret

000020a6 <fputs>:
    20a6:	ef 92       	push	r14
    20a8:	ff 92       	push	r15
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	8b 01       	movw	r16, r22
    20b4:	db 01       	movw	r26, r22
    20b6:	13 96       	adiw	r26, 0x03	; 3
    20b8:	2c 91       	ld	r18, X
    20ba:	21 ff       	sbrs	r18, 1
    20bc:	16 c0       	rjmp	.+44     	; 0x20ea <fputs+0x44>
    20be:	ec 01       	movw	r28, r24
    20c0:	e1 2c       	mov	r14, r1
    20c2:	f1 2c       	mov	r15, r1
    20c4:	89 91       	ld	r24, Y+
    20c6:	88 23       	and	r24, r24
    20c8:	71 f0       	breq	.+28     	; 0x20e6 <fputs+0x40>
    20ca:	d8 01       	movw	r26, r16
    20cc:	18 96       	adiw	r26, 0x08	; 8
    20ce:	ed 91       	ld	r30, X+
    20d0:	fc 91       	ld	r31, X
    20d2:	19 97       	sbiw	r26, 0x09	; 9
    20d4:	b8 01       	movw	r22, r16
    20d6:	09 95       	icall
    20d8:	89 2b       	or	r24, r25
    20da:	a1 f3       	breq	.-24     	; 0x20c4 <fputs+0x1e>
    20dc:	ee 24       	eor	r14, r14
    20de:	ea 94       	dec	r14
    20e0:	ff 24       	eor	r15, r15
    20e2:	fa 94       	dec	r15
    20e4:	ef cf       	rjmp	.-34     	; 0x20c4 <fputs+0x1e>
    20e6:	c7 01       	movw	r24, r14
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <fputs+0x48>
    20ea:	8f ef       	ldi	r24, 0xFF	; 255
    20ec:	9f ef       	ldi	r25, 0xFF	; 255
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	e6 e0       	ldi	r30, 0x06	; 6
    20f4:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__epilogue_restores__+0x18>

000020f8 <puts>:
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	e0 91 f0 03 	lds	r30, 0x03F0
    2104:	f0 91 f1 03 	lds	r31, 0x03F1
    2108:	23 81       	ldd	r18, Z+3	; 0x03
    210a:	21 ff       	sbrs	r18, 1
    210c:	1b c0       	rjmp	.+54     	; 0x2144 <puts+0x4c>
    210e:	ec 01       	movw	r28, r24
    2110:	00 e0       	ldi	r16, 0x00	; 0
    2112:	10 e0       	ldi	r17, 0x00	; 0
    2114:	89 91       	ld	r24, Y+
    2116:	60 91 f0 03 	lds	r22, 0x03F0
    211a:	70 91 f1 03 	lds	r23, 0x03F1
    211e:	db 01       	movw	r26, r22
    2120:	18 96       	adiw	r26, 0x08	; 8
    2122:	ed 91       	ld	r30, X+
    2124:	fc 91       	ld	r31, X
    2126:	19 97       	sbiw	r26, 0x09	; 9
    2128:	88 23       	and	r24, r24
    212a:	31 f0       	breq	.+12     	; 0x2138 <puts+0x40>
    212c:	09 95       	icall
    212e:	89 2b       	or	r24, r25
    2130:	89 f3       	breq	.-30     	; 0x2114 <puts+0x1c>
    2132:	0f ef       	ldi	r16, 0xFF	; 255
    2134:	1f ef       	ldi	r17, 0xFF	; 255
    2136:	ee cf       	rjmp	.-36     	; 0x2114 <puts+0x1c>
    2138:	8a e0       	ldi	r24, 0x0A	; 10
    213a:	09 95       	icall
    213c:	89 2b       	or	r24, r25
    213e:	11 f4       	brne	.+4      	; 0x2144 <puts+0x4c>
    2140:	c8 01       	movw	r24, r16
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <puts+0x50>
    2144:	8f ef       	ldi	r24, 0xFF	; 255
    2146:	9f ef       	ldi	r25, 0xFF	; 255
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	1f 91       	pop	r17
    214e:	0f 91       	pop	r16
    2150:	08 95       	ret

00002152 <vfprintf>:
    2152:	ac e0       	ldi	r26, 0x0C	; 12
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	ef ea       	ldi	r30, 0xAF	; 175
    2158:	f0 e1       	ldi	r31, 0x10	; 16
    215a:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__prologue_saves__>
    215e:	7c 01       	movw	r14, r24
    2160:	6b 01       	movw	r12, r22
    2162:	8a 01       	movw	r16, r20
    2164:	fc 01       	movw	r30, r24
    2166:	17 82       	std	Z+7, r1	; 0x07
    2168:	16 82       	std	Z+6, r1	; 0x06
    216a:	83 81       	ldd	r24, Z+3	; 0x03
    216c:	81 ff       	sbrs	r24, 1
    216e:	bd c1       	rjmp	.+890    	; 0x24ea <vfprintf+0x398>
    2170:	ce 01       	movw	r24, r28
    2172:	01 96       	adiw	r24, 0x01	; 1
    2174:	4c 01       	movw	r8, r24
    2176:	f7 01       	movw	r30, r14
    2178:	93 81       	ldd	r25, Z+3	; 0x03
    217a:	f6 01       	movw	r30, r12
    217c:	93 fd       	sbrc	r25, 3
    217e:	85 91       	lpm	r24, Z+
    2180:	93 ff       	sbrs	r25, 3
    2182:	81 91       	ld	r24, Z+
    2184:	6f 01       	movw	r12, r30
    2186:	88 23       	and	r24, r24
    2188:	09 f4       	brne	.+2      	; 0x218c <vfprintf+0x3a>
    218a:	ab c1       	rjmp	.+854    	; 0x24e2 <vfprintf+0x390>
    218c:	85 32       	cpi	r24, 0x25	; 37
    218e:	39 f4       	brne	.+14     	; 0x219e <vfprintf+0x4c>
    2190:	93 fd       	sbrc	r25, 3
    2192:	85 91       	lpm	r24, Z+
    2194:	93 ff       	sbrs	r25, 3
    2196:	81 91       	ld	r24, Z+
    2198:	6f 01       	movw	r12, r30
    219a:	85 32       	cpi	r24, 0x25	; 37
    219c:	29 f4       	brne	.+10     	; 0x21a8 <vfprintf+0x56>
    219e:	b7 01       	movw	r22, r14
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	0e 94 21 10 	call	0x2042	; 0x2042 <fputc>
    21a6:	e7 cf       	rjmp	.-50     	; 0x2176 <vfprintf+0x24>
    21a8:	51 2c       	mov	r5, r1
    21aa:	31 2c       	mov	r3, r1
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	20 32       	cpi	r18, 0x20	; 32
    21b0:	a0 f4       	brcc	.+40     	; 0x21da <vfprintf+0x88>
    21b2:	8b 32       	cpi	r24, 0x2B	; 43
    21b4:	69 f0       	breq	.+26     	; 0x21d0 <vfprintf+0x7e>
    21b6:	30 f4       	brcc	.+12     	; 0x21c4 <vfprintf+0x72>
    21b8:	80 32       	cpi	r24, 0x20	; 32
    21ba:	59 f0       	breq	.+22     	; 0x21d2 <vfprintf+0x80>
    21bc:	83 32       	cpi	r24, 0x23	; 35
    21be:	69 f4       	brne	.+26     	; 0x21da <vfprintf+0x88>
    21c0:	20 61       	ori	r18, 0x10	; 16
    21c2:	2c c0       	rjmp	.+88     	; 0x221c <vfprintf+0xca>
    21c4:	8d 32       	cpi	r24, 0x2D	; 45
    21c6:	39 f0       	breq	.+14     	; 0x21d6 <vfprintf+0x84>
    21c8:	80 33       	cpi	r24, 0x30	; 48
    21ca:	39 f4       	brne	.+14     	; 0x21da <vfprintf+0x88>
    21cc:	21 60       	ori	r18, 0x01	; 1
    21ce:	26 c0       	rjmp	.+76     	; 0x221c <vfprintf+0xca>
    21d0:	22 60       	ori	r18, 0x02	; 2
    21d2:	24 60       	ori	r18, 0x04	; 4
    21d4:	23 c0       	rjmp	.+70     	; 0x221c <vfprintf+0xca>
    21d6:	28 60       	ori	r18, 0x08	; 8
    21d8:	21 c0       	rjmp	.+66     	; 0x221c <vfprintf+0xca>
    21da:	27 fd       	sbrc	r18, 7
    21dc:	27 c0       	rjmp	.+78     	; 0x222c <vfprintf+0xda>
    21de:	30 ed       	ldi	r19, 0xD0	; 208
    21e0:	38 0f       	add	r19, r24
    21e2:	3a 30       	cpi	r19, 0x0A	; 10
    21e4:	78 f4       	brcc	.+30     	; 0x2204 <vfprintf+0xb2>
    21e6:	26 ff       	sbrs	r18, 6
    21e8:	06 c0       	rjmp	.+12     	; 0x21f6 <vfprintf+0xa4>
    21ea:	fa e0       	ldi	r31, 0x0A	; 10
    21ec:	5f 9e       	mul	r5, r31
    21ee:	30 0d       	add	r19, r0
    21f0:	11 24       	eor	r1, r1
    21f2:	53 2e       	mov	r5, r19
    21f4:	13 c0       	rjmp	.+38     	; 0x221c <vfprintf+0xca>
    21f6:	8a e0       	ldi	r24, 0x0A	; 10
    21f8:	38 9e       	mul	r3, r24
    21fa:	30 0d       	add	r19, r0
    21fc:	11 24       	eor	r1, r1
    21fe:	33 2e       	mov	r3, r19
    2200:	20 62       	ori	r18, 0x20	; 32
    2202:	0c c0       	rjmp	.+24     	; 0x221c <vfprintf+0xca>
    2204:	8e 32       	cpi	r24, 0x2E	; 46
    2206:	21 f4       	brne	.+8      	; 0x2210 <vfprintf+0xbe>
    2208:	26 fd       	sbrc	r18, 6
    220a:	6b c1       	rjmp	.+726    	; 0x24e2 <vfprintf+0x390>
    220c:	20 64       	ori	r18, 0x40	; 64
    220e:	06 c0       	rjmp	.+12     	; 0x221c <vfprintf+0xca>
    2210:	8c 36       	cpi	r24, 0x6C	; 108
    2212:	11 f4       	brne	.+4      	; 0x2218 <vfprintf+0xc6>
    2214:	20 68       	ori	r18, 0x80	; 128
    2216:	02 c0       	rjmp	.+4      	; 0x221c <vfprintf+0xca>
    2218:	88 36       	cpi	r24, 0x68	; 104
    221a:	41 f4       	brne	.+16     	; 0x222c <vfprintf+0xda>
    221c:	f6 01       	movw	r30, r12
    221e:	93 fd       	sbrc	r25, 3
    2220:	85 91       	lpm	r24, Z+
    2222:	93 ff       	sbrs	r25, 3
    2224:	81 91       	ld	r24, Z+
    2226:	6f 01       	movw	r12, r30
    2228:	81 11       	cpse	r24, r1
    222a:	c1 cf       	rjmp	.-126    	; 0x21ae <vfprintf+0x5c>
    222c:	98 2f       	mov	r25, r24
    222e:	9f 7d       	andi	r25, 0xDF	; 223
    2230:	95 54       	subi	r25, 0x45	; 69
    2232:	93 30       	cpi	r25, 0x03	; 3
    2234:	28 f4       	brcc	.+10     	; 0x2240 <vfprintf+0xee>
    2236:	0c 5f       	subi	r16, 0xFC	; 252
    2238:	1f 4f       	sbci	r17, 0xFF	; 255
    223a:	ff e3       	ldi	r31, 0x3F	; 63
    223c:	f9 83       	std	Y+1, r31	; 0x01
    223e:	0d c0       	rjmp	.+26     	; 0x225a <vfprintf+0x108>
    2240:	83 36       	cpi	r24, 0x63	; 99
    2242:	31 f0       	breq	.+12     	; 0x2250 <vfprintf+0xfe>
    2244:	83 37       	cpi	r24, 0x73	; 115
    2246:	71 f0       	breq	.+28     	; 0x2264 <vfprintf+0x112>
    2248:	83 35       	cpi	r24, 0x53	; 83
    224a:	09 f0       	breq	.+2      	; 0x224e <vfprintf+0xfc>
    224c:	5b c0       	rjmp	.+182    	; 0x2304 <vfprintf+0x1b2>
    224e:	22 c0       	rjmp	.+68     	; 0x2294 <vfprintf+0x142>
    2250:	f8 01       	movw	r30, r16
    2252:	80 81       	ld	r24, Z
    2254:	89 83       	std	Y+1, r24	; 0x01
    2256:	0e 5f       	subi	r16, 0xFE	; 254
    2258:	1f 4f       	sbci	r17, 0xFF	; 255
    225a:	44 24       	eor	r4, r4
    225c:	43 94       	inc	r4
    225e:	51 2c       	mov	r5, r1
    2260:	54 01       	movw	r10, r8
    2262:	15 c0       	rjmp	.+42     	; 0x228e <vfprintf+0x13c>
    2264:	38 01       	movw	r6, r16
    2266:	f2 e0       	ldi	r31, 0x02	; 2
    2268:	6f 0e       	add	r6, r31
    226a:	71 1c       	adc	r7, r1
    226c:	f8 01       	movw	r30, r16
    226e:	a0 80       	ld	r10, Z
    2270:	b1 80       	ldd	r11, Z+1	; 0x01
    2272:	26 ff       	sbrs	r18, 6
    2274:	03 c0       	rjmp	.+6      	; 0x227c <vfprintf+0x12a>
    2276:	65 2d       	mov	r22, r5
    2278:	70 e0       	ldi	r23, 0x00	; 0
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <vfprintf+0x12e>
    227c:	6f ef       	ldi	r22, 0xFF	; 255
    227e:	7f ef       	ldi	r23, 0xFF	; 255
    2280:	c5 01       	movw	r24, r10
    2282:	2c 87       	std	Y+12, r18	; 0x0c
    2284:	0e 94 a9 12 	call	0x2552	; 0x2552 <strnlen>
    2288:	2c 01       	movw	r4, r24
    228a:	83 01       	movw	r16, r6
    228c:	2c 85       	ldd	r18, Y+12	; 0x0c
    228e:	2f 77       	andi	r18, 0x7F	; 127
    2290:	22 2e       	mov	r2, r18
    2292:	17 c0       	rjmp	.+46     	; 0x22c2 <vfprintf+0x170>
    2294:	38 01       	movw	r6, r16
    2296:	f2 e0       	ldi	r31, 0x02	; 2
    2298:	6f 0e       	add	r6, r31
    229a:	71 1c       	adc	r7, r1
    229c:	f8 01       	movw	r30, r16
    229e:	a0 80       	ld	r10, Z
    22a0:	b1 80       	ldd	r11, Z+1	; 0x01
    22a2:	26 ff       	sbrs	r18, 6
    22a4:	03 c0       	rjmp	.+6      	; 0x22ac <vfprintf+0x15a>
    22a6:	65 2d       	mov	r22, r5
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <vfprintf+0x15e>
    22ac:	6f ef       	ldi	r22, 0xFF	; 255
    22ae:	7f ef       	ldi	r23, 0xFF	; 255
    22b0:	c5 01       	movw	r24, r10
    22b2:	2c 87       	std	Y+12, r18	; 0x0c
    22b4:	0e 94 97 12 	call	0x252e	; 0x252e <strnlen_P>
    22b8:	2c 01       	movw	r4, r24
    22ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    22bc:	20 68       	ori	r18, 0x80	; 128
    22be:	22 2e       	mov	r2, r18
    22c0:	83 01       	movw	r16, r6
    22c2:	23 fc       	sbrc	r2, 3
    22c4:	1b c0       	rjmp	.+54     	; 0x22fc <vfprintf+0x1aa>
    22c6:	83 2d       	mov	r24, r3
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	48 16       	cp	r4, r24
    22cc:	59 06       	cpc	r5, r25
    22ce:	b0 f4       	brcc	.+44     	; 0x22fc <vfprintf+0x1aa>
    22d0:	b7 01       	movw	r22, r14
    22d2:	80 e2       	ldi	r24, 0x20	; 32
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	0e 94 21 10 	call	0x2042	; 0x2042 <fputc>
    22da:	3a 94       	dec	r3
    22dc:	f4 cf       	rjmp	.-24     	; 0x22c6 <vfprintf+0x174>
    22de:	f5 01       	movw	r30, r10
    22e0:	27 fc       	sbrc	r2, 7
    22e2:	85 91       	lpm	r24, Z+
    22e4:	27 fe       	sbrs	r2, 7
    22e6:	81 91       	ld	r24, Z+
    22e8:	5f 01       	movw	r10, r30
    22ea:	b7 01       	movw	r22, r14
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0e 94 21 10 	call	0x2042	; 0x2042 <fputc>
    22f2:	31 10       	cpse	r3, r1
    22f4:	3a 94       	dec	r3
    22f6:	f1 e0       	ldi	r31, 0x01	; 1
    22f8:	4f 1a       	sub	r4, r31
    22fa:	51 08       	sbc	r5, r1
    22fc:	41 14       	cp	r4, r1
    22fe:	51 04       	cpc	r5, r1
    2300:	71 f7       	brne	.-36     	; 0x22de <vfprintf+0x18c>
    2302:	e5 c0       	rjmp	.+458    	; 0x24ce <vfprintf+0x37c>
    2304:	84 36       	cpi	r24, 0x64	; 100
    2306:	11 f0       	breq	.+4      	; 0x230c <vfprintf+0x1ba>
    2308:	89 36       	cpi	r24, 0x69	; 105
    230a:	39 f5       	brne	.+78     	; 0x235a <vfprintf+0x208>
    230c:	f8 01       	movw	r30, r16
    230e:	27 ff       	sbrs	r18, 7
    2310:	07 c0       	rjmp	.+14     	; 0x2320 <vfprintf+0x1ce>
    2312:	60 81       	ld	r22, Z
    2314:	71 81       	ldd	r23, Z+1	; 0x01
    2316:	82 81       	ldd	r24, Z+2	; 0x02
    2318:	93 81       	ldd	r25, Z+3	; 0x03
    231a:	0c 5f       	subi	r16, 0xFC	; 252
    231c:	1f 4f       	sbci	r17, 0xFF	; 255
    231e:	08 c0       	rjmp	.+16     	; 0x2330 <vfprintf+0x1de>
    2320:	60 81       	ld	r22, Z
    2322:	71 81       	ldd	r23, Z+1	; 0x01
    2324:	88 27       	eor	r24, r24
    2326:	77 fd       	sbrc	r23, 7
    2328:	80 95       	com	r24
    232a:	98 2f       	mov	r25, r24
    232c:	0e 5f       	subi	r16, 0xFE	; 254
    232e:	1f 4f       	sbci	r17, 0xFF	; 255
    2330:	2f 76       	andi	r18, 0x6F	; 111
    2332:	b2 2e       	mov	r11, r18
    2334:	97 ff       	sbrs	r25, 7
    2336:	09 c0       	rjmp	.+18     	; 0x234a <vfprintf+0x1f8>
    2338:	90 95       	com	r25
    233a:	80 95       	com	r24
    233c:	70 95       	com	r23
    233e:	61 95       	neg	r22
    2340:	7f 4f       	sbci	r23, 0xFF	; 255
    2342:	8f 4f       	sbci	r24, 0xFF	; 255
    2344:	9f 4f       	sbci	r25, 0xFF	; 255
    2346:	20 68       	ori	r18, 0x80	; 128
    2348:	b2 2e       	mov	r11, r18
    234a:	2a e0       	ldi	r18, 0x0A	; 10
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	a4 01       	movw	r20, r8
    2350:	0e 94 b4 12 	call	0x2568	; 0x2568 <__ultoa_invert>
    2354:	a8 2e       	mov	r10, r24
    2356:	a8 18       	sub	r10, r8
    2358:	44 c0       	rjmp	.+136    	; 0x23e2 <vfprintf+0x290>
    235a:	85 37       	cpi	r24, 0x75	; 117
    235c:	29 f4       	brne	.+10     	; 0x2368 <vfprintf+0x216>
    235e:	2f 7e       	andi	r18, 0xEF	; 239
    2360:	b2 2e       	mov	r11, r18
    2362:	2a e0       	ldi	r18, 0x0A	; 10
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	25 c0       	rjmp	.+74     	; 0x23b2 <vfprintf+0x260>
    2368:	f2 2f       	mov	r31, r18
    236a:	f9 7f       	andi	r31, 0xF9	; 249
    236c:	bf 2e       	mov	r11, r31
    236e:	8f 36       	cpi	r24, 0x6F	; 111
    2370:	c1 f0       	breq	.+48     	; 0x23a2 <vfprintf+0x250>
    2372:	18 f4       	brcc	.+6      	; 0x237a <vfprintf+0x228>
    2374:	88 35       	cpi	r24, 0x58	; 88
    2376:	79 f0       	breq	.+30     	; 0x2396 <vfprintf+0x244>
    2378:	b4 c0       	rjmp	.+360    	; 0x24e2 <vfprintf+0x390>
    237a:	80 37       	cpi	r24, 0x70	; 112
    237c:	19 f0       	breq	.+6      	; 0x2384 <vfprintf+0x232>
    237e:	88 37       	cpi	r24, 0x78	; 120
    2380:	21 f0       	breq	.+8      	; 0x238a <vfprintf+0x238>
    2382:	af c0       	rjmp	.+350    	; 0x24e2 <vfprintf+0x390>
    2384:	2f 2f       	mov	r18, r31
    2386:	20 61       	ori	r18, 0x10	; 16
    2388:	b2 2e       	mov	r11, r18
    238a:	b4 fe       	sbrs	r11, 4
    238c:	0d c0       	rjmp	.+26     	; 0x23a8 <vfprintf+0x256>
    238e:	8b 2d       	mov	r24, r11
    2390:	84 60       	ori	r24, 0x04	; 4
    2392:	b8 2e       	mov	r11, r24
    2394:	09 c0       	rjmp	.+18     	; 0x23a8 <vfprintf+0x256>
    2396:	24 ff       	sbrs	r18, 4
    2398:	0a c0       	rjmp	.+20     	; 0x23ae <vfprintf+0x25c>
    239a:	9f 2f       	mov	r25, r31
    239c:	96 60       	ori	r25, 0x06	; 6
    239e:	b9 2e       	mov	r11, r25
    23a0:	06 c0       	rjmp	.+12     	; 0x23ae <vfprintf+0x25c>
    23a2:	28 e0       	ldi	r18, 0x08	; 8
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	05 c0       	rjmp	.+10     	; 0x23b2 <vfprintf+0x260>
    23a8:	20 e1       	ldi	r18, 0x10	; 16
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <vfprintf+0x260>
    23ae:	20 e1       	ldi	r18, 0x10	; 16
    23b0:	32 e0       	ldi	r19, 0x02	; 2
    23b2:	f8 01       	movw	r30, r16
    23b4:	b7 fe       	sbrs	r11, 7
    23b6:	07 c0       	rjmp	.+14     	; 0x23c6 <vfprintf+0x274>
    23b8:	60 81       	ld	r22, Z
    23ba:	71 81       	ldd	r23, Z+1	; 0x01
    23bc:	82 81       	ldd	r24, Z+2	; 0x02
    23be:	93 81       	ldd	r25, Z+3	; 0x03
    23c0:	0c 5f       	subi	r16, 0xFC	; 252
    23c2:	1f 4f       	sbci	r17, 0xFF	; 255
    23c4:	06 c0       	rjmp	.+12     	; 0x23d2 <vfprintf+0x280>
    23c6:	60 81       	ld	r22, Z
    23c8:	71 81       	ldd	r23, Z+1	; 0x01
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	0e 5f       	subi	r16, 0xFE	; 254
    23d0:	1f 4f       	sbci	r17, 0xFF	; 255
    23d2:	a4 01       	movw	r20, r8
    23d4:	0e 94 b4 12 	call	0x2568	; 0x2568 <__ultoa_invert>
    23d8:	a8 2e       	mov	r10, r24
    23da:	a8 18       	sub	r10, r8
    23dc:	fb 2d       	mov	r31, r11
    23de:	ff 77       	andi	r31, 0x7F	; 127
    23e0:	bf 2e       	mov	r11, r31
    23e2:	b6 fe       	sbrs	r11, 6
    23e4:	0b c0       	rjmp	.+22     	; 0x23fc <vfprintf+0x2aa>
    23e6:	2b 2d       	mov	r18, r11
    23e8:	2e 7f       	andi	r18, 0xFE	; 254
    23ea:	a5 14       	cp	r10, r5
    23ec:	50 f4       	brcc	.+20     	; 0x2402 <vfprintf+0x2b0>
    23ee:	b4 fe       	sbrs	r11, 4
    23f0:	0a c0       	rjmp	.+20     	; 0x2406 <vfprintf+0x2b4>
    23f2:	b2 fc       	sbrc	r11, 2
    23f4:	08 c0       	rjmp	.+16     	; 0x2406 <vfprintf+0x2b4>
    23f6:	2b 2d       	mov	r18, r11
    23f8:	2e 7e       	andi	r18, 0xEE	; 238
    23fa:	05 c0       	rjmp	.+10     	; 0x2406 <vfprintf+0x2b4>
    23fc:	7a 2c       	mov	r7, r10
    23fe:	2b 2d       	mov	r18, r11
    2400:	03 c0       	rjmp	.+6      	; 0x2408 <vfprintf+0x2b6>
    2402:	7a 2c       	mov	r7, r10
    2404:	01 c0       	rjmp	.+2      	; 0x2408 <vfprintf+0x2b6>
    2406:	75 2c       	mov	r7, r5
    2408:	24 ff       	sbrs	r18, 4
    240a:	0d c0       	rjmp	.+26     	; 0x2426 <vfprintf+0x2d4>
    240c:	fe 01       	movw	r30, r28
    240e:	ea 0d       	add	r30, r10
    2410:	f1 1d       	adc	r31, r1
    2412:	80 81       	ld	r24, Z
    2414:	80 33       	cpi	r24, 0x30	; 48
    2416:	11 f4       	brne	.+4      	; 0x241c <vfprintf+0x2ca>
    2418:	29 7e       	andi	r18, 0xE9	; 233
    241a:	09 c0       	rjmp	.+18     	; 0x242e <vfprintf+0x2dc>
    241c:	22 ff       	sbrs	r18, 2
    241e:	06 c0       	rjmp	.+12     	; 0x242c <vfprintf+0x2da>
    2420:	73 94       	inc	r7
    2422:	73 94       	inc	r7
    2424:	04 c0       	rjmp	.+8      	; 0x242e <vfprintf+0x2dc>
    2426:	82 2f       	mov	r24, r18
    2428:	86 78       	andi	r24, 0x86	; 134
    242a:	09 f0       	breq	.+2      	; 0x242e <vfprintf+0x2dc>
    242c:	73 94       	inc	r7
    242e:	23 fd       	sbrc	r18, 3
    2430:	13 c0       	rjmp	.+38     	; 0x2458 <vfprintf+0x306>
    2432:	20 ff       	sbrs	r18, 0
    2434:	06 c0       	rjmp	.+12     	; 0x2442 <vfprintf+0x2f0>
    2436:	5a 2c       	mov	r5, r10
    2438:	73 14       	cp	r7, r3
    243a:	18 f4       	brcc	.+6      	; 0x2442 <vfprintf+0x2f0>
    243c:	53 0c       	add	r5, r3
    243e:	57 18       	sub	r5, r7
    2440:	73 2c       	mov	r7, r3
    2442:	73 14       	cp	r7, r3
    2444:	68 f4       	brcc	.+26     	; 0x2460 <vfprintf+0x30e>
    2446:	b7 01       	movw	r22, r14
    2448:	80 e2       	ldi	r24, 0x20	; 32
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	2c 87       	std	Y+12, r18	; 0x0c
    244e:	0e 94 21 10 	call	0x2042	; 0x2042 <fputc>
    2452:	73 94       	inc	r7
    2454:	2c 85       	ldd	r18, Y+12	; 0x0c
    2456:	f5 cf       	rjmp	.-22     	; 0x2442 <vfprintf+0x2f0>
    2458:	73 14       	cp	r7, r3
    245a:	10 f4       	brcc	.+4      	; 0x2460 <vfprintf+0x30e>
    245c:	37 18       	sub	r3, r7
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <vfprintf+0x310>
    2460:	31 2c       	mov	r3, r1
    2462:	24 ff       	sbrs	r18, 4
    2464:	12 c0       	rjmp	.+36     	; 0x248a <vfprintf+0x338>
    2466:	b7 01       	movw	r22, r14
    2468:	80 e3       	ldi	r24, 0x30	; 48
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	2c 87       	std	Y+12, r18	; 0x0c
    246e:	0e 94 21 10 	call	0x2042	; 0x2042 <fputc>
    2472:	2c 85       	ldd	r18, Y+12	; 0x0c
    2474:	22 ff       	sbrs	r18, 2
    2476:	17 c0       	rjmp	.+46     	; 0x24a6 <vfprintf+0x354>
    2478:	21 ff       	sbrs	r18, 1
    247a:	03 c0       	rjmp	.+6      	; 0x2482 <vfprintf+0x330>
    247c:	88 e5       	ldi	r24, 0x58	; 88
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <vfprintf+0x334>
    2482:	88 e7       	ldi	r24, 0x78	; 120
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	b7 01       	movw	r22, r14
    2488:	0c c0       	rjmp	.+24     	; 0x24a2 <vfprintf+0x350>
    248a:	82 2f       	mov	r24, r18
    248c:	86 78       	andi	r24, 0x86	; 134
    248e:	59 f0       	breq	.+22     	; 0x24a6 <vfprintf+0x354>
    2490:	21 fd       	sbrc	r18, 1
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <vfprintf+0x346>
    2494:	80 e2       	ldi	r24, 0x20	; 32
    2496:	01 c0       	rjmp	.+2      	; 0x249a <vfprintf+0x348>
    2498:	8b e2       	ldi	r24, 0x2B	; 43
    249a:	27 fd       	sbrc	r18, 7
    249c:	8d e2       	ldi	r24, 0x2D	; 45
    249e:	b7 01       	movw	r22, r14
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	0e 94 21 10 	call	0x2042	; 0x2042 <fputc>
    24a6:	a5 14       	cp	r10, r5
    24a8:	38 f4       	brcc	.+14     	; 0x24b8 <vfprintf+0x366>
    24aa:	b7 01       	movw	r22, r14
    24ac:	80 e3       	ldi	r24, 0x30	; 48
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	0e 94 21 10 	call	0x2042	; 0x2042 <fputc>
    24b4:	5a 94       	dec	r5
    24b6:	f7 cf       	rjmp	.-18     	; 0x24a6 <vfprintf+0x354>
    24b8:	aa 94       	dec	r10
    24ba:	f4 01       	movw	r30, r8
    24bc:	ea 0d       	add	r30, r10
    24be:	f1 1d       	adc	r31, r1
    24c0:	80 81       	ld	r24, Z
    24c2:	b7 01       	movw	r22, r14
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	0e 94 21 10 	call	0x2042	; 0x2042 <fputc>
    24ca:	a1 10       	cpse	r10, r1
    24cc:	f5 cf       	rjmp	.-22     	; 0x24b8 <vfprintf+0x366>
    24ce:	33 20       	and	r3, r3
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <vfprintf+0x382>
    24d2:	51 ce       	rjmp	.-862    	; 0x2176 <vfprintf+0x24>
    24d4:	b7 01       	movw	r22, r14
    24d6:	80 e2       	ldi	r24, 0x20	; 32
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	0e 94 21 10 	call	0x2042	; 0x2042 <fputc>
    24de:	3a 94       	dec	r3
    24e0:	f6 cf       	rjmp	.-20     	; 0x24ce <vfprintf+0x37c>
    24e2:	f7 01       	movw	r30, r14
    24e4:	86 81       	ldd	r24, Z+6	; 0x06
    24e6:	97 81       	ldd	r25, Z+7	; 0x07
    24e8:	02 c0       	rjmp	.+4      	; 0x24ee <vfprintf+0x39c>
    24ea:	8f ef       	ldi	r24, 0xFF	; 255
    24ec:	9f ef       	ldi	r25, 0xFF	; 255
    24ee:	2c 96       	adiw	r28, 0x0c	; 12
    24f0:	e2 e1       	ldi	r30, 0x12	; 18
    24f2:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__epilogue_restores__>

000024f6 <calloc>:
    24f6:	0f 93       	push	r16
    24f8:	1f 93       	push	r17
    24fa:	cf 93       	push	r28
    24fc:	df 93       	push	r29
    24fe:	86 9f       	mul	r24, r22
    2500:	80 01       	movw	r16, r0
    2502:	87 9f       	mul	r24, r23
    2504:	10 0d       	add	r17, r0
    2506:	96 9f       	mul	r25, r22
    2508:	10 0d       	add	r17, r0
    250a:	11 24       	eor	r1, r1
    250c:	c8 01       	movw	r24, r16
    250e:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <malloc>
    2512:	ec 01       	movw	r28, r24
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	29 f0       	breq	.+10     	; 0x2522 <calloc+0x2c>
    2518:	a8 01       	movw	r20, r16
    251a:	60 e0       	ldi	r22, 0x00	; 0
    251c:	70 e0       	ldi	r23, 0x00	; 0
    251e:	0e 94 a2 12 	call	0x2544	; 0x2544 <memset>
    2522:	ce 01       	movw	r24, r28
    2524:	df 91       	pop	r29
    2526:	cf 91       	pop	r28
    2528:	1f 91       	pop	r17
    252a:	0f 91       	pop	r16
    252c:	08 95       	ret

0000252e <strnlen_P>:
    252e:	fc 01       	movw	r30, r24
    2530:	05 90       	lpm	r0, Z+
    2532:	61 50       	subi	r22, 0x01	; 1
    2534:	70 40       	sbci	r23, 0x00	; 0
    2536:	01 10       	cpse	r0, r1
    2538:	d8 f7       	brcc	.-10     	; 0x2530 <strnlen_P+0x2>
    253a:	80 95       	com	r24
    253c:	90 95       	com	r25
    253e:	8e 0f       	add	r24, r30
    2540:	9f 1f       	adc	r25, r31
    2542:	08 95       	ret

00002544 <memset>:
    2544:	dc 01       	movw	r26, r24
    2546:	01 c0       	rjmp	.+2      	; 0x254a <memset+0x6>
    2548:	6d 93       	st	X+, r22
    254a:	41 50       	subi	r20, 0x01	; 1
    254c:	50 40       	sbci	r21, 0x00	; 0
    254e:	e0 f7       	brcc	.-8      	; 0x2548 <memset+0x4>
    2550:	08 95       	ret

00002552 <strnlen>:
    2552:	fc 01       	movw	r30, r24
    2554:	61 50       	subi	r22, 0x01	; 1
    2556:	70 40       	sbci	r23, 0x00	; 0
    2558:	01 90       	ld	r0, Z+
    255a:	01 10       	cpse	r0, r1
    255c:	d8 f7       	brcc	.-10     	; 0x2554 <strnlen+0x2>
    255e:	80 95       	com	r24
    2560:	90 95       	com	r25
    2562:	8e 0f       	add	r24, r30
    2564:	9f 1f       	adc	r25, r31
    2566:	08 95       	ret

00002568 <__ultoa_invert>:
    2568:	fa 01       	movw	r30, r20
    256a:	aa 27       	eor	r26, r26
    256c:	28 30       	cpi	r18, 0x08	; 8
    256e:	51 f1       	breq	.+84     	; 0x25c4 <__ultoa_invert+0x5c>
    2570:	20 31       	cpi	r18, 0x10	; 16
    2572:	81 f1       	breq	.+96     	; 0x25d4 <__ultoa_invert+0x6c>
    2574:	e8 94       	clt
    2576:	6f 93       	push	r22
    2578:	6e 7f       	andi	r22, 0xFE	; 254
    257a:	6e 5f       	subi	r22, 0xFE	; 254
    257c:	7f 4f       	sbci	r23, 0xFF	; 255
    257e:	8f 4f       	sbci	r24, 0xFF	; 255
    2580:	9f 4f       	sbci	r25, 0xFF	; 255
    2582:	af 4f       	sbci	r26, 0xFF	; 255
    2584:	b1 e0       	ldi	r27, 0x01	; 1
    2586:	3e d0       	rcall	.+124    	; 0x2604 <__ultoa_invert+0x9c>
    2588:	b4 e0       	ldi	r27, 0x04	; 4
    258a:	3c d0       	rcall	.+120    	; 0x2604 <__ultoa_invert+0x9c>
    258c:	67 0f       	add	r22, r23
    258e:	78 1f       	adc	r23, r24
    2590:	89 1f       	adc	r24, r25
    2592:	9a 1f       	adc	r25, r26
    2594:	a1 1d       	adc	r26, r1
    2596:	68 0f       	add	r22, r24
    2598:	79 1f       	adc	r23, r25
    259a:	8a 1f       	adc	r24, r26
    259c:	91 1d       	adc	r25, r1
    259e:	a1 1d       	adc	r26, r1
    25a0:	6a 0f       	add	r22, r26
    25a2:	71 1d       	adc	r23, r1
    25a4:	81 1d       	adc	r24, r1
    25a6:	91 1d       	adc	r25, r1
    25a8:	a1 1d       	adc	r26, r1
    25aa:	20 d0       	rcall	.+64     	; 0x25ec <__ultoa_invert+0x84>
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <__ultoa_invert+0x48>
    25ae:	68 94       	set
    25b0:	3f 91       	pop	r19
    25b2:	2a e0       	ldi	r18, 0x0A	; 10
    25b4:	26 9f       	mul	r18, r22
    25b6:	11 24       	eor	r1, r1
    25b8:	30 19       	sub	r19, r0
    25ba:	30 5d       	subi	r19, 0xD0	; 208
    25bc:	31 93       	st	Z+, r19
    25be:	de f6       	brtc	.-74     	; 0x2576 <__ultoa_invert+0xe>
    25c0:	cf 01       	movw	r24, r30
    25c2:	08 95       	ret
    25c4:	46 2f       	mov	r20, r22
    25c6:	47 70       	andi	r20, 0x07	; 7
    25c8:	40 5d       	subi	r20, 0xD0	; 208
    25ca:	41 93       	st	Z+, r20
    25cc:	b3 e0       	ldi	r27, 0x03	; 3
    25ce:	0f d0       	rcall	.+30     	; 0x25ee <__ultoa_invert+0x86>
    25d0:	c9 f7       	brne	.-14     	; 0x25c4 <__ultoa_invert+0x5c>
    25d2:	f6 cf       	rjmp	.-20     	; 0x25c0 <__ultoa_invert+0x58>
    25d4:	46 2f       	mov	r20, r22
    25d6:	4f 70       	andi	r20, 0x0F	; 15
    25d8:	40 5d       	subi	r20, 0xD0	; 208
    25da:	4a 33       	cpi	r20, 0x3A	; 58
    25dc:	18 f0       	brcs	.+6      	; 0x25e4 <__ultoa_invert+0x7c>
    25de:	49 5d       	subi	r20, 0xD9	; 217
    25e0:	31 fd       	sbrc	r19, 1
    25e2:	40 52       	subi	r20, 0x20	; 32
    25e4:	41 93       	st	Z+, r20
    25e6:	02 d0       	rcall	.+4      	; 0x25ec <__ultoa_invert+0x84>
    25e8:	a9 f7       	brne	.-22     	; 0x25d4 <__ultoa_invert+0x6c>
    25ea:	ea cf       	rjmp	.-44     	; 0x25c0 <__ultoa_invert+0x58>
    25ec:	b4 e0       	ldi	r27, 0x04	; 4
    25ee:	a6 95       	lsr	r26
    25f0:	97 95       	ror	r25
    25f2:	87 95       	ror	r24
    25f4:	77 95       	ror	r23
    25f6:	67 95       	ror	r22
    25f8:	ba 95       	dec	r27
    25fa:	c9 f7       	brne	.-14     	; 0x25ee <__ultoa_invert+0x86>
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	61 05       	cpc	r22, r1
    2600:	71 05       	cpc	r23, r1
    2602:	08 95       	ret
    2604:	9b 01       	movw	r18, r22
    2606:	ac 01       	movw	r20, r24
    2608:	0a 2e       	mov	r0, r26
    260a:	06 94       	lsr	r0
    260c:	57 95       	ror	r21
    260e:	47 95       	ror	r20
    2610:	37 95       	ror	r19
    2612:	27 95       	ror	r18
    2614:	ba 95       	dec	r27
    2616:	c9 f7       	brne	.-14     	; 0x260a <__ultoa_invert+0xa2>
    2618:	62 0f       	add	r22, r18
    261a:	73 1f       	adc	r23, r19
    261c:	84 1f       	adc	r24, r20
    261e:	95 1f       	adc	r25, r21
    2620:	a0 1d       	adc	r26, r0
    2622:	08 95       	ret

00002624 <__prologue_saves__>:
    2624:	2f 92       	push	r2
    2626:	3f 92       	push	r3
    2628:	4f 92       	push	r4
    262a:	5f 92       	push	r5
    262c:	6f 92       	push	r6
    262e:	7f 92       	push	r7
    2630:	8f 92       	push	r8
    2632:	9f 92       	push	r9
    2634:	af 92       	push	r10
    2636:	bf 92       	push	r11
    2638:	cf 92       	push	r12
    263a:	df 92       	push	r13
    263c:	ef 92       	push	r14
    263e:	ff 92       	push	r15
    2640:	0f 93       	push	r16
    2642:	1f 93       	push	r17
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	ca 1b       	sub	r28, r26
    264e:	db 0b       	sbc	r29, r27
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	09 94       	ijmp

0000265c <__epilogue_restores__>:
    265c:	2a 88       	ldd	r2, Y+18	; 0x12
    265e:	39 88       	ldd	r3, Y+17	; 0x11
    2660:	48 88       	ldd	r4, Y+16	; 0x10
    2662:	5f 84       	ldd	r5, Y+15	; 0x0f
    2664:	6e 84       	ldd	r6, Y+14	; 0x0e
    2666:	7d 84       	ldd	r7, Y+13	; 0x0d
    2668:	8c 84       	ldd	r8, Y+12	; 0x0c
    266a:	9b 84       	ldd	r9, Y+11	; 0x0b
    266c:	aa 84       	ldd	r10, Y+10	; 0x0a
    266e:	b9 84       	ldd	r11, Y+9	; 0x09
    2670:	c8 84       	ldd	r12, Y+8	; 0x08
    2672:	df 80       	ldd	r13, Y+7	; 0x07
    2674:	ee 80       	ldd	r14, Y+6	; 0x06
    2676:	fd 80       	ldd	r15, Y+5	; 0x05
    2678:	0c 81       	ldd	r16, Y+4	; 0x04
    267a:	1b 81       	ldd	r17, Y+3	; 0x03
    267c:	aa 81       	ldd	r26, Y+2	; 0x02
    267e:	b9 81       	ldd	r27, Y+1	; 0x01
    2680:	ce 0f       	add	r28, r30
    2682:	d1 1d       	adc	r29, r1
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	ed 01       	movw	r28, r26
    2690:	08 95       	ret

00002692 <_exit>:
    2692:	f8 94       	cli

00002694 <__stop_program>:
    2694:	ff cf       	rjmp	.-2      	; 0x2694 <__stop_program>
