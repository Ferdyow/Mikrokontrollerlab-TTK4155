
microcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000568  000005fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800142  00800142  0000063e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000063e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000066e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a68  00000000  00000000  0000074e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064f  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ed  00000000  00000000  00001805  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00001cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c6  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000687  00000000  00000000  0000219e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002825  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e8 e6       	ldi	r30, 0x68	; 104
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 34       	cpi	r26, 0x42	; 66
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a2 e4       	ldi	r26, 0x42	; 66
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 35       	cpi	r26, 0x52	; 82
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  a6:	0c 94 b2 02 	jmp	0x564	; 0x564 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
	printf("hei bæsj!\n");
}

void adc_init(){
	//set interrupt pin to input
	clear_bit(DDRE,DDE0);
  ae:	30 98       	cbi	0x06, 0	; 6
  b0:	08 95       	ret

000000b2 <adc_read>:
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	
	//invalid input
	if(channel > 3) return 0;
  b2:	84 30       	cpi	r24, 0x04	; 4
  b4:	60 f4       	brcc	.+24     	; 0xce <adc_read+0x1c>
	
	//choose channel (1-4) - single ended
	*adc = 0x4 + channel; 
  b6:	8c 5f       	subi	r24, 0xFC	; 252
  b8:	80 93 00 14 	sts	0x1400, r24
	
	
	//wait 'til /INTR is low
	 while(test_bit(PINE, PINE0));
  bc:	28 99       	sbic	0x05, 0	; 5
  be:	fe cf       	rjmp	.-4      	; 0xbc <adc_read+0xa>
	//while(!inter)
	//printf("hade bæsj! %4d\n",inter);
	 
	//reset interrupt
	inter = 0;
  c0:	10 92 43 01 	sts	0x0143, r1
  c4:	10 92 42 01 	sts	0x0142, r1
	//return current value
	return *adc; 
  c8:	80 91 00 14 	lds	r24, 0x1400
  cc:	08 95       	ret
	//start adress for the adc
	volatile char *adc = (char *) 0x1400;

	
	//invalid input
	if(channel > 3) return 0;
  ce:	80 e0       	ldi	r24, 0x00	; 0
	 
	//reset interrupt
	inter = 0;
	//return current value
	return *adc; 
  d0:	08 95       	ret

000000d2 <joy_calibrate>:
	uint8_t x;
	uint8_t y;
} max, min;


void joy_calibrate(){
  d2:	bf 92       	push	r11
  d4:	cf 92       	push	r12
  d6:	df 92       	push	r13
  d8:	ef 92       	push	r14
  da:	ff 92       	push	r15
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
	max.x = 0;
  e4:	10 92 44 01 	sts	0x0144, r1
	max.y = 0;
  e8:	10 92 45 01 	sts	0x0145, r1
	min.x = 255;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	80 93 46 01 	sts	0x0146, r24
	min.y = 255;
  f2:	80 93 47 01 	sts	0x0147, r24
	uint8_t x;
	uint8_t y;
	printf("Move the joystick to all extreme points\n");
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 3b 01 	call	0x276	; 0x276 <puts>
		// Read sensor values
		x = adc_read(0);
		y = adc_read(1);
		
		// Calibrate x
		if (min.x > x) min.x = x; 
  fe:	06 e4       	ldi	r16, 0x46	; 70
 100:	11 e0       	ldi	r17, 0x01	; 1
		else if (max.x < x) max.x = x;
 102:	0f 2e       	mov	r0, r31
 104:	f4 e4       	ldi	r31, 0x44	; 68
 106:	cf 2e       	mov	r12, r31
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	df 2e       	mov	r13, r31
 10c:	f0 2d       	mov	r31, r0
		
		// Calibrate y
		if (min.y > y) min.y = y;
 10e:	c7 e4       	ldi	r28, 0x47	; 71
 110:	d1 e0       	ldi	r29, 0x01	; 1
		else if (max.y < y) max.y = y;		
 112:	0f 2e       	mov	r0, r31
 114:	f5 e4       	ldi	r31, 0x45	; 69
 116:	ef 2e       	mov	r14, r31
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	ff 2e       	mov	r15, r31
 11c:	f0 2d       	mov	r31, r0
	min.y = 255;
	uint8_t x;
	uint8_t y;
	printf("Move the joystick to all extreme points\n");
	//check channels
	while(!test_bit(PINB,PINB0)){
 11e:	1e c0       	rjmp	.+60     	; 0x15c <joy_calibrate+0x8a>
		// Read sensor values
		x = adc_read(0);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_read>
 128:	b8 2e       	mov	r11, r24
		y = adc_read(1);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 59 00 	call	0xb2	; 0xb2 <adc_read>
		
		// Calibrate x
		if (min.x > x) min.x = x; 
 132:	f8 01       	movw	r30, r16
 134:	90 81       	ld	r25, Z
 136:	b9 16       	cp	r11, r25
 138:	10 f4       	brcc	.+4      	; 0x13e <joy_calibrate+0x6c>
 13a:	b0 82       	st	Z, r11
 13c:	05 c0       	rjmp	.+10     	; 0x148 <joy_calibrate+0x76>
		else if (max.x < x) max.x = x;
 13e:	f6 01       	movw	r30, r12
 140:	90 81       	ld	r25, Z
 142:	9b 15       	cp	r25, r11
 144:	08 f4       	brcc	.+2      	; 0x148 <joy_calibrate+0x76>
 146:	b0 82       	st	Z, r11
		
		// Calibrate y
		if (min.y > y) min.y = y;
 148:	98 81       	ld	r25, Y
 14a:	89 17       	cp	r24, r25
 14c:	10 f4       	brcc	.+4      	; 0x152 <joy_calibrate+0x80>
 14e:	88 83       	st	Y, r24
 150:	05 c0       	rjmp	.+10     	; 0x15c <joy_calibrate+0x8a>
		else if (max.y < y) max.y = y;		
 152:	f7 01       	movw	r30, r14
 154:	90 81       	ld	r25, Z
 156:	98 17       	cp	r25, r24
 158:	08 f4       	brcc	.+2      	; 0x15c <joy_calibrate+0x8a>
 15a:	80 83       	st	Z, r24
	min.y = 255;
	uint8_t x;
	uint8_t y;
	printf("Move the joystick to all extreme points\n");
	//check channels
	while(!test_bit(PINB,PINB0)){
 15c:	b0 9b       	sbis	0x16, 0	; 22
 15e:	e0 cf       	rjmp	.-64     	; 0x120 <joy_calibrate+0x4e>
		
		// Calibrate y
		if (min.y > y) min.y = y;
		else if (max.y < y) max.y = y;		
	}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	ff 90       	pop	r15
 16a:	ef 90       	pop	r14
 16c:	df 90       	pop	r13
 16e:	cf 90       	pop	r12
 170:	bf 90       	pop	r11
 172:	08 95       	ret

00000174 <initialize>:
#include "adc.h"
#include "defines.h"
#include "joy.h"

void initialize(void){
	usart_init(MYUBRR);
 174:	8f e1       	ldi	r24, 0x1F	; 31
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <usart_init>
	SRAM_init();
 17c:	0e 94 ce 00 	call	0x19c	; 0x19c <SRAM_init>
	adc_init();
 180:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	joy_calibrate();
 184:	0e 94 69 00 	call	0xd2	; 0xd2 <joy_calibrate>
 188:	08 95       	ret

0000018a <main>:
}


int main(void) {
	initialize(); 	
 18a:	0e 94 ba 00 	call	0x174	; 0x174 <initialize>
	
	int count=0;
	while(1) {
		 //printf("X-axis: %4d\t\tY-axis: %4d\n",adc_read(0),adc_read(1));
		 //printf("left slider: %4d\t\tright slider: %4d\n",adc_read(2),adc_read(3));
		 if(!test_bit(PINB,PINB2)){
 18e:	b2 99       	sbic	0x16, 2	; 22
 190:	fe cf       	rjmp	.-4      	; 0x18e <main+0x4>
			 printf("knapp er trykt inn\n");
 192:	8e e2       	ldi	r24, 0x2E	; 46
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	0e 94 3b 01 	call	0x276	; 0x276 <puts>
 19a:	f9 cf       	rjmp	.-14     	; 0x18e <main+0x4>

0000019c <SRAM_init>:
#include "defines.h"



void SRAM_init(void){
	set_bit(MCUCR, SRE);
 19c:	85 b7       	in	r24, 0x35	; 53
 19e:	80 68       	ori	r24, 0x80	; 128
 1a0:	85 bf       	out	0x35, r24	; 53
	
	//disable JTAG ports
	set_bit(SFIOR, XMM2);
 1a2:	80 b7       	in	r24, 0x30	; 48
 1a4:	80 62       	ori	r24, 0x20	; 32
 1a6:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM1);
 1a8:	80 b7       	in	r24, 0x30	; 48
 1aa:	8f 7e       	andi	r24, 0xEF	; 239
 1ac:	80 bf       	out	0x30, r24	; 48
	clear_bit(SFIOR, XMM0);
 1ae:	80 b7       	in	r24, 0x30	; 48
 1b0:	87 7f       	andi	r24, 0xF7	; 247
 1b2:	80 bf       	out	0x30, r24	; 48
 1b4:	08 95       	ret

000001b6 <usart_transmit_to_computer>:
}


void usart_transmit_to_computer(unsigned int data) {
	/* Wait for empty transmit buffer */
	while (!(UCSR0A & (1<<UDRE0)))
 1b6:	5d 9b       	sbis	0x0b, 5	; 11
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <usart_transmit_to_computer>
	;
	
	/* Put data into buffer (sends the data) */
	UDR0 = data;
 1ba:	8c b9       	out	0x0c, r24	; 12
 1bc:	08 95       	ret

000001be <usart_receive_from_computer>:
}


unsigned char usart_receive_from_computer(void) {
	/* Wait for data to be received */
	while (!(UCSR0A & (1<<RXC0)))
 1be:	5f 9b       	sbis	0x0b, 7	; 11
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <usart_receive_from_computer>
	;
	
	/* Get and return data from buffer */
	return UDR0;
 1c2:	8c b1       	in	r24, 0x0c	; 12
}
 1c4:	08 95       	ret

000001c6 <usart_init>:
#include <avr/io.h>
#include "usart.h"

void usart_init(unsigned int ubbr) {
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubbr>>8);
 1c6:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)(ubbr);
 1c8:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 1ca:	88 e1       	ldi	r24, 0x18	; 24
 1cc:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 1ce:	8e e8       	ldi	r24, 0x8E	; 142
 1d0:	80 bd       	out	0x20, r24	; 32
	
	
	/* Enable printf-thing */
	fdevopen(usart_transmit_to_computer, usart_receive_from_computer);
 1d2:	6f ed       	ldi	r22, 0xDF	; 223
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	8b ed       	ldi	r24, 0xDB	; 219
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <fdevopen>
 1de:	08 95       	ret

000001e0 <fdevopen>:
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	ec 01       	movw	r28, r24
 1ea:	8b 01       	movw	r16, r22
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	31 f4       	brne	.+12     	; 0x1fc <fdevopen+0x1c>
 1f0:	61 15       	cp	r22, r1
 1f2:	71 05       	cpc	r23, r1
 1f4:	19 f4       	brne	.+6      	; 0x1fc <fdevopen+0x1c>
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	38 c0       	rjmp	.+112    	; 0x26c <fdevopen+0x8c>
 1fc:	6e e0       	ldi	r22, 0x0E	; 14
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 68 01 	call	0x2d0	; 0x2d0 <calloc>
 208:	fc 01       	movw	r30, r24
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	a1 f3       	breq	.-24     	; 0x1f6 <fdevopen+0x16>
 20e:	80 e8       	ldi	r24, 0x80	; 128
 210:	83 83       	std	Z+3, r24	; 0x03
 212:	01 15       	cp	r16, r1
 214:	11 05       	cpc	r17, r1
 216:	71 f0       	breq	.+28     	; 0x234 <fdevopen+0x54>
 218:	13 87       	std	Z+11, r17	; 0x0b
 21a:	02 87       	std	Z+10, r16	; 0x0a
 21c:	81 e8       	ldi	r24, 0x81	; 129
 21e:	83 83       	std	Z+3, r24	; 0x03
 220:	80 91 48 01 	lds	r24, 0x0148
 224:	90 91 49 01 	lds	r25, 0x0149
 228:	89 2b       	or	r24, r25
 22a:	21 f4       	brne	.+8      	; 0x234 <fdevopen+0x54>
 22c:	f0 93 49 01 	sts	0x0149, r31
 230:	e0 93 48 01 	sts	0x0148, r30
 234:	20 97       	sbiw	r28, 0x00	; 0
 236:	c9 f0       	breq	.+50     	; 0x26a <fdevopen+0x8a>
 238:	d1 87       	std	Z+9, r29	; 0x09
 23a:	c0 87       	std	Z+8, r28	; 0x08
 23c:	83 81       	ldd	r24, Z+3	; 0x03
 23e:	82 60       	ori	r24, 0x02	; 2
 240:	83 83       	std	Z+3, r24	; 0x03
 242:	80 91 4a 01 	lds	r24, 0x014A
 246:	90 91 4b 01 	lds	r25, 0x014B
 24a:	89 2b       	or	r24, r25
 24c:	71 f4       	brne	.+28     	; 0x26a <fdevopen+0x8a>
 24e:	f0 93 4b 01 	sts	0x014B, r31
 252:	e0 93 4a 01 	sts	0x014A, r30
 256:	80 91 4c 01 	lds	r24, 0x014C
 25a:	90 91 4d 01 	lds	r25, 0x014D
 25e:	89 2b       	or	r24, r25
 260:	21 f4       	brne	.+8      	; 0x26a <fdevopen+0x8a>
 262:	f0 93 4d 01 	sts	0x014D, r31
 266:	e0 93 4c 01 	sts	0x014C, r30
 26a:	cf 01       	movw	r24, r30
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	08 95       	ret

00000276 <puts>:
 276:	0f 93       	push	r16
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	e0 91 4a 01 	lds	r30, 0x014A
 282:	f0 91 4b 01 	lds	r31, 0x014B
 286:	23 81       	ldd	r18, Z+3	; 0x03
 288:	21 ff       	sbrs	r18, 1
 28a:	1b c0       	rjmp	.+54     	; 0x2c2 <puts+0x4c>
 28c:	ec 01       	movw	r28, r24
 28e:	00 e0       	ldi	r16, 0x00	; 0
 290:	10 e0       	ldi	r17, 0x00	; 0
 292:	89 91       	ld	r24, Y+
 294:	60 91 4a 01 	lds	r22, 0x014A
 298:	70 91 4b 01 	lds	r23, 0x014B
 29c:	db 01       	movw	r26, r22
 29e:	18 96       	adiw	r26, 0x08	; 8
 2a0:	ed 91       	ld	r30, X+
 2a2:	fc 91       	ld	r31, X
 2a4:	19 97       	sbiw	r26, 0x09	; 9
 2a6:	88 23       	and	r24, r24
 2a8:	31 f0       	breq	.+12     	; 0x2b6 <puts+0x40>
 2aa:	09 95       	icall
 2ac:	89 2b       	or	r24, r25
 2ae:	89 f3       	breq	.-30     	; 0x292 <puts+0x1c>
 2b0:	0f ef       	ldi	r16, 0xFF	; 255
 2b2:	1f ef       	ldi	r17, 0xFF	; 255
 2b4:	ee cf       	rjmp	.-36     	; 0x292 <puts+0x1c>
 2b6:	8a e0       	ldi	r24, 0x0A	; 10
 2b8:	09 95       	icall
 2ba:	89 2b       	or	r24, r25
 2bc:	11 f4       	brne	.+4      	; 0x2c2 <puts+0x4c>
 2be:	c8 01       	movw	r24, r16
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <puts+0x50>
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	9f ef       	ldi	r25, 0xFF	; 255
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	08 95       	ret

000002d0 <calloc>:
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	86 9f       	mul	r24, r22
 2da:	80 01       	movw	r16, r0
 2dc:	87 9f       	mul	r24, r23
 2de:	10 0d       	add	r17, r0
 2e0:	96 9f       	mul	r25, r22
 2e2:	10 0d       	add	r17, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	c8 01       	movw	r24, r16
 2e8:	0e 94 84 01 	call	0x308	; 0x308 <malloc>
 2ec:	ec 01       	movw	r28, r24
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	29 f0       	breq	.+10     	; 0x2fc <calloc+0x2c>
 2f2:	a8 01       	movw	r20, r16
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	0e 94 ab 02 	call	0x556	; 0x556 <memset>
 2fc:	ce 01       	movw	r24, r28
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <malloc>:
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	91 05       	cpc	r25, r1
 310:	10 f4       	brcc	.+4      	; 0x316 <malloc+0xe>
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	e0 91 50 01 	lds	r30, 0x0150
 31a:	f0 91 51 01 	lds	r31, 0x0151
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	a0 e0       	ldi	r26, 0x00	; 0
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	30 97       	sbiw	r30, 0x00	; 0
 328:	39 f1       	breq	.+78     	; 0x378 <malloc+0x70>
 32a:	40 81       	ld	r20, Z
 32c:	51 81       	ldd	r21, Z+1	; 0x01
 32e:	48 17       	cp	r20, r24
 330:	59 07       	cpc	r21, r25
 332:	b8 f0       	brcs	.+46     	; 0x362 <malloc+0x5a>
 334:	48 17       	cp	r20, r24
 336:	59 07       	cpc	r21, r25
 338:	71 f4       	brne	.+28     	; 0x356 <malloc+0x4e>
 33a:	82 81       	ldd	r24, Z+2	; 0x02
 33c:	93 81       	ldd	r25, Z+3	; 0x03
 33e:	10 97       	sbiw	r26, 0x00	; 0
 340:	29 f0       	breq	.+10     	; 0x34c <malloc+0x44>
 342:	13 96       	adiw	r26, 0x03	; 3
 344:	9c 93       	st	X, r25
 346:	8e 93       	st	-X, r24
 348:	12 97       	sbiw	r26, 0x02	; 2
 34a:	2c c0       	rjmp	.+88     	; 0x3a4 <malloc+0x9c>
 34c:	90 93 51 01 	sts	0x0151, r25
 350:	80 93 50 01 	sts	0x0150, r24
 354:	27 c0       	rjmp	.+78     	; 0x3a4 <malloc+0x9c>
 356:	21 15       	cp	r18, r1
 358:	31 05       	cpc	r19, r1
 35a:	31 f0       	breq	.+12     	; 0x368 <malloc+0x60>
 35c:	42 17       	cp	r20, r18
 35e:	53 07       	cpc	r21, r19
 360:	18 f0       	brcs	.+6      	; 0x368 <malloc+0x60>
 362:	a9 01       	movw	r20, r18
 364:	db 01       	movw	r26, r22
 366:	01 c0       	rjmp	.+2      	; 0x36a <malloc+0x62>
 368:	ef 01       	movw	r28, r30
 36a:	9a 01       	movw	r18, r20
 36c:	bd 01       	movw	r22, r26
 36e:	df 01       	movw	r26, r30
 370:	02 80       	ldd	r0, Z+2	; 0x02
 372:	f3 81       	ldd	r31, Z+3	; 0x03
 374:	e0 2d       	mov	r30, r0
 376:	d7 cf       	rjmp	.-82     	; 0x326 <malloc+0x1e>
 378:	21 15       	cp	r18, r1
 37a:	31 05       	cpc	r19, r1
 37c:	f9 f0       	breq	.+62     	; 0x3bc <malloc+0xb4>
 37e:	28 1b       	sub	r18, r24
 380:	39 0b       	sbc	r19, r25
 382:	24 30       	cpi	r18, 0x04	; 4
 384:	31 05       	cpc	r19, r1
 386:	80 f4       	brcc	.+32     	; 0x3a8 <malloc+0xa0>
 388:	8a 81       	ldd	r24, Y+2	; 0x02
 38a:	9b 81       	ldd	r25, Y+3	; 0x03
 38c:	61 15       	cp	r22, r1
 38e:	71 05       	cpc	r23, r1
 390:	21 f0       	breq	.+8      	; 0x39a <malloc+0x92>
 392:	fb 01       	movw	r30, r22
 394:	93 83       	std	Z+3, r25	; 0x03
 396:	82 83       	std	Z+2, r24	; 0x02
 398:	04 c0       	rjmp	.+8      	; 0x3a2 <malloc+0x9a>
 39a:	90 93 51 01 	sts	0x0151, r25
 39e:	80 93 50 01 	sts	0x0150, r24
 3a2:	fe 01       	movw	r30, r28
 3a4:	32 96       	adiw	r30, 0x02	; 2
 3a6:	44 c0       	rjmp	.+136    	; 0x430 <malloc+0x128>
 3a8:	fe 01       	movw	r30, r28
 3aa:	e2 0f       	add	r30, r18
 3ac:	f3 1f       	adc	r31, r19
 3ae:	81 93       	st	Z+, r24
 3b0:	91 93       	st	Z+, r25
 3b2:	22 50       	subi	r18, 0x02	; 2
 3b4:	31 09       	sbc	r19, r1
 3b6:	39 83       	std	Y+1, r19	; 0x01
 3b8:	28 83       	st	Y, r18
 3ba:	3a c0       	rjmp	.+116    	; 0x430 <malloc+0x128>
 3bc:	20 91 4e 01 	lds	r18, 0x014E
 3c0:	30 91 4f 01 	lds	r19, 0x014F
 3c4:	23 2b       	or	r18, r19
 3c6:	41 f4       	brne	.+16     	; 0x3d8 <malloc+0xd0>
 3c8:	20 91 02 01 	lds	r18, 0x0102
 3cc:	30 91 03 01 	lds	r19, 0x0103
 3d0:	30 93 4f 01 	sts	0x014F, r19
 3d4:	20 93 4e 01 	sts	0x014E, r18
 3d8:	20 91 00 01 	lds	r18, 0x0100
 3dc:	30 91 01 01 	lds	r19, 0x0101
 3e0:	21 15       	cp	r18, r1
 3e2:	31 05       	cpc	r19, r1
 3e4:	41 f4       	brne	.+16     	; 0x3f6 <malloc+0xee>
 3e6:	2d b7       	in	r18, 0x3d	; 61
 3e8:	3e b7       	in	r19, 0x3e	; 62
 3ea:	40 91 04 01 	lds	r20, 0x0104
 3ee:	50 91 05 01 	lds	r21, 0x0105
 3f2:	24 1b       	sub	r18, r20
 3f4:	35 0b       	sbc	r19, r21
 3f6:	e0 91 4e 01 	lds	r30, 0x014E
 3fa:	f0 91 4f 01 	lds	r31, 0x014F
 3fe:	e2 17       	cp	r30, r18
 400:	f3 07       	cpc	r31, r19
 402:	a0 f4       	brcc	.+40     	; 0x42c <malloc+0x124>
 404:	2e 1b       	sub	r18, r30
 406:	3f 0b       	sbc	r19, r31
 408:	28 17       	cp	r18, r24
 40a:	39 07       	cpc	r19, r25
 40c:	78 f0       	brcs	.+30     	; 0x42c <malloc+0x124>
 40e:	ac 01       	movw	r20, r24
 410:	4e 5f       	subi	r20, 0xFE	; 254
 412:	5f 4f       	sbci	r21, 0xFF	; 255
 414:	24 17       	cp	r18, r20
 416:	35 07       	cpc	r19, r21
 418:	48 f0       	brcs	.+18     	; 0x42c <malloc+0x124>
 41a:	4e 0f       	add	r20, r30
 41c:	5f 1f       	adc	r21, r31
 41e:	50 93 4f 01 	sts	0x014F, r21
 422:	40 93 4e 01 	sts	0x014E, r20
 426:	81 93       	st	Z+, r24
 428:	91 93       	st	Z+, r25
 42a:	02 c0       	rjmp	.+4      	; 0x430 <malloc+0x128>
 42c:	e0 e0       	ldi	r30, 0x00	; 0
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	cf 01       	movw	r24, r30
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <free>:
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	00 97       	sbiw	r24, 0x00	; 0
 43e:	09 f4       	brne	.+2      	; 0x442 <free+0xa>
 440:	87 c0       	rjmp	.+270    	; 0x550 <__stack+0x51>
 442:	fc 01       	movw	r30, r24
 444:	32 97       	sbiw	r30, 0x02	; 2
 446:	13 82       	std	Z+3, r1	; 0x03
 448:	12 82       	std	Z+2, r1	; 0x02
 44a:	c0 91 50 01 	lds	r28, 0x0150
 44e:	d0 91 51 01 	lds	r29, 0x0151
 452:	20 97       	sbiw	r28, 0x00	; 0
 454:	81 f4       	brne	.+32     	; 0x476 <free+0x3e>
 456:	20 81       	ld	r18, Z
 458:	31 81       	ldd	r19, Z+1	; 0x01
 45a:	28 0f       	add	r18, r24
 45c:	39 1f       	adc	r19, r25
 45e:	80 91 4e 01 	lds	r24, 0x014E
 462:	90 91 4f 01 	lds	r25, 0x014F
 466:	82 17       	cp	r24, r18
 468:	93 07       	cpc	r25, r19
 46a:	79 f5       	brne	.+94     	; 0x4ca <free+0x92>
 46c:	f0 93 4f 01 	sts	0x014F, r31
 470:	e0 93 4e 01 	sts	0x014E, r30
 474:	6d c0       	rjmp	.+218    	; 0x550 <__stack+0x51>
 476:	de 01       	movw	r26, r28
 478:	20 e0       	ldi	r18, 0x00	; 0
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	ae 17       	cp	r26, r30
 47e:	bf 07       	cpc	r27, r31
 480:	50 f4       	brcc	.+20     	; 0x496 <free+0x5e>
 482:	12 96       	adiw	r26, 0x02	; 2
 484:	4d 91       	ld	r20, X+
 486:	5c 91       	ld	r21, X
 488:	13 97       	sbiw	r26, 0x03	; 3
 48a:	9d 01       	movw	r18, r26
 48c:	41 15       	cp	r20, r1
 48e:	51 05       	cpc	r21, r1
 490:	09 f1       	breq	.+66     	; 0x4d4 <free+0x9c>
 492:	da 01       	movw	r26, r20
 494:	f3 cf       	rjmp	.-26     	; 0x47c <free+0x44>
 496:	b3 83       	std	Z+3, r27	; 0x03
 498:	a2 83       	std	Z+2, r26	; 0x02
 49a:	40 81       	ld	r20, Z
 49c:	51 81       	ldd	r21, Z+1	; 0x01
 49e:	84 0f       	add	r24, r20
 4a0:	95 1f       	adc	r25, r21
 4a2:	8a 17       	cp	r24, r26
 4a4:	9b 07       	cpc	r25, r27
 4a6:	71 f4       	brne	.+28     	; 0x4c4 <free+0x8c>
 4a8:	8d 91       	ld	r24, X+
 4aa:	9c 91       	ld	r25, X
 4ac:	11 97       	sbiw	r26, 0x01	; 1
 4ae:	84 0f       	add	r24, r20
 4b0:	95 1f       	adc	r25, r21
 4b2:	02 96       	adiw	r24, 0x02	; 2
 4b4:	91 83       	std	Z+1, r25	; 0x01
 4b6:	80 83       	st	Z, r24
 4b8:	12 96       	adiw	r26, 0x02	; 2
 4ba:	8d 91       	ld	r24, X+
 4bc:	9c 91       	ld	r25, X
 4be:	13 97       	sbiw	r26, 0x03	; 3
 4c0:	93 83       	std	Z+3, r25	; 0x03
 4c2:	82 83       	std	Z+2, r24	; 0x02
 4c4:	21 15       	cp	r18, r1
 4c6:	31 05       	cpc	r19, r1
 4c8:	29 f4       	brne	.+10     	; 0x4d4 <free+0x9c>
 4ca:	f0 93 51 01 	sts	0x0151, r31
 4ce:	e0 93 50 01 	sts	0x0150, r30
 4d2:	3e c0       	rjmp	.+124    	; 0x550 <__stack+0x51>
 4d4:	d9 01       	movw	r26, r18
 4d6:	13 96       	adiw	r26, 0x03	; 3
 4d8:	fc 93       	st	X, r31
 4da:	ee 93       	st	-X, r30
 4dc:	12 97       	sbiw	r26, 0x02	; 2
 4de:	4d 91       	ld	r20, X+
 4e0:	5d 91       	ld	r21, X+
 4e2:	a4 0f       	add	r26, r20
 4e4:	b5 1f       	adc	r27, r21
 4e6:	ea 17       	cp	r30, r26
 4e8:	fb 07       	cpc	r31, r27
 4ea:	79 f4       	brne	.+30     	; 0x50a <__stack+0xb>
 4ec:	80 81       	ld	r24, Z
 4ee:	91 81       	ldd	r25, Z+1	; 0x01
 4f0:	84 0f       	add	r24, r20
 4f2:	95 1f       	adc	r25, r21
 4f4:	02 96       	adiw	r24, 0x02	; 2
 4f6:	d9 01       	movw	r26, r18
 4f8:	11 96       	adiw	r26, 0x01	; 1
 4fa:	9c 93       	st	X, r25
 4fc:	8e 93       	st	-X, r24
 4fe:	82 81       	ldd	r24, Z+2	; 0x02
 500:	93 81       	ldd	r25, Z+3	; 0x03
 502:	13 96       	adiw	r26, 0x03	; 3
 504:	9c 93       	st	X, r25
 506:	8e 93       	st	-X, r24
 508:	12 97       	sbiw	r26, 0x02	; 2
 50a:	e0 e0       	ldi	r30, 0x00	; 0
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	9b 81       	ldd	r25, Y+3	; 0x03
 512:	00 97       	sbiw	r24, 0x00	; 0
 514:	19 f0       	breq	.+6      	; 0x51c <__stack+0x1d>
 516:	fe 01       	movw	r30, r28
 518:	ec 01       	movw	r28, r24
 51a:	f9 cf       	rjmp	.-14     	; 0x50e <__stack+0xf>
 51c:	ce 01       	movw	r24, r28
 51e:	02 96       	adiw	r24, 0x02	; 2
 520:	28 81       	ld	r18, Y
 522:	39 81       	ldd	r19, Y+1	; 0x01
 524:	82 0f       	add	r24, r18
 526:	93 1f       	adc	r25, r19
 528:	20 91 4e 01 	lds	r18, 0x014E
 52c:	30 91 4f 01 	lds	r19, 0x014F
 530:	28 17       	cp	r18, r24
 532:	39 07       	cpc	r19, r25
 534:	69 f4       	brne	.+26     	; 0x550 <__stack+0x51>
 536:	30 97       	sbiw	r30, 0x00	; 0
 538:	29 f4       	brne	.+10     	; 0x544 <__stack+0x45>
 53a:	10 92 51 01 	sts	0x0151, r1
 53e:	10 92 50 01 	sts	0x0150, r1
 542:	02 c0       	rjmp	.+4      	; 0x548 <__stack+0x49>
 544:	13 82       	std	Z+3, r1	; 0x03
 546:	12 82       	std	Z+2, r1	; 0x02
 548:	d0 93 4f 01 	sts	0x014F, r29
 54c:	c0 93 4e 01 	sts	0x014E, r28
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <memset>:
 556:	dc 01       	movw	r26, r24
 558:	01 c0       	rjmp	.+2      	; 0x55c <memset+0x6>
 55a:	6d 93       	st	X+, r22
 55c:	41 50       	subi	r20, 0x01	; 1
 55e:	50 40       	sbci	r21, 0x00	; 0
 560:	e0 f7       	brcc	.-8      	; 0x55a <memset+0x4>
 562:	08 95       	ret

00000564 <_exit>:
 564:	f8 94       	cli

00000566 <__stop_program>:
 566:	ff cf       	rjmp	.-2      	; 0x566 <__stop_program>
